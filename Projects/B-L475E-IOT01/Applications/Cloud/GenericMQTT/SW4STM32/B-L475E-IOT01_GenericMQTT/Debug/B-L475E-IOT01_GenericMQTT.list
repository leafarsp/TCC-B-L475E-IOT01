
B-L475E-IOT01_GenericMQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 UNINIT_FIXED_LOC 00002a38  08064000  08064000  00054000  2**11
                  ALLOC
  1 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00028098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000bcb8  08028228  08028228  00038228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08033ee0  08033ee0  00050818  2**0
                  CONTENTS
  5 .ARM          00000008  08033ee0  08033ee0  00043ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08033ee8  08033ee8  00050818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08033ee8  08033ee8  00043ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08033ef0  08033ef0  00043ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000818  20000000  08033ef8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001214  20000818  08034710  00050818  2**2
                  ALLOC
 11 ._user_heap_stack 00012004  20001a2c  08034710  00051a2c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050818  2**0
                  CONTENTS, READONLY
 13 .debug_info   000ce75d  00000000  00000000  00050848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00016ace  00000000  00000000  0011efa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0006440d  00000000  00000000  00135a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003d08  00000000  00000000  00199e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000064c0  00000000  00000000  0019db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f63b  00000000  00000000  001a4048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00079b4f  00000000  00000000  001e3683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012358d  00000000  00000000  0025d1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0038075f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000dce0  00000000  00000000  003807b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000818 	.word	0x20000818
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802820c 	.word	0x0802820c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000081c 	.word	0x2000081c
 80001cc:	0802820c 	.word	0x0802820c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9ef 	b.w	8001008 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f883 	bl	8000d44 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f876 	bl	8000d44 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f865 	bl	8000d44 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f857 	bl	8000d44 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <TimingSystemGetSystemTime>:
 * @brief  Get RTC time
* @param  void
* @retval time_t : time retrieved from RTC
 */
time_t 	TimingSystemGetSystemTime(void)
{
 800100c:	b530      	push	{r4, r5, lr}
  struct tm*    pCalendar;
  
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;
  returnTime = 0;  
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 800100e:	4d1d      	ldr	r5, [pc, #116]	; (8001084 <TimingSystemGetSystemTime+0x78>)
{
 8001010:	b087      	sub	sp, #28
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 8001012:	4628      	mov	r0, r5
 8001014:	f021 f91c 	bl	8022250 <gmtime>

  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 8001018:	2200      	movs	r2, #0
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 800101a:	4604      	mov	r4, r0
  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 800101c:	a901      	add	r1, sp, #4
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <TimingSystemGetSystemTime+0x7c>)
 8001020:	f009 ff29 	bl	800ae76 <HAL_RTC_GetTime>
 8001024:	4602      	mov	r2, r0
 8001026:	b128      	cbz	r0, 8001034 <TimingSystemGetSystemTime+0x28>
  returnTime = 0;  
 8001028:	2200      	movs	r2, #0
 800102a:	2300      	movs	r3, #0
#endif
    returnTime        = mktime(pCalendar);
    timeSyncSystem    = returnTime;
  }
  return returnTime;
}
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	b007      	add	sp, #28
 8001032:	bd30      	pop	{r4, r5, pc}
     (HAL_RTC_GetDate(&hrtc,&sdatestructure,FORMAT_BIN)==HAL_OK)) {
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <TimingSystemGetSystemTime+0x7c>)
 8001036:	4669      	mov	r1, sp
 8001038:	f009 ff42 	bl	800aec0 <HAL_RTC_GetDate>
  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 800103c:	2800      	cmp	r0, #0
 800103e:	d1f3      	bne.n	8001028 <TimingSystemGetSystemTime+0x1c>
    pCalendar->tm_year           = sdatestructure.Year +100;
 8001040:	f89d 3003 	ldrb.w	r3, [sp, #3]
    pCalendar->tm_isdst          = 0;
 8001044:	6220      	str	r0, [r4, #32]
    pCalendar->tm_year           = sdatestructure.Year +100;
 8001046:	3364      	adds	r3, #100	; 0x64
 8001048:	6163      	str	r3, [r4, #20]
    pCalendar->tm_mon            = sdatestructure.Month-1;
 800104a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800104e:	3b01      	subs	r3, #1
 8001050:	6123      	str	r3, [r4, #16]
    pCalendar->tm_mday           = sdatestructure.Date;
 8001052:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001056:	60e3      	str	r3, [r4, #12]
    pCalendar->tm_wday           = sdatestructure.WeekDay - 1;
 8001058:	f89d 3000 	ldrb.w	r3, [sp]
 800105c:	3b01      	subs	r3, #1
 800105e:	61a3      	str	r3, [r4, #24]
    pCalendar->tm_hour           = stimestructure.Hours;
 8001060:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001064:	60a3      	str	r3, [r4, #8]
    pCalendar->tm_min            = stimestructure.Minutes;
 8001066:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800106a:	6063      	str	r3, [r4, #4]
    pCalendar->tm_sec            = stimestructure.Seconds;
 800106c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001070:	6023      	str	r3, [r4, #0]
    returnTime        = mktime(pCalendar);
 8001072:	4620      	mov	r0, r4
 8001074:	f021 fb0c 	bl	8022690 <mktime>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
    timeSyncSystem    = returnTime;
 800107c:	e9c5 2300 	strd	r2, r3, [r5]
  return returnTime;
 8001080:	e7d4      	b.n	800102c <TimingSystemGetSystemTime+0x20>
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000
 8001088:	20001174 	.word	0x20001174

0800108c <dialog_ask>:
  * @brief  Ask yes/no question.
  * @param  None
  * @retval None
  */
bool dialog_ask(char *s)
{
 800108c:	b570      	push	{r4, r5, r6, lr}
  char console_yn;
  do
  {
    printf("%s",s);
 800108e:	4e0b      	ldr	r6, [pc, #44]	; (80010bc <dialog_ask+0x30>)
{
 8001090:	4605      	mov	r5, r0
    printf("%s",s);
 8001092:	4629      	mov	r1, r5
 8001094:	4630      	mov	r0, r6
 8001096:	f022 fb1f 	bl	80236d8 <iprintf>
    console_yn= getchar();
 800109a:	f021 f8c7 	bl	802222c <getchar>
 800109e:	b2c4      	uxtb	r4, r0
    printf("\b");
 80010a0:	2008      	movs	r0, #8
 80010a2:	f022 fb31 	bl	8023708 <putchar>
  }
  while((console_yn != 'y') && (console_yn != 'n') && (console_yn != '\n'));
 80010a6:	2c79      	cmp	r4, #121	; 0x79
 80010a8:	d005      	beq.n	80010b6 <dialog_ask+0x2a>
 80010aa:	2c6e      	cmp	r4, #110	; 0x6e
 80010ac:	d001      	beq.n	80010b2 <dialog_ask+0x26>
 80010ae:	2c0a      	cmp	r4, #10
 80010b0:	d1ef      	bne.n	8001092 <dialog_ask+0x6>
  if (console_yn == 'y') return true;
  return false;
 80010b2:	2000      	movs	r0, #0
 80010b4:	e000      	b.n	80010b8 <dialog_ask+0x2c>
  if (console_yn == 'y') return true;
 80010b6:	2001      	movs	r0, #1
}
 80010b8:	bd70      	pop	{r4, r5, r6, pc}
 80010ba:	bf00      	nop
 80010bc:	08031683 	.word	0x08031683

080010c0 <CLOUD_Error_Handler>:
  * @param  None
  * @retval None
  */
void CLOUD_Error_Handler(int errorCode)
{
  switch (errorCode)
 80010c0:	3008      	adds	r0, #8
{
 80010c2:	b508      	push	{r3, lr}
 80010c4:	2806      	cmp	r0, #6
 80010c6:	d808      	bhi.n	80010da <CLOUD_Error_Handler+0x1a>
 80010c8:	e8df f000 	tbb	[pc, r0]
 80010cc:	12141604 	.word	0x12141604
 80010d0:	0e10      	.short	0x0e10
 80010d2:	04          	.byte	0x04
 80010d3:	00          	.byte	0x00
  {
    case (CLOUD_DEMO_C2C_INITIALIZATION_ERROR):
    case (CLOUD_DEMO_WIFI_INITIALIZATION_ERROR):
    {
      printf("Error initializing the module!\n");
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <CLOUD_Error_Handler+0x3c>)
      
      break;
    }
    case (CLOUD_DEMO_TIMEDATE_ERROR):
    {
      printf("Error initializing the RTC from the network time!\n");
 80010d6:	f022 fb9b 	bl	8023810 <puts>
    }
  }
  
  while (1)
  {
    BSP_LED_Toggle(LED_GREEN);
 80010da:	2000      	movs	r0, #0
 80010dc:	f004 f852 	bl	8005184 <BSP_LED_Toggle>
    HAL_Delay(200);
 80010e0:	20c8      	movs	r0, #200	; 0xc8
 80010e2:	f007 fdb3 	bl	8008c4c <HAL_Delay>
  while (1)
 80010e6:	e7f8      	b.n	80010da <CLOUD_Error_Handler+0x1a>
      printf("Error detecting module!\n");
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <CLOUD_Error_Handler+0x40>)
 80010ea:	e7f4      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error connecting to AP!\n");
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <CLOUD_Error_Handler+0x44>)
 80010ee:	e7f2      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error retrieving IP address!\n");
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <CLOUD_Error_Handler+0x48>)
 80010f2:	e7f0      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error connecting to Cloud!\n");
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <CLOUD_Error_Handler+0x4c>)
 80010f6:	e7ee      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error initializing the RTC from the network time!\n");
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <CLOUD_Error_Handler+0x50>)
 80010fa:	e7ec      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
 80010fc:	0802d734 	.word	0x0802d734
 8001100:	0802d753 	.word	0x0802d753
 8001104:	0802d76b 	.word	0x0802d76b
 8001108:	0802d783 	.word	0x0802d783
 800110c:	0802d7a0 	.word	0x0802d7a0
 8001110:	0802d7bb 	.word	0x0802d7bb

08001114 <platform_init>:


const firmware_version_t version = { FW_VERSION_NAME, FW_VERSION_MAJOR, FW_VERSION_MINOR, FW_VERSION_PATCH, FW_VERSION_DATE};

int platform_init(void)
{
 8001114:	b510      	push	{r4, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
  net_ipaddr_t ipAddr;
  net_macaddr_t macAddr;
  const firmware_version_t  *fw_version=&version;;
  unsigned int random_number = 0;
 8001118:	2300      	movs	r3, #0
#ifdef HEAP_DEBUG
  stack_measure_prologue();
#endif
  
  /* Initialize the seed of the stdlib rand() SW implementation from the RNG. */
  if (HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t *) &random_number) == HAL_OK)
 800111a:	485a      	ldr	r0, [pc, #360]	; (8001284 <platform_init+0x170>)
  unsigned int random_number = 0;
 800111c:	9304      	str	r3, [sp, #16]
  if (HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t *) &random_number) == HAL_OK)
 800111e:	a904      	add	r1, sp, #16
 8001120:	f009 fd01 	bl	800ab26 <HAL_RNG_GenerateRandomNumber>
 8001124:	b910      	cbnz	r0, 800112c <platform_init+0x18>
  {
    srand(random_number);
 8001126:	9804      	ldr	r0, [sp, #16]
 8001128:	f022 fb7a 	bl	8023820 <srand>
  }

  printf("\n");
 800112c:	200a      	movs	r0, #10
 800112e:	f022 faeb 	bl	8023708 <putchar>
  printf("*************************************************************\n");
 8001132:	4855      	ldr	r0, [pc, #340]	; (8001288 <platform_init+0x174>)
  printf("*************************************************************\n");

  
  printf("\n*** Board personalization ***\n\n");
  /* Network initialization */
  if (net_init(&hnet, NET_IF, (net_if_init)) != NET_OK)
 8001134:	4c55      	ldr	r4, [pc, #340]	; (800128c <platform_init+0x178>)
  printf("*************************************************************\n");
 8001136:	f022 fb6b 	bl	8023810 <puts>
  printf("***   STM32 IoT Discovery kit for                         \n");
 800113a:	4855      	ldr	r0, [pc, #340]	; (8001290 <platform_init+0x17c>)
 800113c:	f022 fb68 	bl	8023810 <puts>
  printf("***      STM32F413/STM32F769/STM32L475/STM32L496 MCU      \n");
 8001140:	4854      	ldr	r0, [pc, #336]	; (8001294 <platform_init+0x180>)
 8001142:	f022 fb65 	bl	8023810 <puts>
  printf("***   %s Cloud Connectivity Demonstration                 \n",fw_version->name);
 8001146:	4954      	ldr	r1, [pc, #336]	; (8001298 <platform_init+0x184>)
 8001148:	4854      	ldr	r0, [pc, #336]	; (800129c <platform_init+0x188>)
 800114a:	f022 fac5 	bl	80236d8 <iprintf>
  printf("***   FW version %d.%d.%d - %s      \n",
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <platform_init+0x18c>)
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	461a      	mov	r2, r3
 8001156:	2101      	movs	r1, #1
 8001158:	4852      	ldr	r0, [pc, #328]	; (80012a4 <platform_init+0x190>)
 800115a:	f022 fabd 	bl	80236d8 <iprintf>
  printf("*************************************************************\n");
 800115e:	484a      	ldr	r0, [pc, #296]	; (8001288 <platform_init+0x174>)
 8001160:	f022 fb56 	bl	8023810 <puts>
  printf("\n*** Board personalization ***\n\n");
 8001164:	4850      	ldr	r0, [pc, #320]	; (80012a8 <platform_init+0x194>)
 8001166:	f022 fb53 	bl	8023810 <puts>
  if (net_init(&hnet, NET_IF, (net_if_init)) != NET_OK)
 800116a:	4a50      	ldr	r2, [pc, #320]	; (80012ac <platform_init+0x198>)
 800116c:	2101      	movs	r1, #1
 800116e:	4620      	mov	r0, r4
 8001170:	f000 fd70 	bl	8001c54 <net_init>
 8001174:	b110      	cbz	r0, 800117c <platform_init+0x68>
      case NET_IP_V4:
        msg_info("IP address: %d.%d.%d.%d\n", ipAddr.ip[12], ipAddr.ip[13], ipAddr.ip[14], ipAddr.ip[15]);
        break;
      case NET_IP_V6:
      default:
        CLOUD_Error_Handler(CLOUD_DEMO_IP_ADDRESS_ERROR);
 8001176:	f06f 0004 	mvn.w	r0, #4
 800117a:	e043      	b.n	8001204 <platform_init+0xf0>
  if (net_get_mac_address(hnet, &macAddr) == NET_OK)
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	a905      	add	r1, sp, #20
 8001180:	f000 fe16 	bl	8001db0 <net_get_mac_address>
 8001184:	2800      	cmp	r0, #0
 8001186:	d13b      	bne.n	8001200 <platform_init+0xec>
    msg_info("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n",
 8001188:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001198:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800119c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4843      	ldr	r0, [pc, #268]	; (80012b0 <platform_init+0x19c>)
 80011a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80011a8:	f022 fa96 	bl	80236d8 <iprintf>
  HAL_Delay(500);
 80011ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b0:	f007 fd4c 	bl	8008c4c <HAL_Delay>
  msg_info("Retrieving the IP address.\n");
 80011b4:	483f      	ldr	r0, [pc, #252]	; (80012b4 <platform_init+0x1a0>)
 80011b6:	f022 fb2b 	bl	8023810 <puts>
  if (net_get_ip_address(hnet, &ipAddr) != NET_OK)
 80011ba:	6820      	ldr	r0, [r4, #0]
 80011bc:	a907      	add	r1, sp, #28
 80011be:	f000 fdc7 	bl	8001d50 <net_get_ip_address>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d1d7      	bne.n	8001176 <platform_init+0x62>
    switch(ipAddr.ipv)
 80011c6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1d3      	bne.n	8001176 <platform_init+0x62>
        msg_info("IP address: %d.%d.%d.%d\n", ipAddr.ip[12], ipAddr.ip[13], ipAddr.ip[14], ipAddr.ip[15]);
 80011ce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80011d2:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80011d6:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4836      	ldr	r0, [pc, #216]	; (80012b8 <platform_init+0x1a4>)
 80011de:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80011e2:	f022 fa79 	bl	80236d8 <iprintf>
  /* Security and cloud parameters definition */
  /* Define, or allow to update if the user button is pushed. */
  
  
  
  skip_reconf = (checkTLSRootCA() == 0)
 80011e6:	f000 fb0b 	bl	8001800 <checkTLSRootCA>
    && ( (checkTLSDeviceConfig() == 0) || !app_needs_device_keypair() )
    && (checkIoTDeviceConfig() == 0);
 80011ea:	b168      	cbz	r0, 8001208 <platform_init+0xf4>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
  }
  
  if (skip_reconf == false)
  {
    if ((checkIoTDeviceConfig() != 0) || dialog_ask("Do you want to update your IoT device connection parameters? (y/n)\n"))
 80011ec:	f000 fc44 	bl	8001a78 <checkIoTDeviceConfig>
 80011f0:	bb40      	cbnz	r0, 8001244 <platform_init+0x130>
 80011f2:	4832      	ldr	r0, [pc, #200]	; (80012bc <platform_init+0x1a8>)
 80011f4:	f7ff ff4a 	bl	800108c <dialog_ask>
 80011f8:	bb20      	cbnz	r0, 8001244 <platform_init+0x130>
      {
        msg_error("Failed configuring the IoT device.\n");
      }
    }
#if defined(USE_MBED_TLS) || (!defined(USE_CLEAR_TIMEDATE))
    updateTLSCredentials();
 80011fa:	f000 fb31 	bl	8001860 <updateTLSCredentials>
 80011fe:	e017      	b.n	8001230 <platform_init+0x11c>
    CLOUD_Error_Handler(CLOUD_DEMO_MAC_ADDRESS_ERROR);
 8001200:	f06f 0002 	mvn.w	r0, #2
 8001204:	f7ff ff5c 	bl	80010c0 <CLOUD_Error_Handler>
    && ( (checkTLSDeviceConfig() == 0) || !app_needs_device_keypair() )
 8001208:	f000 fb12 	bl	8001830 <checkTLSDeviceConfig>
 800120c:	b118      	cbz	r0, 8001216 <platform_init+0x102>
 800120e:	f002 faf5 	bl	80037fc <app_needs_device_keypair>
 8001212:	2800      	cmp	r0, #0
 8001214:	d1ea      	bne.n	80011ec <platform_init+0xd8>
    && (checkIoTDeviceConfig() == 0);
 8001216:	f000 fc2f 	bl	8001a78 <checkIoTDeviceConfig>
  if (skip_reconf == true)
 800121a:	2800      	cmp	r0, #0
 800121c:	d1e6      	bne.n	80011ec <platform_init+0xd8>
    printf("Push the User button (Blue) within the next 5 seconds if you want to update "
 800121e:	4828      	ldr	r0, [pc, #160]	; (80012c0 <platform_init+0x1ac>)
 8001220:	f022 faf6 	bl	8023810 <puts>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
 8001224:	f241 3088 	movw	r0, #5000	; 0x1388
 8001228:	f002 ffe0 	bl	80041ec <Button_WaitForPush>
  if (skip_reconf == false)
 800122c:	2800      	cmp	r0, #0
 800122e:	d1dd      	bne.n	80011ec <platform_init+0xd8>
#endif
  }
  /* End of security and cloud parameters definition */
  
  msg_info("Setting the RTC from the network time.\n");
 8001230:	4824      	ldr	r0, [pc, #144]	; (80012c4 <platform_init+0x1b0>)
 8001232:	f022 faed 	bl	8023810 <puts>
#ifdef CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE
  if (setRTCTimeDateFromNetwork(true) != TD_OK)
 8001236:	2001      	movs	r0, #1
 8001238:	f001 fe0e 	bl	8002e58 <setRTCTimeDateFromNetwork>
 800123c:	b180      	cbz	r0, 8001260 <platform_init+0x14c>
#else   /* CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE */
    if ( (setRTCTimeDateFromNetwork(false) != TD_OK) && (setRTCTimeDateFromNetwork(true) != TD_OK) )
#endif  /* CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE */
  
  {
    CLOUD_Error_Handler(CLOUD_DEMO_TIMEDATE_ERROR);
 800123e:	f06f 0006 	mvn.w	r0, #6
 8001242:	e7df      	b.n	8001204 <platform_init+0xf0>
      if (cloud_device_enter_credentials() != 0)
 8001244:	f002 f9b0 	bl	80035a8 <cloud_device_enter_credentials>
 8001248:	2800      	cmp	r0, #0
 800124a:	d0d6      	beq.n	80011fa <platform_init+0xe6>
        msg_error("Failed configuring the IoT device.\n");
 800124c:	491e      	ldr	r1, [pc, #120]	; (80012c8 <platform_init+0x1b4>)
 800124e:	481f      	ldr	r0, [pc, #124]	; (80012cc <platform_init+0x1b8>)
 8001250:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001254:	f022 fa40 	bl	80236d8 <iprintf>
 8001258:	481d      	ldr	r0, [pc, #116]	; (80012d0 <platform_init+0x1bc>)
 800125a:	f022 fad9 	bl	8023810 <puts>
 800125e:	e7cc      	b.n	80011fa <platform_init+0xe6>
#if defined(RFU) && !defined(FIREWALL_MBEDLIB)
    updateFirmwareVersion();
#endif  /* RFU */
  
#ifdef SENSOR
  int res = init_sensors();
 8001260:	f001 fd8e 	bl	8002d80 <init_sensors>
  if(0 != res)
 8001264:	4604      	mov	r4, r0
 8001266:	b148      	cbz	r0, 800127c <platform_init+0x168>
  {
    msg_error("init_sensors returned error : %d\n", res);
 8001268:	4917      	ldr	r1, [pc, #92]	; (80012c8 <platform_init+0x1b4>)
 800126a:	4818      	ldr	r0, [pc, #96]	; (80012cc <platform_init+0x1b8>)
 800126c:	f240 1225 	movw	r2, #293	; 0x125
 8001270:	f022 fa32 	bl	80236d8 <iprintf>
 8001274:	4817      	ldr	r0, [pc, #92]	; (80012d4 <platform_init+0x1c0>)
 8001276:	4621      	mov	r1, r4
 8001278:	f022 fa2e 	bl	80236d8 <iprintf>
  }
#endif /* SENSOR */
   
 return 0;
}
 800127c:	2000      	movs	r0, #0
 800127e:	b00c      	add	sp, #48	; 0x30
 8001280:	bd10      	pop	{r4, pc}
 8001282:	bf00      	nop
 8001284:	200011d8 	.word	0x200011d8
 8001288:	0802d7ed 	.word	0x0802d7ed
 800128c:	200011e4 	.word	0x200011e4
 8001290:	0802d82b 	.word	0x0802d82b
 8001294:	0802d866 	.word	0x0802d866
 8001298:	08028228 	.word	0x08028228
 800129c:	0802d8a1 	.word	0x0802d8a1
 80012a0:	0802d903 	.word	0x0802d903
 80012a4:	0802d8dd 	.word	0x0802d8dd
 80012a8:	0802d91d 	.word	0x0802d91d
 80012ac:	08003261 	.word	0x08003261
 80012b0:	0802d93d 	.word	0x0802d93d
 80012b4:	0802d969 	.word	0x0802d969
 80012b8:	0802d984 	.word	0x0802d984
 80012bc:	0802da19 	.word	0x0802da19
 80012c0:	0802d99d 	.word	0x0802d99d
 80012c4:	0802da90 	.word	0x0802da90
 80012c8:	08028244 	.word	0x08028244
 80012cc:	0802da5d 	.word	0x0802da5d
 80012d0:	0802da6d 	.word	0x0802da6d
 80012d4:	0802dab7 	.word	0x0802dab7

080012d8 <platform_deinit>:


void    platform_deinit()
{
 80012d8:	b508      	push	{r3, lr}
   /* Close Cloud connectivity demonstration */
  printf("\n*** Cloud connectivity demonstration ***\n\n");
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <platform_deinit+0x1c>)
 80012dc:	f022 fa98 	bl	8023810 <puts>
  printf("Cloud connectivity demonstration completed\n");
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <platform_deinit+0x20>)
 80012e2:	f022 fa95 	bl	8023810 <puts>


  (void)net_deinit(hnet, (net_if_deinit));
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <platform_deinit+0x24>)
 80012e8:	4905      	ldr	r1, [pc, #20]	; (8001300 <platform_deinit+0x28>)
 80012ea:	6818      	ldr	r0, [r3, #0]
#endif

  heap_stat(&heap_max,&heap_current,&stack_size);
  msg_info("Heap Max allocation 0x%x (%d), current allocation 0x%x (%d), Stack max size 0x%x (%d)\n",heap_max,heap_max,heap_current,heap_current,stack_size,stack_size);
#endif
}
 80012ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  (void)net_deinit(hnet, (net_if_deinit));
 80012f0:	f000 bcee 	b.w	8001cd0 <net_deinit>
 80012f4:	0802dad9 	.word	0x0802dad9
 80012f8:	0802db04 	.word	0x0802db04
 80012fc:	200011e4 	.word	0x200011e4
 8001300:	080033a1 	.word	0x080033a1

08001304 <mbedtls_hardware_poll>:
                    unsigned char *output, size_t len, size_t *olen );


int mbedtls_hardware_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
 8001304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001306:	4616      	mov	r6, r2
 8001308:	461c      	mov	r4, r3
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t random_number = 0;
 800130a:	2700      	movs	r7, #0
  
  status = HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <mbedtls_hardware_poll+0x2c>)
  uint32_t random_number = 0;
 800130e:	9701      	str	r7, [sp, #4]
{
 8001310:	460d      	mov	r5, r1
  status = HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 8001312:	a901      	add	r1, sp, #4
 8001314:	f009 fc07 	bl	800ab26 <HAL_RNG_GenerateRandomNumber>
  ((void) data);
  *olen = 0;
  
  if ((len < sizeof(uint32_t)) || (HAL_OK != status))
 8001318:	2e03      	cmp	r6, #3
  *olen = 0;
 800131a:	6027      	str	r7, [r4, #0]
  if ((len < sizeof(uint32_t)) || (HAL_OK != status))
 800131c:	d904      	bls.n	8001328 <mbedtls_hardware_poll+0x24>
 800131e:	b918      	cbnz	r0, 8001328 <mbedtls_hardware_poll+0x24>
  {
    return 0;
  }
  
  memcpy(output, &random_number, sizeof(uint32_t));
 8001320:	9b01      	ldr	r3, [sp, #4]
 8001322:	602b      	str	r3, [r5, #0]
  *olen = sizeof(uint32_t);
 8001324:	2304      	movs	r3, #4
 8001326:	6023      	str	r3, [r4, #0]
  
  return 0;
}
 8001328:	2000      	movs	r0, #0
 800132a:	b003      	add	sp, #12
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132e:	bf00      	nop
 8001330:	200011d8 	.word	0x200011d8

08001334 <FLASH_get_pageInBank>:
  */
static int FLASH_get_pageInBank(uint32_t addr)
{
  int page = -1;

  if ( ((FLASH_BASE + FLASH_SIZE) > addr) && (addr >= FLASH_BASE) )
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <FLASH_get_pageInBank+0x58>)
 8001336:	8819      	ldrh	r1, [r3, #0]
 8001338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133c:	4299      	cmp	r1, r3
 800133e:	bf1d      	ittte	ne
 8001340:	4a13      	ldrne	r2, [pc, #76]	; (8001390 <FLASH_get_pageInBank+0x5c>)
 8001342:	ea02 2281 	andne.w	r2, r2, r1, lsl #10
 8001346:	f102 6200 	addne.w	r2, r2, #134217728	; 0x8000000
 800134a:	f04f 6201 	moveq.w	r2, #135266304	; 0x8100000
 800134e:	4282      	cmp	r2, r0
 8001350:	d911      	bls.n	8001376 <FLASH_get_pageInBank+0x42>
 8001352:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001356:	d30e      	bcc.n	8001376 <FLASH_get_pageInBank+0x42>
  {
    /* The address is in internal FLASH range. */
    if ( addr < (FLASH_BASE + FLASH_BANK_SIZE) )
 8001358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135c:	4299      	cmp	r1, r3
 800135e:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8001362:	d00b      	beq.n	800137c <FLASH_get_pageInBank+0x48>
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <FLASH_get_pageInBank+0x60>)
 8001366:	ea02 2241 	and.w	r2, r2, r1, lsl #9
 800136a:	f102 6100 	add.w	r1, r2, #134217728	; 0x8000000
 800136e:	4288      	cmp	r0, r1
 8001370:	d209      	bcs.n	8001386 <FLASH_get_pageInBank+0x52>
    { 
      /* Addr in the first bank */
      page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8001372:	0ad8      	lsrs	r0, r3, #11
 8001374:	4770      	bx	lr
  int page = -1;
 8001376:	f04f 30ff 	mov.w	r0, #4294967295
      page = (addr - FLASH_BASE - FLASH_BANK_SIZE) / FLASH_PAGE_SIZE;
    }
  }
  
  return page;
}
 800137a:	4770      	bx	lr
    if ( addr < (FLASH_BASE + FLASH_BANK_SIZE) )
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <FLASH_get_pageInBank+0x64>)
 800137e:	4290      	cmp	r0, r2
 8001380:	d9f7      	bls.n	8001372 <FLASH_get_pageInBank+0x3e>
      page = (addr - FLASH_BASE - FLASH_BANK_SIZE) / FLASH_PAGE_SIZE;
 8001382:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001386:	1a98      	subs	r0, r3, r2
 8001388:	0ac0      	lsrs	r0, r0, #11
 800138a:	4770      	bx	lr
 800138c:	1fff75e0 	.word	0x1fff75e0
 8001390:	003ffc00 	.word	0x003ffc00
 8001394:	001ffe00 	.word	0x001ffe00
 8001398:	0807ffff 	.word	0x0807ffff

0800139c <FLASH_get_bank>:
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <FLASH_get_bank+0x48>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <FLASH_get_bank+0x4c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	8812      	ldrh	r2, [r2, #0]
 80013a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ac:	d10c      	bne.n	80013c8 <FLASH_get_bank+0x2c>
    bank = (addr < (FLASH_BASE + FLASH_BANK_SIZE)) ? FLASH_BANK_1 : FLASH_BANK_2;
 80013ae:	429a      	cmp	r2, r3
 80013b0:	bf17      	itett	ne
 80013b2:	4b0e      	ldrne	r3, [pc, #56]	; (80013ec <FLASH_get_bank+0x50>)
 80013b4:	4b0e      	ldreq	r3, [pc, #56]	; (80013f0 <FLASH_get_bank+0x54>)
 80013b6:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 80013ba:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 80013be:	4298      	cmp	r0, r3
 80013c0:	bf2c      	ite	cs
 80013c2:	2002      	movcs	r0, #2
 80013c4:	2001      	movcc	r0, #1
 80013c6:	4770      	bx	lr
    bank = (addr < (FLASH_BASE + FLASH_BANK_SIZE)) ? FLASH_BANK_2 : FLASH_BANK_1;
 80013c8:	429a      	cmp	r2, r3
 80013ca:	bf17      	itett	ne
 80013cc:	4b07      	ldrne	r3, [pc, #28]	; (80013ec <FLASH_get_bank+0x50>)
 80013ce:	4b08      	ldreq	r3, [pc, #32]	; (80013f0 <FLASH_get_bank+0x54>)
 80013d0:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 80013d4:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 80013d8:	4283      	cmp	r3, r0
 80013da:	bf94      	ite	ls
 80013dc:	2001      	movls	r0, #1
 80013de:	2002      	movhi	r0, #2
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40010000 	.word	0x40010000
 80013e8:	1fff75e0 	.word	0x1fff75e0
 80013ec:	001ffe00 	.word	0x001ffe00
 80013f0:	08080000 	.word	0x08080000

080013f4 <FLASH_update>:
  int ret = 0;
  int remaining = size;
  uint8_t * src_addr = (uint8_t *) data;
  uint64_t page_cache[FLASH_PAGE_SIZE/sizeof(uint64_t)];
 
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013f4:	4b4f      	ldr	r3, [pc, #316]	; (8001534 <FLASH_update+0x140>)
{
 80013f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013fa:	4691      	mov	r9, r2
  int remaining = size;
 80013fc:	4692      	mov	sl, r2
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013fe:	699a      	ldr	r2, [r3, #24]
      printf("Write failed @0x%08lx, read value=0x%08lx, expected=0x%08lx\n", (uint32_t) dst, *dst, *src);
 8001400:	f8df b140 	ldr.w	fp, [pc, #320]	; 8001544 <FLASH_update+0x150>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001404:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001408:	619a      	str	r2, [r3, #24]
 800140a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
{
 800140e:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 8001412:	4607      	mov	r7, r0
 8001414:	4688      	mov	r8, r1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001416:	611a      	str	r2, [r3, #16]

  do {
    uint32_t fl_addr = ROUND_DOWN(dst_addr, FLASH_PAGE_SIZE);
 8001418:	f427 64ff 	bic.w	r4, r7, #2040	; 0x7f8
 800141c:	f024 0407 	bic.w	r4, r4, #7
    int fl_offset = dst_addr - fl_addr;
    int len = MIN(FLASH_PAGE_SIZE - fl_offset, size);
 8001420:	1be6      	subs	r6, r4, r7
 8001422:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001426:	454e      	cmp	r6, r9
    
    /* Load from the flash into the cache */
    memcpy(page_cache, (void *) fl_addr, FLASH_PAGE_SIZE);  
 8001428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142c:	4621      	mov	r1, r4
 800142e:	a806      	add	r0, sp, #24
    int len = MIN(FLASH_PAGE_SIZE - fl_offset, size);
 8001430:	bf28      	it	cs
 8001432:	464e      	movcs	r6, r9
    memcpy(page_cache, (void *) fl_addr, FLASH_PAGE_SIZE);  
 8001434:	f021 f824 	bl	8022480 <memcpy>
    /* Update the cache from the source */
    memcpy((uint8_t *)page_cache + fl_offset, src_addr, len);
 8001438:	ab06      	add	r3, sp, #24
    int fl_offset = dst_addr - fl_addr;
 800143a:	1b38      	subs	r0, r7, r4
    memcpy((uint8_t *)page_cache + fl_offset, src_addr, len);
 800143c:	4632      	mov	r2, r6
 800143e:	4641      	mov	r1, r8
 8001440:	4418      	add	r0, r3
 8001442:	f021 f81d 	bl	8022480 <memcpy>
  uint32_t PageError = 0;
 8001446:	2300      	movs	r3, #0
  EraseInit.Banks = FLASH_get_bank(address); 
 8001448:	4620      	mov	r0, r4
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800144a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  EraseInit.Banks = FLASH_get_bank(address); 
 800144e:	f7ff ffa5 	bl	800139c <FLASH_get_bank>
 8001452:	4601      	mov	r1, r0
 8001454:	9003      	str	r0, [sp, #12]
  if (EraseInit.Banks != FLASH_get_bank(address + len_bytes))
 8001456:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 800145a:	f7ff ff9f 	bl	800139c <FLASH_get_bank>
 800145e:	4281      	cmp	r1, r0
 8001460:	d00d      	beq.n	800147e <FLASH_update+0x8a>
    printf("Error: Cannot erase across FLASH banks.\n");
 8001462:	4835      	ldr	r0, [pc, #212]	; (8001538 <FLASH_update+0x144>)
 8001464:	f022 f9d4 	bl	8023810 <puts>
    /* Erase the page, and write the cache */
    ret = FLASH_unlock_erase(fl_addr, FLASH_PAGE_SIZE);
    if (ret != 0)
    {
#ifndef CODE_UNDER_FIREWALL
      printf("Error erasing at 0x%08lx\n", fl_addr);
 8001468:	4834      	ldr	r0, [pc, #208]	; (800153c <FLASH_update+0x148>)
 800146a:	4621      	mov	r1, r4
 800146c:	f022 f934 	bl	80236d8 <iprintf>
 8001470:	f04f 35ff 	mov.w	r5, #4294967295
      }
    }
  } while ((ret == 0) && (remaining > 0));
  
  return ret;
}
 8001474:	4628      	mov	r0, r5
 8001476:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 800147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EraseInit.Page = FLASH_get_pageInBank(address);
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff ff58 	bl	8001334 <FLASH_get_pageInBank>
 8001484:	4605      	mov	r5, r0
 8001486:	9004      	str	r0, [sp, #16]
    EraseInit.NbPages = FLASH_get_pageInBank(address + len_bytes - 1) - EraseInit.Page + 1;
 8001488:	f204 70ff 	addw	r0, r4, #2047	; 0x7ff
 800148c:	f7ff ff52 	bl	8001334 <FLASH_get_pageInBank>
 8001490:	1c43      	adds	r3, r0, #1
 8001492:	1b5b      	subs	r3, r3, r5
 8001494:	9305      	str	r3, [sp, #20]
    HAL_FLASH_Unlock();
 8001496:	f007 fd05 	bl	8008ea4 <HAL_FLASH_Unlock>
    if (HAL_FLASHEx_Erase(&EraseInit, &PageError) == HAL_OK)
 800149a:	a901      	add	r1, sp, #4
 800149c:	a802      	add	r0, sp, #8
 800149e:	f007 fe0d 	bl	80090bc <HAL_FLASHEx_Erase>
 80014a2:	b120      	cbz	r0, 80014ae <FLASH_update+0xba>
      printf("Error erasing at 0x%08lx\n", address);
 80014a4:	4621      	mov	r1, r4
 80014a6:	4825      	ldr	r0, [pc, #148]	; (800153c <FLASH_update+0x148>)
 80014a8:	f022 f916 	bl	80236d8 <iprintf>
    if (ret != 0)
 80014ac:	e7dc      	b.n	8001468 <FLASH_update+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ae:	b672      	cpsid	i
  for (i = 0; i < len_bytes; i += 8)
 80014b0:	4605      	mov	r5, r0
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 80014b2:	f60d 0218 	addw	r2, sp, #2072	; 0x818
 80014b6:	f025 0307 	bic.w	r3, r5, #7
 80014ba:	4413      	add	r3, r2
 80014bc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	1929      	adds	r1, r5, r4
 80014c6:	2000      	movs	r0, #0
 80014c8:	f007 fd42 	bl	8008f50 <HAL_FLASH_Program>
 80014cc:	b9f0      	cbnz	r0, 800150c <FLASH_update+0x118>
  for (i = 0; i < len_bytes; i += 8)
 80014ce:	3508      	adds	r5, #8
 80014d0:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80014d4:	d1ed      	bne.n	80014b2 <FLASH_update+0xbe>
  int ret = -1;
 80014d6:	f04f 35ff 	mov.w	r5, #4294967295
    if ( *dst != *src )
 80014da:	f020 0303 	bic.w	r3, r0, #3
 80014de:	f60d 0c18 	addw	ip, sp, #2072	; 0x818
 80014e2:	4463      	add	r3, ip
 80014e4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80014e8:	5902      	ldr	r2, [r0, r4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	eb00 0104 	add.w	r1, r0, r4
 80014f2:	d00f      	beq.n	8001514 <FLASH_update+0x120>
      printf("Write failed @0x%08lx, read value=0x%08lx, expected=0x%08lx\n", (uint32_t) dst, *dst, *src);
 80014f4:	4658      	mov	r0, fp
 80014f6:	f022 f8ef 	bl	80236d8 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 80014fa:	b662      	cpsie	i
      if(ret != 0)
 80014fc:	b18d      	cbz	r5, 8001522 <FLASH_update+0x12e>
        printf("Error writing %lu bytes at 0x%08lx\n", FLASH_PAGE_SIZE, fl_addr);
 80014fe:	4622      	mov	r2, r4
 8001500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001504:	480e      	ldr	r0, [pc, #56]	; (8001540 <FLASH_update+0x14c>)
 8001506:	f022 f8e7 	bl	80236d8 <iprintf>
 800150a:	e7b1      	b.n	8001470 <FLASH_update+0x7c>
  int ret = -1;
 800150c:	f04f 35ff 	mov.w	r5, #4294967295
  for (i = 0; i < len_bytes; i += 4)
 8001510:	2000      	movs	r0, #0
 8001512:	e7e2      	b.n	80014da <FLASH_update+0xe6>
 8001514:	3004      	adds	r0, #4
 8001516:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    ret = 0;
 800151a:	f04f 0500 	mov.w	r5, #0
  for (i = 0; i < len_bytes; i += 4)
 800151e:	d1dc      	bne.n	80014da <FLASH_update+0xe6>
 8001520:	e7eb      	b.n	80014fa <FLASH_update+0x106>
        remaining -= len;
 8001522:	ebaa 0a06 	sub.w	sl, sl, r6
  } while ((ret == 0) && (remaining > 0));
 8001526:	f1ba 0f00 	cmp.w	sl, #0
        dst_addr += len;
 800152a:	4437      	add	r7, r6
        src_addr += len;
 800152c:	44b0      	add	r8, r6
  } while ((ret == 0) && (remaining > 0));
 800152e:	f73f af73 	bgt.w	8001418 <FLASH_update+0x24>
 8001532:	e79f      	b.n	8001474 <FLASH_update+0x80>
 8001534:	40022000 	.word	0x40022000
 8001538:	0802db6f 	.word	0x0802db6f
 800153c:	0802db97 	.word	0x0802db97
 8001540:	0802dbee 	.word	0x0802dbee
 8001544:	0802dbb1 	.word	0x0802dbb1

08001548 <getInputString>:
  * @param  Out:  inputString   Pointer to buffer for input line.
  * @param  In:   len           Max length for line.
  * @retval Number of bytes read from the terminal.
  */
int getInputString(char *inputString, size_t len)
{
 8001548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800154c:	460e      	mov	r6, r1
 800154e:	4605      	mov	r5, r0
  size_t currLen = 0;
  int c = 0;

  c = getchar();
 8001550:	f020 fe6c 	bl	802222c <getchar>
  size_t currLen = 0;
 8001554:	2400      	movs	r4, #0
    {
      if (currLen != 0)
      {
        --currLen;
        inputString[currLen] = 0;
        printf(" \b");
 8001556:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80015b8 <getInputString+0x70>
      }
    }
    else
    {
      if (currLen < (len-1))
 800155a:	1e77      	subs	r7, r6, #1
 800155c:	46a0      	mov	r8, r4
  while ((c != EOF) && ((currLen + 1) < len) && (c != '\r') && (c != '\n') )
 800155e:	1c43      	adds	r3, r0, #1
 8001560:	d007      	beq.n	8001572 <getInputString+0x2a>
 8001562:	f104 0a01 	add.w	sl, r4, #1
 8001566:	45b2      	cmp	sl, r6
 8001568:	d219      	bcs.n	800159e <getInputString+0x56>
 800156a:	280d      	cmp	r0, #13
 800156c:	d021      	beq.n	80015b2 <getInputString+0x6a>
 800156e:	280a      	cmp	r0, #10
 8001570:	d101      	bne.n	8001576 <getInputString+0x2e>

      ++currLen;
    }
    c = getchar();
  }
  if (currLen != 0)
 8001572:	b1dc      	cbz	r4, 80015ac <getInputString+0x64>
 8001574:	e014      	b.n	80015a0 <getInputString+0x58>
    if (c == '\b')
 8001576:	2808      	cmp	r0, #8
 8001578:	d10b      	bne.n	8001592 <getInputString+0x4a>
      if (currLen != 0)
 800157a:	b174      	cbz	r4, 800159a <getInputString+0x52>
        --currLen;
 800157c:	f104 3aff 	add.w	sl, r4, #4294967295
        printf(" \b");
 8001580:	4648      	mov	r0, r9
        inputString[currLen] = 0;
 8001582:	f805 800a 	strb.w	r8, [r5, sl]
        printf(" \b");
 8001586:	f022 f8a7 	bl	80236d8 <iprintf>
    c = getchar();
 800158a:	f020 fe4f 	bl	802222c <getchar>
 800158e:	4654      	mov	r4, sl
 8001590:	e7e5      	b.n	800155e <getInputString+0x16>
      if (currLen < (len-1))
 8001592:	42a7      	cmp	r7, r4
 8001594:	d9f9      	bls.n	800158a <getInputString+0x42>
        inputString[currLen] = c;
 8001596:	5528      	strb	r0, [r5, r4]
 8001598:	e7f7      	b.n	800158a <getInputString+0x42>
 800159a:	46a2      	mov	sl, r4
 800159c:	e7f5      	b.n	800158a <getInputString+0x42>
  if (currLen != 0)
 800159e:	b10c      	cbz	r4, 80015a4 <getInputString+0x5c>
  { /* Close the string in the input buffer... only if a string was written to it. */
    inputString[currLen] = '\0';
 80015a0:	2300      	movs	r3, #0
 80015a2:	552b      	strb	r3, [r5, r4]
  }
  if (c == '\r')
 80015a4:	280d      	cmp	r0, #13
 80015a6:	d101      	bne.n	80015ac <getInputString+0x64>
  {
    c = getchar(); /* assume there is '\n' after '\r'. Just discard it. */
 80015a8:	f020 fe40 	bl	802222c <getchar>
  }

  return currLen;
}
 80015ac:	4620      	mov	r0, r4
 80015ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (currLen != 0)
 80015b2:	2c00      	cmp	r4, #0
 80015b4:	d1f4      	bne.n	80015a0 <getInputString+0x58>
 80015b6:	e7f7      	b.n	80015a8 <getInputString+0x60>
 80015b8:	0802dcb0 	.word	0x0802dcb0
 80015bc:	00000000 	.word	0x00000000

080015c0 <checkWiFiCredentials>:
  */
int checkWiFiCredentials(const char ** const ssid, const char ** const psk, uint8_t * const security_mode)
{
  bool is_ssid_present = 0;

  if (lUserConfigPtr->wifi_config.magic == USER_CONF_MAGIC)
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <checkWiFiCredentials+0x58>)
 80015c2:	681b      	ldr	r3, [r3, #0]
{
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (lUserConfigPtr->wifi_config.magic == USER_CONF_MAGIC)
 80015c6:	f503 5420 	add.w	r4, r3, #10240	; 0x2800
 80015ca:	e9d4 6700 	ldrd	r6, r7, [r4]
 80015ce:	a510      	add	r5, pc, #64	; (adr r5, 8001610 <checkWiFiCredentials+0x50>)
 80015d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80015d4:	42af      	cmp	r7, r5
 80015d6:	bf08      	it	eq
 80015d8:	42a6      	cmpeq	r6, r4
 80015da:	d110      	bne.n	80015fe <checkWiFiCredentials+0x3e>
  {
    is_ssid_present = true;
    if ((ssid == NULL) ||(psk == NULL) || (security_mode == NULL))
 80015dc:	b190      	cbz	r0, 8001604 <checkWiFiCredentials+0x44>
 80015de:	b189      	cbz	r1, 8001604 <checkWiFiCredentials+0x44>
 80015e0:	b182      	cbz	r2, 8001604 <checkWiFiCredentials+0x44>
    {
      return -2;
    }
    *ssid = lUserConfigPtr->wifi_config.ssid;
 80015e2:	f503 5420 	add.w	r4, r3, #10240	; 0x2800
 80015e6:	3408      	adds	r4, #8
 80015e8:	6004      	str	r4, [r0, #0]
    *psk = lUserConfigPtr->wifi_config.psk;
 80015ea:	f503 5020 	add.w	r0, r3, #10240	; 0x2800
 80015ee:	3028      	adds	r0, #40	; 0x28
 80015f0:	6008      	str	r0, [r1, #0]
    *security_mode = lUserConfigPtr->wifi_config.security_mode;
 80015f2:	f642 0168 	movw	r1, #10344	; 0x2868
  }

  return (is_ssid_present) ? 0 : -1;
 80015f6:	2000      	movs	r0, #0
    *security_mode = lUserConfigPtr->wifi_config.security_mode;
 80015f8:	5c5b      	ldrb	r3, [r3, r1]
 80015fa:	7013      	strb	r3, [r2, #0]
}
 80015fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (is_ssid_present) ? 0 : -1;
 80015fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001602:	e7fb      	b.n	80015fc <checkWiFiCredentials+0x3c>
      return -2;
 8001604:	f06f 0001 	mvn.w	r0, #1
 8001608:	e7f8      	b.n	80015fc <checkWiFiCredentials+0x3c>
 800160a:	bf00      	nop
 800160c:	f3af 8000 	nop.w
 8001610:	89abcdef 	.word	0x89abcdef
 8001614:	01234567 	.word	0x01234567
 8001618:	20000008 	.word	0x20000008
 800161c:	00000000 	.word	0x00000000

08001620 <updateWiFiCredentials>:
  * @retval Error code
  *             0    Success
  *             <0   Unrecoverable error
  */
int updateWiFiCredentials(void)
{
 8001620:	b510      	push	{r4, lr}
 8001622:	b09c      	sub	sp, #112	; 0x70
  wifi_config_t wifi_config;
  int ret = 0;

  memset(&wifi_config, 0, sizeof(wifi_config_t));
 8001624:	2270      	movs	r2, #112	; 0x70
 8001626:	2100      	movs	r1, #0
 8001628:	4668      	mov	r0, sp
 800162a:	f020 ff51 	bl	80224d0 <memset>

  printf("\nEnter SSID: ");
 800162e:	4824      	ldr	r0, [pc, #144]	; (80016c0 <updateWiFiCredentials+0xa0>)

  printf("\n");
  char c;
  do
  {
      printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): \b");
 8001630:	4c24      	ldr	r4, [pc, #144]	; (80016c4 <updateWiFiCredentials+0xa4>)
  printf("\nEnter SSID: ");
 8001632:	f022 f851 	bl	80236d8 <iprintf>
  getInputString(wifi_config.ssid, USER_CONF_WIFI_SSID_MAX_LENGTH);
 8001636:	2120      	movs	r1, #32
 8001638:	a802      	add	r0, sp, #8
 800163a:	f7ff ff85 	bl	8001548 <getInputString>
  msg_info("You have entered %s as the ssid.\n", wifi_config.ssid);
 800163e:	a902      	add	r1, sp, #8
 8001640:	4821      	ldr	r0, [pc, #132]	; (80016c8 <updateWiFiCredentials+0xa8>)
 8001642:	f022 f849 	bl	80236d8 <iprintf>
  printf("\n");
 8001646:	200a      	movs	r0, #10
 8001648:	f022 f85e 	bl	8023708 <putchar>
      printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): \b");
 800164c:	4620      	mov	r0, r4
 800164e:	f022 f843 	bl	80236d8 <iprintf>
      c = getchar();
 8001652:	f020 fdeb 	bl	802222c <getchar>
  }
  while ( (c < '0')  || (c > '3'));
 8001656:	3830      	subs	r0, #48	; 0x30
 8001658:	b2c1      	uxtb	r1, r0
 800165a:	2903      	cmp	r1, #3
 800165c:	d8f6      	bhi.n	800164c <updateWiFiCredentials+0x2c>
  wifi_config.security_mode = c - '0';
  msg_info("\nYou have entered %d as the security mode.\n", wifi_config.security_mode);
 800165e:	481b      	ldr	r0, [pc, #108]	; (80016cc <updateWiFiCredentials+0xac>)
  wifi_config.security_mode = c - '0';
 8001660:	f88d 1068 	strb.w	r1, [sp, #104]	; 0x68
  msg_info("\nYou have entered %d as the security mode.\n", wifi_config.security_mode);
 8001664:	f022 f838 	bl	80236d8 <iprintf>

  if (wifi_config.security_mode != 0)
 8001668:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800166c:	b133      	cbz	r3, 800167c <updateWiFiCredentials+0x5c>
  {
    printf("\nEnter password: ");
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <updateWiFiCredentials+0xb0>)
 8001670:	f022 f832 	bl	80236d8 <iprintf>
    getInputString(wifi_config.psk, sizeof(wifi_config.psk));
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	a80a      	add	r0, sp, #40	; 0x28
 8001678:	f7ff ff66 	bl	8001548 <getInputString>
  }

  wifi_config.magic = USER_CONF_MAGIC;
 800167c:	a30e      	add	r3, pc, #56	; (adr r3, 80016b8 <updateWiFiCredentials+0x98>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	e9cd 2300 	strd	r2, r3, [sp]

  ret = FLASH_update((uint32_t)&lUserConfigPtr->wifi_config, &wifi_config, sizeof(wifi_config_t));
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <updateWiFiCredentials+0xb4>)
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	2270      	movs	r2, #112	; 0x70
 800168c:	4669      	mov	r1, sp
 800168e:	f500 5020 	add.w	r0, r0, #10240	; 0x2800
 8001692:	f7ff feaf 	bl	80013f4 <FLASH_update>

  if (ret < 0)
 8001696:	1e04      	subs	r4, r0, #0
 8001698:	da08      	bge.n	80016ac <updateWiFiCredentials+0x8c>
  {
    msg_error("Failed updating the wifi configuration in Flash.\n");
 800169a:	490f      	ldr	r1, [pc, #60]	; (80016d8 <updateWiFiCredentials+0xb8>)
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <updateWiFiCredentials+0xbc>)
 800169e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016a2:	f022 f819 	bl	80236d8 <iprintf>
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <updateWiFiCredentials+0xc0>)
 80016a8:	f022 f8b2 	bl	8023810 <puts>
  }

  printf("\n");
 80016ac:	200a      	movs	r0, #10
 80016ae:	f022 f82b 	bl	8023708 <putchar>
  return ret;
}
 80016b2:	4620      	mov	r0, r4
 80016b4:	b01c      	add	sp, #112	; 0x70
 80016b6:	bd10      	pop	{r4, pc}
 80016b8:	89abcdef 	.word	0x89abcdef
 80016bc:	01234567 	.word	0x01234567
 80016c0:	0802dc44 	.word	0x0802dc44
 80016c4:	0802dc74 	.word	0x0802dc74
 80016c8:	0802dc52 	.word	0x0802dc52
 80016cc:	0802dcb3 	.word	0x0802dcb3
 80016d0:	0802dcdf 	.word	0x0802dcdf
 80016d4:	20000008 	.word	0x20000008
 80016d8:	08028252 	.word	0x08028252
 80016dc:	0802da5d 	.word	0x0802da5d
 80016e0:	0802dcf1 	.word	0x0802dcf1

080016e4 <enterPemString>:
  * @param  Out: key_read_buffer    Destination buffer.
  * @param  In:  max_len            Maximum length to be written to the destination buffer.
  * @retval Number of characters read into the output buffer.
  */
int enterPemString(char * read_buffer, size_t max_len)
{
 80016e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e8:	4607      	mov	r7, r0
 80016ea:	468a      	mov	sl, r1
  int i = 0;
  int read_len = 0;
  bool eof = false;
  read_len = getInputString(&read_buffer[i], max_len);
 80016ec:	f7ff ff2c 	bl	8001548 <getInputString>
  bool eof = false;
 80016f0:	2500      	movs	r5, #0
  while ( (read_len >= 0) && (i < max_len) && !eof )
  {
    i += read_len;
    read_buffer[i++] = '\n';
    read_len = getInputString(&read_buffer[i], max_len);
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 80016f2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001778 <enterPemString+0x94>
  read_len = getInputString(&read_buffer[i], max_len);
 80016f6:	4604      	mov	r4, r0
  int i = 0;
 80016f8:	462e      	mov	r6, r5
    read_buffer[i++] = '\n';
 80016fa:	f04f 080a 	mov.w	r8, #10
  while ( (read_len >= 0) && (i < max_len) && !eof )
 80016fe:	2c00      	cmp	r4, #0
 8001700:	db25      	blt.n	800174e <enterPemString+0x6a>
 8001702:	4556      	cmp	r6, sl
 8001704:	d225      	bcs.n	8001752 <enterPemString+0x6e>
 8001706:	b11d      	cbz	r5, 8001710 <enterPemString+0x2c>
  if (i >= max_len)
  {
   msg_error("Certificate is too long , allocated size is %d\n",max_len);
   return 0;
  }
  read_buffer[++i] = '\0';
 8001708:	1c70      	adds	r0, r6, #1
 800170a:	2300      	movs	r3, #0
 800170c:	543b      	strb	r3, [r7, r0]
  return i;
 800170e:	e02b      	b.n	8001768 <enterPemString+0x84>
    i += read_len;
 8001710:	4434      	add	r4, r6
    read_buffer[i++] = '\n';
 8001712:	1c66      	adds	r6, r4, #1
    read_len = getInputString(&read_buffer[i], max_len);
 8001714:	eb07 0b06 	add.w	fp, r7, r6
    read_buffer[i++] = '\n';
 8001718:	f807 8004 	strb.w	r8, [r7, r4]
    read_len = getInputString(&read_buffer[i], max_len);
 800171c:	4651      	mov	r1, sl
 800171e:	4658      	mov	r0, fp
 8001720:	f7ff ff12 	bl	8001548 <getInputString>
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 8001724:	2208      	movs	r2, #8
    read_len = getInputString(&read_buffer[i], max_len);
 8001726:	4604      	mov	r4, r0
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 8001728:	4649      	mov	r1, r9
 800172a:	4658      	mov	r0, fp
 800172c:	f022 f998 	bl	8023a60 <strncmp>
    if (eof)
 8001730:	2800      	cmp	r0, #0
 8001732:	d1e4      	bne.n	80016fe <enterPemString+0x1a>
        i += read_len;
 8001734:	4434      	add	r4, r6
        read_buffer[i++] = '\n';
 8001736:	1c66      	adds	r6, r4, #1
 8001738:	f807 8004 	strb.w	r8, [r7, r4]
        read_len = getInputString(&read_buffer[i], max_len);
 800173c:	4651      	mov	r1, sl
 800173e:	19b8      	adds	r0, r7, r6
 8001740:	f7ff ff02 	bl	8001548 <getInputString>
        if (read_len != 0) eof =false;
 8001744:	fab0 f580 	clz	r5, r0
 8001748:	4604      	mov	r4, r0
 800174a:	096d      	lsrs	r5, r5, #5
 800174c:	e7d7      	b.n	80016fe <enterPemString+0x1a>
  if (i >= max_len)
 800174e:	4556      	cmp	r6, sl
 8001750:	d3da      	bcc.n	8001708 <enterPemString+0x24>
   msg_error("Certificate is too long , allocated size is %d\n",max_len);
 8001752:	4906      	ldr	r1, [pc, #24]	; (800176c <enterPemString+0x88>)
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <enterPemString+0x8c>)
 8001756:	f240 1253 	movw	r2, #339	; 0x153
 800175a:	f021 ffbd 	bl	80236d8 <iprintf>
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <enterPemString+0x90>)
 8001760:	4651      	mov	r1, sl
 8001762:	f021 ffb9 	bl	80236d8 <iprintf>
   return 0;
 8001766:	2000      	movs	r0, #0
}
 8001768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800176c:	08028268 	.word	0x08028268
 8001770:	0802da5d 	.word	0x0802da5d
 8001774:	0802dd2b 	.word	0x0802dd2b
 8001778:	0802dd22 	.word	0x0802dd22

0800177c <CaptureAndFlashPem>:
  *             0    Success
  *             <0   Unrecoverable error
  */

 int CaptureAndFlashPem(char *pem_name, char const *flash_addr, bool restricted_area)
 {
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	4606      	mov	r6, r0
  char * key_read_buffer = NULL;
  int    ret = 0;
  key_read_buffer = malloc(PEM_READ_BUFFER_SIZE);
 8001780:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 {
 8001784:	460d      	mov	r5, r1
  key_read_buffer = malloc(PEM_READ_BUFFER_SIZE);
 8001786:	f020 fe5d 	bl	8022444 <malloc>
  if (key_read_buffer == NULL)
 800178a:	4604      	mov	r4, r0
 800178c:	b970      	cbnz	r0, 80017ac <CaptureAndFlashPem+0x30>
  {
    msg_error("Could not allocate %d bytes for the console readbuffer.\n", PEM_READ_BUFFER_SIZE);
 800178e:	4917      	ldr	r1, [pc, #92]	; (80017ec <CaptureAndFlashPem+0x70>)
 8001790:	4817      	ldr	r0, [pc, #92]	; (80017f0 <CaptureAndFlashPem+0x74>)
 8001792:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8001796:	f021 ff9f 	bl	80236d8 <iprintf>
 800179a:	4816      	ldr	r0, [pc, #88]	; (80017f4 <CaptureAndFlashPem+0x78>)
 800179c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a0:	f021 ff9a 	bl	80236d8 <iprintf>
 80017a4:	f04f 35ff 	mov.w	r5, #4294967295
  }

  free(key_read_buffer);

  return ret;
 }
 80017a8:	4628      	mov	r0, r5
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
  memset(key_read_buffer, 0, PEM_READ_BUFFER_SIZE);
 80017ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b0:	2100      	movs	r1, #0
 80017b2:	f020 fe8d 	bl	80224d0 <memset>
  printf("\nEnter your %s: \n",pem_name);
 80017b6:	4631      	mov	r1, r6
 80017b8:	480f      	ldr	r0, [pc, #60]	; (80017f8 <CaptureAndFlashPem+0x7c>)
 80017ba:	f021 ff8d 	bl	80236d8 <iprintf>
  enterPemString(key_read_buffer, PEM_READ_BUFFER_SIZE);
 80017be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff ff8e 	bl	80016e4 <enterPemString>
  msg_info("read: --->\n%s\n<---\n", key_read_buffer);
 80017c8:	4621      	mov	r1, r4
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <CaptureAndFlashPem+0x80>)
 80017cc:	f021 ff84 	bl	80236d8 <iprintf>
    ret = FLASH_update((uint32_t)flash_addr, key_read_buffer, strlen(key_read_buffer) + 1);  /* Append the closing \0*/
 80017d0:	4620      	mov	r0, r4
 80017d2:	f7fe fd07 	bl	80001e4 <strlen>
 80017d6:	4621      	mov	r1, r4
 80017d8:	1c42      	adds	r2, r0, #1
 80017da:	4628      	mov	r0, r5
 80017dc:	f7ff fe0a 	bl	80013f4 <FLASH_update>
 80017e0:	4605      	mov	r5, r0
  free(key_read_buffer);
 80017e2:	4620      	mov	r0, r4
 80017e4:	f020 fe36 	bl	8022454 <free>
  return ret;
 80017e8:	e7de      	b.n	80017a8 <CaptureAndFlashPem+0x2c>
 80017ea:	bf00      	nop
 80017ec:	08028277 	.word	0x08028277
 80017f0:	0802da5d 	.word	0x0802da5d
 80017f4:	0802dd5b 	.word	0x0802dd5b
 80017f8:	0802dd94 	.word	0x0802dd94
 80017fc:	0802dda6 	.word	0x0802dda6

08001800 <checkTLSRootCA>:
  * @retval 0 Configured,
           -1 Not configured.
  */
int checkTLSRootCA()
{
  return (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC) ? 0 : -1;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <checkTLSRootCA+0x28>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001808:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800180c:	a304      	add	r3, pc, #16	; (adr r3, 8001820 <checkTLSRootCA+0x20>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	4299      	cmp	r1, r3
 8001814:	bf0a      	itet	eq
 8001816:	4290      	cmpeq	r0, r2
}
 8001818:	f04f 30ff 	movne.w	r0, #4294967295
 800181c:	2000      	moveq	r0, #0
 800181e:	4770      	bx	lr
 8001820:	89abcdef 	.word	0x89abcdef
 8001824:	01234567 	.word	0x01234567
 8001828:	20000008 	.word	0x20000008
 800182c:	00000000 	.word	0x00000000

08001830 <checkTLSDeviceConfig>:
  * @retval 0 Configured,
           -1 Not configured.
  */
int checkTLSDeviceConfig()
{
  return (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) ? 0 : -1;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <checkTLSDeviceConfig+0x28>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001838:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800183c:	a304      	add	r3, pc, #16	; (adr r3, 8001850 <checkTLSDeviceConfig+0x20>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	4299      	cmp	r1, r3
 8001844:	bf0a      	itet	eq
 8001846:	4290      	cmpeq	r0, r2
}
 8001848:	f04f 30ff 	movne.w	r0, #4294967295
 800184c:	2000      	moveq	r0, #0
 800184e:	4770      	bx	lr
 8001850:	89abcdef 	.word	0x89abcdef
 8001854:	01234567 	.word	0x01234567
 8001858:	20000008 	.word	0x20000008
 800185c:	00000000 	.word	0x00000000

08001860 <updateTLSCredentials>:
{
 8001860:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ( (checkTLSRootCA() == -1)
 8001862:	f7ff ffcd 	bl	8001800 <checkTLSRootCA>
 8001866:	3001      	adds	r0, #1
 8001868:	d146      	bne.n	80018f8 <updateTLSCredentials+0x98>
    printf("\nUpdating TLS security credentials.\n");
 800186a:	4849      	ldr	r0, [pc, #292]	; (8001990 <updateTLSCredentials+0x130>)
    ret = CaptureAndFlashPem("root CA",lUserConfigPtr->tls_root_ca_cert, false);
 800186c:	4d49      	ldr	r5, [pc, #292]	; (8001994 <updateTLSCredentials+0x134>)
    printf("\nUpdating TLS security credentials.\n");
 800186e:	f021 ffcf 	bl	8023810 <puts>
    printf("\nEnter the x509 certificates or keys as per the following format:\n");
 8001872:	4849      	ldr	r0, [pc, #292]	; (8001998 <updateTLSCredentials+0x138>)
 8001874:	f021 ffcc 	bl	8023810 <puts>
    printf("-----BEGIN CERTIFICATE-----\n");
 8001878:	4848      	ldr	r0, [pc, #288]	; (800199c <updateTLSCredentials+0x13c>)
 800187a:	f021 ffc9 	bl	8023810 <puts>
    printf("YMPGn8u67GB9t+aEMr5P+1gmIgNb1LTV+/Xjli5wwOQuvfwu7uJBVcA0Ln0kcmnL\n");
 800187e:	4848      	ldr	r0, [pc, #288]	; (80019a0 <updateTLSCredentials+0x140>)
 8001880:	f021 ffc6 	bl	8023810 <puts>
    printf("R7EUQIN9Z/SG9jGr8XmksrUuEvmEF/Bibyc+E1ixVA0hmnM3oTDPb5Lc9un8rNsu\n");
 8001884:	4847      	ldr	r0, [pc, #284]	; (80019a4 <updateTLSCredentials+0x144>)
 8001886:	f021 ffc3 	bl	8023810 <puts>
    printf(".......\n");
 800188a:	4847      	ldr	r0, [pc, #284]	; (80019a8 <updateTLSCredentials+0x148>)
 800188c:	f021 ffc0 	bl	8023810 <puts>
    printf("-----END CERTIFICATE-----\n");
 8001890:	4846      	ldr	r0, [pc, #280]	; (80019ac <updateTLSCredentials+0x14c>)
 8001892:	f021 ffbd 	bl	8023810 <puts>
    printf("-----BEGIN CERTIFICATE-----\n");
 8001896:	4841      	ldr	r0, [pc, #260]	; (800199c <updateTLSCredentials+0x13c>)
 8001898:	f021 ffba 	bl	8023810 <puts>
    printf("YMPGn8u67GB9t+aEMr5P+1gmIgNb1LTV+/Xjli5wwOQuvfwu7uJBVcA0Ln0kcmnL\n");
 800189c:	4840      	ldr	r0, [pc, #256]	; (80019a0 <updateTLSCredentials+0x140>)
 800189e:	f021 ffb7 	bl	8023810 <puts>
    printf(".......\n");
 80018a2:	4841      	ldr	r0, [pc, #260]	; (80019a8 <updateTLSCredentials+0x148>)
 80018a4:	f021 ffb4 	bl	8023810 <puts>
    printf("-----END CERTIFICATE-----\n");
 80018a8:	4840      	ldr	r0, [pc, #256]	; (80019ac <updateTLSCredentials+0x14c>)
 80018aa:	f021 ffb1 	bl	8023810 <puts>
    printf("\n.......\n");
 80018ae:	4840      	ldr	r0, [pc, #256]	; (80019b0 <updateTLSCredentials+0x150>)
 80018b0:	f021 ffae 	bl	8023810 <puts>
    ret = CaptureAndFlashPem("root CA",lUserConfigPtr->tls_root_ca_cert, false);
 80018b4:	6829      	ldr	r1, [r5, #0]
 80018b6:	483f      	ldr	r0, [pc, #252]	; (80019b4 <updateTLSCredentials+0x154>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	f7ff ff5f 	bl	800177c <CaptureAndFlashPem>
    if (ret == 0)
 80018be:	4604      	mov	r4, r0
 80018c0:	b970      	cbnz	r0, 80018e0 <updateTLSCredentials+0x80>
      uint64_t magic = USER_CONF_MAGIC;
 80018c2:	a331      	add	r3, pc, #196	; (adr r3, 8001988 <updateTLSCredentials+0x128>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->ca_tls_magic, &magic, sizeof(uint64_t));
 80018c8:	6828      	ldr	r0, [r5, #0]
 80018ca:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
      uint64_t magic = USER_CONF_MAGIC;
 80018ce:	e9cd 2300 	strd	r2, r3, [sp]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->ca_tls_magic, &magic, sizeof(uint64_t));
 80018d2:	4669      	mov	r1, sp
 80018d4:	2208      	movs	r2, #8
 80018d6:	3028      	adds	r0, #40	; 0x28
 80018d8:	f7ff fd8c 	bl	80013f4 <FLASH_update>
  if ( (ret == 0) && app_needs_device_keypair() )
 80018dc:	4604      	mov	r4, r0
 80018de:	b180      	cbz	r0, 8001902 <updateTLSCredentials+0xa2>
  if (ret < 0)
 80018e0:	2c00      	cmp	r4, #0
 80018e2:	da12      	bge.n	800190a <updateTLSCredentials+0xaa>
    msg_error("Failed updating the TLS configuration in Flash.\n");
 80018e4:	4934      	ldr	r1, [pc, #208]	; (80019b8 <updateTLSCredentials+0x158>)
 80018e6:	4835      	ldr	r0, [pc, #212]	; (80019bc <updateTLSCredentials+0x15c>)
 80018e8:	f240 12c5 	movw	r2, #453	; 0x1c5
 80018ec:	f021 fef4 	bl	80236d8 <iprintf>
 80018f0:	4833      	ldr	r0, [pc, #204]	; (80019c0 <updateTLSCredentials+0x160>)
 80018f2:	f021 ff8d 	bl	8023810 <puts>
  return ret;
 80018f6:	e008      	b.n	800190a <updateTLSCredentials+0xaa>
      || dialog_ask("\nDo you want to update the root CA certificate(s)? [y/n]\n") )
 80018f8:	4832      	ldr	r0, [pc, #200]	; (80019c4 <updateTLSCredentials+0x164>)
 80018fa:	f7ff fbc7 	bl	800108c <dialog_ask>
 80018fe:	2800      	cmp	r0, #0
 8001900:	d1b3      	bne.n	800186a <updateTLSCredentials+0xa>
  if ( (ret == 0) && app_needs_device_keypair() )
 8001902:	f001 ff7b 	bl	80037fc <app_needs_device_keypair>
 8001906:	b918      	cbnz	r0, 8001910 <updateTLSCredentials+0xb0>
 8001908:	4604      	mov	r4, r0
}
 800190a:	4620      	mov	r0, r4
 800190c:	b003      	add	sp, #12
 800190e:	bd30      	pop	{r4, r5, pc}
    if (checkTLSDeviceConfig() == -1)
 8001910:	f7ff ff8e 	bl	8001830 <checkTLSDeviceConfig>
 8001914:	3001      	adds	r0, #1
 8001916:	d122      	bne.n	800195e <updateTLSCredentials+0xfe>
      ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 8001918:	4d1e      	ldr	r5, [pc, #120]	; (8001994 <updateTLSCredentials+0x134>)
 800191a:	482b      	ldr	r0, [pc, #172]	; (80019c8 <updateTLSCredentials+0x168>)
 800191c:	6829      	ldr	r1, [r5, #0]
 800191e:	2200      	movs	r2, #0
 8001920:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8001924:	f7ff ff2a 	bl	800177c <CaptureAndFlashPem>
      ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 8001928:	6829      	ldr	r1, [r5, #0]
      ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 800192a:	4604      	mov	r4, r0
        ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 800192c:	4827      	ldr	r0, [pc, #156]	; (80019cc <updateTLSCredentials+0x16c>)
 800192e:	2201      	movs	r2, #1
 8001930:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8001934:	f7ff ff22 	bl	800177c <CaptureAndFlashPem>
 8001938:	4304      	orrs	r4, r0
    if (ret == 0)
 800193a:	2c00      	cmp	r4, #0
 800193c:	d1d0      	bne.n	80018e0 <updateTLSCredentials+0x80>
      uint64_t magic = USER_CONF_MAGIC;
 800193e:	a312      	add	r3, pc, #72	; (adr r3, 8001988 <updateTLSCredentials+0x128>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	e9cd 2300 	strd	r2, r3, [sp]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->device_tls_magic, &magic, sizeof(uint64_t));
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <updateTLSCredentials+0x134>)
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
 8001950:	2208      	movs	r2, #8
 8001952:	4669      	mov	r1, sp
 8001954:	3030      	adds	r0, #48	; 0x30
 8001956:	f7ff fd4d 	bl	80013f4 <FLASH_update>
 800195a:	4604      	mov	r4, r0
 800195c:	e7c0      	b.n	80018e0 <updateTLSCredentials+0x80>
      if (dialog_ask("Do you want to update the device certificate? [y/n]\n"))
 800195e:	481c      	ldr	r0, [pc, #112]	; (80019d0 <updateTLSCredentials+0x170>)
 8001960:	f7ff fb94 	bl	800108c <dialog_ask>
 8001964:	b138      	cbz	r0, 8001976 <updateTLSCredentials+0x116>
        ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <updateTLSCredentials+0x134>)
 8001968:	4817      	ldr	r0, [pc, #92]	; (80019c8 <updateTLSCredentials+0x168>)
 800196a:	6819      	ldr	r1, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8001972:	f7ff ff03 	bl	800177c <CaptureAndFlashPem>
 8001976:	4604      	mov	r4, r0
      if (dialog_ask("Do you want to update the device key? [y/n]\n"))
 8001978:	4816      	ldr	r0, [pc, #88]	; (80019d4 <updateTLSCredentials+0x174>)
 800197a:	f7ff fb87 	bl	800108c <dialog_ask>
 800197e:	2800      	cmp	r0, #0
 8001980:	d0db      	beq.n	800193a <updateTLSCredentials+0xda>
        ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <updateTLSCredentials+0x134>)
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	e7d1      	b.n	800192c <updateTLSCredentials+0xcc>
 8001988:	89abcdef 	.word	0x89abcdef
 800198c:	01234567 	.word	0x01234567
 8001990:	0802ddba 	.word	0x0802ddba
 8001994:	20000008 	.word	0x20000008
 8001998:	0802ddde 	.word	0x0802ddde
 800199c:	0802de20 	.word	0x0802de20
 80019a0:	0802de3c 	.word	0x0802de3c
 80019a4:	0802de7d 	.word	0x0802de7d
 80019a8:	0802ded9 	.word	0x0802ded9
 80019ac:	0802debe 	.word	0x0802debe
 80019b0:	0802ded8 	.word	0x0802ded8
 80019b4:	0802dee1 	.word	0x0802dee1
 80019b8:	0802828a 	.word	0x0802828a
 80019bc:	0802da5d 	.word	0x0802da5d
 80019c0:	0802dfa3 	.word	0x0802dfa3
 80019c4:	0802dee9 	.word	0x0802dee9
 80019c8:	0802df23 	.word	0x0802df23
 80019cc:	0802df36 	.word	0x0802df36
 80019d0:	0802df41 	.word	0x0802df41
 80019d4:	0802df76 	.word	0x0802df76

080019d8 <setIoTDeviceConfig>:
  * @param  In: config    Configuration data.
  * @retval  0  Success
  *         -1  Error
  */
int setIoTDeviceConfig(iot_config_t *config)
{
 80019d8:	b508      	push	{r3, lr}
  int ret = 0;
  config->magic = USER_CONF_MAGIC;
 80019da:	a313      	add	r3, pc, #76	; (adr r3, 8001a28 <setIoTDeviceConfig+0x50>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	e9c0 2300 	strd	r2, r3, [r0]

  if (FLASH_update((uint32_t)&lUserConfigPtr->iot_config, config, sizeof(iot_config_t)) < 0)
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <setIoTDeviceConfig+0x40>)
{
 80019e6:	4601      	mov	r1, r0
  if (FLASH_update((uint32_t)&lUserConfigPtr->iot_config, config, sizeof(iot_config_t)) < 0)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	f500 5021 	add.w	r0, r0, #10304	; 0x2840
 80019ee:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80019f2:	3030      	adds	r0, #48	; 0x30
 80019f4:	f7ff fcfe 	bl	80013f4 <FLASH_update>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	da0b      	bge.n	8001a14 <setIoTDeviceConfig+0x3c>
  {
    msg_error("Failed programming the IOT config into Flash.\n");
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <setIoTDeviceConfig+0x44>)
 80019fe:	4808      	ldr	r0, [pc, #32]	; (8001a20 <setIoTDeviceConfig+0x48>)
 8001a00:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8001a04:	f021 fe68 	bl	80236d8 <iprintf>
 8001a08:	4806      	ldr	r0, [pc, #24]	; (8001a24 <setIoTDeviceConfig+0x4c>)
 8001a0a:	f021 ff01 	bl	8023810 <puts>
    ret = -1;
 8001a0e:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8001a12:	bd08      	pop	{r3, pc}
  int ret = 0;
 8001a14:	2000      	movs	r0, #0
  return ret;
 8001a16:	e7fc      	b.n	8001a12 <setIoTDeviceConfig+0x3a>
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	0802829f 	.word	0x0802829f
 8001a20:	0802da5d 	.word	0x0802da5d
 8001a24:	0802dfd3 	.word	0x0802dfd3
 8001a28:	89abcdef 	.word	0x89abcdef
 8001a2c:	01234567 	.word	0x01234567

08001a30 <getIoTDeviceConfig>:
  * @retval   0   Success:  The device configuration is configured and returned to the caller.
  *          -1   Error:    Device configuration absent.

  */
int getIoTDeviceConfig(const char ** const name)
{
 8001a30:	b5f0      	push	{r4, r5, r6, r7, lr}
  int ret = -1;

  if (name != NULL)
 8001a32:	b1a8      	cbz	r0, 8001a60 <getIoTDeviceConfig+0x30>
  {
    if (lUserConfigPtr->iot_config.magic == USER_CONF_MAGIC)
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <getIoTDeviceConfig+0x40>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	f502 5321 	add.w	r3, r2, #10304	; 0x2840
 8001a3c:	e9d3 670c 	ldrd	r6, r7, [r3, #48]	; 0x30
 8001a40:	a509      	add	r5, pc, #36	; (adr r5, 8001a68 <getIoTDeviceConfig+0x38>)
 8001a42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8001a46:	42af      	cmp	r7, r5
 8001a48:	bf08      	it	eq
 8001a4a:	42a6      	cmpeq	r6, r4
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	d105      	bne.n	8001a5e <getIoTDeviceConfig+0x2e>
    {
      *name = lUserConfigPtr->iot_config.device_name;
 8001a52:	f502 5221 	add.w	r2, r2, #10304	; 0x2840
 8001a56:	3238      	adds	r2, #56	; 0x38
 8001a58:	6002      	str	r2, [r0, #0]
      ret = 0;
 8001a5a:	4618      	mov	r0, r3
    } else {
      *name = NULL;
    }
  }
  return ret;
}
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *name = NULL;
 8001a5e:	6003      	str	r3, [r0, #0]
  int ret = -1;
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001a64:	e7fa      	b.n	8001a5c <getIoTDeviceConfig+0x2c>
 8001a66:	bf00      	nop
 8001a68:	89abcdef 	.word	0x89abcdef
 8001a6c:	01234567 	.word	0x01234567
 8001a70:	20000008 	.word	0x20000008
 8001a74:	00000000 	.word	0x00000000

08001a78 <checkIoTDeviceConfig>:
  * @retval 0:  Configuration present.
  *        -1:  No configuration.
  */
int checkIoTDeviceConfig()
{
  return (lUserConfigPtr->iot_config.magic == USER_CONF_MAGIC) ? 0 : -1;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <checkIoTDeviceConfig+0x28>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 8001a80:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a84:	a304      	add	r3, pc, #16	; (adr r3, 8001a98 <checkIoTDeviceConfig+0x20>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	4299      	cmp	r1, r3
 8001a8c:	bf0a      	itet	eq
 8001a8e:	4290      	cmpeq	r0, r2
}
 8001a90:	f04f 30ff 	movne.w	r0, #4294967295
 8001a94:	2000      	moveq	r0, #0
 8001a96:	4770      	bx	lr
 8001a98:	89abcdef 	.word	0x89abcdef
 8001a9c:	01234567 	.word	0x01234567
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <getTLSKeys>:
  * @param  Out: private_key    Device private key (PEM format: string)
  * @retval 0:    TLS credentials found, and passed back to the caller.
  *        -1:    TLS credentials not found.
  */
int getTLSKeys(const char ** const root_ca_cert, const char ** const device_cert, const char ** const private_key)
{
 8001aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int rc = -1;
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001aac:	4f20      	ldr	r7, [pc, #128]	; (8001b30 <getTLSKeys+0x88>)
 8001aae:	683b      	ldr	r3, [r7, #0]
{
 8001ab0:	4614      	mov	r4, r2
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001ab2:	f503 5228 	add.w	r2, r3, #10752	; 0x2a00
 8001ab6:	f20f 0970 	addw	r9, pc, #112	; 0x70
 8001aba:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8001abe:	4606      	mov	r6, r0
 8001ac0:	460d      	mov	r5, r1
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001ac2:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
 8001ac6:	4549      	cmp	r1, r9
 8001ac8:	bf08      	it	eq
 8001aca:	4540      	cmpeq	r0, r8
 8001acc:	d11a      	bne.n	8001b04 <getTLSKeys+0x5c>
      && ( (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) || !app_needs_device_keypair() )  )
 8001ace:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001ad2:	3330      	adds	r3, #48	; 0x30
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	428b      	cmp	r3, r1
 8001ada:	bf08      	it	eq
 8001adc:	4282      	cmpeq	r2, r0
 8001ade:	d10d      	bne.n	8001afc <getTLSKeys+0x54>
  {
    if (root_ca_cert != NULL)    *root_ca_cert = lUserConfigPtr->tls_root_ca_cert;
 8001ae0:	b9e6      	cbnz	r6, 8001b1c <getTLSKeys+0x74>
    if (device_cert !=NULL)      *device_cert = lUserConfigPtr->tls_device_cert;
 8001ae2:	b11d      	cbz	r5, 8001aec <getTLSKeys+0x44>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001aea:	602b      	str	r3, [r5, #0]
    if (private_key!= NULL)      *private_key = lUserConfigPtr->tls_device_key;
 8001aec:	b11c      	cbz	r4, 8001af6 <getTLSKeys+0x4e>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001af4:	6023      	str	r3, [r4, #0]
    rc = 0;
 8001af6:	2000      	movs	r0, #0
    if (root_ca_cert != NULL)    *root_ca_cert = NULL;
    if (device_cert !=NULL)      *device_cert = NULL;
    if (private_key!= NULL)      *private_key = NULL;
  }
  return rc;
}
 8001af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      && ( (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) || !app_needs_device_keypair() )  )
 8001afc:	f001 fe7e 	bl	80037fc <app_needs_device_keypair>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d0ed      	beq.n	8001ae0 <getTLSKeys+0x38>
    if (root_ca_cert != NULL)    *root_ca_cert = NULL;
 8001b04:	b10e      	cbz	r6, 8001b0a <getTLSKeys+0x62>
 8001b06:	2300      	movs	r3, #0
 8001b08:	6033      	str	r3, [r6, #0]
    if (device_cert !=NULL)      *device_cert = NULL;
 8001b0a:	b10d      	cbz	r5, 8001b10 <getTLSKeys+0x68>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	602b      	str	r3, [r5, #0]
    if (private_key!= NULL)      *private_key = NULL;
 8001b10:	b10c      	cbz	r4, 8001b16 <getTLSKeys+0x6e>
 8001b12:	2300      	movs	r3, #0
 8001b14:	6023      	str	r3, [r4, #0]
  int rc = -1;
 8001b16:	f04f 30ff 	mov.w	r0, #4294967295
  return rc;
 8001b1a:	e7ed      	b.n	8001af8 <getTLSKeys+0x50>
    if (root_ca_cert != NULL)    *root_ca_cert = lUserConfigPtr->tls_root_ca_cert;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6033      	str	r3, [r6, #0]
 8001b20:	e7df      	b.n	8001ae2 <getTLSKeys+0x3a>
 8001b22:	bf00      	nop
 8001b24:	f3af 8000 	nop.w
 8001b28:	89abcdef 	.word	0x89abcdef
 8001b2c:	01234567 	.word	0x01234567
 8001b30:	20000008 	.word	0x20000008

08001b34 <mbedtls_net_recv>:
#include "msg.h"
#include <string.h>

/* Non-blocking interface implementation. Timeout is not applicable. */
int mbedtls_net_recv(void *ctx, unsigned char *buf, size_t len)
{
 8001b34:	b538      	push	{r3, r4, r5, lr}
 8001b36:	4615      	mov	r5, r2
  int ret = net_sock_recv((net_sockhnd_t) ctx, buf, len);
 8001b38:	f000 fa34 	bl	8001fa4 <net_sock_recv>
  
  if (ret > 0)
 8001b3c:	1e04      	subs	r4, r0, #0
 8001b3e:	dc0b      	bgt.n	8001b58 <mbedtls_net_recv+0x24>
  {
    return ret;
  }
  
  if(ret == 0)
 8001b40:	d00c      	beq.n	8001b5c <mbedtls_net_recv+0x28>
  {
    return  MBEDTLS_ERR_SSL_WANT_READ; 
  }
  
  msg_error("mbedtls_net_recv(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001b42:	4907      	ldr	r1, [pc, #28]	; (8001b60 <mbedtls_net_recv+0x2c>)
 8001b44:	4807      	ldr	r0, [pc, #28]	; (8001b64 <mbedtls_net_recv+0x30>)
 8001b46:	2244      	movs	r2, #68	; 0x44
 8001b48:	f021 fdc6 	bl	80236d8 <iprintf>
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <mbedtls_net_recv+0x34>)
 
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001b50:	4c06      	ldr	r4, [pc, #24]	; (8001b6c <mbedtls_net_recv+0x38>)
  msg_error("mbedtls_net_recv(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001b52:	462a      	mov	r2, r5
 8001b54:	f021 fdc0 	bl	80236d8 <iprintf>
}
 8001b58:	4620      	mov	r0, r4
 8001b5a:	bd38      	pop	{r3, r4, r5, pc}
    return  MBEDTLS_ERR_SSL_WANT_READ; 
 8001b5c:	4c04      	ldr	r4, [pc, #16]	; (8001b70 <mbedtls_net_recv+0x3c>)
 8001b5e:	e7fb      	b.n	8001b58 <mbedtls_net_recv+0x24>
 8001b60:	080282b2 	.word	0x080282b2
 8001b64:	0802da5d 	.word	0x0802da5d
 8001b68:	0802e001 	.word	0x0802e001
 8001b6c:	ffff9400 	.word	0xffff9400
 8001b70:	ffff9700 	.word	0xffff9700

08001b74 <mbedtls_net_recv_blocking>:


/* Blocking interface implementation.*/
int mbedtls_net_recv_blocking(void *ctx, unsigned char *buf, size_t len, uint32_t timeout)
{
 8001b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b76:	4604      	mov	r4, r0
 8001b78:	460e      	mov	r6, r1
 8001b7a:	4615      	mov	r5, r2
  int ret = 0;
  char stimeout[8];
  
  if ((sizeof(stimeout) - 1) <= snprintf(stimeout, sizeof(stimeout), "%lu",timeout))
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <mbedtls_net_recv_blocking+0x7c>)
 8001b80:	4668      	mov	r0, sp
{
 8001b82:	461f      	mov	r7, r3
  if ((sizeof(stimeout) - 1) <= snprintf(stimeout, sizeof(stimeout), "%lu",timeout))
 8001b84:	f021 fe92 	bl	80238ac <sniprintf>
 8001b88:	2806      	cmp	r0, #6
 8001b8a:	dd0c      	ble.n	8001ba6 <mbedtls_net_recv_blocking+0x32>
  {
    msg_error("mbedtls_net_recv_blocking(): out of range timeout %lu\n", timeout);
 8001b8c:	4919      	ldr	r1, [pc, #100]	; (8001bf4 <mbedtls_net_recv_blocking+0x80>)
 8001b8e:	481a      	ldr	r0, [pc, #104]	; (8001bf8 <mbedtls_net_recv_blocking+0x84>)
    return MBEDTLS_ERR_SSL_BAD_INPUT_DATA;
 8001b90:	4c1a      	ldr	r4, [pc, #104]	; (8001bfc <mbedtls_net_recv_blocking+0x88>)
    msg_error("mbedtls_net_recv_blocking(): out of range timeout %lu\n", timeout);
 8001b92:	2252      	movs	r2, #82	; 0x52
 8001b94:	f021 fda0 	bl	80236d8 <iprintf>
 8001b98:	4819      	ldr	r0, [pc, #100]	; (8001c00 <mbedtls_net_recv_blocking+0x8c>)
 8001b9a:	4639      	mov	r1, r7
 8001b9c:	f021 fd9c 	bl	80236d8 <iprintf>
    }
  }
  
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
}
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	b003      	add	sp, #12
 8001ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (net_sock_setopt((net_sockhnd_t) ctx, "sock_read_timeout", (uint8_t *)stimeout, strlen(stimeout) + 1) == NET_OK)
 8001ba6:	4668      	mov	r0, sp
 8001ba8:	f7fe fb1c 	bl	80001e4 <strlen>
 8001bac:	4915      	ldr	r1, [pc, #84]	; (8001c04 <mbedtls_net_recv_blocking+0x90>)
 8001bae:	1c43      	adds	r3, r0, #1
 8001bb0:	466a      	mov	r2, sp
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f000 f952 	bl	8001e5c <net_sock_setopt>
 8001bb8:	b9a8      	cbnz	r0, 8001be6 <mbedtls_net_recv_blocking+0x72>
    ret = net_sock_recv((net_sockhnd_t) ctx, buf, len);
 8001bba:	4620      	mov	r0, r4
 8001bbc:	462a      	mov	r2, r5
 8001bbe:	4631      	mov	r1, r6
 8001bc0:	f000 f9f0 	bl	8001fa4 <net_sock_recv>
    if (ret > 0)
 8001bc4:	1e04      	subs	r4, r0, #0
 8001bc6:	dceb      	bgt.n	8001ba0 <mbedtls_net_recv_blocking+0x2c>
      switch(ret)
 8001bc8:	1ce3      	adds	r3, r4, #3
 8001bca:	d00e      	beq.n	8001bea <mbedtls_net_recv_blocking+0x76>
 8001bcc:	b16c      	cbz	r4, 8001bea <mbedtls_net_recv_blocking+0x76>
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001bce:	4909      	ldr	r1, [pc, #36]	; (8001bf4 <mbedtls_net_recv_blocking+0x80>)
 8001bd0:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <mbedtls_net_recv_blocking+0x84>)
 8001bd2:	226e      	movs	r2, #110	; 0x6e
 8001bd4:	f021 fd80 	bl	80236d8 <iprintf>
 8001bd8:	4621      	mov	r1, r4
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <mbedtls_net_recv_blocking+0x94>)
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001bdc:	4c0b      	ldr	r4, [pc, #44]	; (8001c0c <mbedtls_net_recv_blocking+0x98>)
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001bde:	462a      	mov	r2, r5
 8001be0:	f021 fd7a 	bl	80236d8 <iprintf>
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001be4:	e7dc      	b.n	8001ba0 <mbedtls_net_recv_blocking+0x2c>
  int ret = 0;
 8001be6:	2400      	movs	r4, #0
 8001be8:	e7f1      	b.n	8001bce <mbedtls_net_recv_blocking+0x5a>
      switch(ret)
 8001bea:	4c09      	ldr	r4, [pc, #36]	; (8001c10 <mbedtls_net_recv_blocking+0x9c>)
 8001bec:	e7d8      	b.n	8001ba0 <mbedtls_net_recv_blocking+0x2c>
 8001bee:	bf00      	nop
 8001bf0:	08031546 	.word	0x08031546
 8001bf4:	080282c3 	.word	0x080282c3
 8001bf8:	0802da5d 	.word	0x0802da5d
 8001bfc:	ffff8f00 	.word	0xffff8f00
 8001c00:	0802e044 	.word	0x0802e044
 8001c04:	0802e07b 	.word	0x0802e07b
 8001c08:	0802e08d 	.word	0x0802e08d
 8001c0c:	ffff9400 	.word	0xffff9400
 8001c10:	ffff9700 	.word	0xffff9700

08001c14 <mbedtls_net_send>:


int mbedtls_net_send(void *ctx, const unsigned char *buf, size_t len)
{
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4615      	mov	r5, r2
  int ret = net_sock_send((net_sockhnd_t) ctx, buf, len);
 8001c18:	f000 f9ca 	bl	8001fb0 <net_sock_send>
  
  if (ret > 0)
 8001c1c:	1e04      	subs	r4, r0, #0
 8001c1e:	dc0b      	bgt.n	8001c38 <mbedtls_net_send+0x24>
  {
    return ret;
  }
  
  if(ret == 0)
 8001c20:	d00c      	beq.n	8001c3c <mbedtls_net_send+0x28>
  {
    return  MBEDTLS_ERR_SSL_WANT_WRITE; 
  }
  msg_error("mbedtls_net_send(): error %d in net_sock_send() - requestedLen=%d\n", ret, len);
 8001c22:	4907      	ldr	r1, [pc, #28]	; (8001c40 <mbedtls_net_send+0x2c>)
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <mbedtls_net_send+0x30>)
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	f021 fd56 	bl	80236d8 <iprintf>
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <mbedtls_net_send+0x34>)
   *          MBEDTLS_ERR_SSL_INTERNAL_ERROR,
   *          MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY,
   *          MBEDTLS_ERR_SSL_CONN_EOF.
   *  Most often, the error is due to the closure of the connection by the remote host. */ 
  
  return MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY;
 8001c30:	4c06      	ldr	r4, [pc, #24]	; (8001c4c <mbedtls_net_send+0x38>)
  msg_error("mbedtls_net_send(): error %d in net_sock_send() - requestedLen=%d\n", ret, len);
 8001c32:	462a      	mov	r2, r5
 8001c34:	f021 fd50 	bl	80236d8 <iprintf>
  
}
 8001c38:	4620      	mov	r0, r4
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}
    return  MBEDTLS_ERR_SSL_WANT_WRITE; 
 8001c3c:	4c04      	ldr	r4, [pc, #16]	; (8001c50 <mbedtls_net_send+0x3c>)
 8001c3e:	e7fb      	b.n	8001c38 <mbedtls_net_send+0x24>
 8001c40:	080282dd 	.word	0x080282dd
 8001c44:	0802da5d 	.word	0x0802da5d
 8001c48:	0802e0d9 	.word	0x0802e0d9
 8001c4c:	ffff8780 	.word	0xffff8780
 8001c50:	ffff9780 	.word	0xffff9780

08001c54 <net_init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

int net_init(net_hnd_t * nethnd, net_if_t interface, net_if_init_t *f_netinit)
{
 8001c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c56:	4607      	mov	r7, r0
 8001c58:	460c      	mov	r4, r1
  int rc = NET_ERR;
  net_ctxt_t *ctxt = NULL;

  if (f_netinit == NULL)
 8001c5a:	4616      	mov	r6, r2
 8001c5c:	b36a      	cbz	r2, 8001cba <net_init+0x66>
  {
    rc = NET_PARAM;
  }
  else
  {
    ctxt = net_malloc(sizeof(net_ctxt_t));
 8001c5e:	2008      	movs	r0, #8
 8001c60:	f020 fbf0 	bl	8022444 <malloc>
    if (ctxt == NULL)
 8001c64:	4605      	mov	r5, r0
 8001c66:	b958      	cbnz	r0, 8001c80 <net_init+0x2c>
    {
      msg_error("net_init: allocation failed.\n");
 8001c68:	4915      	ldr	r1, [pc, #84]	; (8001cc0 <net_init+0x6c>)
 8001c6a:	4816      	ldr	r0, [pc, #88]	; (8001cc4 <net_init+0x70>)
 8001c6c:	2253      	movs	r2, #83	; 0x53
 8001c6e:	f021 fd33 	bl	80236d8 <iprintf>
 8001c72:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <net_init+0x74>)
 8001c74:	f021 fdcc 	bl	8023810 <puts>
      rc = NET_ERR;
 8001c78:	f04f 34ff 	mov.w	r4, #4294967295
      net_free(ctxt);
    }
  }
  
  return rc;
}
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8001c80:	2000      	movs	r0, #0
      switch(interface)
 8001c82:	2c01      	cmp	r4, #1
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8001c84:	e9c5 0000 	strd	r0, r0, [r5]
      switch(interface)
 8001c88:	d109      	bne.n	8001c9e <net_init+0x4a>
          ctxt->itf = interface;  // TODO: register a list of function pointers in function of the interface type. (to be provided by the caller?)
 8001c8a:	702c      	strb	r4, [r5, #0]
          if(f_netinit(NULL) == 0)
 8001c8c:	47b0      	blx	r6
 8001c8e:	4604      	mov	r4, r0
 8001c90:	b188      	cbz	r0, 8001cb6 <net_init+0x62>
  int rc = NET_ERR;
 8001c92:	f04f 34ff 	mov.w	r4, #4294967295
      net_free(ctxt);
 8001c96:	4628      	mov	r0, r5
 8001c98:	f020 fbdc 	bl	8022454 <free>
 8001c9c:	e7ee      	b.n	8001c7c <net_init+0x28>
          msg_error("net_init: interface type of %d not implemented.\n", interface);
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <net_init+0x6c>)
 8001ca0:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <net_init+0x70>)
 8001ca2:	2277      	movs	r2, #119	; 0x77
 8001ca4:	f021 fd18 	bl	80236d8 <iprintf>
 8001ca8:	4621      	mov	r1, r4
 8001caa:	4808      	ldr	r0, [pc, #32]	; (8001ccc <net_init+0x78>)
 8001cac:	f021 fd14 	bl	80236d8 <iprintf>
          rc = NET_PARAM;
 8001cb0:	f06f 0401 	mvn.w	r4, #1
 8001cb4:	e7ef      	b.n	8001c96 <net_init+0x42>
    *nethnd = (net_hnd_t) ctxt;
 8001cb6:	603d      	str	r5, [r7, #0]
 8001cb8:	e7e0      	b.n	8001c7c <net_init+0x28>
    rc = NET_PARAM;
 8001cba:	f06f 0401 	mvn.w	r4, #1
  return rc;
 8001cbe:	e7dd      	b.n	8001c7c <net_init+0x28>
 8001cc0:	080282ee 	.word	0x080282ee
 8001cc4:	0802da5d 	.word	0x0802da5d
 8001cc8:	0802e11c 	.word	0x0802e11c
 8001ccc:	0802e139 	.word	0x0802e139

08001cd0 <net_deinit>:


int net_deinit(net_hnd_t nethnd, net_if_deinit_t *f_netdeinit)
{
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4605      	mov	r5, r0
  int rc = NET_ERR;
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  
  if (f_netdeinit == NULL)
 8001cd4:	b1a1      	cbz	r1, 8001d00 <net_deinit+0x30>
  {
    rc = NET_PARAM;
  }
  else
  {
    if (ctxt->sock_list != NULL)
 8001cd6:	6844      	ldr	r4, [r0, #4]
 8001cd8:	b994      	cbnz	r4, 8001d00 <net_deinit+0x30>
    {
      rc = NET_PARAM;
    }
    else
    {
      switch(ctxt->itf)
 8001cda:	7803      	ldrb	r3, [r0, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d106      	bne.n	8001cee <net_deinit+0x1e>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          f_netdeinit(NULL);
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	4788      	blx	r1
          rc = NET_PARAM;
      }
      
      if (rc == NET_OK)
      {
        net_free((void *)nethnd);
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f020 fbb5 	bl	8022454 <free>
          rc = NET_OK;
 8001cea:	4620      	mov	r0, r4
      }
    }
  }
  return rc;
}
 8001cec:	bd38      	pop	{r3, r4, r5, pc}
          msg_error("net_deinit: interface type of %d not implemented.\n", ctxt->itf);
 8001cee:	4906      	ldr	r1, [pc, #24]	; (8001d08 <net_deinit+0x38>)
 8001cf0:	4806      	ldr	r0, [pc, #24]	; (8001d0c <net_deinit+0x3c>)
 8001cf2:	22b3      	movs	r2, #179	; 0xb3
 8001cf4:	f021 fcf0 	bl	80236d8 <iprintf>
 8001cf8:	7829      	ldrb	r1, [r5, #0]
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <net_deinit+0x40>)
 8001cfc:	f021 fcec 	bl	80236d8 <iprintf>
    rc = NET_PARAM;
 8001d00:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001d04:	e7f2      	b.n	8001cec <net_deinit+0x1c>
 8001d06:	bf00      	nop
 8001d08:	080282f7 	.word	0x080282f7
 8001d0c:	0802da5d 	.word	0x0802da5d
 8001d10:	0802e16a 	.word	0x0802e16a

08001d14 <net_reinit>:


int net_reinit(net_hnd_t nethnd, net_if_reinit_t *f_netreinit)
{
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4605      	mov	r5, r0
  int rc = NET_ERR;
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  
  if (f_netreinit == NULL)
 8001d18:	b189      	cbz	r1, 8001d3e <net_reinit+0x2a>
  {
    rc = NET_PARAM;
  }
  else
  {
    if (ctxt->sock_list != NULL)
 8001d1a:	6844      	ldr	r4, [r0, #4]
 8001d1c:	b97c      	cbnz	r4, 8001d3e <net_reinit+0x2a>
    {
      rc = NET_PARAM;
    }
    else
    {
      switch(ctxt->itf)
 8001d1e:	7803      	ldrb	r3, [r0, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d103      	bne.n	8001d2c <net_reinit+0x18>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          f_netreinit(NULL);
 8001d24:	4620      	mov	r0, r4
 8001d26:	4788      	blx	r1
          rc = NET_OK;
 8001d28:	4620      	mov	r0, r4
          rc = NET_PARAM;
      }
    }
  }
  return rc;
}
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
          msg_error("net_reinit: interface type of %d not implemented.\n", ctxt->itf);
 8001d2c:	4905      	ldr	r1, [pc, #20]	; (8001d44 <net_reinit+0x30>)
 8001d2e:	4806      	ldr	r0, [pc, #24]	; (8001d48 <net_reinit+0x34>)
 8001d30:	22e7      	movs	r2, #231	; 0xe7
 8001d32:	f021 fcd1 	bl	80236d8 <iprintf>
 8001d36:	7829      	ldrb	r1, [r5, #0]
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <net_reinit+0x38>)
 8001d3a:	f021 fccd 	bl	80236d8 <iprintf>
    rc = NET_PARAM;
 8001d3e:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001d42:	e7f2      	b.n	8001d2a <net_reinit+0x16>
 8001d44:	08028302 	.word	0x08028302
 8001d48:	0802da5d 	.word	0x0802da5d
 8001d4c:	0802e19d 	.word	0x0802e19d

08001d50 <net_get_ip_address>:


int net_get_ip_address(net_hnd_t nethnd, net_ipaddr_t * ipAddress)
{
 8001d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d52:	4604      	mov	r4, r0
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  int rc = NET_ERR;
  
  if (ipAddress == NULL)
 8001d54:	460d      	mov	r5, r1
 8001d56:	b309      	cbz	r1, 8001d9c <net_get_ip_address+0x4c>
  {
    rc = NET_PARAM;
  }
  else
  {
    switch(ctxt->itf)
 8001d58:	7803      	ldrb	r3, [r0, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d114      	bne.n	8001d88 <net_get_ip_address+0x38>
#ifdef USE_WIFI
      case NET_IF_WLAN:
      {
        uint8_t addr[4];
        /* WIFI_GetIP_Address() returns IPv4 addresses in binary format, network byte order. */
        WIFI_Status_t ret = WIFI_GetIP_Address(addr);
 8001d5e:	a801      	add	r0, sp, #4
 8001d60:	f003 f8ae 	bl	8004ec0 <WIFI_GetIP_Address>
        if (ret == WIFI_STATUS_OK)
 8001d64:	4604      	mov	r4, r0
 8001d66:	b960      	cbnz	r0, 8001d82 <net_get_ip_address+0x32>
        {
          ipAddress->ipv = NET_IP_V4;
 8001d68:	4628      	mov	r0, r5
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8001d6a:	2210      	movs	r2, #16
          ipAddress->ipv = NET_IP_V4;
 8001d6c:	f800 4b01 	strb.w	r4, [r0], #1
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8001d70:	21ff      	movs	r1, #255	; 0xff
 8001d72:	f020 fbad 	bl	80224d0 <memset>
          memcpy(&ipAddress->ip[12], addr, 4);
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	f8c5 300d 	str.w	r3, [r5, #13]
          rc = NET_OK;
 8001d7c:	4620      	mov	r0, r4
        rc = NET_PARAM;
    }
  }
  
  return rc;
}
 8001d7e:	b003      	add	sp, #12
 8001d80:	bd30      	pop	{r4, r5, pc}
  int rc = NET_ERR;
 8001d82:	f04f 30ff 	mov.w	r0, #4294967295
        break;
 8001d86:	e7fa      	b.n	8001d7e <net_get_ip_address+0x2e>
        msg_error("net_get_ip_address: interface type of %d not implemented.\n", ctxt->itf);
 8001d88:	4906      	ldr	r1, [pc, #24]	; (8001da4 <net_get_ip_address+0x54>)
 8001d8a:	4807      	ldr	r0, [pc, #28]	; (8001da8 <net_get_ip_address+0x58>)
 8001d8c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001d90:	f021 fca2 	bl	80236d8 <iprintf>
 8001d94:	7821      	ldrb	r1, [r4, #0]
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <net_get_ip_address+0x5c>)
 8001d98:	f021 fc9e 	bl	80236d8 <iprintf>
    rc = NET_PARAM;
 8001d9c:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001da0:	e7ed      	b.n	8001d7e <net_get_ip_address+0x2e>
 8001da2:	bf00      	nop
 8001da4:	0802830d 	.word	0x0802830d
 8001da8:	0802da5d 	.word	0x0802da5d
 8001dac:	0802e1d0 	.word	0x0802e1d0

08001db0 <net_get_mac_address>:


int net_get_mac_address(net_hnd_t nethnd, net_macaddr_t * macAddress)
{
 8001db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  int rc = NET_ERR;
  switch (ctxt->itf)
 8001db2:	7803      	ldrb	r3, [r0, #0]
 8001db4:	2b01      	cmp	r3, #1
{
 8001db6:	4604      	mov	r4, r0
 8001db8:	460d      	mov	r5, r1
  switch (ctxt->itf)
 8001dba:	d10f      	bne.n	8001ddc <net_get_mac_address+0x2c>
  {
#ifdef USE_WIFI
    case NET_IF_WLAN:
    {
      uint8_t addr[6];  /* WIFI_GetMAC_Address() returns in binary format. */
      WIFI_Status_t ret = WIFI_GetMAC_Address(addr);
 8001dbc:	4668      	mov	r0, sp
 8001dbe:	f003 f873 	bl	8004ea8 <WIFI_GetMAC_Address>
      if (ret == WIFI_STATUS_OK)
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b938      	cbnz	r0, 8001dd6 <net_get_mac_address+0x26>
      {
        memcpy(macAddress->mac, addr, MIN(sizeof(macAddress->mac), 6));
 8001dc6:	9800      	ldr	r0, [sp, #0]
 8001dc8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001dcc:	6028      	str	r0, [r5, #0]
 8001dce:	80aa      	strh	r2, [r5, #4]
        rc = NET_OK;
 8001dd0:	4618      	mov	r0, r3
      msg_error("net_get_mac_address: interface type of %d not implemented.\n", ctxt->itf);
      rc = NET_PARAM;
  }
  
  return rc;
}
 8001dd2:	b003      	add	sp, #12
 8001dd4:	bd30      	pop	{r4, r5, pc}
  int rc = NET_ERR;
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 8001dda:	e7fa      	b.n	8001dd2 <net_get_mac_address+0x22>
      msg_error("net_get_mac_address: interface type of %d not implemented.\n", ctxt->itf);
 8001ddc:	4906      	ldr	r1, [pc, #24]	; (8001df8 <net_get_mac_address+0x48>)
 8001dde:	4807      	ldr	r0, [pc, #28]	; (8001dfc <net_get_mac_address+0x4c>)
 8001de0:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001de4:	f021 fc78 	bl	80236d8 <iprintf>
 8001de8:	7821      	ldrb	r1, [r4, #0]
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <net_get_mac_address+0x50>)
 8001dec:	f021 fc74 	bl	80236d8 <iprintf>
      rc = NET_PARAM;
 8001df0:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001df4:	e7ed      	b.n	8001dd2 <net_get_mac_address+0x22>
 8001df6:	bf00      	nop
 8001df8:	08028320 	.word	0x08028320
 8001dfc:	0802da5d 	.word	0x0802da5d
 8001e00:	0802e20b 	.word	0x0802e20b

08001e04 <net_sock_create>:


int net_sock_create(net_hnd_t nethnd, net_sockhnd_t * sockhnd, net_proto_t proto)
{
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  switch(proto)
 8001e04:	2a02      	cmp	r2, #2
{
 8001e06:	b510      	push	{r4, lr}
 8001e08:	4604      	mov	r4, r0
  switch(proto)
 8001e0a:	d00a      	beq.n	8001e22 <net_sock_create+0x1e>
 8001e0c:	f002 03fd 	and.w	r3, r2, #253	; 0xfd
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10a      	bne.n	8001e2a <net_sock_create+0x26>
  {
    case NET_PROTO_TCP:
    case NET_PROTO_UDP:
      switch(ctxt->itf)
 8001e14:	7803      	ldrb	r3, [r0, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d111      	bne.n	8001e3e <net_sock_create+0x3a>
    default:
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
      return NET_PARAM;
  }
  return NET_PARAM;
}
 8001e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          return net_sock_create_wifi(nethnd, sockhnd, proto);
 8001e1e:	f000 bb41 	b.w	80024a4 <net_sock_create_wifi>
}
 8001e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return net_sock_create_mbedtls(nethnd, sockhnd, proto);
 8001e26:	f000 bf17 	b.w	8002c58 <net_sock_create_mbedtls>
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
 8001e2a:	4906      	ldr	r1, [pc, #24]	; (8001e44 <net_sock_create+0x40>)
 8001e2c:	4806      	ldr	r0, [pc, #24]	; (8001e48 <net_sock_create+0x44>)
 8001e2e:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8001e32:	f021 fc51 	bl	80236d8 <iprintf>
 8001e36:	7821      	ldrb	r1, [r4, #0]
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <net_sock_create+0x48>)
 8001e3a:	f021 fc4d 	bl	80236d8 <iprintf>
}
 8001e3e:	f06f 0001 	mvn.w	r0, #1
 8001e42:	bd10      	pop	{r4, pc}
 8001e44:	08028348 	.word	0x08028348
 8001e48:	0802da5d 	.word	0x0802da5d
 8001e4c:	0802e247 	.word	0x0802e247

08001e50 <net_sock_open>:


int net_sock_open(net_sockhnd_t sockhnd, const char * hostname, int remoteport, int localport)
{
 8001e50:	b410      	push	{r4}
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 8001e52:	6884      	ldr	r4, [r0, #8]
 8001e54:	46a4      	mov	ip, r4
}
 8001e56:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 8001e5a:	4760      	bx	ip

08001e5c <net_sock_setopt>:


int net_sock_setopt(net_sockhnd_t sockhnd, const char * optname, const uint8_t * optbuf, size_t optlen)
{
 8001e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e60:	4681      	mov	r9, r0
 8001e62:	460e      	mov	r6, r1
 8001e64:	469a      	mov	sl, r3
  int rc = NET_PARAM;
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 8001e66:	4617      	mov	r7, r2
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d07d      	beq.n	8001f68 <net_sock_setopt+0x10c>
 8001e6c:	1e1d      	subs	r5, r3, #0
 8001e6e:	bf18      	it	ne
 8001e70:	2501      	movne	r5, #1

#ifdef USE_MBED_TLS
  net_tls_data_t * tlsData = sock->tlsData;
  if ( (sock->proto == NET_PROTO_TLS) && (tlsData != NULL) )
 8001e72:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d17b      	bne.n	8001f72 <net_sock_setopt+0x116>
  net_tls_data_t * tlsData = sock->tlsData;
 8001e7a:	f8d9 802c 	ldr.w	r8, [r9, #44]	; 0x2c
  if ( (sock->proto == NET_PROTO_TLS) && (tlsData != NULL) )
 8001e7e:	f1b8 0f00 	cmp.w	r8, #0
 8001e82:	d076      	beq.n	8001f72 <net_sock_setopt+0x116>
  {
    if (strcmp(optname, "tls_ca_certs") == 0)
 8001e84:	493c      	ldr	r1, [pc, #240]	; (8001f78 <net_sock_setopt+0x11c>)
 8001e86:	4630      	mov	r0, r6
 8001e88:	f7fe f9a2 	bl	80001d0 <strcmp>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d16c      	bne.n	8001f6c <net_sock_setopt+0x110>
    {
      if (has_opt_data)
 8001e92:	2d00      	cmp	r5, #0
 8001e94:	d06a      	beq.n	8001f6c <net_sock_setopt+0x110>
      {
        tlsData->tls_ca_certs = (unsigned char *) optbuf;
 8001e96:	f8c8 7000 	str.w	r7, [r8]
        rc = NET_OK;
      }
    }
    if (strcmp(optname, "tls_dev_cert") == 0)
 8001e9a:	4938      	ldr	r1, [pc, #224]	; (8001f7c <net_sock_setopt+0x120>)
 8001e9c:	4630      	mov	r0, r6
 8001e9e:	f7fe f997 	bl	80001d0 <strcmp>
 8001ea2:	b918      	cbnz	r0, 8001eac <net_sock_setopt+0x50>
    {
      if (has_opt_data)
 8001ea4:	b115      	cbz	r5, 8001eac <net_sock_setopt+0x50>
      {
        tlsData->tls_dev_cert = (unsigned char *) optbuf;
 8001ea6:	f8c8 7008 	str.w	r7, [r8, #8]
        rc = NET_OK;
 8001eaa:	4604      	mov	r4, r0
      }
    }
    if (strcmp(optname, "tls_dev_key") == 0)
 8001eac:	4934      	ldr	r1, [pc, #208]	; (8001f80 <net_sock_setopt+0x124>)
 8001eae:	4630      	mov	r0, r6
 8001eb0:	f7fe f98e 	bl	80001d0 <strcmp>
 8001eb4:	b918      	cbnz	r0, 8001ebe <net_sock_setopt+0x62>
    {
      if (has_opt_data)
 8001eb6:	b115      	cbz	r5, 8001ebe <net_sock_setopt+0x62>
      {
        tlsData->tls_dev_key = (unsigned char *) optbuf;
 8001eb8:	f8c8 700c 	str.w	r7, [r8, #12]
        rc = NET_OK;
 8001ebc:	4604      	mov	r4, r0
      }
    }
    if (strcmp(optname, "tls_dev_pwd") == 0)
 8001ebe:	4931      	ldr	r1, [pc, #196]	; (8001f84 <net_sock_setopt+0x128>)
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f7fe f985 	bl	80001d0 <strcmp>
 8001ec6:	b918      	cbnz	r0, 8001ed0 <net_sock_setopt+0x74>
    {
      if (has_opt_data)
 8001ec8:	b115      	cbz	r5, 8001ed0 <net_sock_setopt+0x74>
      {
        tlsData->tls_dev_pwd = (uint8_t *) optbuf;
        tlsData->tls_dev_pwd_len = optlen;
 8001eca:	e9c8 7a04 	strd	r7, sl, [r8, #16]
        rc = NET_OK;
 8001ece:	4604      	mov	r4, r0
      }
    }
    if (strcmp(optname, "tls_server_verification") == 0)
 8001ed0:	492d      	ldr	r1, [pc, #180]	; (8001f88 <net_sock_setopt+0x12c>)
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	f7fe f97c 	bl	80001d0 <strcmp>
 8001ed8:	4328      	orrs	r0, r5
    {
      if (!has_opt_data)
      {
        tlsData->tls_srv_verification = true;
 8001eda:	bf02      	ittt	eq
 8001edc:	2301      	moveq	r3, #1
        rc = NET_OK;
 8001ede:	4604      	moveq	r4, r0
        tlsData->tls_srv_verification = true;
 8001ee0:	f888 3018 	strbeq.w	r3, [r8, #24]
      }
    }
    if (strcmp(optname, "tls_server_noverification") == 0)
 8001ee4:	4929      	ldr	r1, [pc, #164]	; (8001f8c <net_sock_setopt+0x130>)
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	f7fe f972 	bl	80001d0 <strcmp>
 8001eec:	4328      	orrs	r0, r5
    {
      if (!has_opt_data)
      {
        tlsData->tls_srv_verification = false;
 8001eee:	bf04      	itt	eq
 8001ef0:	f888 0018 	strbeq.w	r0, [r8, #24]
        rc = NET_OK;
 8001ef4:	4604      	moveq	r4, r0
      }
    }
    if (strcmp(optname, "tls_server_name") == 0)
 8001ef6:	4926      	ldr	r1, [pc, #152]	; (8001f90 <net_sock_setopt+0x134>)
 8001ef8:	4630      	mov	r0, r6
 8001efa:	f7fe f969 	bl	80001d0 <strcmp>
 8001efe:	b918      	cbnz	r0, 8001f08 <net_sock_setopt+0xac>
    {
      if (has_opt_data)
 8001f00:	b115      	cbz	r5, 8001f08 <net_sock_setopt+0xac>
      {
        tlsData->tls_srv_name = (char *) optbuf;
 8001f02:	f8c8 701c 	str.w	r7, [r8, #28]
        rc = NET_OK;
 8001f06:	4604      	mov	r4, r0
      }
    }
  }
#endif /* USE_MBED_TLS */
  
  if (strcmp(optname, "sock_blocking") == 0)
 8001f08:	4922      	ldr	r1, [pc, #136]	; (8001f94 <net_sock_setopt+0x138>)
 8001f0a:	4630      	mov	r0, r6
 8001f0c:	f7fe f960 	bl	80001d0 <strcmp>
 8001f10:	4328      	orrs	r0, r5
  {
    if (!has_opt_data)
    {
      sock->blocking = true;
 8001f12:	bf02      	ittt	eq
 8001f14:	2301      	moveq	r3, #1
      rc = NET_OK;
 8001f16:	4604      	moveq	r4, r0
      sock->blocking = true;
 8001f18:	f889 3025 	strbeq.w	r3, [r9, #37]	; 0x25
    }
  }
  if (strcmp(optname, "sock_noblocking") == 0)
 8001f1c:	491e      	ldr	r1, [pc, #120]	; (8001f98 <net_sock_setopt+0x13c>)
 8001f1e:	4630      	mov	r0, r6
 8001f20:	f7fe f956 	bl	80001d0 <strcmp>
 8001f24:	4328      	orrs	r0, r5
  {
    if (!has_opt_data)
    {
      sock->blocking = false;
 8001f26:	bf04      	itt	eq
 8001f28:	f889 0025 	strbeq.w	r0, [r9, #37]	; 0x25
      rc = NET_OK;
 8001f2c:	4604      	moveq	r4, r0
    }
  }
  if (strcmp(optname, "sock_read_timeout") == 0)
 8001f2e:	491b      	ldr	r1, [pc, #108]	; (8001f9c <net_sock_setopt+0x140>)
 8001f30:	4630      	mov	r0, r6
 8001f32:	f7fe f94d 	bl	80001d0 <strcmp>
 8001f36:	4680      	mov	r8, r0
 8001f38:	b930      	cbnz	r0, 8001f48 <net_sock_setopt+0xec>
  {
    if (has_opt_data)
 8001f3a:	b12d      	cbz	r5, 8001f48 <net_sock_setopt+0xec>
    {
      sock->read_timeout = atoi((char const *)optbuf);
 8001f3c:	4638      	mov	r0, r7
 8001f3e:	f020 f950 	bl	80221e2 <atoi>
      rc = NET_OK;
 8001f42:	4644      	mov	r4, r8
      sock->read_timeout = atoi((char const *)optbuf);
 8001f44:	f8a9 0026 	strh.w	r0, [r9, #38]	; 0x26
    }
  }
  if (strcmp(optname, "sock_write_timeout") == 0)
 8001f48:	4630      	mov	r0, r6
 8001f4a:	4915      	ldr	r1, [pc, #84]	; (8001fa0 <net_sock_setopt+0x144>)
 8001f4c:	f7fe f940 	bl	80001d0 <strcmp>
 8001f50:	4606      	mov	r6, r0
 8001f52:	b930      	cbnz	r0, 8001f62 <net_sock_setopt+0x106>
  {
    if (has_opt_data)
 8001f54:	b12d      	cbz	r5, 8001f62 <net_sock_setopt+0x106>
    {
      sock->write_timeout = atoi((char const *)optbuf);
 8001f56:	4638      	mov	r0, r7
 8001f58:	f020 f943 	bl	80221e2 <atoi>
      rc = NET_OK;
 8001f5c:	4634      	mov	r4, r6
      sock->write_timeout = atoi((char const *)optbuf);
 8001f5e:	f8a9 0028 	strh.w	r0, [r9, #40]	; 0x28
    }
  }
  return rc;
}
 8001f62:	4620      	mov	r0, r4
 8001f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 8001f68:	4615      	mov	r5, r2
 8001f6a:	e782      	b.n	8001e72 <net_sock_setopt+0x16>
  int rc = NET_PARAM;
 8001f6c:	f06f 0401 	mvn.w	r4, #1
 8001f70:	e793      	b.n	8001e9a <net_sock_setopt+0x3e>
 8001f72:	f06f 0401 	mvn.w	r4, #1
 8001f76:	e7c7      	b.n	8001f08 <net_sock_setopt+0xac>
 8001f78:	0802e27f 	.word	0x0802e27f
 8001f7c:	0802e28c 	.word	0x0802e28c
 8001f80:	0802e299 	.word	0x0802e299
 8001f84:	0802e2a5 	.word	0x0802e2a5
 8001f88:	0802e2b1 	.word	0x0802e2b1
 8001f8c:	0802e2c9 	.word	0x0802e2c9
 8001f90:	0802e2e3 	.word	0x0802e2e3
 8001f94:	0802e2f3 	.word	0x0802e2f3
 8001f98:	0802e301 	.word	0x0802e301
 8001f9c:	0802e07b 	.word	0x0802e07b
 8001fa0:	0802e311 	.word	0x0802e311

08001fa4 <net_sock_recv>:


int net_sock_recv(net_sockhnd_t sockhnd, uint8_t * const buf, size_t len)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.recv != NULL) ? sock->methods.recv(sockhnd, buf, len) : NET_PARAM;
 8001fa4:	68c3      	ldr	r3, [r0, #12]
 8001fa6:	b103      	cbz	r3, 8001faa <net_sock_recv+0x6>
 8001fa8:	4718      	bx	r3
}
 8001faa:	f06f 0001 	mvn.w	r0, #1
 8001fae:	4770      	bx	lr

08001fb0 <net_sock_send>:


int net_sock_send(net_sockhnd_t sockhnd, const uint8_t * buf, size_t len)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.send != NULL) ? sock->methods.send(sockhnd, buf, len) : NET_PARAM;
 8001fb0:	6943      	ldr	r3, [r0, #20]
 8001fb2:	b103      	cbz	r3, 8001fb6 <net_sock_send+0x6>
 8001fb4:	4718      	bx	r3
} 
 8001fb6:	f06f 0001 	mvn.w	r0, #1
 8001fba:	4770      	bx	lr

08001fbc <net_sock_close>:
  

int net_sock_close(net_sockhnd_t sockhnd)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.close != NULL) ? sock->methods.close(sockhnd) : NET_PARAM;
 8001fbc:	69c3      	ldr	r3, [r0, #28]
 8001fbe:	b103      	cbz	r3, 8001fc2 <net_sock_close+0x6>
 8001fc0:	4718      	bx	r3
}
 8001fc2:	f06f 0001 	mvn.w	r0, #1
 8001fc6:	4770      	bx	lr

08001fc8 <net_sock_destroy>:


int net_sock_destroy(net_sockhnd_t sockhnd)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.destroy != NULL) ? sock->methods.destroy(sockhnd) : NET_PARAM;
 8001fc8:	6a03      	ldr	r3, [r0, #32]
 8001fca:	b103      	cbz	r3, 8001fce <net_sock_destroy+0x6>
 8001fcc:	4718      	bx	r3
}
 8001fce:	f06f 0001 	mvn.w	r0, #1
 8001fd2:	4770      	bx	lr

08001fd4 <net_timeout_left_ms>:
 * @param   In:   now       Current index.
 * @param   In:   timeout   Target index.
 * @retval  Number of units from now to target.
 */
int32_t net_timeout_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
 8001fd4:	b510      	push	{r4, lr}
  int32_t ret = 0;
  uint32_t wrap_end = 0;
  
  if (now < init)
 8001fd6:	4281      	cmp	r1, r0
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", init, now);
    wrap_end = UINT32_MAX - init;
  }
  ret = wrap_end - (now - init) + timeout;
 8001fd8:	4402      	add	r2, r0
    wrap_end = UINT32_MAX - init;
 8001fda:	bf34      	ite	cc
 8001fdc:	43c4      	mvncc	r4, r0
  uint32_t wrap_end = 0;
 8001fde:	2400      	movcs	r4, #0
  ret = wrap_end - (now - init) + timeout;
 8001fe0:	1a53      	subs	r3, r2, r1

  return ret;
}
 8001fe2:	1918      	adds	r0, r3, r4
 8001fe4:	bd10      	pop	{r4, pc}

08001fe6 <net_sock_destroy_tcp_wifi>:

int net_sock_destroy_tcp_wifi(net_sockhnd_t sockhnd)
{
  int rc = NET_ERR;
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
  net_ctxt_t *ctxt = sock->net;
 8001fe6:	6802      	ldr	r2, [r0, #0]
{
 8001fe8:	b508      	push	{r3, lr}
    
  /* Find the parent in the linked list.
   * Unlink and free. 
   */
  if (sock == ctxt->sock_list)
 8001fea:	6853      	ldr	r3, [r2, #4]
 8001fec:	4283      	cmp	r3, r0
 8001fee:	d105      	bne.n	8001ffc <net_sock_destroy_tcp_wifi+0x16>
    net_sock_ctxt_t *cur = ctxt->sock_list;
    do
    {
      if (cur->next == sock)
      {
        cur->next = sock->next;
 8001ff0:	6843      	ldr	r3, [r0, #4]
 8001ff2:	6053      	str	r3, [r2, #4]
      cur = cur->next;
    } while(cur->next != NULL);
  }
  if (rc == NET_OK)
  {
    net_free(sock);
 8001ff4:	f020 fa2e 	bl	8022454 <free>
 8001ff8:	2000      	movs	r0, #0
  }
  
  return rc;
}
 8001ffa:	bd08      	pop	{r3, pc}
      if (cur->next == sock)
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4283      	cmp	r3, r0
 8002002:	d0f5      	beq.n	8001ff0 <net_sock_destroy_tcp_wifi+0xa>
    } while(cur->next != NULL);
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	2a00      	cmp	r2, #0
 8002008:	d1f8      	bne.n	8001ffc <net_sock_destroy_tcp_wifi+0x16>
  int rc = NET_ERR;
 800200a:	f04f 30ff 	mov.w	r0, #4294967295
 800200e:	e7f4      	b.n	8001ffa <net_sock_destroy_tcp_wifi+0x14>

08002010 <net_sock_open_wifi>:
{
 8002010:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002014:	461e      	mov	r6, r3
  uint8_t ip_addr[4] = { 0, 0, 0, 0 };
 8002016:	2300      	movs	r3, #0
 8002018:	9302      	str	r3, [sp, #8]
  memset(underlying_socket_busy, 0, sizeof(underlying_socket_busy));
 800201a:	9303      	str	r3, [sp, #12]
  net_sock_ctxt_t * cur = sock->net->sock_list;
 800201c:	6803      	ldr	r3, [r0, #0]
{
 800201e:	4617      	mov	r7, r2
  net_sock_ctxt_t * cur = sock->net->sock_list;
 8002020:	685c      	ldr	r4, [r3, #4]
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 8002022:	f04f 32ff 	mov.w	r2, #4294967295
{
 8002026:	4605      	mov	r5, r0
 8002028:	4688      	mov	r8, r1
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 800202a:	6302      	str	r2, [r0, #48]	; 0x30
    if ( ((cur->proto == NET_PROTO_TCP) || (cur->proto == NET_PROTO_UDP) )&& ((int) cur->underlying_sock_ctxt >= 0) )
 800202c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8002030:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8002034:	2a01      	cmp	r2, #1
 8002036:	d106      	bne.n	8002046 <net_sock_open_wifi+0x36>
 8002038:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800203a:	2b00      	cmp	r3, #0
      underlying_socket_busy[(int) cur->underlying_sock_ctxt] = true;
 800203c:	bfa2      	ittt	ge
 800203e:	a904      	addge	r1, sp, #16
 8002040:	185b      	addge	r3, r3, r1
 8002042:	f803 2c04 	strbge.w	r2, [r3, #-4]
    cur = cur->next;
 8002046:	6864      	ldr	r4, [r4, #4]
  } while (cur != NULL);
 8002048:	2c00      	cmp	r4, #0
 800204a:	d1ef      	bne.n	800202c <net_sock_open_wifi+0x1c>
 800204c:	ab03      	add	r3, sp, #12
    if (underlying_socket_busy[i] == false)
 800204e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002052:	b95a      	cbnz	r2, 800206c <net_sock_open_wifi+0x5c>
      sock->underlying_sock_ctxt = (net_sockhnd_t) i;
 8002054:	632c      	str	r4, [r5, #48]	; 0x30
    switch(sock->proto)
 8002056:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800205a:	2b01      	cmp	r3, #1
 800205c:	d00a      	beq.n	8002074 <net_sock_open_wifi+0x64>
 800205e:	2b03      	cmp	r3, #3
 8002060:	d014      	beq.n	800208c <net_sock_open_wifi+0x7c>
  int rc = NET_ERR;
 8002062:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002066:	b004      	add	sp, #16
 8002068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = 0; i < WIFI_MAX_CONNECTIONS; i++)
 800206c:	3401      	adds	r4, #1
 800206e:	2c04      	cmp	r4, #4
 8002070:	d1ed      	bne.n	800204e <net_sock_open_wifi+0x3e>
 8002072:	e7f0      	b.n	8002056 <net_sock_open_wifi+0x46>
        if (localport != 0)
 8002074:	bb26      	cbnz	r6, 80020c0 <net_sock_open_wifi+0xb0>
          if (WIFI_GetHostAddress((char *)hostname, ip_addr) != WIFI_STATUS_OK)
 8002076:	a902      	add	r1, sp, #8
 8002078:	4640      	mov	r0, r8
 800207a:	f002 ff31 	bl	8004ee0 <WIFI_GetHostAddress>
 800207e:	4601      	mov	r1, r0
 8002080:	b130      	cbz	r0, 8002090 <net_sock_open_wifi+0x80>
            msg_info("The address of %s could not be resolved.\n", hostname);
 8002082:	4641      	mov	r1, r8
 8002084:	4810      	ldr	r0, [pc, #64]	; (80020c8 <net_sock_open_wifi+0xb8>)
 8002086:	f021 fb27 	bl	80236d8 <iprintf>
 800208a:	e7ea      	b.n	8002062 <net_sock_open_wifi+0x52>
        sock->localport = localport;
 800208c:	636e      	str	r6, [r5, #52]	; 0x34
        proto = WIFI_UDP_PROTOCOL;
 800208e:	2101      	movs	r1, #1
      if( WIFI_STATUS_OK != WIFI_OpenClientConnection((uint32_t) sock->underlying_sock_ctxt,
 8002090:	b2b6      	uxth	r6, r6
 8002092:	b2bf      	uxth	r7, r7
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <net_sock_open_wifi+0xbc>)
 8002096:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002098:	9601      	str	r6, [sp, #4]
 800209a:	9700      	str	r7, [sp, #0]
 800209c:	ab02      	add	r3, sp, #8
 800209e:	f002 ff2b 	bl	8004ef8 <WIFI_OpenClientConnection>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d0df      	beq.n	8002066 <net_sock_open_wifi+0x56>
        msg_error("Failed opening the underlying Wifi socket %d.\n", (int) sock->underlying_sock_ctxt);
 80020a6:	490a      	ldr	r1, [pc, #40]	; (80020d0 <net_sock_open_wifi+0xc0>)
 80020a8:	480a      	ldr	r0, [pc, #40]	; (80020d4 <net_sock_open_wifi+0xc4>)
 80020aa:	22c9      	movs	r2, #201	; 0xc9
 80020ac:	f021 fb14 	bl	80236d8 <iprintf>
 80020b0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <net_sock_open_wifi+0xc8>)
 80020b4:	f021 fb10 	bl	80236d8 <iprintf>
        sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	6328      	str	r0, [r5, #48]	; 0x30
        rc = NET_ERR;
 80020be:	e7d2      	b.n	8002066 <net_sock_open_wifi+0x56>
          rc = NET_PARAM;
 80020c0:	f06f 0001 	mvn.w	r0, #1
 80020c4:	e7cf      	b.n	8002066 <net_sock_open_wifi+0x56>
 80020c6:	bf00      	nop
 80020c8:	0802e324 	.word	0x0802e324
 80020cc:	08030466 	.word	0x08030466
 80020d0:	08028358 	.word	0x08028358
 80020d4:	0802da5d 	.word	0x0802da5d
 80020d8:	0802e34e 	.word	0x0802e34e

080020dc <net_sock_recv_tcp_wifi>:
{
 80020dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020e0:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
  uint16_t read = 0;
 80020e4:	f04f 0300 	mov.w	r3, #0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020e8:	4614      	mov	r4, r2
{
 80020ea:	4689      	mov	r9, r1
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020ec:	bf28      	it	cs
 80020ee:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
{
 80020f2:	4605      	mov	r5, r0
 80020f4:	4616      	mov	r6, r2
  uint16_t read = 0;
 80020f6:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint32_t start_time = HAL_GetTick();
 80020fa:	f006 fda1 	bl	8008c40 <HAL_GetTick>
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020fe:	b2a4      	uxth	r4, r4
  uint32_t start_time = HAL_GetTick();
 8002100:	4682      	mov	sl, r0
  uint8_t * tmp_buf = buf;
 8002102:	46c8      	mov	r8, r9
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 8002104:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8002108:	bb4b      	cbnz	r3, 800215e <net_sock_recv_tcp_wifi+0x82>
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 800210a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800210e:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8002112:	bb83      	cbnz	r3, 8002176 <net_sock_recv_tcp_wifi+0x9a>
 8002114:	2301      	movs	r3, #1
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4622      	mov	r2, r4
 800211a:	f10d 030e 	add.w	r3, sp, #14
 800211e:	4641      	mov	r1, r8
 8002120:	f002 ff4a 	bl	8004fb8 <WIFI_ReceiveData>
    if (status != WIFI_STATUS_OK)
 8002124:	4607      	mov	r7, r0
 8002126:	b340      	cbz	r0, 800217a <net_sock_recv_tcp_wifi+0x9e>
      msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 8002128:	4927      	ldr	r1, [pc, #156]	; (80021c8 <net_sock_recv_tcp_wifi+0xec>)
 800212a:	4828      	ldr	r0, [pc, #160]	; (80021cc <net_sock_recv_tcp_wifi+0xf0>)
 800212c:	22f2      	movs	r2, #242	; 0xf2
 800212e:	f021 fad3 	bl	80236d8 <iprintf>
 8002132:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002136:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4639      	mov	r1, r7
 800213c:	4623      	mov	r3, r4
 800213e:	4824      	ldr	r0, [pc, #144]	; (80021d0 <net_sock_recv_tcp_wifi+0xf4>)
 8002140:	f021 faca 	bl	80236d8 <iprintf>
      msg_error("The port is likely to have been closed by the server.\n")
 8002144:	4920      	ldr	r1, [pc, #128]	; (80021c8 <net_sock_recv_tcp_wifi+0xec>)
 8002146:	4821      	ldr	r0, [pc, #132]	; (80021cc <net_sock_recv_tcp_wifi+0xf0>)
 8002148:	22f4      	movs	r2, #244	; 0xf4
 800214a:	f021 fac5 	bl	80236d8 <iprintf>
 800214e:	4821      	ldr	r0, [pc, #132]	; (80021d4 <net_sock_recv_tcp_wifi+0xf8>)
 8002150:	f021 fb5e 	bl	8023810 <puts>
      rc = NET_EOF;
 8002154:	f06f 0003 	mvn.w	r0, #3
}
 8002158:	b004      	add	sp, #16
 800215a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 800215e:	f006 fd6f 	bl	8008c40 <HAL_GetTick>
 8002162:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 8002164:	4601      	mov	r1, r0
 8002166:	4650      	mov	r0, sl
 8002168:	f7ff ff34 	bl	8001fd4 <net_timeout_left_ms>
 800216c:	2800      	cmp	r0, #0
 800216e:	dccc      	bgt.n	800210a <net_sock_recv_tcp_wifi+0x2e>
      rc = NET_TIMEOUT;
 8002170:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : tmp_buf - buf;
 8002174:	e7f0      	b.n	8002158 <net_sock_recv_tcp_wifi+0x7c>
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 8002176:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8002178:	e7cd      	b.n	8002116 <net_sock_recv_tcp_wifi+0x3a>
      if (read > tmp_len)
 800217a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800217e:	42a2      	cmp	r2, r4
 8002180:	d90d      	bls.n	800219e <net_sock_recv_tcp_wifi+0xc2>
        msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 8002182:	4911      	ldr	r1, [pc, #68]	; (80021c8 <net_sock_recv_tcp_wifi+0xec>)
 8002184:	4811      	ldr	r0, [pc, #68]	; (80021cc <net_sock_recv_tcp_wifi+0xf0>)
 8002186:	22fc      	movs	r2, #252	; 0xfc
 8002188:	f021 faa6 	bl	80236d8 <iprintf>
 800218c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8002190:	4811      	ldr	r0, [pc, #68]	; (80021d8 <net_sock_recv_tcp_wifi+0xfc>)
 8002192:	4622      	mov	r2, r4
 8002194:	f021 faa0 	bl	80236d8 <iprintf>
        rc = NET_ERR;
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	e7dc      	b.n	8002158 <net_sock_recv_tcp_wifi+0x7c>
      tmp_buf += read;
 800219e:	4490      	add	r8, r2
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80021a0:	eba8 0009 	sub.w	r0, r8, r9
 80021a4:	42b0      	cmp	r0, r6
 80021a6:	d00d      	beq.n	80021c4 <net_sock_recv_tcp_wifi+0xe8>
 80021a8:	1a34      	subs	r4, r6, r0
 80021aa:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 80021ae:	bf28      	it	cs
 80021b0:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
 80021b4:	b2a4      	uxth	r4, r4
  } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 80021b6:	2a00      	cmp	r2, #0
 80021b8:	d1ce      	bne.n	8002158 <net_sock_recv_tcp_wifi+0x7c>
 80021ba:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 80021be:	2a00      	cmp	r2, #0
 80021c0:	d1a0      	bne.n	8002104 <net_sock_recv_tcp_wifi+0x28>
 80021c2:	e7c9      	b.n	8002158 <net_sock_recv_tcp_wifi+0x7c>
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80021c4:	463c      	mov	r4, r7
 80021c6:	e7f6      	b.n	80021b6 <net_sock_recv_tcp_wifi+0xda>
 80021c8:	0802836b 	.word	0x0802836b
 80021cc:	0802da5d 	.word	0x0802da5d
 80021d0:	0802e37d 	.word	0x0802e37d
 80021d4:	0802e3d6 	.word	0x0802e3d6
 80021d8:	0802e40c 	.word	0x0802e40c

080021dc <net_sock_recvfrom_udp_wifi>:
{
 80021dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e0:	ed2d 8b02 	vpush	{d8}
 80021e4:	b089      	sub	sp, #36	; 0x24
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021e6:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
  uint16_t read = 0;
 80021ea:	f04f 0700 	mov.w	r7, #0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021ee:	4614      	mov	r4, r2
{
 80021f0:	4605      	mov	r5, r0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021f2:	bf28      	it	cs
 80021f4:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
{
 80021f8:	9104      	str	r1, [sp, #16]
 80021fa:	4690      	mov	r8, r2
 80021fc:	469b      	mov	fp, r3
  uint16_t read = 0;
 80021fe:	f8ad 7018 	strh.w	r7, [sp, #24]
  uint32_t start_time = HAL_GetTick();
 8002202:	f006 fd1d 	bl	8008c40 <HAL_GetTick>
  uint8_t * tmp_buf = buf;
 8002206:	f8dd a010 	ldr.w	sl, [sp, #16]
  uint32_t start_time = HAL_GetTick();
 800220a:	ee08 0a10 	vmov	s16, r0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 800220e:	b2a4      	uxth	r4, r4
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 8002210:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
      uint16_t port = 0;
 8002214:	f8ad 701a 	strh.w	r7, [sp, #26]
      uint8_t ip[4] = { 0, 0, 0, 0 };
 8002218:	9707      	str	r7, [sp, #28]
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 800221a:	2b00      	cmp	r3, #0
 800221c:	d133      	bne.n	8002286 <net_sock_recvfrom_udp_wifi+0xaa>
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 800221e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8002222:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8002226:	2b00      	cmp	r3, #0
 8002228:	d13a      	bne.n	80022a0 <net_sock_recvfrom_udp_wifi+0xc4>
 800222a:	2301      	movs	r3, #1
 800222c:	f10d 021a 	add.w	r2, sp, #26
 8002230:	9202      	str	r2, [sp, #8]
 8002232:	aa07      	add	r2, sp, #28
 8002234:	e9cd 3200 	strd	r3, r2, [sp]
 8002238:	4651      	mov	r1, sl
 800223a:	ab06      	add	r3, sp, #24
 800223c:	4622      	mov	r2, r4
 800223e:	f002 fecd 	bl	8004fdc <WIFI_ReceiveDataFrom>
      if (status != WIFI_STATUS_OK)
 8002242:	4681      	mov	r9, r0
 8002244:	b370      	cbz	r0, 80022a4 <net_sock_recvfrom_udp_wifi+0xc8>
        msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 8002246:	4935      	ldr	r1, [pc, #212]	; (800231c <net_sock_recvfrom_udp_wifi+0x140>)
 8002248:	4835      	ldr	r0, [pc, #212]	; (8002320 <net_sock_recvfrom_udp_wifi+0x144>)
 800224a:	f44f 7293 	mov.w	r2, #294	; 0x126
 800224e:	f021 fa43 	bl	80236d8 <iprintf>
 8002252:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8002256:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4649      	mov	r1, r9
 800225c:	4623      	mov	r3, r4
 800225e:	4831      	ldr	r0, [pc, #196]	; (8002324 <net_sock_recvfrom_udp_wifi+0x148>)
 8002260:	f021 fa3a 	bl	80236d8 <iprintf>
        msg_error("The port is likely to have been closed by the server.\n")
 8002264:	492d      	ldr	r1, [pc, #180]	; (800231c <net_sock_recvfrom_udp_wifi+0x140>)
 8002266:	482e      	ldr	r0, [pc, #184]	; (8002320 <net_sock_recvfrom_udp_wifi+0x144>)
 8002268:	f44f 7294 	mov.w	r2, #296	; 0x128
 800226c:	f021 fa34 	bl	80236d8 <iprintf>
 8002270:	482d      	ldr	r0, [pc, #180]	; (8002328 <net_sock_recvfrom_udp_wifi+0x14c>)
 8002272:	f021 facd 	bl	8023810 <puts>
        rc = NET_EOF;
 8002276:	f06f 0603 	mvn.w	r6, #3
}
 800227a:	4630      	mov	r0, r6
 800227c:	b009      	add	sp, #36	; 0x24
 800227e:	ecbd 8b02 	vpop	{d8}
 8002282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 8002286:	f006 fcdb 	bl	8008c40 <HAL_GetTick>
 800228a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 800228c:	4601      	mov	r1, r0
 800228e:	ee18 0a10 	vmov	r0, s16
 8002292:	f7ff fe9f 	bl	8001fd4 <net_timeout_left_ms>
 8002296:	2800      	cmp	r0, #0
 8002298:	dcc1      	bgt.n	800221e <net_sock_recvfrom_udp_wifi+0x42>
        rc = NET_TIMEOUT;
 800229a:	f06f 0602 	mvn.w	r6, #2
 800229e:	e7ec      	b.n	800227a <net_sock_recvfrom_udp_wifi+0x9e>
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80022a0:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80022a2:	e7c3      	b.n	800222c <net_sock_recvfrom_udp_wifi+0x50>
        if (read > tmp_len)
 80022a4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80022a8:	42a3      	cmp	r3, r4
 80022aa:	d90e      	bls.n	80022ca <net_sock_recvfrom_udp_wifi+0xee>
          msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 80022ac:	491b      	ldr	r1, [pc, #108]	; (800231c <net_sock_recvfrom_udp_wifi+0x140>)
 80022ae:	481c      	ldr	r0, [pc, #112]	; (8002320 <net_sock_recvfrom_udp_wifi+0x144>)
 80022b0:	f44f 7298 	mov.w	r2, #304	; 0x130
 80022b4:	f021 fa10 	bl	80236d8 <iprintf>
 80022b8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80022bc:	481b      	ldr	r0, [pc, #108]	; (800232c <net_sock_recvfrom_udp_wifi+0x150>)
 80022be:	4622      	mov	r2, r4
 80022c0:	f021 fa0a 	bl	80236d8 <iprintf>
          rc = NET_ERR;
 80022c4:	f04f 36ff 	mov.w	r6, #4294967295
 80022c8:	e7d7      	b.n	800227a <net_sock_recvfrom_udp_wifi+0x9e>
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80022ca:	9a04      	ldr	r2, [sp, #16]
        tmp_buf += read;
 80022cc:	449a      	add	sl, r3
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80022ce:	ebaa 0602 	sub.w	r6, sl, r2
 80022d2:	4546      	cmp	r6, r8
 80022d4:	d01f      	beq.n	8002316 <net_sock_recvfrom_udp_wifi+0x13a>
 80022d6:	eba8 0406 	sub.w	r4, r8, r6
 80022da:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 80022de:	bf28      	it	cs
 80022e0:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
 80022e4:	b2a4      	uxth	r4, r4
      remoteaddress->ipv = NET_IP_V4;
 80022e6:	4658      	mov	r0, fp
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 80022e8:	2210      	movs	r2, #16
      remoteaddress->ipv = NET_IP_V4;
 80022ea:	f800 7b01 	strb.w	r7, [r0], #1
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 80022ee:	21ff      	movs	r1, #255	; 0xff
 80022f0:	9305      	str	r3, [sp, #20]
 80022f2:	f020 f8ed 	bl	80224d0 <memset>
      memcpy(&remoteaddress->ip[12], ip, 4);
 80022f6:	9a07      	ldr	r2, [sp, #28]
      *remoteport = port;
 80022f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
      memcpy(&remoteaddress->ip[12], ip, 4);
 80022fa:	f8cb 200d 	str.w	r2, [fp, #13]
      *remoteport = port;
 80022fe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8002302:	601a      	str	r2, [r3, #0]
    } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 8002304:	9b05      	ldr	r3, [sp, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1b7      	bne.n	800227a <net_sock_recvfrom_udp_wifi+0x9e>
 800230a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f af7e 	bne.w	8002210 <net_sock_recvfrom_udp_wifi+0x34>
 8002314:	e7b1      	b.n	800227a <net_sock_recvfrom_udp_wifi+0x9e>
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 8002316:	4604      	mov	r4, r0
 8002318:	e7e5      	b.n	80022e6 <net_sock_recvfrom_udp_wifi+0x10a>
 800231a:	bf00      	nop
 800231c:	08028382 	.word	0x08028382
 8002320:	0802da5d 	.word	0x0802da5d
 8002324:	0802e37d 	.word	0x0802e37d
 8002328:	0802e3d6 	.word	0x0802e3d6
 800232c:	0802e40c 	.word	0x0802e40c

08002330 <net_sock_send_tcp_wifi>:
{
 8002330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002332:	b085      	sub	sp, #20
  uint16_t sent = 0;
 8002334:	2300      	movs	r3, #0
{
 8002336:	4615      	mov	r5, r2
 8002338:	4604      	mov	r4, r0
 800233a:	460f      	mov	r7, r1
  uint16_t sent = 0;
 800233c:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint32_t start_time = HAL_GetTick();
 8002340:	f006 fc7e 	bl	8008c40 <HAL_GetTick>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002344:	b2ad      	uxth	r5, r5
  uint32_t start_time = HAL_GetTick();
 8002346:	4606      	mov	r6, r0
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 8002348:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800234c:	b9d3      	cbnz	r3, 8002384 <net_sock_send_tcp_wifi+0x54>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 800234e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002352:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002356:	bb0b      	cbnz	r3, 800239c <net_sock_send_tcp_wifi+0x6c>
 8002358:	2301      	movs	r3, #1
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	462a      	mov	r2, r5
 800235e:	f10d 030e 	add.w	r3, sp, #14
 8002362:	4639      	mov	r1, r7
 8002364:	f002 fe00 	bl	8004f68 <WIFI_SendData>
    if (status !=  WIFI_STATUS_OK)
 8002368:	b1d0      	cbz	r0, 80023a0 <net_sock_send_tcp_wifi+0x70>
      msg_error("Send failed.\n");
 800236a:	4912      	ldr	r1, [pc, #72]	; (80023b4 <net_sock_send_tcp_wifi+0x84>)
 800236c:	4812      	ldr	r0, [pc, #72]	; (80023b8 <net_sock_send_tcp_wifi+0x88>)
 800236e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8002372:	f021 f9b1 	bl	80236d8 <iprintf>
 8002376:	4811      	ldr	r0, [pc, #68]	; (80023bc <net_sock_send_tcp_wifi+0x8c>)
 8002378:	f021 fa4a 	bl	8023810 <puts>
      rc = NET_ERR;
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002380:	b005      	add	sp, #20
 8002382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 8002384:	f006 fc5c 	bl	8008c40 <HAL_GetTick>
 8002388:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800238a:	4601      	mov	r1, r0
 800238c:	4630      	mov	r0, r6
 800238e:	f7ff fe21 	bl	8001fd4 <net_timeout_left_ms>
 8002392:	2800      	cmp	r0, #0
 8002394:	dcdb      	bgt.n	800234e <net_sock_send_tcp_wifi+0x1e>
      rc = NET_TIMEOUT;
 8002396:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : sent;
 800239a:	e7f1      	b.n	8002380 <net_sock_send_tcp_wifi+0x50>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 800239c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800239e:	e7dc      	b.n	800235a <net_sock_send_tcp_wifi+0x2a>
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 80023a0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d1eb      	bne.n	8002380 <net_sock_send_tcp_wifi+0x50>
 80023a8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	d1cb      	bne.n	8002348 <net_sock_send_tcp_wifi+0x18>
 80023b0:	e7e6      	b.n	8002380 <net_sock_send_tcp_wifi+0x50>
 80023b2:	bf00      	nop
 80023b4:	0802839d 	.word	0x0802839d
 80023b8:	0802da5d 	.word	0x0802da5d
 80023bc:	0802e452 	.word	0x0802e452

080023c0 <net_sock_sendto_udp_wifi>:
{
 80023c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	461d      	mov	r5, r3
  uint16_t sent = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8ad 3012 	strh.w	r3, [sp, #18]
{
 80023ce:	4604      	mov	r4, r0
 80023d0:	4688      	mov	r8, r1
 80023d2:	4616      	mov	r6, r2
  uint32_t start_time = HAL_GetTick();
 80023d4:	f006 fc34 	bl	8008c40 <HAL_GetTick>
  if (remoteaddress->ipv != NET_IP_V4)
 80023d8:	782b      	ldrb	r3, [r5, #0]
  uint32_t start_time = HAL_GetTick();
 80023da:	4607      	mov	r7, r0
  if (remoteaddress->ipv != NET_IP_V4)
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d147      	bne.n	8002470 <net_sock_sendto_udp_wifi+0xb0>
    ip_addr[i] = remoteaddress->ip[12+i];
 80023e0:	7b6b      	ldrb	r3, [r5, #13]
 80023e2:	f88d 3014 	strb.w	r3, [sp, #20]
 80023e6:	7bab      	ldrb	r3, [r5, #14]
 80023e8:	f88d 3015 	strb.w	r3, [sp, #21]
 80023ec:	7beb      	ldrb	r3, [r5, #15]
 80023ee:	f88d 3016 	strb.w	r3, [sp, #22]
 80023f2:	7c2b      	ldrb	r3, [r5, #16]
 80023f4:	f88d 3017 	strb.w	r3, [sp, #23]
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 80023f8:	b2b6      	uxth	r6, r6
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80023fa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80023fe:	bb03      	cbnz	r3, 8002442 <net_sock_sendto_udp_wifi+0x82>
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002400:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002404:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002408:	bb3b      	cbnz	r3, 800245a <net_sock_sendto_udp_wifi+0x9a>
 800240a:	2301      	movs	r3, #1
 800240c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800240e:	b292      	uxth	r2, r2
 8002410:	9202      	str	r2, [sp, #8]
 8002412:	aa05      	add	r2, sp, #20
 8002414:	e9cd 3200 	strd	r3, r2, [sp]
 8002418:	4641      	mov	r1, r8
 800241a:	f10d 0312 	add.w	r3, sp, #18
 800241e:	4632      	mov	r2, r6
 8002420:	f002 fdb4 	bl	8004f8c <WIFI_SendDataTo>
    if (status !=  WIFI_STATUS_OK)
 8002424:	b1d8      	cbz	r0, 800245e <net_sock_sendto_udp_wifi+0x9e>
      msg_error("Send failed.\n");
 8002426:	4914      	ldr	r1, [pc, #80]	; (8002478 <net_sock_sendto_udp_wifi+0xb8>)
 8002428:	4814      	ldr	r0, [pc, #80]	; (800247c <net_sock_sendto_udp_wifi+0xbc>)
 800242a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800242e:	f021 f953 	bl	80236d8 <iprintf>
 8002432:	4813      	ldr	r0, [pc, #76]	; (8002480 <net_sock_sendto_udp_wifi+0xc0>)
 8002434:	f021 f9ec 	bl	8023810 <puts>
      rc = NET_ERR;
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
}
 800243c:	b006      	add	sp, #24
 800243e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 8002442:	f006 fbfd 	bl	8008c40 <HAL_GetTick>
 8002446:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002448:	4601      	mov	r1, r0
 800244a:	4638      	mov	r0, r7
 800244c:	f7ff fdc2 	bl	8001fd4 <net_timeout_left_ms>
 8002450:	2800      	cmp	r0, #0
 8002452:	dcd5      	bgt.n	8002400 <net_sock_sendto_udp_wifi+0x40>
      rc = NET_TIMEOUT;
 8002454:	f06f 0002 	mvn.w	r0, #2
 8002458:	e7f0      	b.n	800243c <net_sock_sendto_udp_wifi+0x7c>
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 800245a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800245c:	e7d6      	b.n	800240c <net_sock_sendto_udp_wifi+0x4c>
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 800245e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8002462:	2800      	cmp	r0, #0
 8002464:	d1ea      	bne.n	800243c <net_sock_sendto_udp_wifi+0x7c>
 8002466:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800246a:	2a00      	cmp	r2, #0
 800246c:	d1c5      	bne.n	80023fa <net_sock_sendto_udp_wifi+0x3a>
 800246e:	e7e5      	b.n	800243c <net_sock_sendto_udp_wifi+0x7c>
    return NET_PARAM;
 8002470:	f06f 0001 	mvn.w	r0, #1
 8002474:	e7e2      	b.n	800243c <net_sock_sendto_udp_wifi+0x7c>
 8002476:	bf00      	nop
 8002478:	080283b4 	.word	0x080283b4
 800247c:	0802da5d 	.word	0x0802da5d
 8002480:	0802e452 	.word	0x0802e452

08002484 <net_sock_close_tcp_wifi>:
{
 8002484:	b510      	push	{r4, lr}
 8002486:	4604      	mov	r4, r0
  WIFI_Status_t status = WIFI_CloseClientConnection((uint8_t) ((uint32_t)sock->underlying_sock_ctxt && 0xFF));
 8002488:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800248a:	3800      	subs	r0, #0
 800248c:	bf18      	it	ne
 800248e:	2001      	movne	r0, #1
 8002490:	f002 fd5a 	bl	8004f48 <WIFI_CloseClientConnection>
  if (status == WIFI_STATUS_OK)
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	b908      	cbnz	r0, 800249e <net_sock_close_tcp_wifi+0x1a>
    sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 800249a:	6323      	str	r3, [r4, #48]	; 0x30
}
 800249c:	bd10      	pop	{r4, pc}
  int rc = NET_ERR;
 800249e:	4618      	mov	r0, r3
  return rc;
 80024a0:	e7fc      	b.n	800249c <net_sock_close_tcp_wifi+0x18>
	...

080024a4 <net_sock_create_wifi>:
{
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	4605      	mov	r5, r0
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 80024a8:	2038      	movs	r0, #56	; 0x38
{
 80024aa:	460f      	mov	r7, r1
 80024ac:	4616      	mov	r6, r2
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 80024ae:	f01f ffc9 	bl	8022444 <malloc>
  if (sock == NULL)
 80024b2:	4604      	mov	r4, r0
 80024b4:	b950      	cbnz	r0, 80024cc <net_sock_create_wifi+0x28>
    msg_error("net_sock_create allocation failed.\n");
 80024b6:	491c      	ldr	r1, [pc, #112]	; (8002528 <net_sock_create_wifi+0x84>)
 80024b8:	481c      	ldr	r0, [pc, #112]	; (800252c <net_sock_create_wifi+0x88>)
 80024ba:	2259      	movs	r2, #89	; 0x59
 80024bc:	f021 f90c 	bl	80236d8 <iprintf>
 80024c0:	481b      	ldr	r0, [pc, #108]	; (8002530 <net_sock_create_wifi+0x8c>)
 80024c2:	f021 f9a5 	bl	8023810 <puts>
    rc = NET_ERR;
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80024ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 80024cc:	222c      	movs	r2, #44	; 0x2c
 80024ce:	2100      	movs	r1, #0
 80024d0:	300c      	adds	r0, #12
 80024d2:	f01f fffd 	bl	80224d0 <memset>
    sock->next = ctxt->sock_list;
 80024d6:	686b      	ldr	r3, [r5, #4]
 80024d8:	6063      	str	r3, [r4, #4]
    switch(proto)
 80024da:	2e01      	cmp	r6, #1
    sock->methods.open      = (net_sock_open_wifi);
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <net_sock_create_wifi+0x90>)
    sock->net = ctxt;
 80024de:	6025      	str	r5, [r4, #0]
    sock->methods.open      = (net_sock_open_wifi);
 80024e0:	60a3      	str	r3, [r4, #8]
    switch(proto)
 80024e2:	d007      	beq.n	80024f4 <net_sock_create_wifi+0x50>
 80024e4:	2e03      	cmp	r6, #3
 80024e6:	d01a      	beq.n	800251e <net_sock_create_wifi+0x7a>
        free(sock);
 80024e8:	4620      	mov	r0, r4
 80024ea:	f01f ffb3 	bl	8022454 <free>
        return NET_PARAM;
 80024ee:	f06f 0001 	mvn.w	r0, #1
 80024f2:	e7ea      	b.n	80024ca <net_sock_create_wifi+0x26>
        sock->methods.recv      = (net_sock_recv_tcp_wifi);
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <net_sock_create_wifi+0x94>)
 80024f6:	60e3      	str	r3, [r4, #12]
        sock->methods.send      = (net_sock_send_tcp_wifi);
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <net_sock_create_wifi+0x98>)
 80024fa:	6163      	str	r3, [r4, #20]
    sock->methods.close     = (net_sock_close_tcp_wifi);
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <net_sock_create_wifi+0x9c>)
 80024fe:	61e3      	str	r3, [r4, #28]
    sock->methods.destroy   = (net_sock_destroy_tcp_wifi);
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <net_sock_create_wifi+0xa0>)
 8002502:	6223      	str	r3, [r4, #32]
    sock->blocking          = NET_DEFAULT_BLOCKING;
 8002504:	2301      	movs	r3, #1
 8002506:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 800250a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    ctxt->sock_list         = sock; /* Insert at the head of the list */
 800250e:	606c      	str	r4, [r5, #4]
    sock->proto             = proto;
 8002510:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 8002514:	84e3      	strh	r3, [r4, #38]	; 0x26
    sock->write_timeout     = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 8002516:	8523      	strh	r3, [r4, #40]	; 0x28
    *sockhnd = (net_sockhnd_t) sock;
 8002518:	603c      	str	r4, [r7, #0]
    rc = NET_OK;
 800251a:	2000      	movs	r0, #0
 800251c:	e7d5      	b.n	80024ca <net_sock_create_wifi+0x26>
        sock->methods.recvfrom  = (net_sock_recvfrom_udp_wifi);
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <net_sock_create_wifi+0xa4>)
 8002520:	6123      	str	r3, [r4, #16]
        sock->methods.sendto    = (net_sock_sendto_udp_wifi);
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <net_sock_create_wifi+0xa8>)
 8002524:	61a3      	str	r3, [r4, #24]
        break;
 8002526:	e7e9      	b.n	80024fc <net_sock_create_wifi+0x58>
 8002528:	080283cd 	.word	0x080283cd
 800252c:	0802da5d 	.word	0x0802da5d
 8002530:	0802e45f 	.word	0x0802e45f
 8002534:	08002011 	.word	0x08002011
 8002538:	080020dd 	.word	0x080020dd
 800253c:	08002331 	.word	0x08002331
 8002540:	08002485 	.word	0x08002485
 8002544:	08001fe7 	.word	0x08001fe7
 8002548:	080021dd 	.word	0x080021dd
 800254c:	080023c1 	.word	0x080023c1

08002550 <my_debug>:
  ((void) level);
#if defined ( __GNUC__ ) && !defined(__CC_ARM) && defined (HAS_RTOS)
  ((void) ctx);
  mbedtls_printf("%s:%04d: %s\n", file, line, str );
#else
  mbedtls_fprintf((FILE *) ctx, "%s:%04d: %s\n", file, line, str );
 8002550:	4901      	ldr	r1, [pc, #4]	; (8002558 <my_debug+0x8>)
 8002552:	f01f be59 	b.w	8022208 <fiprintf>
 8002556:	bf00      	nop
 8002558:	0802e482 	.word	0x0802e482

0800255c <internal_close>:
#endif
}


static void internal_close(net_sock_ctxt_t * sock)
{
 800255c:	b510      	push	{r4, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 800255e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	6303      	str	r3, [r0, #48]	; 0x30
 
  mbedtls_x509_crt_free(&tlsData->clicert);
 8002566:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 800256a:	f01e fe8f 	bl	802128c <mbedtls_x509_crt_free>
  mbedtls_pk_free(&tlsData->pkey);
 800256e:	f204 7014 	addw	r0, r4, #1812	; 0x714
 8002572:	f013 faca 	bl	8015b0a <mbedtls_pk_free>
  mbedtls_x509_crt_free(&tlsData->cacert);
 8002576:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
 800257a:	f01e fe87 	bl	802128c <mbedtls_x509_crt_free>
  mbedtls_x509_crl_free(&tlsData->cacrl);
 800257e:	f204 40ec 	addw	r0, r4, #1260	; 0x4ec
 8002582:	f01d fbed 	bl	801fd60 <mbedtls_x509_crl_free>
  mbedtls_ssl_free(&tlsData->ssl);
 8002586:	f504 701a 	add.w	r0, r4, #616	; 0x268
 800258a:	f01c fbab 	bl	801ece4 <mbedtls_ssl_free>
  mbedtls_ssl_config_free(&tlsData->conf);
 800258e:	f504 7051 	add.w	r0, r4, #836	; 0x344
 8002592:	f01c fc75 	bl	801ee80 <mbedtls_ssl_config_free>
  mbedtls_ctr_drbg_free(&tlsData->ctr_drbg);
 8002596:	f504 7094 	add.w	r0, r4, #296	; 0x128
 800259a:	f00e f958 	bl	801084e <mbedtls_ctr_drbg_free>
  mbedtls_entropy_free(&tlsData->entropy);
 800259e:	f104 0020 	add.w	r0, r4, #32
  
  return;
}
 80025a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbedtls_entropy_free(&tlsData->entropy);
 80025a6:	f011 bd1b 	b.w	8013fe0 <mbedtls_entropy_free>
	...

080025ac <net_sock_open_mbedtls>:
{
 80025ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b0:	ed2d 8b02 	vpush	{d8}
  net_tls_data_t * tlsData = sock->tlsData;
 80025b4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 80025b6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
  mbedtls_ssl_config_init(&tlsData->conf);
 80025ba:	f504 7651 	add.w	r6, r4, #836	; 0x344
{
 80025be:	4605      	mov	r5, r0
 80025c0:	460f      	mov	r7, r1
  mbedtls_platform_set_calloc_free(heap_alloc, heap_free);  /* Common to all sockets. */
 80025c2:	48ac      	ldr	r0, [pc, #688]	; (8002874 <net_sock_open_mbedtls+0x2c8>)
 80025c4:	49ac      	ldr	r1, [pc, #688]	; (8002878 <net_sock_open_mbedtls+0x2cc>)
{
 80025c6:	ee08 3a10 	vmov	s16, r3
 80025ca:	4690      	mov	r8, r2
  mbedtls_platform_set_calloc_free(heap_alloc, heap_free);  /* Common to all sockets. */
 80025cc:	f014 f888 	bl	80166e0 <mbedtls_platform_set_calloc_free>
  mbedtls_ssl_config_init(&tlsData->conf);
 80025d0:	4630      	mov	r0, r6
 80025d2:	f01c fbf7 	bl	801edc4 <mbedtls_ssl_config_init>
  mbedtls_ssl_conf_dbg(&tlsData->conf, my_debug, stdout);
 80025d6:	4ba9      	ldr	r3, [pc, #676]	; (800287c <net_sock_open_mbedtls+0x2d0>)
 80025d8:	49a9      	ldr	r1, [pc, #676]	; (8002880 <net_sock_open_mbedtls+0x2d4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4630      	mov	r0, r6
 80025de:	689a      	ldr	r2, [r3, #8]
  mbedtls_ctr_drbg_init(&tlsData->ctr_drbg);
 80025e0:	f504 7a94 	add.w	sl, r4, #296	; 0x128
  mbedtls_ssl_conf_dbg(&tlsData->conf, my_debug, stdout);
 80025e4:	f01b fe74 	bl	801e2d0 <mbedtls_ssl_conf_dbg>
  mbedtls_x509_crt_init(&tlsData->cacert);
 80025e8:	f504 796e 	add.w	r9, r4, #952	; 0x3b8
  mbedtls_ctr_drbg_init(&tlsData->ctr_drbg);
 80025ec:	4650      	mov	r0, sl
 80025ee:	f00e f929 	bl	8010844 <mbedtls_ctr_drbg_init>
  mbedtls_x509_crt_init(&tlsData->cacert);
 80025f2:	4648      	mov	r0, r9
 80025f4:	f01e fe44 	bl	8021280 <mbedtls_x509_crt_init>
  if (tlsData->tls_dev_cert != NULL)
 80025f8:	68a3      	ldr	r3, [r4, #8]
 80025fa:	b11b      	cbz	r3, 8002604 <net_sock_open_mbedtls+0x58>
    mbedtls_x509_crt_init(&tlsData->clicert);
 80025fc:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8002600:	f01e fe3e 	bl	8021280 <mbedtls_x509_crt_init>
  if (tlsData->tls_dev_key != NULL)
 8002604:	68e3      	ldr	r3, [r4, #12]
 8002606:	b11b      	cbz	r3, 8002610 <net_sock_open_mbedtls+0x64>
    mbedtls_pk_init(&tlsData->pkey);
 8002608:	f204 7014 	addw	r0, r4, #1812	; 0x714
 800260c:	f013 fa78 	bl	8015b00 <mbedtls_pk_init>
  mbedtls_debug_set_threshold(1);
 8002610:	2001      	movs	r0, #1
  mbedtls_entropy_init(&tlsData->entropy);
 8002612:	f104 0b20 	add.w	fp, r4, #32
  mbedtls_debug_set_threshold(1);
 8002616:	f00e fa9f 	bl	8010b58 <mbedtls_debug_set_threshold>
  mbedtls_entropy_init(&tlsData->entropy);
 800261a:	4658      	mov	r0, fp
 800261c:	f011 fcbc 	bl	8013f98 <mbedtls_entropy_init>
  if( (ret = mbedtls_entropy_add_source(&tlsData->entropy, mbedtls_hardware_poll, (void*)&hrng, 1, MBEDTLS_ENTROPY_SOURCE_STRONG)) != 0 )
 8002620:	2301      	movs	r3, #1
 8002622:	4a98      	ldr	r2, [pc, #608]	; (8002884 <net_sock_open_mbedtls+0x2d8>)
 8002624:	4998      	ldr	r1, [pc, #608]	; (8002888 <net_sock_open_mbedtls+0x2dc>)
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	4658      	mov	r0, fp
 800262a:	f011 fce2 	bl	8013ff2 <mbedtls_entropy_add_source>
 800262e:	b1b0      	cbz	r0, 800265e <net_sock_open_mbedtls+0xb2>
    msg_error( " failed\n  ! mbedtls_entropy_add_source returned -0x%x\n", -ret );
 8002630:	4996      	ldr	r1, [pc, #600]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 8002632:	9003      	str	r0, [sp, #12]
 8002634:	2295      	movs	r2, #149	; 0x95
 8002636:	4896      	ldr	r0, [pc, #600]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 8002638:	f021 f84e 	bl	80236d8 <iprintf>
 800263c:	9b03      	ldr	r3, [sp, #12]
 800263e:	4895      	ldr	r0, [pc, #596]	; (8002894 <net_sock_open_mbedtls+0x2e8>)
 8002640:	4259      	negs	r1, r3
    msg_error(" failed\n  ! mbedtls_ctr_drbg_seed returned -0x%x\n", -ret);
 8002642:	f021 f849 	bl	80236d8 <iprintf>
    internal_close(sock);
 8002646:	4628      	mov	r0, r5
 8002648:	f7ff ff88 	bl	800255c <internal_close>
      return (ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) ? NET_AUTH : NET_ERR;
 800264c:	f04f 36ff 	mov.w	r6, #4294967295
}
 8002650:	4630      	mov	r0, r6
 8002652:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8002656:	ecbd 8b02 	vpop	{d8}
 800265a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if( (ret = mbedtls_ctr_drbg_seed(&tlsData->ctr_drbg, mbedtls_entropy_func, &tlsData->entropy, pers, strlen((char const *)pers))) != 0 )
 800265e:	2307      	movs	r3, #7
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	465a      	mov	r2, fp
 8002664:	4b8c      	ldr	r3, [pc, #560]	; (8002898 <net_sock_open_mbedtls+0x2ec>)
 8002666:	498d      	ldr	r1, [pc, #564]	; (800289c <net_sock_open_mbedtls+0x2f0>)
 8002668:	4650      	mov	r0, sl
 800266a:	f00e f956 	bl	801091a <mbedtls_ctr_drbg_seed>
 800266e:	4683      	mov	fp, r0
 8002670:	b140      	cbz	r0, 8002684 <net_sock_open_mbedtls+0xd8>
    msg_error(" failed\n  ! mbedtls_ctr_drbg_seed returned -0x%x\n", -ret);
 8002672:	4986      	ldr	r1, [pc, #536]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 8002674:	4886      	ldr	r0, [pc, #536]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 8002676:	229b      	movs	r2, #155	; 0x9b
 8002678:	f021 f82e 	bl	80236d8 <iprintf>
 800267c:	4888      	ldr	r0, [pc, #544]	; (80028a0 <net_sock_open_mbedtls+0x2f4>)
 800267e:	f1cb 0100 	rsb	r1, fp, #0
 8002682:	e7de      	b.n	8002642 <net_sock_open_mbedtls+0x96>
  if (tlsData->tls_ca_certs != NULL)
 8002684:	6821      	ldr	r1, [r4, #0]
 8002686:	b199      	cbz	r1, 80026b0 <net_sock_open_mbedtls+0x104>
    if( (ret = mbedtls_x509_crt_parse(&tlsData->cacert, (unsigned char const *)tlsData->tls_ca_certs, strlen((char const *) tlsData->tls_ca_certs) + 1)) != 0 )
 8002688:	4608      	mov	r0, r1
 800268a:	9103      	str	r1, [sp, #12]
 800268c:	f7fd fdaa 	bl	80001e4 <strlen>
 8002690:	9903      	ldr	r1, [sp, #12]
 8002692:	1c42      	adds	r2, r0, #1
 8002694:	4648      	mov	r0, r9
 8002696:	f01f f9a5 	bl	80219e4 <mbedtls_x509_crt_parse>
 800269a:	4683      	mov	fp, r0
 800269c:	b140      	cbz	r0, 80026b0 <net_sock_open_mbedtls+0x104>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing root cert\n", -ret);
 800269e:	497b      	ldr	r1, [pc, #492]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 80026a0:	487b      	ldr	r0, [pc, #492]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 80026a2:	22a5      	movs	r2, #165	; 0xa5
 80026a4:	f021 f818 	bl	80236d8 <iprintf>
 80026a8:	487e      	ldr	r0, [pc, #504]	; (80028a4 <net_sock_open_mbedtls+0x2f8>)
 80026aa:	f1cb 0100 	rsb	r1, fp, #0
 80026ae:	e7c8      	b.n	8002642 <net_sock_open_mbedtls+0x96>
  if (tlsData->tls_ca_crl != NULL)
 80026b0:	6861      	ldr	r1, [r4, #4]
 80026b2:	b1a1      	cbz	r1, 80026de <net_sock_open_mbedtls+0x132>
    if( (ret = mbedtls_x509_crl_parse(&tlsData->cacrl, (unsigned char const *)tlsData->tls_ca_crl, strlen((char const *) tlsData->tls_ca_crl) + 1)) != 0 )
 80026b4:	4608      	mov	r0, r1
 80026b6:	9103      	str	r1, [sp, #12]
 80026b8:	f7fd fd94 	bl	80001e4 <strlen>
 80026bc:	9903      	ldr	r1, [sp, #12]
 80026be:	1c42      	adds	r2, r0, #1
 80026c0:	f204 40ec 	addw	r0, r4, #1260	; 0x4ec
 80026c4:	f01d fd6c 	bl	80201a0 <mbedtls_x509_crl_parse>
 80026c8:	4683      	mov	fp, r0
 80026ca:	b140      	cbz	r0, 80026de <net_sock_open_mbedtls+0x132>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing the cert revocation list\n", -ret);
 80026cc:	496f      	ldr	r1, [pc, #444]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 80026ce:	4870      	ldr	r0, [pc, #448]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 80026d0:	22af      	movs	r2, #175	; 0xaf
 80026d2:	f021 f801 	bl	80236d8 <iprintf>
 80026d6:	4874      	ldr	r0, [pc, #464]	; (80028a8 <net_sock_open_mbedtls+0x2fc>)
 80026d8:	f1cb 0100 	rsb	r1, fp, #0
 80026dc:	e7b1      	b.n	8002642 <net_sock_open_mbedtls+0x96>
  if( (tlsData->tls_dev_cert != NULL) && (tlsData->tls_dev_key != NULL) )
 80026de:	68a1      	ldr	r1, [r4, #8]
 80026e0:	b379      	cbz	r1, 8002742 <net_sock_open_mbedtls+0x196>
 80026e2:	68e3      	ldr	r3, [r4, #12]
 80026e4:	b36b      	cbz	r3, 8002742 <net_sock_open_mbedtls+0x196>
    if( (ret = mbedtls_x509_crt_parse(&tlsData->clicert, (unsigned char const *)tlsData->tls_dev_cert, strlen((char const *)tlsData->tls_dev_cert) + 1)) != 0 )
 80026e6:	4608      	mov	r0, r1
 80026e8:	9103      	str	r1, [sp, #12]
 80026ea:	f7fd fd7b 	bl	80001e4 <strlen>
 80026ee:	9903      	ldr	r1, [sp, #12]
 80026f0:	1c42      	adds	r2, r0, #1
 80026f2:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 80026f6:	f01f f975 	bl	80219e4 <mbedtls_x509_crt_parse>
 80026fa:	4683      	mov	fp, r0
 80026fc:	b140      	cbz	r0, 8002710 <net_sock_open_mbedtls+0x164>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing device cert\n", -ret);
 80026fe:	4963      	ldr	r1, [pc, #396]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 8002700:	4863      	ldr	r0, [pc, #396]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 8002702:	22ba      	movs	r2, #186	; 0xba
 8002704:	f020 ffe8 	bl	80236d8 <iprintf>
 8002708:	4868      	ldr	r0, [pc, #416]	; (80028ac <net_sock_open_mbedtls+0x300>)
 800270a:	f1cb 0100 	rsb	r1, fp, #0
 800270e:	e798      	b.n	8002642 <net_sock_open_mbedtls+0x96>
    if( (ret = mbedtls_pk_parse_key(&tlsData->pkey, (unsigned char const *)tlsData->tls_dev_key, strlen((char const *)tlsData->tls_dev_key) + 1,
 8002710:	68e1      	ldr	r1, [r4, #12]
 8002712:	9103      	str	r1, [sp, #12]
 8002714:	4608      	mov	r0, r1
 8002716:	f7fd fd65 	bl	80001e4 <strlen>
 800271a:	6963      	ldr	r3, [r4, #20]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	1c42      	adds	r2, r0, #1
 8002720:	6923      	ldr	r3, [r4, #16]
 8002722:	9903      	ldr	r1, [sp, #12]
 8002724:	f204 7014 	addw	r0, r4, #1812	; 0x714
 8002728:	f013 fef8 	bl	801651c <mbedtls_pk_parse_key>
 800272c:	4683      	mov	fp, r0
 800272e:	b140      	cbz	r0, 8002742 <net_sock_open_mbedtls+0x196>
      msg_error(" failed\n  !  mbedtls_pk_parse_key returned -0x%x while parsing private key\n\n", -ret);
 8002730:	4956      	ldr	r1, [pc, #344]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 8002732:	4857      	ldr	r0, [pc, #348]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 8002734:	22cf      	movs	r2, #207	; 0xcf
 8002736:	f020 ffcf 	bl	80236d8 <iprintf>
 800273a:	485d      	ldr	r0, [pc, #372]	; (80028b0 <net_sock_open_mbedtls+0x304>)
 800273c:	f1cb 0100 	rsb	r1, fp, #0
 8002740:	e77f      	b.n	8002642 <net_sock_open_mbedtls+0x96>
  if( (ret = net_sock_create(hnet, &sock->underlying_sock_ctxt, NET_PROTO_TCP)) != NET_OK )
 8002742:	4b5c      	ldr	r3, [pc, #368]	; (80028b4 <net_sock_open_mbedtls+0x308>)
 8002744:	2201      	movs	r2, #1
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800274c:	f7ff fb5a 	bl	8001e04 <net_sock_create>
 8002750:	4603      	mov	r3, r0
 8002752:	b148      	cbz	r0, 8002768 <net_sock_open_mbedtls+0x1bc>
    msg_error(" failed to create a TCP socket  ! net_sock_create returned %d\n", ret);
 8002754:	494d      	ldr	r1, [pc, #308]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 8002756:	9003      	str	r0, [sp, #12]
 8002758:	22da      	movs	r2, #218	; 0xda
 800275a:	484d      	ldr	r0, [pc, #308]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 800275c:	f020 ffbc 	bl	80236d8 <iprintf>
 8002760:	9b03      	ldr	r3, [sp, #12]
 8002762:	4855      	ldr	r0, [pc, #340]	; (80028b8 <net_sock_open_mbedtls+0x30c>)
 8002764:	4619      	mov	r1, r3
 8002766:	e76c      	b.n	8002642 <net_sock_open_mbedtls+0x96>
  if( (ret = net_sock_setopt(sock->underlying_sock_ctxt, (sock->blocking == true) ? "sock_blocking" : "sock_noblocking", NULL, 0)) != NET_OK )
 8002768:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800276c:	f8df b168 	ldr.w	fp, [pc, #360]	; 80028d8 <net_sock_open_mbedtls+0x32c>
 8002770:	4602      	mov	r2, r0
 8002772:	4852      	ldr	r0, [pc, #328]	; (80028bc <net_sock_open_mbedtls+0x310>)
 8002774:	2900      	cmp	r1, #0
 8002776:	bf18      	it	ne
 8002778:	4658      	movne	r0, fp
 800277a:	4601      	mov	r1, r0
 800277c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800277e:	f7ff fb6d 	bl	8001e5c <net_sock_setopt>
 8002782:	4603      	mov	r3, r0
 8002784:	b1e8      	cbz	r0, 80027c2 <net_sock_open_mbedtls+0x216>
    msg_error(" failed setting the %s option.\n", (sock->blocking == true) ? "sock_blocking" : "sock_noblocking");
 8002786:	4941      	ldr	r1, [pc, #260]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 8002788:	4841      	ldr	r0, [pc, #260]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 800278a:	22e1      	movs	r2, #225	; 0xe1
 800278c:	f020 ffa4 	bl	80236d8 <iprintf>
 8002790:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8002794:	4b49      	ldr	r3, [pc, #292]	; (80028bc <net_sock_open_mbedtls+0x310>)
 8002796:	484a      	ldr	r0, [pc, #296]	; (80028c0 <net_sock_open_mbedtls+0x314>)
 8002798:	2900      	cmp	r1, #0
 800279a:	bf18      	it	ne
 800279c:	465b      	movne	r3, fp
 800279e:	4619      	mov	r1, r3
 80027a0:	f020 ff9a 	bl	80236d8 <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 80027a4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80027a6:	f7ff fc0f 	bl	8001fc8 <net_sock_destroy>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	f43f af4b 	beq.w	8002646 <net_sock_open_mbedtls+0x9a>
      msg_error("Failed destroying the socket.\n");
 80027b0:	22e4      	movs	r2, #228	; 0xe4
 80027b2:	4936      	ldr	r1, [pc, #216]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 80027b4:	4836      	ldr	r0, [pc, #216]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 80027b6:	f020 ff8f 	bl	80236d8 <iprintf>
 80027ba:	4842      	ldr	r0, [pc, #264]	; (80028c4 <net_sock_open_mbedtls+0x318>)
 80027bc:	f021 f828 	bl	8023810 <puts>
    internal_close(sock);
 80027c0:	e741      	b.n	8002646 <net_sock_open_mbedtls+0x9a>
  if( (ret = mbedtls_ssl_config_defaults(&tlsData->conf, MBEDTLS_SSL_IS_CLIENT, MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0)
 80027c2:	4602      	mov	r2, r0
 80027c4:	4601      	mov	r1, r0
 80027c6:	4630      	mov	r0, r6
 80027c8:	f01c fb00 	bl	801edcc <mbedtls_ssl_config_defaults>
 80027cc:	4683      	mov	fp, r0
 80027ce:	b140      	cbz	r0, 80027e2 <net_sock_open_mbedtls+0x236>
    msg_error(" failed\n  ! mbedtls_ssl_config_defaults returned -0x%x\n\n", -ret);
 80027d0:	492e      	ldr	r1, [pc, #184]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 80027d2:	482f      	ldr	r0, [pc, #188]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 80027d4:	22ed      	movs	r2, #237	; 0xed
 80027d6:	f020 ff7f 	bl	80236d8 <iprintf>
 80027da:	483b      	ldr	r0, [pc, #236]	; (80028c8 <net_sock_open_mbedtls+0x31c>)
 80027dc:	f1cb 0100 	rsb	r1, fp, #0
 80027e0:	e72f      	b.n	8002642 <net_sock_open_mbedtls+0x96>
  if(tlsData->tls_srv_verification == true)
 80027e2:	7e23      	ldrb	r3, [r4, #24]
 80027e4:	b33b      	cbz	r3, 8002836 <net_sock_open_mbedtls+0x28a>
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_REQUIRED);
 80027e6:	2102      	movs	r1, #2
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 80027e8:	4630      	mov	r0, r6
 80027ea:	f01b fd67 	bl	801e2bc <mbedtls_ssl_conf_authmode>
  mbedtls_ssl_conf_rng(&tlsData->conf, mbedtls_ctr_drbg_random, &tlsData->ctr_drbg);
 80027ee:	4652      	mov	r2, sl
 80027f0:	4936      	ldr	r1, [pc, #216]	; (80028cc <net_sock_open_mbedtls+0x320>)
 80027f2:	4630      	mov	r0, r6
 80027f4:	f01b fd69 	bl	801e2ca <mbedtls_ssl_conf_rng>
  mbedtls_ssl_conf_ca_chain(&tlsData->conf, &tlsData->cacert, (tlsData->tls_ca_crl != NULL) ? &tlsData->cacrl : NULL);
 80027f8:	6862      	ldr	r2, [r4, #4]
 80027fa:	b10a      	cbz	r2, 8002800 <net_sock_open_mbedtls+0x254>
 80027fc:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8002800:	4649      	mov	r1, r9
 8002802:	4630      	mov	r0, r6
 8002804:	f01b fd72 	bl	801e2ec <mbedtls_ssl_conf_ca_chain>
  if( (tlsData->tls_dev_cert != NULL) && (tlsData->tls_dev_key != NULL) )
 8002808:	68a3      	ldr	r3, [r4, #8]
 800280a:	b1b3      	cbz	r3, 800283a <net_sock_open_mbedtls+0x28e>
 800280c:	68e3      	ldr	r3, [r4, #12]
 800280e:	b1a3      	cbz	r3, 800283a <net_sock_open_mbedtls+0x28e>
    if( (ret = mbedtls_ssl_conf_own_cert(&tlsData->conf, &tlsData->clicert, &tlsData->pkey)) != 0)
 8002810:	f204 7214 	addw	r2, r4, #1812	; 0x714
 8002814:	f504 61bc 	add.w	r1, r4, #1504	; 0x5e0
 8002818:	4630      	mov	r0, r6
 800281a:	f01b fd64 	bl	801e2e6 <mbedtls_ssl_conf_own_cert>
 800281e:	4681      	mov	r9, r0
 8002820:	b158      	cbz	r0, 800283a <net_sock_open_mbedtls+0x28e>
      msg_error(" failed\n  ! mbedtls_ssl_conf_own_cert returned -0x%x\n\n", -ret);
 8002822:	491a      	ldr	r1, [pc, #104]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 8002824:	481a      	ldr	r0, [pc, #104]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 8002826:	f44f 7284 	mov.w	r2, #264	; 0x108
 800282a:	f020 ff55 	bl	80236d8 <iprintf>
 800282e:	4828      	ldr	r0, [pc, #160]	; (80028d0 <net_sock_open_mbedtls+0x324>)
 8002830:	f1c9 0100 	rsb	r1, r9, #0
 8002834:	e705      	b.n	8002642 <net_sock_open_mbedtls+0x96>
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 8002836:	2101      	movs	r1, #1
 8002838:	e7d6      	b.n	80027e8 <net_sock_open_mbedtls+0x23c>
  if( (ret = mbedtls_ssl_setup(&tlsData->ssl, &tlsData->conf)) != 0 )
 800283a:	f504 791a 	add.w	r9, r4, #616	; 0x268
 800283e:	4631      	mov	r1, r6
 8002840:	4648      	mov	r0, r9
 8002842:	f01b ffa9 	bl	801e798 <mbedtls_ssl_setup>
 8002846:	4682      	mov	sl, r0
 8002848:	2800      	cmp	r0, #0
 800284a:	d047      	beq.n	80028dc <net_sock_open_mbedtls+0x330>
    msg_error(" failed\n  ! mbedtls_ssl_setup returned -0x%x\n\n", -ret);
 800284c:	490f      	ldr	r1, [pc, #60]	; (800288c <net_sock_open_mbedtls+0x2e0>)
 800284e:	4810      	ldr	r0, [pc, #64]	; (8002890 <net_sock_open_mbedtls+0x2e4>)
 8002850:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002854:	f020 ff40 	bl	80236d8 <iprintf>
 8002858:	481e      	ldr	r0, [pc, #120]	; (80028d4 <net_sock_open_mbedtls+0x328>)
 800285a:	f1ca 0100 	rsb	r1, sl, #0
 800285e:	f020 ff3b 	bl	80236d8 <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 8002862:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002864:	f7ff fbb0 	bl	8001fc8 <net_sock_destroy>
 8002868:	2800      	cmp	r0, #0
 800286a:	f43f aeec 	beq.w	8002646 <net_sock_open_mbedtls+0x9a>
      msg_error("Failed destroying the socket.\n");
 800286e:	f44f 728a 	mov.w	r2, #276	; 0x114
 8002872:	e79e      	b.n	80027b2 <net_sock_open_mbedtls+0x206>
 8002874:	080221ed 	.word	0x080221ed
 8002878:	08022455 	.word	0x08022455
 800287c:	200005e4 	.word	0x200005e4
 8002880:	08002551 	.word	0x08002551
 8002884:	200011d8 	.word	0x200011d8
 8002888:	08001305 	.word	0x08001305
 800288c:	080283e2 	.word	0x080283e2
 8002890:	0802da5d 	.word	0x0802da5d
 8002894:	0802e48f 	.word	0x0802e48f
 8002898:	0802e4c6 	.word	0x0802e4c6
 800289c:	08014021 	.word	0x08014021
 80028a0:	0802e4ce 	.word	0x0802e4ce
 80028a4:	0802e500 	.word	0x0802e500
 80028a8:	0802e54c 	.word	0x0802e54c
 80028ac:	0802e5a7 	.word	0x0802e5a7
 80028b0:	0802e5f5 	.word	0x0802e5f5
 80028b4:	200011e4 	.word	0x200011e4
 80028b8:	0802e642 	.word	0x0802e642
 80028bc:	0802e301 	.word	0x0802e301
 80028c0:	0802e681 	.word	0x0802e681
 80028c4:	0802e6a1 	.word	0x0802e6a1
 80028c8:	0802e6bf 	.word	0x0802e6bf
 80028cc:	080109ed 	.word	0x080109ed
 80028d0:	0802e6f8 	.word	0x0802e6f8
 80028d4:	0802e72f 	.word	0x0802e72f
 80028d8:	0802e2f3 	.word	0x0802e2f3
  if(tlsData->tls_srv_name != NULL)
 80028dc:	69e1      	ldr	r1, [r4, #28]
 80028de:	b169      	cbz	r1, 80028fc <net_sock_open_mbedtls+0x350>
    if( (ret = mbedtls_ssl_set_hostname(&tlsData->ssl, tlsData->tls_srv_name)) != 0 )
 80028e0:	4648      	mov	r0, r9
 80028e2:	f01b fd07 	bl	801e2f4 <mbedtls_ssl_set_hostname>
 80028e6:	4682      	mov	sl, r0
 80028e8:	b140      	cbz	r0, 80028fc <net_sock_open_mbedtls+0x350>
      msg_error(" failed\n  ! mbedtls_ssl_set_hostname returned %d\n\n", ret);
 80028ea:	4948      	ldr	r1, [pc, #288]	; (8002a0c <net_sock_open_mbedtls+0x460>)
 80028ec:	4848      	ldr	r0, [pc, #288]	; (8002a10 <net_sock_open_mbedtls+0x464>)
 80028ee:	f240 121d 	movw	r2, #285	; 0x11d
 80028f2:	f020 fef1 	bl	80236d8 <iprintf>
 80028f6:	4847      	ldr	r0, [pc, #284]	; (8002a14 <net_sock_open_mbedtls+0x468>)
 80028f8:	4651      	mov	r1, sl
 80028fa:	e6a2      	b.n	8002642 <net_sock_open_mbedtls+0x96>
  if (sock->blocking == true)
 80028fc:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8002900:	b353      	cbz	r3, 8002958 <net_sock_open_mbedtls+0x3ac>
    mbedtls_ssl_conf_read_timeout(&tlsData->conf, sock->read_timeout);
 8002902:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 8002904:	4630      	mov	r0, r6
 8002906:	f01b fcec 	bl	801e2e2 <mbedtls_ssl_conf_read_timeout>
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, NULL, mbedtls_net_recv_blocking);
 800290a:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <net_sock_open_mbedtls+0x46c>)
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2300      	movs	r3, #0
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, mbedtls_net_recv, NULL);
 8002910:	4a42      	ldr	r2, [pc, #264]	; (8002a1c <net_sock_open_mbedtls+0x470>)
 8002912:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002914:	4648      	mov	r0, r9
 8002916:	f01b fcde 	bl	801e2d6 <mbedtls_ssl_set_bio>
  if( (ret = net_sock_open(sock->underlying_sock_ctxt, hostname, dstport, localport)) != NET_OK )
 800291a:	ee18 3a10 	vmov	r3, s16
 800291e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002920:	4642      	mov	r2, r8
 8002922:	4639      	mov	r1, r7
 8002924:	f7ff fa94 	bl	8001e50 <net_sock_open>
 8002928:	4606      	mov	r6, r0
 800292a:	2800      	cmp	r0, #0
 800292c:	d063      	beq.n	80029f6 <net_sock_open_mbedtls+0x44a>
    msg_error(" failed to connect to %s:%d  ! net_sock_open returned %d\n", hostname, dstport, ret);
 800292e:	4937      	ldr	r1, [pc, #220]	; (8002a0c <net_sock_open_mbedtls+0x460>)
 8002930:	4837      	ldr	r0, [pc, #220]	; (8002a10 <net_sock_open_mbedtls+0x464>)
 8002932:	f240 1231 	movw	r2, #305	; 0x131
 8002936:	f020 fecf 	bl	80236d8 <iprintf>
 800293a:	4839      	ldr	r0, [pc, #228]	; (8002a20 <net_sock_open_mbedtls+0x474>)
 800293c:	4633      	mov	r3, r6
 800293e:	4642      	mov	r2, r8
 8002940:	4639      	mov	r1, r7
 8002942:	f020 fec9 	bl	80236d8 <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 8002946:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002948:	f7ff fb3e 	bl	8001fc8 <net_sock_destroy>
 800294c:	2800      	cmp	r0, #0
 800294e:	f43f ae7a 	beq.w	8002646 <net_sock_open_mbedtls+0x9a>
      msg_error("Failed destroying the socket.\n");
 8002952:	f44f 729a 	mov.w	r2, #308	; 0x134
 8002956:	e72c      	b.n	80027b2 <net_sock_open_mbedtls+0x206>
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, mbedtls_net_recv, NULL);
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <net_sock_open_mbedtls+0x478>)
 800295c:	e7d8      	b.n	8002910 <net_sock_open_mbedtls+0x364>
    if( (ret != MBEDTLS_ERR_SSL_WANT_READ) && (ret != MBEDTLS_ERR_SSL_WANT_WRITE) )
 800295e:	f026 0380 	bic.w	r3, r6, #128	; 0x80
 8002962:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8002966:	d046      	beq.n	80029f6 <net_sock_open_mbedtls+0x44a>
      if( (tlsData->flags = mbedtls_ssl_get_verify_result(&tlsData->ssl)) != 0 )
 8002968:	4648      	mov	r0, r9
 800296a:	f01b fce9 	bl	801e340 <mbedtls_ssl_get_verify_result>
 800296e:	4603      	mov	r3, r0
 8002970:	f8c4 03b4 	str.w	r0, [r4, #948]	; 0x3b4
 8002974:	b188      	cbz	r0, 800299a <net_sock_open_mbedtls+0x3ee>
        mbedtls_x509_crt_verify_info(vrfy_buf, sizeof(vrfy_buf), "  ! ", tlsData->flags);
 8002976:	4a2c      	ldr	r2, [pc, #176]	; (8002a28 <net_sock_open_mbedtls+0x47c>)
 8002978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800297c:	a804      	add	r0, sp, #16
 800297e:	f01e f847 	bl	8020a10 <mbedtls_x509_crt_verify_info>
        if (tlsData->tls_srv_verification == true)
 8002982:	7e23      	ldrb	r3, [r4, #24]
 8002984:	b12b      	cbz	r3, 8002992 <net_sock_open_mbedtls+0x3e6>
          msg_error("Server verification:\n%s\n", vrfy_buf);
 8002986:	4921      	ldr	r1, [pc, #132]	; (8002a0c <net_sock_open_mbedtls+0x460>)
 8002988:	4821      	ldr	r0, [pc, #132]	; (8002a10 <net_sock_open_mbedtls+0x464>)
 800298a:	f240 1247 	movw	r2, #327	; 0x147
 800298e:	f020 fea3 	bl	80236d8 <iprintf>
          msg_info("Server verification:\n%s\n", vrfy_buf);
 8002992:	4826      	ldr	r0, [pc, #152]	; (8002a2c <net_sock_open_mbedtls+0x480>)
 8002994:	a904      	add	r1, sp, #16
 8002996:	f020 fe9f 	bl	80236d8 <iprintf>
      msg_error(" failed\n  ! mbedtls_ssl_handshake returned -0x%x\n", -ret);
 800299a:	491c      	ldr	r1, [pc, #112]	; (8002a0c <net_sock_open_mbedtls+0x460>)
 800299c:	481c      	ldr	r0, [pc, #112]	; (8002a10 <net_sock_open_mbedtls+0x464>)
 800299e:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 80029a2:	f020 fe99 	bl	80236d8 <iprintf>
 80029a6:	4822      	ldr	r0, [pc, #136]	; (8002a30 <net_sock_open_mbedtls+0x484>)
 80029a8:	4271      	negs	r1, r6
 80029aa:	f020 fe95 	bl	80236d8 <iprintf>
      if (net_sock_close(sock->underlying_sock_ctxt) != NET_OK )
 80029ae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80029b0:	f7ff fb04 	bl	8001fbc <net_sock_close>
 80029b4:	b140      	cbz	r0, 80029c8 <net_sock_open_mbedtls+0x41c>
        msg_error("Failed closing the socket.\n");
 80029b6:	4915      	ldr	r1, [pc, #84]	; (8002a0c <net_sock_open_mbedtls+0x460>)
 80029b8:	4815      	ldr	r0, [pc, #84]	; (8002a10 <net_sock_open_mbedtls+0x464>)
 80029ba:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80029be:	f020 fe8b 	bl	80236d8 <iprintf>
 80029c2:	481c      	ldr	r0, [pc, #112]	; (8002a34 <net_sock_open_mbedtls+0x488>)
 80029c4:	f020 ff24 	bl	8023810 <puts>
      if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 80029c8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80029ca:	f7ff fafd 	bl	8001fc8 <net_sock_destroy>
 80029ce:	b140      	cbz	r0, 80029e2 <net_sock_open_mbedtls+0x436>
        msg_error("Failed destroying the socket.\n");
 80029d0:	490e      	ldr	r1, [pc, #56]	; (8002a0c <net_sock_open_mbedtls+0x460>)
 80029d2:	480f      	ldr	r0, [pc, #60]	; (8002a10 <net_sock_open_mbedtls+0x464>)
 80029d4:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80029d8:	f020 fe7e 	bl	80236d8 <iprintf>
 80029dc:	4816      	ldr	r0, [pc, #88]	; (8002a38 <net_sock_open_mbedtls+0x48c>)
 80029de:	f020 ff17 	bl	8023810 <puts>
      internal_close(sock);
 80029e2:	4628      	mov	r0, r5
 80029e4:	f7ff fdba 	bl	800255c <internal_close>
      return (ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) ? NET_AUTH : NET_ERR;
 80029e8:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
 80029ec:	f47f ae2e 	bne.w	800264c <net_sock_open_mbedtls+0xa0>
 80029f0:	f06f 0605 	mvn.w	r6, #5
 80029f4:	e62c      	b.n	8002650 <net_sock_open_mbedtls+0xa4>
  while( (ret = mbedtls_ssl_handshake(&tlsData->ssl)) != 0 )
 80029f6:	4648      	mov	r0, r9
 80029f8:	f01b fcfa 	bl	801e3f0 <mbedtls_ssl_handshake>
 80029fc:	4606      	mov	r6, r0
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d1ad      	bne.n	800295e <net_sock_open_mbedtls+0x3b2>
  if( (ret = mbedtls_ssl_get_record_expansion(&tlsData->ssl)) >= 0)
 8002a02:	4648      	mov	r0, r9
 8002a04:	f01b fca6 	bl	801e354 <mbedtls_ssl_get_record_expansion>
  return rc;
 8002a08:	e622      	b.n	8002650 <net_sock_open_mbedtls+0xa4>
 8002a0a:	bf00      	nop
 8002a0c:	080283e2 	.word	0x080283e2
 8002a10:	0802da5d 	.word	0x0802da5d
 8002a14:	0802e75e 	.word	0x0802e75e
 8002a18:	08001b75 	.word	0x08001b75
 8002a1c:	08001c15 	.word	0x08001c15
 8002a20:	0802e791 	.word	0x0802e791
 8002a24:	08001b35 	.word	0x08001b35
 8002a28:	0802e7cb 	.word	0x0802e7cb
 8002a2c:	0802e7d0 	.word	0x0802e7d0
 8002a30:	0802e7e9 	.word	0x0802e7e9
 8002a34:	0802e81b 	.word	0x0802e81b
 8002a38:	0802e6a1 	.word	0x0802e6a1

08002a3c <net_sock_recv_mbedtls>:
{
 8002a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002a40:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
          msg_error(" failed\n  ! mbedtls_ssl_read returned -0x%x\n\n", -ret);
 8002a44:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8002af8 <net_sock_recv_mbedtls+0xbc>
 8002a48:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8002afc <net_sock_recv_mbedtls+0xc0>
{
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	460e      	mov	r6, r1
 8002a50:	4617      	mov	r7, r2
  uint32_t start_time = HAL_GetTick();
 8002a52:	f006 f8f5 	bl	8008c40 <HAL_GetTick>
 8002a56:	4605      	mov	r5, r0
    if (sock->blocking == true)
 8002a58:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002a5c:	b9ab      	cbnz	r3, 8002a8a <net_sock_recv_mbedtls+0x4e>
    ret = mbedtls_ssl_read(&tlsData->ssl, buf + read, len - read);
 8002a5e:	463a      	mov	r2, r7
 8002a60:	4631      	mov	r1, r6
 8002a62:	f508 701a 	add.w	r0, r8, #616	; 0x268
 8002a66:	f01c f803 	bl	801ea70 <mbedtls_ssl_read>
    if (ret > 0)
 8002a6a:	f1b0 0900 	subs.w	r9, r0, #0
 8002a6e:	dc3d      	bgt.n	8002aec <net_sock_recv_mbedtls+0xb0>
      switch (ret)
 8002a70:	f519 4fd0 	cmn.w	r9, #26624	; 0x6800
 8002a74:	d017      	beq.n	8002aa6 <net_sock_recv_mbedtls+0x6a>
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <net_sock_recv_mbedtls+0xb4>)
 8002a78:	4599      	cmp	r9, r3
 8002a7a:	da17      	bge.n	8002aac <net_sock_recv_mbedtls+0x70>
 8002a7c:	f029 0280 	bic.w	r2, r9, #128	; 0x80
 8002a80:	f512 4fd2 	cmn.w	r2, #26880	; 0x6900
 8002a84:	d115      	bne.n	8002ab2 <net_sock_recv_mbedtls+0x76>
 8002a86:	2000      	movs	r0, #0
 8002a88:	e020      	b.n	8002acc <net_sock_recv_mbedtls+0x90>
      mbedtls_ssl_conf_read_timeout(&tlsData->conf, sock->read_timeout);
 8002a8a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002a8c:	f508 7051 	add.w	r0, r8, #836	; 0x344
 8002a90:	f01b fc27 	bl	801e2e2 <mbedtls_ssl_conf_read_timeout>
      if (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0)
 8002a94:	f006 f8d4 	bl	8008c40 <HAL_GetTick>
 8002a98:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002a9a:	4601      	mov	r1, r0
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	f7ff fa99 	bl	8001fd4 <net_timeout_left_ms>
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	dcdb      	bgt.n	8002a5e <net_sock_recv_mbedtls+0x22>
        rc = NET_TIMEOUT;
 8002aa6:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : read;
 8002aaa:	e01d      	b.n	8002ae8 <net_sock_recv_mbedtls+0xac>
      switch (ret)
 8002aac:	f1b9 0f00 	cmp.w	r9, #0
 8002ab0:	d018      	beq.n	8002ae4 <net_sock_recv_mbedtls+0xa8>
          msg_error(" failed\n  ! mbedtls_ssl_read returned -0x%x\n\n", -ret);
 8002ab2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	4658      	mov	r0, fp
 8002aba:	f020 fe0d 	bl	80236d8 <iprintf>
 8002abe:	480d      	ldr	r0, [pc, #52]	; (8002af4 <net_sock_recv_mbedtls+0xb8>)
 8002ac0:	f1c9 0100 	rsb	r1, r9, #0
 8002ac4:	f020 fe08 	bl	80236d8 <iprintf>
          rc = NET_ERR;
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
  } while ( ((ret == MBEDTLS_ERR_SSL_WANT_READ) || (ret == MBEDTLS_ERR_SSL_WANT_WRITE)) && (sock->blocking == true) && (rc == 0) );
 8002acc:	f519 4fd2 	cmn.w	r9, #26880	; 0x6900
 8002ad0:	d002      	beq.n	8002ad8 <net_sock_recv_mbedtls+0x9c>
 8002ad2:	f519 4fd1 	cmn.w	r9, #26752	; 0x6880
 8002ad6:	d107      	bne.n	8002ae8 <net_sock_recv_mbedtls+0xac>
 8002ad8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002adc:	b123      	cbz	r3, 8002ae8 <net_sock_recv_mbedtls+0xac>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d0ba      	beq.n	8002a58 <net_sock_recv_mbedtls+0x1c>
 8002ae2:	e001      	b.n	8002ae8 <net_sock_recv_mbedtls+0xac>
          rc = NET_EOF;
 8002ae4:	f06f 0003 	mvn.w	r0, #3
}
 8002ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_ssl_read(&tlsData->ssl, buf + read, len - read);
 8002aec:	4648      	mov	r0, r9
 8002aee:	e7fb      	b.n	8002ae8 <net_sock_recv_mbedtls+0xac>
 8002af0:	ffff9801 	.word	0xffff9801
 8002af4:	0802e836 	.word	0x0802e836
 8002af8:	080283f8 	.word	0x080283f8
 8002afc:	0802da5d 	.word	0x0802da5d

08002b00 <net_sock_send_mbedtls>:
{
 8002b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002b04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b06:	9301      	str	r3, [sp, #4]
{
 8002b08:	4604      	mov	r4, r0
 8002b0a:	460e      	mov	r6, r1
 8002b0c:	4617      	mov	r7, r2
  uint32_t start_time = HAL_GetTick();
 8002b0e:	f006 f897 	bl	8008c40 <HAL_GetTick>
          msg_error(" failed\n  ! mbedtls_ssl_write returned -0x%x\n\n", -ret);
 8002b12:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002bac <net_sock_send_mbedtls+0xac>
 8002b16:	f8df a098 	ldr.w	sl, [pc, #152]	; 8002bb0 <net_sock_send_mbedtls+0xb0>
 8002b1a:	f8df b098 	ldr.w	fp, [pc, #152]	; 8002bb4 <net_sock_send_mbedtls+0xb4>
  uint32_t start_time = HAL_GetTick();
 8002b1e:	4605      	mov	r5, r0
    if (sock->blocking == true)
 8002b20:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002b24:	bb63      	cbnz	r3, 8002b80 <net_sock_send_mbedtls+0x80>
    ret = mbedtls_ssl_write(&tlsData->ssl, buf + sent, len - sent);
 8002b26:	9b01      	ldr	r3, [sp, #4]
 8002b28:	463a      	mov	r2, r7
 8002b2a:	4631      	mov	r1, r6
 8002b2c:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8002b30:	f01b ff20 	bl	801e974 <mbedtls_ssl_write>
    if (ret > 0)
 8002b34:	f1b0 0800 	subs.w	r8, r0, #0
 8002b38:	dc36      	bgt.n	8002ba8 <net_sock_send_mbedtls+0xa8>
      switch(ret)
 8002b3a:	f518 4fd1 	cmn.w	r8, #26752	; 0x6880
 8002b3e:	d02e      	beq.n	8002b9e <net_sock_send_mbedtls+0x9e>
 8002b40:	f1b8 0f00 	cmp.w	r8, #0
 8002b44:	d028      	beq.n	8002b98 <net_sock_send_mbedtls+0x98>
 8002b46:	f518 4fd2 	cmn.w	r8, #26880	; 0x6900
 8002b4a:	d028      	beq.n	8002b9e <net_sock_send_mbedtls+0x9e>
          msg_error(" failed\n  ! mbedtls_ssl_write returned -0x%x\n\n", -ret);
 8002b4c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8002b50:	4649      	mov	r1, r9
 8002b52:	4650      	mov	r0, sl
 8002b54:	f020 fdc0 	bl	80236d8 <iprintf>
 8002b58:	f1c8 0100 	rsb	r1, r8, #0
 8002b5c:	4658      	mov	r0, fp
 8002b5e:	f020 fdbb 	bl	80236d8 <iprintf>
          rc = NET_ERR;
 8002b62:	f04f 30ff 	mov.w	r0, #4294967295
  } while ( ((ret == MBEDTLS_ERR_SSL_WANT_READ) || (ret == MBEDTLS_ERR_SSL_WANT_WRITE)) && (sock->blocking == true) && (rc == 0));
 8002b66:	f028 0380 	bic.w	r3, r8, #128	; 0x80
 8002b6a:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8002b6e:	d118      	bne.n	8002ba2 <net_sock_send_mbedtls+0xa2>
 8002b70:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002b74:	b1ab      	cbz	r3, 8002ba2 <net_sock_send_mbedtls+0xa2>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d0d2      	beq.n	8002b20 <net_sock_send_mbedtls+0x20>
}
 8002b7a:	b003      	add	sp, #12
 8002b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0)
 8002b80:	f006 f85e 	bl	8008c40 <HAL_GetTick>
 8002b84:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002b86:	4601      	mov	r1, r0
 8002b88:	4628      	mov	r0, r5
 8002b8a:	f7ff fa23 	bl	8001fd4 <net_timeout_left_ms>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	dcc9      	bgt.n	8002b26 <net_sock_send_mbedtls+0x26>
        rc = NET_TIMEOUT;
 8002b92:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : sent;
 8002b96:	e7f0      	b.n	8002b7a <net_sock_send_mbedtls+0x7a>
          rc = NET_EOF;
 8002b98:	f06f 0003 	mvn.w	r0, #3
 8002b9c:	e7e3      	b.n	8002b66 <net_sock_send_mbedtls+0x66>
      switch(ret)
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e7e1      	b.n	8002b66 <net_sock_send_mbedtls+0x66>
  return (rc < 0) ? rc : sent;
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d1e9      	bne.n	8002b7a <net_sock_send_mbedtls+0x7a>
 8002ba6:	4680      	mov	r8, r0
 8002ba8:	4640      	mov	r0, r8
 8002baa:	e7e6      	b.n	8002b7a <net_sock_send_mbedtls+0x7a>
 8002bac:	0802840e 	.word	0x0802840e
 8002bb0:	0802da5d 	.word	0x0802da5d
 8002bb4:	0802e864 	.word	0x0802e864

08002bb8 <net_sock_close_mbedtls>:
{
 8002bb8:	b538      	push	{r3, r4, r5, lr}
 8002bba:	4604      	mov	r4, r0
  net_tls_data_t * tlsData = sock->tlsData;
 8002bbc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    ret = mbedtls_ssl_close_notify(&tlsData->ssl);
 8002bbe:	f500 751a 	add.w	r5, r0, #616	; 0x268
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f01b fc42 	bl	801e44c <mbedtls_ssl_close_notify>
  while ( (ret == MBEDTLS_ERR_SSL_WANT_WRITE) || (ret == MBEDTLS_ERR_SSL_WANT_READ) );
 8002bc8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002bcc:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 8002bd0:	d0f7      	beq.n	8002bc2 <net_sock_close_mbedtls+0xa>
  ret = net_sock_close(sock->underlying_sock_ctxt);
 8002bd2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002bd4:	f7ff f9f2 	bl	8001fbc <net_sock_close>
 8002bd8:	4605      	mov	r5, r0
  ret |= net_sock_destroy(sock->underlying_sock_ctxt);
 8002bda:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002bdc:	f7ff f9f4 	bl	8001fc8 <net_sock_destroy>
  if (ret != NET_OK)
 8002be0:	ea55 0300 	orrs.w	r3, r5, r0
 8002be4:	d011      	beq.n	8002c0a <net_sock_close_mbedtls+0x52>
    msg_error("Underlying net_sock_close() or net_sock_destroy() failed.\n");
 8002be6:	490b      	ldr	r1, [pc, #44]	; (8002c14 <net_sock_close_mbedtls+0x5c>)
 8002be8:	480b      	ldr	r0, [pc, #44]	; (8002c18 <net_sock_close_mbedtls+0x60>)
 8002bea:	f240 12f7 	movw	r2, #503	; 0x1f7
 8002bee:	f020 fd73 	bl	80236d8 <iprintf>
 8002bf2:	480a      	ldr	r0, [pc, #40]	; (8002c1c <net_sock_close_mbedtls+0x64>)
 8002bf4:	f020 fe0c 	bl	8023810 <puts>
    msg_error("Freeing the mbedtls context anyway.\n");
 8002bf8:	4906      	ldr	r1, [pc, #24]	; (8002c14 <net_sock_close_mbedtls+0x5c>)
 8002bfa:	4807      	ldr	r0, [pc, #28]	; (8002c18 <net_sock_close_mbedtls+0x60>)
 8002bfc:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002c00:	f020 fd6a 	bl	80236d8 <iprintf>
 8002c04:	4806      	ldr	r0, [pc, #24]	; (8002c20 <net_sock_close_mbedtls+0x68>)
 8002c06:	f020 fe03 	bl	8023810 <puts>
  internal_close(sock);
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff fca6 	bl	800255c <internal_close>
}
 8002c10:	2000      	movs	r0, #0
 8002c12:	bd38      	pop	{r3, r4, r5, pc}
 8002c14:	08028424 	.word	0x08028424
 8002c18:	0802da5d 	.word	0x0802da5d
 8002c1c:	0802e893 	.word	0x0802e893
 8002c20:	0802e8cd 	.word	0x0802e8cd

08002c24 <net_sock_destroy_mbedtls>:
  net_ctxt_t *ctxt = sock->net;
 8002c24:	6802      	ldr	r2, [r0, #0]
  if (sock == ctxt->sock_list)
 8002c26:	6853      	ldr	r3, [r2, #4]
 8002c28:	4283      	cmp	r3, r0
{
 8002c2a:	b510      	push	{r4, lr}
 8002c2c:	4604      	mov	r4, r0
  if (sock == ctxt->sock_list)
 8002c2e:	d109      	bne.n	8002c44 <net_sock_destroy_mbedtls+0x20>
        cur->next = sock->next;
 8002c30:	6863      	ldr	r3, [r4, #4]
    net_free(sock->tlsData);
 8002c32:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        cur->next = sock->next;
 8002c34:	6053      	str	r3, [r2, #4]
    net_free(sock->tlsData);
 8002c36:	f01f fc0d 	bl	8022454 <free>
    net_free(sock);
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f01f fc0a 	bl	8022454 <free>
 8002c40:	2000      	movs	r0, #0
}
 8002c42:	bd10      	pop	{r4, pc}
      if (cur->next == sock)
 8002c44:	461a      	mov	r2, r3
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	42a3      	cmp	r3, r4
 8002c4a:	d0f1      	beq.n	8002c30 <net_sock_destroy_mbedtls+0xc>
    } while(cur->next != NULL);
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	d1f8      	bne.n	8002c44 <net_sock_destroy_mbedtls+0x20>
  int rc = NET_ERR;
 8002c52:	f04f 30ff 	mov.w	r0, #4294967295
 8002c56:	e7f4      	b.n	8002c42 <net_sock_destroy_mbedtls+0x1e>

08002c58 <net_sock_create_mbedtls>:
{
 8002c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c5c:	4605      	mov	r5, r0
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002c5e:	2038      	movs	r0, #56	; 0x38
{
 8002c60:	460f      	mov	r7, r1
 8002c62:	4690      	mov	r8, r2
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002c64:	f01f fbee 	bl	8022444 <malloc>
  if (sock == NULL) 
 8002c68:	4604      	mov	r4, r0
 8002c6a:	b958      	cbnz	r0, 8002c84 <net_sock_create_mbedtls+0x2c>
    msg_error("net_sock_create allocation 1 failed.\n");
 8002c6c:	4921      	ldr	r1, [pc, #132]	; (8002cf4 <net_sock_create_mbedtls+0x9c>)
 8002c6e:	4822      	ldr	r0, [pc, #136]	; (8002cf8 <net_sock_create_mbedtls+0xa0>)
 8002c70:	224b      	movs	r2, #75	; 0x4b
 8002c72:	f020 fd31 	bl	80236d8 <iprintf>
 8002c76:	4821      	ldr	r0, [pc, #132]	; (8002cfc <net_sock_create_mbedtls+0xa4>)
 8002c78:	f020 fdca 	bl	8023810 <puts>
      rc = NET_ERR;
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 8002c84:	2238      	movs	r2, #56	; 0x38
 8002c86:	2100      	movs	r1, #0
 8002c88:	f01f fc22 	bl	80224d0 <memset>
    tlsData = net_malloc(sizeof(net_tls_data_t));
 8002c8c:	f44f 60e4 	mov.w	r0, #1824	; 0x720
 8002c90:	f01f fbd8 	bl	8022444 <malloc>
    if (tlsData == NULL)
 8002c94:	4606      	mov	r6, r0
 8002c96:	b958      	cbnz	r0, 8002cb0 <net_sock_create_mbedtls+0x58>
      msg_error("net_sock_create allocation 2 failed.\n");
 8002c98:	4916      	ldr	r1, [pc, #88]	; (8002cf4 <net_sock_create_mbedtls+0x9c>)
 8002c9a:	4817      	ldr	r0, [pc, #92]	; (8002cf8 <net_sock_create_mbedtls+0xa0>)
 8002c9c:	2254      	movs	r2, #84	; 0x54
 8002c9e:	f020 fd1b 	bl	80236d8 <iprintf>
 8002ca2:	4817      	ldr	r0, [pc, #92]	; (8002d00 <net_sock_create_mbedtls+0xa8>)
 8002ca4:	f020 fdb4 	bl	8023810 <puts>
      net_free(sock);
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f01f fbd3 	bl	8022454 <free>
 8002cae:	e7e5      	b.n	8002c7c <net_sock_create_mbedtls+0x24>
      memset(tlsData, 0, sizeof(net_tls_data_t));
 8002cb0:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	f01f fc0b 	bl	80224d0 <memset>
      sock->next = ctxt->sock_list;
 8002cba:	686a      	ldr	r2, [r5, #4]
 8002cbc:	6062      	str	r2, [r4, #4]
      sock->methods.open    = (net_sock_open_mbedtls);
 8002cbe:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <net_sock_create_mbedtls+0xac>)
 8002cc0:	60a2      	str	r2, [r4, #8]
      sock->methods.recv    = (net_sock_recv_mbedtls);
 8002cc2:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <net_sock_create_mbedtls+0xb0>)
 8002cc4:	60e2      	str	r2, [r4, #12]
      sock->methods.send    = (net_sock_send_mbedtls);
 8002cc6:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <net_sock_create_mbedtls+0xb4>)
 8002cc8:	6162      	str	r2, [r4, #20]
      tlsData->tls_srv_verification = true;
 8002cca:	2301      	movs	r3, #1
      sock->methods.close   = (net_sock_close_mbedtls);
 8002ccc:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <net_sock_create_mbedtls+0xb8>)
      tlsData->tls_srv_verification = true;
 8002cce:	7633      	strb	r3, [r6, #24]
      sock->methods.close   = (net_sock_close_mbedtls);
 8002cd0:	61e2      	str	r2, [r4, #28]
      sock->blocking        = NET_DEFAULT_BLOCKING;
 8002cd2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      sock->methods.destroy = (net_sock_destroy_mbedtls);
 8002cd6:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <net_sock_create_mbedtls+0xbc>)
      ctxt->sock_list       = sock;                       /* Insert at the head of the list */
 8002cd8:	606c      	str	r4, [r5, #4]
      sock->read_timeout    = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 8002cda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
      sock->net = ctxt;
 8002cde:	6025      	str	r5, [r4, #0]
      sock->methods.destroy = (net_sock_destroy_mbedtls);
 8002ce0:	6222      	str	r2, [r4, #32]
      sock->proto           = proto;
 8002ce2:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
      sock->read_timeout    = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 8002ce6:	84e3      	strh	r3, [r4, #38]	; 0x26
      sock->write_timeout   = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 8002ce8:	8523      	strh	r3, [r4, #40]	; 0x28
      sock->tlsData         = tlsData;
 8002cea:	62e6      	str	r6, [r4, #44]	; 0x2c
      *sockhnd = (net_sockhnd_t) sock;
 8002cec:	603c      	str	r4, [r7, #0]
      rc = NET_OK;
 8002cee:	2000      	movs	r0, #0
  return rc;
 8002cf0:	e7c6      	b.n	8002c80 <net_sock_create_mbedtls+0x28>
 8002cf2:	bf00      	nop
 8002cf4:	0802843b 	.word	0x0802843b
 8002cf8:	0802da5d 	.word	0x0802da5d
 8002cfc:	0802e8f1 	.word	0x0802e8f1
 8002d00:	0802e916 	.word	0x0802e916
 8002d04:	080025ad 	.word	0x080025ad
 8002d08:	08002a3d 	.word	0x08002a3d
 8002d0c:	08002b01 	.word	0x08002b01
 8002d10:	08002bb9 	.word	0x08002bb9
 8002d14:	08002c25 	.word	0x08002c25

08002d18 <TimerCountdownMS>:
#include "main.h"
#include "paho_timer.h"  


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms)
{
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	460d      	mov	r5, r1
  timer->init_tick = HAL_GetTick();
 8002d1e:	f005 ff8f 	bl	8008c40 <HAL_GetTick>
  timer->timeout_ms = timeout_ms;
 8002d22:	e9c4 0500 	strd	r0, r5, [r4]
}
 8002d26:	bd38      	pop	{r3, r4, r5, pc}

08002d28 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout)
{
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	460d      	mov	r5, r1
  timer->init_tick = HAL_GetTick();
 8002d2e:	f005 ff87 	bl	8008c40 <HAL_GetTick>
  TimerCountdownMS(timer, timeout * 1000);
 8002d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d36:	436b      	muls	r3, r5
  timer->init_tick = HAL_GetTick();
 8002d38:	6020      	str	r0, [r4, #0]
  timer->timeout_ms = timeout_ms;
 8002d3a:	6063      	str	r3, [r4, #4]
}
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}

08002d3e <TimerLeftMS>:


int TimerLeftMS(Timer* timer)
{
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	4604      	mov	r4, r0
  int ret = 0;
  uint32_t cur_tick = HAL_GetTick();  // The HAL tick period is 1 millisecond.
 8002d42:	f005 ff7d 	bl	8008c40 <HAL_GetTick>
  if (cur_tick < timer->init_tick)
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	4283      	cmp	r3, r0
 8002d4a:	d905      	bls.n	8002d58 <TimerLeftMS+0x1a>
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", timer->init_tick, cur_tick);
    timer->timeout_ms -= 0xFFFFFFFF - timer->init_tick;
 8002d4c:	6862      	ldr	r2, [r4, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3301      	adds	r3, #1
 8002d52:	6063      	str	r3, [r4, #4]
    timer->init_tick = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	6023      	str	r3, [r4, #0]
  }
  ret = timer->timeout_ms - (cur_tick - timer->init_tick);
 8002d58:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	1a18      	subs	r0, r3, r0

  return (ret >= 0) ? ret : 0;
}
 8002d60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002d64:	bd10      	pop	{r4, pc}

08002d66 <TimerIsExpired>:


char TimerIsExpired(Timer* timer)
{
 8002d66:	b508      	push	{r3, lr}
  return (TimerLeftMS(timer) > 0) ? 0 : 1;
 8002d68:	f7ff ffe9 	bl	8002d3e <TimerLeftMS>
}
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	bfcc      	ite	gt
 8002d70:	2000      	movgt	r0, #0
 8002d72:	2001      	movle	r0, #1
 8002d74:	bd08      	pop	{r3, pc}

08002d76 <TimerInit>:


void TimerInit(Timer* timer)
{
  timer->init_tick = 0;
 8002d76:	2300      	movs	r3, #0
  timer->timeout_ms = 0;
 8002d78:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002d7c:	4770      	bx	lr
	...

08002d80 <init_sensors>:
  * @param  none
  * @retval 0 in case of success
  *         -1 in case of failure
  */
int init_sensors(void)
{
 8002d80:	b510      	push	{r4, lr}
  int ret = 0;
  
  if (HSENSOR_OK != BSP_HSENSOR_Init())
 8002d82:	f002 fb13 	bl	80053ac <BSP_HSENSOR_Init>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d054      	beq.n	8002e34 <init_sensors+0xb4>
  {
    msg_error("BSP_HSENSOR_Init() returns %d\n", ret);
 8002d8a:	492b      	ldr	r1, [pc, #172]	; (8002e38 <init_sensors+0xb8>)
 8002d8c:	482b      	ldr	r0, [pc, #172]	; (8002e3c <init_sensors+0xbc>)
 8002d8e:	2252      	movs	r2, #82	; 0x52
 8002d90:	f020 fca2 	bl	80236d8 <iprintf>
 8002d94:	482a      	ldr	r0, [pc, #168]	; (8002e40 <init_sensors+0xc0>)
 8002d96:	2100      	movs	r1, #0
 8002d98:	f020 fc9e 	bl	80236d8 <iprintf>
    ret = -1;
 8002d9c:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (TSENSOR_OK != BSP_TSENSOR_Init())
 8002da0:	f002 fb64 	bl	800546c <BSP_TSENSOR_Init>
 8002da4:	b150      	cbz	r0, 8002dbc <init_sensors+0x3c>
  {
    msg_error("BSP_TSENSOR_Init() returns %d\n", ret);
 8002da6:	4924      	ldr	r1, [pc, #144]	; (8002e38 <init_sensors+0xb8>)
 8002da8:	4824      	ldr	r0, [pc, #144]	; (8002e3c <init_sensors+0xbc>)
 8002daa:	2258      	movs	r2, #88	; 0x58
 8002dac:	f020 fc94 	bl	80236d8 <iprintf>
 8002db0:	4621      	mov	r1, r4
 8002db2:	4824      	ldr	r0, [pc, #144]	; (8002e44 <init_sensors+0xc4>)
 8002db4:	f020 fc90 	bl	80236d8 <iprintf>
    ret = -1;
 8002db8:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (PSENSOR_OK != BSP_PSENSOR_Init())
 8002dbc:	f002 fb3a 	bl	8005434 <BSP_PSENSOR_Init>
 8002dc0:	b150      	cbz	r0, 8002dd8 <init_sensors+0x58>
  {
    msg_error("BSP_PSENSOR_Init() returns %d\n", ret);
 8002dc2:	491d      	ldr	r1, [pc, #116]	; (8002e38 <init_sensors+0xb8>)
 8002dc4:	481d      	ldr	r0, [pc, #116]	; (8002e3c <init_sensors+0xbc>)
 8002dc6:	225e      	movs	r2, #94	; 0x5e
 8002dc8:	f020 fc86 	bl	80236d8 <iprintf>
 8002dcc:	4621      	mov	r1, r4
 8002dce:	481e      	ldr	r0, [pc, #120]	; (8002e48 <init_sensors+0xc8>)
 8002dd0:	f020 fc82 	bl	80236d8 <iprintf>
    ret = -1;
 8002dd4:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (MAGNETO_OK != BSP_MAGNETO_Init())
 8002dd8:	f002 fb04 	bl	80053e4 <BSP_MAGNETO_Init>
 8002ddc:	b150      	cbz	r0, 8002df4 <init_sensors+0x74>
  {
    msg_error("BSP_MAGNETO_Init() returns %d\n", ret);
 8002dde:	4916      	ldr	r1, [pc, #88]	; (8002e38 <init_sensors+0xb8>)
 8002de0:	4816      	ldr	r0, [pc, #88]	; (8002e3c <init_sensors+0xbc>)
 8002de2:	2264      	movs	r2, #100	; 0x64
 8002de4:	f020 fc78 	bl	80236d8 <iprintf>
 8002de8:	4621      	mov	r1, r4
 8002dea:	4818      	ldr	r0, [pc, #96]	; (8002e4c <init_sensors+0xcc>)
 8002dec:	f020 fc74 	bl	80236d8 <iprintf>
    ret = -1;
 8002df0:	f04f 34ff 	mov.w	r4, #4294967295
  }

  if (GYRO_OK != BSP_GYRO_Init())
 8002df4:	f002 fabc 	bl	8005370 <BSP_GYRO_Init>
 8002df8:	b150      	cbz	r0, 8002e10 <init_sensors+0x90>
  {
    msg_error("BSP_GYRO_Init() returns %d\n", ret);
 8002dfa:	490f      	ldr	r1, [pc, #60]	; (8002e38 <init_sensors+0xb8>)
 8002dfc:	480f      	ldr	r0, [pc, #60]	; (8002e3c <init_sensors+0xbc>)
 8002dfe:	226a      	movs	r2, #106	; 0x6a
 8002e00:	f020 fc6a 	bl	80236d8 <iprintf>
 8002e04:	4621      	mov	r1, r4
 8002e06:	4812      	ldr	r0, [pc, #72]	; (8002e50 <init_sensors+0xd0>)
 8002e08:	f020 fc66 	bl	80236d8 <iprintf>
    ret = -1;
 8002e0c:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (ACCELERO_OK != BSP_ACCELERO_Init())
 8002e10:	f002 fa90 	bl	8005334 <BSP_ACCELERO_Init>
 8002e14:	b150      	cbz	r0, 8002e2c <init_sensors+0xac>
  {
    msg_error("BSP_ACCELERO_Init() returns %d\n", ret);
 8002e16:	4908      	ldr	r1, [pc, #32]	; (8002e38 <init_sensors+0xb8>)
 8002e18:	4808      	ldr	r0, [pc, #32]	; (8002e3c <init_sensors+0xbc>)
 8002e1a:	2270      	movs	r2, #112	; 0x70
 8002e1c:	f020 fc5c 	bl	80236d8 <iprintf>
 8002e20:	4621      	mov	r1, r4
 8002e22:	480c      	ldr	r0, [pc, #48]	; (8002e54 <init_sensors+0xd4>)
 8002e24:	f020 fc58 	bl	80236d8 <iprintf>
    ret = -1;
 8002e28:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  VL53L0X_PROXIMITY_Init();
 8002e2c:	f001 fd56 	bl	80048dc <VL53L0X_PROXIMITY_Init>
  
  return ret;
}
 8002e30:	4620      	mov	r0, r4
 8002e32:	bd10      	pop	{r4, pc}
  int ret = 0;
 8002e34:	4604      	mov	r4, r0
 8002e36:	e7b3      	b.n	8002da0 <init_sensors+0x20>
 8002e38:	08028453 	.word	0x08028453
 8002e3c:	0802da5d 	.word	0x0802da5d
 8002e40:	0802e93b 	.word	0x0802e93b
 8002e44:	0802e95a 	.word	0x0802e95a
 8002e48:	0802e979 	.word	0x0802e979
 8002e4c:	0802e998 	.word	0x0802e998
 8002e50:	0802e9b7 	.word	0x0802e9b7
 8002e54:	0802e9d3 	.word	0x0802e9d3

08002e58 <setRTCTimeDateFromNetwork>:
 *            TD_ERR_RTC          Could not set the RTC.
 *            TD_ERR_TLS_CERT     The server certificate verification failed. Applicable only when force_apply is false.
 *                                .
 */
int setRTCTimeDateFromNetwork(bool force_apply)
{
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 // return 0;
  int rc = TD_OK;
  int ret = NET_OK;
  net_sockhnd_t socket = NULL;
 8002e60:	2100      	movs	r1, #0
  int len = strlen(http_request);
  char buffer[NET_BUF_SIZE + 1]; /* +1 to be sure that the buffer is closed by a \0, so that it may be parsed by string commands. */
  memset(buffer, 0, sizeof(buffer));
 8002e62:	f240 32e9 	movw	r2, #1001	; 0x3e9
{
 8002e66:	4606      	mov	r6, r0
  memset(buffer, 0, sizeof(buffer));
 8002e68:	a819      	add	r0, sp, #100	; 0x64
  net_sockhnd_t socket = NULL;
 8002e6a:	9108      	str	r1, [sp, #32]
  memset(buffer, 0, sizeof(buffer));
 8002e6c:	f01f fb30 	bl	80224d0 <memset>
 
  ret = net_sock_create(hnet, &socket, TIME_SOURCE_HTTP_PROTO);
 8002e70:	4bae      	ldr	r3, [pc, #696]	; (800312c <setRTCTimeDateFromNetwork+0x2d4>)
 8002e72:	2202      	movs	r2, #2
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	a908      	add	r1, sp, #32
 8002e78:	f7fe ffc4 	bl	8001e04 <net_sock_create>
  if (ret != NET_OK)
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d034      	beq.n	8002eec <setRTCTimeDateFromNetwork+0x94>
  {
    msg_error("Could not create the socket.\n");
 8002e82:	49ab      	ldr	r1, [pc, #684]	; (8003130 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e84:	48ab      	ldr	r0, [pc, #684]	; (8003134 <setRTCTimeDateFromNetwork+0x2dc>)
 8002e86:	2267      	movs	r2, #103	; 0x67
 8002e88:	f020 fc26 	bl	80236d8 <iprintf>
 8002e8c:	48aa      	ldr	r0, [pc, #680]	; (8003138 <setRTCTimeDateFromNetwork+0x2e0>)
 8002e8e:	f020 fcbf 	bl	8023810 <puts>
    }
  }
  
  if (ret != NET_OK)
  {
    msg_error("Could not set the socket options.\n");
 8002e92:	2277      	movs	r2, #119	; 0x77
 8002e94:	49a6      	ldr	r1, [pc, #664]	; (8003130 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e96:	48a7      	ldr	r0, [pc, #668]	; (8003134 <setRTCTimeDateFromNetwork+0x2dc>)
 8002e98:	f020 fc1e 	bl	80236d8 <iprintf>
 8002e9c:	48a7      	ldr	r0, [pc, #668]	; (800313c <setRTCTimeDateFromNetwork+0x2e4>)
 8002e9e:	f020 fcb7 	bl	8023810 <puts>
  else
  {
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
  }
  
  if (ret == NET_AUTH)
 8002ea2:	1da2      	adds	r2, r4, #6
 8002ea4:	d155      	bne.n	8002f52 <setRTCTimeDateFromNetwork+0xfa>
  {
    msg_error("An incorrect system time may have resulted in a TLS authentication error.\n");
 8002ea6:	49a2      	ldr	r1, [pc, #648]	; (8003130 <setRTCTimeDateFromNetwork+0x2d8>)
 8002ea8:	48a2      	ldr	r0, [pc, #648]	; (8003134 <setRTCTimeDateFromNetwork+0x2dc>)
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	f020 fc14 	bl	80236d8 <iprintf>
 8002eb0:	48a3      	ldr	r0, [pc, #652]	; (8003140 <setRTCTimeDateFromNetwork+0x2e8>)
 8002eb2:	f020 fcad 	bl	8023810 <puts>
 8002eb6:	f06f 0505 	mvn.w	r5, #5
    rc = TD_ERR_TLS_CERT;
 8002eba:	f06f 0403 	mvn.w	r4, #3
  }
  
  if ( (ret != NET_OK) || (rc != TD_OK) )
  {
    msg_error("Could not open the socket.\n");
 8002ebe:	499c      	ldr	r1, [pc, #624]	; (8003130 <setRTCTimeDateFromNetwork+0x2d8>)
 8002ec0:	489c      	ldr	r0, [pc, #624]	; (8003134 <setRTCTimeDateFromNetwork+0x2dc>)
 8002ec2:	2286      	movs	r2, #134	; 0x86
 8002ec4:	f020 fc08 	bl	80236d8 <iprintf>
 8002ec8:	489e      	ldr	r0, [pc, #632]	; (8003144 <setRTCTimeDateFromNetwork+0x2ec>)
 8002eca:	f020 fca1 	bl	8023810 <puts>
    }
    
    ret = net_sock_close(socket);  
  }
  
  if (socket != NULL)
 8002ece:	9808      	ldr	r0, [sp, #32]
 8002ed0:	b110      	cbz	r0, 8002ed8 <setRTCTimeDateFromNetwork+0x80>
  {
    ret |= net_sock_destroy(socket);
 8002ed2:	f7ff f879 	bl	8001fc8 <net_sock_destroy>
 8002ed6:	4305      	orrs	r5, r0
  }
  /* Translate a socket closure error in network error. */
  if ((rc == TD_OK) && (ret != NET_OK))
 8002ed8:	b91c      	cbnz	r4, 8002ee2 <setRTCTimeDateFromNetwork+0x8a>
 8002eda:	1e28      	subs	r0, r5, #0
 8002edc:	bf18      	it	ne
 8002ede:	2001      	movne	r0, #1
 8002ee0:	4244      	negs	r4, r0
  {
    rc = TD_ERR_CONNECT;
  }
  
  return rc;
}
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
 8002ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret |= net_sock_setopt(socket, "sock_read_timeout", (uint8_t*)NET_READ_TIMEOUT, sizeof(NET_READ_TIMEOUT));
 8002eec:	4996      	ldr	r1, [pc, #600]	; (8003148 <setRTCTimeDateFromNetwork+0x2f0>)
 8002eee:	4a97      	ldr	r2, [pc, #604]	; (800314c <setRTCTimeDateFromNetwork+0x2f4>)
 8002ef0:	9808      	ldr	r0, [sp, #32]
 8002ef2:	2305      	movs	r3, #5
 8002ef4:	f7fe ffb2 	bl	8001e5c <net_sock_setopt>
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002ef8:	4b95      	ldr	r3, [pc, #596]	; (8003150 <setRTCTimeDateFromNetwork+0x2f8>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	9207      	str	r2, [sp, #28]
    ret |= net_sock_setopt(socket, "sock_read_timeout", (uint8_t*)NET_READ_TIMEOUT, sizeof(NET_READ_TIMEOUT));
 8002efe:	4605      	mov	r5, r0
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7fd f96f 	bl	80001e4 <strlen>
 8002f06:	9a07      	ldr	r2, [sp, #28]
 8002f08:	4992      	ldr	r1, [pc, #584]	; (8003154 <setRTCTimeDateFromNetwork+0x2fc>)
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	9808      	ldr	r0, [sp, #32]
 8002f0e:	f7fe ffa5 	bl	8001e5c <net_sock_setopt>
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002f12:	4a91      	ldr	r2, [pc, #580]	; (8003158 <setRTCTimeDateFromNetwork+0x300>)
 8002f14:	4991      	ldr	r1, [pc, #580]	; (800315c <setRTCTimeDateFromNetwork+0x304>)
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002f16:	4305      	orrs	r5, r0
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002f18:	230e      	movs	r3, #14
 8002f1a:	9808      	ldr	r0, [sp, #32]
 8002f1c:	f7fe ff9e 	bl	8001e5c <net_sock_setopt>
      ret |= net_sock_setopt(socket, (force_apply == true) ? "tls_server_noverification" : "tls_server_verification", NULL, 0);
 8002f20:	498f      	ldr	r1, [pc, #572]	; (8003160 <setRTCTimeDateFromNetwork+0x308>)
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002f22:	4305      	orrs	r5, r0
      ret |= net_sock_setopt(socket, (force_apply == true) ? "tls_server_noverification" : "tls_server_verification", NULL, 0);
 8002f24:	488f      	ldr	r0, [pc, #572]	; (8003164 <setRTCTimeDateFromNetwork+0x30c>)
 8002f26:	4623      	mov	r3, r4
 8002f28:	2e00      	cmp	r6, #0
 8002f2a:	bf18      	it	ne
 8002f2c:	4601      	movne	r1, r0
 8002f2e:	4622      	mov	r2, r4
 8002f30:	9808      	ldr	r0, [sp, #32]
 8002f32:	f7fe ff93 	bl	8001e5c <net_sock_setopt>
  if (ret != NET_OK)
 8002f36:	ea55 0400 	orrs.w	r4, r5, r0
 8002f3a:	d1aa      	bne.n	8002e92 <setRTCTimeDateFromNetwork+0x3a>
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	4986      	ldr	r1, [pc, #536]	; (8003158 <setRTCTimeDateFromNetwork+0x300>)
 8002f40:	9808      	ldr	r0, [sp, #32]
 8002f42:	f240 12bb 	movw	r2, #443	; 0x1bb
 8002f46:	f7fe ff83 	bl	8001e50 <net_sock_open>
  if (ret == NET_AUTH)
 8002f4a:	1d83      	adds	r3, r0, #6
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8002f4c:	4604      	mov	r4, r0
  if (ret == NET_AUTH)
 8002f4e:	d0aa      	beq.n	8002ea6 <setRTCTimeDateFromNetwork+0x4e>
  if ( (ret != NET_OK) || (rc != TD_OK) )
 8002f50:	b110      	cbz	r0, 8002f58 <setRTCTimeDateFromNetwork+0x100>
    rc = TD_ERR_TLS_CERT;
 8002f52:	4625      	mov	r5, r4
  int rc = TD_OK;
 8002f54:	2400      	movs	r4, #0
 8002f56:	e7b2      	b.n	8002ebe <setRTCTimeDateFromNetwork+0x66>
    ret = net_sock_send(socket, (uint8_t *) http_request, len);
 8002f58:	4983      	ldr	r1, [pc, #524]	; (8003168 <setRTCTimeDateFromNetwork+0x310>)
 8002f5a:	9808      	ldr	r0, [sp, #32]
 8002f5c:	2228      	movs	r2, #40	; 0x28
 8002f5e:	f7ff f827 	bl	8001fb0 <net_sock_send>
    if (ret != len)
 8002f62:	2828      	cmp	r0, #40	; 0x28
 8002f64:	d00d      	beq.n	8002f82 <setRTCTimeDateFromNetwork+0x12a>
      msg_error("Could not send %d bytes.\n", len);
 8002f66:	4972      	ldr	r1, [pc, #456]	; (8003130 <setRTCTimeDateFromNetwork+0x2d8>)
 8002f68:	4872      	ldr	r0, [pc, #456]	; (8003134 <setRTCTimeDateFromNetwork+0x2dc>)
 8002f6a:	228e      	movs	r2, #142	; 0x8e
 8002f6c:	f020 fbb4 	bl	80236d8 <iprintf>
 8002f70:	487e      	ldr	r0, [pc, #504]	; (800316c <setRTCTimeDateFromNetwork+0x314>)
 8002f72:	2128      	movs	r1, #40	; 0x28
 8002f74:	f020 fbb0 	bl	80236d8 <iprintf>
    ret = net_sock_close(socket);  
 8002f78:	9808      	ldr	r0, [sp, #32]
 8002f7a:	f7ff f81f 	bl	8001fbc <net_sock_close>
 8002f7e:	4605      	mov	r5, r0
 8002f80:	e7a5      	b.n	8002ece <setRTCTimeDateFromNetwork+0x76>
          dateStr = strstr(buffer, "Date: ");
 8002f82:	4e7b      	ldr	r6, [pc, #492]	; (8003170 <setRTCTimeDateFromNetwork+0x318>)
      int read = 0;
 8002f84:	4625      	mov	r5, r4
        len = net_sock_recv(socket, (uint8_t *) buffer + read, NET_BUF_SIZE - read);
 8002f86:	ab19      	add	r3, sp, #100	; 0x64
 8002f88:	9808      	ldr	r0, [sp, #32]
 8002f8a:	f5c5 727a 	rsb	r2, r5, #1000	; 0x3e8
 8002f8e:	1959      	adds	r1, r3, r5
 8002f90:	f7ff f808 	bl	8001fa4 <net_sock_recv>
        if (len > 0)
 8002f94:	2800      	cmp	r0, #0
 8002f96:	dc0b      	bgt.n	8002fb0 <setRTCTimeDateFromNetwork+0x158>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8002f98:	d0f5      	beq.n	8002f86 <setRTCTimeDateFromNetwork+0x12e>
 8002f9a:	3003      	adds	r0, #3
 8002f9c:	d0f3      	beq.n	8002f86 <setRTCTimeDateFromNetwork+0x12e>
        msg_error("No 'Date:' line found in the HTTP response header.\n");
 8002f9e:	4964      	ldr	r1, [pc, #400]	; (8003130 <setRTCTimeDateFromNetwork+0x2d8>)
 8002fa0:	4864      	ldr	r0, [pc, #400]	; (8003134 <setRTCTimeDateFromNetwork+0x2dc>)
 8002fa2:	22a0      	movs	r2, #160	; 0xa0
 8002fa4:	f020 fb98 	bl	80236d8 <iprintf>
 8002fa8:	4872      	ldr	r0, [pc, #456]	; (8003174 <setRTCTimeDateFromNetwork+0x31c>)
 8002faa:	f020 fc31 	bl	8023810 <puts>
 8002fae:	e080      	b.n	80030b2 <setRTCTimeDateFromNetwork+0x25a>
          read += len;
 8002fb0:	4405      	add	r5, r0
          dateStr = strstr(buffer, "Date: ");
 8002fb2:	4631      	mov	r1, r6
 8002fb4:	a819      	add	r0, sp, #100	; 0x64
 8002fb6:	f020 fd78 	bl	8023aaa <strstr>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8002fba:	4607      	mov	r7, r0
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d067      	beq.n	8003090 <setRTCTimeDateFromNetwork+0x238>
        memset(month, 0, sizeof(month));
 8002fc0:	ad09      	add	r5, sp, #36	; 0x24
        day = year = hour = min = sec = 0;
 8002fc2:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8002fc6:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002fca:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 8002fce:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
        memset(dow, 0, sizeof(dow));
 8002fd2:	2600      	movs	r6, #0
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fd4:	ab0e      	add	r3, sp, #56	; 0x38
        memset(month, 0, sizeof(month));
 8002fd6:	602e      	str	r6, [r5, #0]
        day = year = hour = min = sec = 0;
 8002fd8:	f8c8 6000 	str.w	r6, [r8]
 8002fdc:	f8c9 6000 	str.w	r6, [r9]
 8002fe0:	f8ca 6000 	str.w	r6, [sl]
 8002fe4:	f8cb 6000 	str.w	r6, [fp]
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fe8:	4963      	ldr	r1, [pc, #396]	; (8003178 <setRTCTimeDateFromNetwork+0x320>)
        day = year = hour = min = sec = 0;
 8002fea:	960e      	str	r6, [sp, #56]	; 0x38
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fec:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8002ff0:	e9cd a902 	strd	sl, r9, [sp, #8]
 8002ff4:	ab12      	add	r3, sp, #72	; 0x48
 8002ff6:	e9cd b500 	strd	fp, r5, [sp]
 8002ffa:	aa10      	add	r2, sp, #64	; 0x40
        memset(dow, 0, sizeof(dow));
 8002ffc:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8003000:	f020 fca8 	bl	8023954 <siscanf>
        if (count < 8)
 8003004:	2807      	cmp	r0, #7
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8003006:	4603      	mov	r3, r0
        if (count < 8)
 8003008:	dd47      	ble.n	800309a <setRTCTimeDateFromNetwork+0x242>
          char * str = strstr(dateStr, "\r\n");
 800300a:	495c      	ldr	r1, [pc, #368]	; (800317c <setRTCTimeDateFromNetwork+0x324>)
 800300c:	4638      	mov	r0, r7
 800300e:	f020 fd4c 	bl	8023aaa <strstr>
          msg_info("Configuring the RTC from %s\n", dateStr);
 8003012:	4639      	mov	r1, r7
          str[0] = '\0';
 8003014:	7006      	strb	r6, [r0, #0]
          msg_info("Configuring the RTC from %s\n", dateStr);
 8003016:	485a      	ldr	r0, [pc, #360]	; (8003180 <setRTCTimeDateFromNetwork+0x328>)
 8003018:	f020 fb5e 	bl	80236d8 <iprintf>
          sTime.Hours = hour;
 800301c:	f8d9 3000 	ldr.w	r3, [r9]
 8003020:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
          sTime.Minutes = min;
 8003024:	f8d8 3000 	ldr.w	r3, [r8]
 8003028:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800302c:	a914      	add	r1, sp, #80	; 0x50
          sTime.Seconds = sec;
 800302e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003030:	4854      	ldr	r0, [pc, #336]	; (8003184 <setRTCTimeDateFromNetwork+0x32c>)
          sTime.Seconds = sec;
 8003032:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003036:	4632      	mov	r2, r6
          sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003038:	e9cd 6617 	strd	r6, r6, [sp, #92]	; 0x5c
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800303c:	f007 fe2f 	bl	800ac9e <HAL_RTC_SetTime>
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8003040:	4951      	ldr	r1, [pc, #324]	; (8003188 <setRTCTimeDateFromNetwork+0x330>)
            rc = TD_ERR_RTC;
 8003042:	2800      	cmp	r0, #0
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8003044:	a812      	add	r0, sp, #72	; 0x48
            rc = TD_ERR_RTC;
 8003046:	bf18      	it	ne
 8003048:	f06f 0402 	mvnne.w	r4, #2
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 800304c:	f7fd f8c0 	bl	80001d0 <strcmp>
 8003050:	bb90      	cbnz	r0, 80030b8 <setRTCTimeDateFromNetwork+0x260>
 8003052:	2301      	movs	r3, #1
                      if (strcmp(dow, "Sun,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SUNDAY; } else ret = -1;
 8003054:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
          if (strcmp(month, "Jan") == 0) { sDate.Month = RTC_MONTH_JANUARY; } else
 8003058:	494c      	ldr	r1, [pc, #304]	; (800318c <setRTCTimeDateFromNetwork+0x334>)
 800305a:	4628      	mov	r0, r5
 800305c:	f7fd f8b8 	bl	80001d0 <strcmp>
 8003060:	2800      	cmp	r0, #0
 8003062:	d154      	bne.n	800310e <setRTCTimeDateFromNetwork+0x2b6>
 8003064:	2301      	movs	r3, #1
                                if (strcmp(month, "Dec") == 0) { sDate.Month = RTC_MONTH_DECEMBER; } else ret = -1;
 8003066:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
          sDate.Date = day;
 800306a:	f8db 3000 	ldr.w	r3, [fp]
 800306e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
          sDate.Year = year - 2000;
 8003072:	f8da 3000 	ldr.w	r3, [sl]
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003076:	4843      	ldr	r0, [pc, #268]	; (8003184 <setRTCTimeDateFromNetwork+0x32c>)
          sDate.Year = year - 2000;
 8003078:	3330      	adds	r3, #48	; 0x30
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800307a:	2200      	movs	r2, #0
 800307c:	a90f      	add	r1, sp, #60	; 0x3c
          sDate.Year = year - 2000;
 800307e:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003082:	f007 fe86 	bl	800ad92 <HAL_RTC_SetDate>
            rc = TD_ERR_RTC;
 8003086:	2800      	cmp	r0, #0
 8003088:	bf18      	it	ne
 800308a:	f06f 0402 	mvnne.w	r4, #2
 800308e:	e773      	b.n	8002f78 <setRTCTimeDateFromNetwork+0x120>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8003090:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8003094:	f6ff af77 	blt.w	8002f86 <setRTCTimeDateFromNetwork+0x12e>
 8003098:	e781      	b.n	8002f9e <setRTCTimeDateFromNetwork+0x146>
          msg_error("At time initialization, only %d out of the 8 time/date data could be parsed from the HTTP response %s\n", count, buffer);
 800309a:	4925      	ldr	r1, [pc, #148]	; (8003130 <setRTCTimeDateFromNetwork+0x2d8>)
 800309c:	4825      	ldr	r0, [pc, #148]	; (8003134 <setRTCTimeDateFromNetwork+0x2dc>)
 800309e:	9307      	str	r3, [sp, #28]
 80030a0:	22b0      	movs	r2, #176	; 0xb0
 80030a2:	f020 fb19 	bl	80236d8 <iprintf>
 80030a6:	9b07      	ldr	r3, [sp, #28]
 80030a8:	4839      	ldr	r0, [pc, #228]	; (8003190 <setRTCTimeDateFromNetwork+0x338>)
 80030aa:	aa19      	add	r2, sp, #100	; 0x64
 80030ac:	4619      	mov	r1, r3
 80030ae:	f020 fb13 	bl	80236d8 <iprintf>
        rc = TD_ERR_HTTP;
 80030b2:	f06f 0401 	mvn.w	r4, #1
 80030b6:	e75f      	b.n	8002f78 <setRTCTimeDateFromNetwork+0x120>
            if (strcmp(dow, "Tue,") == 0) { sDate.WeekDay = RTC_WEEKDAY_TUESDAY; } else
 80030b8:	4936      	ldr	r1, [pc, #216]	; (8003194 <setRTCTimeDateFromNetwork+0x33c>)
 80030ba:	a812      	add	r0, sp, #72	; 0x48
 80030bc:	f7fd f888 	bl	80001d0 <strcmp>
 80030c0:	b908      	cbnz	r0, 80030c6 <setRTCTimeDateFromNetwork+0x26e>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e7c6      	b.n	8003054 <setRTCTimeDateFromNetwork+0x1fc>
              if (strcmp(dow, "Wed,") == 0) { sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; } else  
 80030c6:	4934      	ldr	r1, [pc, #208]	; (8003198 <setRTCTimeDateFromNetwork+0x340>)
 80030c8:	a812      	add	r0, sp, #72	; 0x48
 80030ca:	f7fd f881 	bl	80001d0 <strcmp>
 80030ce:	b908      	cbnz	r0, 80030d4 <setRTCTimeDateFromNetwork+0x27c>
 80030d0:	2303      	movs	r3, #3
 80030d2:	e7bf      	b.n	8003054 <setRTCTimeDateFromNetwork+0x1fc>
                if (strcmp(dow, "Thu,") == 0) { sDate.WeekDay = RTC_WEEKDAY_THURSDAY; } else  
 80030d4:	4931      	ldr	r1, [pc, #196]	; (800319c <setRTCTimeDateFromNetwork+0x344>)
 80030d6:	a812      	add	r0, sp, #72	; 0x48
 80030d8:	f7fd f87a 	bl	80001d0 <strcmp>
 80030dc:	b908      	cbnz	r0, 80030e2 <setRTCTimeDateFromNetwork+0x28a>
 80030de:	2304      	movs	r3, #4
 80030e0:	e7b8      	b.n	8003054 <setRTCTimeDateFromNetwork+0x1fc>
                  if (strcmp(dow, "Fri,") == 0) { sDate.WeekDay = RTC_WEEKDAY_FRIDAY; } else
 80030e2:	492f      	ldr	r1, [pc, #188]	; (80031a0 <setRTCTimeDateFromNetwork+0x348>)
 80030e4:	a812      	add	r0, sp, #72	; 0x48
 80030e6:	f7fd f873 	bl	80001d0 <strcmp>
 80030ea:	b908      	cbnz	r0, 80030f0 <setRTCTimeDateFromNetwork+0x298>
 80030ec:	2305      	movs	r3, #5
 80030ee:	e7b1      	b.n	8003054 <setRTCTimeDateFromNetwork+0x1fc>
                    if (strcmp(dow, "Sat,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SATURDAY; } else
 80030f0:	492c      	ldr	r1, [pc, #176]	; (80031a4 <setRTCTimeDateFromNetwork+0x34c>)
 80030f2:	a812      	add	r0, sp, #72	; 0x48
 80030f4:	f7fd f86c 	bl	80001d0 <strcmp>
 80030f8:	b908      	cbnz	r0, 80030fe <setRTCTimeDateFromNetwork+0x2a6>
 80030fa:	2306      	movs	r3, #6
 80030fc:	e7aa      	b.n	8003054 <setRTCTimeDateFromNetwork+0x1fc>
                      if (strcmp(dow, "Sun,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SUNDAY; } else ret = -1;
 80030fe:	492a      	ldr	r1, [pc, #168]	; (80031a8 <setRTCTimeDateFromNetwork+0x350>)
 8003100:	a812      	add	r0, sp, #72	; 0x48
 8003102:	f7fd f865 	bl	80001d0 <strcmp>
 8003106:	2800      	cmp	r0, #0
 8003108:	d1a6      	bne.n	8003058 <setRTCTimeDateFromNetwork+0x200>
 800310a:	2307      	movs	r3, #7
 800310c:	e7a2      	b.n	8003054 <setRTCTimeDateFromNetwork+0x1fc>
            if (strcmp(month, "Feb") == 0) { sDate.Month = RTC_MONTH_FEBRUARY; } else
 800310e:	4927      	ldr	r1, [pc, #156]	; (80031ac <setRTCTimeDateFromNetwork+0x354>)
 8003110:	4628      	mov	r0, r5
 8003112:	f7fd f85d 	bl	80001d0 <strcmp>
 8003116:	b908      	cbnz	r0, 800311c <setRTCTimeDateFromNetwork+0x2c4>
 8003118:	2302      	movs	r3, #2
 800311a:	e7a4      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
              if (strcmp(month, "Mar") == 0) { sDate.Month = RTC_MONTH_MARCH; } else
 800311c:	4924      	ldr	r1, [pc, #144]	; (80031b0 <setRTCTimeDateFromNetwork+0x358>)
 800311e:	4628      	mov	r0, r5
 8003120:	f7fd f856 	bl	80001d0 <strcmp>
 8003124:	2800      	cmp	r0, #0
 8003126:	d145      	bne.n	80031b4 <setRTCTimeDateFromNetwork+0x35c>
 8003128:	2303      	movs	r3, #3
 800312a:	e79c      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
 800312c:	200011e4 	.word	0x200011e4
 8003130:	08028460 	.word	0x08028460
 8003134:	0802da5d 	.word	0x0802da5d
 8003138:	0802e9f3 	.word	0x0802e9f3
 800313c:	0802ea23 	.word	0x0802ea23
 8003140:	0802ea45 	.word	0x0802ea45
 8003144:	0802ea8f 	.word	0x0802ea8f
 8003148:	0802e07b 	.word	0x0802e07b
 800314c:	0802ea10 	.word	0x0802ea10
 8003150:	20000008 	.word	0x20000008
 8003154:	0802e27f 	.word	0x0802e27f
 8003158:	0802ea15 	.word	0x0802ea15
 800315c:	0802e2e3 	.word	0x0802e2e3
 8003160:	0802e2b1 	.word	0x0802e2b1
 8003164:	0802e2c9 	.word	0x0802e2c9
 8003168:	0802847a 	.word	0x0802847a
 800316c:	0802eaaa 	.word	0x0802eaaa
 8003170:	0802eac4 	.word	0x0802eac4
 8003174:	0802eba2 	.word	0x0802eba2
 8003178:	0802ebd5 	.word	0x0802ebd5
 800317c:	0802ff06 	.word	0x0802ff06
 8003180:	0802eb32 	.word	0x0802eb32
 8003184:	20001174 	.word	0x20001174
 8003188:	0802eb4f 	.word	0x0802eb4f
 800318c:	0802eb72 	.word	0x0802eb72
 8003190:	0802eacb 	.word	0x0802eacb
 8003194:	0802eb54 	.word	0x0802eb54
 8003198:	0802eb59 	.word	0x0802eb59
 800319c:	0802eb5e 	.word	0x0802eb5e
 80031a0:	0802eb63 	.word	0x0802eb63
 80031a4:	0802eb68 	.word	0x0802eb68
 80031a8:	0802eb6d 	.word	0x0802eb6d
 80031ac:	0802eb76 	.word	0x0802eb76
 80031b0:	0802eb7a 	.word	0x0802eb7a
                if (strcmp(month, "Apr") == 0) { sDate.Month = RTC_MONTH_APRIL; } else
 80031b4:	4920      	ldr	r1, [pc, #128]	; (8003238 <setRTCTimeDateFromNetwork+0x3e0>)
 80031b6:	4628      	mov	r0, r5
 80031b8:	f7fd f80a 	bl	80001d0 <strcmp>
 80031bc:	b908      	cbnz	r0, 80031c2 <setRTCTimeDateFromNetwork+0x36a>
 80031be:	2304      	movs	r3, #4
 80031c0:	e751      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
                  if (strcmp(month, "May") == 0) { sDate.Month = RTC_MONTH_MAY; } else
 80031c2:	491e      	ldr	r1, [pc, #120]	; (800323c <setRTCTimeDateFromNetwork+0x3e4>)
 80031c4:	4628      	mov	r0, r5
 80031c6:	f7fd f803 	bl	80001d0 <strcmp>
 80031ca:	b908      	cbnz	r0, 80031d0 <setRTCTimeDateFromNetwork+0x378>
 80031cc:	2305      	movs	r3, #5
 80031ce:	e74a      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
                    if (strcmp(month, "Jun") == 0) { sDate.Month = RTC_MONTH_JUNE; } else
 80031d0:	491b      	ldr	r1, [pc, #108]	; (8003240 <setRTCTimeDateFromNetwork+0x3e8>)
 80031d2:	4628      	mov	r0, r5
 80031d4:	f7fc fffc 	bl	80001d0 <strcmp>
 80031d8:	b908      	cbnz	r0, 80031de <setRTCTimeDateFromNetwork+0x386>
 80031da:	2306      	movs	r3, #6
 80031dc:	e743      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
                      if (strcmp(month, "Jul") == 0) { sDate.Month = RTC_MONTH_JULY; } else
 80031de:	4919      	ldr	r1, [pc, #100]	; (8003244 <setRTCTimeDateFromNetwork+0x3ec>)
 80031e0:	4628      	mov	r0, r5
 80031e2:	f7fc fff5 	bl	80001d0 <strcmp>
 80031e6:	b908      	cbnz	r0, 80031ec <setRTCTimeDateFromNetwork+0x394>
 80031e8:	2307      	movs	r3, #7
 80031ea:	e73c      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
                        if (strcmp(month, "Aug") == 0) { sDate.Month = RTC_MONTH_AUGUST; } else
 80031ec:	4916      	ldr	r1, [pc, #88]	; (8003248 <setRTCTimeDateFromNetwork+0x3f0>)
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7fc ffee 	bl	80001d0 <strcmp>
 80031f4:	b908      	cbnz	r0, 80031fa <setRTCTimeDateFromNetwork+0x3a2>
 80031f6:	2308      	movs	r3, #8
 80031f8:	e735      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
                          if (strcmp(month, "Sep") == 0) { sDate.Month = RTC_MONTH_SEPTEMBER; } else
 80031fa:	4914      	ldr	r1, [pc, #80]	; (800324c <setRTCTimeDateFromNetwork+0x3f4>)
 80031fc:	4628      	mov	r0, r5
 80031fe:	f7fc ffe7 	bl	80001d0 <strcmp>
 8003202:	b908      	cbnz	r0, 8003208 <setRTCTimeDateFromNetwork+0x3b0>
 8003204:	2309      	movs	r3, #9
 8003206:	e72e      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
                            if (strcmp(month, "Oct") == 0) { sDate.Month = RTC_MONTH_OCTOBER; } else
 8003208:	4911      	ldr	r1, [pc, #68]	; (8003250 <setRTCTimeDateFromNetwork+0x3f8>)
 800320a:	4628      	mov	r0, r5
 800320c:	f7fc ffe0 	bl	80001d0 <strcmp>
 8003210:	b908      	cbnz	r0, 8003216 <setRTCTimeDateFromNetwork+0x3be>
 8003212:	2310      	movs	r3, #16
 8003214:	e727      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
                              if (strcmp(month, "Nov") == 0) { sDate.Month = RTC_MONTH_NOVEMBER; } else
 8003216:	490f      	ldr	r1, [pc, #60]	; (8003254 <setRTCTimeDateFromNetwork+0x3fc>)
 8003218:	4628      	mov	r0, r5
 800321a:	f7fc ffd9 	bl	80001d0 <strcmp>
 800321e:	b908      	cbnz	r0, 8003224 <setRTCTimeDateFromNetwork+0x3cc>
 8003220:	2311      	movs	r3, #17
 8003222:	e720      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
                                if (strcmp(month, "Dec") == 0) { sDate.Month = RTC_MONTH_DECEMBER; } else ret = -1;
 8003224:	490c      	ldr	r1, [pc, #48]	; (8003258 <setRTCTimeDateFromNetwork+0x400>)
 8003226:	4628      	mov	r0, r5
 8003228:	f7fc ffd2 	bl	80001d0 <strcmp>
 800322c:	2800      	cmp	r0, #0
 800322e:	f47f af1c 	bne.w	800306a <setRTCTimeDateFromNetwork+0x212>
 8003232:	2312      	movs	r3, #18
 8003234:	e717      	b.n	8003066 <setRTCTimeDateFromNetwork+0x20e>
 8003236:	bf00      	nop
 8003238:	0802eb7e 	.word	0x0802eb7e
 800323c:	0802eb82 	.word	0x0802eb82
 8003240:	0802eb86 	.word	0x0802eb86
 8003244:	0802eb8a 	.word	0x0802eb8a
 8003248:	0802eb8e 	.word	0x0802eb8e
 800324c:	0802eb92 	.word	0x0802eb92
 8003250:	0802eb96 	.word	0x0802eb96
 8003254:	0802eb9a 	.word	0x0802eb9a
 8003258:	0802eb9e 	.word	0x0802eb9e

0800325c <time>:


#elif defined (__GNUC__)
time_t time(time_t * pointer)
{
  return (time_t)TimingSystemGetSystemTime();
 800325c:	f7fd bed6 	b.w	800100c <TimingSystemGetSystemTime>

08003260 <net_if_init>:
int net_if_deinit(void * if_ctxt);
int net_if_reinit(void * if_ctxt);

/* Functions Definition ------------------------------------------------------*/
int net_if_init(void * if_ctxt)
{
 8003260:	b570      	push	{r4, r5, r6, lr}
  WIFI_Status_t wifiRes;
  uint8_t macAddress[6];
  int wifiConnectCounter = 0;
  bool skip_reconf = false;

  printf("\n*** WIFI connection ***\n\n");
 8003262:	4841      	ldr	r0, [pc, #260]	; (8003368 <net_if_init+0x108>)
{
 8003264:	b092      	sub	sp, #72	; 0x48
  printf("\n*** WIFI connection ***\n\n");
 8003266:	f020 fad3 	bl	8023810 <puts>

  skip_reconf = (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) == HAL_OK);
 800326a:	f10d 0217 	add.w	r2, sp, #23
 800326e:	a907      	add	r1, sp, #28
 8003270:	a806      	add	r0, sp, #24
 8003272:	f7fe f9a5 	bl	80015c0 <checkWiFiCredentials>

  if (skip_reconf == true)
 8003276:	b168      	cbz	r0, 8003294 <net_if_init+0x34>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
  }
  
  if (skip_reconf == false)
  {
    printf("Your WiFi parameters need to be entered to proceed.\n");
 8003278:	483c      	ldr	r0, [pc, #240]	; (800336c <net_if_init+0x10c>)
 800327a:	f020 fac9 	bl	8023810 <puts>
    do
    {
      updateWiFiCredentials();
 800327e:	f7fe f9cf 	bl	8001620 <updateWiFiCredentials>
    } while (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) != HAL_OK);
 8003282:	f10d 0217 	add.w	r2, sp, #23
 8003286:	a907      	add	r1, sp, #28
 8003288:	a806      	add	r0, sp, #24
 800328a:	f7fe f999 	bl	80015c0 <checkWiFiCredentials>
 800328e:	2800      	cmp	r0, #0
 8003290:	d1f5      	bne.n	800327e <net_if_init+0x1e>
 8003292:	e008      	b.n	80032a6 <net_if_init+0x46>
    printf("Push the User button (Blue) within the next 5 seconds if you want to update"
 8003294:	4836      	ldr	r0, [pc, #216]	; (8003370 <net_if_init+0x110>)
 8003296:	f020 fabb 	bl	8023810 <puts>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
 800329a:	f241 3088 	movw	r0, #5000	; 0x1388
 800329e:	f000 ffa5 	bl	80041ec <Button_WaitForPush>
  if (skip_reconf == false)
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d1e8      	bne.n	8003278 <net_if_init+0x18>
  }
  
  /*  Wifi Module initialization */
  printf("Initializing the WiFi module\n");
 80032a6:	4833      	ldr	r0, [pc, #204]	; (8003374 <net_if_init+0x114>)
 80032a8:	f020 fab2 	bl	8023810 <puts>
  
  wifiRes = WIFI_Init();
 80032ac:	f001 fdc4 	bl	8004e38 <WIFI_Init>
  if ( WIFI_STATUS_OK != wifiRes )
 80032b0:	b128      	cbz	r0, 80032be <net_if_init+0x5e>
  {
    printf("Failed to initialize WIFI module\n");
 80032b2:	4831      	ldr	r0, [pc, #196]	; (8003378 <net_if_init+0x118>)
 80032b4:	f020 faac 	bl	8023810 <puts>
  else
  {
    printf("\nFailed to connect to AP %s\n",ssid);
  }
  
  return (wifiRes == WIFI_STATUS_OK)?0:-1;
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	e051      	b.n	8003362 <net_if_init+0x102>
  WIFI_GetModuleName(moduleinfo);
 80032be:	a80a      	add	r0, sp, #40	; 0x28
 80032c0:	f001 feb6 	bl	8005030 <WIFI_GetModuleName>
  printf("Module initialized successfully: %s",moduleinfo);
 80032c4:	a90a      	add	r1, sp, #40	; 0x28
 80032c6:	482d      	ldr	r0, [pc, #180]	; (800337c <net_if_init+0x11c>)
 80032c8:	f020 fa06 	bl	80236d8 <iprintf>
  WIFI_GetModuleID(moduleinfo);
 80032cc:	a80a      	add	r0, sp, #40	; 0x28
 80032ce:	f001 fea5 	bl	800501c <WIFI_GetModuleID>
  printf(" %s",moduleinfo);
 80032d2:	a90a      	add	r1, sp, #40	; 0x28
 80032d4:	482a      	ldr	r0, [pc, #168]	; (8003380 <net_if_init+0x120>)
 80032d6:	f020 f9ff 	bl	80236d8 <iprintf>
  WIFI_GetModuleFwRevision(moduleinfo);
 80032da:	a80a      	add	r0, sp, #40	; 0x28
 80032dc:	f001 fe94 	bl	8005008 <WIFI_GetModuleFwRevision>
  printf(" %s\n",moduleinfo);
 80032e0:	a90a      	add	r1, sp, #40	; 0x28
 80032e2:	4828      	ldr	r0, [pc, #160]	; (8003384 <net_if_init+0x124>)
 80032e4:	f020 f9f8 	bl	80236d8 <iprintf>
  printf("Retrieving the WiFi module MAC address:");
 80032e8:	4827      	ldr	r0, [pc, #156]	; (8003388 <net_if_init+0x128>)
 80032ea:	f020 f9f5 	bl	80236d8 <iprintf>
  wifiRes = WIFI_GetMAC_Address( (uint8_t*)macAddress);
 80032ee:	a808      	add	r0, sp, #32
 80032f0:	f001 fdda 	bl	8004ea8 <WIFI_GetMAC_Address>
  if ( WIFI_STATUS_OK == wifiRes)
 80032f4:	bb60      	cbnz	r0, 8003350 <net_if_init+0xf0>
    printf(" %02x:%02x:%02x:%02x:%02x:%02x\n",
 80032f6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80032fa:	9302      	str	r3, [sp, #8]
 80032fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800330c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8003310:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8003314:	481d      	ldr	r0, [pc, #116]	; (800338c <net_if_init+0x12c>)
 8003316:	f020 f9df 	bl	80236d8 <iprintf>
  printf("\n");
 800331a:	200a      	movs	r0, #10
 800331c:	f020 f9f4 	bl	8023708 <putchar>
    printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 8003320:	4e1b      	ldr	r6, [pc, #108]	; (8003390 <net_if_init+0x130>)
  int wifiConnectCounter = 0;
 8003322:	2500      	movs	r5, #0
    printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 8003324:	3501      	adds	r5, #1
 8003326:	9906      	ldr	r1, [sp, #24]
 8003328:	2303      	movs	r3, #3
 800332a:	462a      	mov	r2, r5
 800332c:	4630      	mov	r0, r6
 800332e:	f020 f9d3 	bl	80236d8 <iprintf>
    wifiRes = WIFI_Connect(ssid, psk, security_mode);
 8003332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003336:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800333a:	f001 fda1 	bl	8004e80 <WIFI_Connect>
    if (wifiRes == WIFI_STATUS_OK) break;
 800333e:	4604      	mov	r4, r0
 8003340:	b150      	cbz	r0, 8003358 <net_if_init+0xf8>
  while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 8003342:	2d03      	cmp	r5, #3
 8003344:	d1ee      	bne.n	8003324 <net_if_init+0xc4>
    printf("\nFailed to connect to AP %s\n",ssid);
 8003346:	9906      	ldr	r1, [sp, #24]
 8003348:	4812      	ldr	r0, [pc, #72]	; (8003394 <net_if_init+0x134>)
 800334a:	f020 f9c5 	bl	80236d8 <iprintf>
 800334e:	e7b3      	b.n	80032b8 <net_if_init+0x58>
       printf("Failed to get MAC address\n");
 8003350:	4811      	ldr	r0, [pc, #68]	; (8003398 <net_if_init+0x138>)
 8003352:	f020 fa5d 	bl	8023810 <puts>
 8003356:	e7e0      	b.n	800331a <net_if_init+0xba>
    printf("\nConnected to AP %s\n",ssid);
 8003358:	9906      	ldr	r1, [sp, #24]
 800335a:	4810      	ldr	r0, [pc, #64]	; (800339c <net_if_init+0x13c>)
 800335c:	f020 f9bc 	bl	80236d8 <iprintf>
  return (wifiRes == WIFI_STATUS_OK)?0:-1;
 8003360:	4620      	mov	r0, r4
}
 8003362:	b012      	add	sp, #72	; 0x48
 8003364:	bd70      	pop	{r4, r5, r6, pc}
 8003366:	bf00      	nop
 8003368:	0802ebf4 	.word	0x0802ebf4
 800336c:	0802ec0e 	.word	0x0802ec0e
 8003370:	0802ec42 	.word	0x0802ec42
 8003374:	0802ecaf 	.word	0x0802ecaf
 8003378:	0802eccc 	.word	0x0802eccc
 800337c:	0802eced 	.word	0x0802eced
 8003380:	08031682 	.word	0x08031682
 8003384:	0803011c 	.word	0x0803011c
 8003388:	0802ed11 	.word	0x0802ed11
 800338c:	0802d949 	.word	0x0802d949
 8003390:	0802ed53 	.word	0x0802ed53
 8003394:	0802ed91 	.word	0x0802ed91
 8003398:	0802ed39 	.word	0x0802ed39
 800339c:	0802ed7c 	.word	0x0802ed7c

080033a0 <net_if_deinit>:


int net_if_deinit(void * if_ctxt)
{
  return 0;
}
 80033a0:	2000      	movs	r0, #0
 80033a2:	4770      	bx	lr

080033a4 <net_if_reinit>:


int net_if_reinit(void * if_ctxt)
{
 80033a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Ecn_t security_mode;
  WIFI_Status_t wifiRes;
  int wifiConnectCounter = 0;
  
  // wifiRes = WIFI_Disconnect(); // Disconnect() is not enough for the Inventek module which does not clean the previous state properly.
  wifiRes = WIFI_Init();
 80033a6:	f001 fd47 	bl	8004e38 <WIFI_Init>
  if (wifiRes != WIFI_STATUS_OK)
 80033aa:	b138      	cbz	r0, 80033bc <net_if_reinit+0x18>
  {
    msg_error("WIFI_Init() failed.\n");
 80033ac:	4917      	ldr	r1, [pc, #92]	; (800340c <net_if_reinit+0x68>)
 80033ae:	4818      	ldr	r0, [pc, #96]	; (8003410 <net_if_reinit+0x6c>)
 80033b0:	22af      	movs	r2, #175	; 0xaf
 80033b2:	f020 f991 	bl	80236d8 <iprintf>
 80033b6:	4817      	ldr	r0, [pc, #92]	; (8003414 <net_if_reinit+0x70>)
 80033b8:	f020 fa2a 	bl	8023810 <puts>
  }
  
  if (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) != HAL_OK)
 80033bc:	f10d 0207 	add.w	r2, sp, #7
 80033c0:	a903      	add	r1, sp, #12
 80033c2:	a802      	add	r0, sp, #8
 80033c4:	f7fe f8fc 	bl	80015c0 <checkWiFiCredentials>
 80033c8:	4604      	mov	r4, r0
 80033ca:	b9a8      	cbnz	r0, 80033f8 <net_if_reinit+0x54>
  }
  else
  {
    do 
    {
      printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80033cc:	4e12      	ldr	r6, [pc, #72]	; (8003418 <net_if_reinit+0x74>)
  int wifiConnectCounter = 0;
 80033ce:	4605      	mov	r5, r0
      printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80033d0:	3501      	adds	r5, #1
 80033d2:	9902      	ldr	r1, [sp, #8]
 80033d4:	462a      	mov	r2, r5
 80033d6:	2303      	movs	r3, #3
 80033d8:	4630      	mov	r0, r6
 80033da:	f020 f97d 	bl	80236d8 <iprintf>
      wifiRes = WIFI_Connect(ssid, psk, security_mode);
 80033de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80033e6:	f001 fd4b 	bl	8004e80 <WIFI_Connect>
      if (wifiRes == WIFI_STATUS_OK) break;
 80033ea:	b140      	cbz	r0, 80033fe <net_if_reinit+0x5a>
    } 
    while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80033ec:	2d03      	cmp	r5, #3
 80033ee:	d1ef      	bne.n	80033d0 <net_if_reinit+0x2c>
    {
      printf("\nRe-connected to AP %s\n",ssid);
    }
    else
    {
      printf("\nFailed to re-connect to AP %s\n",ssid);
 80033f0:	9902      	ldr	r1, [sp, #8]
 80033f2:	480a      	ldr	r0, [pc, #40]	; (800341c <net_if_reinit+0x78>)
 80033f4:	f020 f970 	bl	80236d8 <iprintf>
      ret = -1;
 80033f8:	f04f 34ff 	mov.w	r4, #4294967295
 80033fc:	e003      	b.n	8003406 <net_if_reinit+0x62>
      printf("\nRe-connected to AP %s\n",ssid);
 80033fe:	9902      	ldr	r1, [sp, #8]
 8003400:	4807      	ldr	r0, [pc, #28]	; (8003420 <net_if_reinit+0x7c>)
 8003402:	f020 f969 	bl	80236d8 <iprintf>
    }
  }
    
  return ret;
}
 8003406:	4620      	mov	r0, r4
 8003408:	b004      	add	sp, #16
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	080284a3 	.word	0x080284a3
 8003410:	0802da5d 	.word	0x0802da5d
 8003414:	0802edae 	.word	0x0802edae
 8003418:	0802ed53 	.word	0x0802ed53
 800341c:	0802edda 	.word	0x0802edda
 8003420:	0802edc2 	.word	0x0802edc2

08003424 <network_read>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes read on SUCCESS
 *         - -1 on FAILURE
 **/
int network_read(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8003424:	b510      	push	{r4, lr}
  int bytes;

  bytes = net_sock_recv((net_sockhnd_t) n->my_socket, buffer, len);
 8003426:	6800      	ldr	r0, [r0, #0]
 8003428:	f7fe fdbc 	bl	8001fa4 <net_sock_recv>
  if(bytes < 0)
 800342c:	1e04      	subs	r4, r0, #0
 800342e:	da0a      	bge.n	8003446 <network_read+0x22>
  {
    msg_error("net_sock_recv failed - %d\n", bytes);
 8003430:	4906      	ldr	r1, [pc, #24]	; (800344c <network_read+0x28>)
 8003432:	4807      	ldr	r0, [pc, #28]	; (8003450 <network_read+0x2c>)
 8003434:	22e1      	movs	r2, #225	; 0xe1
 8003436:	f020 f94f 	bl	80236d8 <iprintf>
 800343a:	4621      	mov	r1, r4
 800343c:	4805      	ldr	r0, [pc, #20]	; (8003454 <network_read+0x30>)
 800343e:	f020 f94b 	bl	80236d8 <iprintf>
    bytes = -1;
 8003442:	f04f 34ff 	mov.w	r4, #4294967295
  }

   return bytes;
}
 8003446:	4620      	mov	r0, r4
 8003448:	bd10      	pop	{r4, pc}
 800344a:	bf00      	nop
 800344c:	080284b4 	.word	0x080284b4
 8003450:	0802da5d 	.word	0x0802da5d
 8003454:	0802edfa 	.word	0x0802edfa

08003458 <network_write>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes written on SUCCESS
 *         - -1 on FAILURE
 **/
int network_write(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8003458:	b510      	push	{r4, lr}
  int rc;

  rc = net_sock_send((net_sockhnd_t) n->my_socket, buffer, len);
 800345a:	6800      	ldr	r0, [r0, #0]
 800345c:	f7fe fda8 	bl	8001fb0 <net_sock_send>
  if(rc < 0)
 8003460:	1e04      	subs	r4, r0, #0
 8003462:	da0a      	bge.n	800347a <network_write+0x22>
  {
    msg_error("net_sock_send failed - %d\n", rc);
 8003464:	4906      	ldr	r1, [pc, #24]	; (8003480 <network_write+0x28>)
 8003466:	4807      	ldr	r0, [pc, #28]	; (8003484 <network_write+0x2c>)
 8003468:	22f7      	movs	r2, #247	; 0xf7
 800346a:	f020 f935 	bl	80236d8 <iprintf>
 800346e:	4621      	mov	r1, r4
 8003470:	4805      	ldr	r0, [pc, #20]	; (8003488 <network_write+0x30>)
 8003472:	f020 f931 	bl	80236d8 <iprintf>
    rc = -1;
 8003476:	f04f 34ff 	mov.w	r4, #4294967295
  }

  return rc;
}
 800347a:	4620      	mov	r0, r4
 800347c:	bd10      	pop	{r4, pc}
 800347e:	bf00      	nop
 8003480:	080284c1 	.word	0x080284c1
 8003484:	0802da5d 	.word	0x0802da5d
 8003488:	0802ee15 	.word	0x0802ee15

0800348c <allpurposeMessageHandler>:
 *
 *  Note: No context handle is passed by the callback. Must rely on static variables.
 *        TODO: Maybe store couples of hander/contextHanders so that the context could
 *              be retrieved from the handler address. */
void allpurposeMessageHandler(MessageData* data)
{
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  snprintf(mqtt_msg, MIN(MQTT_MSG_BUFFER_SIZE, data->message->payloadlen + 1),
 800348e:	6803      	ldr	r3, [r0, #0]
 8003490:	4c39      	ldr	r4, [pc, #228]	; (8003578 <allpurposeMessageHandler+0xec>)
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	4a39      	ldr	r2, [pc, #228]	; (800357c <allpurposeMessageHandler+0xf0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	3101      	adds	r1, #1
 800349a:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
{
 800349e:	4605      	mov	r5, r0
  snprintf(mqtt_msg, MIN(MQTT_MSG_BUFFER_SIZE, data->message->payloadlen + 1),
 80034a0:	bf28      	it	cs
 80034a2:	f44f 7116 	movcs.w	r1, #600	; 0x258
 80034a6:	4620      	mov	r0, r4
 80034a8:	f020 fa00 	bl	80238ac <sniprintf>
           "%s", (char *)data->message->payload);
  msg_info("Received message: topic: %.*s content: %s.\n",
 80034ac:	6869      	ldr	r1, [r5, #4]
 80034ae:	4834      	ldr	r0, [pc, #208]	; (8003580 <allpurposeMessageHandler+0xf4>)
 80034b0:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
 80034b4:	4623      	mov	r3, r4
 80034b6:	f020 f90f 	bl	80236d8 <iprintf>
           data->topicName->lenstring.len, data->topicName->lenstring.data,
           mqtt_msg);

  cJSON *json = NULL;
  cJSON * root = cJSON_Parse(mqtt_msg);
 80034ba:	4620      	mov	r0, r4
 80034bc:	f01e fe76 	bl	80221ac <cJSON_Parse>

  json = cJSON_GetObjectItemCaseSensitive(root, "LedOn");
 80034c0:	4930      	ldr	r1, [pc, #192]	; (8003584 <allpurposeMessageHandler+0xf8>)
  cJSON * root = cJSON_Parse(mqtt_msg);
 80034c2:	4605      	mov	r5, r0
  json = cJSON_GetObjectItemCaseSensitive(root, "LedOn");
 80034c4:	f01e fe76 	bl	80221b4 <cJSON_GetObjectItemCaseSensitive>
  if (json != NULL)
 80034c8:	4607      	mov	r7, r0
 80034ca:	b180      	cbz	r0, 80034ee <allpurposeMessageHandler+0x62>
  {
    if (cJSON_IsBool(json) == true)
 80034cc:	f01e fe7b 	bl	80221c6 <cJSON_IsBool>
 80034d0:	2801      	cmp	r0, #1
 80034d2:	4606      	mov	r6, r0
 80034d4:	d131      	bne.n	800353a <allpurposeMessageHandler+0xae>
    {
      status_data.LedOn = (cJSON_IsTrue(json) == true);
 80034d6:	4638      	mov	r0, r7
 80034d8:	f01e fe6f 	bl	80221ba <cJSON_IsTrue>
 80034dc:	1e42      	subs	r2, r0, #1
 80034de:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <allpurposeMessageHandler+0xfc>)
 80034e0:	4250      	negs	r0, r2
 80034e2:	4150      	adcs	r0, r2
 80034e4:	7358      	strb	r0, [r3, #13]
      Led_SetState(status_data.LedOn);
 80034e6:	f000 fe51 	bl	800418c <Led_SetState>
      g_statusChanged = true;
 80034ea:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
    {
      msg_error("JSON parsing error of LedOn value.\n");
    }
  }

  json = cJSON_GetObjectItemCaseSensitive(root, "TelemetryInterval");
 80034ee:	4927      	ldr	r1, [pc, #156]	; (800358c <allpurposeMessageHandler+0x100>)
 80034f0:	4628      	mov	r0, r5
 80034f2:	f01e fe5f 	bl	80221b4 <cJSON_GetObjectItemCaseSensitive>
  if (json != NULL)
 80034f6:	4606      	mov	r6, r0
 80034f8:	b140      	cbz	r0, 800350c <allpurposeMessageHandler+0x80>
  {
    if (cJSON_IsNumber(json) == true)
 80034fa:	f01e fe6b 	bl	80221d4 <cJSON_IsNumber>
 80034fe:	2801      	cmp	r0, #1
 8003500:	d125      	bne.n	800354e <allpurposeMessageHandler+0xc2>
    {
      status_data.TelemetryInterval = json->valueint;
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <allpurposeMessageHandler+0xfc>)
 8003504:	6972      	ldr	r2, [r6, #20]
 8003506:	611a      	str	r2, [r3, #16]
      g_statusChanged = true;
 8003508:	f884 0258 	strb.w	r0, [r4, #600]	; 0x258
    {
      msg_error("JSON parsing error of TelemetryInterval value.\n");
    }
  }

  json = cJSON_GetObjectItemCaseSensitive(root, "Reboot");
 800350c:	4920      	ldr	r1, [pc, #128]	; (8003590 <allpurposeMessageHandler+0x104>)
 800350e:	4628      	mov	r0, r5
 8003510:	f01e fe50 	bl	80221b4 <cJSON_GetObjectItemCaseSensitive>
  if (json != NULL)
 8003514:	4606      	mov	r6, r0
 8003516:	b158      	cbz	r0, 8003530 <allpurposeMessageHandler+0xa4>
  {
    if (cJSON_IsBool(json) == true)
 8003518:	f01e fe55 	bl	80221c6 <cJSON_IsBool>
 800351c:	2801      	cmp	r0, #1
 800351e:	d120      	bne.n	8003562 <allpurposeMessageHandler+0xd6>
    {
      g_reboot = (cJSON_IsTrue(json) == true);
 8003520:	4630      	mov	r0, r6
 8003522:	f01e fe4a 	bl	80221ba <cJSON_IsTrue>
 8003526:	1e43      	subs	r3, r0, #1
 8003528:	4258      	negs	r0, r3
 800352a:	4158      	adcs	r0, r3
 800352c:	f884 0259 	strb.w	r0, [r4, #601]	; 0x259
    {
      msg_error("JSON parsing error of Reboot value.\n");
    }
  }

  cJSON_Delete(root);
 8003530:	4628      	mov	r0, r5
}
 8003532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cJSON_Delete(root);
 8003536:	f01e bc33 	b.w	8021da0 <cJSON_Delete>
      msg_error("JSON parsing error of LedOn value.\n");
 800353a:	4916      	ldr	r1, [pc, #88]	; (8003594 <allpurposeMessageHandler+0x108>)
 800353c:	4816      	ldr	r0, [pc, #88]	; (8003598 <allpurposeMessageHandler+0x10c>)
 800353e:	f240 1219 	movw	r2, #281	; 0x119
 8003542:	f020 f8c9 	bl	80236d8 <iprintf>
 8003546:	4815      	ldr	r0, [pc, #84]	; (800359c <allpurposeMessageHandler+0x110>)
 8003548:	f020 f962 	bl	8023810 <puts>
 800354c:	e7cf      	b.n	80034ee <allpurposeMessageHandler+0x62>
      msg_error("JSON parsing error of TelemetryInterval value.\n");
 800354e:	4911      	ldr	r1, [pc, #68]	; (8003594 <allpurposeMessageHandler+0x108>)
 8003550:	4811      	ldr	r0, [pc, #68]	; (8003598 <allpurposeMessageHandler+0x10c>)
 8003552:	f240 1227 	movw	r2, #295	; 0x127
 8003556:	f020 f8bf 	bl	80236d8 <iprintf>
 800355a:	4811      	ldr	r0, [pc, #68]	; (80035a0 <allpurposeMessageHandler+0x114>)
 800355c:	f020 f958 	bl	8023810 <puts>
 8003560:	e7d4      	b.n	800350c <allpurposeMessageHandler+0x80>
      msg_error("JSON parsing error of Reboot value.\n");
 8003562:	490c      	ldr	r1, [pc, #48]	; (8003594 <allpurposeMessageHandler+0x108>)
 8003564:	480c      	ldr	r0, [pc, #48]	; (8003598 <allpurposeMessageHandler+0x10c>)
 8003566:	f44f 729a 	mov.w	r2, #308	; 0x134
 800356a:	f020 f8b5 	bl	80236d8 <iprintf>
 800356e:	480d      	ldr	r0, [pc, #52]	; (80035a4 <allpurposeMessageHandler+0x118>)
 8003570:	f020 f94e 	bl	8023810 <puts>
 8003574:	e7dc      	b.n	8003530 <allpurposeMessageHandler+0xa4>
 8003576:	bf00      	nop
 8003578:	20000834 	.word	0x20000834
 800357c:	08031683 	.word	0x08031683
 8003580:	0802ee30 	.word	0x0802ee30
 8003584:	0802ee5c 	.word	0x0802ee5c
 8003588:	2000000c 	.word	0x2000000c
 800358c:	0802ee85 	.word	0x0802ee85
 8003590:	0802eec6 	.word	0x0802eec6
 8003594:	080284cf 	.word	0x080284cf
 8003598:	0802da5d 	.word	0x0802da5d
 800359c:	0802ee62 	.word	0x0802ee62
 80035a0:	0802ee97 	.word	0x0802ee97
 80035a4:	0802eecd 	.word	0x0802eecd

080035a8 <cloud_device_enter_credentials>:
{
 80035a8:	b500      	push	{lr}
 80035aa:	b0ef      	sub	sp, #444	; 0x1bc
  memset(&iot_config, 0, sizeof(iot_config_t));
 80035ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80035b0:	2100      	movs	r1, #0
 80035b2:	4668      	mov	r0, sp
 80035b4:	f01e ff8c 	bl	80224d0 <memset>
  printf("\nEnter the connection string of your device:\n"
 80035b8:	480e      	ldr	r0, [pc, #56]	; (80035f4 <cloud_device_enter_credentials+0x4c>)
 80035ba:	f020 f929 	bl	8023810 <puts>
  getInputString(iot_config.device_name, USER_CONF_DEVICE_NAME_LENGTH);
 80035be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80035c2:	a802      	add	r0, sp, #8
 80035c4:	f7fd ffc0 	bl	8001548 <getInputString>
  msg_info("read: --->\n%s\n<---\n", iot_config.device_name);
 80035c8:	480b      	ldr	r0, [pc, #44]	; (80035f8 <cloud_device_enter_credentials+0x50>)
 80035ca:	a902      	add	r1, sp, #8
 80035cc:	f020 f884 	bl	80236d8 <iprintf>
  if(setIoTDeviceConfig(&iot_config) != 0)
 80035d0:	4668      	mov	r0, sp
 80035d2:	f7fe fa01 	bl	80019d8 <setIoTDeviceConfig>
 80035d6:	b148      	cbz	r0, 80035ec <cloud_device_enter_credentials+0x44>
    msg_error("Failed programming the IoT device configuration to Flash.\n");
 80035d8:	4908      	ldr	r1, [pc, #32]	; (80035fc <cloud_device_enter_credentials+0x54>)
 80035da:	4809      	ldr	r0, [pc, #36]	; (8003600 <cloud_device_enter_credentials+0x58>)
 80035dc:	22b2      	movs	r2, #178	; 0xb2
 80035de:	f020 f87b 	bl	80236d8 <iprintf>
 80035e2:	4808      	ldr	r0, [pc, #32]	; (8003604 <cloud_device_enter_credentials+0x5c>)
 80035e4:	f020 f914 	bl	8023810 <puts>
    ret = -1;
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80035ec:	b06f      	add	sp, #444	; 0x1bc
 80035ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80035f2:	bf00      	nop
 80035f4:	0802eef1 	.word	0x0802eef1
 80035f8:	0802dda6 	.word	0x0802dda6
 80035fc:	080284e8 	.word	0x080284e8
 8003600:	0802da5d 	.word	0x0802da5d
 8003604:	0802eff9 	.word	0x0802eff9

08003608 <stiot_publish>:

/**
 * MQTT publish API abstraction called by the metering loop.
 */
int stiot_publish(void * mqtt_ctxt, const char * topic, const char * msg)
{
 8003608:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800360a:	4614      	mov	r4, r2
 800360c:	4606      	mov	r6, r0
  int rc;
  MQTTMessage mqmsg;
  memset(&mqmsg, 0, sizeof(MQTTMessage));
 800360e:	2210      	movs	r2, #16
{
 8003610:	460d      	mov	r5, r1
  memset(&mqmsg, 0, sizeof(MQTTMessage));
 8003612:	4668      	mov	r0, sp
 8003614:	2100      	movs	r1, #0
 8003616:	f01e ff5b 	bl	80224d0 <memset>
  mqmsg.qos = QOS0;
 800361a:	2300      	movs	r3, #0
  mqmsg.payload = (char *) msg;
  mqmsg.payloadlen = strlen(msg);
 800361c:	4620      	mov	r0, r4
  mqmsg.qos = QOS0;
 800361e:	f88d 3000 	strb.w	r3, [sp]
  mqmsg.payload = (char *) msg;
 8003622:	9402      	str	r4, [sp, #8]
  mqmsg.payloadlen = strlen(msg);
 8003624:	f7fc fdde 	bl	80001e4 <strlen>

  rc = MQTTPublish(mqtt_ctxt, topic, &mqmsg);
 8003628:	466a      	mov	r2, sp
  mqmsg.payloadlen = strlen(msg);
 800362a:	9003      	str	r0, [sp, #12]
  rc = MQTTPublish(mqtt_ctxt, topic, &mqmsg);
 800362c:	4629      	mov	r1, r5
 800362e:	4630      	mov	r0, r6
 8003630:	f009 fc03 	bl	800ce3a <MQTTPublish>
  if (rc != MQSUCCESS)
 8003634:	4604      	mov	r4, r0
 8003636:	b150      	cbz	r0, 800364e <stiot_publish+0x46>
  {
    msg_error("Failed publishing %s on %s\n", (char *)(mqmsg.payload), topic);
 8003638:	4906      	ldr	r1, [pc, #24]	; (8003654 <stiot_publish+0x4c>)
 800363a:	4807      	ldr	r0, [pc, #28]	; (8003658 <stiot_publish+0x50>)
 800363c:	f240 322b 	movw	r2, #811	; 0x32b
 8003640:	f020 f84a 	bl	80236d8 <iprintf>
 8003644:	9902      	ldr	r1, [sp, #8]
 8003646:	4805      	ldr	r0, [pc, #20]	; (800365c <stiot_publish+0x54>)
 8003648:	462a      	mov	r2, r5
 800364a:	f020 f845 	bl	80236d8 <iprintf>
  }
  return rc;
}
 800364e:	4620      	mov	r0, r4
 8003650:	b004      	add	sp, #16
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	08028507 	.word	0x08028507
 8003658:	0802da5d 	.word	0x0802da5d
 800365c:	0802f033 	.word	0x0802f033

08003660 <string_allocate_from_token>:

/** Look for a 'key=value' pair in the passed configuration string, and return a new buffer
 *  holding the 'value' field.
 */
int string_allocate_from_token(char ** pDestString, char * tokenName, const char * sourceString)
{
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	4607      	mov	r7, r0
  int ret = 0;
  char * key = NULL;
  char * value = NULL;

  if ((key = strstr(sourceString, tokenName)) != NULL)
 8003664:	4610      	mov	r0, r2
{
 8003666:	460c      	mov	r4, r1
  if ((key = strstr(sourceString, tokenName)) != NULL)
 8003668:	f020 fa1f 	bl	8023aaa <strstr>
 800366c:	4605      	mov	r5, r0
 800366e:	b1b0      	cbz	r0, 800369e <string_allocate_from_token+0x3e>
  {
    int size = 0;
    value = key + strlen(tokenName);    /* '=' key=value separator is part of tokenName. */
 8003670:	4620      	mov	r0, r4
 8003672:	f7fc fdb7 	bl	80001e4 <strlen>
 8003676:	4405      	add	r5, r0
    if ((key = strstr(value, ";")) != NULL)
 8003678:	213b      	movs	r1, #59	; 0x3b
 800367a:	4628      	mov	r0, r5
 800367c:	f020 f9db 	bl	8023a36 <strchr>
 8003680:	4604      	mov	r4, r0
 8003682:	b100      	cbz	r0, 8003686 <string_allocate_from_token+0x26>
    {
      size = key - value;
 8003684:	1b44      	subs	r4, r0, r5
    }
    *pDestString = malloc(size + 1);
 8003686:	1c60      	adds	r0, r4, #1
 8003688:	f01e fedc 	bl	8022444 <malloc>
 800368c:	4606      	mov	r6, r0
 800368e:	6038      	str	r0, [r7, #0]
    if (*pDestString != NULL)
 8003690:	b138      	cbz	r0, 80036a2 <string_allocate_from_token+0x42>
    {
      memcpy(*pDestString, value, size);
 8003692:	4622      	mov	r2, r4
 8003694:	4629      	mov	r1, r5
 8003696:	f01e fef3 	bl	8022480 <memcpy>
      (*pDestString)[size] = '\0';
 800369a:	2300      	movs	r3, #0
 800369c:	5533      	strb	r3, [r6, r4]
      msg_error("Allocation failed\n");
    }
  }

  return ret;
}
 800369e:	2000      	movs	r0, #0
 80036a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      msg_error("Allocation failed\n");
 80036a2:	4905      	ldr	r1, [pc, #20]	; (80036b8 <string_allocate_from_token+0x58>)
 80036a4:	4805      	ldr	r0, [pc, #20]	; (80036bc <string_allocate_from_token+0x5c>)
 80036a6:	f240 324a 	movw	r2, #842	; 0x34a
 80036aa:	f020 f815 	bl	80236d8 <iprintf>
 80036ae:	4804      	ldr	r0, [pc, #16]	; (80036c0 <string_allocate_from_token+0x60>)
 80036b0:	f020 f8ae 	bl	8023810 <puts>
 80036b4:	e7f3      	b.n	800369e <string_allocate_from_token+0x3e>
 80036b6:	bf00      	nop
 80036b8:	08028515 	.word	0x08028515
 80036bc:	0802da5d 	.word	0x0802da5d
 80036c0:	0802f04f 	.word	0x0802f04f

080036c4 <free_device_config>:


/** Free a device_config_t allocated by parse_and_fill_device_config().
 */
void free_device_config(device_config_t * config)
{
 80036c4:	b510      	push	{r4, lr}
  if (config != NULL)
 80036c6:	4604      	mov	r4, r0
 80036c8:	b1e0      	cbz	r0, 8003704 <free_device_config+0x40>
  {
    if (config->HostName != NULL) free(config->HostName);
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	b108      	cbz	r0, 80036d2 <free_device_config+0xe>
 80036ce:	f01e fec1 	bl	8022454 <free>
    if (config->HostPort != NULL) free(config->HostPort);
 80036d2:	6860      	ldr	r0, [r4, #4]
 80036d4:	b108      	cbz	r0, 80036da <free_device_config+0x16>
 80036d6:	f01e febd 	bl	8022454 <free>
    if (config->ConnSecurity != NULL) free(config->ConnSecurity);
 80036da:	68a0      	ldr	r0, [r4, #8]
 80036dc:	b108      	cbz	r0, 80036e2 <free_device_config+0x1e>
 80036de:	f01e feb9 	bl	8022454 <free>
    if (config->MQClientId != NULL) free(config->MQClientId);
 80036e2:	68e0      	ldr	r0, [r4, #12]
 80036e4:	b108      	cbz	r0, 80036ea <free_device_config+0x26>
 80036e6:	f01e feb5 	bl	8022454 <free>
    if (config->MQUserName != NULL) free(config->MQUserName);
 80036ea:	6920      	ldr	r0, [r4, #16]
 80036ec:	b108      	cbz	r0, 80036f2 <free_device_config+0x2e>
 80036ee:	f01e feb1 	bl	8022454 <free>
    if (config->MQUserPwd != NULL) free(config->MQUserPwd);
 80036f2:	6960      	ldr	r0, [r4, #20]
 80036f4:	b108      	cbz	r0, 80036fa <free_device_config+0x36>
 80036f6:	f01e fead 	bl	8022454 <free>
#ifdef LITMUS_LOOP
    if (config->LoopTopicId != NULL) free(config->LoopTopicId);
#endif

    free(config);
 80036fa:	4620      	mov	r0, r4
  }
  else
  {
    msg_warning("Attemped to free a non-allocated config structure.\n");
  }
}
 80036fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    free(config);
 8003700:	f01e bea8 	b.w	8022454 <free>
}
 8003704:	bd10      	pop	{r4, pc}
	...

08003708 <parse_and_fill_device_config>:
{
 8003708:	e92d 4a38 	stmdb	sp!, {r3, r4, r5, r9, fp, lr}
 800370c:	4604      	mov	r4, r0
  if (strlen(string) > USER_CONF_DEVICE_NAME_LENGTH)
 800370e:	4608      	mov	r0, r1
{
 8003710:	468b      	mov	fp, r1
  if (strlen(string) > USER_CONF_DEVICE_NAME_LENGTH)
 8003712:	f7fc fd67 	bl	80001e4 <strlen>
 8003716:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 800371a:	d90d      	bls.n	8003738 <parse_and_fill_device_config+0x30>
    msg_error("Cannot parse the configuration string:  It is not null-terminated!\n");
 800371c:	492c      	ldr	r1, [pc, #176]	; (80037d0 <parse_and_fill_device_config+0xc8>)
 800371e:	482d      	ldr	r0, [pc, #180]	; (80037d4 <parse_and_fill_device_config+0xcc>)
 8003720:	f240 325e 	movw	r2, #862	; 0x35e
 8003724:	f01f ffd8 	bl	80236d8 <iprintf>
 8003728:	482b      	ldr	r0, [pc, #172]	; (80037d8 <parse_and_fill_device_config+0xd0>)
      msg_error("Null parameter\n");
 800372a:	f020 f871 	bl	8023810 <puts>
  int ret = -1;
 800372e:	f04f 35ff 	mov.w	r5, #4294967295
}
 8003732:	4628      	mov	r0, r5
 8003734:	e8bd 8a38 	ldmia.w	sp!, {r3, r4, r5, r9, fp, pc}
    if (pConfig == NULL)
 8003738:	b93c      	cbnz	r4, 800374a <parse_and_fill_device_config+0x42>
      msg_error("Null parameter\n");
 800373a:	4925      	ldr	r1, [pc, #148]	; (80037d0 <parse_and_fill_device_config+0xc8>)
 800373c:	4825      	ldr	r0, [pc, #148]	; (80037d4 <parse_and_fill_device_config+0xcc>)
 800373e:	f44f 7259 	mov.w	r2, #868	; 0x364
 8003742:	f01f ffc9 	bl	80236d8 <iprintf>
 8003746:	4825      	ldr	r0, [pc, #148]	; (80037dc <parse_and_fill_device_config+0xd4>)
 8003748:	e7ef      	b.n	800372a <parse_and_fill_device_config+0x22>
      config = malloc(sizeof(device_config_t));
 800374a:	2018      	movs	r0, #24
 800374c:	f01e fe7a 	bl	8022444 <malloc>
      memset(config, 0, sizeof(device_config_t));
 8003750:	2218      	movs	r2, #24
      config = malloc(sizeof(device_config_t));
 8003752:	4681      	mov	r9, r0
      memset(config, 0, sizeof(device_config_t));
 8003754:	2100      	movs	r1, #0
 8003756:	f01e febb 	bl	80224d0 <memset>
      ret = string_allocate_from_token(&config->HostName, "HostName=", string);
 800375a:	4921      	ldr	r1, [pc, #132]	; (80037e0 <parse_and_fill_device_config+0xd8>)
 800375c:	465a      	mov	r2, fp
 800375e:	4648      	mov	r0, r9
 8003760:	f7ff ff7e 	bl	8003660 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 8003764:	491f      	ldr	r1, [pc, #124]	; (80037e4 <parse_and_fill_device_config+0xdc>)
      ret = string_allocate_from_token(&config->HostName, "HostName=", string);
 8003766:	4605      	mov	r5, r0
      ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 8003768:	465a      	mov	r2, fp
 800376a:	f109 0004 	add.w	r0, r9, #4
 800376e:	f7ff ff77 	bl	8003660 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 8003772:	491d      	ldr	r1, [pc, #116]	; (80037e8 <parse_and_fill_device_config+0xe0>)
      ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 8003774:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 8003776:	465a      	mov	r2, fp
 8003778:	f109 0008 	add.w	r0, r9, #8
 800377c:	f7ff ff70 	bl	8003660 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 8003780:	491a      	ldr	r1, [pc, #104]	; (80037ec <parse_and_fill_device_config+0xe4>)
      ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 8003782:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 8003784:	465a      	mov	r2, fp
 8003786:	f109 000c 	add.w	r0, r9, #12
 800378a:	f7ff ff69 	bl	8003660 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 800378e:	4918      	ldr	r1, [pc, #96]	; (80037f0 <parse_and_fill_device_config+0xe8>)
      ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 8003790:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 8003792:	465a      	mov	r2, fp
 8003794:	f109 0010 	add.w	r0, r9, #16
 8003798:	f7ff ff62 	bl	8003660 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->MQUserPwd, "MQUserPwd=", string);
 800379c:	4915      	ldr	r1, [pc, #84]	; (80037f4 <parse_and_fill_device_config+0xec>)
      ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 800379e:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->MQUserPwd, "MQUserPwd=", string);
 80037a0:	465a      	mov	r2, fp
 80037a2:	f109 0014 	add.w	r0, r9, #20
 80037a6:	f7ff ff5b 	bl	8003660 <string_allocate_from_token>
      if (ret != 0)
 80037aa:	4305      	orrs	r5, r0
 80037ac:	d00c      	beq.n	80037c8 <parse_and_fill_device_config+0xc0>
        msg_error("Failed parsing the device configuration string.\n");
 80037ae:	4908      	ldr	r1, [pc, #32]	; (80037d0 <parse_and_fill_device_config+0xc8>)
 80037b0:	4808      	ldr	r0, [pc, #32]	; (80037d4 <parse_and_fill_device_config+0xcc>)
 80037b2:	f240 3277 	movw	r2, #887	; 0x377
 80037b6:	f01f ff8f 	bl	80236d8 <iprintf>
 80037ba:	480f      	ldr	r0, [pc, #60]	; (80037f8 <parse_and_fill_device_config+0xf0>)
 80037bc:	f020 f828 	bl	8023810 <puts>
        free_device_config(config);
 80037c0:	4648      	mov	r0, r9
 80037c2:	f7ff ff7f 	bl	80036c4 <free_device_config>
 80037c6:	e7b4      	b.n	8003732 <parse_and_fill_device_config+0x2a>
        *pConfig = config;
 80037c8:	f8c4 9000 	str.w	r9, [r4]
  return ret;
 80037cc:	e7b1      	b.n	8003732 <parse_and_fill_device_config+0x2a>
 80037ce:	bf00      	nop
 80037d0:	08028530 	.word	0x08028530
 80037d4:	0802da5d 	.word	0x0802da5d
 80037d8:	0802f061 	.word	0x0802f061
 80037dc:	0802f0a4 	.word	0x0802f0a4
 80037e0:	0802f0b3 	.word	0x0802f0b3
 80037e4:	0802f0bd 	.word	0x0802f0bd
 80037e8:	0802f0c7 	.word	0x0802f0c7
 80037ec:	0802f0d5 	.word	0x0802f0d5
 80037f0:	0802f0e1 	.word	0x0802f0e1
 80037f4:	0802f0ed 	.word	0x0802f0ed
 80037f8:	0802f0f8 	.word	0x0802f0f8

080037fc <app_needs_device_keypair>:
{
 80037fc:	b513      	push	{r0, r1, r4, lr}
  const char * config_string = NULL;
 80037fe:	2300      	movs	r3, #0
  if(getIoTDeviceConfig(&config_string) != 0)
 8003800:	4668      	mov	r0, sp
  device_config_t * device_config = NULL;
 8003802:	e9cd 3300 	strd	r3, r3, [sp]
  if(getIoTDeviceConfig(&config_string) != 0)
 8003806:	f7fe f913 	bl	8001a30 <getIoTDeviceConfig>
 800380a:	b150      	cbz	r0, 8003822 <app_needs_device_keypair+0x26>
    msg_error("Failed retrieving the device configuration string.\n");
 800380c:	4911      	ldr	r1, [pc, #68]	; (8003854 <app_needs_device_keypair+0x58>)
 800380e:	4812      	ldr	r0, [pc, #72]	; (8003858 <app_needs_device_keypair+0x5c>)
 8003810:	22c0      	movs	r2, #192	; 0xc0
 8003812:	f01f ff61 	bl	80236d8 <iprintf>
 8003816:	4811      	ldr	r0, [pc, #68]	; (800385c <app_needs_device_keypair+0x60>)
      msg_error("Could not parse the connection security settings from the configuration string.\n");
 8003818:	f01f fffa 	bl	8023810 <puts>
  conn_sec_t security = CONN_SEC_UNDEFINED;
 800381c:	f04f 34ff 	mov.w	r4, #4294967295
 8003820:	e00c      	b.n	800383c <app_needs_device_keypair+0x40>
    if (parse_and_fill_device_config(&device_config, config_string) == 0)
 8003822:	9900      	ldr	r1, [sp, #0]
 8003824:	a801      	add	r0, sp, #4
 8003826:	f7ff ff6f 	bl	8003708 <parse_and_fill_device_config>
 800382a:	b960      	cbnz	r0, 8003846 <app_needs_device_keypair+0x4a>
      security = (conn_sec_t) atoi(device_config->ConnSecurity);
 800382c:	9b01      	ldr	r3, [sp, #4]
 800382e:	6898      	ldr	r0, [r3, #8]
 8003830:	f01e fcd7 	bl	80221e2 <atoi>
 8003834:	b244      	sxtb	r4, r0
      free_device_config(device_config);
 8003836:	9801      	ldr	r0, [sp, #4]
 8003838:	f7ff ff44 	bl	80036c4 <free_device_config>
}
 800383c:	1ee3      	subs	r3, r4, #3
 800383e:	4258      	negs	r0, r3
 8003840:	4158      	adcs	r0, r3
 8003842:	b002      	add	sp, #8
 8003844:	bd10      	pop	{r4, pc}
      msg_error("Could not parse the connection security settings from the configuration string.\n");
 8003846:	4903      	ldr	r1, [pc, #12]	; (8003854 <app_needs_device_keypair+0x58>)
 8003848:	4803      	ldr	r0, [pc, #12]	; (8003858 <app_needs_device_keypair+0x5c>)
 800384a:	22cb      	movs	r2, #203	; 0xcb
 800384c:	f01f ff44 	bl	80236d8 <iprintf>
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <app_needs_device_keypair+0x64>)
 8003852:	e7e1      	b.n	8003818 <app_needs_device_keypair+0x1c>
 8003854:	0802854d 	.word	0x0802854d
 8003858:	0802da5d 	.word	0x0802da5d
 800385c:	0802f128 	.word	0x0802f128
 8003860:	0802f15b 	.word	0x0802f15b

08003864 <comp_left_ms>:
 * @param   In:   now       Current index.
 * @param   In:   timeout   Target index.
 * @retval  Number of units from now to target.
 */
int32_t comp_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
 8003864:	b510      	push	{r4, lr}
  int32_t ret = 0;
  uint32_t wrap_end = 0;

  if (now < init)
 8003866:	4281      	cmp	r1, r0
  { /* Timer wrap-around detected */
    /* printf("Timer: wrap-around detected from %d to %d\n", init, now); */
    wrap_end = UINT32_MAX - init;
  }
  ret = wrap_end - (now - init) + timeout;
 8003868:	4402      	add	r2, r0
    wrap_end = UINT32_MAX - init;
 800386a:	bf34      	ite	cc
 800386c:	43c4      	mvncc	r4, r0
  uint32_t wrap_end = 0;
 800386e:	2400      	movcs	r4, #0
  ret = wrap_end - (now - init) + timeout;
 8003870:	1a53      	subs	r3, r2, r1

  return ret;
}
 8003872:	1918      	adds	r0, r3, r4
 8003874:	bd10      	pop	{r4, pc}
	...

08003878 <genericmqtt_client_XCube_sample_run>:
{
 8003878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387c:	ed2d 8b02 	vpush	{d8}
  g_continueRunning = true;
 8003880:	4c87      	ldr	r4, [pc, #540]	; (8003aa0 <genericmqtt_client_XCube_sample_run+0x228>)
  memset(&pub_data, 0, sizeof(pub_data));
 8003882:	4888      	ldr	r0, [pc, #544]	; (8003aa4 <genericmqtt_client_XCube_sample_run+0x22c>)
{
 8003884:	b0d9      	sub	sp, #356	; 0x164
  const char * connectionString   = NULL;
 8003886:	2100      	movs	r1, #0
  g_continueRunning = true;
 8003888:	2301      	movs	r3, #1
  memset(&pub_data, 0, sizeof(pub_data));
 800388a:	2240      	movs	r2, #64	; 0x40
  device_config_t * device_config = NULL;
 800388c:	e9cd 1118 	strd	r1, r1, [sp, #96]	; 0x60
  const char * device_cert  = NULL;
 8003890:	e9cd 111a 	strd	r1, r1, [sp, #104]	; 0x68
  const char * device_key   = NULL;
 8003894:	911c      	str	r1, [sp, #112]	; 0x70
  g_continueRunning = true;
 8003896:	f884 325a 	strb.w	r3, [r4, #602]	; 0x25a
  g_publishData     = false;
 800389a:	f884 125b 	strb.w	r1, [r4, #603]	; 0x25b
  g_statusChanged   = true;
 800389e:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
  g_reboot          = false;
 80038a2:	f884 1259 	strb.w	r1, [r4, #601]	; 0x259
  g_connection_needed_score = 1;
 80038a6:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
  memset(&pub_data, 0, sizeof(pub_data));
 80038aa:	f01e fe11 	bl	80224d0 <memset>
  ret = platform_init();
 80038ae:	f7fd fc31 	bl	8001114 <platform_init>
  if (ret != 0)
 80038b2:	b318      	cbz	r0, 80038fc <genericmqtt_client_XCube_sample_run+0x84>
    msg_error("Failed to initialize the platform.\n");
 80038b4:	497c      	ldr	r1, [pc, #496]	; (8003aa8 <genericmqtt_client_XCube_sample_run+0x230>)
 80038b6:	487d      	ldr	r0, [pc, #500]	; (8003aac <genericmqtt_client_XCube_sample_run+0x234>)
 80038b8:	f240 125b 	movw	r2, #347	; 0x15b
 80038bc:	f01f ff0c 	bl	80236d8 <iprintf>
 80038c0:	487b      	ldr	r0, [pc, #492]	; (8003ab0 <genericmqtt_client_XCube_sample_run+0x238>)
 80038c2:	f01f ffa5 	bl	8023810 <puts>
    msg_error("Cannot retrieve the connection string from the user configuration storage.\n");
 80038c6:	4978      	ldr	r1, [pc, #480]	; (8003aa8 <genericmqtt_client_XCube_sample_run+0x230>)
 80038c8:	4878      	ldr	r0, [pc, #480]	; (8003aac <genericmqtt_client_XCube_sample_run+0x234>)
 80038ca:	f240 1267 	movw	r2, #359	; 0x167
 80038ce:	f01f ff03 	bl	80236d8 <iprintf>
 80038d2:	4878      	ldr	r0, [pc, #480]	; (8003ab4 <genericmqtt_client_XCube_sample_run+0x23c>)
 80038d4:	f01f ff9c 	bl	8023810 <puts>
  free_device_config(device_config);
 80038d8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80038da:	f7ff fef3 	bl	80036c4 <free_device_config>
  platform_deinit();
 80038de:	f7fd fcfb 	bl	80012d8 <platform_deinit>
  if(g_reboot == true)
 80038e2:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 80038e6:	b123      	cbz	r3, 80038f2 <genericmqtt_client_XCube_sample_run+0x7a>
    msg_info("Calling HAL_NVIC_SystemReset()\n");
 80038e8:	4873      	ldr	r0, [pc, #460]	; (8003ab8 <genericmqtt_client_XCube_sample_run+0x240>)
 80038ea:	f01f ff91 	bl	8023810 <puts>
    HAL_NVIC_SystemReset();
 80038ee:	f005 fa0b 	bl	8008d08 <HAL_NVIC_SystemReset>
}
 80038f2:	b059      	add	sp, #356	; 0x164
 80038f4:	ecbd 8b02 	vpop	{d8}
 80038f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = (getIoTDeviceConfig(&connectionString) != 0);
 80038fc:	a818      	add	r0, sp, #96	; 0x60
 80038fe:	f7fe f897 	bl	8001a30 <getIoTDeviceConfig>
    ret |= (parse_and_fill_device_config(&device_config, connectionString) != 0);
 8003902:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret = (getIoTDeviceConfig(&connectionString) != 0);
 8003904:	4605      	mov	r5, r0
    ret |= (parse_and_fill_device_config(&device_config, connectionString) != 0);
 8003906:	a819      	add	r0, sp, #100	; 0x64
 8003908:	f7ff fefe 	bl	8003708 <parse_and_fill_device_config>
    connection_security = (conn_sec_t) atoi(device_config->ConnSecurity);
 800390c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800390e:	4305      	orrs	r5, r0
 8003910:	6898      	ldr	r0, [r3, #8]
 8003912:	f01e fc66 	bl	80221e2 <atoi>
 8003916:	fa4f f880 	sxtb.w	r8, r0
  if (ret != 0)
 800391a:	2d00      	cmp	r5, #0
 800391c:	d1d3      	bne.n	80038c6 <genericmqtt_client_XCube_sample_run+0x4e>
    net_macaddr_t mac = { 0 };
 800391e:	4b67      	ldr	r3, [pc, #412]	; (8003abc <genericmqtt_client_XCube_sample_run+0x244>)
    if (net_get_mac_address(hnet, &mac) == NET_OK)
 8003920:	4d67      	ldr	r5, [pc, #412]	; (8003ac0 <genericmqtt_client_XCube_sample_run+0x248>)
    net_macaddr_t mac = { 0 };
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	901e      	str	r0, [sp, #120]	; 0x78
 8003926:	889b      	ldrh	r3, [r3, #4]
    if (net_get_mac_address(hnet, &mac) == NET_OK)
 8003928:	6828      	ldr	r0, [r5, #0]
    net_macaddr_t mac = { 0 };
 800392a:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if (net_get_mac_address(hnet, &mac) == NET_OK)
 800392e:	a91e      	add	r1, sp, #120	; 0x78
 8003930:	f7fe fa3e 	bl	8001db0 <net_get_mac_address>
 8003934:	46ab      	mov	fp, r5
 8003936:	2800      	cmp	r0, #0
 8003938:	d172      	bne.n	8003a20 <genericmqtt_client_XCube_sample_run+0x1a8>
      snprintf(status_data.mac, MODEL_MAC_SIZE - 1, "%02X%02X%02X%02X%02X%02X",
 800393a:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 800393e:	9304      	str	r3, [sp, #16]
 8003940:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8003944:	9303      	str	r3, [sp, #12]
 8003946:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800394a:	9302      	str	r3, [sp, #8]
 800394c:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	4a5a      	ldr	r2, [pc, #360]	; (8003ac4 <genericmqtt_client_XCube_sample_run+0x24c>)
 800395a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800395e:	485a      	ldr	r0, [pc, #360]	; (8003ac8 <genericmqtt_client_XCube_sample_run+0x250>)
 8003960:	210c      	movs	r1, #12
 8003962:	f01f ffa3 	bl	80238ac <sniprintf>
    strncpy(pub_data.mac, status_data.mac, MODEL_MAC_SIZE - 1);
 8003966:	4f58      	ldr	r7, [pc, #352]	; (8003ac8 <genericmqtt_client_XCube_sample_run+0x250>)
 8003968:	484e      	ldr	r0, [pc, #312]	; (8003aa4 <genericmqtt_client_XCube_sample_run+0x22c>)
        msg_error("net_sock_destroy() failed.\n");
 800396a:	4e4f      	ldr	r6, [pc, #316]	; (8003aa8 <genericmqtt_client_XCube_sample_run+0x230>)
    strncpy(pub_data.mac, status_data.mac, MODEL_MAC_SIZE - 1);
 800396c:	220c      	movs	r2, #12
 800396e:	4639      	mov	r1, r7
 8003970:	f020 f888 	bl	8023a84 <strncpy>
    status_data.TelemetryInterval = MODEL_DEFAULT_TELEMETRYINTERVAL;
 8003974:	230f      	movs	r3, #15
 8003976:	f1b8 0f00 	cmp.w	r8, #0
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	bf0c      	ite	eq
 800397e:	2301      	moveq	r3, #1
 8003980:	2302      	movne	r3, #2
 8003982:	ee08 3a10 	vmov	s16, r3
      if ( (net_get_ip_address(hnet, &ip) == NET_ERR) || (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) )
 8003986:	f8db 0000 	ldr.w	r0, [fp]
 800398a:	a923      	add	r1, sp, #140	; 0x8c
 800398c:	f7fe f9e0 	bl	8001d50 <net_get_ip_address>
 8003990:	3001      	adds	r0, #1
 8003992:	d04b      	beq.n	8003a2c <genericmqtt_client_XCube_sample_run+0x1b4>
 8003994:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003998:	2b03      	cmp	r3, #3
 800399a:	dc6a      	bgt.n	8003a72 <genericmqtt_client_XCube_sample_run+0x1fa>
      ret = net_sock_create(hnet, &socket, (connection_security == CONN_SEC_NONE) ? NET_PROTO_TCP :NET_PROTO_TLS);
 800399c:	ee18 2a10 	vmov	r2, s16
 80039a0:	f8db 0000 	ldr.w	r0, [fp]
 80039a4:	a91d      	add	r1, sp, #116	; 0x74
 80039a6:	f7fe fa2d 	bl	8001e04 <net_sock_create>
      if (ret != NET_OK)
 80039aa:	4605      	mov	r5, r0
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d06d      	beq.n	8003a8c <genericmqtt_client_XCube_sample_run+0x214>
        msg_error("Could not create the socket.\n");
 80039b0:	483e      	ldr	r0, [pc, #248]	; (8003aac <genericmqtt_client_XCube_sample_run+0x234>)
 80039b2:	f240 1299 	movw	r2, #409	; 0x199
 80039b6:	4631      	mov	r1, r6
 80039b8:	f01f fe8e 	bl	80236d8 <iprintf>
 80039bc:	4843      	ldr	r0, [pc, #268]	; (8003acc <genericmqtt_client_XCube_sample_run+0x254>)
 80039be:	f01f ff27 	bl	8023810 <puts>
        msg_error("Could not retrieve the security connection settings and set the socket options.\n");
 80039c2:	483a      	ldr	r0, [pc, #232]	; (8003aac <genericmqtt_client_XCube_sample_run+0x234>)
 80039c4:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80039c8:	4631      	mov	r1, r6
 80039ca:	f01f fe85 	bl	80236d8 <iprintf>
 80039ce:	4840      	ldr	r0, [pc, #256]	; (8003ad0 <genericmqtt_client_XCube_sample_run+0x258>)
 80039d0:	f01f ff1e 	bl	8023810 <puts>
        msg_error("Could not open the socket at %s port %d.\n", device_config->HostName, atoi(device_config->HostPort));
 80039d4:	f240 12c7 	movw	r2, #455	; 0x1c7
 80039d8:	4631      	mov	r1, r6
 80039da:	4834      	ldr	r0, [pc, #208]	; (8003aac <genericmqtt_client_XCube_sample_run+0x234>)
 80039dc:	f01f fe7c 	bl	80236d8 <iprintf>
 80039e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6858      	ldr	r0, [r3, #4]
 80039e6:	9116      	str	r1, [sp, #88]	; 0x58
 80039e8:	f01e fbfb 	bl	80221e2 <atoi>
 80039ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80039ee:	4602      	mov	r2, r0
 80039f0:	4838      	ldr	r0, [pc, #224]	; (8003ad4 <genericmqtt_client_XCube_sample_run+0x25c>)
 80039f2:	f01f fe71 	bl	80236d8 <iprintf>
        g_connection_needed_score++;
 80039f6:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
        HAL_Delay(1000);
 80039fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        g_connection_needed_score++;
 80039fe:	3301      	adds	r3, #1
 8003a00:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
        HAL_Delay(1000);
 8003a04:	f005 f922 	bl	8008c4c <HAL_Delay>
      if (NET_OK != net_sock_destroy(socket))
 8003a08:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003a0a:	f7fe fadd 	bl	8001fc8 <net_sock_destroy>
 8003a0e:	b330      	cbz	r0, 8003a5e <genericmqtt_client_XCube_sample_run+0x1e6>
        msg_error("net_sock_destroy() failed.\n");
 8003a10:	4826      	ldr	r0, [pc, #152]	; (8003aac <genericmqtt_client_XCube_sample_run+0x234>)
 8003a12:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003a16:	4631      	mov	r1, r6
 8003a18:	f01f fe5e 	bl	80236d8 <iprintf>
 8003a1c:	482e      	ldr	r0, [pc, #184]	; (8003ad8 <genericmqtt_client_XCube_sample_run+0x260>)
 8003a1e:	e01c      	b.n	8003a5a <genericmqtt_client_XCube_sample_run+0x1e2>
      snprintf(status_data.mac, MODEL_MAC_SIZE - 1, "MyDevice-UnknownMAC");
 8003a20:	4a2e      	ldr	r2, [pc, #184]	; (8003adc <genericmqtt_client_XCube_sample_run+0x264>)
 8003a22:	4829      	ldr	r0, [pc, #164]	; (8003ac8 <genericmqtt_client_XCube_sample_run+0x250>)
 8003a24:	210c      	movs	r1, #12
 8003a26:	f01f ff41 	bl	80238ac <sniprintf>
 8003a2a:	e79c      	b.n	8003966 <genericmqtt_client_XCube_sample_run+0xee>
        msg_info("Network link %s down. Trying to reconnect.\n", (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) ? "may be" : "");
 8003a2c:	f8d4 225c 	ldr.w	r2, [r4, #604]	; 0x25c
 8003a30:	492b      	ldr	r1, [pc, #172]	; (8003ae0 <genericmqtt_client_XCube_sample_run+0x268>)
 8003a32:	4b2c      	ldr	r3, [pc, #176]	; (8003ae4 <genericmqtt_client_XCube_sample_run+0x26c>)
 8003a34:	2a03      	cmp	r2, #3
 8003a36:	bfd8      	it	le
 8003a38:	4619      	movle	r1, r3
 8003a3a:	482b      	ldr	r0, [pc, #172]	; (8003ae8 <genericmqtt_client_XCube_sample_run+0x270>)
 8003a3c:	f01f fe4c 	bl	80236d8 <iprintf>
        if (net_reinit(hnet, (net_if_reinit)) != 0)
 8003a40:	492a      	ldr	r1, [pc, #168]	; (8003aec <genericmqtt_client_XCube_sample_run+0x274>)
 8003a42:	f8db 0000 	ldr.w	r0, [fp]
 8003a46:	f7fe f965 	bl	8001d14 <net_reinit>
 8003a4a:	b1a0      	cbz	r0, 8003a76 <genericmqtt_client_XCube_sample_run+0x1fe>
          msg_error("Netif re-initialization failed.\n");
 8003a4c:	4817      	ldr	r0, [pc, #92]	; (8003aac <genericmqtt_client_XCube_sample_run+0x234>)
 8003a4e:	f240 128b 	movw	r2, #395	; 0x18b
 8003a52:	4631      	mov	r1, r6
 8003a54:	f01f fe40 	bl	80236d8 <iprintf>
 8003a58:	4825      	ldr	r0, [pc, #148]	; (8003af0 <genericmqtt_client_XCube_sample_run+0x278>)
        msg_error("net_sock_destroy() failed.\n");
 8003a5a:	f01f fed9 	bl	8023810 <puts>
    } while (!g_reboot && (g_connection_needed_score > 0));
 8003a5e:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f af38 	bne.w	80038d8 <genericmqtt_client_XCube_sample_run+0x60>
 8003a68:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	dc8a      	bgt.n	8003986 <genericmqtt_client_XCube_sample_run+0x10e>
 8003a70:	e732      	b.n	80038d8 <genericmqtt_client_XCube_sample_run+0x60>
        msg_info("Network link %s down. Trying to reconnect.\n", (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) ? "may be" : "");
 8003a72:	491b      	ldr	r1, [pc, #108]	; (8003ae0 <genericmqtt_client_XCube_sample_run+0x268>)
 8003a74:	e7e1      	b.n	8003a3a <genericmqtt_client_XCube_sample_run+0x1c2>
          msg_info("Netif re-initialized successfully.\n");
 8003a76:	481f      	ldr	r0, [pc, #124]	; (8003af4 <genericmqtt_client_XCube_sample_run+0x27c>)
 8003a78:	f01f feca 	bl	8023810 <puts>
          HAL_Delay(1000);
 8003a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a80:	f005 f8e4 	bl	8008c4c <HAL_Delay>
          g_connection_needed_score = 1;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8003a8a:	e787      	b.n	800399c <genericmqtt_client_XCube_sample_run+0x124>
        switch(connection_security)
 8003a8c:	f1b8 0f03 	cmp.w	r8, #3
 8003a90:	f200 814e 	bhi.w	8003d30 <genericmqtt_client_XCube_sample_run+0x4b8>
 8003a94:	e8df f018 	tbh	[pc, r8, lsl #1]
 8003a98:	00f4006e 	.word	0x00f4006e
 8003a9c:	00300120 	.word	0x00300120
 8003aa0:	20000834 	.word	0x20000834
 8003aa4:	20000024 	.word	0x20000024
 8003aa8:	08028566 	.word	0x08028566
 8003aac:	0802da5d 	.word	0x0802da5d
 8003ab0:	0802f1c3 	.word	0x0802f1c3
 8003ab4:	0802f1e6 	.word	0x0802f1e6
 8003ab8:	0802f67a 	.word	0x0802f67a
 8003abc:	0802858a 	.word	0x0802858a
 8003ac0:	200011e4 	.word	0x200011e4
 8003ac4:	0802f231 	.word	0x0802f231
 8003ac8:	2000000c 	.word	0x2000000c
 8003acc:	0802e9f3 	.word	0x0802e9f3
 8003ad0:	0802f2f5 	.word	0x0802f2f5
 8003ad4:	0802f345 	.word	0x0802f345
 8003ad8:	0802e8b2 	.word	0x0802e8b2
 8003adc:	0802f24a 	.word	0x0802f24a
 8003ae0:	0802f1ab 	.word	0x0802f1ab
 8003ae4:	08030466 	.word	0x08030466
 8003ae8:	0802f25e 	.word	0x0802f25e
 8003aec:	080033a5 	.word	0x080033a5
 8003af0:	0802f28a 	.word	0x0802f28a
 8003af4:	0802f2aa 	.word	0x0802f2aa
            ret |= ((checkTLSRootCA() != 0) && (checkTLSDeviceConfig() != 0) )
 8003af8:	f7fd fe82 	bl	8001800 <checkTLSRootCA>
              || (getTLSKeys(&ca_cert, &device_cert, &device_key) != 0);
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f040 80b8 	bne.w	8003c72 <genericmqtt_client_XCube_sample_run+0x3fa>
 8003b02:	aa1c      	add	r2, sp, #112	; 0x70
 8003b04:	a91b      	add	r1, sp, #108	; 0x6c
 8003b06:	a81a      	add	r0, sp, #104	; 0x68
 8003b08:	f7fd ffce 	bl	8001aa8 <getTLSKeys>
 8003b0c:	1e05      	subs	r5, r0, #0
 8003b0e:	bf18      	it	ne
 8003b10:	2501      	movne	r5, #1
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003b12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	9216      	str	r2, [sp, #88]	; 0x58
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fc fb63 	bl	80001e4 <strlen>
 8003b1e:	4999      	ldr	r1, [pc, #612]	; (8003d84 <genericmqtt_client_XCube_sample_run+0x50c>)
 8003b20:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b22:	1c43      	adds	r3, r0, #1
 8003b24:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b26:	f7fe f999 	bl	8001e5c <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b2a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003b2c:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003b2e:	4305      	orrs	r5, r0
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7fc fb57 	bl	80001e4 <strlen>
 8003b36:	4994      	ldr	r1, [pc, #592]	; (8003d88 <genericmqtt_client_XCube_sample_run+0x510>)
 8003b38:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b3a:	1c43      	adds	r3, r0, #1
 8003b3c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b3e:	f7fe f98d 	bl	8001e5c <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_dev_cert",    (void *) device_cert,             strlen(device_cert) + 1);
 8003b42:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003b44:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b46:	4305      	orrs	r5, r0
            ret |= net_sock_setopt(socket, "tls_dev_cert",    (void *) device_cert,             strlen(device_cert) + 1);
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7fc fb4b 	bl	80001e4 <strlen>
 8003b4e:	498f      	ldr	r1, [pc, #572]	; (8003d8c <genericmqtt_client_XCube_sample_run+0x514>)
 8003b50:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b52:	1c43      	adds	r3, r0, #1
 8003b54:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b56:	f7fe f981 	bl	8001e5c <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_dev_key",     (void *) device_key,              strlen(device_key) + 1);
 8003b5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003b5c:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_dev_cert",    (void *) device_cert,             strlen(device_cert) + 1);
 8003b5e:	4305      	orrs	r5, r0
            ret |= net_sock_setopt(socket, "tls_dev_key",     (void *) device_key,              strlen(device_key) + 1);
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fc fb3f 	bl	80001e4 <strlen>
 8003b66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b68:	4989      	ldr	r1, [pc, #548]	; (8003d90 <genericmqtt_client_XCube_sample_run+0x518>)
 8003b6a:	1c43      	adds	r3, r0, #1
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b6c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b6e:	f7fe f975 	bl	8001e5c <net_sock_setopt>
 8003b72:	4305      	orrs	r5, r0
        ret |= net_sock_setopt(socket, "sock_noblocking", NULL, 0);
 8003b74:	2300      	movs	r3, #0
 8003b76:	461a      	mov	r2, r3
 8003b78:	4986      	ldr	r1, [pc, #536]	; (8003d94 <genericmqtt_client_XCube_sample_run+0x51c>)
 8003b7a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b7c:	f7fe f96e 	bl	8001e5c <net_sock_setopt>
      if (ret != NET_OK)
 8003b80:	ea55 0300 	orrs.w	r3, r5, r0
 8003b84:	f47f af1d 	bne.w	80039c2 <genericmqtt_client_XCube_sample_run+0x14a>
        ret = net_sock_open(socket, device_config->HostName, atoi(device_config->HostPort), 0);
 8003b88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003b8a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003b8c:	6811      	ldr	r1, [r2, #0]
 8003b8e:	6850      	ldr	r0, [r2, #4]
 8003b90:	9317      	str	r3, [sp, #92]	; 0x5c
 8003b92:	9116      	str	r1, [sp, #88]	; 0x58
 8003b94:	f01e fb25 	bl	80221e2 <atoi>
 8003b98:	e9dd 1316 	ldrd	r1, r3, [sp, #88]	; 0x58
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7fe f956 	bl	8001e50 <net_sock_open>
      if (ret != NET_OK)
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	f47f af14 	bne.w	80039d4 <genericmqtt_client_XCube_sample_run+0x15c>
        network.my_socket = socket;
 8003bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003bae:	9320      	str	r3, [sp, #128]	; 0x80
        network.mqttread = (network_read);
 8003bb0:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <genericmqtt_client_XCube_sample_run+0x520>)
        MQTTClientInit(&client, &network, MQTT_CMD_TIMEOUT,
 8003bb2:	4a7a      	ldr	r2, [pc, #488]	; (8003d9c <genericmqtt_client_XCube_sample_run+0x524>)
        network.mqttread = (network_read);
 8003bb4:	9321      	str	r3, [sp, #132]	; 0x84
        network.mqttwrite = (network_write);
 8003bb6:	4b7a      	ldr	r3, [pc, #488]	; (8003da0 <genericmqtt_client_XCube_sample_run+0x528>)
 8003bb8:	9322      	str	r3, [sp, #136]	; 0x88
        MQTTClientInit(&client, &network, MQTT_CMD_TIMEOUT,
 8003bba:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003bbe:	e9cd 3200 	strd	r3, r2, [sp]
 8003bc2:	9302      	str	r3, [sp, #8]
 8003bc4:	a920      	add	r1, sp, #128	; 0x80
 8003bc6:	f5a2 7316 	sub.w	r3, r2, #600	; 0x258
 8003bca:	a83e      	add	r0, sp, #248	; 0xf8
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	f009 f811 	bl	800cbf6 <MQTTClientInit>
        MQTTPacket_connectData options = MQTTPacket_connectData_initializer;
 8003bd4:	4973      	ldr	r1, [pc, #460]	; (8003da4 <genericmqtt_client_XCube_sample_run+0x52c>)
 8003bd6:	2258      	movs	r2, #88	; 0x58
 8003bd8:	a828      	add	r0, sp, #160	; 0xa0
 8003bda:	f01e fc51 	bl	8022480 <memcpy>
        options.clientID.cstring = device_config->MQClientId;
 8003bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	922b      	str	r2, [sp, #172]	; 0xac
        ret = MQTTConnect(&client, &options);
 8003be4:	a928      	add	r1, sp, #160	; 0xa0
        options.username.cstring = device_config->MQUserName;
 8003be6:	691a      	ldr	r2, [r3, #16]
        options.password.cstring = device_config->MQUserPwd;
 8003be8:	695b      	ldr	r3, [r3, #20]
        options.username.cstring = device_config->MQUserName;
 8003bea:	9238      	str	r2, [sp, #224]	; 0xe0
        ret = MQTTConnect(&client, &options);
 8003bec:	a83e      	add	r0, sp, #248	; 0xf8
        options.password.cstring = device_config->MQUserPwd;
 8003bee:	933b      	str	r3, [sp, #236]	; 0xec
        ret = MQTTConnect(&client, &options);
 8003bf0:	f009 f888 	bl	800cd04 <MQTTConnect>
        if (ret != 0)
 8003bf4:	4681      	mov	r9, r0
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	f000 80a5 	beq.w	8003d46 <genericmqtt_client_XCube_sample_run+0x4ce>
          msg_error("MQTTConnect() failed: %d\n", ret);
 8003bfc:	4631      	mov	r1, r6
 8003bfe:	486a      	ldr	r0, [pc, #424]	; (8003da8 <genericmqtt_client_XCube_sample_run+0x530>)
 8003c00:	f240 12df 	movw	r2, #479	; 0x1df
 8003c04:	f01f fd68 	bl	80236d8 <iprintf>
 8003c08:	4868      	ldr	r0, [pc, #416]	; (8003dac <genericmqtt_client_XCube_sample_run+0x534>)
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	f01f fd64 	bl	80236d8 <iprintf>
          msg_error("Failed subscribing to the %s topic.\n", mqtt_subtopic);
 8003c10:	4631      	mov	r1, r6
 8003c12:	4865      	ldr	r0, [pc, #404]	; (8003da8 <genericmqtt_client_XCube_sample_run+0x530>)
 8003c14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c18:	f01f fd5e 	bl	80236d8 <iprintf>
 8003c1c:	4964      	ldr	r1, [pc, #400]	; (8003db0 <genericmqtt_client_XCube_sample_run+0x538>)
 8003c1e:	4865      	ldr	r0, [pc, #404]	; (8003db4 <genericmqtt_client_XCube_sample_run+0x53c>)
 8003c20:	f01f fd5a 	bl	80236d8 <iprintf>
          msg_error("Yield failed.\n");
 8003c24:	4860      	ldr	r0, [pc, #384]	; (8003da8 <genericmqtt_client_XCube_sample_run+0x530>)
 8003c26:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8003c2a:	4631      	mov	r1, r6
 8003c2c:	f01f fd54 	bl	80236d8 <iprintf>
 8003c30:	4861      	ldr	r0, [pc, #388]	; (8003db8 <genericmqtt_client_XCube_sample_run+0x540>)
 8003c32:	f01f fded 	bl	8023810 <puts>
        if (b_mqtt_connected == true)
 8003c36:	b165      	cbz	r5, 8003c52 <genericmqtt_client_XCube_sample_run+0x3da>
          ret = MQTTDisconnect(&client);
 8003c38:	a83e      	add	r0, sp, #248	; 0xf8
 8003c3a:	f009 f963 	bl	800cf04 <MQTTDisconnect>
          if (ret != MQSUCCESS)
 8003c3e:	b140      	cbz	r0, 8003c52 <genericmqtt_client_XCube_sample_run+0x3da>
            msg_error("MQTTDisconnect() failed.\n");
 8003c40:	4859      	ldr	r0, [pc, #356]	; (8003da8 <genericmqtt_client_XCube_sample_run+0x530>)
 8003c42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003c46:	4631      	mov	r1, r6
 8003c48:	f01f fd46 	bl	80236d8 <iprintf>
 8003c4c:	485b      	ldr	r0, [pc, #364]	; (8003dbc <genericmqtt_client_XCube_sample_run+0x544>)
 8003c4e:	f01f fddf 	bl	8023810 <puts>
        if (NET_OK !=  net_sock_close(socket))
 8003c52:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c54:	f7fe f9b2 	bl	8001fbc <net_sock_close>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	f43f aed5 	beq.w	8003a08 <genericmqtt_client_XCube_sample_run+0x190>
          msg_error("net_sock_close() failed.\n");
 8003c5e:	f240 3206 	movw	r2, #774	; 0x306
 8003c62:	4631      	mov	r1, r6
 8003c64:	4850      	ldr	r0, [pc, #320]	; (8003da8 <genericmqtt_client_XCube_sample_run+0x530>)
 8003c66:	f01f fd37 	bl	80236d8 <iprintf>
 8003c6a:	4855      	ldr	r0, [pc, #340]	; (8003dc0 <genericmqtt_client_XCube_sample_run+0x548>)
 8003c6c:	f01f fdd0 	bl	8023810 <puts>
 8003c70:	e6ca      	b.n	8003a08 <genericmqtt_client_XCube_sample_run+0x190>
            ret |= ((checkTLSRootCA() != 0) && (checkTLSDeviceConfig() != 0) )
 8003c72:	f7fd fddd 	bl	8001830 <checkTLSDeviceConfig>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	f43f af43 	beq.w	8003b02 <genericmqtt_client_XCube_sample_run+0x28a>
              || (getTLSKeys(&ca_cert, &device_cert, &device_key) != 0);
 8003c7c:	2501      	movs	r5, #1
 8003c7e:	e748      	b.n	8003b12 <genericmqtt_client_XCube_sample_run+0x29a>
            ret |= net_sock_setopt(socket, "tls_server_noverification", NULL, 0);
 8003c80:	2300      	movs	r3, #0
 8003c82:	461a      	mov	r2, r3
 8003c84:	494f      	ldr	r1, [pc, #316]	; (8003dc4 <genericmqtt_client_XCube_sample_run+0x54c>)
 8003c86:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c88:	f7fe f8e8 	bl	8001e5c <net_sock_setopt>
 8003c8c:	4681      	mov	r9, r0
            ret |= (checkTLSRootCA() != 0)
 8003c8e:	f7fd fdb7 	bl	8001800 <checkTLSRootCA>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003c92:	4602      	mov	r2, r0
 8003c94:	b9f0      	cbnz	r0, 8003cd4 <genericmqtt_client_XCube_sample_run+0x45c>
 8003c96:	4601      	mov	r1, r0
 8003c98:	a81a      	add	r0, sp, #104	; 0x68
 8003c9a:	f7fd ff05 	bl	8001aa8 <getTLSKeys>
 8003c9e:	1e05      	subs	r5, r0, #0
 8003ca0:	bf18      	it	ne
 8003ca2:	2501      	movne	r5, #1
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003ca4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	9216      	str	r2, [sp, #88]	; 0x58
 8003caa:	4610      	mov	r0, r2
 8003cac:	f7fc fa9a 	bl	80001e4 <strlen>
 8003cb0:	4934      	ldr	r1, [pc, #208]	; (8003d84 <genericmqtt_client_XCube_sample_run+0x50c>)
 8003cb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003cb8:	f7fe f8d0 	bl	8001e5c <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003cbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003cbe:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003cc0:	4328      	orrs	r0, r5
 8003cc2:	ea40 0509 	orr.w	r5, r0, r9
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7fc fa8c 	bl	80001e4 <strlen>
 8003ccc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003cce:	492e      	ldr	r1, [pc, #184]	; (8003d88 <genericmqtt_client_XCube_sample_run+0x510>)
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	e74b      	b.n	8003b6c <genericmqtt_client_XCube_sample_run+0x2f4>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003cd4:	2501      	movs	r5, #1
 8003cd6:	e7e5      	b.n	8003ca4 <genericmqtt_client_XCube_sample_run+0x42c>
            ret |= (checkTLSRootCA() != 0)
 8003cd8:	f7fd fd92 	bl	8001800 <checkTLSRootCA>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003cdc:	4602      	mov	r2, r0
 8003cde:	bb20      	cbnz	r0, 8003d2a <genericmqtt_client_XCube_sample_run+0x4b2>
 8003ce0:	4601      	mov	r1, r0
 8003ce2:	a81a      	add	r0, sp, #104	; 0x68
 8003ce4:	f7fd fee0 	bl	8001aa8 <getTLSKeys>
 8003ce8:	f1b0 0a00 	subs.w	sl, r0, #0
 8003cec:	bf18      	it	ne
 8003cee:	f04f 0a01 	movne.w	sl, #1
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003cf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	9216      	str	r2, [sp, #88]	; 0x58
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f7fc fa73 	bl	80001e4 <strlen>
 8003cfe:	4921      	ldr	r1, [pc, #132]	; (8003d84 <genericmqtt_client_XCube_sample_run+0x50c>)
 8003d00:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003d06:	f7fe f8a9 	bl	8001e5c <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003d0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003d0c:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003d0e:	ea4a 0a00 	orr.w	sl, sl, r0
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fc fa66 	bl	80001e4 <strlen>
 8003d18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003d1a:	491b      	ldr	r1, [pc, #108]	; (8003d88 <genericmqtt_client_XCube_sample_run+0x510>)
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003d20:	f7fe f89c 	bl	8001e5c <net_sock_setopt>
 8003d24:	ea4a 0500 	orr.w	r5, sl, r0
            break;
 8003d28:	e724      	b.n	8003b74 <genericmqtt_client_XCube_sample_run+0x2fc>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003d2a:	f04f 0a01 	mov.w	sl, #1
 8003d2e:	e7e0      	b.n	8003cf2 <genericmqtt_client_XCube_sample_run+0x47a>
            msg_error("Invalid connection security mode. - %d\n", connection_security);
 8003d30:	4631      	mov	r1, r6
 8003d32:	f240 12b7 	movw	r2, #439	; 0x1b7
 8003d36:	481c      	ldr	r0, [pc, #112]	; (8003da8 <genericmqtt_client_XCube_sample_run+0x530>)
 8003d38:	f01f fcce 	bl	80236d8 <iprintf>
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	4822      	ldr	r0, [pc, #136]	; (8003dc8 <genericmqtt_client_XCube_sample_run+0x550>)
 8003d40:	f01f fcca 	bl	80236d8 <iprintf>
 8003d44:	e716      	b.n	8003b74 <genericmqtt_client_XCube_sample_run+0x2fc>
          snprintf(mqtt_subtopic, MQTT_TOPIC_BUFFER_SIZE, "/devices/%s/control", device_config->MQClientId);
 8003d46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d48:	4a20      	ldr	r2, [pc, #128]	; (8003dcc <genericmqtt_client_XCube_sample_run+0x554>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
          g_connection_needed_score = 0;
 8003d4c:	f8c4 025c 	str.w	r0, [r4, #604]	; 0x25c
          snprintf(mqtt_subtopic, MQTT_TOPIC_BUFFER_SIZE, "/devices/%s/control", device_config->MQClientId);
 8003d50:	2164      	movs	r1, #100	; 0x64
 8003d52:	4817      	ldr	r0, [pc, #92]	; (8003db0 <genericmqtt_client_XCube_sample_run+0x538>)
 8003d54:	f01f fdaa 	bl	80238ac <sniprintf>
          ret = MQTTSubscribe(&client, mqtt_subtopic, QOS0, (allpurposeMessageHandler));
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <genericmqtt_client_XCube_sample_run+0x558>)
 8003d5a:	4915      	ldr	r1, [pc, #84]	; (8003db0 <genericmqtt_client_XCube_sample_run+0x538>)
 8003d5c:	464a      	mov	r2, r9
 8003d5e:	a83e      	add	r0, sp, #248	; 0xf8
 8003d60:	f009 f864 	bl	800ce2c <MQTTSubscribe>
        if (ret != MQSUCCESS)
 8003d64:	b108      	cbz	r0, 8003d6a <genericmqtt_client_XCube_sample_run+0x4f2>
          b_mqtt_connected = true;
 8003d66:	2501      	movs	r5, #1
 8003d68:	e752      	b.n	8003c10 <genericmqtt_client_XCube_sample_run+0x398>
          msg_info("Subscribed to %s.\n", mqtt_subtopic);
 8003d6a:	4911      	ldr	r1, [pc, #68]	; (8003db0 <genericmqtt_client_XCube_sample_run+0x538>)
 8003d6c:	4819      	ldr	r0, [pc, #100]	; (8003dd4 <genericmqtt_client_XCube_sample_run+0x55c>)
 8003d6e:	f01f fcb3 	bl	80236d8 <iprintf>
          ret = MQTTYield(&client, 500);
 8003d72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d76:	a83e      	add	r0, sp, #248	; 0xf8
 8003d78:	f008 ff5d 	bl	800cc36 <MQTTYield>
        if (ret != MQSUCCESS)
 8003d7c:	b360      	cbz	r0, 8003dd8 <genericmqtt_client_XCube_sample_run+0x560>
          b_mqtt_connected = true;
 8003d7e:	2501      	movs	r5, #1
 8003d80:	e750      	b.n	8003c24 <genericmqtt_client_XCube_sample_run+0x3ac>
 8003d82:	bf00      	nop
 8003d84:	0802e2e3 	.word	0x0802e2e3
 8003d88:	0802e27f 	.word	0x0802e27f
 8003d8c:	0802e28c 	.word	0x0802e28c
 8003d90:	0802e299 	.word	0x0802e299
 8003d94:	0802e301 	.word	0x0802e301
 8003d98:	08003425 	.word	0x08003425
 8003d9c:	20000cec 	.word	0x20000cec
 8003da0:	08003459 	.word	0x08003459
 8003da4:	08028590 	.word	0x08028590
 8003da8:	0802da5d 	.word	0x0802da5d
 8003dac:	0802f36f 	.word	0x0802f36f
 8003db0:	20000f44 	.word	0x20000f44
 8003db4:	0802f39d 	.word	0x0802f39d
 8003db8:	0802f3d5 	.word	0x0802f3d5
 8003dbc:	0802f648 	.word	0x0802f648
 8003dc0:	0802f661 	.word	0x0802f661
 8003dc4:	0802e2c9 	.word	0x0802e2c9
 8003dc8:	0802f2cd 	.word	0x0802f2cd
 8003dcc:	0802f389 	.word	0x0802f389
 8003dd0:	0800348d 	.word	0x0800348d
 8003dd4:	0802f3c2 	.word	0x0802f3c2
          uint32_t last_telemetry_time_ms = HAL_GetTick();
 8003dd8:	f004 ff32 	bl	8008c40 <HAL_GetTick>
              pub_data.temperature = BSP_TSENSOR_ReadTemp();
 8003ddc:	4d9b      	ldr	r5, [pc, #620]	; (800404c <genericmqtt_client_XCube_sample_run+0x7d4>)
          uint32_t last_telemetry_time_ms = HAL_GetTick();
 8003dde:	4681      	mov	r9, r0
            uint8_t command = Button_WaitForMultiPush(500);
 8003de0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003de4:	f000 fa1e 	bl	8004224 <Button_WaitForMultiPush>
            if (command == BP_MULTIPLE_PUSH)                  /* If long button push, toggle the telemetry publication. */
 8003de8:	2802      	cmp	r0, #2
            uint8_t command = Button_WaitForMultiPush(500);
 8003dea:	4682      	mov	sl, r0
            if (command == BP_MULTIPLE_PUSH)                  /* If long button push, toggle the telemetry publication. */
 8003dec:	d10d      	bne.n	8003e0a <genericmqtt_client_XCube_sample_run+0x592>
              g_publishData = !g_publishData;
 8003dee:	f894 325b 	ldrb.w	r3, [r4, #603]	; 0x25b
              msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003df2:	4997      	ldr	r1, [pc, #604]	; (8004050 <genericmqtt_client_XCube_sample_run+0x7d8>)
 8003df4:	4a97      	ldr	r2, [pc, #604]	; (8004054 <genericmqtt_client_XCube_sample_run+0x7dc>)
 8003df6:	4898      	ldr	r0, [pc, #608]	; (8004058 <genericmqtt_client_XCube_sample_run+0x7e0>)
              g_publishData = !g_publishData;
 8003df8:	f083 0301 	eor.w	r3, r3, #1
              msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf08      	it	eq
 8003e00:	4611      	moveq	r1, r2
              g_publishData = !g_publishData;
 8003e02:	f884 325b 	strb.w	r3, [r4, #603]	; 0x25b
              msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003e06:	f01f fc67 	bl	80236d8 <iprintf>
            int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003e0a:	f004 ff19 	bl	8008c40 <HAL_GetTick>
            if ( ((g_publishData == true) && (left_ms <= 0))
 8003e0e:	f894 225b 	ldrb.w	r2, [r4, #603]	; 0x25b
            int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4601      	mov	r1, r0
            if ( ((g_publishData == true) && (left_ms <= 0))
 8003e16:	b13a      	cbz	r2, 8003e28 <genericmqtt_client_XCube_sample_run+0x5b0>
            int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e1c:	435a      	muls	r2, r3
 8003e1e:	4648      	mov	r0, r9
 8003e20:	f7ff fd20 	bl	8003864 <comp_left_ms>
            if ( ((g_publishData == true) && (left_ms <= 0))
 8003e24:	2800      	cmp	r0, #0
 8003e26:	dd02      	ble.n	8003e2e <genericmqtt_client_XCube_sample_run+0x5b6>
                || (b_sample_data == true) )
 8003e28:	f1ba 0f01 	cmp.w	sl, #1
 8003e2c:	d16c      	bne.n	8003f08 <genericmqtt_client_XCube_sample_run+0x690>
              last_telemetry_time_ms = HAL_GetTick();
 8003e2e:	f004 ff07 	bl	8008c40 <HAL_GetTick>
 8003e32:	4681      	mov	r9, r0
              pub_data.temperature = BSP_TSENSOR_ReadTemp();
 8003e34:	f001 fb2c 	bl	8005490 <BSP_TSENSOR_ReadTemp>
 8003e38:	ed85 0a0c 	vstr	s0, [r5, #48]	; 0x30
              pub_data.humidity = BSP_HSENSOR_ReadHumidity();
 8003e3c:	f001 faca 	bl	80053d4 <BSP_HSENSOR_ReadHumidity>
 8003e40:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
              pub_data.pressure = BSP_PSENSOR_ReadPressure();
 8003e44:	f001 fb0a 	bl	800545c <BSP_PSENSOR_ReadPressure>
 8003e48:	ed85 0a0e 	vstr	s0, [r5, #56]	; 0x38
              pub_data.proximity = VL53L0X_PROXIMITY_GetDistance();
 8003e4c:	f000 fd1e 	bl	800488c <VL53L0X_PROXIMITY_GetDistance>
 8003e50:	63e8      	str	r0, [r5, #60]	; 0x3c
              BSP_ACCELERO_AccGetXYZ(pub_data.ACC_Value);
 8003e52:	4882      	ldr	r0, [pc, #520]	; (800405c <genericmqtt_client_XCube_sample_run+0x7e4>)
 8003e54:	f001 fa82 	bl	800535c <BSP_ACCELERO_AccGetXYZ>
              BSP_GYRO_GetXYZ(pub_data.GYR_Value);
 8003e58:	4881      	ldr	r0, [pc, #516]	; (8004060 <genericmqtt_client_XCube_sample_run+0x7e8>)
 8003e5a:	f001 fa9d 	bl	8005398 <BSP_GYRO_GetXYZ>
              BSP_MAGNETO_GetXYZ(pub_data.MAG_Value);
 8003e5e:	4881      	ldr	r0, [pc, #516]	; (8004064 <genericmqtt_client_XCube_sample_run+0x7ec>)
 8003e60:	f001 fade 	bl	8005420 <BSP_MAGNETO_GetXYZ>
              pub_data.ts = time(NULL); /* last_telemetry_time_ms; */
 8003e64:	2000      	movs	r0, #0
 8003e66:	f7ff f9f9 	bl	800325c <time>
              snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/losant/%s/state", device_config->MQClientId);
 8003e6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e6c:	4a7e      	ldr	r2, [pc, #504]	; (8004068 <genericmqtt_client_XCube_sample_run+0x7f0>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
              pub_data.ts = time(NULL); /* last_telemetry_time_ms; */
 8003e70:	6128      	str	r0, [r5, #16]
              snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/losant/%s/state", device_config->MQClientId);
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	487d      	ldr	r0, [pc, #500]	; (800406c <genericmqtt_client_XCube_sample_run+0x7f4>)
 8003e76:	f01f fd19 	bl	80238ac <sniprintf>
              ret = snprintf( mqtt_msg, MQTT_MSG_BUFFER_SIZE, "{\n \"data\": {\n"
 8003e7a:	9514      	str	r5, [sp, #80]	; 0x50
 8003e7c:	692b      	ldr	r3, [r5, #16]
 8003e7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e80:	f9b5 302c 	ldrsh.w	r3, [r5, #44]	; 0x2c
 8003e84:	9312      	str	r3, [sp, #72]	; 0x48
 8003e86:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 8003e8a:	9311      	str	r3, [sp, #68]	; 0x44
 8003e8c:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 8003e90:	9310      	str	r3, [sp, #64]	; 0x40
 8003e92:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003e94:	f7fc fb68 	bl	8000568 <__aeabi_f2d>
 8003e98:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003e9c:	6a28      	ldr	r0, [r5, #32]
 8003e9e:	f7fc fb63 	bl	8000568 <__aeabi_f2d>
 8003ea2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003ea6:	69e8      	ldr	r0, [r5, #28]
 8003ea8:	f7fc fb5e 	bl	8000568 <__aeabi_f2d>
 8003eac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003eb0:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8003eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb6:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8003eba:	9308      	str	r3, [sp, #32]
 8003ebc:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8003ec0:	9307      	str	r3, [sp, #28]
 8003ec2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003ec4:	9306      	str	r3, [sp, #24]
 8003ec6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8003ec8:	f7fc fb4e 	bl	8000568 <__aeabi_f2d>
 8003ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ed0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003ed2:	f7fc fb49 	bl	8000568 <__aeabi_f2d>
 8003ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003eda:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003edc:	f7fc fb44 	bl	8000568 <__aeabi_f2d>
 8003ee0:	4a63      	ldr	r2, [pc, #396]	; (8004070 <genericmqtt_client_XCube_sample_run+0x7f8>)
 8003ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8003ee6:	4863      	ldr	r0, [pc, #396]	; (8004074 <genericmqtt_client_XCube_sample_run+0x7fc>)
 8003ee8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003eec:	f01f fcde 	bl	80238ac <sniprintf>
              if ( (ret < 0) || (ret >= MQTT_MSG_BUFFER_SIZE) )
 8003ef0:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8003ef4:	d367      	bcc.n	8003fc6 <genericmqtt_client_XCube_sample_run+0x74e>
                msg_error("Telemetry message formatting error.\n");
 8003ef6:	4860      	ldr	r0, [pc, #384]	; (8004078 <genericmqtt_client_XCube_sample_run+0x800>)
 8003ef8:	f240 22a2 	movw	r2, #674	; 0x2a2
 8003efc:	4631      	mov	r1, r6
 8003efe:	f01f fbeb 	bl	80236d8 <iprintf>
 8003f02:	485e      	ldr	r0, [pc, #376]	; (800407c <genericmqtt_client_XCube_sample_run+0x804>)
                  msg_error("Yield failed. Reconnection needed?.\n");
 8003f04:	f01f fc84 	bl	8023810 <puts>
            if (g_statusChanged)
 8003f08:	f894 3258 	ldrb.w	r3, [r4, #600]	; 0x258
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d035      	beq.n	8003f7c <genericmqtt_client_XCube_sample_run+0x704>
              snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/losant/%s/state", device_config->MQClientId);
 8003f10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f12:	4a55      	ldr	r2, [pc, #340]	; (8004068 <genericmqtt_client_XCube_sample_run+0x7f0>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	4855      	ldr	r0, [pc, #340]	; (800406c <genericmqtt_client_XCube_sample_run+0x7f4>)
 8003f18:	2164      	movs	r1, #100	; 0x64
 8003f1a:	f01f fcc7 	bl	80238ac <sniprintf>
              ret = snprintf( mqtt_msg, MQTT_MSG_BUFFER_SIZE, "{\n \"data\": {\n"
 8003f1e:	4a58      	ldr	r2, [pc, #352]	; (8004080 <genericmqtt_client_XCube_sample_run+0x808>)
 8003f20:	7b79      	ldrb	r1, [r7, #13]
 8003f22:	4b58      	ldr	r3, [pc, #352]	; (8004084 <genericmqtt_client_XCube_sample_run+0x80c>)
 8003f24:	f8d7 a010 	ldr.w	sl, [r7, #16]
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	bf08      	it	eq
 8003f2c:	4613      	moveq	r3, r2
 8003f2e:	2000      	movs	r0, #0
 8003f30:	9316      	str	r3, [sp, #88]	; 0x58
 8003f32:	f7ff f993 	bl	800325c <time>
 8003f36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f38:	4a53      	ldr	r2, [pc, #332]	; (8004088 <genericmqtt_client_XCube_sample_run+0x810>)
 8003f3a:	f8cd a000 	str.w	sl, [sp]
 8003f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f42:	9504      	str	r5, [sp, #16]
 8003f44:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003f48:	484a      	ldr	r0, [pc, #296]	; (8004074 <genericmqtt_client_XCube_sample_run+0x7fc>)
 8003f4a:	f01f fcaf 	bl	80238ac <sniprintf>
                ret = stiot_publish(&client, mqtt_pubtopic, mqtt_msg);  /* Wrapper for MQTTPublish() */
 8003f4e:	4a49      	ldr	r2, [pc, #292]	; (8004074 <genericmqtt_client_XCube_sample_run+0x7fc>)
 8003f50:	a83e      	add	r0, sp, #248	; 0xf8
 8003f52:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003f56:	f7ff fb57 	bl	8003608 <stiot_publish>
                if (ret != MQSUCCESS)
 8003f5a:	4682      	mov	sl, r0
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d068      	beq.n	8004032 <genericmqtt_client_XCube_sample_run+0x7ba>
                  msg_error("Status publication failed.\n");
 8003f60:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8003f64:	4631      	mov	r1, r6
 8003f66:	4844      	ldr	r0, [pc, #272]	; (8004078 <genericmqtt_client_XCube_sample_run+0x800>)
 8003f68:	f01f fbb6 	bl	80236d8 <iprintf>
 8003f6c:	4847      	ldr	r0, [pc, #284]	; (800408c <genericmqtt_client_XCube_sample_run+0x814>)
 8003f6e:	f01f fc4f 	bl	8023810 <puts>
                  g_connection_needed_score++;
 8003f72:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003f76:	3301      	adds	r3, #1
 8003f78:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
            ret = MQTTYield(&client, 500);
 8003f7c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003f80:	a83e      	add	r0, sp, #248	; 0xf8
 8003f82:	f008 fe58 	bl	800cc36 <MQTTYield>
            if (ret != MQSUCCESS)
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d05c      	beq.n	8004044 <genericmqtt_client_XCube_sample_run+0x7cc>
              msg_error("Yield failed. Reconnection needed.\n");
 8003f8a:	f240 22ed 	movw	r2, #749	; 0x2ed
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4839      	ldr	r0, [pc, #228]	; (8004078 <genericmqtt_client_XCube_sample_run+0x800>)
 8003f92:	f01f fba1 	bl	80236d8 <iprintf>
 8003f96:	483e      	ldr	r0, [pc, #248]	; (8004090 <genericmqtt_client_XCube_sample_run+0x818>)
 8003f98:	f01f fc3a 	bl	8023810 <puts>
              g_connection_needed_score++;
 8003f9c:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
          } while ( g_continueRunning && !g_reboot && (g_connection_needed_score == 0) );
 8003fa6:	f894 325a 	ldrb.w	r3, [r4, #602]	; 0x25a
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f43f ae44 	beq.w	8003c38 <genericmqtt_client_XCube_sample_run+0x3c0>
 8003fb0:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f ae3f 	bne.w	8003c38 <genericmqtt_client_XCube_sample_run+0x3c0>
 8003fba:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f43f af0e 	beq.w	8003de0 <genericmqtt_client_XCube_sample_run+0x568>
 8003fc4:	e638      	b.n	8003c38 <genericmqtt_client_XCube_sample_run+0x3c0>
                ret = stiot_publish(&client, mqtt_pubtopic, mqtt_msg);  /* Wrapper for MQTTPublish() */
 8003fc6:	4a2b      	ldr	r2, [pc, #172]	; (8004074 <genericmqtt_client_XCube_sample_run+0x7fc>)
 8003fc8:	a83e      	add	r0, sp, #248	; 0xf8
 8003fca:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003fce:	f7ff fb1b 	bl	8003608 <stiot_publish>
                if (ret == MQSUCCESS)
 8003fd2:	b9f8      	cbnz	r0, 8004014 <genericmqtt_client_XCube_sample_run+0x79c>
                  Led_Blink(80, 40, 5);
 8003fd4:	2205      	movs	r2, #5
 8003fd6:	2128      	movs	r1, #40	; 0x28
 8003fd8:	2050      	movs	r0, #80	; 0x50
 8003fda:	f000 f8dd 	bl	8004198 <Led_Blink>
                  Led_SetState(status_data.LedOn);
 8003fde:	7b78      	ldrb	r0, [r7, #13]
 8003fe0:	f000 f8d4 	bl	800418c <Led_SetState>
                  msg_info("#\n");
 8003fe4:	482b      	ldr	r0, [pc, #172]	; (8004094 <genericmqtt_client_XCube_sample_run+0x81c>)
 8003fe6:	f01f fc13 	bl	8023810 <puts>
                  msg_info("publication topic: %s \tpayload: %s\n", mqtt_pubtopic, mqtt_msg);
 8003fea:	4a22      	ldr	r2, [pc, #136]	; (8004074 <genericmqtt_client_XCube_sample_run+0x7fc>)
 8003fec:	482a      	ldr	r0, [pc, #168]	; (8004098 <genericmqtt_client_XCube_sample_run+0x820>)
 8003fee:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003ff2:	f01f fb71 	bl	80236d8 <iprintf>
                ret = MQTTYield(&client, 500);
 8003ff6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003ffa:	a83e      	add	r0, sp, #248	; 0xf8
 8003ffc:	f008 fe1b 	bl	800cc36 <MQTTYield>
                if (ret != MQSUCCESS)
 8004000:	2800      	cmp	r0, #0
 8004002:	d081      	beq.n	8003f08 <genericmqtt_client_XCube_sample_run+0x690>
                  msg_error("Yield failed. Reconnection needed?.\n");
 8004004:	481c      	ldr	r0, [pc, #112]	; (8004078 <genericmqtt_client_XCube_sample_run+0x800>)
 8004006:	f240 22b9 	movw	r2, #697	; 0x2b9
 800400a:	4631      	mov	r1, r6
 800400c:	f01f fb64 	bl	80236d8 <iprintf>
 8004010:	4822      	ldr	r0, [pc, #136]	; (800409c <genericmqtt_client_XCube_sample_run+0x824>)
 8004012:	e777      	b.n	8003f04 <genericmqtt_client_XCube_sample_run+0x68c>
                  msg_error("Telemetry publication failed.\n");
 8004014:	f240 22b2 	movw	r2, #690	; 0x2b2
 8004018:	4631      	mov	r1, r6
 800401a:	4817      	ldr	r0, [pc, #92]	; (8004078 <genericmqtt_client_XCube_sample_run+0x800>)
 800401c:	f01f fb5c 	bl	80236d8 <iprintf>
 8004020:	481f      	ldr	r0, [pc, #124]	; (80040a0 <genericmqtt_client_XCube_sample_run+0x828>)
 8004022:	f01f fbf5 	bl	8023810 <puts>
                  g_connection_needed_score++;
 8004026:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 800402a:	3301      	adds	r3, #1
 800402c:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8004030:	e7e1      	b.n	8003ff6 <genericmqtt_client_XCube_sample_run+0x77e>
                  msg_info("publication topic: %s \tpayload: %s\n",mqtt_pubtopic, mqtt_msg);
 8004032:	4a10      	ldr	r2, [pc, #64]	; (8004074 <genericmqtt_client_XCube_sample_run+0x7fc>)
 8004034:	4818      	ldr	r0, [pc, #96]	; (8004098 <genericmqtt_client_XCube_sample_run+0x820>)
 8004036:	f202 7174 	addw	r1, r2, #1908	; 0x774
 800403a:	f01f fb4d 	bl	80236d8 <iprintf>
                  g_statusChanged = false;
 800403e:	f884 a258 	strb.w	sl, [r4, #600]	; 0x258
 8004042:	e79b      	b.n	8003f7c <genericmqtt_client_XCube_sample_run+0x704>
              msg_info(".");
 8004044:	202e      	movs	r0, #46	; 0x2e
 8004046:	f01f fb5f 	bl	8023708 <putchar>
 800404a:	e7ac      	b.n	8003fa6 <genericmqtt_client_XCube_sample_run+0x72e>
 800404c:	20000024 	.word	0x20000024
 8004050:	0802f1b2 	.word	0x0802f1b2
 8004054:	0802f8cb 	.word	0x0802f8cb
 8004058:	0802f3e3 	.word	0x0802f3e3
 800405c:	20000038 	.word	0x20000038
 8004060:	20000040 	.word	0x20000040
 8004064:	2000004c 	.word	0x2000004c
 8004068:	0802f40b 	.word	0x0802f40b
 800406c:	20000fa8 	.word	0x20000fa8
 8004070:	0802f41c 	.word	0x0802f41c
 8004074:	20000834 	.word	0x20000834
 8004078:	0802da5d 	.word	0x0802da5d
 800407c:	0802f525 	.word	0x0802f525
 8004080:	0802f1bd 	.word	0x0802f1bd
 8004084:	0802f1b8 	.word	0x0802f1b8
 8004088:	0802f5b1 	.word	0x0802f5b1
 800408c:	0802f60a 	.word	0x0802f60a
 8004090:	0802f625 	.word	0x0802f625
 8004094:	0802f549 	.word	0x0802f549
 8004098:	0802f54b 	.word	0x0802f54b
 800409c:	0802f58d 	.word	0x0802f58d
 80040a0:	0802f56f 	.word	0x0802f56f

080040a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80040a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80040aa:	e003      	b.n	80040b4 <LoopCopyDataInit>

080040ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80040ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80040b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80040b2:	3104      	adds	r1, #4

080040b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80040b4:	480b      	ldr	r0, [pc, #44]	; (80040e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80040b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80040ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80040bc:	d3f6      	bcc.n	80040ac <CopyDataInit>
	ldr	r2, =_sbss
 80040be:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80040c0:	e002      	b.n	80040c8 <LoopFillZerobss>

080040c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80040c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80040c4:	f842 3b04 	str.w	r3, [r2], #4

080040c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <LoopForever+0x16>)
	cmp	r2, r3
 80040ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80040cc:	d3f9      	bcc.n	80040c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040ce:	f004 fd67 	bl	8008ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040d2:	f01e f98b 	bl	80223ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040d6:	f000 f901 	bl	80042dc <main>

080040da <LoopForever>:

LoopForever:
    b LoopForever
 80040da:	e7fe      	b.n	80040da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80040e0:	08033ef8 	.word	0x08033ef8
	ldr	r0, =_sdata
 80040e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80040e8:	20000818 	.word	0x20000818
	ldr	r2, =_sbss
 80040ec:	20000818 	.word	0x20000818
	ldr	r3, = _ebss
 80040f0:	20001a2c 	.word	0x20001a2c

080040f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040f4:	e7fe      	b.n	80040f4 <ADC1_2_IRQHandler>

080040f6 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80040f6:	2001      	movs	r0, #1
 80040f8:	4770      	bx	lr

080040fa <_kill>:

int _kill(int pid, int sig)
{
 80040fa:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040fc:	f01e f87e 	bl	80221fc <__errno>
 8004100:	2316      	movs	r3, #22
 8004102:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	bd08      	pop	{r3, pc}

0800410a <_exit>:

void _exit (int status)
{
 800410a:	b508      	push	{r3, lr}
	errno = EINVAL;
 800410c:	f01e f876 	bl	80221fc <__errno>
 8004110:	2316      	movs	r3, #22
 8004112:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004114:	e7fe      	b.n	8004114 <_exit+0xa>

08004116 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8004116:	b510      	push	{r4, lr}
 8004118:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 800411a:	f000 f8ab 	bl	8004274 <__io_getchar>
 800411e:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8004120:	2001      	movs	r0, #1
 8004122:	bd10      	pop	{r4, pc}

08004124 <_write>:

int _write(int file, char *ptr, int len)
{
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	460e      	mov	r6, r1
 8004128:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800412a:	2500      	movs	r5, #0
 800412c:	42a5      	cmp	r5, r4
 800412e:	db01      	blt.n	8004134 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8004130:	4620      	mov	r0, r4
 8004132:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8004134:	5d70      	ldrb	r0, [r6, r5]
 8004136:	f000 f88b 	bl	8004250 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800413a:	3501      	adds	r5, #1
 800413c:	e7f6      	b.n	800412c <_write+0x8>
	...

08004140 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004140:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004142:	4b0a      	ldr	r3, [pc, #40]	; (800416c <_sbrk+0x2c>)
 8004144:	6819      	ldr	r1, [r3, #0]
{
 8004146:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004148:	b909      	cbnz	r1, 800414e <_sbrk+0xe>
		heap_end = &end;
 800414a:	4909      	ldr	r1, [pc, #36]	; (8004170 <_sbrk+0x30>)
 800414c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800414e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004150:	4669      	mov	r1, sp
 8004152:	4402      	add	r2, r0
 8004154:	428a      	cmp	r2, r1
 8004156:	d906      	bls.n	8004166 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004158:	f01e f850 	bl	80221fc <__errno>
 800415c:	230c      	movs	r3, #12
 800415e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004160:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004164:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8004166:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8004168:	e7fc      	b.n	8004164 <_sbrk+0x24>
 800416a:	bf00      	nop
 800416c:	2000100c 	.word	0x2000100c
 8004170:	20001a30 	.word	0x20001a30

08004174 <_close>:

int _close(int file)
{
	return -1;
}
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	4770      	bx	lr

0800417a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800417a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800417e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004180:	2000      	movs	r0, #0
 8004182:	4770      	bx	lr

08004184 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004184:	2001      	movs	r0, #1
 8004186:	4770      	bx	lr

08004188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004188:	2000      	movs	r0, #0
 800418a:	4770      	bx	lr

0800418c <Led_SetState>:
/**
  * @brief Set LED state
  */
void Led_SetState(bool on)
{
  if (on == true)
 800418c:	b110      	cbz	r0, 8004194 <Led_SetState+0x8>
  {
    BSP_LED_On(LED_GREEN);
 800418e:	2000      	movs	r0, #0
 8004190:	f000 bfe4 	b.w	800515c <BSP_LED_On>
  }
  else
  {
    BSP_LED_Off(LED_GREEN);
 8004194:	f000 bfec 	b.w	8005170 <BSP_LED_Off>

08004198 <Led_Blink>:
/**
 * @brief Blink LED for 'count' cycles of 'period' period and 'duty' ON duration.
 * duty < 0 tells to start with an OFF state.
 */
void Led_Blink(int period, int duty, int count)
{
 8004198:	b570      	push	{r4, r5, r6, lr}
  if ( (duty > 0) && (period >= duty) )
 800419a:	1e0c      	subs	r4, r1, #0
{
 800419c:	4615      	mov	r5, r2
  if ( (duty > 0) && (period >= duty) )
 800419e:	dd11      	ble.n	80041c4 <Led_Blink+0x2c>
 80041a0:	4284      	cmp	r4, r0
 80041a2:	dc0e      	bgt.n	80041c2 <Led_Blink+0x2a>
    do
    {
      Led_SetState(true);
      HAL_Delay(duty);
      Led_SetState(false);
      HAL_Delay(period - duty);
 80041a4:	1b06      	subs	r6, r0, r4
    BSP_LED_On(LED_GREEN);
 80041a6:	2000      	movs	r0, #0
 80041a8:	f000 ffd8 	bl	800515c <BSP_LED_On>
      HAL_Delay(duty);
 80041ac:	4620      	mov	r0, r4
 80041ae:	f004 fd4d 	bl	8008c4c <HAL_Delay>
    BSP_LED_Off(LED_GREEN);
 80041b2:	2000      	movs	r0, #0
 80041b4:	f000 ffdc 	bl	8005170 <BSP_LED_Off>
      HAL_Delay(period - duty);
 80041b8:	4630      	mov	r0, r6
 80041ba:	f004 fd47 	bl	8008c4c <HAL_Delay>
    } while (count--);
 80041be:	3d01      	subs	r5, #1
 80041c0:	d2f1      	bcs.n	80041a6 <Led_Blink+0xe>
      HAL_Delay(period + duty);
      Led_SetState(true);
      HAL_Delay(-duty);
    } while (count--);
  }
}
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
  if ( (duty < 0) && (period >= -duty) )
 80041c4:	d0fd      	beq.n	80041c2 <Led_Blink+0x2a>
 80041c6:	4266      	negs	r6, r4
 80041c8:	4286      	cmp	r6, r0
 80041ca:	dcfa      	bgt.n	80041c2 <Led_Blink+0x2a>
      HAL_Delay(period + duty);
 80041cc:	4404      	add	r4, r0
    BSP_LED_Off(LED_GREEN);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f000 ffce 	bl	8005170 <BSP_LED_Off>
      HAL_Delay(period + duty);
 80041d4:	4620      	mov	r0, r4
 80041d6:	f004 fd39 	bl	8008c4c <HAL_Delay>
    BSP_LED_On(LED_GREEN);
 80041da:	2000      	movs	r0, #0
 80041dc:	f000 ffbe 	bl	800515c <BSP_LED_On>
      HAL_Delay(-duty);
 80041e0:	4630      	mov	r0, r6
 80041e2:	f004 fd33 	bl	8008c4c <HAL_Delay>
    } while (count--);
 80041e6:	3d01      	subs	r5, #1
 80041e8:	d2f1      	bcs.n	80041ce <Led_Blink+0x36>
 80041ea:	e7ea      	b.n	80041c2 <Led_Blink+0x2a>

080041ec <Button_WaitForPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForPush(uint32_t delay)
{
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4605      	mov	r5, r0
  uint32_t time_out = HAL_GetTick()+delay;
 80041f0:	f004 fd26 	bl	8008c40 <HAL_GetTick>
  do
  {
    if (button_flags > 1)
 80041f4:	4c0a      	ldr	r4, [pc, #40]	; (8004220 <Button_WaitForPush+0x34>)
  uint32_t time_out = HAL_GetTick()+delay;
 80041f6:	4405      	add	r5, r0
    if (button_flags > 1)
 80041f8:	7823      	ldrb	r3, [r4, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d903      	bls.n	8004206 <Button_WaitForPush+0x1a>
    {
      button_flags = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	7023      	strb	r3, [r4, #0]
      return BP_MULTIPLE_PUSH;
 8004202:	2002      	movs	r0, #2
      return BP_SINGLE_PUSH;
    }
  }
  while( HAL_GetTick() < time_out);
  return BP_NOT_PUSHED;
}
 8004204:	bd38      	pop	{r3, r4, r5, pc}
    if (button_flags == 1)
 8004206:	7823      	ldrb	r3, [r4, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	b2d8      	uxtb	r0, r3
 800420c:	d102      	bne.n	8004214 <Button_WaitForPush+0x28>
      button_flags = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	7023      	strb	r3, [r4, #0]
      return BP_SINGLE_PUSH;
 8004212:	e7f7      	b.n	8004204 <Button_WaitForPush+0x18>
  while( HAL_GetTick() < time_out);
 8004214:	f004 fd14 	bl	8008c40 <HAL_GetTick>
 8004218:	42a8      	cmp	r0, r5
 800421a:	d3ed      	bcc.n	80041f8 <Button_WaitForPush+0xc>
  return BP_NOT_PUSHED;
 800421c:	2000      	movs	r0, #0
 800421e:	e7f1      	b.n	8004204 <Button_WaitForPush+0x18>
 8004220:	20001014 	.word	0x20001014

08004224 <Button_WaitForMultiPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForMultiPush(uint32_t delay)
{
 8004224:	b508      	push	{r3, lr}
  HAL_Delay(delay);
 8004226:	f004 fd11 	bl	8008c4c <HAL_Delay>
  if (button_flags > 1)
 800422a:	4b08      	ldr	r3, [pc, #32]	; (800424c <Button_WaitForMultiPush+0x28>)
 800422c:	781a      	ldrb	r2, [r3, #0]
 800422e:	2a01      	cmp	r2, #1
 8004230:	d903      	bls.n	800423a <Button_WaitForMultiPush+0x16>
  {
    button_flags = 0;
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
    return BP_MULTIPLE_PUSH;
 8004236:	2002      	movs	r0, #2
  {
    button_flags = 0;
    return BP_SINGLE_PUSH;
  }
  return BP_NOT_PUSHED;
}
 8004238:	bd08      	pop	{r3, pc}
  if (button_flags == 1)
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	2a01      	cmp	r2, #1
 800423e:	b2d0      	uxtb	r0, r2
 8004240:	f04f 0200 	mov.w	r2, #0
    button_flags = 0;
 8004244:	bf0c      	ite	eq
 8004246:	701a      	strbeq	r2, [r3, #0]
  return BP_NOT_PUSHED;
 8004248:	4610      	movne	r0, r2
 800424a:	e7f5      	b.n	8004238 <Button_WaitForMultiPush+0x14>
 800424c:	20001014 	.word	0x20001014

08004250 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8004250:	b513      	push	{r0, r1, r4, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&console_uart, (uint8_t *) &ch, 1, 30000))
 8004252:	4c07      	ldr	r4, [pc, #28]	; (8004270 <__io_putchar+0x20>)
{
 8004254:	9001      	str	r0, [sp, #4]
  while (HAL_OK != HAL_UART_Transmit(&console_uart, (uint8_t *) &ch, 1, 30000))
 8004256:	f247 5330 	movw	r3, #30000	; 0x7530
 800425a:	2201      	movs	r2, #1
 800425c:	a901      	add	r1, sp, #4
 800425e:	4620      	mov	r0, r4
 8004260:	f008 f9e1 	bl	800c626 <HAL_UART_Transmit>
 8004264:	2800      	cmp	r0, #0
 8004266:	d1f6      	bne.n	8004256 <__io_putchar+0x6>
  {
    ;
  }
  return ch;
}
 8004268:	9801      	ldr	r0, [sp, #4]
 800426a:	b002      	add	sp, #8
 800426c:	bd10      	pop	{r4, pc}
 800426e:	bf00      	nop
 8004270:	20001018 	.word	0x20001018

08004274 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8004274:	b513      	push	{r0, r1, r4, lr}
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8004276:	2300      	movs	r3, #0
  while (HAL_OK != HAL_UART_Receive(&console_uart, (uint8_t *)&ch, 1, 30000))
 8004278:	4c08      	ldr	r4, [pc, #32]	; (800429c <__io_getchar+0x28>)
  uint8_t ch = 0;
 800427a:	f88d 3007 	strb.w	r3, [sp, #7]
  while (HAL_OK != HAL_UART_Receive(&console_uart, (uint8_t *)&ch, 1, 30000))
 800427e:	f247 5330 	movw	r3, #30000	; 0x7530
 8004282:	2201      	movs	r2, #1
 8004284:	f10d 0107 	add.w	r1, sp, #7
 8004288:	4620      	mov	r0, r4
 800428a:	f008 fa22 	bl	800c6d2 <HAL_UART_Receive>
 800428e:	2800      	cmp	r0, #0
 8004290:	d1f5      	bne.n	800427e <__io_getchar+0xa>
  {
    ;
  }
  return ch;
}
 8004292:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004296:	b002      	add	sp, #8
 8004298:	bd10      	pop	{r4, pc}
 800429a:	bf00      	nop
 800429c:	20001018 	.word	0x20001018

080042a0 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 80042a0:	2802      	cmp	r0, #2
 80042a2:	d008      	beq.n	80042b6 <HAL_GPIO_EXTI_Callback+0x16>
 80042a4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80042a8:	d107      	bne.n	80042ba <HAL_GPIO_EXTI_Callback+0x1a>
  button_flags++;
 80042aa:	4a04      	ldr	r2, [pc, #16]	; (80042bc <HAL_GPIO_EXTI_Callback+0x1c>)
 80042ac:	7813      	ldrb	r3, [r2, #0]
 80042ae:	3301      	adds	r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	7013      	strb	r3, [r2, #0]
}
 80042b4:	4770      	bx	lr
      break;
    }

	case (GPIO_PIN_1):
	{
		SPI_WIFI_ISR();
 80042b6:	f000 bdb5 	b.w	8004e24 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 80042ba:	4770      	bx	lr
 80042bc:	20001014 	.word	0x20001014

080042c0 <SPI3_IRQHandler>:


void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 80042c0:	4801      	ldr	r0, [pc, #4]	; (80042c8 <SPI3_IRQHandler+0x8>)
 80042c2:	f007 bdb7 	b.w	800be34 <HAL_SPI_IRQHandler>
 80042c6:	bf00      	nop
 80042c8:	20001228 	.word	0x20001228

080042cc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80042cc:	b508      	push	{r3, lr}
  while(1)
  {
    BSP_LED_Toggle(LED_GREEN);
 80042ce:	2000      	movs	r0, #0
 80042d0:	f000 ff58 	bl	8005184 <BSP_LED_Toggle>
    HAL_Delay(200);
 80042d4:	20c8      	movs	r0, #200	; 0xc8
 80042d6:	f004 fcb9 	bl	8008c4c <HAL_Delay>
  while(1)
 80042da:	e7f8      	b.n	80042ce <Error_Handler+0x2>

080042dc <main>:
{
 80042dc:	b530      	push	{r4, r5, lr}
 80042de:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80042e0:	f004 fc9a 	bl	8008c18 <HAL_Init>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80042e4:	2214      	movs	r2, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80042e6:	23b0      	movs	r3, #176	; 0xb0
 80042e8:	f04f 0e00 	mov.w	lr, #0
  RCC_OscInitStruct.PLL.PLLM = 6;
 80042ec:	2106      	movs	r1, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80042ee:	2501      	movs	r5, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80042f0:	e9cd e30c 	strd	lr, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 20;
 80042f4:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042f8:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80042fa:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042fc:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80042fe:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004300:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004304:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004308:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800430a:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800430c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800430e:	f005 fdf1 	bl	8009ef4 <HAL_RCC_OscConfig>
 8004312:	b108      	cbz	r0, 8004318 <main+0x3c>
    Error_Handler();
 8004314:	f7ff ffda 	bl	80042cc <Error_Handler>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004318:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800431c:	f04f 0c0f 	mov.w	ip, #15
 8004320:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004322:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004324:	2104      	movs	r1, #4
 8004326:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004328:	e9cd c300 	strd	ip, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800432c:	f006 f814 	bl	800a358 <HAL_RCC_ClockConfig>
 8004330:	4604      	mov	r4, r0
 8004332:	2800      	cmp	r0, #0
 8004334:	d1ee      	bne.n	8004314 <main+0x38>
  HAL_RCCEx_EnableMSIPLLMode();
 8004336:	f006 fbd7 	bl	800aae8 <HAL_RCCEx_EnableMSIPLLMode>
  Periph_Config();
 800433a:	f000 f889 	bl	8004450 <Periph_Config>
  MX_TIM6_Init();
 800433e:	f000 f8f9 	bl	8004534 <MX_TIM6_Init>
  */
static void MX_NVIC_Init(void)
{

  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004342:	4622      	mov	r2, r4
 8004344:	4621      	mov	r1, r4
 8004346:	2036      	movs	r0, #54	; 0x36
 8004348:	f004 fca0 	bl	8008c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800434c:	2036      	movs	r0, #54	; 0x36
 800434e:	f004 fccf 	bl	8008cf0 <HAL_NVIC_EnableIRQ>
  BSP_LED_Init(LED_GREEN);
 8004352:	4620      	mov	r0, r4
 8004354:	f000 fee0 	bl	8005118 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8004358:	4629      	mov	r1, r5
 800435a:	4620      	mov	r0, r4
 800435c:	f000 ff1c 	bl	8005198 <BSP_PB_Init>
  hrng.Instance = RNG;
 8004360:	481f      	ldr	r0, [pc, #124]	; (80043e0 <main+0x104>)
 8004362:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <main+0x108>)
 8004364:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004366:	f006 fbc7 	bl	800aaf8 <HAL_RNG_Init>
 800436a:	4603      	mov	r3, r0
 800436c:	2800      	cmp	r0, #0
 800436e:	d1d1      	bne.n	8004314 <main+0x38>
  hrtc.Instance = RTC;
 8004370:	481d      	ldr	r0, [pc, #116]	; (80043e8 <main+0x10c>)
 8004372:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <main+0x110>)
  hrtc.Init.SynchPrediv = 255;
 8004374:	257f      	movs	r5, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004376:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 800437a:	22ff      	movs	r2, #255	; 0xff
 800437c:	e9c0 5202 	strd	r5, r2, [r0, #8]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004380:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004384:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004388:	f006 fc29 	bl	800abde <HAL_RTC_Init>
 800438c:	2800      	cmp	r0, #0
 800438e:	d1c1      	bne.n	8004314 <main+0x38>
  console_uart.Instance = USART1;
 8004390:	4917      	ldr	r1, [pc, #92]	; (80043f0 <main+0x114>)
  console_uart.Init.BaudRate = 115200;
 8004392:	4c18      	ldr	r4, [pc, #96]	; (80043f4 <main+0x118>)
  console_uart.Init.Parity = UART_PARITY_NONE;
 8004394:	6148      	str	r0, [r1, #20]
  console_uart.Init.BaudRate = 115200;
 8004396:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800439a:	e9c1 4201 	strd	r4, r2, [r1, #4]
  console_uart.Init.Mode = UART_MODE_TX_RX;
 800439e:	220c      	movs	r2, #12
  console_uart.Init.StopBits = UART_STOPBITS_1;
 80043a0:	e9c1 0003 	strd	r0, r0, [r1, #12]
  console_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043a4:	e9c1 2006 	strd	r2, r0, [r1, #24]
  console_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043a8:	e9c1 0008 	strd	r0, r0, [r1, #32]
  console_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043ac:	6288      	str	r0, [r1, #40]	; 0x28
  BSP_COM_Init(COM1,&console_uart);
 80043ae:	3104      	adds	r1, #4
 80043b0:	f000 ff30 	bl	8005214 <BSP_COM_Init>
  int res = init_sensors();
 80043b4:	f7fe fce4 	bl	8002d80 <init_sensors>
   if(0 != res)
 80043b8:	4604      	mov	r4, r0
 80043ba:	b140      	cbz	r0, 80043ce <main+0xf2>
     msg_error("init_sensors returned error : %d\n", res);
 80043bc:	490e      	ldr	r1, [pc, #56]	; (80043f8 <main+0x11c>)
 80043be:	480f      	ldr	r0, [pc, #60]	; (80043fc <main+0x120>)
 80043c0:	2278      	movs	r2, #120	; 0x78
 80043c2:	f01f f989 	bl	80236d8 <iprintf>
 80043c6:	480e      	ldr	r0, [pc, #56]	; (8004400 <main+0x124>)
 80043c8:	4621      	mov	r1, r4
 80043ca:	f01f f985 	bl	80236d8 <iprintf>
  HAL_TIM_Base_Start_IT(&htim6);
 80043ce:	480d      	ldr	r0, [pc, #52]	; (8004404 <main+0x128>)
 80043d0:	f007 fdaf 	bl	800bf32 <HAL_TIM_Base_Start_IT>
  genericmqtt_client_XCube_sample_run();
 80043d4:	f7ff fa50 	bl	8003878 <genericmqtt_client_XCube_sample_run>
}
 80043d8:	2000      	movs	r0, #0
 80043da:	b017      	add	sp, #92	; 0x5c
 80043dc:	bd30      	pop	{r4, r5, pc}
 80043de:	bf00      	nop
 80043e0:	200011d8 	.word	0x200011d8
 80043e4:	50060800 	.word	0x50060800
 80043e8:	20001174 	.word	0x20001174
 80043ec:	40002800 	.word	0x40002800
 80043f0:	20001014 	.word	0x20001014
 80043f4:	40013800 	.word	0x40013800
 80043f8:	080285e8 	.word	0x080285e8
 80043fc:	0802da5d 	.word	0x0802da5d
 8004400:	0802dab7 	.word	0x0802dab7
 8004404:	20001198 	.word	0x20001198

08004408 <HAL_TIM_PeriodElapsedCallback>:
{
 8004408:	b510      	push	{r4, lr}
	pub_data.temperature = BSP_TSENSOR_ReadTemp();
 800440a:	f001 f841 	bl	8005490 <BSP_TSENSOR_ReadTemp>
 800440e:	4c0e      	ldr	r4, [pc, #56]	; (8004448 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004410:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  pub_data.humidity = BSP_HSENSOR_ReadHumidity();
 8004414:	f000 ffde 	bl	80053d4 <BSP_HSENSOR_ReadHumidity>
 8004418:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
  pub_data.pressure = BSP_PSENSOR_ReadPressure();
 800441c:	f001 f81e 	bl	800545c <BSP_PSENSOR_ReadPressure>
  BSP_ACCELERO_AccGetXYZ(pub_data.ACC_Value);
 8004420:	f104 0014 	add.w	r0, r4, #20
  pub_data.pressure = BSP_PSENSOR_ReadPressure();
 8004424:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
  BSP_ACCELERO_AccGetXYZ(pub_data.ACC_Value);
 8004428:	f000 ff98 	bl	800535c <BSP_ACCELERO_AccGetXYZ>
  BSP_GYRO_GetXYZ(pub_data.GYR_Value);
 800442c:	f104 001c 	add.w	r0, r4, #28
 8004430:	f000 ffb2 	bl	8005398 <BSP_GYRO_GetXYZ>
  BSP_MAGNETO_GetXYZ(pub_data.MAG_Value);
 8004434:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004438:	f000 fff2 	bl	8005420 <BSP_MAGNETO_GetXYZ>
  i++;
 800443c:	4a03      	ldr	r2, [pc, #12]	; (800444c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800443e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8004440:	3301      	adds	r3, #1
 8004442:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8004444:	bd10      	pop	{r4, pc}
 8004446:	bf00      	nop
 8004448:	20000024 	.word	0x20000024
 800444c:	20001014 	.word	0x20001014

08004450 <Periph_Config>:
/**
  * Initializes the Global MSP.
  */

 void Periph_Config(void)
 {
 8004450:	b500      	push	{lr}
 8004452:	b0a5      	sub	sp, #148	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection  = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8004454:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <Periph_Config+0x50>)
 8004456:	9302      	str	r3, [sp, #8]
                                       |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
                                       |RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart1ClockSelection  = RCC_USART1CLKSOURCE_PCLK2;
 8004458:	2300      	movs	r3, #0
 800445a:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection  = RCC_USART3CLKSOURCE_PCLK1;
 800445c:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.I2c2ClockSelection    = RCC_I2C2CLKSOURCE_PCLK1;
 800445e:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.RngClockSelection     = RCC_RNGCLKSOURCE_MSI;
 8004460:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8004464:	931f      	str	r3, [sp, #124]	; 0x7c

  PeriphClkInit.RTCClockSelection     = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004466:	a802      	add	r0, sp, #8
  PeriphClkInit.RTCClockSelection     = RCC_RTCCLKSOURCE_LSE;
 8004468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800446c:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800446e:	f006 f951 	bl	800a714 <HAL_RCCEx_PeriphCLKConfig>
 8004472:	b108      	cbz	r0, 8004478 <Periph_Config+0x28>
  {
    Error_Handler();
 8004474:	f7ff ff2a 	bl	80042cc <Error_Handler>
  }

   __HAL_RCC_PWR_CLK_ENABLE();
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <Periph_Config+0x54>)
 800447a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800447c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004480:	659a      	str	r2, [r3, #88]	; 0x58
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	9301      	str	r3, [sp, #4]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800448a:	f44f 7000 	mov.w	r0, #512	; 0x200
   __HAL_RCC_PWR_CLK_ENABLE();
 800448e:	9b01      	ldr	r3, [sp, #4]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004490:	f005 fc52 	bl	8009d38 <HAL_PWREx_ControlVoltageScaling>
 8004494:	b108      	cbz	r0, 800449a <Periph_Config+0x4a>
  {
    Error_Handler();
 8004496:	f7ff ff19 	bl	80042cc <Error_Handler>
  }
}
 800449a:	b025      	add	sp, #148	; 0x94
 800449c:	f85d fb04 	ldr.w	pc, [sp], #4
 80044a0:	00060085 	.word	0x00060085
 80044a4:	40021000 	.word	0x40021000

080044a8 <HAL_RNG_MspInit>:


void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 80044a8:	6802      	ldr	r2, [r0, #0]
 80044aa:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RNG_MspInit+0x28>)
 80044ac:	429a      	cmp	r2, r3
{
 80044ae:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 80044b0:	d10c      	bne.n	80044cc <HAL_RNG_MspInit+0x24>
  {
      /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80044b2:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80044b6:	f5a3 337e 	sub.w	r3, r3, #260096	; 0x3f800
 80044ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80044c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	9b01      	ldr	r3, [sp, #4]
  }
}
 80044cc:	b002      	add	sp, #8
 80044ce:	4770      	bx	lr
 80044d0:	50060800 	.word	0x50060800

080044d4 <HAL_RTC_MspInit>:
  }
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80044d4:	6802      	ldr	r2, [r0, #0]
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RTC_MspInit+0x18>)
 80044d8:	429a      	cmp	r2, r3
  {
    __HAL_RCC_RTC_ENABLE();
 80044da:	bf01      	itttt	eq
 80044dc:	4a04      	ldreq	r2, [pc, #16]	; (80044f0 <HAL_RTC_MspInit+0x1c>)
 80044de:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 80044e2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 80044e6:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
  }
}
 80044ea:	4770      	bx	lr
 80044ec:	40002800 	.word	0x40002800
 80044f0:	40021000 	.word	0x40021000

080044f4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80044f4:	4770      	bx	lr

080044f6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80044f6:	e7fe      	b.n	80044f6 <HardFault_Handler>

080044f8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80044f8:	e7fe      	b.n	80044f8 <MemManage_Handler>

080044fa <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80044fa:	e7fe      	b.n	80044fa <BusFault_Handler>

080044fc <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80044fc:	e7fe      	b.n	80044fc <UsageFault_Handler>

080044fe <SVC_Handler>:
 80044fe:	4770      	bx	lr

08004500 <DebugMon_Handler>:
 8004500:	4770      	bx	lr

08004502 <PendSV_Handler>:
 8004502:	4770      	bx	lr

08004504 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004504:	b508      	push	{r3, lr}
  HAL_IncTick();
 8004506:	f004 fb93 	bl	8008c30 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
}
 800450a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800450e:	f004 bc24 	b.w	8008d5a <HAL_SYSTICK_IRQHandler>
	...

08004514 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004514:	4801      	ldr	r0, [pc, #4]	; (800451c <TIM2_IRQHandler+0x8>)
 8004516:	f007 bd1b 	b.w	800bf50 <HAL_TIM_IRQHandler>
 800451a:	bf00      	nop
 800451c:	20001198 	.word	0x20001198

08004520 <TIM6_DAC_IRQHandler>:
 8004520:	f7ff bff8 	b.w	8004514 <TIM2_IRQHandler>

08004524 <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004524:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004528:	f004 bf2a 	b.w	8009380 <HAL_GPIO_EXTI_IRQHandler>

0800452c <EXTI1_IRQHandler>:
}


void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);		
 800452c:	2002      	movs	r0, #2
 800452e:	f004 bf27 	b.w	8009380 <HAL_GPIO_EXTI_IRQHandler>
	...

08004534 <MX_TIM6_Init>:

extern TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN TIM6_Init 1 */
  #define BASE_1s	10000
  #define BASE_1ms	10

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004536:	480f      	ldr	r0, [pc, #60]	; (8004574 <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = BASE_1s;
 8004538:	4a0f      	ldr	r2, [pc, #60]	; (8004578 <MX_TIM6_Init+0x44>)
 800453a:	f242 7310 	movw	r3, #10000	; 0x2710
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800453e:	2400      	movs	r4, #0
  htim6.Init.Prescaler = BASE_1s;
 8004540:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 8000;
 8004544:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004548:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800454c:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800454e:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 8000;
 8004550:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004552:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004554:	f007 fe04 	bl	800c160 <HAL_TIM_Base_Init>
 8004558:	b108      	cbz	r0, 800455e <MX_TIM6_Init+0x2a>
  {
    Error_Handler();
 800455a:	f7ff feb7 	bl	80042cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800455e:	4805      	ldr	r0, [pc, #20]	; (8004574 <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004560:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004562:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004564:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004566:	f007 fe15 	bl	800c194 <HAL_TIMEx_MasterConfigSynchronization>
 800456a:	b108      	cbz	r0, 8004570 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800456c:	f7ff feae 	bl	80042cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004570:	b004      	add	sp, #16
 8004572:	bd10      	pop	{r4, pc}
 8004574:	20001198 	.word	0x20001198
 8004578:	40001000 	.word	0x40001000

0800457c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800457c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 800457e:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <HAL_TIM_Base_MspInit+0x3c>)
 8004580:	6802      	ldr	r2, [r0, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d115      	bne.n	80045b2 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004586:	f503 3300 	add.w	r3, r3, #131072	; 0x20000

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800458a:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800458c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800458e:	f042 0210 	orr.w	r2, r2, #16
 8004592:	659a      	str	r2, [r3, #88]	; 0x58
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004596:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800459e:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80045a0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80045a2:	f004 fb73 	bl	8008c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045a6:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80045a8:	b003      	add	sp, #12
 80045aa:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80045ae:	f004 bb9f 	b.w	8008cf0 <HAL_NVIC_EnableIRQ>
}
 80045b2:	b003      	add	sp, #12
 80045b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80045b8:	40001000 	.word	0x40001000

080045bc <_I2CWrite>:
int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count);

/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 80045bc:	b507      	push	{r0, r1, r2, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80045be:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	b293      	uxth	r3, r2
 80045c6:	460a      	mov	r2, r1
 80045c8:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
 80045cc:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80045d0:	f005 f8da 	bl	8009788 <HAL_I2C_Master_Transmit>
    
    return status;
}
 80045d4:	b003      	add	sp, #12
 80045d6:	f85d fb04 	ldr.w	pc, [sp], #4

080045da <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 80045da:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80045dc:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80045e0:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80045ea:	b293      	uxth	r3, r2
 80045ec:	460a      	mov	r2, r1
 80045ee:	f044 0101 	orr.w	r1, r4, #1
 80045f2:	f005 f963 	bl	80098bc <HAL_I2C_Master_Receive>
    
    return status;
}
 80045f6:	b002      	add	sp, #8
 80045f8:	bd10      	pop	{r4, pc}

080045fa <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
 80045fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045fc:	4615      	mov	r5, r2
 80045fe:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004602:	2201      	movs	r2, #1
 8004604:	f10d 0107 	add.w	r1, sp, #7
{
 8004608:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800460a:	f7ff ffd7 	bl	80045bc <_I2CWrite>
    
    if (status_int)
 800460e:	b928      	cbnz	r0, 800461c <VL53L0X_RdByte+0x22>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8004610:	2201      	movs	r2, #1
 8004612:	4629      	mov	r1, r5
 8004614:	4620      	mov	r0, r4
 8004616:	f7ff ffe0 	bl	80045da <_I2CRead>
    
    if (status_int != 0)
 800461a:	b108      	cbz	r0, 8004620 <VL53L0X_RdByte+0x26>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800461c:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8004620:	b003      	add	sp, #12
 8004622:	bd30      	pop	{r4, r5, pc}

08004624 <VL53L0X_WriteMulti>:
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8004624:	2b3f      	cmp	r3, #63	; 0x3f
{
 8004626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004628:	460e      	mov	r6, r1
 800462a:	4605      	mov	r5, r0
 800462c:	4611      	mov	r1, r2
 800462e:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 8004630:	d811      	bhi.n	8004656 <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 8004632:	4f0a      	ldr	r7, [pc, #40]	; (800465c <VL53L0X_WriteMulti+0x38>)
 8004634:	4638      	mov	r0, r7
    memcpy(&_I2CBuffer[1], pdata, count);
 8004636:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 8004638:	f800 6b01 	strb.w	r6, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 800463c:	f01d ff20 	bl	8022480 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8004640:	1c62      	adds	r2, r4, #1
 8004642:	4639      	mov	r1, r7
 8004644:	4628      	mov	r0, r5
 8004646:	f7ff ffb9 	bl	80045bc <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800464a:	2800      	cmp	r0, #0
 800464c:	bf0c      	ite	eq
 800464e:	2000      	moveq	r0, #0
 8004650:	f06f 0013 	mvnne.w	r0, #19
    }
    
    return Status;
}
 8004654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 8004656:	f06f 0003 	mvn.w	r0, #3
 800465a:	e7fb      	b.n	8004654 <VL53L0X_WriteMulti+0x30>
 800465c:	200011e8 	.word	0x200011e8

08004660 <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 8004660:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004662:	4615      	mov	r5, r2
 8004664:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8004668:	2201      	movs	r2, #1
 800466a:	f10d 0107 	add.w	r1, sp, #7
{
 800466e:	4604      	mov	r4, r0
 8004670:	461e      	mov	r6, r3
    status_int = _I2CWrite(Dev, &index, 1);
 8004672:	f7ff ffa3 	bl	80045bc <_I2CWrite>
    
    if (status_int != 0) {
 8004676:	b928      	cbnz	r0, 8004684 <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8004678:	4632      	mov	r2, r6
 800467a:	4629      	mov	r1, r5
 800467c:	4620      	mov	r0, r4
 800467e:	f7ff ffac 	bl	80045da <_I2CRead>
    
    if (status_int != 0) {
 8004682:	b108      	cbz	r0, 8004688 <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004684:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8004688:	b002      	add	sp, #8
 800468a:	bd70      	pop	{r4, r5, r6, pc}

0800468c <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800468c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800468e:	4614      	mov	r4, r2
 8004690:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004694:	2201      	movs	r2, #1
 8004696:	f10d 0107 	add.w	r1, sp, #7
{
 800469a:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800469c:	f7ff ff8e 	bl	80045bc <_I2CWrite>

    if (status_int)
 80046a0:	b118      	cbz	r0, 80046aa <VL53L0X_RdWord+0x1e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80046a2:	f06f 0013 	mvn.w	r0, #19
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    return Status;
}
 80046a6:	b002      	add	sp, #8
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80046aa:	4d07      	ldr	r5, [pc, #28]	; (80046c8 <VL53L0X_RdWord+0x3c>)
 80046ac:	2202      	movs	r2, #2
 80046ae:	4629      	mov	r1, r5
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7ff ff92 	bl	80045da <_I2CRead>
    if (status_int != 0)
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d1f3      	bne.n	80046a2 <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80046ba:	782a      	ldrb	r2, [r5, #0]
 80046bc:	786b      	ldrb	r3, [r5, #1]
 80046be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80046c2:	8023      	strh	r3, [r4, #0]
 80046c4:	e7ef      	b.n	80046a6 <VL53L0X_RdWord+0x1a>
 80046c6:	bf00      	nop
 80046c8:	200011e8 	.word	0x200011e8

080046cc <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 80046cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046ce:	4614      	mov	r4, r2
 80046d0:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80046d4:	2201      	movs	r2, #1
 80046d6:	f10d 0107 	add.w	r1, sp, #7
{
 80046da:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 80046dc:	f7ff ff6e 	bl	80045bc <_I2CWrite>
    
    if (status_int != 0) {
 80046e0:	b118      	cbz	r0, 80046ea <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80046e2:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    return Status;
}
 80046e6:	b002      	add	sp, #8
 80046e8:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80046ea:	4d0a      	ldr	r5, [pc, #40]	; (8004714 <VL53L0X_RdDWord+0x48>)
 80046ec:	2204      	movs	r2, #4
 80046ee:	4629      	mov	r1, r5
 80046f0:	4630      	mov	r0, r6
 80046f2:	f7ff ff72 	bl	80045da <_I2CRead>
    if (status_int != 0) {
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d1f3      	bne.n	80046e2 <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80046fa:	786b      	ldrb	r3, [r5, #1]
 80046fc:	782a      	ldrb	r2, [r5, #0]
 80046fe:	041b      	lsls	r3, r3, #16
 8004700:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8004704:	78ea      	ldrb	r2, [r5, #3]
 8004706:	4413      	add	r3, r2
 8004708:	78aa      	ldrb	r2, [r5, #2]
 800470a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800470e:	6023      	str	r3, [r4, #0]
 8004710:	e7e9      	b.n	80046e6 <VL53L0X_RdDWord+0x1a>
 8004712:	bf00      	nop
 8004714:	200011e8 	.word	0x200011e8

08004718 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
 8004718:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <VL53L0X_WrByte+0x1c>)
 800471c:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 800471e:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004720:	4619      	mov	r1, r3
 8004722:	2202      	movs	r2, #2
 8004724:	f7ff ff4a 	bl	80045bc <_I2CWrite>
    
    if (status_int != 0) {
 8004728:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 800472a:	bf14      	ite	ne
 800472c:	f06f 0013 	mvnne.w	r0, #19
 8004730:	2000      	moveq	r0, #0
 8004732:	bd08      	pop	{r3, pc}
 8004734:	200011e8 	.word	0x200011e8

08004738 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
 8004738:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <VL53L0X_WrWord+0x20>)
 800473c:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 800473e:	0a11      	lsrs	r1, r2, #8
 8004740:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8004742:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8004744:	4619      	mov	r1, r3
 8004746:	2203      	movs	r2, #3
 8004748:	f7ff ff38 	bl	80045bc <_I2CWrite>
    
    if (status_int != 0) {
 800474c:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 800474e:	bf14      	ite	ne
 8004750:	f06f 0013 	mvnne.w	r0, #19
 8004754:	2000      	moveq	r0, #0
 8004756:	bd08      	pop	{r3, pc}
 8004758:	200011e8 	.word	0x200011e8

0800475c <VL53L0X_UpdateByte>:

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData)
{
 800475c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800475e:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8004760:	f10d 0207 	add.w	r2, sp, #7
{
 8004764:	4606      	mov	r6, r0
 8004766:	460f      	mov	r7, r1
 8004768:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 800476a:	f7ff ff46 	bl	80045fa <VL53L0X_RdByte>
    
    if (Status) {
 800476e:	b948      	cbnz	r0, 8004784 <VL53L0X_UpdateByte+0x28>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8004770:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004774:	402a      	ands	r2, r5
 8004776:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 8004778:	4639      	mov	r1, r7
 800477a:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 800477c:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 8004780:	f7ff ffca 	bl	8004718 <VL53L0X_WrByte>
done:
    return Status;
}
 8004784:	b003      	add	sp, #12
 8004786:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004788 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
 8004788:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    /* do nothing */
    VL53L0X_OsDelay();
 800478a:	2002      	movs	r0, #2
 800478c:	f004 fa5e 	bl	8008c4c <HAL_Delay>
    return status;
}
 8004790:	2000      	movs	r0, #0
 8004792:	bd08      	pop	{r3, pc}

08004794 <SetupSingleShot.part.0>:
}

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t* pDev)
 8004794:	b513      	push	{r0, r1, r4, lr}
 8004796:	4604      	mov	r4, r0
  uint8_t preRangeVcselPeriod = 14;
  uint8_t finalRangeVcselPeriod = 10;
                          
  if (pDev->Present)
  {
    status = VL53L0X_StaticInit(pDev);
 8004798:	f001 fe0e 	bl	80063b8 <VL53L0X_StaticInit>
    if (status)
 800479c:	b110      	cbz	r0, 80047a4 <SetupSingleShot.part.0+0x10>
    {
      printf("VL53L0X_StaticInit failed\n");
 800479e:	4833      	ldr	r0, [pc, #204]	; (800486c <SetupSingleShot.part.0+0xd8>)
 80047a0:	f01f f836 	bl	8023810 <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 80047a4:	f10d 0202 	add.w	r2, sp, #2
 80047a8:	f10d 0101 	add.w	r1, sp, #1
 80047ac:	4620      	mov	r0, r4
 80047ae:	f001 fbe5 	bl	8005f7c <VL53L0X_PerformRefCalibration>
    if (status)
 80047b2:	b110      	cbz	r0, 80047ba <SetupSingleShot.part.0+0x26>
    {
      printf("VL53L0X_PerformRefCalibration failed\n");
 80047b4:	482e      	ldr	r0, [pc, #184]	; (8004870 <SetupSingleShot.part.0+0xdc>)
 80047b6:	f01f f82b 	bl	8023810 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 80047ba:	f10d 0203 	add.w	r2, sp, #3
 80047be:	a901      	add	r1, sp, #4
 80047c0:	4620      	mov	r0, r4
 80047c2:	f001 fefe 	bl	80065c2 <VL53L0X_PerformRefSpadManagement>
    if (status)
 80047c6:	b110      	cbz	r0, 80047ce <SetupSingleShot.part.0+0x3a>
    {
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 80047c8:	482a      	ldr	r0, [pc, #168]	; (8004874 <SetupSingleShot.part.0+0xe0>)
 80047ca:	f01f f821 	bl	8023810 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_SINGLE_RANGING); /* Setup in single ranging mode */
 80047ce:	2100      	movs	r1, #0
 80047d0:	4620      	mov	r0, r4
 80047d2:	f001 f97f 	bl	8005ad4 <VL53L0X_SetDeviceMode>
    if (status)
 80047d6:	b110      	cbz	r0, 80047de <SetupSingleShot.part.0+0x4a>
    {
      printf("VL53L0X_SetDeviceMode failed\n");
 80047d8:	4827      	ldr	r0, [pc, #156]	; (8004878 <SetupSingleShot.part.0+0xe4>)
 80047da:	f01f f819 	bl	8023810 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); /* Enable Sigma limit */
 80047de:	2201      	movs	r2, #1
 80047e0:	2100      	movs	r1, #0
 80047e2:	4620      	mov	r0, r4
 80047e4:	f001 fa54 	bl	8005c90 <VL53L0X_SetLimitCheckEnable>
    if (status)
 80047e8:	b110      	cbz	r0, 80047f0 <SetupSingleShot.part.0+0x5c>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80047ea:	4824      	ldr	r0, [pc, #144]	; (800487c <SetupSingleShot.part.0+0xe8>)
 80047ec:	f01f f810 	bl	8023810 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); /* Enable Signa limit */
 80047f0:	2201      	movs	r2, #1
 80047f2:	4611      	mov	r1, r2
 80047f4:	4620      	mov	r0, r4
 80047f6:	f001 fa4b 	bl	8005c90 <VL53L0X_SetLimitCheckEnable>
    if (status)
 80047fa:	b110      	cbz	r0, 8004802 <SetupSingleShot.part.0+0x6e>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80047fc:	481f      	ldr	r0, [pc, #124]	; (800487c <SetupSingleShot.part.0+0xe8>)
 80047fe:	f01f f807 	bl	8023810 <puts>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8004802:	f641 1299 	movw	r2, #6553	; 0x1999
 8004806:	2101      	movs	r1, #1
 8004808:	4620      	mov	r0, r4
 800480a:	f001 fa8c 	bl	8005d26 <VL53L0X_SetLimitCheckValue>
    
    if (status)
 800480e:	b110      	cbz	r0, 8004816 <SetupSingleShot.part.0+0x82>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8004810:	481b      	ldr	r0, [pc, #108]	; (8004880 <SetupSingleShot.part.0+0xec>)
 8004812:	f01e fffd 	bl	8023810 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8004816:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800481a:	2100      	movs	r1, #0
 800481c:	4620      	mov	r0, r4
 800481e:	f001 fa82 	bl	8005d26 <VL53L0X_SetLimitCheckValue>
    if (status)
 8004822:	b110      	cbz	r0, 800482a <SetupSingleShot.part.0+0x96>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8004824:	4816      	ldr	r0, [pc, #88]	; (8004880 <SetupSingleShot.part.0+0xec>)
 8004826:	f01e fff3 	bl	8023810 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pDev,  timingBudget);
 800482a:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800482e:	4620      	mov	r0, r4
 8004830:	f001 f96c 	bl	8005b0c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if (status)
 8004834:	b110      	cbz	r0, 800483c <SetupSingleShot.part.0+0xa8>
    {
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8004836:	4813      	ldr	r0, [pc, #76]	; (8004884 <SetupSingleShot.part.0+0xf0>)
 8004838:	f01e ffea 	bl	8023810 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800483c:	2212      	movs	r2, #18
 800483e:	2100      	movs	r1, #0
 8004840:	4620      	mov	r0, r4
 8004842:	f001 f965 	bl	8005b10 <VL53L0X_SetVcselPulsePeriod>
    if (status)
 8004846:	b110      	cbz	r0, 800484e <SetupSingleShot.part.0+0xba>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8004848:	480f      	ldr	r0, [pc, #60]	; (8004888 <SetupSingleShot.part.0+0xf4>)
 800484a:	f01e ffe1 	bl	8023810 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800484e:	220e      	movs	r2, #14
 8004850:	2101      	movs	r1, #1
 8004852:	4620      	mov	r0, r4
 8004854:	f001 f95c 	bl	8005b10 <VL53L0X_SetVcselPulsePeriod>
    if (status)
 8004858:	b110      	cbz	r0, 8004860 <SetupSingleShot.part.0+0xcc>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800485a:	480b      	ldr	r0, [pc, #44]	; (8004888 <SetupSingleShot.part.0+0xf4>)
 800485c:	f01e ffd8 	bl	8023810 <puts>
    }
    
    pDev->LeakyFirst = 1;
 8004860:	2301      	movs	r3, #1
 8004862:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  }
}
 8004866:	b002      	add	sp, #8
 8004868:	bd10      	pop	{r4, pc}
 800486a:	bf00      	nop
 800486c:	0802f699 	.word	0x0802f699
 8004870:	0802f6b3 	.word	0x0802f6b3
 8004874:	0802f6d8 	.word	0x0802f6d8
 8004878:	0802f700 	.word	0x0802f700
 800487c:	0802f71d 	.word	0x0802f71d
 8004880:	0802f740 	.word	0x0802f740
 8004884:	0802f762 	.word	0x0802f762
 8004888:	0802f798 	.word	0x0802f798

0800488c <VL53L0X_PROXIMITY_GetDistance>:
{
 800488c:	b500      	push	{lr}
 800488e:	b089      	sub	sp, #36	; 0x24
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8004890:	a901      	add	r1, sp, #4
 8004892:	4804      	ldr	r0, [pc, #16]	; (80048a4 <VL53L0X_PROXIMITY_GetDistance+0x18>)
 8004894:	f001 fced 	bl	8006272 <VL53L0X_PerformSingleRangingMeasurement>
}
 8004898:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800489c:	b009      	add	sp, #36	; 0x24
 800489e:	f85d fb04 	ldr.w	pc, [sp], #4
 80048a2:	bf00      	nop
 80048a4:	20000064 	.word	0x20000064

080048a8 <VL53L0X_PROXIMITY_MspInit>:
{
 80048a8:	b530      	push	{r4, r5, lr}
 80048aa:	b087      	sub	sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048ac:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ae:	2401      	movs	r4, #1
 80048b0:	2540      	movs	r5, #64	; 0x40
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80048b2:	a901      	add	r1, sp, #4
 80048b4:	4808      	ldr	r0, [pc, #32]	; (80048d8 <VL53L0X_PROXIMITY_MspInit+0x30>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048b6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048b8:	e9cd 5401 	strd	r5, r4, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048bc:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80048be:	f004 fc71 	bl	80091a4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 80048c2:	4622      	mov	r2, r4
 80048c4:	4629      	mov	r1, r5
 80048c6:	4804      	ldr	r0, [pc, #16]	; (80048d8 <VL53L0X_PROXIMITY_MspInit+0x30>)
 80048c8:	f004 fd50 	bl	800936c <HAL_GPIO_WritePin>
  HAL_Delay(1000);  
 80048cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048d0:	f004 f9bc 	bl	8008c4c <HAL_Delay>
}
 80048d4:	b007      	add	sp, #28
 80048d6:	bd30      	pop	{r4, r5, pc}
 80048d8:	48000800 	.word	0x48000800

080048dc <VL53L0X_PROXIMITY_Init>:
{
 80048dc:	b510      	push	{r4, lr}
 80048de:	b09a      	sub	sp, #104	; 0x68
  uint16_t vl53l0x_id = 0; 
 80048e0:	2400      	movs	r4, #0
 80048e2:	f8ad 4002 	strh.w	r4, [sp, #2]
  SENSOR_IO_Init();
 80048e6:	f000 fcd9 	bl	800529c <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 80048ea:	f7ff ffdd 	bl	80048a8 <VL53L0X_PROXIMITY_MspInit>
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 80048ee:	4621      	mov	r1, r4
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 80048f0:	4c14      	ldr	r4, [pc, #80]	; (8004944 <VL53L0X_PROXIMITY_Init+0x68>)
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 80048f2:	2263      	movs	r2, #99	; 0x63
 80048f4:	a801      	add	r0, sp, #4
 80048f6:	f01d fdeb 	bl	80224d0 <memset>
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 80048fa:	a901      	add	r1, sp, #4
 80048fc:	4620      	mov	r0, r4
 80048fe:	f001 f8e7 	bl	8005ad0 <VL53L0X_GetDeviceInfo>
 8004902:	b9e0      	cbnz	r0, 800493e <VL53L0X_PROXIMITY_Init+0x62>
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 8004904:	f10d 0202 	add.w	r2, sp, #2
 8004908:	21c0      	movs	r1, #192	; 0xc0
 800490a:	4620      	mov	r0, r4
 800490c:	f7ff febe 	bl	800468c <VL53L0X_RdWord>
 8004910:	b988      	cbnz	r0, 8004936 <VL53L0X_PROXIMITY_Init+0x5a>
      if (vl53l0x_id == VL53L0X_ID)
 8004912:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004916:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 800491a:	429a      	cmp	r2, r3
 800491c:	d109      	bne.n	8004932 <VL53L0X_PROXIMITY_Init+0x56>
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 800491e:	4620      	mov	r0, r4
 8004920:	f001 fab2 	bl	8005e88 <VL53L0X_DataInit>
 8004924:	b928      	cbnz	r0, 8004932 <VL53L0X_PROXIMITY_Init+0x56>
          Dev.Present = 1;
 8004926:	2301      	movs	r3, #1
 8004928:	4620      	mov	r0, r4
 800492a:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  if (pDev->Present)
 800492e:	f7ff ff31 	bl	8004794 <SetupSingleShot.part.0>
}
 8004932:	b01a      	add	sp, #104	; 0x68
 8004934:	bd10      	pop	{r4, pc}
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8004936:	4804      	ldr	r0, [pc, #16]	; (8004948 <VL53L0X_PROXIMITY_Init+0x6c>)
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 8004938:	f01e ff6a 	bl	8023810 <puts>
}
 800493c:	e7f9      	b.n	8004932 <VL53L0X_PROXIMITY_Init+0x56>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 800493e:	4803      	ldr	r0, [pc, #12]	; (800494c <VL53L0X_PROXIMITY_Init+0x70>)
 8004940:	e7fa      	b.n	8004938 <VL53L0X_PROXIMITY_Init+0x5c>
 8004942:	bf00      	nop
 8004944:	20000064 	.word	0x20000064
 8004948:	0802f7bb 	.word	0x0802f7bb
 800494c:	0802f7e8 	.word	0x0802f7e8

08004950 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8004950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t       loop_per_us;
  static  uint32_t cycle_per_loop=0;

  // calibration happen on first call for a duration of 1 ms * nbcycle per loop 
  // 10 cycle for STM32L4
  if (cycle_per_loop == 0 ) 
 8004952:	4c16      	ldr	r4, [pc, #88]	; (80049ac <SPI_WIFI_DelayUs+0x5c>)
 8004954:	4f16      	ldr	r7, [pc, #88]	; (80049b0 <SPI_WIFI_DelayUs+0x60>)
 8004956:	6823      	ldr	r3, [r4, #0]
{
 8004958:	4605      	mov	r5, r0
  if (cycle_per_loop == 0 ) 
 800495a:	b98b      	cbnz	r3, 8004980 <SPI_WIFI_DelayUs+0x30>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000L);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004962:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t   t; 
     ct=cycle_per_ms;
 8004966:	9301      	str	r3, [sp, #4]
     t=HAL_GetTick();
 8004968:	f004 f96a 	bl	8008c40 <HAL_GetTick>
 800496c:	4606      	mov	r6, r0
     while(ct) ct--;
 800496e:	9b01      	ldr	r3, [sp, #4]
 8004970:	b99b      	cbnz	r3, 800499a <SPI_WIFI_DelayUs+0x4a>
     cycle_per_loop=HAL_GetTick()-t;  
 8004972:	f004 f965 	bl	8008c40 <HAL_GetTick>
     if (cycle_per_loop==0) cycle_per_loop=1;
 8004976:	1b80      	subs	r0, r0, r6
 8004978:	bf0a      	itet	eq
 800497a:	2301      	moveq	r3, #1
     cycle_per_loop=HAL_GetTick()-t;  
 800497c:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop==0) cycle_per_loop=1;
 800497e:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000/cycle_per_loop;
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <SPI_WIFI_DelayUs+0x64>)
 8004982:	6838      	ldr	r0, [r7, #0]
 8004984:	fbb0 f0f3 	udiv	r0, r0, r3
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	fbb0 f0f3 	udiv	r0, r0, r3
  ct = n * loop_per_us;
 800498e:	4368      	muls	r0, r5
 8004990:	9001      	str	r0, [sp, #4]
  while(ct) ct--;
 8004992:	9b01      	ldr	r3, [sp, #4]
 8004994:	b92b      	cbnz	r3, 80049a2 <SPI_WIFI_DelayUs+0x52>
  return;
}
 8004996:	b003      	add	sp, #12
 8004998:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 800499a:	9b01      	ldr	r3, [sp, #4]
 800499c:	3b01      	subs	r3, #1
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	e7e5      	b.n	800496e <SPI_WIFI_DelayUs+0x1e>
  while(ct) ct--;
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	e7f3      	b.n	8004992 <SPI_WIFI_DelayUs+0x42>
 80049aa:	bf00      	nop
 80049ac:	20001094 	.word	0x20001094
 80049b0:	20000590 	.word	0x20000590
 80049b4:	000f4240 	.word	0x000f4240

080049b8 <wait_spi_tx_event>:
{
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 80049bc:	f004 f940 	bl	8008c40 <HAL_GetTick>
  while (spi_tx_event==1)
 80049c0:	4e07      	ldr	r6, [pc, #28]	; (80049e0 <wait_spi_tx_event+0x28>)
  int tickstart = HAL_GetTick();
 80049c2:	4604      	mov	r4, r0
  while (spi_tx_event==1)
 80049c4:	6873      	ldr	r3, [r6, #4]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <wait_spi_tx_event+0x16>
  return 0; 
 80049ca:	2000      	movs	r0, #0
}
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 80049ce:	f004 f937 	bl	8008c40 <HAL_GetTick>
 80049d2:	1b00      	subs	r0, r0, r4
 80049d4:	42a8      	cmp	r0, r5
 80049d6:	d9f5      	bls.n	80049c4 <wait_spi_tx_event+0xc>
      return -1;
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	e7f6      	b.n	80049cc <wait_spi_tx_event+0x14>
 80049de:	bf00      	nop
 80049e0:	20001094 	.word	0x20001094

080049e4 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 80049e4:	4b3f      	ldr	r3, [pc, #252]	; (8004ae4 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80049e6:	4840      	ldr	r0, [pc, #256]	; (8004ae8 <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 80049e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 80049ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 80049ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049f0:	659a      	str	r2, [r3, #88]	; 0x58
 80049f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 80049f4:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 80049f6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80049fa:	9201      	str	r2, [sp, #4]
 80049fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a00:	f042 0202 	orr.w	r2, r2, #2
 8004a04:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a08:	f002 0202 	and.w	r2, r2, #2
 8004a0c:	9202      	str	r2, [sp, #8]
 8004a0e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a12:	f042 0204 	orr.w	r2, r2, #4
 8004a16:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a1a:	f002 0204 	and.w	r2, r2, #4
 8004a1e:	9203      	str	r2, [sp, #12]
 8004a20:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a24:	f042 0210 	orr.w	r2, r2, #16
 8004a28:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2c:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 8004a30:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a32:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 8004a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a38:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8004a3a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a3c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 8004a3e:	f004 fc95 	bl	800936c <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8004a46:	a905      	add	r1, sp, #20
 8004a48:	4827      	ldr	r0, [pc, #156]	; (8004ae8 <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a4a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8004a4e:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8004a52:	f004 fba7 	bl	80091a4 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8004a56:	4b25      	ldr	r3, [pc, #148]	; (8004aec <SPI_WIFI_MspInit+0x108>)
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a58:	4825      	ldr	r0, [pc, #148]	; (8004af0 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8004a5a:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a5c:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8004a5e:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8004a62:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a66:	f004 fb9d 	bl	80091a4 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 8004a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a6e:	a905      	add	r1, sp, #20
 8004a70:	481f      	ldr	r0, [pc, #124]	; (8004af0 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = 0;
 8004a72:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a74:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8004a78:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a7c:	f004 fb92 	bl	80091a4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET ); 
 8004a80:	4622      	mov	r2, r4
 8004a82:	4621      	mov	r1, r4
 8004a84:	481a      	ldr	r0, [pc, #104]	; (8004af0 <SPI_WIFI_MspInit+0x10c>)
 8004a86:	f004 fc71 	bl	800936c <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8004a8a:	a905      	add	r1, sp, #20
 8004a8c:	4818      	ldr	r0, [pc, #96]	; (8004af0 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004a8e:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a90:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004a94:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8004a98:	f004 fb84 	bl	80091a4 <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8004a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8004aa0:	a905      	add	r1, sp, #20
 8004aa2:	4814      	ldr	r0, [pc, #80]	; (8004af4 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004aa4:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004aa6:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004aaa:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8004aae:	f004 fb79 	bl	80091a4 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8004ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8004ab6:	a905      	add	r1, sp, #20
 8004ab8:	480e      	ldr	r0, [pc, #56]	; (8004af4 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004aba:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004abc:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004ac0:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8004ac4:	f004 fb6e 	bl	80091a4 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 8004ac8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004acc:	4809      	ldr	r0, [pc, #36]	; (8004af4 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004ace:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004ad0:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004ad2:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004ad6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004ada:	f004 fb63 	bl	80091a4 <HAL_GPIO_Init>
}
 8004ade:	b00b      	add	sp, #44	; 0x2c
 8004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	48000400 	.word	0x48000400
 8004aec:	10110000 	.word	0x10110000
 8004af0:	48001000 	.word	0x48001000
 8004af4:	48000800 	.word	0x48000800

08004af8 <SPI_WIFI_ResetModule>:
{
 8004af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8004afa:	f004 f8a1 	bl	8008c40 <HAL_GetTick>
  WIFI_RESET_MODULE();
 8004afe:	2200      	movs	r2, #0
 8004b00:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 8004b04:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 8004b06:	482e      	ldr	r0, [pc, #184]	; (8004bc0 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8004b08:	4f2e      	ldr	r7, [pc, #184]	; (8004bc4 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 8004b0a:	f004 fc2f 	bl	800936c <HAL_GPIO_WritePin>
 8004b0e:	200a      	movs	r0, #10
 8004b10:	f004 f89c 	bl	8008c4c <HAL_Delay>
 8004b14:	2201      	movs	r2, #1
 8004b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b1a:	4829      	ldr	r0, [pc, #164]	; (8004bc0 <SPI_WIFI_ResetModule+0xc8>)
 8004b1c:	f004 fc26 	bl	800936c <HAL_GPIO_WritePin>
 8004b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b24:	f004 f892 	bl	8008c4c <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8004b28:	4825      	ldr	r0, [pc, #148]	; (8004bc0 <SPI_WIFI_ResetModule+0xc8>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	f004 fc1d 	bl	800936c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004b32:	200f      	movs	r0, #15
 8004b34:	f7ff ff0c 	bl	8004950 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8004b38:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8004b3a:	4821      	ldr	r0, [pc, #132]	; (8004bc0 <SPI_WIFI_ResetModule+0xc8>)
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	f004 fc0f 	bl	8009360 <HAL_GPIO_ReadPin>
 8004b42:	2801      	cmp	r0, #1
 8004b44:	4602      	mov	r2, r0
 8004b46:	d020      	beq.n	8004b8a <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS(); 
 8004b48:	2201      	movs	r2, #1
 8004b4a:	481d      	ldr	r0, [pc, #116]	; (8004bc0 <SPI_WIFI_ResetModule+0xc8>)
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	f004 fc0d 	bl	800936c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8004b52:	f89d 3000 	ldrb.w	r3, [sp]
 8004b56:	2b15      	cmp	r3, #21
 8004b58:	d12e      	bne.n	8004bb8 <SPI_WIFI_ResetModule+0xc0>
 8004b5a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004b5e:	2b15      	cmp	r3, #21
 8004b60:	d12a      	bne.n	8004bb8 <SPI_WIFI_ResetModule+0xc0>
 8004b62:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004b66:	2b0d      	cmp	r3, #13
 8004b68:	d126      	bne.n	8004bb8 <SPI_WIFI_ResetModule+0xc0>
 8004b6a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004b6e:	2b0a      	cmp	r3, #10
 8004b70:	d122      	bne.n	8004bb8 <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8004b72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b76:	2b3e      	cmp	r3, #62	; 0x3e
 8004b78:	d11e      	bne.n	8004bb8 <SPI_WIFI_ResetModule+0xc0>
 8004b7a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b7e:	3820      	subs	r0, #32
 8004b80:	bf18      	it	ne
 8004b82:	f04f 30ff 	movne.w	r0, #4294967295
}
 8004b86:	b003      	add	sp, #12
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8004b8a:	eb0d 0104 	add.w	r1, sp, r4
 8004b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b92:	4638      	mov	r0, r7
 8004b94:	f006 fcb7 	bl	800b506 <HAL_SPI_Receive>
 8004b98:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004b9a:	f004 f851 	bl	8008c40 <HAL_GetTick>
 8004b9e:	1b40      	subs	r0, r0, r5
    count += 2;
 8004ba0:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004ba2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8004ba6:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004ba8:	d201      	bcs.n	8004bae <SPI_WIFI_ResetModule+0xb6>
 8004baa:	2e00      	cmp	r6, #0
 8004bac:	d0c5      	beq.n	8004b3a <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS(); 
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4803      	ldr	r0, [pc, #12]	; (8004bc0 <SPI_WIFI_ResetModule+0xc8>)
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	f004 fbda 	bl	800936c <HAL_GPIO_WritePin>
    return -1;
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	e7e3      	b.n	8004b86 <SPI_WIFI_ResetModule+0x8e>
 8004bbe:	bf00      	nop
 8004bc0:	48001000 	.word	0x48001000
 8004bc4:	20001228 	.word	0x20001228

08004bc8 <SPI_WIFI_Init>:
{
 8004bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8004bca:	4605      	mov	r5, r0
 8004bcc:	bb78      	cbnz	r0, 8004c2e <SPI_WIFI_Init+0x66>
    hspi.Instance               = SPI3;
 8004bce:	4c1c      	ldr	r4, [pc, #112]	; (8004c40 <SPI_WIFI_Init+0x78>)
 8004bd0:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <SPI_WIFI_Init+0x7c>)
 8004bd2:	6023      	str	r3, [r4, #0]
    SPI_WIFI_MspInit(&hspi);
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f7ff ff05 	bl	80049e4 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8004bda:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8004bde:	e9c4 3501 	strd	r3, r5, [r4, #4]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8004be2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8004be6:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8004bea:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8004bee:	4620      	mov	r0, r4
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8004bf6:	e9c4 5508 	strd	r5, r5, [r4, #32]
    hspi.Init.CRCPolynomial     = 0;
 8004bfa:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8004bfe:	6165      	str	r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8004c00:	f006 fa56 	bl	800b0b0 <HAL_SPI_Init>
 8004c04:	4602      	mov	r2, r0
 8004c06:	b9b8      	cbnz	r0, 8004c38 <SPI_WIFI_Init+0x70>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, 0x0F, 0x00);
 8004c08:	210f      	movs	r1, #15
 8004c0a:	9001      	str	r0, [sp, #4]
 8004c0c:	2007      	movs	r0, #7
 8004c0e:	f004 f83d 	bl	8008c8c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8004c12:	2007      	movs	r0, #7
 8004c14:	f004 f86c 	bl	8008cf0 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 1, 0);
 8004c18:	9a01      	ldr	r2, [sp, #4]
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	2033      	movs	r0, #51	; 0x33
 8004c1e:	f004 f835 	bl	8008c8c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8004c22:	2033      	movs	r0, #51	; 0x33
 8004c24:	f004 f864 	bl	8008cf0 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8004c28:	200a      	movs	r0, #10
 8004c2a:	f7ff fe91 	bl	8004950 <SPI_WIFI_DelayUs>
}
 8004c2e:	b003      	add	sp, #12
 8004c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 8004c34:	f7ff bf60 	b.w	8004af8 <SPI_WIFI_ResetModule>
}
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	b003      	add	sp, #12
 8004c3e:	bd30      	pop	{r4, r5, pc}
 8004c40:	20001228 	.word	0x20001228
 8004c44:	40003c00 	.word	0x40003c00

08004c48 <SPI_WIFI_DeInit>:
{
 8004c48:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8004c4a:	4802      	ldr	r0, [pc, #8]	; (8004c54 <SPI_WIFI_DeInit+0xc>)
 8004c4c:	f006 fa8f 	bl	800b16e <HAL_SPI_DeInit>
}
 8004c50:	2000      	movs	r0, #0
 8004c52:	bd08      	pop	{r3, pc}
 8004c54:	20001228 	.word	0x20001228

08004c58 <SPI_WIFI_ReceiveData>:
{
 8004c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS(); 
 8004c5e:	2201      	movs	r2, #1
{
 8004c60:	4604      	mov	r4, r0
 8004c62:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS(); 
 8004c64:	4836      	ldr	r0, [pc, #216]	; (8004d40 <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event==1)
 8004c66:	4e37      	ldr	r6, [pc, #220]	; (8004d44 <SPI_WIFI_ReceiveData+0xec>)
  WIFI_DISABLE_NSS(); 
 8004c68:	4611      	mov	r1, r2
 8004c6a:	f004 fb7f 	bl	800936c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 8004c6e:	2003      	movs	r0, #3
 8004c70:	f7ff fe6e 	bl	8004950 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8004c74:	f003 ffe4 	bl	8008c40 <HAL_GetTick>
 8004c78:	46b1      	mov	r9, r6
 8004c7a:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 8004c7c:	68b3      	ldr	r3, [r6, #8]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d01a      	beq.n	8004cb8 <SPI_WIFI_ReceiveData+0x60>
  WIFI_ENABLE_NSS(); 
 8004c82:	482f      	ldr	r0, [pc, #188]	; (8004d40 <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 8004c84:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8004d40 <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004c88:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004d48 <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS(); 
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2101      	movs	r1, #1
 8004c90:	f004 fb6c 	bl	800936c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004c94:	200f      	movs	r0, #15
 8004c96:	f7ff fe5b 	bl	8004950 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8004c9a:	3402      	adds	r4, #2
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4658      	mov	r0, fp
 8004ca2:	f004 fb5d 	bl	8009360 <HAL_GPIO_ReadPin>
 8004ca6:	2801      	cmp	r0, #1
 8004ca8:	b22e      	sxth	r6, r5
 8004caa:	d00d      	beq.n	8004cc8 <SPI_WIFI_ReceiveData+0x70>
  WIFI_DISABLE_NSS(); 
 8004cac:	2201      	movs	r2, #1
 8004cae:	4824      	ldr	r0, [pc, #144]	; (8004d40 <SPI_WIFI_ReceiveData+0xe8>)
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	f004 fb5b 	bl	800936c <HAL_GPIO_WritePin>
  return length;
 8004cb6:	e01a      	b.n	8004cee <SPI_WIFI_ReceiveData+0x96>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004cb8:	f003 ffc2 	bl	8008c40 <HAL_GetTick>
 8004cbc:	1b40      	subs	r0, r0, r5
 8004cbe:	4580      	cmp	r8, r0
 8004cc0:	d2dc      	bcs.n	8004c7c <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8004cc2:	f06f 0602 	mvn.w	r6, #2
 8004cc6:	e012      	b.n	8004cee <SPI_WIFI_ReceiveData+0x96>
    if((length < len) || (!len))
 8004cc8:	42af      	cmp	r7, r5
 8004cca:	dc01      	bgt.n	8004cd0 <SPI_WIFI_ReceiveData+0x78>
 8004ccc:	2f00      	cmp	r7, #0
 8004cce:	d1ed      	bne.n	8004cac <SPI_WIFI_ReceiveData+0x54>
      spi_rx_event=1;
 8004cd0:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004cd2:	a901      	add	r1, sp, #4
 8004cd4:	4650      	mov	r0, sl
      spi_rx_event=1;
 8004cd6:	f8c9 200c 	str.w	r2, [r9, #12]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004cda:	f006 fe05 	bl	800b8e8 <HAL_SPI_Receive_IT>
 8004cde:	2201      	movs	r2, #1
 8004ce0:	b148      	cbz	r0, 8004cf6 <SPI_WIFI_ReceiveData+0x9e>
        WIFI_DISABLE_NSS();
 8004ce2:	4817      	ldr	r0, [pc, #92]	; (8004d40 <SPI_WIFI_ReceiveData+0xe8>)
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	f004 fb41 	bl	800936c <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8004cea:	f04f 36ff 	mov.w	r6, #4294967295
}
 8004cee:	4630      	mov	r0, r6
 8004cf0:	b003      	add	sp, #12
 8004cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8004cf6:	f003 ffa3 	bl	8008c40 <HAL_GetTick>
 8004cfa:	4606      	mov	r6, r0
  while (spi_rx_event==1)
 8004cfc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d104      	bne.n	8004d0e <SPI_WIFI_ReceiveData+0xb6>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004d04:	f003 ff9c 	bl	8008c40 <HAL_GetTick>
 8004d08:	1b80      	subs	r0, r0, r6
 8004d0a:	4580      	cmp	r8, r0
 8004d0c:	d2f6      	bcs.n	8004cfc <SPI_WIFI_ReceiveData+0xa4>
      pData[0] = tmp[0];
 8004d0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d12:	f804 3c02 	strb.w	r3, [r4, #-2]
      pData[1] = tmp[1];
 8004d16:	3502      	adds	r5, #2
 8004d18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004d1c:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 8004d20:	f5b5 6faf 	cmp.w	r5, #1400	; 0x578
 8004d24:	f104 0402 	add.w	r4, r4, #2
 8004d28:	d1b9      	bne.n	8004c9e <SPI_WIFI_ReceiveData+0x46>
        WIFI_DISABLE_NSS();
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	4804      	ldr	r0, [pc, #16]	; (8004d40 <SPI_WIFI_ReceiveData+0xe8>)
 8004d2e:	4611      	mov	r1, r2
 8004d30:	f004 fb1c 	bl	800936c <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8004d34:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();    
 8004d38:	f7ff fede 	bl	8004af8 <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8004d3c:	e7d7      	b.n	8004cee <SPI_WIFI_ReceiveData+0x96>
 8004d3e:	bf00      	nop
 8004d40:	48001000 	.word	0x48001000
 8004d44:	20001094 	.word	0x20001094
 8004d48:	20001228 	.word	0x20001228

08004d4c <SPI_WIFI_SendData>:
{
 8004d4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	4605      	mov	r5, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 8004d56:	f003 ff73 	bl	8008c40 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 8004d5a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004df4 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 8004d5e:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 8004d60:	2102      	movs	r1, #2
 8004d62:	4648      	mov	r0, r9
 8004d64:	f004 fafc 	bl	8009360 <HAL_GPIO_ReadPin>
 8004d68:	2801      	cmp	r0, #1
 8004d6a:	4606      	mov	r6, r0
 8004d6c:	d11b      	bne.n	8004da6 <SPI_WIFI_SendData+0x5a>
  cmddata_rdy_rising_event=1;
 8004d6e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8004dfc <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 8004d72:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 8004d74:	f8c8 0008 	str.w	r0, [r8, #8]
  WIFI_ENABLE_NSS();
 8004d78:	2200      	movs	r2, #0
 8004d7a:	481e      	ldr	r0, [pc, #120]	; (8004df4 <SPI_WIFI_SendData+0xa8>)
 8004d7c:	f004 faf6 	bl	800936c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004d80:	200f      	movs	r0, #15
 8004d82:	f7ff fde5 	bl	8004950 <SPI_WIFI_DelayUs>
  if (len > 1)
 8004d86:	2c01      	cmp	r4, #1
 8004d88:	d919      	bls.n	8004dbe <SPI_WIFI_SendData+0x72>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8004d8a:	481b      	ldr	r0, [pc, #108]	; (8004df8 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8004d8c:	f8c8 6004 	str.w	r6, [r8, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8004d90:	0862      	lsrs	r2, r4, #1
 8004d92:	4629      	mov	r1, r5
 8004d94:	f006 fcce 	bl	800b734 <HAL_SPI_Transmit_IT>
 8004d98:	b170      	cbz	r0, 8004db8 <SPI_WIFI_SendData+0x6c>
      WIFI_DISABLE_NSS();
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	4815      	ldr	r0, [pc, #84]	; (8004df4 <SPI_WIFI_SendData+0xa8>)
 8004d9e:	4611      	mov	r1, r2
 8004da0:	f004 fae4 	bl	800936c <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8004da4:	e005      	b.n	8004db2 <SPI_WIFI_SendData+0x66>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004da6:	f003 ff4b 	bl	8008c40 <HAL_GetTick>
 8004daa:	eba0 0008 	sub.w	r0, r0, r8
 8004dae:	4287      	cmp	r7, r0
 8004db0:	d2d6      	bcs.n	8004d60 <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 8004db2:	f04f 30ff 	mov.w	r0, #4294967295
 8004db6:	e019      	b.n	8004dec <SPI_WIFI_SendData+0xa0>
    wait_spi_tx_event(timeout);
 8004db8:	4638      	mov	r0, r7
 8004dba:	f7ff fdfd 	bl	80049b8 <wait_spi_tx_event>
  if ( len & 1)
 8004dbe:	07e3      	lsls	r3, r4, #31
 8004dc0:	d513      	bpl.n	8004dea <SPI_WIFI_SendData+0x9e>
    Padding[0] = pdata[len-1];
 8004dc2:	4425      	add	r5, r4
    spi_tx_event=1;
 8004dc4:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8004dc6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004dca:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004dce:	480a      	ldr	r0, [pc, #40]	; (8004df8 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8004dd0:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8004dd4:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004dd6:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8004dd8:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004ddc:	f006 fcaa 	bl	800b734 <HAL_SPI_Transmit_IT>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d1da      	bne.n	8004d9a <SPI_WIFI_SendData+0x4e>
    wait_spi_tx_event(timeout);
 8004de4:	4638      	mov	r0, r7
 8004de6:	f7ff fde7 	bl	80049b8 <wait_spi_tx_event>
  return len;
 8004dea:	b220      	sxth	r0, r4
}
 8004dec:	b003      	add	sp, #12
 8004dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004df2:	bf00      	nop
 8004df4:	48001000 	.word	0x48001000
 8004df8:	20001228 	.word	0x20001228
 8004dfc:	20001094 	.word	0x20001094

08004e00 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8004e00:	f003 bf24 	b.w	8008c4c <HAL_Delay>

08004e04 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8004e04:	4b02      	ldr	r3, [pc, #8]	; (8004e10 <HAL_SPI_RxCpltCallback+0xc>)
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	b10a      	cbz	r2, 8004e0e <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event=0;
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60da      	str	r2, [r3, #12]
  }
}
 8004e0e:	4770      	bx	lr
 8004e10:	20001094 	.word	0x20001094

08004e14 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8004e14:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <HAL_SPI_TxCpltCallback+0xc>)
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	b10a      	cbz	r2, 8004e1e <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event=0;
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	605a      	str	r2, [r3, #4]
  }
}
 8004e1e:	4770      	bx	lr
 8004e20:	20001094 	.word	0x20001094

08004e24 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <SPI_WIFI_ISR+0x10>)
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event=0;
 8004e2a:	bf04      	itt	eq
 8004e2c:	2200      	moveq	r2, #0
 8004e2e:	609a      	streq	r2, [r3, #8]
   }
}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20001094 	.word	0x20001094

08004e38 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8004e38:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <WIFI_Init+0x30>)
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <WIFI_Init+0x34>)
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	4a0b      	ldr	r2, [pc, #44]	; (8004e70 <WIFI_Init+0x38>)
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <WIFI_Init+0x3c>)
 8004e46:	490c      	ldr	r1, [pc, #48]	; (8004e78 <WIFI_Init+0x40>)
 8004e48:	480c      	ldr	r0, [pc, #48]	; (8004e7c <WIFI_Init+0x44>)
 8004e4a:	f003 fa59 	bl	8008300 <ES_WIFI_RegisterBusIO>
 8004e4e:	b940      	cbnz	r0, 8004e62 <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004e50:	480a      	ldr	r0, [pc, #40]	; (8004e7c <WIFI_Init+0x44>)
 8004e52:	f003 f9f3 	bl	800823c <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004e56:	3800      	subs	r0, #0
 8004e58:	bf18      	it	ne
 8004e5a:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8004e5c:	b003      	add	sp, #12
 8004e5e:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004e62:	2001      	movs	r0, #1
 8004e64:	e7fa      	b.n	8004e5c <WIFI_Init+0x24>
 8004e66:	bf00      	nop
 8004e68:	08004c59 	.word	0x08004c59
 8004e6c:	08004d4d 	.word	0x08004d4d
 8004e70:	08004c49 	.word	0x08004c49
 8004e74:	08004e01 	.word	0x08004e01
 8004e78:	08004bc9 	.word	0x08004bc9
 8004e7c:	2000128c 	.word	0x2000128c

08004e80 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8004e80:	b508      	push	{r3, lr}
 8004e82:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8004e84:	460a      	mov	r2, r1
 8004e86:	4601      	mov	r1, r0
 8004e88:	4806      	ldr	r0, [pc, #24]	; (8004ea4 <WIFI_Connect+0x24>)
 8004e8a:	f003 fa4b 	bl	8008324 <ES_WIFI_Connect>
 8004e8e:	b930      	cbnz	r0, 8004e9e <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004e90:	4804      	ldr	r0, [pc, #16]	; (8004ea4 <WIFI_Connect+0x24>)
 8004e92:	f003 faa3 	bl	80083dc <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004e96:	3800      	subs	r0, #0
 8004e98:	bf18      	it	ne
 8004e9a:	2001      	movne	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 8004e9c:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	e7fc      	b.n	8004e9c <WIFI_Connect+0x1c>
 8004ea2:	bf00      	nop
 8004ea4:	2000128c 	.word	0x2000128c

08004ea8 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8004ea8:	4601      	mov	r1, r0
 8004eaa:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8004eac:	4803      	ldr	r0, [pc, #12]	; (8004ebc <WIFI_GetMAC_Address+0x14>)
 8004eae:	f003 fb09 	bl	80084c4 <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8004eb2:	3800      	subs	r0, #0
 8004eb4:	bf18      	it	ne
 8004eb6:	2001      	movne	r0, #1
 8004eb8:	bd08      	pop	{r3, pc}
 8004eba:	bf00      	nop
 8004ebc:	2000128c 	.word	0x2000128c

08004ec0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8004ec0:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004ec2:	4d06      	ldr	r5, [pc, #24]	; (8004edc <WIFI_GetIP_Address+0x1c>)
{
 8004ec4:	4604      	mov	r4, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f003 fa6c 	bl	80083a4 <ES_WIFI_IsConnected>
 8004ecc:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8004ece:	bf03      	ittte	eq
 8004ed0:	f8d5 30d5 	ldreq.w	r3, [r5, #213]	; 0xd5
 8004ed4:	6023      	streq	r3, [r4, #0]
    ret = WIFI_STATUS_OK;
 8004ed6:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8004ed8:	2001      	movne	r0, #1
  }
  return ret;
}
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	2000128c 	.word	0x2000128c

08004ee0 <WIFI_GetHostAddress>:
  * @param  location : Host URL
  * @param  ipaddr : array of the IP address
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetHostAddress(const char *location, uint8_t *ipaddr)
{
 8004ee0:	460a      	mov	r2, r1
 8004ee2:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  
  if (ES_WIFI_DNS_LookUp(&EsWifiObj, location, ipaddr) == ES_WIFI_STATUS_OK)
 8004ee4:	4601      	mov	r1, r0
 8004ee6:	4803      	ldr	r0, [pc, #12]	; (8004ef4 <WIFI_GetHostAddress+0x14>)
 8004ee8:	f003 fb0a 	bl	8008500 <ES_WIFI_DNS_LookUp>
  {
    return WIFI_STATUS_OK;
  }
  
  return ret;
}
 8004eec:	3800      	subs	r0, #0
 8004eee:	bf18      	it	ne
 8004ef0:	2001      	movne	r0, #1
 8004ef2:	bd08      	pop	{r3, pc}
 8004ef4:	2000128c 	.word	0x2000128c

08004ef8 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8004ef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8004efa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8004efe:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8004f02:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8004f06:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004f0a:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004f12:	bf18      	it	ne
 8004f14:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8004f16:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8004f18:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004f1c:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8004f20:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004f24:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 8004f26:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004f28:	4806      	ldr	r0, [pc, #24]	; (8004f44 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8004f2a:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8004f2c:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 8004f30:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004f34:	f003 fb04 	bl	8008540 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8004f38:	3800      	subs	r0, #0
 8004f3a:	bf18      	it	ne
 8004f3c:	2001      	movne	r0, #1
 8004f3e:	b007      	add	sp, #28
 8004f40:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f44:	2000128c 	.word	0x2000128c

08004f48 <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8004f48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8004f4a:	f88d 0005 	strb.w	r0, [sp, #5]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004f4e:	a901      	add	r1, sp, #4
 8004f50:	4804      	ldr	r0, [pc, #16]	; (8004f64 <WIFI_CloseClientConnection+0x1c>)
 8004f52:	f003 fb57 	bl	8008604 <ES_WIFI_StopClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret; 
}
 8004f56:	3800      	subs	r0, #0
 8004f58:	bf18      	it	ne
 8004f5a:	2001      	movne	r0, #1
 8004f5c:	b007      	add	sp, #28
 8004f5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f62:	bf00      	nop
 8004f64:	2000128c 	.word	0x2000128c

08004f68 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8004f68:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004f6a:	9c04      	ldr	r4, [sp, #16]
 8004f6c:	e9cd 3400 	strd	r3, r4, [sp]
 8004f70:	4613      	mov	r3, r2
 8004f72:	460a      	mov	r2, r1
 8004f74:	4601      	mov	r1, r0
 8004f76:	4804      	ldr	r0, [pc, #16]	; (8004f88 <WIFI_SendData+0x20>)
 8004f78:	f003 fb64 	bl	8008644 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8004f7c:	3800      	subs	r0, #0
 8004f7e:	bf18      	it	ne
 8004f80:	2001      	movne	r0, #1
 8004f82:	b002      	add	sp, #8
 8004f84:	bd10      	pop	{r4, pc}
 8004f86:	bf00      	nop
 8004f88:	2000128c 	.word	0x2000128c

08004f8c <WIFI_SendDataTo>:



WIFI_Status_t WIFI_SendDataTo(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t port)
{
 8004f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_SendDataTo(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 8004f8e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004f92:	9403      	str	r4, [sp, #12]
 8004f94:	9c07      	ldr	r4, [sp, #28]
 8004f96:	9402      	str	r4, [sp, #8]
 8004f98:	9c06      	ldr	r4, [sp, #24]
 8004f9a:	e9cd 3400 	strd	r3, r4, [sp]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	460a      	mov	r2, r1
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4803      	ldr	r0, [pc, #12]	; (8004fb4 <WIFI_SendDataTo+0x28>)
 8004fa6:	f003 fbcb 	bl	8008740 <ES_WIFI_SendDataTo>
  {
    ret = WIFI_STATUS_OK;
  }

  return ret;
}
 8004faa:	3800      	subs	r0, #0
 8004fac:	bf18      	it	ne
 8004fae:	2001      	movne	r0, #1
 8004fb0:	b004      	add	sp, #16
 8004fb2:	bd10      	pop	{r4, pc}
 8004fb4:	2000128c 	.word	0x2000128c

08004fb8 <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8004fb8:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004fba:	9c04      	ldr	r4, [sp, #16]
 8004fbc:	e9cd 3400 	strd	r3, r4, [sp]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	4601      	mov	r1, r0
 8004fc6:	4804      	ldr	r0, [pc, #16]	; (8004fd8 <WIFI_ReceiveData+0x20>)
 8004fc8:	f003 fc56 	bl	8008878 <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004fcc:	3800      	subs	r0, #0
 8004fce:	bf18      	it	ne
 8004fd0:	2001      	movne	r0, #1
 8004fd2:	b002      	add	sp, #8
 8004fd4:	bd10      	pop	{r4, pc}
 8004fd6:	bf00      	nop
 8004fd8:	2000128c 	.word	0x2000128c

08004fdc <WIFI_ReceiveDataFrom>:


WIFI_Status_t WIFI_ReceiveDataFrom(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t *port)
{
 8004fdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveDataFrom(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 8004fde:	9c08      	ldr	r4, [sp, #32]
 8004fe0:	9403      	str	r4, [sp, #12]
 8004fe2:	9c07      	ldr	r4, [sp, #28]
 8004fe4:	9402      	str	r4, [sp, #8]
 8004fe6:	9c06      	ldr	r4, [sp, #24]
 8004fe8:	e9cd 3400 	strd	r3, r4, [sp]
 8004fec:	4613      	mov	r3, r2
 8004fee:	460a      	mov	r2, r1
 8004ff0:	4601      	mov	r1, r0
 8004ff2:	4804      	ldr	r0, [pc, #16]	; (8005004 <WIFI_ReceiveDataFrom+0x28>)
 8004ff4:	f003 fcc8 	bl	8008988 <ES_WIFI_ReceiveDataFrom>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004ff8:	3800      	subs	r0, #0
 8004ffa:	bf18      	it	ne
 8004ffc:	2001      	movne	r0, #1
 8004ffe:	b004      	add	sp, #16
 8005000:	bd10      	pop	{r4, pc}
 8005002:	bf00      	nop
 8005004:	2000128c 	.word	0x2000128c

08005008 <WIFI_GetModuleFwRevision>:
  * @brief  Return Module firmware revision
  * @param  rev : revision string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleFwRevision(char *rev)
{
 8005008:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.FW_Rev != NULL)
  {
    strncpy(rev, (char *)EsWifiObj.FW_Rev, ES_WIFI_FW_REV_SIZE);
 800500a:	4903      	ldr	r1, [pc, #12]	; (8005018 <WIFI_GetModuleFwRevision+0x10>)
 800500c:	2218      	movs	r2, #24
 800500e:	f01e fd39 	bl	8023a84 <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8005012:	2000      	movs	r0, #0
 8005014:	bd08      	pop	{r3, pc}
 8005016:	bf00      	nop
 8005018:	200012ac 	.word	0x200012ac

0800501c <WIFI_GetModuleID>:
  * @brief  Return Module ID
  * @param  Info : Module ID string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleID(char *Id)
{
 800501c:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.Product_ID != NULL)
  {
    strncpy(Id, (char *)EsWifiObj.Product_ID, ES_WIFI_PRODUCT_ID_SIZE);
 800501e:	4903      	ldr	r1, [pc, #12]	; (800502c <WIFI_GetModuleID+0x10>)
 8005020:	2220      	movs	r2, #32
 8005022:	f01e fd2f 	bl	8023a84 <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8005026:	2000      	movs	r0, #0
 8005028:	bd08      	pop	{r3, pc}
 800502a:	bf00      	nop
 800502c:	2000128c 	.word	0x2000128c

08005030 <WIFI_GetModuleName>:
  * @brief  Return Module Name
  * @param  Info : Module Name string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleName(char *ModuleName)
{
 8005030:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.Product_Name != NULL)
  {
    strncpy(ModuleName, (char *)EsWifiObj.Product_Name, ES_WIFI_PRODUCT_NAME_SIZE);
 8005032:	4903      	ldr	r1, [pc, #12]	; (8005040 <WIFI_GetModuleName+0x10>)
 8005034:	2220      	movs	r2, #32
 8005036:	f01e fd25 	bl	8023a84 <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 800503a:	2000      	movs	r0, #0
 800503c:	bd08      	pop	{r3, pc}
 800503e:	bf00      	nop
 8005040:	200012f4 	.word	0x200012f4

08005044 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8005044:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005046:	4a2a      	ldr	r2, [pc, #168]	; (80050f0 <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8005048:	4c2a      	ldr	r4, [pc, #168]	; (80050f4 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800504a:	4b2b      	ldr	r3, [pc, #172]	; (80050f8 <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800504c:	4d2b      	ldr	r5, [pc, #172]	; (80050fc <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800504e:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005050:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005054:	2201      	movs	r2, #1
 8005056:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 800505a:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800505e:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005062:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005064:	f043 0302 	orr.w	r3, r3, #2
 8005068:	64eb      	str	r3, [r5, #76]	; 0x4c
 800506a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 800506c:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8005076:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005078:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800507c:	2312      	movs	r3, #18
 800507e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8005082:	2003      	movs	r0, #3
 8005084:	2304      	movs	r3, #4
 8005086:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800508a:	a903      	add	r1, sp, #12
 800508c:	481c      	ldr	r0, [pc, #112]	; (8005100 <I2Cx_Init.constprop.0+0xbc>)
 800508e:	f004 f889 	bl	80091a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005092:	a903      	add	r1, sp, #12
 8005094:	481a      	ldr	r0, [pc, #104]	; (8005100 <I2Cx_Init.constprop.0+0xbc>)
 8005096:	f004 f885 	bl	80091a4 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800509a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800509c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050a0:	65ab      	str	r3, [r5, #88]	; 0x58
 80050a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80050a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a8:	9302      	str	r3, [sp, #8]
 80050aa:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 80050ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050b2:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 80050b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80050b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80050ba:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80050bc:	4632      	mov	r2, r6
 80050be:	210f      	movs	r1, #15
 80050c0:	2021      	movs	r0, #33	; 0x21
 80050c2:	f003 fde3 	bl	8008c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80050c6:	2021      	movs	r0, #33	; 0x21
 80050c8:	f003 fe12 	bl	8008cf0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80050cc:	4632      	mov	r2, r6
 80050ce:	210f      	movs	r1, #15
 80050d0:	2022      	movs	r0, #34	; 0x22
 80050d2:	f003 fddb 	bl	8008c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80050d6:	2022      	movs	r0, #34	; 0x22
 80050d8:	f003 fe0a 	bl	8008cf0 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 80050dc:	4620      	mov	r0, r4
 80050de:	f004 fae7 	bl	80096b0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80050e2:	4631      	mov	r1, r6
 80050e4:	4620      	mov	r0, r4
 80050e6:	f004 fdf9 	bl	8009cdc <HAL_I2CEx_ConfigAnalogFilter>
}
 80050ea:	b008      	add	sp, #32
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	bf00      	nop
 80050f0:	40005800 	.word	0x40005800
 80050f4:	200019ac 	.word	0x200019ac
 80050f8:	00702681 	.word	0x00702681
 80050fc:	40021000 	.word	0x40021000
 8005100:	48000400 	.word	0x48000400

08005104 <I2Cx_Error.isra.0.constprop.0>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
 8005104:	b508      	push	{r3, lr}
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005106:	4803      	ldr	r0, [pc, #12]	; (8005114 <I2Cx_Error.isra.0.constprop.0+0x10>)
 8005108:	f004 fb24 	bl	8009754 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
}
 800510c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init(i2c_handler);
 8005110:	f7ff bf98 	b.w	8005044 <I2Cx_Init.constprop.0>
 8005114:	200019ac 	.word	0x200019ac

08005118 <BSP_LED_Init>:
{
 8005118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800511a:	b948      	cbnz	r0, 8005130 <BSP_LED_Init+0x18>
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <BSP_LED_Init+0x3c>)
 800511e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005120:	f042 0202 	orr.w	r2, r2, #2
 8005124:	64da      	str	r2, [r3, #76]	; 0x4c
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005130:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005134:	2301      	movs	r3, #1
 8005136:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800513a:	2100      	movs	r1, #0
 800513c:	2302      	movs	r3, #2
 800513e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <BSP_LED_Init+0x40>)
 8005144:	a901      	add	r1, sp, #4
 8005146:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800514a:	f004 f82b 	bl	80091a4 <HAL_GPIO_Init>
}
 800514e:	b007      	add	sp, #28
 8005150:	f85d fb04 	ldr.w	pc, [sp], #4
 8005154:	40021000 	.word	0x40021000
 8005158:	200001ec 	.word	0x200001ec

0800515c <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800515c:	4b03      	ldr	r3, [pc, #12]	; (800516c <BSP_LED_On+0x10>)
 800515e:	2201      	movs	r2, #1
 8005160:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005168:	f004 b900 	b.w	800936c <HAL_GPIO_WritePin>
 800516c:	200001ec 	.word	0x200001ec

08005170 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005170:	4b03      	ldr	r3, [pc, #12]	; (8005180 <BSP_LED_Off+0x10>)
 8005172:	2200      	movs	r2, #0
 8005174:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800517c:	f004 b8f6 	b.w	800936c <HAL_GPIO_WritePin>
 8005180:	200001ec 	.word	0x200001ec

08005184 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8005184:	4b03      	ldr	r3, [pc, #12]	; (8005194 <BSP_LED_Toggle+0x10>)
 8005186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800518a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800518e:	f004 b8f2 	b.w	8009376 <HAL_GPIO_TogglePin>
 8005192:	bf00      	nop
 8005194:	200001ec 	.word	0x200001ec

08005198 <BSP_PB_Init>:
{
 8005198:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <BSP_PB_Init+0x70>)
 800519c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800519e:	f042 0204 	orr.w	r2, r2, #4
 80051a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80051a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 80051ae:	b989      	cbnz	r1, 80051d4 <BSP_PB_Init+0x3c>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80051b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80051b4:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80051b8:	2101      	movs	r1, #1
 80051ba:	2302      	movs	r3, #2
 80051bc:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80051c0:	4b12      	ldr	r3, [pc, #72]	; (800520c <BSP_PB_Init+0x74>)
 80051c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80051c6:	a901      	add	r1, sp, #4
 80051c8:	6840      	ldr	r0, [r0, #4]
 80051ca:	f003 ffeb 	bl	80091a4 <HAL_GPIO_Init>
}
 80051ce:	b007      	add	sp, #28
 80051d0:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 80051d4:	2901      	cmp	r1, #1
 80051d6:	d1fa      	bne.n	80051ce <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80051d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051dc:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051de:	2303      	movs	r3, #3
 80051e0:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <BSP_PB_Init+0x78>)
 80051e4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80051e6:	4b09      	ldr	r3, [pc, #36]	; (800520c <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 80051e8:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80051ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80051ee:	a901      	add	r1, sp, #4
 80051f0:	6840      	ldr	r0, [r0, #4]
 80051f2:	f003 ffd7 	bl	80091a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80051f6:	2200      	movs	r2, #0
 80051f8:	210f      	movs	r1, #15
 80051fa:	2028      	movs	r0, #40	; 0x28
 80051fc:	f003 fd46 	bl	8008c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005200:	2028      	movs	r0, #40	; 0x28
 8005202:	f003 fd75 	bl	8008cf0 <HAL_NVIC_EnableIRQ>
}
 8005206:	e7e2      	b.n	80051ce <BSP_PB_Init+0x36>
 8005208:	40021000 	.word	0x40021000
 800520c:	200001ec 	.word	0x200001ec
 8005210:	10110000 	.word	0x10110000

08005214 <BSP_COM_Init>:
{
 8005214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005216:	460d      	mov	r5, r1
 8005218:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800521a:	b9d8      	cbnz	r0, 8005254 <BSP_COM_Init+0x40>
 800521c:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <BSP_COM_Init+0x80>)
 800521e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005220:	f042 0202 	orr.w	r2, r2, #2
 8005224:	64da      	str	r2, [r3, #76]	; 0x4c
 8005226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005228:	f002 0202 	and.w	r2, r2, #2
 800522c:	9200      	str	r2, [sp, #0]
 800522e:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8005230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005232:	f042 0202 	orr.w	r2, r2, #2
 8005236:	64da      	str	r2, [r3, #76]	; 0x4c
 8005238:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800523a:	f002 0202 	and.w	r2, r2, #2
 800523e:	9201      	str	r2, [sp, #4]
 8005240:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8005242:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005248:	661a      	str	r2, [r3, #96]	; 0x60
 800524a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005250:	9302      	str	r3, [sp, #8]
 8005252:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8005254:	4c10      	ldr	r4, [pc, #64]	; (8005298 <BSP_COM_Init+0x84>)
 8005256:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800525a:	2602      	movs	r6, #2
 800525c:	2340      	movs	r3, #64	; 0x40
 800525e:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8005262:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005264:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005266:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8005268:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800526a:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 800526c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800526e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8005270:	f003 ff98 	bl	80091a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8005274:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8005276:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8005278:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800527a:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800527c:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8005280:	f003 ff90 	bl	80091a4 <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 8005288:	4628      	mov	r0, r5
 800528a:	f007 fac3 	bl	800c814 <HAL_UART_Init>
}
 800528e:	b009      	add	sp, #36	; 0x24
 8005290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	200001ec 	.word	0x200001ec

0800529c <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 800529c:	f7ff bed2 	b.w	8005044 <I2Cx_Init.constprop.0>

080052a0 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80052a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80052a2:	2301      	movs	r3, #1
{
 80052a4:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80052a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80052b0:	f10d 0217 	add.w	r2, sp, #23
 80052b4:	9200      	str	r2, [sp, #0]
 80052b6:	460a      	mov	r2, r1
 80052b8:	4601      	mov	r1, r0
 80052ba:	4804      	ldr	r0, [pc, #16]	; (80052cc <SENSOR_IO_Write+0x2c>)
 80052bc:	f004 fb98 	bl	80099f0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80052c0:	b108      	cbz	r0, 80052c6 <SENSOR_IO_Write+0x26>
    I2Cx_Error(i2c_handler, Addr);
 80052c2:	f7ff ff1f 	bl	8005104 <I2Cx_Error.isra.0.constprop.0>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 80052c6:	b007      	add	sp, #28
 80052c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80052cc:	200019ac 	.word	0x200019ac

080052d0 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80052d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 80052d2:	2300      	movs	r3, #0
{
 80052d4:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80052d6:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80052da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052de:	2301      	movs	r3, #1
 80052e0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80052e4:	f10d 0117 	add.w	r1, sp, #23
 80052e8:	9100      	str	r1, [sp, #0]
 80052ea:	4601      	mov	r1, r0
 80052ec:	4805      	ldr	r0, [pc, #20]	; (8005304 <SENSOR_IO_Read+0x34>)
 80052ee:	f004 fc37 	bl	8009b60 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80052f2:	b108      	cbz	r0, 80052f8 <SENSOR_IO_Read+0x28>
    I2Cx_Error(i2c_handler, Addr);
 80052f4:	f7ff ff06 	bl	8005104 <I2Cx_Error.isra.0.constprop.0>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 80052f8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80052fc:	b007      	add	sp, #28
 80052fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005302:	bf00      	nop
 8005304:	200019ac 	.word	0x200019ac

08005308 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8005308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800530a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800530e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005312:	9200      	str	r2, [sp, #0]
 8005314:	2301      	movs	r3, #1
 8005316:	460a      	mov	r2, r1
 8005318:	4601      	mov	r1, r0
 800531a:	4805      	ldr	r0, [pc, #20]	; (8005330 <SENSOR_IO_ReadMultiple+0x28>)
 800531c:	f004 fc20 	bl	8009b60 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8005320:	4604      	mov	r4, r0
 8005322:	b108      	cbz	r0, 8005328 <SENSOR_IO_ReadMultiple+0x20>
    I2Cx_Error(i2c_handler, Addr);
 8005324:	f7ff feee 	bl	8005104 <I2Cx_Error.isra.0.constprop.0>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8005328:	b2a0      	uxth	r0, r4
 800532a:	b004      	add	sp, #16
 800532c:	bd10      	pop	{r4, pc}
 800532e:	bf00      	nop
 8005330:	200019ac 	.word	0x200019ac

08005334 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8005334:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8005336:	4c07      	ldr	r4, [pc, #28]	; (8005354 <BSP_ACCELERO_Init+0x20>)
 8005338:	68a3      	ldr	r3, [r4, #8]
 800533a:	4798      	blx	r3
 800533c:	286a      	cmp	r0, #106	; 0x6a
 800533e:	d107      	bne.n	8005350 <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8005342:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 8005346:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800534c:	2000      	movs	r0, #0
  }  

  return ret;
}
 800534e:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8005350:	2001      	movs	r0, #1
 8005352:	e7fc      	b.n	800534e <BSP_ACCELERO_Init+0x1a>
 8005354:	200002a0 	.word	0x200002a0
 8005358:	200010a4 	.word	0x200010a4

0800535c <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 800535c:	4b03      	ldr	r3, [pc, #12]	; (800536c <BSP_ACCELERO_AccGetXYZ+0x10>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b113      	cbz	r3, 8005368 <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	b103      	cbz	r3, 8005368 <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8005366:	4718      	bx	r3
    }
  }
}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	200010a4 	.word	0x200010a4

08005370 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8005370:	b510      	push	{r4, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8005372:	4c07      	ldr	r4, [pc, #28]	; (8005390 <BSP_GYRO_Init+0x20>)
 8005374:	68a3      	ldr	r3, [r4, #8]
 8005376:	4798      	blx	r3
 8005378:	286a      	cmp	r0, #106	; 0x6a
 800537a:	d107      	bne.n	800538c <BSP_GYRO_Init+0x1c>
    ret = GYRO_ERROR;
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800537c:	4b05      	ldr	r3, [pc, #20]	; (8005394 <BSP_GYRO_Init+0x24>)

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800537e:	f244 403c 	movw	r0, #17468	; 0x443c
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8005382:	601c      	str	r4, [r3, #0]
    GyroscopeDrv->Init(ctrl);
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	4798      	blx	r3
    
    ret = GYRO_OK;
 8005388:	2000      	movs	r0, #0
  }
  
  return ret;
}
 800538a:	bd10      	pop	{r4, pc}
    ret = GYRO_ERROR;
 800538c:	2001      	movs	r0, #1
 800538e:	e7fc      	b.n	800538a <BSP_GYRO_Init+0x1a>
 8005390:	2000026c 	.word	0x2000026c
 8005394:	200010a8 	.word	0x200010a8

08005398 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv != NULL)
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <BSP_GYRO_GetXYZ+0x10>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	b113      	cbz	r3, 80053a4 <BSP_GYRO_GetXYZ+0xc>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	b103      	cbz	r3, 80053a4 <BSP_GYRO_GetXYZ+0xc>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80053a2:	4718      	bx	r3
    }
  }
}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	200010a8 	.word	0x200010a8

080053ac <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80053ac:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80053ae:	4c07      	ldr	r4, [pc, #28]	; (80053cc <BSP_HSENSOR_Init+0x20>)
 80053b0:	20be      	movs	r0, #190	; 0xbe
 80053b2:	6863      	ldr	r3, [r4, #4]
 80053b4:	4798      	blx	r3
 80053b6:	28bc      	cmp	r0, #188	; 0xbc
 80053b8:	d106      	bne.n	80053c8 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80053bc:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 80053be:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	4798      	blx	r3
    ret = HSENSOR_OK;
 80053c4:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80053c6:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 80053c8:	2001      	movs	r0, #1
  return ret;
 80053ca:	e7fc      	b.n	80053c6 <BSP_HSENSOR_Init+0x1a>
 80053cc:	20000210 	.word	0x20000210
 80053d0:	200010ac 	.word	0x200010ac

080053d4 <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80053d4:	4b02      	ldr	r3, [pc, #8]	; (80053e0 <BSP_HSENSOR_ReadHumidity+0xc>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	20be      	movs	r0, #190	; 0xbe
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4718      	bx	r3
 80053de:	bf00      	nop
 80053e0:	200010ac 	.word	0x200010ac

080053e4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80053e4:	b513      	push	{r0, r1, r4, lr}
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80053e6:	4c0b      	ldr	r4, [pc, #44]	; (8005414 <BSP_MAGNETO_Init+0x30>)
 80053e8:	68a3      	ldr	r3, [r4, #8]
 80053ea:	4798      	blx	r3
 80053ec:	283d      	cmp	r0, #61	; 0x3d
 80053ee:	d10e      	bne.n	800540e <BSP_MAGNETO_Init+0x2a>
    ret = MAGNETO_ERROR;
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <BSP_MAGNETO_Init+0x34>)
 80053f2:	601c      	str	r4, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <BSP_MAGNETO_Init+0x38>)
 80053f6:	9300      	str	r3, [sp, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80053f8:	2340      	movs	r3, #64	; 0x40
 80053fa:	f88d 3004 	strb.w	r3, [sp, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80053fe:	aa02      	add	r2, sp, #8
 8005400:	e912 0003 	ldmdb	r2, {r0, r1}
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8005408:	2000      	movs	r0, #0
  } 

  return ret;  
}
 800540a:	b002      	add	sp, #8
 800540c:	bd10      	pop	{r4, pc}
    ret = MAGNETO_ERROR;
 800540e:	2001      	movs	r0, #1
 8005410:	e7fb      	b.n	800540a <BSP_MAGNETO_Init+0x26>
 8005412:	bf00      	nop
 8005414:	2000021c 	.word	0x2000021c
 8005418:	200010b0 	.word	0x200010b0
 800541c:	08000058 	.word	0x08000058

08005420 <BSP_MAGNETO_GetXYZ>:
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
  if(MagnetoDrv != NULL)
 8005420:	4b03      	ldr	r3, [pc, #12]	; (8005430 <BSP_MAGNETO_GetXYZ+0x10>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	b113      	cbz	r3, 800542c <BSP_MAGNETO_GetXYZ+0xc>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	b103      	cbz	r3, 800542c <BSP_MAGNETO_GetXYZ+0xc>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800542a:	4718      	bx	r3
    }
  }
}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	200010b0 	.word	0x200010b0

08005434 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8005434:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8005436:	4c07      	ldr	r4, [pc, #28]	; (8005454 <BSP_PSENSOR_Init+0x20>)
 8005438:	20ba      	movs	r0, #186	; 0xba
 800543a:	6863      	ldr	r3, [r4, #4]
 800543c:	4798      	blx	r3
 800543e:	28b1      	cmp	r0, #177	; 0xb1
 8005440:	d106      	bne.n	8005450 <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8005444:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 8005446:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	4798      	blx	r3
    ret = PSENSOR_OK;
 800544c:	2000      	movs	r0, #0
  }
  
  return ret;
}
 800544e:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 8005450:	2001      	movs	r0, #1
  return ret;
 8005452:	e7fc      	b.n	800544e <BSP_PSENSOR_Init+0x1a>
 8005454:	20000260 	.word	0x20000260
 8005458:	200010b4 	.word	0x200010b4

0800545c <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800545c:	4b02      	ldr	r3, [pc, #8]	; (8005468 <BSP_PSENSOR_ReadPressure+0xc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	20ba      	movs	r0, #186	; 0xba
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	4718      	bx	r3
 8005466:	bf00      	nop
 8005468:	200010b4 	.word	0x200010b4

0800546c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800546c:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800546e:	4c06      	ldr	r4, [pc, #24]	; (8005488 <BSP_TSENSOR_Init+0x1c>)
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <BSP_TSENSOR_Init+0x20>)
 8005472:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8005474:	f7ff ff12 	bl	800529c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	2100      	movs	r1, #0
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	20be      	movs	r0, #190	; 0xbe
 8005480:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8005482:	2000      	movs	r0, #0
 8005484:	bd10      	pop	{r4, pc}
 8005486:	bf00      	nop
 8005488:	200010b8 	.word	0x200010b8
 800548c:	20000200 	.word	0x20000200

08005490 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <BSP_TSENSOR_ReadTemp+0xc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	20be      	movs	r0, #190	; 0xbe
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4718      	bx	r3
 800549a:	bf00      	nop
 800549c:	200010b8 	.word	0x200010b8

080054a0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80054a0:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80054a2:	b2c4      	uxtb	r4, r0
 80054a4:	2120      	movs	r1, #32
 80054a6:	4620      	mov	r0, r4
 80054a8:	f7ff ff12 	bl	80052d0 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80054ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80054b0:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 80054b4:	2120      	movs	r1, #32
 80054b6:	4620      	mov	r0, r4
}
 80054b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80054bc:	f7ff bef0 	b.w	80052a0 <SENSOR_IO_Write>

080054c0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80054c0:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80054c2:	b2c4      	uxtb	r4, r0
 80054c4:	2120      	movs	r1, #32
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7ff ff02 	bl	80052d0 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80054cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80054d0:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 80054d4:	2120      	movs	r1, #32
 80054d6:	4620      	mov	r0, r4
}
 80054d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80054dc:	f7ff bee0 	b.w	80052a0 <SENSOR_IO_Write>

080054e0 <HTS221_H_ReadID>:
{  
 80054e0:	b510      	push	{r4, lr}
 80054e2:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 80054e4:	f7ff feda 	bl	800529c <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80054e8:	b2e0      	uxtb	r0, r4
 80054ea:	210f      	movs	r1, #15
}
 80054ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80054f0:	f7ff beee 	b.w	80052d0 <SENSOR_IO_Read>

080054f4 <HTS221_H_ReadHumidity>:
{
 80054f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80054f8:	fa5f f880 	uxtb.w	r8, r0
 80054fc:	2302      	movs	r3, #2
 80054fe:	aa01      	add	r2, sp, #4
 8005500:	21b0      	movs	r1, #176	; 0xb0
 8005502:	4640      	mov	r0, r8
 8005504:	f7ff ff00 	bl	8005308 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8005508:	2302      	movs	r3, #2
 800550a:	aa01      	add	r2, sp, #4
 800550c:	21b6      	movs	r1, #182	; 0xb6
 800550e:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 8005510:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 8005514:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8005518:	f7ff fef6 	bl	8005308 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800551c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005520:	f89d 7004 	ldrb.w	r7, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8005524:	2302      	movs	r3, #2
 8005526:	aa01      	add	r2, sp, #4
 8005528:	21ba      	movs	r1, #186	; 0xba
 800552a:	4640      	mov	r0, r8
 800552c:	f7ff feec 	bl	8005308 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005530:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005534:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005538:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800553c:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800553e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8005542:	21a8      	movs	r1, #168	; 0xa8
 8005544:	2302      	movs	r3, #2
 8005546:	4640      	mov	r0, r8
 8005548:	f7ff fede 	bl	8005308 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800554c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005550:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005554:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005558:	b23f      	sxth	r7, r7
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800555a:	b21b      	sxth	r3, r3
 800555c:	1bdb      	subs	r3, r3, r7
 800555e:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 8005562:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 8005564:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8005566:	1bab      	subs	r3, r5, r6
 8005568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800556c:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005570:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8005572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005576:	1be4      	subs	r4, r4, r7
 8005578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557c:	ee07 4a10 	vmov	s14, r4
 8005580:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005584:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8005588:	ee07 6a90 	vmov	s15, r6
 800558c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 8005590:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80055c8 <HTS221_H_ReadHumidity+0xd4>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8005594:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8005598:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800559c:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 80055a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a8:	dc07      	bgt.n	80055ba <HTS221_H_ReadHumidity+0xc6>
        : tmp_f;
 80055aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b2:	d504      	bpl.n	80055be <HTS221_H_ReadHumidity+0xca>
 80055b4:	eddf 7a05 	vldr	s15, [pc, #20]	; 80055cc <HTS221_H_ReadHumidity+0xd8>
 80055b8:	e001      	b.n	80055be <HTS221_H_ReadHumidity+0xca>
        : ( tmp_f <    0.0f ) ?    0.0f
 80055ba:	eef0 7a47 	vmov.f32	s15, s14
}
 80055be:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80055c2:	b002      	add	sp, #8
 80055c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c8:	447a0000 	.word	0x447a0000
 80055cc:	00000000 	.word	0x00000000

080055d0 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80055d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80055d4:	fa5f f880 	uxtb.w	r8, r0
 80055d8:	aa01      	add	r2, sp, #4
 80055da:	2302      	movs	r3, #2
 80055dc:	21b2      	movs	r1, #178	; 0xb2
 80055de:	4640      	mov	r0, r8
 80055e0:	f7ff fe92 	bl	8005308 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80055e4:	2135      	movs	r1, #53	; 0x35
 80055e6:	4640      	mov	r0, r8
 80055e8:	f7ff fe72 	bl	80052d0 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80055ec:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80055ee:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80055f2:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80055f6:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80055f8:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80055fc:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8005600:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8005602:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8005604:	2304      	movs	r3, #4
 8005606:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800560a:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800560c:	21bc      	movs	r1, #188	; 0xbc
 800560e:	4640      	mov	r0, r8
 8005610:	f7ff fe7a 	bl	8005308 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005614:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005618:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800561c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005620:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8005624:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8005628:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800562a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800562e:	21aa      	movs	r1, #170	; 0xaa
 8005630:	2302      	movs	r3, #2
 8005632:	4640      	mov	r0, r8
 8005634:	f7ff fe68 	bl	8005308 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005638:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800563c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005640:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005644:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8005646:	b21b      	sxth	r3, r3
 8005648:	1bdb      	subs	r3, r3, r7
 800564a:	ee07 3a90 	vmov	s15, r3
  T0_degC = T0_degC_x8_u16 >> 3;
 800564e:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8005650:	1bab      	subs	r3, r5, r6
 8005652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005656:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800565a:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800565c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005660:	1be4      	subs	r4, r4, r7
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	ee07 4a10 	vmov	s14, r4
 800566a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800566e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005672:	ee07 6a90 	vmov	s15, r6
 8005676:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 800567a:	ee36 0a80 	vadd.f32	s0, s13, s0
 800567e:	b002      	add	sp, #8
 8005680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005684 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8005684:	b507      	push	{r0, r1, r2, lr}
 8005686:	ab02      	add	r3, sp, #8
 8005688:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800568c:	2120      	movs	r1, #32
 800568e:	f89d 2000 	ldrb.w	r2, [sp]
 8005692:	203c      	movs	r0, #60	; 0x3c
 8005694:	f7ff fe04 	bl	80052a0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8005698:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800569c:	2121      	movs	r1, #33	; 0x21
 800569e:	203c      	movs	r0, #60	; 0x3c
 80056a0:	f7ff fdfe 	bl	80052a0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80056a4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80056a8:	2122      	movs	r1, #34	; 0x22
 80056aa:	203c      	movs	r0, #60	; 0x3c
 80056ac:	f7ff fdf8 	bl	80052a0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80056b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80056b4:	2123      	movs	r1, #35	; 0x23
 80056b6:	203c      	movs	r0, #60	; 0x3c
 80056b8:	f7ff fdf2 	bl	80052a0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80056bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80056c0:	2124      	movs	r1, #36	; 0x24
 80056c2:	203c      	movs	r0, #60	; 0x3c
}
 80056c4:	b003      	add	sp, #12
 80056c6:	f85d eb04 	ldr.w	lr, [sp], #4
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80056ca:	f7ff bde9 	b.w	80052a0 <SENSOR_IO_Write>

080056ce <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80056ce:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80056d0:	2122      	movs	r1, #34	; 0x22
 80056d2:	203c      	movs	r0, #60	; 0x3c
 80056d4:	f7ff fdfc 	bl	80052d0 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80056d8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80056dc:	f040 0203 	orr.w	r2, r0, #3
}
 80056e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80056e4:	2122      	movs	r1, #34	; 0x22
 80056e6:	203c      	movs	r0, #60	; 0x3c
 80056e8:	f7ff bdda 	b.w	80052a0 <SENSOR_IO_Write>

080056ec <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80056ec:	b510      	push	{r4, lr}
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80056ee:	2122      	movs	r1, #34	; 0x22
{  
 80056f0:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80056f2:	203c      	movs	r0, #60	; 0x3c
 80056f4:	f7ff fdec 	bl	80052d0 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80056f8:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 80056fc:	b10c      	cbz	r4, 8005702 <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80056fe:	f042 0220 	orr.w	r2, r2, #32
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
}
 8005702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8005706:	2122      	movs	r1, #34	; 0x22
 8005708:	203c      	movs	r0, #60	; 0x3c
 800570a:	f7ff bdc9 	b.w	80052a0 <SENSOR_IO_Write>

0800570e <LIS3MDL_MagReadID>:
{
 800570e:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8005710:	f7ff fdc4 	bl	800529c <SENSOR_IO_Init>
}
 8005714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8005718:	210f      	movs	r1, #15
 800571a:	203c      	movs	r0, #60	; 0x3c
 800571c:	f7ff bdd8 	b.w	80052d0 <SENSOR_IO_Read>

08005720 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8005720:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005722:	2121      	movs	r1, #33	; 0x21
{
 8005724:	b085      	sub	sp, #20
 8005726:	4605      	mov	r5, r0
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005728:	203c      	movs	r0, #60	; 0x3c
 800572a:	f7ff fdd1 	bl	80052d0 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800572e:	2306      	movs	r3, #6
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005730:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8005732:	aa02      	add	r2, sp, #8
 8005734:	21a8      	movs	r1, #168	; 0xa8
 8005736:	203c      	movs	r0, #60	; 0x3c
 8005738:	f7ff fde6 	bl	8005308 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800573c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8005740:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005744:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005748:	f8ad 3000 	strh.w	r3, [sp]
 800574c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8005750:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8005754:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005758:	f8ad 3002 	strh.w	r3, [sp, #2]
 800575c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8005760:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005764:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8005768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800576c:	2c40      	cmp	r4, #64	; 0x40
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800576e:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlm & 0x60)
 8005772:	d024      	beq.n	80057be <LIS3MDL_MagReadXYZ+0x9e>
 8005774:	d81d      	bhi.n	80057b2 <LIS3MDL_MagReadXYZ+0x92>
 8005776:	b32c      	cbz	r4, 80057c4 <LIS3MDL_MagReadXYZ+0xa4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
    break;
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8005778:	eddf 7a14 	vldr	s15, [pc, #80]	; 80057cc <LIS3MDL_MagReadXYZ+0xac>
 800577c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80057d0 <LIS3MDL_MagReadXYZ+0xb0>
 8005780:	2c20      	cmp	r4, #32
    break;
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
    break;
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8005782:	bf08      	it	eq
 8005784:	eef0 7a47 	vmoveq.f32	s15, s14
    break;    
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8005788:	1eab      	subs	r3, r5, #2
 800578a:	466a      	mov	r2, sp
 800578c:	3504      	adds	r5, #4
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800578e:	f932 1b02 	ldrsh.w	r1, [r2], #2
 8005792:	ee07 1a10 	vmov	s14, r1
 8005796:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800579a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800579e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80057a2:	ee17 1a10 	vmov	r1, s14
 80057a6:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 80057aa:	429d      	cmp	r5, r3
 80057ac:	d1ef      	bne.n	800578e <LIS3MDL_MagReadXYZ+0x6e>
  }
}
 80057ae:	b005      	add	sp, #20
 80057b0:	bd30      	pop	{r4, r5, pc}
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80057b2:	eddf 7a06 	vldr	s15, [pc, #24]	; 80057cc <LIS3MDL_MagReadXYZ+0xac>
 80057b6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80057d4 <LIS3MDL_MagReadXYZ+0xb4>
 80057ba:	2c60      	cmp	r4, #96	; 0x60
 80057bc:	e7e1      	b.n	8005782 <LIS3MDL_MagReadXYZ+0x62>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80057be:	eddf 7a06 	vldr	s15, [pc, #24]	; 80057d8 <LIS3MDL_MagReadXYZ+0xb8>
 80057c2:	e7e1      	b.n	8005788 <LIS3MDL_MagReadXYZ+0x68>
  switch(ctrlm & 0x60)
 80057c4:	eddf 7a05 	vldr	s15, [pc, #20]	; 80057dc <LIS3MDL_MagReadXYZ+0xbc>
 80057c8:	e7de      	b.n	8005788 <LIS3MDL_MagReadXYZ+0x68>
 80057ca:	bf00      	nop
 80057cc:	00000000 	.word	0x00000000
 80057d0:	3e947ae1 	.word	0x3e947ae1
 80057d4:	3f147ae1 	.word	0x3f147ae1
 80057d8:	3edc28f6 	.word	0x3edc28f6
 80057dc:	3e0f5c29 	.word	0x3e0f5c29

080057e0 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80057e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80057e2:	b2c4      	uxtb	r4, r0
 80057e4:	2128      	movs	r1, #40	; 0x28
 80057e6:	4620      	mov	r0, r4
 80057e8:	f7ff fd72 	bl	80052d0 <SENSOR_IO_Read>
 80057ec:	2129      	movs	r1, #41	; 0x29
 80057ee:	4605      	mov	r5, r0
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff fd6d 	bl	80052d0 <SENSOR_IO_Read>
 80057f6:	212a      	movs	r1, #42	; 0x2a
 80057f8:	4606      	mov	r6, r0
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7ff fd68 	bl	80052d0 <SENSOR_IO_Read>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8005800:	0402      	lsls	r2, r0, #16
 8005802:	ea42 2306 	orr.w	r3, r2, r6, lsl #8
 8005806:	ea43 0005 	orr.w	r0, r3, r5

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800580a:	0203      	lsls	r3, r0, #8
    tmp |= 0xFF000000;
 800580c:	bf48      	it	mi
 800580e:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 8005812:	2364      	movs	r3, #100	; 0x64
 8005814:	4358      	muls	r0, r3
 8005816:	bf48      	it	mi
 8005818:	f600 70ff 	addwmi	r0, r0, #4095	; 0xfff
 800581c:	1300      	asrs	r0, r0, #12

  return (float)((float)raw_press / 100.0f);
 800581e:	ee07 0a90 	vmov	s15, r0
 8005822:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8005826:	eddf 7a02 	vldr	s15, [pc, #8]	; 8005830 <LPS22HB_P_ReadPressure+0x50>
 800582a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	42c80000 	.word	0x42c80000

08005834 <LPS22HB_T_ReadTemp>:
  * @brief  Read temperature value of LPS22HB
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float LPS22HB_T_ReadTemp(uint16_t DeviceAddr)
{
 8005834:	b538      	push	{r3, r4, r5, lr}
  uint16_t tmp;
  uint8_t i;

  for(i = 0; i < 2; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_TEMP_OUT_L_REG + i));
 8005836:	b2c5      	uxtb	r5, r0
 8005838:	212b      	movs	r1, #43	; 0x2b
 800583a:	4628      	mov	r0, r5
 800583c:	f7ff fd48 	bl	80052d0 <SENSOR_IO_Read>
 8005840:	212c      	movs	r1, #44	; 0x2c
 8005842:	4604      	mov	r4, r0
 8005844:	4628      	mov	r0, r5
 8005846:	f7ff fd43 	bl	80052d0 <SENSOR_IO_Read>
  }

  /* Build the raw tmp */
  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 800584a:	eb04 2400 	add.w	r4, r4, r0, lsl #8

  raw_data = (tmp * 10) / 100;
 800584e:	b2a4      	uxth	r4, r4
 8005850:	200a      	movs	r0, #10
 8005852:	fbb4 f4f0 	udiv	r4, r4, r0
  
  return ((float)(raw_data / 10.0f));
 8005856:	b223      	sxth	r3, r4
 8005858:	ee00 3a10 	vmov	s0, r3
 800585c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8005860:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8005864:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005868:	bd38      	pop	{r3, r4, r5, pc}

0800586a <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800586a:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800586c:	b2c4      	uxtb	r4, r0
 800586e:	211a      	movs	r1, #26
 8005870:	4620      	mov	r0, r4
 8005872:	f7ff fd2d 	bl	80052d0 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8005876:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800587a:	f040 0201 	orr.w	r2, r0, #1
 800587e:	211a      	movs	r1, #26
 8005880:	4620      	mov	r0, r4
 8005882:	f7ff fd0d 	bl	80052a0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8005886:	2110      	movs	r1, #16
 8005888:	4620      	mov	r0, r4
 800588a:	f7ff fd21 	bl	80052d0 <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800588e:	f000 008d 	and.w	r0, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8005892:	f040 0232 	orr.w	r2, r0, #50	; 0x32
 8005896:	2110      	movs	r1, #16
 8005898:	4620      	mov	r0, r4
}  
 800589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800589e:	f7ff bcff 	b.w	80052a0 <SENSOR_IO_Write>

080058a2 <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 80058a2:	f7ff bfe2 	b.w	800586a <LPS22HB_Init>

080058a6 <LPS22HB_T_Init>:
  LPS22HB_Init(DeviceAddr);
 80058a6:	f7ff bfe0 	b.w	800586a <LPS22HB_Init>

080058aa <LPS22HB_P_ReadID>:
{  
 80058aa:	b510      	push	{r4, lr}
 80058ac:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 80058ae:	f7ff fcf5 	bl	800529c <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80058b2:	b2e0      	uxtb	r0, r4
 80058b4:	210f      	movs	r1, #15
}
 80058b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80058ba:	f7ff bd09 	b.w	80052d0 <SENSOR_IO_Read>

080058be <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80058be:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80058c0:	2110      	movs	r1, #16
{  
 80058c2:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80058c4:	20d4      	movs	r0, #212	; 0xd4
 80058c6:	f7ff fd03 	bl	80052d0 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 80058ca:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 80058ce:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	2110      	movs	r1, #16
 80058d4:	20d4      	movs	r0, #212	; 0xd4
 80058d6:	f7ff fce3 	bl	80052a0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80058da:	2112      	movs	r1, #18
 80058dc:	20d4      	movs	r0, #212	; 0xd4
 80058de:	f7ff fcf7 	bl	80052d0 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 80058e2:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80058e6:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 80058ea:	2112      	movs	r1, #18
}
 80058ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80058f0:	20d4      	movs	r0, #212	; 0xd4
 80058f2:	f7ff bcd5 	b.w	80052a0 <SENSOR_IO_Write>

080058f6 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80058f6:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80058f8:	2110      	movs	r1, #16
 80058fa:	20d4      	movs	r0, #212	; 0xd4
 80058fc:	f7ff fce8 	bl	80052d0 <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
}
 8005900:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8005904:	f000 020f 	and.w	r2, r0, #15
 8005908:	2110      	movs	r1, #16
 800590a:	20d4      	movs	r0, #212	; 0xd4
 800590c:	f7ff bcc8 	b.w	80052a0 <SENSOR_IO_Write>

08005910 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8005910:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8005912:	2115      	movs	r1, #21
{
 8005914:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8005916:	20d4      	movs	r0, #212	; 0xd4
 8005918:	f7ff fcda 	bl	80052d0 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800591c:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8005920:	b10c      	cbz	r4, 8005926 <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8005922:	f042 0210 	orr.w	r2, r2, #16
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
}
 8005926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800592a:	2115      	movs	r1, #21
 800592c:	20d4      	movs	r0, #212	; 0xd4
 800592e:	f7ff bcb7 	b.w	80052a0 <SENSOR_IO_Write>

08005932 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8005932:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005934:	2111      	movs	r1, #17
{  
 8005936:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005938:	20d4      	movs	r0, #212	; 0xd4
 800593a:	f7ff fcc9 	bl	80052d0 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 800593e:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8005942:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	2111      	movs	r1, #17
 8005948:	20d4      	movs	r0, #212	; 0xd4
 800594a:	f7ff fca9 	bl	80052a0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800594e:	2112      	movs	r1, #18
 8005950:	20d4      	movs	r0, #212	; 0xd4
 8005952:	f7ff fcbd 	bl	80052d0 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8005956:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800595a:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 800595e:	2112      	movs	r1, #18
}
 8005960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005964:	20d4      	movs	r0, #212	; 0xd4
 8005966:	f7ff bc9b 	b.w	80052a0 <SENSOR_IO_Write>

0800596a <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800596a:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800596c:	2111      	movs	r1, #17
 800596e:	20d4      	movs	r0, #212	; 0xd4
 8005970:	f7ff fcae 	bl	80052d0 <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
}
 8005974:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8005978:	f000 020f 	and.w	r2, r0, #15
 800597c:	2111      	movs	r1, #17
 800597e:	20d4      	movs	r0, #212	; 0xd4
 8005980:	f7ff bc8e 	b.w	80052a0 <SENSOR_IO_Write>

08005984 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8005984:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8005986:	2116      	movs	r1, #22
{  
 8005988:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800598a:	20d4      	movs	r0, #212	; 0xd4
 800598c:	f7ff fca0 	bl	80052d0 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8005990:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 8005994:	b10c      	cbz	r4, 800599a <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8005996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
}
 800599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800599e:	2116      	movs	r1, #22
 80059a0:	20d4      	movs	r0, #212	; 0xd4
 80059a2:	f7ff bc7d 	b.w	80052a0 <SENSOR_IO_Write>

080059a6 <LSM6DSL_AccReadID>:
{  
 80059a6:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 80059a8:	f7ff fc78 	bl	800529c <SENSOR_IO_Init>
}
 80059ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80059b0:	210f      	movs	r1, #15
 80059b2:	20d4      	movs	r0, #212	; 0xd4
 80059b4:	f7ff bc8c 	b.w	80052d0 <SENSOR_IO_Read>

080059b8 <LSM6DSL_GyroReadID>:
 80059b8:	f7ff bff5 	b.w	80059a6 <LSM6DSL_AccReadID>

080059bc <LSM6DSL_AccReadXYZ>:
{
 80059bc:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80059be:	2110      	movs	r1, #16
{
 80059c0:	b085      	sub	sp, #20
 80059c2:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80059c4:	20d4      	movs	r0, #212	; 0xd4
 80059c6:	f7ff fc83 	bl	80052d0 <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80059ca:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80059cc:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80059ce:	aa02      	add	r2, sp, #8
 80059d0:	2128      	movs	r1, #40	; 0x28
 80059d2:	20d4      	movs	r0, #212	; 0xd4
 80059d4:	f7ff fc98 	bl	8005308 <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80059d8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80059dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80059e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059e4:	f8ad 3000 	strh.w	r3, [sp]
 80059e8:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80059ec:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80059f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059f4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80059f8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80059fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005a00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a04:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlx & 0x0C)
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <LSM6DSL_AccReadXYZ+0x84>)
 8005a0a:	f005 050c 	and.w	r5, r5, #12
 8005a0e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005a12:	ed95 7a00 	vldr	s14, [r5]
  for(i=0; i<3; i++)
 8005a16:	1ea3      	subs	r3, r4, #2
 8005a18:	466a      	mov	r2, sp
 8005a1a:	3404      	adds	r4, #4
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8005a1c:	f932 1b02 	ldrsh.w	r1, [r2], #2
 8005a20:	ee07 1a90 	vmov	s15, r1
 8005a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a30:	ee17 1a90 	vmov	r1, s15
 8005a34:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d1ef      	bne.n	8005a1c <LSM6DSL_AccReadXYZ+0x60>
}
 8005a3c:	b005      	add	sp, #20
 8005a3e:	bd30      	pop	{r4, r5, pc}
 8005a40:	080285f0 	.word	0x080285f0

08005a44 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8005a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a46:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005a48:	2111      	movs	r1, #17
 8005a4a:	20d4      	movs	r0, #212	; 0xd4
 8005a4c:	f7ff fc40 	bl	80052d0 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8005a50:	466a      	mov	r2, sp
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005a52:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8005a54:	2306      	movs	r3, #6
 8005a56:	2122      	movs	r1, #34	; 0x22
 8005a58:	20d4      	movs	r0, #212	; 0xd4
 8005a5a:	f7ff fc55 	bl	8005308 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005a5e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005a62:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005a66:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a6a:	b21b      	sxth	r3, r3
 8005a6c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005a70:	ee07 3a10 	vmov	s14, r3
 8005a74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a78:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	ee07 3a90 	vmov	s15, r3
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8005a82:	4b12      	ldr	r3, [pc, #72]	; (8005acc <LSM6DSL_GyroReadXYZAngRate+0x88>)
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005a84:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005a88:	f005 050c 	and.w	r5, r5, #12
 8005a8c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005a90:	f89d 3000 	ldrb.w	r3, [sp]
 8005a94:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8005a98:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8005a9c:	b21b      	sxth	r3, r3
 8005a9e:	ee06 3a90 	vmov	s13, r3
 8005aa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005aa6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aae:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005ab2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005ab6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005aba:	edc4 6a00 	vstr	s13, [r4]
 8005abe:	ed84 7a01 	vstr	s14, [r4, #4]
 8005ac2:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 8005ac6:	b003      	add	sp, #12
 8005ac8:	bd30      	pop	{r4, r5, pc}
 8005aca:	bf00      	nop
 8005acc:	080285f0 	.word	0x080285f0

08005ad0 <VL53L0X_GetDeviceInfo>:
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8005ad0:	f002 ba38 	b.w	8007f44 <VL53L0X_get_device_info>

08005ad4 <VL53L0X_SetDeviceMode>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005ad4:	2915      	cmp	r1, #21
 8005ad6:	d807      	bhi.n	8005ae8 <VL53L0X_SetDeviceMode+0x14>
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <VL53L0X_SetDeviceMode+0x1c>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	408a      	lsls	r2, r1
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b113      	cbz	r3, 8005ae8 <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005ae2:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ae4:	2000      	movs	r0, #0
		break;
 8005ae6:	4770      	bx	lr
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ae8:	f06f 0007 	mvn.w	r0, #7
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	0030000b 	.word	0x0030000b

08005af4 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005af4:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005af6:	460a      	mov	r2, r1
{
 8005af8:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005afa:	2109      	movs	r1, #9
 8005afc:	f7fe fd7d 	bl	80045fa <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 8005b00:	b918      	cbnz	r0, 8005b0a <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 8005b02:	7823      	ldrb	r3, [r4, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005b0a:	bd10      	pop	{r4, pc}

08005b0c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005b0c:	f001 be4c 	b.w	80077a8 <VL53L0X_set_measurement_timing_budget_micro_seconds>

08005b10 <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005b10:	f001 bd2c 	b.w	800756c <VL53L0X_set_vcsel_pulse_period>

08005b14 <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005b14:	f001 be2e 	b.w	8007774 <VL53L0X_get_vcsel_pulse_period>

08005b18 <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8005b1a:	2300      	movs	r3, #0
{
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	4617      	mov	r7, r2
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005b20:	2101      	movs	r1, #1
 8005b22:	f10d 0207 	add.w	r2, sp, #7
{
 8005b26:	4606      	mov	r6, r0
	uint8_t SequenceConfig = 0;
 8005b28:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005b2c:	f7fe fd65 	bl	80045fa <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 8005b30:	4605      	mov	r5, r0
 8005b32:	b9d8      	cbnz	r0, 8005b6c <VL53L0X_SetSequenceStepEnable+0x54>
		if (SequenceStepEnabled == 1) {
 8005b34:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 8005b36:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 8005b3a:	d126      	bne.n	8005b8a <VL53L0X_SetSequenceStepEnable+0x72>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005b3c:	2c04      	cmp	r4, #4
 8005b3e:	d83a      	bhi.n	8005bb6 <VL53L0X_SetSequenceStepEnable+0x9e>
 8005b40:	e8df f004 	tbb	[pc, r4]
 8005b44:	1d1a1703 	.word	0x1d1a1703
 8005b48:	20          	.byte	0x20
 8005b49:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005b4a:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005b4e:	42a3      	cmp	r3, r4
 8005b50:	d00c      	beq.n	8005b6c <VL53L0X_SetSequenceStepEnable+0x54>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8005b52:	4622      	mov	r2, r4
 8005b54:	2101      	movs	r1, #1
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7fe fdde 	bl	8004718 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	b928      	cbnz	r0, 8005b6c <VL53L0X_SetSequenceStepEnable+0x54>
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005b60:	6971      	ldr	r1, [r6, #20]
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005b62:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005b66:	4630      	mov	r0, r6
 8005b68:	f7ff ffd0 	bl	8005b0c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	b003      	add	sp, #12
 8005b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 8005b72:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 8005b76:	e7ea      	b.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x04;
 8005b78:	f043 0404 	orr.w	r4, r3, #4
				break;
 8005b7c:	e7e7      	b.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x40;
 8005b7e:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 8005b82:	e7e4      	b.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x80;
 8005b84:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 8005b88:	e7e1      	b.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x36>
			switch (SequenceStepId) {
 8005b8a:	2c04      	cmp	r4, #4
 8005b8c:	d813      	bhi.n	8005bb6 <VL53L0X_SetSequenceStepEnable+0x9e>
 8005b8e:	e8df f004 	tbb	[pc, r4]
 8005b92:	0603      	.short	0x0603
 8005b94:	0c09      	.short	0x0c09
 8005b96:	0f          	.byte	0x0f
 8005b97:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 8005b98:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 8005b9c:	e7d7      	b.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xd7;
 8005b9e:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 8005ba2:	e7d4      	b.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xfb;
 8005ba4:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 8005ba8:	e7d1      	b.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xbf;
 8005baa:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 8005bae:	e7ce      	b.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0x7f;
 8005bb0:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 8005bb4:	e7cb      	b.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x36>
		if (SequenceStepEnabled == 1) {
 8005bb6:	f06f 0503 	mvn.w	r5, #3
 8005bba:	e7d7      	b.n	8005b6c <VL53L0X_SetSequenceStepEnable+0x54>

08005bbc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005bbc:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8005bbe:	2300      	movs	r3, #0
{
 8005bc0:	460c      	mov	r4, r1
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005bc2:	f10d 0207 	add.w	r2, sp, #7
 8005bc6:	2101      	movs	r1, #1
	uint8_t SequenceConfig = 0;
 8005bc8:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005bcc:	f7fe fd15 	bl	80045fa <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005bd0:	b978      	cbnz	r0, 8005bf2 <VL53L0X_GetSequenceStepEnables+0x36>
		Status = sequence_step_enabled(Dev,
 8005bd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005bd6:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005bda:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005bdc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005be0:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005be2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8005be6:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005be8:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005bec:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005bee:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005bf0:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005bf2:	b002      	add	sp, #8
 8005bf4:	bd10      	pop	{r4, pc}

08005bf6 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8005bf6:	b513      	push	{r0, r1, r4, lr}
 8005bf8:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8005bfa:	aa01      	add	r2, sp, #4
 8005bfc:	f001 fc10 	bl	8007420 <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8005c00:	b978      	cbnz	r0, 8005c22 <VL53L0X_GetSequenceStepTimeout+0x2c>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8005c02:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8005c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c0c:	fb02 3311 	mls	r3, r2, r1, r3
 8005c10:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8005c14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c1c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8005c20:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005c22:	b002      	add	sp, #8
 8005c24:	bd10      	pop	{r4, pc}

08005c26 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005c26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c28:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005c2a:	f10d 0202 	add.w	r2, sp, #2
 8005c2e:	21f8      	movs	r1, #248	; 0xf8
{
 8005c30:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005c32:	f7fe fd2b 	bl	800468c <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005c36:	b970      	cbnz	r0, 8005c56 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 8005c38:	aa01      	add	r2, sp, #4
 8005c3a:	2104      	movs	r1, #4
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7fe fd45 	bl	80046cc <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c42:	b940      	cbnz	r0, 8005c56 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 8005c44:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005c48:	b11a      	cbz	r2, 8005c52 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005c4a:	9b01      	ldr	r3, [sp, #4]
 8005c4c:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005c50:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005c52:	682b      	ldr	r3, [r5, #0]
 8005c54:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005c56:	b003      	add	sp, #12
 8005c58:	bd30      	pop	{r4, r5, pc}

08005c5a <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005c5a:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8005c5c:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005c5e:	2000      	movs	r0, #0
 8005c60:	4770      	bx	lr

08005c62 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005c62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c64:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005c66:	f10d 0206 	add.w	r2, sp, #6
 8005c6a:	2120      	movs	r1, #32
{
 8005c6c:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 8005c6e:	f7fe fd0d 	bl	800468c <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005c72:	b928      	cbnz	r0, 8005c80 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 8005c74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005c78:	b923      	cbnz	r3, 8005c84 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005c7a:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005c7c:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005c7e:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005c80:	b003      	add	sp, #12
 8005c82:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005c84:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005c86:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005c88:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	7723      	strb	r3, [r4, #28]
 8005c8e:	e7f7      	b.n	8005c80 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

08005c90 <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005c90:	2905      	cmp	r1, #5
{
 8005c92:	b570      	push	{r4, r5, r6, lr}
 8005c94:	4604      	mov	r4, r0
 8005c96:	460e      	mov	r6, r1
 8005c98:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005c9a:	d835      	bhi.n	8005d08 <VL53L0X_SetLimitCheckEnable+0x78>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 8005c9c:	b162      	cbz	r2, 8005cb8 <VL53L0X_SetLimitCheckEnable+0x28>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c9e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005ca2:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 8005ca6:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 8005ca8:	1e70      	subs	r0, r6, #1
 8005caa:	2804      	cmp	r0, #4
 8005cac:	d807      	bhi.n	8005cbe <VL53L0X_SetLimitCheckEnable+0x2e>
 8005cae:	e8df f000 	tbb	[pc, r0]
 8005cb2:	170e      	.short	0x170e
 8005cb4:	1d1a      	.short	0x1d1a
 8005cb6:	24          	.byte	0x24
 8005cb7:	00          	.byte	0x00
			LimitCheckEnableInt = 0;
 8005cb8:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e7f4      	b.n	8005ca8 <VL53L0X_SetLimitCheckEnable+0x18>

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005cbe:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 8005cc2:	4434      	add	r4, r6
 8005cc4:	b9e5      	cbnz	r5, 8005d00 <VL53L0X_SetLimitCheckEnable+0x70>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005cc6:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005cca:	2000      	movs	r0, #0
 8005ccc:	e007      	b.n	8005cde <VL53L0X_SetLimitCheckEnable+0x4e>
			Status = VL53L0X_WrWord(Dev,
 8005cce:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005cd2:	2144      	movs	r1, #68	; 0x44
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f7fe fd2f 	bl	8004738 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d0f1      	beq.n	8005cc2 <VL53L0X_SetLimitCheckEnable+0x32>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005ce0:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	if (Status == VL53L0X_ERROR_NONE) {
 8005ce4:	e7ed      	b.n	8005cc2 <VL53L0X_SetLimitCheckEnable+0x32>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005ce6:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	if (Status == VL53L0X_ERROR_NONE) {
 8005cea:	e7ea      	b.n	8005cc2 <VL53L0X_SetLimitCheckEnable+0x32>
			Status = VL53L0X_UpdateByte(Dev,
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 8005cf0:	2160      	movs	r1, #96	; 0x60
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7fe fd32 	bl	800475c <VL53L0X_UpdateByte>
			break;
 8005cf8:	e7ef      	b.n	8005cda <VL53L0X_SetLimitCheckEnable+0x4a>
			Status = VL53L0X_UpdateByte(Dev,
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	22ef      	movs	r2, #239	; 0xef
 8005cfe:	e7f7      	b.n	8005cf0 <VL53L0X_SetLimitCheckEnable+0x60>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005d00:	2301      	movs	r3, #1
 8005d02:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8005d06:	e7e0      	b.n	8005cca <VL53L0X_SetLimitCheckEnable+0x3a>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d08:	f06f 0003 	mvn.w	r0, #3
 8005d0c:	e7e7      	b.n	8005cde <VL53L0X_SetLimitCheckEnable+0x4e>

08005d0e <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005d0e:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005d10:	bf96      	itet	ls
 8005d12:	1809      	addls	r1, r1, r0
		*pLimitCheckEnable = 0;
 8005d14:	2300      	movhi	r3, #0
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005d16:	f891 3028 	ldrbls.w	r3, [r1, #40]	; 0x28
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005d1a:	7013      	strb	r3, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d1c:	bf94      	ite	ls
 8005d1e:	2000      	movls	r0, #0
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d20:	f06f 0003 	mvnhi.w	r0, #3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005d24:	4770      	bx	lr

08005d26 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005d26:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005d28:	1843      	adds	r3, r0, r1
{
 8005d2a:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005d2c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 8005d30:	460e      	mov	r6, r1
 8005d32:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 8005d34:	b918      	cbnz	r0, 8005d3e <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d36:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005d3a:	6362      	str	r2, [r4, #52]	; 0x34
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005d3c:	bd70      	pop	{r4, r5, r6, pc}
		switch (LimitCheckId) {
 8005d3e:	2905      	cmp	r1, #5
 8005d40:	d81b      	bhi.n	8005d7a <VL53L0X_SetLimitCheckValue+0x54>
 8005d42:	e8df f001 	tbb	[pc, r1]
 8005d46:	0903      	.short	0x0903
 8005d48:	16161412 	.word	0x16161412
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d4c:	6362      	str	r2, [r4, #52]	; 0x34
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d4e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8005d52:	2000      	movs	r0, #0
 8005d54:	6365      	str	r5, [r4, #52]	; 0x34
 8005d56:	e7f1      	b.n	8005d3c <VL53L0X_SetLimitCheckValue+0x16>
			Status = VL53L0X_WrWord(Dev,
 8005d58:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005d5c:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f7fe fcea 	bl	8004738 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d1e9      	bne.n	8005d3c <VL53L0X_SetLimitCheckValue+0x16>
 8005d68:	e7f1      	b.n	8005d4e <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d6a:	63e2      	str	r2, [r4, #60]	; 0x3c
		if (Status == VL53L0X_ERROR_NONE) {
 8005d6c:	e7ef      	b.n	8005d4e <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d6e:	6422      	str	r2, [r4, #64]	; 0x40
		if (Status == VL53L0X_ERROR_NONE) {
 8005d70:	e7ed      	b.n	8005d4e <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 8005d72:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005d76:	2164      	movs	r1, #100	; 0x64
 8005d78:	e7f1      	b.n	8005d5e <VL53L0X_SetLimitCheckValue+0x38>
	if (Temp8 == 0) { /* disabled write only internal value */
 8005d7a:	f06f 0003 	mvn.w	r0, #3
 8005d7e:	e7dd      	b.n	8005d3c <VL53L0X_SetLimitCheckValue+0x16>

08005d80 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d82:	4604      	mov	r4, r0
 8005d84:	4615      	mov	r5, r2
 8005d86:	2905      	cmp	r1, #5
 8005d88:	d82c      	bhi.n	8005de4 <VL53L0X_GetLimitCheckValue+0x64>
 8005d8a:	e8df f001 	tbb	[pc, r1]
 8005d8e:	0703      	.short	0x0703
 8005d90:	1b1b1917 	.word	0x1b1b1917

	switch (LimitCheckId) {

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d94:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e021      	b.n	8005de0 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 8005d9c:	f10d 0206 	add.w	r2, sp, #6
 8005da0:	2144      	movs	r1, #68	; 0x44
 8005da2:	f7fe fc73 	bl	800468c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8005da6:	b9d8      	cbnz	r0, 8005de0 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005da8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 8005dac:	0253      	lsls	r3, r2, #9
 8005dae:	b19a      	cbz	r2, 8005dd8 <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 8005db0:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005db2:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005db4:	2301      	movs	r3, #1
 8005db6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8005dba:	e011      	b.n	8005de0 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005dbc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		if (EnableZeroValue == 1) {
 8005dbe:	e7ea      	b.n	8005d96 <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005dc0:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (EnableZeroValue == 1) {
 8005dc2:	e7e8      	b.n	8005d96 <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 8005dc4:	f10d 0206 	add.w	r2, sp, #6
 8005dc8:	2164      	movs	r1, #100	; 0x64
 8005dca:	f7fe fc5f 	bl	800468c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8005dce:	b938      	cbnz	r0, 8005de0 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005dd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005dd4:	025b      	lsls	r3, r3, #9
		if (EnableZeroValue == 1) {
 8005dd6:	e7de      	b.n	8005d96 <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005dd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 8005dda:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005ddc:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8005de0:	b003      	add	sp, #12
 8005de2:	bd30      	pop	{r4, r5, pc}
			*pLimitCheckValue = TempFix1616;
 8005de4:	f06f 0003 	mvn.w	r0, #3
 8005de8:	e7fa      	b.n	8005de0 <VL53L0X_GetLimitCheckValue+0x60>

08005dea <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005dea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dec:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005dee:	f10d 0207 	add.w	r2, sp, #7
 8005df2:	2101      	movs	r1, #1
{
 8005df4:	4604      	mov	r4, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005df6:	f7fe fc00 	bl	80045fa <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8005dfa:	b938      	cbnz	r0, 8005e0c <VL53L0X_GetWrapAroundCheckEnable+0x22>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e00:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (data & (0x01 << 7))
			*pWrapAroundCheckEnable = 0x01;
 8005e04:	09db      	lsrs	r3, r3, #7
 8005e06:	702b      	strb	r3, [r5, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005e08:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005e0c:	b003      	add	sp, #12
 8005e0e:	bd30      	pop	{r4, r5, pc}

08005e10 <VL53L0X_GetDeviceParameters>:
{
 8005e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005e14:	7c03      	ldrb	r3, [r0, #16]
{
 8005e16:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005e18:	f801 3b08 	strb.w	r3, [r1], #8
{
 8005e1c:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005e1e:	f7ff ff02 	bl	8005c26 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8005e22:	bb40      	cbnz	r0, 8005e76 <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005e24:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005e26:	f104 0110 	add.w	r1, r4, #16
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f7ff ff19 	bl	8005c62 <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8005e30:	bb08      	cbnz	r0, 8005e76 <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005e32:	f104 0114 	add.w	r1, r4, #20
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 fbc5 	bl	80065c6 <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8005e3c:	b9d8      	cbnz	r0, 8005e76 <VL53L0X_GetDeviceParameters+0x66>
 8005e3e:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8005e42:	f105 0928 	add.w	r9, r5, #40	; 0x28
 8005e46:	f104 0818 	add.w	r8, r4, #24
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e4a:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005e4c:	463a      	mov	r2, r7
 8005e4e:	b2b1      	uxth	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	f7ff ff95 	bl	8005d80 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 8005e56:	b970      	cbnz	r0, 8005e76 <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e58:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005e5a:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
 8005e5e:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e62:	2e06      	cmp	r6, #6
 8005e64:	f107 0704 	add.w	r7, r7, #4
 8005e68:	d1f0      	bne.n	8005e4c <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005e6a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f7ff ffbb 	bl	8005dea <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005e74:	b108      	cbz	r0, 8005e7a <VL53L0X_GetDeviceParameters+0x6a>
}
 8005e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005e7a:	1d21      	adds	r1, r4, #4
 8005e7c:	4628      	mov	r0, r5
}
 8005e7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005e82:	f001 bcf9 	b.w	8007878 <VL53L0X_get_measurement_timing_budget_micro_seconds>
	...

08005e88 <VL53L0X_DataInit>:
{
 8005e88:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005e8a:	2200      	movs	r2, #0
{
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	b091      	sub	sp, #68	; 0x44
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005e90:	2188      	movs	r1, #136	; 0x88
 8005e92:	f7fe fc41 	bl	8004718 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e9a:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005e9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ea2:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005ea6:	4a31      	ldr	r2, [pc, #196]	; (8005f6c <VL53L0X_DataInit+0xe4>)
 8005ea8:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005eac:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005eae:	4a30      	ldr	r2, [pc, #192]	; (8005f70 <VL53L0X_DataInit+0xe8>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005eb0:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005eb4:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005eb8:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005eba:	4669      	mov	r1, sp
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f7ff ffa7 	bl	8005e10 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	b970      	cbnz	r0, 8005ee4 <VL53L0X_DataInit+0x5c>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005ec6:	f8ad 0000 	strh.w	r0, [sp]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005eca:	466e      	mov	r6, sp
 8005ecc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ece:	f105 0710 	add.w	r7, r5, #16
 8005ed2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005ed4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ed6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005ed8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005eda:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005edc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005ee0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005ee4:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <VL53L0X_DataInit+0xec>)
 8005ee6:	4a24      	ldr	r2, [pc, #144]	; (8005f78 <VL53L0X_DataInit+0xf0>)
 8005ee8:	e9c5 234d 	strd	r2, r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005eec:	2301      	movs	r3, #1
 8005eee:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ef2:	2600      	movs	r6, #0
		if (Status == VL53L0X_ERROR_NONE)
 8005ef4:	bbb4      	cbnz	r4, 8005f64 <VL53L0X_DataInit+0xdc>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005ef6:	b2b1      	uxth	r1, r6
 8005ef8:	2201      	movs	r2, #1
 8005efa:	4628      	mov	r0, r5
 8005efc:	f7ff fec8 	bl	8005c90 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005f00:	3601      	adds	r6, #1
 8005f02:	2e06      	cmp	r6, #6
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005f04:	4604      	mov	r4, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005f06:	d1f5      	bne.n	8005ef4 <VL53L0X_DataInit+0x6c>
	if (Status == VL53L0X_ERROR_NONE)
 8005f08:	bb60      	cbnz	r0, 8005f64 <VL53L0X_DataInit+0xdc>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005f0a:	8568      	strh	r0, [r5, #42]	; 0x2a
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f0c:	4602      	mov	r2, r0
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005f0e:	4606      	mov	r6, r0
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f10:	2104      	movs	r1, #4
 8005f12:	4628      	mov	r0, r5
 8005f14:	f7ff febc 	bl	8005c90 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8005f18:	4604      	mov	r4, r0
 8005f1a:	bb18      	cbnz	r0, 8005f64 <VL53L0X_DataInit+0xdc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	2105      	movs	r1, #5
 8005f20:	4628      	mov	r0, r5
 8005f22:	f7ff feb5 	bl	8005c90 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005f26:	4604      	mov	r4, r0
 8005f28:	b9e0      	cbnz	r0, 8005f64 <VL53L0X_DataInit+0xdc>
	if (Temp8 == 0) { /* disabled write only internal value */
 8005f2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005f2e:	636b      	str	r3, [r5, #52]	; 0x34
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f34:	2101      	movs	r1, #1
 8005f36:	4628      	mov	r0, r5
 8005f38:	f7ff fef5 	bl	8005d26 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	b988      	cbnz	r0, 8005f64 <VL53L0X_DataInit+0xdc>
	if (Temp8 == 0) { /* disabled write only internal value */
 8005f40:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005f44:	22ff      	movs	r2, #255	; 0xff
 8005f46:	e9c5 300f 	strd	r3, r0, [r5, #60]	; 0x3c
 8005f4a:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f4e:	2101      	movs	r1, #1
 8005f50:	4628      	mov	r0, r5
 8005f52:	f7fe fbe1 	bl	8004718 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005f56:	2301      	movs	r3, #1
 8005f58:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	b908      	cbnz	r0, 8005f64 <VL53L0X_DataInit+0xdc>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005f60:	f885 6115 	strb.w	r6, [r5, #277]	; 0x115
}
 8005f64:	4620      	mov	r0, r4
 8005f66:	b011      	add	sp, #68	; 0x44
 8005f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	00016b85 	.word	0x00016b85
 8005f70:	000970a4 	.word	0x000970a4
 8005f74:	0a0001f4 	.word	0x0a0001f4
 8005f78:	03840064 	.word	0x03840064

08005f7c <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f000 bd50 	b.w	8006a22 <VL53L0X_perform_ref_calibration>

08005f82 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005f82:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005f86:	b08e      	sub	sp, #56	; 0x38
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005f88:	230c      	movs	r3, #12
{
 8005f8a:	460c      	mov	r4, r1
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005f8c:	aa04      	add	r2, sp, #16
 8005f8e:	2114      	movs	r1, #20
{
 8005f90:	4605      	mov	r5, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005f92:	f7fe fb65 	bl	8004660 <VL53L0X_ReadMulti>
 8005f96:	4603      	mov	r3, r0
 8005f98:	4684      	mov	ip, r0

	if (Status == VL53L0X_ERROR_NONE) {
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d16e      	bne.n	800607c <VL53L0X_GetRangingMeasurementData+0xfa>
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005f9e:	6063      	str	r3, [r4, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005fa0:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005fa4:	f89d 3016 	ldrb.w	r3, [sp, #22]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005fa8:	f89d 1018 	ldrb.w	r1, [sp, #24]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005fac:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005fae:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005fb2:	f89d 3019 	ldrb.w	r3, [sp, #25]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005fb6:	f89d 701a 	ldrb.w	r7, [sp, #26]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005fba:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005fbc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	025b      	lsls	r3, r3, #9

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005fc4:	f89d 1012 	ldrb.w	r1, [sp, #18]
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005fc8:	6123      	str	r3, [r4, #16]
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005fca:	f89d 3013 	ldrb.w	r3, [sp, #19]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005fce:	f89d 001b 	ldrb.w	r0, [sp, #27]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005fd2:	f8b5 614e 	ldrh.w	r6, [r5, #334]	; 0x14e
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005fd6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005fde:	b29b      	uxth	r3, r3
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005fe0:	eb00 2007 	add.w	r0, r0, r7, lsl #8
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005fe4:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005fe6:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005fe8:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
		DeviceRangeStatus = localBuffer[0];
 8005fec:	f89d 1010 	ldrb.w	r1, [sp, #16]
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005ff0:	f895 c131 	ldrb.w	ip, [r5, #305]	; 0x131
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005ff4:	b287      	uxth	r7, r0
		if (LinearityCorrectiveGain != 1000) {
 8005ff6:	d00c      	beq.n	8006012 <VL53L0X_GetRangingMeasurementData+0x90>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005ff8:	fb07 f006 	mul.w	r0, r7, r6
 8005ffc:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8006000:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006004:	fbb0 f0f6 	udiv	r0, r0, r6
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006008:	7f2e      	ldrb	r6, [r5, #28]
			VL53L0X_GETPARAMETERFIELD(Dev,
 800600a:	6a2f      	ldr	r7, [r5, #32]
			if (XTalkCompensationEnable) {
 800600c:	2e00      	cmp	r6, #0
 800600e:	d139      	bne.n	8006084 <VL53L0X_GetRangingMeasurementData+0x102>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 8006010:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8006012:	f1bc 0f00 	cmp.w	ip, #0
 8006016:	d041      	beq.n	800609c <VL53L0X_GetRangingMeasurementData+0x11a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006018:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 800601a:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800601c:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 800601e:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006020:	f10d 000f 	add.w	r0, sp, #15
 8006024:	e9cd 4000 	strd	r4, r0, [sp]
 8006028:	4628      	mov	r0, r5
 800602a:	f001 fe71 	bl	8007d10 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800602e:	4684      	mov	ip, r0
 8006030:	bb20      	cbnz	r0, 800607c <VL53L0X_GetRangingMeasurementData+0xfa>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006032:	f89d e00f 	ldrb.w	lr, [sp, #15]
 8006036:	f884 e018 	strb.w	lr, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800603a:	f105 0650 	add.w	r6, r5, #80	; 0x50
 800603e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006040:	af07      	add	r7, sp, #28
 8006042:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8006044:	e896 0007 	ldmia.w	r6, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006048:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800604a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800604e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006052:	8aa2      	ldrh	r2, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006054:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8006058:	e9d4 4901 	ldrd	r4, r9, [r4, #4]
 800605c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006060:	e9cd 4908 	strd	r4, r9, [sp, #32]
 8006064:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8006068:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 800606c:	ac07      	add	r4, sp, #28
 800606e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006070:	3550      	adds	r5, #80	; 0x50
 8006072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006074:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006078:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800607c:	4660      	mov	r0, ip
 800607e:	b00e      	add	sp, #56	; 0x38
 8006080:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
					* EffectiveSpadRtnCount) >> 8))
 8006084:	b2bf      	uxth	r7, r7
 8006086:	435f      	muls	r7, r3
				if ((SignalRate
 8006088:	ebb2 2f27 	cmp.w	r2, r7, asr #8
					* EffectiveSpadRtnCount) >> 8))
 800608c:	ea4f 2627 	mov.w	r6, r7, asr #8
				if ((SignalRate
 8006090:	d107      	bne.n	80060a2 <VL53L0X_GetRangingMeasurementData+0x120>
					if (RangeFractionalEnable)
 8006092:	f1bc 0f00 	cmp.w	ip, #0
 8006096:	d10a      	bne.n	80060ae <VL53L0X_GetRangingMeasurementData+0x12c>
						XtalkRangeMilliMeter = 8888
 8006098:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800609c:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800609e:	2000      	movs	r0, #0
 80060a0:	e7bd      	b.n	800601e <VL53L0X_GetRangingMeasurementData+0x9c>
					(tmpuint16 * SignalRate)
 80060a2:	b280      	uxth	r0, r0
 80060a4:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 80060a6:	1b96      	subs	r6, r2, r6
						/ (SignalRate
 80060a8:	fbb0 f0f6 	udiv	r0, r0, r6
 80060ac:	e7b0      	b.n	8006010 <VL53L0X_GetRangingMeasurementData+0x8e>
						XtalkRangeMilliMeter = 8888;
 80060ae:	f242 27b8 	movw	r7, #8888	; 0x22b8
 80060b2:	e7b1      	b.n	8006018 <VL53L0X_GetRangingMeasurementData+0x96>

080060b4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80060b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060b6:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80060b8:	210e      	movs	r1, #14
 80060ba:	f10d 0206 	add.w	r2, sp, #6
{
 80060be:	461d      	mov	r5, r3
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80060c0:	4c0b      	ldr	r4, [pc, #44]	; (80060f0 <VL53L0X_GetInterruptThresholds+0x3c>)
{
 80060c2:	4606      	mov	r6, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80060c4:	f7fe fae2 	bl	800468c <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80060c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80060cc:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 80060d0:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80060d2:	b950      	cbnz	r0, 80060ea <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80060d4:	f10d 0206 	add.w	r2, sp, #6
 80060d8:	210c      	movs	r1, #12
 80060da:	4630      	mov	r0, r6
 80060dc:	f7fe fad6 	bl	800468c <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80060e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80060e4:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 80060e8:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80060ea:	b003      	add	sp, #12
 80060ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ee:	bf00      	nop
 80060f0:	1ffe0000 	.word	0x1ffe0000

080060f4 <VL53L0X_CheckAndLoadInterruptSettings>:
{
 80060f4:	b5e3      	push	{r0, r1, r5, r6, r7, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80060f6:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 80060fa:	3b01      	subs	r3, #1
 80060fc:	2b02      	cmp	r3, #2
{
 80060fe:	4607      	mov	r7, r0
 8006100:	460d      	mov	r5, r1
	if ((InterruptConfig ==
 8006102:	d833      	bhi.n	800616c <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006104:	ab01      	add	r3, sp, #4
 8006106:	466a      	mov	r2, sp
 8006108:	2101      	movs	r1, #1
 800610a:	f7ff ffd3 	bl	80060b4 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 800610e:	9b00      	ldr	r3, [sp, #0]
 8006110:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006114:	4606      	mov	r6, r0
		if (((ThresholdLow > 255*65536) ||
 8006116:	d803      	bhi.n	8006120 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8006118:	9b01      	ldr	r3, [sp, #4]
 800611a:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800611e:	d906      	bls.n	800612e <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8006120:	b92e      	cbnz	r6, 800612e <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 8006122:	b13d      	cbz	r5, 8006134 <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006124:	4912      	ldr	r1, [pc, #72]	; (8006170 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 8006126:	4638      	mov	r0, r7
 8006128:	f001 fc0b 	bl	8007942 <VL53L0X_load_tuning_settings>
 800612c:	4606      	mov	r6, r0
}
 800612e:	4630      	mov	r0, r6
 8006130:	b002      	add	sp, #8
 8006132:	bde0      	pop	{r5, r6, r7, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006134:	2204      	movs	r2, #4
 8006136:	21ff      	movs	r1, #255	; 0xff
 8006138:	4638      	mov	r0, r7
 800613a:	f7fe faed 	bl	8004718 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800613e:	4632      	mov	r2, r6
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006140:	4605      	mov	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006142:	2170      	movs	r1, #112	; 0x70
 8006144:	4638      	mov	r0, r7
 8006146:	f7fe fae7 	bl	8004718 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800614a:	4632      	mov	r2, r6
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800614c:	4305      	orrs	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800614e:	21ff      	movs	r1, #255	; 0xff
 8006150:	4638      	mov	r0, r7
 8006152:	f7fe fae1 	bl	8004718 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006156:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006158:	4305      	orrs	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800615a:	4632      	mov	r2, r6
 800615c:	2180      	movs	r1, #128	; 0x80
 800615e:	4638      	mov	r0, r7
 8006160:	f7fe fada 	bl	8004718 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006164:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006166:	4328      	orrs	r0, r5
 8006168:	b246      	sxtb	r6, r0
	return Status;
 800616a:	e7e0      	b.n	800612e <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800616c:	2600      	movs	r6, #0
 800616e:	e7de      	b.n	800612e <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 8006170:	200002d4 	.word	0x200002d4

08006174 <VL53L0X_StartMeasurement>:
{
 8006174:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006176:	7c01      	ldrb	r1, [r0, #16]
	switch (DeviceMode) {
 8006178:	2901      	cmp	r1, #1
{
 800617a:	4604      	mov	r4, r0
	switch (DeviceMode) {
 800617c:	d024      	beq.n	80061c8 <VL53L0X_StartMeasurement+0x54>
 800617e:	2903      	cmp	r1, #3
 8006180:	d02f      	beq.n	80061e2 <VL53L0X_StartMeasurement+0x6e>
 8006182:	bb99      	cbnz	r1, 80061ec <VL53L0X_StartMeasurement+0x78>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006184:	2201      	movs	r2, #1
 8006186:	f7fe fac7 	bl	8004718 <VL53L0X_WrByte>
		Byte = StartStopByte;
 800618a:	2301      	movs	r3, #1
 800618c:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 8006190:	b198      	cbz	r0, 80061ba <VL53L0X_StartMeasurement+0x46>
}
 8006192:	b003      	add	sp, #12
 8006194:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 8006196:	4601      	mov	r1, r0
 8006198:	f10d 0207 	add.w	r2, sp, #7
 800619c:	4620      	mov	r0, r4
 800619e:	f7fe fa2c 	bl	80045fa <VL53L0X_RdByte>
			} while (((Byte & StartStopByte) == StartStopByte)
 80061a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80061a6:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 80061a8:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80061ac:	d507      	bpl.n	80061be <VL53L0X_StartMeasurement+0x4a>
				&& (Status == VL53L0X_ERROR_NONE)
 80061ae:	b930      	cbnz	r0, 80061be <VL53L0X_StartMeasurement+0x4a>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80061b0:	2dc8      	cmp	r5, #200	; 0xc8
 80061b2:	d1f0      	bne.n	8006196 <VL53L0X_StartMeasurement+0x22>
				Status = VL53L0X_ERROR_TIME_OUT;
 80061b4:	f06f 0006 	mvn.w	r0, #6
 80061b8:	e7eb      	b.n	8006192 <VL53L0X_StartMeasurement+0x1e>
			LoopNb = 0;
 80061ba:	4605      	mov	r5, r0
 80061bc:	e7f1      	b.n	80061a2 <VL53L0X_StartMeasurement+0x2e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80061be:	2dc8      	cmp	r5, #200	; 0xc8
 80061c0:	bf08      	it	eq
 80061c2:	f06f 0006 	mvneq.w	r0, #6
 80061c6:	e7e4      	b.n	8006192 <VL53L0X_StartMeasurement+0x1e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80061c8:	f7ff ff94 	bl	80060f4 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 80061cc:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 80061ce:	2100      	movs	r1, #0
 80061d0:	4620      	mov	r0, r4
 80061d2:	f7fe faa1 	bl	8004718 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d1db      	bne.n	8006192 <VL53L0X_StartMeasurement+0x1e>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80061da:	2304      	movs	r3, #4
 80061dc:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 80061e0:	e7d7      	b.n	8006192 <VL53L0X_StartMeasurement+0x1e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80061e2:	2101      	movs	r1, #1
 80061e4:	f7ff ff86 	bl	80060f4 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 80061e8:	2204      	movs	r2, #4
 80061ea:	e7f0      	b.n	80061ce <VL53L0X_StartMeasurement+0x5a>
	switch (DeviceMode) {
 80061ec:	f06f 0007 	mvn.w	r0, #7
 80061f0:	e7cf      	b.n	8006192 <VL53L0X_StartMeasurement+0x1e>

080061f2 <VL53L0X_PerformSingleMeasurement>:
{
 80061f2:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80061f4:	7c05      	ldrb	r5, [r0, #16]
{
 80061f6:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80061f8:	b125      	cbz	r5, 8006204 <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 fd5a 	bl	8006cb4 <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8006200:	b128      	cbz	r0, 800620e <VL53L0X_PerformSingleMeasurement+0x1c>
}
 8006202:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 8006204:	f7ff ffb6 	bl	8006174 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8006208:	2800      	cmp	r0, #0
 800620a:	d0f6      	beq.n	80061fa <VL53L0X_PerformSingleMeasurement+0x8>
 800620c:	e7f9      	b.n	8006202 <VL53L0X_PerformSingleMeasurement+0x10>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800620e:	2d00      	cmp	r5, #0
 8006210:	d1f7      	bne.n	8006202 <VL53L0X_PerformSingleMeasurement+0x10>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006212:	2303      	movs	r3, #3
 8006214:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8006218:	e7f3      	b.n	8006202 <VL53L0X_PerformSingleMeasurement+0x10>

0800621a <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800621a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800621c:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800621e:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8006220:	2201      	movs	r2, #1
 8006222:	210b      	movs	r1, #11
 8006224:	4630      	mov	r0, r6
 8006226:	f7fe fa77 	bl	8004718 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800622a:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 800622c:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 800622e:	210b      	movs	r1, #11
 8006230:	4630      	mov	r0, r6
 8006232:	f7fe fa71 	bl	8004718 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006236:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 800623a:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 800623c:	2113      	movs	r1, #19
 800623e:	4630      	mov	r0, r6
 8006240:	f7fe f9db 	bl	80045fa <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006244:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 8006248:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 800624a:	4304      	orrs	r4, r0
		LoopCount++;
 800624c:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 800624e:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 8006250:	b260      	sxtb	r0, r4
		LoopCount++;
 8006252:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 8006254:	d005      	beq.n	8006262 <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 8006256:	2d03      	cmp	r5, #3
 8006258:	d008      	beq.n	800626c <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 800625a:	2800      	cmp	r0, #0
 800625c:	d0e0      	beq.n	8006220 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 800625e:	b002      	add	sp, #8
 8006260:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006262:	2d03      	cmp	r5, #3
 8006264:	bf08      	it	eq
 8006266:	f06f 000b 	mvneq.w	r0, #11
 800626a:	e7f8      	b.n	800625e <VL53L0X_ClearInterruptMask+0x44>
 800626c:	f06f 000b 	mvn.w	r0, #11
 8006270:	e7f5      	b.n	800625e <VL53L0X_ClearInterruptMask+0x44>

08006272 <VL53L0X_PerformSingleRangingMeasurement>:
{
 8006272:	b513      	push	{r0, r1, r4, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006274:	2300      	movs	r3, #0
 8006276:	7403      	strb	r3, [r0, #16]
{
 8006278:	9101      	str	r1, [sp, #4]
 800627a:	4604      	mov	r4, r0
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800627c:	f7ff ffb9 	bl	80061f2 <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8006280:	9901      	ldr	r1, [sp, #4]
 8006282:	b950      	cbnz	r0, 800629a <VL53L0X_PerformSingleRangingMeasurement+0x28>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006284:	4620      	mov	r0, r4
 8006286:	f7ff fe7c 	bl	8005f82 <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 800628a:	b930      	cbnz	r0, 800629a <VL53L0X_PerformSingleRangingMeasurement+0x28>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800628c:	4601      	mov	r1, r0
 800628e:	4620      	mov	r0, r4
}
 8006290:	b002      	add	sp, #8
 8006292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006296:	f7ff bfc0 	b.w	800621a <VL53L0X_ClearInterruptMask>
}
 800629a:	b002      	add	sp, #8
 800629c:	bd10      	pop	{r4, pc}

0800629e <VL53L0X_SetGpioConfig.part.0>:
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800629e:	2915      	cmp	r1, #21
VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
 80062a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a4:	4680      	mov	r8, r0
 80062a6:	4614      	mov	r4, r2
 80062a8:	461d      	mov	r5, r3
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80062aa:	d168      	bne.n	800637e <VL53L0X_SetGpioConfig.part.0+0xe0>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80062ac:	2201      	movs	r2, #1
 80062ae:	21ff      	movs	r1, #255	; 0xff
 80062b0:	f7fe fa32 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80062b4:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80062b6:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80062b8:	4611      	mov	r1, r2
 80062ba:	4640      	mov	r0, r8
 80062bc:	f7fe fa2c 	bl	8004718 <VL53L0X_WrByte>
 80062c0:	4320      	orrs	r0, r4
 80062c2:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80062c4:	2200      	movs	r2, #0
 80062c6:	21ff      	movs	r1, #255	; 0xff
 80062c8:	4640      	mov	r0, r8
 80062ca:	f7fe fa25 	bl	8004718 <VL53L0X_WrByte>
 80062ce:	4320      	orrs	r0, r4
 80062d0:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80062d2:	2201      	movs	r2, #1
 80062d4:	2180      	movs	r1, #128	; 0x80
 80062d6:	4640      	mov	r0, r8
 80062d8:	f7fe fa1e 	bl	8004718 <VL53L0X_WrByte>
 80062dc:	4338      	orrs	r0, r7
 80062de:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80062e0:	2202      	movs	r2, #2
 80062e2:	2185      	movs	r1, #133	; 0x85
 80062e4:	4640      	mov	r0, r8
 80062e6:	f7fe fa17 	bl	8004718 <VL53L0X_WrByte>
 80062ea:	4330      	orrs	r0, r6
 80062ec:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80062ee:	2204      	movs	r2, #4
 80062f0:	21ff      	movs	r1, #255	; 0xff
 80062f2:	4640      	mov	r0, r8
 80062f4:	f7fe fa10 	bl	8004718 <VL53L0X_WrByte>
 80062f8:	4328      	orrs	r0, r5
 80062fa:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80062fc:	2200      	movs	r2, #0
 80062fe:	21cd      	movs	r1, #205	; 0xcd
 8006300:	4640      	mov	r0, r8
 8006302:	f7fe fa09 	bl	8004718 <VL53L0X_WrByte>
 8006306:	4320      	orrs	r0, r4
 8006308:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800630a:	2211      	movs	r2, #17
 800630c:	21cc      	movs	r1, #204	; 0xcc
 800630e:	4640      	mov	r0, r8
 8006310:	f7fe fa02 	bl	8004718 <VL53L0X_WrByte>
 8006314:	4338      	orrs	r0, r7
 8006316:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006318:	2207      	movs	r2, #7
 800631a:	21ff      	movs	r1, #255	; 0xff
 800631c:	4640      	mov	r0, r8
 800631e:	f7fe f9fb 	bl	8004718 <VL53L0X_WrByte>
 8006322:	4330      	orrs	r0, r6
 8006324:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006326:	2200      	movs	r2, #0
 8006328:	21be      	movs	r1, #190	; 0xbe
 800632a:	4640      	mov	r0, r8
 800632c:	f7fe f9f4 	bl	8004718 <VL53L0X_WrByte>
 8006330:	4328      	orrs	r0, r5
 8006332:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006334:	2206      	movs	r2, #6
 8006336:	21ff      	movs	r1, #255	; 0xff
 8006338:	4640      	mov	r0, r8
 800633a:	f7fe f9ed 	bl	8004718 <VL53L0X_WrByte>
 800633e:	4320      	orrs	r0, r4
 8006340:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006342:	2209      	movs	r2, #9
 8006344:	21cc      	movs	r1, #204	; 0xcc
 8006346:	4640      	mov	r0, r8
 8006348:	f7fe f9e6 	bl	8004718 <VL53L0X_WrByte>
 800634c:	4338      	orrs	r0, r7
 800634e:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006350:	2200      	movs	r2, #0
 8006352:	21ff      	movs	r1, #255	; 0xff
 8006354:	4640      	mov	r0, r8
 8006356:	f7fe f9df 	bl	8004718 <VL53L0X_WrByte>
 800635a:	4330      	orrs	r0, r6
 800635c:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800635e:	2201      	movs	r2, #1
 8006360:	21ff      	movs	r1, #255	; 0xff
 8006362:	4640      	mov	r0, r8
 8006364:	f7fe f9d8 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006368:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800636a:	4328      	orrs	r0, r5
 800636c:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800636e:	4611      	mov	r1, r2
 8006370:	4640      	mov	r0, r8
 8006372:	f7fe f9d1 	bl	8004718 <VL53L0X_WrByte>
 8006376:	4320      	orrs	r0, r4
 8006378:	b240      	sxtb	r0, r0
}
 800637a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			switch (Functionality) {
 800637e:	2a04      	cmp	r2, #4
 8006380:	d817      	bhi.n	80063b2 <VL53L0X_SetGpioConfig.part.0+0x114>
			Status = VL53L0X_WrByte(Dev,
 8006382:	210a      	movs	r1, #10
 8006384:	f7fe f9c8 	bl	8004718 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8006388:	2800      	cmp	r0, #0
 800638a:	d1f6      	bne.n	800637a <VL53L0X_SetGpioConfig.part.0+0xdc>
				data = (uint8_t)(1 << 4);
 800638c:	2d00      	cmp	r5, #0
			Status = VL53L0X_UpdateByte(Dev,
 800638e:	bf0c      	ite	eq
 8006390:	462b      	moveq	r3, r5
 8006392:	2310      	movne	r3, #16
 8006394:	22ef      	movs	r2, #239	; 0xef
 8006396:	2184      	movs	r1, #132	; 0x84
 8006398:	4640      	mov	r0, r8
 800639a:	f7fe f9df 	bl	800475c <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 800639e:	2800      	cmp	r0, #0
 80063a0:	d1eb      	bne.n	800637a <VL53L0X_SetGpioConfig.part.0+0xdc>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80063a2:	f888 40da 	strb.w	r4, [r8, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80063a6:	4601      	mov	r1, r0
 80063a8:	4640      	mov	r0, r8
}
 80063aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80063ae:	f7ff bf34 	b.w	800621a <VL53L0X_ClearInterruptMask>
				Status =
 80063b2:	f06f 000a 	mvn.w	r0, #10
 80063b6:	e7e0      	b.n	800637a <VL53L0X_SetGpioConfig.part.0+0xdc>

080063b8 <VL53L0X_StaticInit>:
{
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	b094      	sub	sp, #80	; 0x50
 80063bc:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80063be:	2240      	movs	r2, #64	; 0x40
 80063c0:	2100      	movs	r1, #0
 80063c2:	a804      	add	r0, sp, #16
 80063c4:	f01c f884 	bl	80224d0 <memset>
	uint16_t tempword = 0;
 80063c8:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 80063ca:	2101      	movs	r1, #1
 80063cc:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 80063ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t tempbyte = 0;
 80063d2:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t isApertureSpads = 0;
 80063d6:	f88d 3004 	strb.w	r3, [sp, #4]
	uint32_t refSpadCount = 0;
 80063da:	9302      	str	r3, [sp, #8]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 80063dc:	f000 fcba 	bl	8006d54 <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80063e0:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 80063e4:	2a01      	cmp	r2, #1
 80063e6:	d806      	bhi.n	80063f6 <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80063e8:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 80063ec:	f040 80ad 	bne.w	800654a <VL53L0X_StaticInit+0x192>
		((ApertureSpads == 1) && (count > 32)) ||
 80063f0:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 80063f2:	f240 80ac 	bls.w	800654e <VL53L0X_StaticInit+0x196>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80063f6:	aa01      	add	r2, sp, #4
 80063f8:	a902      	add	r1, sp, #8
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 fb2d 	bl	8006a5a <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006400:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8006402:	2800      	cmp	r0, #0
 8006404:	f040 809e 	bne.w	8006544 <VL53L0X_StaticInit+0x18c>
		if (UseInternalTuningSettings == 0)
 8006408:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 800640c:	2b00      	cmp	r3, #0
 800640e:	f040 80a2 	bne.w	8006556 <VL53L0X_StaticInit+0x19e>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006412:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006416:	4628      	mov	r0, r5
 8006418:	f001 fa93 	bl	8007942 <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 800641c:	4604      	mov	r4, r0
 800641e:	2800      	cmp	r0, #0
 8006420:	f040 8090 	bne.w	8006544 <VL53L0X_StaticInit+0x18c>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006424:	4623      	mov	r3, r4
 8006426:	4621      	mov	r1, r4
 8006428:	2204      	movs	r2, #4
 800642a:	4628      	mov	r0, r5
 800642c:	f7ff ff37 	bl	800629e <VL53L0X_SetGpioConfig.part.0>
	if (Status == VL53L0X_ERROR_NONE) {
 8006430:	4604      	mov	r4, r0
 8006432:	2800      	cmp	r0, #0
 8006434:	f040 8086 	bne.w	8006544 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006438:	2201      	movs	r2, #1
 800643a:	21ff      	movs	r1, #255	; 0xff
 800643c:	4628      	mov	r0, r5
 800643e:	f7fe f96b 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006442:	f10d 0206 	add.w	r2, sp, #6
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006446:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006448:	2184      	movs	r1, #132	; 0x84
 800644a:	4628      	mov	r0, r5
 800644c:	f7fe f91e 	bl	800468c <VL53L0X_RdWord>
 8006450:	4330      	orrs	r0, r6
 8006452:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006454:	4622      	mov	r2, r4
 8006456:	21ff      	movs	r1, #255	; 0xff
 8006458:	4628      	mov	r0, r5
 800645a:	f7fe f95d 	bl	8004718 <VL53L0X_WrByte>
 800645e:	4330      	orrs	r0, r6
 8006460:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8006462:	2c00      	cmp	r4, #0
 8006464:	d16e      	bne.n	8006544 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006466:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006470:	a904      	add	r1, sp, #16
 8006472:	4628      	mov	r0, r5
 8006474:	f7ff fccc 	bl	8005e10 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8006478:	4604      	mov	r4, r0
 800647a:	2800      	cmp	r0, #0
 800647c:	d162      	bne.n	8006544 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800647e:	f10d 0103 	add.w	r1, sp, #3
 8006482:	4628      	mov	r0, r5
 8006484:	f7ff fb36 	bl	8005af4 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 8006488:	4604      	mov	r4, r0
 800648a:	2800      	cmp	r0, #0
 800648c:	d15a      	bne.n	8006544 <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800648e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006492:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006496:	ae04      	add	r6, sp, #16
 8006498:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800649a:	f105 0410 	add.w	r4, r5, #16
 800649e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80064a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80064a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80064ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 80064b0:	f10d 0203 	add.w	r2, sp, #3
 80064b4:	2101      	movs	r1, #1
 80064b6:	4628      	mov	r0, r5
 80064b8:	f7fe f89f 	bl	80045fa <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 80064bc:	4604      	mov	r4, r0
 80064be:	2800      	cmp	r0, #0
 80064c0:	d140      	bne.n	8006544 <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80064c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80064c6:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80064ca:	4602      	mov	r2, r0
 80064cc:	4601      	mov	r1, r0
 80064ce:	4628      	mov	r0, r5
 80064d0:	f7ff fb22 	bl	8005b18 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 80064d4:	4604      	mov	r4, r0
 80064d6:	bba8      	cbnz	r0, 8006544 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80064d8:	4602      	mov	r2, r0
 80064da:	2102      	movs	r1, #2
 80064dc:	4628      	mov	r0, r5
 80064de:	f7ff fb1b 	bl	8005b18 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 80064e2:	4604      	mov	r4, r0
 80064e4:	bb70      	cbnz	r0, 8006544 <VL53L0X_StaticInit+0x18c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80064e6:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80064e8:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80064ea:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80064ee:	f10d 0205 	add.w	r2, sp, #5
 80064f2:	4628      	mov	r0, r5
 80064f4:	f001 f93e 	bl	8007774 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 80064f8:	4604      	mov	r4, r0
 80064fa:	bb18      	cbnz	r0, 8006544 <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80064fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006500:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006504:	f10d 0205 	add.w	r2, sp, #5
 8006508:	2101      	movs	r1, #1
 800650a:	4628      	mov	r0, r5
 800650c:	f001 f932 	bl	8007774 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8006510:	4604      	mov	r4, r0
 8006512:	b9b8      	cbnz	r0, 8006544 <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006514:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006518:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 800651c:	aa03      	add	r2, sp, #12
 800651e:	2103      	movs	r1, #3
 8006520:	4628      	mov	r0, r5
 8006522:	f7ff fb68 	bl	8005bf6 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8006526:	4604      	mov	r4, r0
 8006528:	b960      	cbnz	r0, 8006544 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 8006530:	aa03      	add	r2, sp, #12
 8006532:	2104      	movs	r1, #4
 8006534:	4628      	mov	r0, r5
 8006536:	f7ff fb5e 	bl	8005bf6 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 800653a:	4604      	mov	r4, r0
 800653c:	b910      	cbnz	r0, 8006544 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 8006544:	4620      	mov	r0, r4
 8006546:	b014      	add	sp, #80	; 0x50
 8006548:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 800654a:	290c      	cmp	r1, #12
 800654c:	e751      	b.n	80063f2 <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800654e:	4628      	mov	r0, r5
 8006550:	f000 f910 	bl	8006774 <VL53L0X_set_reference_spads>
 8006554:	e754      	b.n	8006400 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 8006556:	4901      	ldr	r1, [pc, #4]	; (800655c <VL53L0X_StaticInit+0x1a4>)
 8006558:	e75d      	b.n	8006416 <VL53L0X_StaticInit+0x5e>
 800655a:	bf00      	nop
 800655c:	2000048a 	.word	0x2000048a

08006560 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006560:	b513      	push	{r0, r1, r4, lr}
 8006562:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006564:	f10d 0207 	add.w	r2, sp, #7
 8006568:	2113      	movs	r1, #19
 800656a:	f7fe f846 	bl	80045fa <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 800656e:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 8006572:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 8006576:	f003 0207 	and.w	r2, r3, #7
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 800657a:	bf18      	it	ne
 800657c:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 8006580:	6022      	str	r2, [r4, #0]
}
 8006582:	b002      	add	sp, #8
 8006584:	bd10      	pop	{r4, pc}

08006586 <VL53L0X_GetMeasurementDataReady>:
{
 8006586:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 8006588:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 800658c:	2b04      	cmp	r3, #4
{
 800658e:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8006590:	d10b      	bne.n	80065aa <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006592:	a901      	add	r1, sp, #4
 8006594:	f7ff ffe4 	bl	8006560 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8006598:	9b01      	ldr	r3, [sp, #4]
 800659a:	2b04      	cmp	r3, #4
 800659c:	d101      	bne.n	80065a2 <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	7023      	strb	r3, [r4, #0]
}
 80065a6:	b002      	add	sp, #8
 80065a8:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80065aa:	aa01      	add	r2, sp, #4
 80065ac:	2114      	movs	r1, #20
 80065ae:	f7fe f824 	bl	80045fa <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d1f7      	bne.n	80065a6 <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 80065b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80065ba:	07db      	lsls	r3, r3, #31
 80065bc:	d4ef      	bmi.n	800659e <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 80065be:	7020      	strb	r0, [r4, #0]
 80065c0:	e7f1      	b.n	80065a6 <VL53L0X_GetMeasurementDataReady+0x20>

080065c2 <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80065c2:	f000 ba4a 	b.w	8006a5a <VL53L0X_perform_ref_spad_management>

080065c6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80065c6:	b513      	push	{r0, r1, r4, lr}
 80065c8:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80065ca:	f10d 0206 	add.w	r2, sp, #6
 80065ce:	2128      	movs	r1, #40	; 0x28
 80065d0:	f7fe f85c 	bl	800468c <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80065d4:	b978      	cbnz	r0, 80065f6 <VL53L0X_get_offset_calibration_data_micro_meter+0x30>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80065d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80065da:	f3c2 030b 	ubfx	r3, r2, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80065de:	f412 6f00 	tst.w	r2, #2048	; 0x800
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80065e2:	bf18      	it	ne
 80065e4:	f5a3 5380 	subne.w	r3, r3, #4096	; 0x1000
 80065e8:	f04f 02fa 	mov.w	r2, #250	; 0xfa
					* 250;
 80065ec:	bf14      	ite	ne
 80065ee:	fb13 f302 	smulbbne	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80065f2:	4353      	muleq	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80065f4:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 80065f6:	b002      	add	sp, #8
 80065f8:	bd10      	pop	{r4, pc}

080065fa <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80065fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 80065fc:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
	*next = -1;
 8006600:	f04f 34ff 	mov.w	r4, #4294967295
 8006604:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 8006606:	f002 0207 	and.w	r2, r2, #7

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800660a:	4666      	mov	r6, ip
	uint8_t success = 0;
 800660c:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800660e:	428e      	cmp	r6, r1
 8006610:	d200      	bcs.n	8006614 <get_next_good_spad+0x1a>
 8006612:	b107      	cbz	r7, 8006616 <get_next_good_spad+0x1c>
			}
			dataByte >>= 1;
			fineIndex++;
		}
	}
}
 8006614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dataByte = goodSpadArray[coarseIndex];
 8006616:	5d84      	ldrb	r4, [r0, r6]
		if (coarseIndex == startIndex) {
 8006618:	4566      	cmp	r6, ip
			dataByte >>= fineOffset;
 800661a:	bf03      	ittte	eq
 800661c:	4114      	asreq	r4, r2
 800661e:	b2e4      	uxtbeq	r4, r4
			fineIndex = fineOffset;
 8006620:	4615      	moveq	r5, r2
		fineIndex = 0;
 8006622:	463d      	movne	r5, r7
			if ((dataByte & 0x1) == 1) {
 8006624:	f014 0701 	ands.w	r7, r4, #1
 8006628:	d004      	beq.n	8006634 <get_next_good_spad+0x3a>
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800662a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 800662e:	601d      	str	r5, [r3, #0]
				coarseIndex++) {
 8006630:	3601      	adds	r6, #1
 8006632:	e7ec      	b.n	800660e <get_next_good_spad+0x14>
			fineIndex++;
 8006634:	3501      	adds	r5, #1
		while (fineIndex < cSpadsPerByte) {
 8006636:	2d08      	cmp	r5, #8
			dataByte >>= 1;
 8006638:	ea4f 0454 	mov.w	r4, r4, lsr #1
		while (fineIndex < cSpadsPerByte) {
 800663c:	d1f2      	bne.n	8006624 <get_next_good_spad+0x2a>
 800663e:	e7f7      	b.n	8006630 <get_next_good_spad+0x36>

08006640 <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006640:	4b03      	ldr	r3, [pc, #12]	; (8006650 <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 8006642:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006644:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 8006648:	3800      	subs	r0, #0
 800664a:	bf18      	it	ne
 800664c:	2001      	movne	r0, #1
 800664e:	4770      	bx	lr
 8006650:	20000580 	.word	0x20000580

08006654 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006654:	b530      	push	{r4, r5, lr}
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 8006656:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
	coarseIndex = spadIndex / cSpadsPerByte;
 800665a:	ea4f 04d2 	mov.w	r4, r2, lsr #3
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800665e:	bf88      	it	hi
 8006660:	2301      	movhi	r3, #1
	fineIndex = spadIndex % cSpadsPerByte;
 8006662:	f002 0507 	and.w	r5, r2, #7
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006666:	bf81      	itttt	hi
 8006668:	fa03 f205 	lslhi.w	r2, r3, r5
 800666c:	5d03      	ldrbhi	r3, [r0, r4]
 800666e:	4313      	orrhi	r3, r2
 8006670:	5503      	strbhi	r3, [r0, r4]
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006672:	bf94      	ite	ls
 8006674:	f06f 0031 	mvnls.w	r0, #49	; 0x31
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006678:	2000      	movhi	r0, #0

	return status;
}
 800667a:	bd30      	pop	{r4, r5, pc}

0800667c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800667c:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800667e:	2306      	movs	r3, #6
 8006680:	21b0      	movs	r1, #176	; 0xb0
 8006682:	f7fd bfcf 	b.w	8004624 <VL53L0X_WriteMulti>

08006686 <get_ref_spad_map>:
				refSpadArray, 6);
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006686:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006688:	2306      	movs	r3, #6
 800668a:	21b0      	movs	r1, #176	; 0xb0
 800668c:	f7fd bfe8 	b.w	8004660 <VL53L0X_ReadMulti>

08006690 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b085      	sub	sp, #20
 8006696:	4680      	mov	r8, r0
 8006698:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800669a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800669c:	9601      	str	r6, [sp, #4]
{
 800669e:	468a      	mov	sl, r1
 80066a0:	4693      	mov	fp, r2
 80066a2:	461c      	mov	r4, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 80066a4:	f04f 0900 	mov.w	r9, #0
 80066a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066aa:	4599      	cmp	r9, r3
 80066ac:	d113      	bne.n	80066d6 <enable_ref_spads+0x46>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80066ae:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 80066b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066b2:	601e      	str	r6, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80066b4:	b960      	cbnz	r0, 80066d0 <enable_ref_spads+0x40>
		status = set_ref_spad_map(Dev, spadArray);
 80066b6:	4621      	mov	r1, r4
 80066b8:	4640      	mov	r0, r8
 80066ba:	f7ff ffdf 	bl	800667c <set_ref_spad_map>


	if (status == VL53L0X_ERROR_NONE) {
 80066be:	b938      	cbnz	r0, 80066d0 <enable_ref_spads+0x40>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80066c0:	a902      	add	r1, sp, #8
 80066c2:	4640      	mov	r0, r8
 80066c4:	f7ff ffdf 	bl	8006686 <get_ref_spad_map>

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80066c8:	4425      	add	r5, r4
 80066ca:	ab02      	add	r3, sp, #8
 80066cc:	42ac      	cmp	r4, r5
 80066ce:	d11c      	bne.n	800670a <enable_ref_spads+0x7a>
			}
			i++;
		}
	}
	return status;
}
 80066d0:	b005      	add	sp, #20
 80066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80066d6:	ab01      	add	r3, sp, #4
 80066d8:	4632      	mov	r2, r6
 80066da:	4629      	mov	r1, r5
 80066dc:	4658      	mov	r0, fp
 80066de:	f7ff ff8c 	bl	80065fa <get_next_good_spad>
		if (nextGoodSpad == -1) {
 80066e2:	9f01      	ldr	r7, [sp, #4]
 80066e4:	1c7b      	adds	r3, r7, #1
 80066e6:	d00d      	beq.n	8006704 <enable_ref_spads+0x74>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80066e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066ea:	18f8      	adds	r0, r7, r3
 80066ec:	f7ff ffa8 	bl	8006640 <is_aperture>
 80066f0:	4550      	cmp	r0, sl
 80066f2:	d107      	bne.n	8006704 <enable_ref_spads+0x74>
		enable_spad_bit(spadArray, size, currentSpad);
 80066f4:	463a      	mov	r2, r7
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7ff ffac 	bl	8006654 <enable_spad_bit>
		currentSpad++;
 80066fc:	1c7e      	adds	r6, r7, #1
	for (index = 0; index < spadCount; index++) {
 80066fe:	f109 0901 	add.w	r9, r9, #1
 8006702:	e7d1      	b.n	80066a8 <enable_ref_spads+0x18>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006704:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8006708:	e7d2      	b.n	80066b0 <enable_ref_spads+0x20>
			if (spadArray[i] != checkSpadArray[i]) {
 800670a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006712:	4291      	cmp	r1, r2
 8006714:	d0da      	beq.n	80066cc <enable_ref_spads+0x3c>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006716:	f06f 0031 	mvn.w	r0, #49	; 0x31
	return status;
 800671a:	e7d9      	b.n	80066d0 <enable_ref_spads+0x40>

0800671c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800671c:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 800671e:	22c0      	movs	r2, #192	; 0xc0
{
 8006720:	b088      	sub	sp, #32
 8006722:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 8006724:	2101      	movs	r1, #1
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006726:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
{
 800672a:	4605      	mov	r5, r0
		status = VL53L0X_WrByte(Dev,
 800672c:	f7fd fff4 	bl	8004718 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006730:	b9f0      	cbnz	r0, 8006770 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006732:	a901      	add	r1, sp, #4
 8006734:	4628      	mov	r0, r5
 8006736:	f7ff fd9c 	bl	8006272 <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800673a:	b9c8      	cbnz	r0, 8006770 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800673c:	2201      	movs	r2, #1
 800673e:	21ff      	movs	r1, #255	; 0xff
 8006740:	4628      	mov	r0, r5
 8006742:	f7fd ffe9 	bl	8004718 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 8006746:	b998      	cbnz	r0, 8006770 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 8006748:	4632      	mov	r2, r6
 800674a:	21b6      	movs	r1, #182	; 0xb6
 800674c:	4628      	mov	r0, r5
 800674e:	f7fd ff9d 	bl	800468c <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006752:	b968      	cbnz	r0, 8006770 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006754:	4602      	mov	r2, r0
 8006756:	21ff      	movs	r1, #255	; 0xff
 8006758:	4628      	mov	r0, r5
 800675a:	f7fd ffdd 	bl	8004718 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 800675e:	b938      	cbnz	r0, 8006770 <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006760:	4622      	mov	r2, r4
 8006762:	2101      	movs	r1, #1
 8006764:	4628      	mov	r0, r5
 8006766:	f7fd ffd7 	bl	8004718 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800676a:	b908      	cbnz	r0, 8006770 <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800676c:	f885 4130 	strb.w	r4, [r5, #304]	; 0x130
	}

	return status;
}
 8006770:	b008      	add	sp, #32
 8006772:	bd70      	pop	{r4, r5, r6, pc}

08006774 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006776:	460f      	mov	r7, r1
 8006778:	b089      	sub	sp, #36	; 0x24
 800677a:	4616      	mov	r6, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800677c:	21ff      	movs	r1, #255	; 0xff
 800677e:	2201      	movs	r2, #1
{
 8006780:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006782:	f7fd ffc9 	bl	8004718 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8006786:	4602      	mov	r2, r0
 8006788:	b9a8      	cbnz	r0, 80067b6 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 800678a:	214f      	movs	r1, #79	; 0x4f
 800678c:	4620      	mov	r0, r4
 800678e:	f7fd ffc3 	bl	8004718 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006792:	b980      	cbnz	r0, 80067b6 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8006794:	222c      	movs	r2, #44	; 0x2c
 8006796:	214e      	movs	r1, #78	; 0x4e
 8006798:	4620      	mov	r0, r4
 800679a:	f7fd ffbd 	bl	8004718 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800679e:	4602      	mov	r2, r0
 80067a0:	b948      	cbnz	r0, 80067b6 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067a2:	21ff      	movs	r1, #255	; 0xff
 80067a4:	4620      	mov	r0, r4
 80067a6:	f7fd ffb7 	bl	8004718 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80067aa:	b920      	cbnz	r0, 80067b6 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 80067ac:	22b4      	movs	r2, #180	; 0xb4
 80067ae:	21b6      	movs	r1, #182	; 0xb6
 80067b0:	4620      	mov	r0, r4
 80067b2:	f7fd ffb1 	bl	8004718 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80067b6:	2500      	movs	r5, #0
 80067b8:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 80067bc:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128

	if (isApertureSpads) {
 80067c0:	b9de      	cbnz	r6, 80067fa <VL53L0X_set_reference_spads+0x86>
	uint32_t currentSpadIndex = 0;
 80067c2:	4635      	mov	r5, r6
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 80067c4:	ab07      	add	r3, sp, #28
 80067c6:	22b4      	movs	r2, #180	; 0xb4
 80067c8:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80067cc:	2306      	movs	r3, #6
 80067ce:	e9cd 3200 	strd	r3, r2, [sp]
 80067d2:	9502      	str	r5, [sp, #8]
 80067d4:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80067d8:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 80067dc:	4631      	mov	r1, r6
 80067de:	4620      	mov	r0, r4
 80067e0:	f7ff ff56 	bl	8006690 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80067e4:	b930      	cbnz	r0, 80067f4 <VL53L0X_set_reference_spads+0x80>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80067e6:	2301      	movs	r3, #1
 80067e8:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067ec:	f884 7113 	strb.w	r7, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067f0:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 80067f4:	b009      	add	sp, #36	; 0x24
 80067f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			currentSpadIndex++;
 80067f8:	3501      	adds	r5, #1
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80067fa:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 80067fe:	f7ff ff1f 	bl	8006640 <is_aperture>
 8006802:	2800      	cmp	r0, #0
 8006804:	d1de      	bne.n	80067c4 <VL53L0X_set_reference_spads+0x50>
 8006806:	2d2c      	cmp	r5, #44	; 0x2c
 8006808:	d1f6      	bne.n	80067f8 <VL53L0X_set_reference_spads+0x84>
 800680a:	e7db      	b.n	80067c4 <VL53L0X_set_reference_spads+0x50>

0800680c <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800680c:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800680e:	f041 0201 	orr.w	r2, r1, #1
 8006812:	2100      	movs	r1, #0
{
 8006814:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006816:	f7fd ff7f 	bl	8004718 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800681a:	b978      	cbnz	r0, 800683c <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800681c:	4620      	mov	r0, r4
 800681e:	f000 fa49 	bl	8006cb4 <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 8006822:	b958      	cbnz	r0, 800683c <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006824:	4601      	mov	r1, r0
 8006826:	4620      	mov	r0, r4
 8006828:	f7ff fcf7 	bl	800621a <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 800682c:	b930      	cbnz	r0, 800683c <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800682e:	4602      	mov	r2, r0
 8006830:	4601      	mov	r1, r0
 8006832:	4620      	mov	r0, r4

	return Status;
}
 8006834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006838:	f7fd bf6e 	b.w	8004718 <VL53L0X_WrByte>
}
 800683c:	bd10      	pop	{r4, pc}

0800683e <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800683e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 8006842:	2400      	movs	r4, #0
{
 8006844:	4689      	mov	r9, r1
 8006846:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006848:	21ff      	movs	r1, #255	; 0xff
 800684a:	2201      	movs	r2, #1
{
 800684c:	4606      	mov	r6, r0
 800684e:	461f      	mov	r7, r3
	uint8_t PhaseCalint = 0;
 8006850:	f88d 4007 	strb.w	r4, [sp, #7]
{
 8006854:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8006858:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800685c:	f7fd ff5c 	bl	8004718 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006860:	4622      	mov	r2, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006862:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006864:	4621      	mov	r1, r4
 8006866:	4630      	mov	r0, r6
 8006868:	f7fd ff56 	bl	8004718 <VL53L0X_WrByte>
 800686c:	4328      	orrs	r0, r5
 800686e:	b245      	sxtb	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006870:	4622      	mov	r2, r4
 8006872:	21ff      	movs	r1, #255	; 0xff
 8006874:	4630      	mov	r0, r6
 8006876:	f7fd ff4f 	bl	8004718 <VL53L0X_WrByte>
 800687a:	4328      	orrs	r0, r5
 800687c:	b244      	sxtb	r4, r0

	if (read_not_write) {
 800687e:	f1b9 0f00 	cmp.w	r9, #0
 8006882:	d032      	beq.n	80068ea <VL53L0X_ref_calibration_io+0xac>
		if (vhv_enable)
 8006884:	f1bb 0f00 	cmp.w	fp, #0
 8006888:	d006      	beq.n	8006898 <VL53L0X_ref_calibration_io+0x5a>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800688a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800688c:	21cb      	movs	r1, #203	; 0xcb
 800688e:	4630      	mov	r0, r6
 8006890:	f7fd feb3 	bl	80045fa <VL53L0X_RdByte>
 8006894:	4320      	orrs	r0, r4
 8006896:	b244      	sxtb	r4, r0
		if (phase_enable)
 8006898:	f1ba 0f00 	cmp.w	sl, #0
 800689c:	d007      	beq.n	80068ae <VL53L0X_ref_calibration_io+0x70>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800689e:	f10d 0207 	add.w	r2, sp, #7
 80068a2:	21ee      	movs	r1, #238	; 0xee
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7fd fea8 	bl	80045fa <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80068aa:	4320      	orrs	r0, r4
 80068ac:	b244      	sxtb	r4, r0
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80068ae:	2201      	movs	r2, #1
 80068b0:	21ff      	movs	r1, #255	; 0xff
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7fd ff30 	bl	8004718 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80068b8:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80068ba:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80068bc:	2100      	movs	r1, #0
 80068be:	4630      	mov	r0, r6
 80068c0:	f7fd ff2a 	bl	8004718 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80068c4:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80068c6:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80068c8:	2200      	movs	r2, #0
 80068ca:	21ff      	movs	r1, #255	; 0xff
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7fd ff23 	bl	8004718 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80068d2:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80068d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80068d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80068da:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80068dc:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 80068e0:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80068e2:	7013      	strb	r3, [r2, #0]
}
 80068e4:	b003      	add	sp, #12
 80068e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 80068ea:	f1bb 0f00 	cmp.w	fp, #0
 80068ee:	d006      	beq.n	80068fe <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80068f0:	4642      	mov	r2, r8
 80068f2:	21cb      	movs	r1, #203	; 0xcb
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7fd ff0f 	bl	8004718 <VL53L0X_WrByte>
 80068fa:	4320      	orrs	r0, r4
 80068fc:	b244      	sxtb	r4, r0
		if (phase_enable)
 80068fe:	f1ba 0f00 	cmp.w	sl, #0
 8006902:	d0d4      	beq.n	80068ae <VL53L0X_ref_calibration_io+0x70>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006904:	463b      	mov	r3, r7
 8006906:	2280      	movs	r2, #128	; 0x80
 8006908:	21ee      	movs	r1, #238	; 0xee
 800690a:	4630      	mov	r0, r6
 800690c:	f7fd ff26 	bl	800475c <VL53L0X_UpdateByte>
 8006910:	e7cb      	b.n	80068aa <VL53L0X_ref_calibration_io+0x6c>

08006912 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006916:	b087      	sub	sp, #28
 8006918:	4691      	mov	r9, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 800691a:	2200      	movs	r2, #0
{
 800691c:	4605      	mov	r5, r0
 800691e:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 8006920:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006924:	461e      	mov	r6, r3
 8006926:	b31b      	cbz	r3, 8006970 <VL53L0X_perform_vhv_calibration+0x5e>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006928:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800692c:	2201      	movs	r2, #1
 800692e:	4611      	mov	r1, r2
 8006930:	4628      	mov	r0, r5
 8006932:	f7fd fef1 	bl	8004718 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8006936:	4604      	mov	r4, r0
 8006938:	bb58      	cbnz	r0, 8006992 <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800693a:	2140      	movs	r1, #64	; 0x40
 800693c:	4628      	mov	r0, r5
 800693e:	f7ff ff65 	bl	800680c <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006942:	4604      	mov	r4, r0
 8006944:	bb28      	cbnz	r0, 8006992 <VL53L0X_perform_vhv_calibration+0x80>
 8006946:	f1b9 0f01 	cmp.w	r9, #1
 800694a:	d113      	bne.n	8006974 <VL53L0X_perform_vhv_calibration+0x62>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800694c:	f10d 0317 	add.w	r3, sp, #23
 8006950:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8006954:	e9cd 8300 	strd	r8, r3, [sp]
 8006958:	4602      	mov	r2, r0
 800695a:	4603      	mov	r3, r0
 800695c:	4649      	mov	r1, r9
 800695e:	4628      	mov	r0, r5
 8006960:	f7ff ff6d 	bl	800683e <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006964:	b140      	cbz	r0, 8006978 <VL53L0X_perform_vhv_calibration+0x66>
		*pVhvSettings = 0;
 8006966:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8006968:	4620      	mov	r0, r4
 800696a:	b007      	add	sp, #28
 800696c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 8006970:	461f      	mov	r7, r3
 8006972:	e7db      	b.n	800692c <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 8006974:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006978:	2e00      	cmp	r6, #0
 800697a:	d0f5      	beq.n	8006968 <VL53L0X_perform_vhv_calibration+0x56>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800697c:	463a      	mov	r2, r7
 800697e:	2101      	movs	r1, #1
 8006980:	4628      	mov	r0, r5
 8006982:	f7fd fec9 	bl	8004718 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8006986:	4604      	mov	r4, r0
 8006988:	2800      	cmp	r0, #0
 800698a:	d1ed      	bne.n	8006968 <VL53L0X_perform_vhv_calibration+0x56>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800698c:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
 8006990:	e7ea      	b.n	8006968 <VL53L0X_perform_vhv_calibration+0x56>
		*pVhvSettings = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	f888 3000 	strb.w	r3, [r8]
 8006998:	4620      	mov	r0, r4
 800699a:	e7e4      	b.n	8006966 <VL53L0X_perform_vhv_calibration+0x54>

0800699c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800699c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069a0:	4605      	mov	r5, r0
 80069a2:	b087      	sub	sp, #28
 80069a4:	4688      	mov	r8, r1
 80069a6:	4691      	mov	r9, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80069a8:	461e      	mov	r6, r3
 80069aa:	b323      	cbz	r3, 80069f6 <VL53L0X_perform_phase_calibration+0x5a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80069ac:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80069b0:	2202      	movs	r2, #2
 80069b2:	2101      	movs	r1, #1
 80069b4:	4628      	mov	r0, r5
 80069b6:	f7fd feaf 	bl	8004718 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80069ba:	4604      	mov	r4, r0
 80069bc:	bb60      	cbnz	r0, 8006a18 <VL53L0X_perform_phase_calibration+0x7c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80069be:	4601      	mov	r1, r0
 80069c0:	4628      	mov	r0, r5
 80069c2:	f7ff ff23 	bl	800680c <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80069c6:	4604      	mov	r4, r0
 80069c8:	bb30      	cbnz	r0, 8006a18 <VL53L0X_perform_phase_calibration+0x7c>
 80069ca:	f1b9 0f01 	cmp.w	r9, #1
 80069ce:	d114      	bne.n	80069fa <VL53L0X_perform_phase_calibration+0x5e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80069d0:	f10d 0317 	add.w	r3, sp, #23
 80069d4:	e9cd 0902 	strd	r0, r9, [sp, #8]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	4602      	mov	r2, r0
 80069dc:	4603      	mov	r3, r0
 80069de:	f8cd 8004 	str.w	r8, [sp, #4]
 80069e2:	4649      	mov	r1, r9
 80069e4:	4628      	mov	r0, r5
 80069e6:	f7ff ff2a 	bl	800683e <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80069ea:	b140      	cbz	r0, 80069fe <VL53L0X_perform_phase_calibration+0x62>
		*pPhaseCal = 0;
 80069ec:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 80069ee:	4620      	mov	r0, r4
 80069f0:	b007      	add	sp, #28
 80069f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 80069f6:	461f      	mov	r7, r3
 80069f8:	e7da      	b.n	80069b0 <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 80069fa:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	d0f5      	beq.n	80069ee <VL53L0X_perform_phase_calibration+0x52>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006a02:	463a      	mov	r2, r7
 8006a04:	2101      	movs	r1, #1
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7fd fe86 	bl	8004718 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d1ed      	bne.n	80069ee <VL53L0X_perform_phase_calibration+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006a12:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
 8006a16:	e7ea      	b.n	80069ee <VL53L0X_perform_phase_calibration+0x52>
		*pPhaseCal = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f888 3000 	strb.w	r3, [r8]
 8006a1e:	4620      	mov	r0, r4
 8006a20:	e7e4      	b.n	80069ec <VL53L0X_perform_phase_calibration+0x50>

08006a22 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a24:	4615      	mov	r5, r2
 8006a26:	461a      	mov	r2, r3

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9201      	str	r2, [sp, #4]
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006a2c:	f890 6130 	ldrb.w	r6, [r0, #304]	; 0x130
{
 8006a30:	4604      	mov	r4, r0
	Status = VL53L0X_perform_vhv_calibration(
 8006a32:	f7ff ff6e 	bl	8006912 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006a36:	9a01      	ldr	r2, [sp, #4]
 8006a38:	b968      	cbnz	r0, 8006a56 <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff ffac 	bl	800699c <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006a44:	b938      	cbnz	r0, 8006a56 <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006a46:	4632      	mov	r2, r6
 8006a48:	2101      	movs	r1, #1
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f7fd fe64 	bl	8004718 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006a50:	b908      	cbnz	r0, 8006a56 <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006a52:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130

	}

	return Status;
}
 8006a56:	b002      	add	sp, #8
 8006a58:	bd70      	pop	{r4, r5, r6, pc}

08006a5a <VL53L0X_perform_ref_spad_management>:
{
 8006a5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSpadIndex = 0;
 8006a5e:	2300      	movs	r3, #0
{
 8006a60:	b093      	sub	sp, #76	; 0x4c
 8006a62:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006a66:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8006a6a:	f8a0 3128 	strh.w	r3, [r0, #296]	; 0x128
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a6e:	2201      	movs	r2, #1
 8006a70:	21ff      	movs	r1, #255	; 0xff
	int32_t nextGoodSpad = 0;
 8006a72:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006a76:	f8b0 813a 	ldrh.w	r8, [r0, #314]	; 0x13a
	uint8_t VhvSettings = 0;
 8006a7a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
{
 8006a7e:	4605      	mov	r5, r0
	uint8_t PhaseCal = 0;
 8006a80:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a84:	f7fd fe48 	bl	8004718 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006a88:	4604      	mov	r4, r0
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f040 80e8 	bne.w	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 8006a90:	4602      	mov	r2, r0
 8006a92:	214f      	movs	r1, #79	; 0x4f
 8006a94:	4628      	mov	r0, r5
 8006a96:	f7fd fe3f 	bl	8004718 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f040 80df 	bne.w	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 8006aa2:	222c      	movs	r2, #44	; 0x2c
 8006aa4:	214e      	movs	r1, #78	; 0x4e
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f7fd fe36 	bl	8004718 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006aac:	4604      	mov	r4, r0
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	f040 80d6 	bne.w	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	21ff      	movs	r1, #255	; 0xff
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f7fd fe2d 	bl	8004718 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006abe:	4604      	mov	r4, r0
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	f040 80cd 	bne.w	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 8006ac6:	22b4      	movs	r2, #180	; 0xb4
 8006ac8:	21b6      	movs	r1, #182	; 0xb6
 8006aca:	4628      	mov	r0, r5
 8006acc:	f7fd fe24 	bl	8004718 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f040 80c4 	bne.w	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 8006ad8:	4602      	mov	r2, r0
 8006ada:	2180      	movs	r1, #128	; 0x80
 8006adc:	4628      	mov	r0, r5
 8006ade:	f7fd fe1b 	bl	8004718 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f040 80bb 	bne.w	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006aea:	4603      	mov	r3, r0
 8006aec:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 8006af0:	a90d      	add	r1, sp, #52	; 0x34
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7ff ff95 	bl	8006a22 <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8006af8:	4604      	mov	r4, r0
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f040 80b0 	bne.w	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
		Status = enable_ref_spads(Dev,
 8006b00:	2303      	movs	r3, #3
 8006b02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006b06:	21b4      	movs	r1, #180	; 0xb4
 8006b08:	2306      	movs	r3, #6
					Dev->Data.SpadData.RefGoodSpadMap,
 8006b0a:	f505 7a95 	add.w	sl, r5, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006b0e:	f505 7992 	add.w	r9, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006b12:	ae0e      	add	r6, sp, #56	; 0x38
 8006b14:	e9cd 3100 	strd	r3, r1, [sp]
		lastSpadIndex = currentSpadIndex;
 8006b18:	900e      	str	r0, [sp, #56]	; 0x38
		Status = enable_ref_spads(Dev,
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	9604      	str	r6, [sp, #16]
 8006b1e:	464b      	mov	r3, r9
 8006b20:	4652      	mov	r2, sl
 8006b22:	4628      	mov	r0, r5
 8006b24:	f7ff fdb4 	bl	8006690 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 8006b28:	4604      	mov	r4, r0
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	f040 8098 	bne.w	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
		Status = perform_ref_signal_measurement(Dev,
 8006b30:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8006b34:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 8006b36:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 8006b3a:	f7ff fdef 	bl	800671c <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006b3e:	4604      	mov	r4, r0
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f040 808d 	bne.w	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
 8006b46:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8006b4a:	4543      	cmp	r3, r8
 8006b4c:	f240 80aa 	bls.w	8006ca4 <VL53L0X_perform_ref_spad_management+0x24a>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006b50:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
 8006b54:	f8a5 0128 	strh.w	r0, [r5, #296]	; 0x128
			while ((is_aperture(startSelect + currentSpadIndex)
 8006b58:	f10b 00b4 	add.w	r0, fp, #180	; 0xb4
 8006b5c:	f7ff fd70 	bl	8006640 <is_aperture>
 8006b60:	b180      	cbz	r0, 8006b84 <VL53L0X_perform_ref_spad_management+0x12a>
			Status = enable_ref_spads(Dev,
 8006b62:	2306      	movs	r3, #6
 8006b64:	22b4      	movs	r2, #180	; 0xb4
 8006b66:	2703      	movs	r7, #3
 8006b68:	e9cd 3200 	strd	r3, r2, [sp]
 8006b6c:	e9cd b702 	strd	fp, r7, [sp, #8]
 8006b70:	9604      	str	r6, [sp, #16]
 8006b72:	464b      	mov	r3, r9
 8006b74:	4652      	mov	r2, sl
 8006b76:	2101      	movs	r1, #1
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f7ff fd89 	bl	8006690 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 8006b7e:	b138      	cbz	r0, 8006b90 <VL53L0X_perform_ref_spad_management+0x136>
			Status = perform_ref_signal_measurement(Dev,
 8006b80:	4604      	mov	r4, r0
	return Status;
 8006b82:	e06d      	b.n	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006b84:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8006b88:	d8eb      	bhi.n	8006b62 <VL53L0X_perform_ref_spad_management+0x108>
				currentSpadIndex++;
 8006b8a:	f10b 0b01 	add.w	fp, fp, #1
 8006b8e:	e7e3      	b.n	8006b58 <VL53L0X_perform_ref_spad_management+0xfe>
				Status = perform_ref_signal_measurement(Dev,
 8006b90:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8006b94:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 8006b96:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 8006b9a:	f7ff fdbf 	bl	800671c <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d1ee      	bne.n	8006b80 <VL53L0X_perform_ref_spad_management+0x126>
 8006ba2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8006ba6:	4543      	cmp	r3, r8
 8006ba8:	d97f      	bls.n	8006caa <VL53L0X_perform_ref_spad_management+0x250>
					isApertureSpads_int = 1;
 8006baa:	2601      	movs	r6, #1
			needAptSpads = 0;
 8006bac:	9607      	str	r6, [sp, #28]
		(peakSignalRateRef < targetRefRate)) {
 8006bae:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006bb2:	4543      	cmp	r3, r8
 8006bb4:	d263      	bcs.n	8006c7e <VL53L0X_perform_ref_spad_management+0x224>
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006bb6:	eba3 0308 	sub.w	r3, r3, r8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bfb8      	it	lt
 8006bbe:	425b      	neglt	r3, r3
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006bc0:	f8d9 0000 	ldr.w	r0, [r9]
 8006bc4:	f8b9 1004 	ldrh.w	r1, [r9, #4]
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006bc8:	9309      	str	r3, [sp, #36]	; 0x24
		isApertureSpads_int = needAptSpads;
 8006bca:	f89d 601c 	ldrb.w	r6, [sp, #28]
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006bce:	9010      	str	r0, [sp, #64]	; 0x40
		refSpadCount_int	= minimumSpadCount;
 8006bd0:	2303      	movs	r3, #3
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006bd2:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
		refSpadCount_int	= minimumSpadCount;
 8006bd6:	9308      	str	r3, [sp, #32]
			get_next_good_spad(
 8006bd8:	465a      	mov	r2, fp
 8006bda:	ab0f      	add	r3, sp, #60	; 0x3c
 8006bdc:	2106      	movs	r1, #6
 8006bde:	4650      	mov	r0, sl
 8006be0:	f7ff fd0b 	bl	80065fa <get_next_good_spad>
			if (nextGoodSpad == -1) {
 8006be4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8006be8:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006bec:	d057      	beq.n	8006c9e <VL53L0X_perform_ref_spad_management+0x244>
			(refSpadCount_int)++;
 8006bee:	9b08      	ldr	r3, [sp, #32]
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006bf0:	f10b 00b4 	add.w	r0, fp, #180	; 0xb4
			(refSpadCount_int)++;
 8006bf4:	1c5f      	adds	r7, r3, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006bf6:	f7ff fd23 	bl	8006640 <is_aperture>
 8006bfa:	9b07      	ldr	r3, [sp, #28]
 8006bfc:	4298      	cmp	r0, r3
 8006bfe:	d14e      	bne.n	8006c9e <VL53L0X_perform_ref_spad_management+0x244>
			Status = enable_spad_bit(
 8006c00:	465a      	mov	r2, fp
 8006c02:	2106      	movs	r1, #6
 8006c04:	4648      	mov	r0, r9
 8006c06:	f7ff fd25 	bl	8006654 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d1b8      	bne.n	8006b80 <VL53L0X_perform_ref_spad_management+0x126>
				Status = set_ref_spad_map(Dev,
 8006c0e:	4649      	mov	r1, r9
 8006c10:	4628      	mov	r0, r5
				currentSpadIndex++;
 8006c12:	f10b 0b01 	add.w	fp, fp, #1
				Status = set_ref_spad_map(Dev,
 8006c16:	f7ff fd31 	bl	800667c <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d1b0      	bne.n	8006b80 <VL53L0X_perform_ref_spad_management+0x126>
			Status = perform_ref_signal_measurement(Dev,
 8006c1e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8006c22:	4628      	mov	r0, r5
 8006c24:	f7ff fd7a 	bl	800671c <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d1a9      	bne.n	8006b80 <VL53L0X_perform_ref_spad_management+0x126>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006c2c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8006c30:	eba1 0308 	sub.w	r3, r1, r8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bfb8      	it	lt
 8006c38:	425b      	neglt	r3, r3
			if (peakSignalRateRef > targetRefRate) {
 8006c3a:	4541      	cmp	r1, r8
 8006c3c:	d914      	bls.n	8006c68 <VL53L0X_perform_ref_spad_management+0x20e>
				if (signalRateDiff > lastSignalRateDiff) {
 8006c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d91c      	bls.n	8006c7e <VL53L0X_perform_ref_spad_management+0x224>
					Status = set_ref_spad_map(Dev,
 8006c44:	a910      	add	r1, sp, #64	; 0x40
 8006c46:	4628      	mov	r0, r5
 8006c48:	f7ff fd18 	bl	800667c <set_ref_spad_map>
					memcpy(
 8006c4c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8006c50:	f8a5 2128 	strh.w	r2, [r5, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 8006c54:	4603      	mov	r3, r0
					memcpy(
 8006c56:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006c58:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 8006c5c:	b173      	cbz	r3, 8006c7c <VL53L0X_perform_ref_spad_management+0x222>
 8006c5e:	461c      	mov	r4, r3
}
 8006c60:	4620      	mov	r0, r4
 8006c62:	b013      	add	sp, #76	; 0x4c
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				memcpy(lastSpadArray,
 8006c68:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8006c6c:	f8b5 1128 	ldrh.w	r1, [r5, #296]	; 0x128
 8006c70:	9010      	str	r0, [sp, #64]	; 0x40
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006c72:	e9cd 7308 	strd	r7, r3, [sp, #32]
				memcpy(lastSpadArray,
 8006c76:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
		while (!complete) {
 8006c7a:	e7ad      	b.n	8006bd8 <VL53L0X_perform_ref_spad_management+0x17e>
 8006c7c:	9f08      	ldr	r7, [sp, #32]
		*refSpadCount = refSpadCount_int;
 8006c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c80:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c84:	701e      	strb	r6, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006c86:	2301      	movs	r3, #1
 8006c88:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 8006c9c:	e7e0      	b.n	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006c9e:	f06f 0431 	mvn.w	r4, #49	; 0x31
 8006ca2:	e7dd      	b.n	8006c60 <VL53L0X_perform_ref_spad_management+0x206>
	uint8_t	 isApertureSpads_int = 0;
 8006ca4:	2600      	movs	r6, #0
	uint32_t refSpadCount_int = 0;
 8006ca6:	4637      	mov	r7, r6
 8006ca8:	e780      	b.n	8006bac <VL53L0X_perform_ref_spad_management+0x152>
			needAptSpads = 1;
 8006caa:	2301      	movs	r3, #1
	uint8_t	 isApertureSpads_int = 0;
 8006cac:	4606      	mov	r6, r0
	uint32_t refSpadCount_int = 0;
 8006cae:	4607      	mov	r7, r0
			needAptSpads = 1;
 8006cb0:	9307      	str	r3, [sp, #28]
 8006cb2:	e77c      	b.n	8006bae <VL53L0X_perform_ref_spad_management+0x154>

08006cb4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 8006cb6:	2300      	movs	r3, #0
{
 8006cb8:	4604      	mov	r4, r0
	uint8_t NewDataReady = 0;
 8006cba:	f88d 3007 	strb.w	r3, [sp, #7]
 8006cbe:	25c8      	movs	r5, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006cc0:	f10d 0107 	add.w	r1, sp, #7
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7ff fc5e 	bl	8006586 <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8006cca:	b958      	cbnz	r0, 8006ce4 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d007      	beq.n	8006ce4 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006cd4:	3d01      	subs	r5, #1
 8006cd6:	d003      	beq.n	8006ce0 <VL53L0X_measurement_poll_for_completion+0x2c>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f7fd fd55 	bl	8004788 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006cde:	e7ef      	b.n	8006cc0 <VL53L0X_measurement_poll_for_completion+0xc>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006ce0:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8006ce4:	b003      	add	sp, #12
 8006ce6:	bd30      	pop	{r4, r5, pc}

08006ce8 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006ce8:	4602      	mov	r2, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8006cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d802      	bhi.n	8006cf8 <VL53L0X_isqrt+0x10>
	uint32_t  res = 0;
 8006cf2:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 8006cf4:	b913      	cbnz	r3, 8006cfc <VL53L0X_isqrt+0x14>

		bit >>= 2;
	}

	return res;
}
 8006cf6:	4770      	bx	lr
		bit >>= 2;
 8006cf8:	089b      	lsrs	r3, r3, #2
 8006cfa:	e7f8      	b.n	8006cee <VL53L0X_isqrt+0x6>
		if (num >= res + bit) {
 8006cfc:	18c1      	adds	r1, r0, r3
 8006cfe:	4291      	cmp	r1, r2
 8006d00:	ea4f 0050 	mov.w	r0, r0, lsr #1
			res = (res >> 1) + bit;
 8006d04:	bf9c      	itt	ls
 8006d06:	18c0      	addls	r0, r0, r3
			num -= res + bit;
 8006d08:	1a52      	subls	r2, r2, r1
		bit >>= 2;
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	e7f2      	b.n	8006cf4 <VL53L0X_isqrt+0xc>

08006d0e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006d10:	2200      	movs	r2, #0
 8006d12:	2183      	movs	r1, #131	; 0x83
{
 8006d14:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006d16:	f7fd fcff 	bl	8004718 <VL53L0X_WrByte>
 8006d1a:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006d1c:	b988      	cbnz	r0, 8006d42 <VL53L0X_device_read_strobe+0x34>
 8006d1e:	26c8      	movs	r6, #200	; 0xc8
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006d20:	f10d 0207 	add.w	r2, sp, #7
 8006d24:	2183      	movs	r1, #131	; 0x83
 8006d26:	4628      	mov	r0, r5
 8006d28:	f7fd fc67 	bl	80045fa <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006d2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006d30:	4303      	orrs	r3, r0
 8006d32:	f013 0fff 	tst.w	r3, #255	; 0xff
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006d36:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006d38:	d103      	bne.n	8006d42 <VL53L0X_device_read_strobe+0x34>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006d3a:	3e01      	subs	r6, #1
 8006d3c:	d1f0      	bne.n	8006d20 <VL53L0X_device_read_strobe+0x12>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 8006d3e:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006d42:	2201      	movs	r2, #1
 8006d44:	2183      	movs	r1, #131	; 0x83
 8006d46:	4628      	mov	r0, r5
 8006d48:	f7fd fce6 	bl	8004718 <VL53L0X_WrByte>
 8006d4c:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 8006d4e:	b240      	sxtb	r0, r0
 8006d50:	b002      	add	sp, #8
 8006d52:	bd70      	pop	{r4, r5, r6, pc}

08006d54 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006d58:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 8006d5c:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 8006d5e:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006d62:	2e07      	cmp	r6, #7
	uint32_t PartUIDLower = 0;
 8006d64:	e9cd 9907 	strd	r9, r9, [sp, #28]
{
 8006d68:	4604      	mov	r4, r0
 8006d6a:	460f      	mov	r7, r1
	if (ReadDataFromDeviceDone != 7) {
 8006d6c:	f000 82b0 	beq.w	80072d0 <VL53L0X_get_info_from_device+0x57c>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d70:	2201      	movs	r2, #1
 8006d72:	2180      	movs	r1, #128	; 0x80
 8006d74:	f7fd fcd0 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d78:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d7a:	4683      	mov	fp, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d7c:	21ff      	movs	r1, #255	; 0xff
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7fd fcca 	bl	8004718 <VL53L0X_WrByte>
 8006d84:	ea4b 0000 	orr.w	r0, fp, r0
 8006d88:	fa4f fb80 	sxtb.w	fp, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006d8c:	464a      	mov	r2, r9
 8006d8e:	4649      	mov	r1, r9
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7fd fcc1 	bl	8004718 <VL53L0X_WrByte>
 8006d96:	ea4b 0000 	orr.w	r0, fp, r0
 8006d9a:	fa4f fa80 	sxtb.w	sl, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006d9e:	2206      	movs	r2, #6
 8006da0:	21ff      	movs	r1, #255	; 0xff
 8006da2:	4620      	mov	r0, r4
 8006da4:	f7fd fcb8 	bl	8004718 <VL53L0X_WrByte>
 8006da8:	ea4a 0000 	orr.w	r0, sl, r0
 8006dac:	b245      	sxtb	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006dae:	f10d 0215 	add.w	r2, sp, #21
 8006db2:	2183      	movs	r1, #131	; 0x83
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7fd fc20 	bl	80045fa <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006dba:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006dbe:	4328      	orrs	r0, r5
 8006dc0:	fa4f f880 	sxtb.w	r8, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006dc4:	f042 0204 	orr.w	r2, r2, #4
 8006dc8:	2183      	movs	r1, #131	; 0x83
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7fd fca4 	bl	8004718 <VL53L0X_WrByte>
 8006dd0:	ea48 0000 	orr.w	r0, r8, r0
 8006dd4:	fa4f f880 	sxtb.w	r8, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006dd8:	2207      	movs	r2, #7
 8006dda:	21ff      	movs	r1, #255	; 0xff
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7fd fc9b 	bl	8004718 <VL53L0X_WrByte>
 8006de2:	ea48 0000 	orr.w	r0, r8, r0
 8006de6:	fa4f fa80 	sxtb.w	sl, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006dea:	2201      	movs	r2, #1
 8006dec:	2181      	movs	r1, #129	; 0x81
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7fd fc92 	bl	8004718 <VL53L0X_WrByte>
 8006df4:	ea4a 0000 	orr.w	r0, sl, r0
 8006df8:	fa4f fa80 	sxtb.w	sl, r0

		Status |= VL53L0X_PollingDelay(Dev);
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7fd fcc3 	bl	8004788 <VL53L0X_PollingDelay>
 8006e02:	ea4a 0000 	orr.w	r0, sl, r0
 8006e06:	fa4f f880 	sxtb.w	r8, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2180      	movs	r1, #128	; 0x80
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f7fd fc82 	bl	8004718 <VL53L0X_WrByte>

		if (((option & 1) == 1) &&
 8006e14:	f017 0b01 	ands.w	fp, r7, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006e18:	ea48 0000 	orr.w	r0, r8, r0
 8006e1c:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 8006e1e:	f000 822a 	beq.w	8007276 <VL53L0X_get_info_from_device+0x522>
 8006e22:	07f2      	lsls	r2, r6, #31
 8006e24:	f100 822a 	bmi.w	800727c <VL53L0X_get_info_from_device+0x528>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006e28:	226b      	movs	r2, #107	; 0x6b
 8006e2a:	2194      	movs	r1, #148	; 0x94
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f7fd fc73 	bl	8004718 <VL53L0X_WrByte>
 8006e32:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff ff6a 	bl	8006d0e <VL53L0X_device_read_strobe>
 8006e3a:	ea48 0000 	orr.w	r0, r8, r0
 8006e3e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e40:	aa06      	add	r2, sp, #24
 8006e42:	2190      	movs	r1, #144	; 0x90
 8006e44:	4620      	mov	r0, r4
 8006e46:	f7fd fc41 	bl	80046cc <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e4a:	b26d      	sxtb	r5, r5

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006e4c:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e4e:	4328      	orrs	r0, r5
 8006e50:	fa4f f880 	sxtb.w	r8, r0
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006e54:	2224      	movs	r2, #36	; 0x24
 8006e56:	2194      	movs	r1, #148	; 0x94
 8006e58:	4620      	mov	r0, r4
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006e5a:	f3c3 2a06 	ubfx	sl, r3, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006e5e:	f3c3 39c0 	ubfx	r9, r3, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006e62:	f7fd fc59 	bl	8004718 <VL53L0X_WrByte>
 8006e66:	ea48 0000 	orr.w	r0, r8, r0
 8006e6a:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f7ff ff4d 	bl	8006d0e <VL53L0X_device_read_strobe>
 8006e74:	ea48 0000 	orr.w	r0, r8, r0
 8006e78:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e7a:	aa06      	add	r2, sp, #24
 8006e7c:	2190      	movs	r1, #144	; 0x90
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7fd fc24 	bl	80046cc <VL53L0X_RdDWord>
 8006e84:	9b06      	ldr	r3, [sp, #24]
 8006e86:	4328      	orrs	r0, r5
 8006e88:	ba1b      	rev	r3, r3
 8006e8a:	b245      	sxtb	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006e8c:	2225      	movs	r2, #37	; 0x25
 8006e8e:	2194      	movs	r1, #148	; 0x94
 8006e90:	4620      	mov	r0, r4
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006e92:	9309      	str	r3, [sp, #36]	; 0x24
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006e94:	f7fd fc40 	bl	8004718 <VL53L0X_WrByte>
 8006e98:	4328      	orrs	r0, r5
 8006e9a:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7ff ff36 	bl	8006d0e <VL53L0X_device_read_strobe>
 8006ea2:	4328      	orrs	r0, r5
 8006ea4:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ea8:	aa06      	add	r2, sp, #24
 8006eaa:	2190      	movs	r1, #144	; 0x90
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7fd fc0d 	bl	80046cc <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006eb2:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006eb4:	ea48 0000 	orr.w	r0, r8, r0
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006eb8:	0e1a      	lsrs	r2, r3, #24
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006eba:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ebc:	b245      	sxtb	r5, r0
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006ebe:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006ec6:	f017 0302 	ands.w	r3, r7, #2
 8006eca:	9302      	str	r3, [sp, #8]
 8006ecc:	f000 80db 	beq.w	8007086 <VL53L0X_get_info_from_device+0x332>
 8006ed0:	f016 0802 	ands.w	r8, r6, #2
 8006ed4:	f040 80d7 	bne.w	8007086 <VL53L0X_get_info_from_device+0x332>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006ed8:	2202      	movs	r2, #2
 8006eda:	2194      	movs	r1, #148	; 0x94
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7fd fc1b 	bl	8004718 <VL53L0X_WrByte>
 8006ee2:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f7ff ff12 	bl	8006d0e <VL53L0X_device_read_strobe>
 8006eea:	9b01      	ldr	r3, [sp, #4]
 8006eec:	4318      	orrs	r0, r3
 8006eee:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006ef0:	f10d 0216 	add.w	r2, sp, #22
 8006ef4:	2190      	movs	r1, #144	; 0x90
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f7fd fb7f 	bl	80045fa <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006efc:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006efe:	227b      	movs	r2, #123	; 0x7b
 8006f00:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006f02:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7fd fc07 	bl	8004718 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006f0a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006f0c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7ff fefd 	bl	8006d0e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006f14:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f16:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006f18:	f10d 0217 	add.w	r2, sp, #23
 8006f1c:	2190      	movs	r1, #144	; 0x90
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f7fd fb6b 	bl	80045fa <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f24:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006f26:	4328      	orrs	r0, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006f28:	2277      	movs	r2, #119	; 0x77
 8006f2a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006f2c:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f7fd fbf2 	bl	8004718 <VL53L0X_WrByte>
 8006f34:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f36:	4620      	mov	r0, r4
 8006f38:	f7ff fee9 	bl	8006d0e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006f3c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f3e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f40:	aa06      	add	r2, sp, #24
 8006f42:	2190      	movs	r1, #144	; 0x90
 8006f44:	4620      	mov	r0, r4
 8006f46:	f7fd fbc1 	bl	80046cc <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006f4a:	9b06      	ldr	r3, [sp, #24]
 8006f4c:	0e5a      	lsrs	r2, r3, #25
 8006f4e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006f52:	f3c3 4286 	ubfx	r2, r3, #18, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f56:	b26d      	sxtb	r5, r5
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006f58:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006f5c:	f3c3 22c6 	ubfx	r2, r3, #11, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f60:	4328      	orrs	r0, r5
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006f62:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006f66:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	f003 0378 	and.w	r3, r3, #120	; 0x78
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f70:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006f72:	2194      	movs	r1, #148	; 0x94
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006f74:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006f78:	4620      	mov	r0, r4
 8006f7a:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006f7c:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006f80:	f7fd fbca 	bl	8004718 <VL53L0X_WrByte>
 8006f84:	4328      	orrs	r0, r5
 8006f86:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7ff fec0 	bl	8006d0e <VL53L0X_device_read_strobe>
 8006f8e:	4328      	orrs	r0, r5
 8006f90:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f92:	aa06      	add	r2, sp, #24
 8006f94:	2190      	movs	r1, #144	; 0x90
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7fd fb98 	bl	80046cc <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006f9c:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 8006f9e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006fa2:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 8006fa6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006faa:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8006fae:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006fb2:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 8006fb6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006fba:	f3c3 2206 	ubfx	r2, r3, #8, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fbe:	4328      	orrs	r0, r5
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006fc0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006fc4:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006fc8:	019b      	lsls	r3, r3, #6
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fce:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006fd0:	2194      	movs	r1, #148	; 0x94
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006fd2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006fda:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006fde:	f7fd fb9b 	bl	8004718 <VL53L0X_WrByte>
 8006fe2:	4328      	orrs	r0, r5
 8006fe4:	b245      	sxtb	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7ff fe91 	bl	8006d0e <VL53L0X_device_read_strobe>
 8006fec:	4328      	orrs	r0, r5
 8006fee:	b245      	sxtb	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ff0:	aa06      	add	r2, sp, #24
 8006ff2:	2190      	movs	r1, #144	; 0x90
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f7fd fb69 	bl	80046cc <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006ffa:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8006ffc:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8007000:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8007004:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007008:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 800700c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007010:	f3c3 3206 	ubfx	r2, r3, #12, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007014:	4328      	orrs	r0, r5
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007016:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800701a:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	f003 037c 	and.w	r3, r3, #124	; 0x7c
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007024:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007026:	2194      	movs	r1, #148	; 0x94
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007028:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800702c:	4620      	mov	r0, r4
 800702e:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007030:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007034:	f7fd fb70 	bl	8004718 <VL53L0X_WrByte>
 8007038:	4328      	orrs	r0, r5
 800703a:	b245      	sxtb	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 800703c:	4620      	mov	r0, r4
 800703e:	f7ff fe66 	bl	8006d0e <VL53L0X_device_read_strobe>
 8007042:	4328      	orrs	r0, r5
 8007044:	b245      	sxtb	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007046:	aa06      	add	r2, sp, #24
 8007048:	2190      	movs	r1, #144	; 0x90
 800704a:	4620      	mov	r0, r4
 800704c:	f7fd fb3e 	bl	80046cc <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007050:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 8007052:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 8007056:	f88d 803e 	strb.w	r8, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 800705a:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 800705e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007062:	f3c3 52c6 	ubfx	r2, r3, #23, #7
 8007066:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800706a:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800706e:	4328      	orrs	r0, r5
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007070:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007074:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007078:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800707c:	b245      	sxtb	r5, r0
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800707e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007082:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 8007086:	f017 0304 	ands.w	r3, r7, #4
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	f000 80f8 	beq.w	8007280 <VL53L0X_get_info_from_device+0x52c>
 8007090:	0773      	lsls	r3, r6, #29
 8007092:	f100 80f5 	bmi.w	8007280 <VL53L0X_get_info_from_device+0x52c>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007096:	227b      	movs	r2, #123	; 0x7b
 8007098:	2194      	movs	r1, #148	; 0x94
 800709a:	4620      	mov	r0, r4
 800709c:	f7fd fb3c 	bl	8004718 <VL53L0X_WrByte>
 80070a0:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7ff fe33 	bl	8006d0e <VL53L0X_device_read_strobe>
 80070a8:	ea48 0000 	orr.w	r0, r8, r0
 80070ac:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80070ae:	aa07      	add	r2, sp, #28
 80070b0:	2190      	movs	r1, #144	; 0x90
 80070b2:	4620      	mov	r0, r4
 80070b4:	f7fd fb0a 	bl	80046cc <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80070b8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80070ba:	4328      	orrs	r0, r5
 80070bc:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80070be:	227c      	movs	r2, #124	; 0x7c
 80070c0:	2194      	movs	r1, #148	; 0x94
 80070c2:	4620      	mov	r0, r4
 80070c4:	f7fd fb28 	bl	8004718 <VL53L0X_WrByte>
 80070c8:	4328      	orrs	r0, r5
 80070ca:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7ff fe1d 	bl	8006d0e <VL53L0X_device_read_strobe>
 80070d4:	ea48 0000 	orr.w	r0, r8, r0
 80070d8:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80070dc:	aa08      	add	r2, sp, #32
 80070de:	2190      	movs	r1, #144	; 0x90
 80070e0:	4620      	mov	r0, r4
 80070e2:	f7fd faf3 	bl	80046cc <VL53L0X_RdDWord>
 80070e6:	ea48 0000 	orr.w	r0, r8, r0
 80070ea:	fa4f f880 	sxtb.w	r8, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80070ee:	2273      	movs	r2, #115	; 0x73
 80070f0:	2194      	movs	r1, #148	; 0x94
 80070f2:	4620      	mov	r0, r4
 80070f4:	f7fd fb10 	bl	8004718 <VL53L0X_WrByte>
 80070f8:	ea48 0000 	orr.w	r0, r8, r0
 80070fc:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80070fe:	4620      	mov	r0, r4
 8007100:	f7ff fe05 	bl	8006d0e <VL53L0X_device_read_strobe>
 8007104:	4328      	orrs	r0, r5
 8007106:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800710a:	aa06      	add	r2, sp, #24
 800710c:	2190      	movs	r1, #144	; 0x90
 800710e:	4620      	mov	r0, r4
 8007110:	f7fd fadc 	bl	80046cc <VL53L0X_RdDWord>

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007114:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007116:	ea48 0000 	orr.w	r0, r8, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800711a:	2274      	movs	r2, #116	; 0x74
 800711c:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800711e:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007120:	4620      	mov	r0, r4
				0x0000000ff) << 8;
 8007122:	ea4f 2803 	mov.w	r8, r3, lsl #8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007126:	f7fd faf7 	bl	8004718 <VL53L0X_WrByte>
 800712a:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800712c:	4620      	mov	r0, r4
 800712e:	f7ff fdee 	bl	8006d0e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007132:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8007134:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007136:	aa06      	add	r2, sp, #24
 8007138:	2190      	movs	r1, #144	; 0x90
 800713a:	4620      	mov	r0, r4
 800713c:	f7fd fac6 	bl	80046cc <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8007140:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007142:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007146:	4328      	orrs	r0, r5
 8007148:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800714a:	2275      	movs	r2, #117	; 0x75
 800714c:	2194      	movs	r1, #148	; 0x94
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800714e:	fa1f f888 	uxth.w	r8, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007152:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007154:	ea43 0808 	orr.w	r8, r3, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007158:	f7fd fade 	bl	8004718 <VL53L0X_WrByte>
 800715c:	4328      	orrs	r0, r5
 800715e:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8007160:	4620      	mov	r0, r4
 8007162:	f7ff fdd4 	bl	8006d0e <VL53L0X_device_read_strobe>
 8007166:	4328      	orrs	r0, r5
 8007168:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800716a:	aa06      	add	r2, sp, #24
 800716c:	2190      	movs	r1, #144	; 0x90
 800716e:	4620      	mov	r0, r4
 8007170:	f7fd faac 	bl	80046cc <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007174:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007176:	4328      	orrs	r0, r5
							<< 8;
 8007178:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800717a:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800717c:	2276      	movs	r2, #118	; 0x76
 800717e:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007180:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007182:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007184:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007186:	f7fd fac7 	bl	8004718 <VL53L0X_WrByte>
 800718a:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800718c:	4620      	mov	r0, r4
 800718e:	f7ff fdbe 	bl	8006d0e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007192:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8007194:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007196:	aa06      	add	r2, sp, #24
 8007198:	2190      	movs	r1, #144	; 0x90
 800719a:	4620      	mov	r0, r4
 800719c:	f7fd fa96 	bl	80046cc <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80071a0:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80071a2:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80071a6:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80071a8:	4328      	orrs	r0, r5
 80071aa:	b245      	sxtb	r5, r0
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80071ac:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80071ae:	2200      	movs	r2, #0
 80071b0:	2181      	movs	r1, #129	; 0x81
 80071b2:	4620      	mov	r0, r4
 80071b4:	9303      	str	r3, [sp, #12]
 80071b6:	f7fd faaf 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80071ba:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80071bc:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80071be:	21ff      	movs	r1, #255	; 0xff
 80071c0:	4620      	mov	r0, r4
 80071c2:	f7fd faa9 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80071c6:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80071c8:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80071ca:	f10d 0215 	add.w	r2, sp, #21
 80071ce:	2183      	movs	r1, #131	; 0x83
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7fd fa12 	bl	80045fa <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80071d6:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80071da:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80071dc:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80071de:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80071e2:	2183      	movs	r1, #131	; 0x83
 80071e4:	4620      	mov	r0, r4
 80071e6:	f7fd fa97 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80071ea:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80071ec:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071ee:	2201      	movs	r2, #1
 80071f0:	21ff      	movs	r1, #255	; 0xff
 80071f2:	4620      	mov	r0, r4
 80071f4:	f7fd fa90 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80071f8:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071fa:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80071fc:	2201      	movs	r2, #1
 80071fe:	2100      	movs	r1, #0
 8007200:	4620      	mov	r0, r4
 8007202:	f7fd fa89 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007206:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007208:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800720a:	2200      	movs	r2, #0
 800720c:	21ff      	movs	r1, #255	; 0xff
 800720e:	4620      	mov	r0, r4
 8007210:	f7fd fa82 	bl	8004718 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007214:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007216:	4328      	orrs	r0, r5
 8007218:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800721a:	2200      	movs	r2, #0
 800721c:	2180      	movs	r1, #128	; 0x80
 800721e:	4620      	mov	r0, r4
 8007220:	f7fd fa7a 	bl	8004718 <VL53L0X_WrByte>
 8007224:	4328      	orrs	r0, r5
 8007226:	b245      	sxtb	r5, r0
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007228:	9b03      	ldr	r3, [sp, #12]
 800722a:	bb05      	cbnz	r5, 800726e <VL53L0X_get_info_from_device+0x51a>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800722c:	f1bb 0f00 	cmp.w	fp, #0
 8007230:	d12a      	bne.n	8007288 <VL53L0X_get_info_from_device+0x534>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 8007232:	9a02      	ldr	r2, [sp, #8]
 8007234:	2a00      	cmp	r2, #0
 8007236:	d139      	bne.n	80072ac <VL53L0X_get_info_from_device+0x558>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 8007238:	9a01      	ldr	r2, [sp, #4]
 800723a:	b1aa      	cbz	r2, 8007268 <VL53L0X_get_info_from_device+0x514>
 800723c:	0772      	lsls	r2, r6, #29
 800723e:	d413      	bmi.n	8007268 <VL53L0X_get_info_from_device+0x514>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007240:	9a07      	ldr	r2, [sp, #28]
 8007242:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007246:	9a08      	ldr	r2, [sp, #32]
 8007248:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800724c:	ea4f 2248 	mov.w	r2, r8, lsl #9
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007250:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 8007254:	b13b      	cbz	r3, 8007266 <VL53L0X_get_info_from_device+0x512>
					OffsetFixed1104_mm =
 8007256:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800725a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800725e:	4353      	muls	r3, r2
 8007260:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 8007262:	425b      	negs	r3, r3
 8007264:	b21b      	sxth	r3, r3
			}

			PALDevDataSet(Dev,
 8007266:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007268:	433e      	orrs	r6, r7
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800726a:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800726e:	4628      	mov	r0, r5
 8007270:	b011      	add	sp, #68	; 0x44
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 8007276:	46d9      	mov	r9, fp
	uint8_t ReferenceSpadCount = 0;
 8007278:	46da      	mov	sl, fp
 800727a:	e624      	b.n	8006ec6 <VL53L0X_get_info_from_device+0x172>
 800727c:	46ca      	mov	sl, r9
 800727e:	e622      	b.n	8006ec6 <VL53L0X_get_info_from_device+0x172>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007280:	f04f 0800 	mov.w	r8, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 8007284:	4643      	mov	r3, r8
 8007286:	e792      	b.n	80071ae <VL53L0X_get_info_from_device+0x45a>
		if (((option & 1) == 1) &&
 8007288:	07f0      	lsls	r0, r6, #31
 800728a:	d4d2      	bmi.n	8007232 <VL53L0X_get_info_from_device+0x4de>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800728c:	f884 a113 	strb.w	sl, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007290:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007294:	a909      	add	r1, sp, #36	; 0x24
 8007296:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 800729a:	f504 7098 	add.w	r0, r4, #304	; 0x130
					NvmRefGoodSpadMap[i];
 800729e:	f811 cb01 	ldrb.w	ip, [r1], #1
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80072a2:	f802 cb01 	strb.w	ip, [r2], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80072a6:	4290      	cmp	r0, r2
 80072a8:	d1f9      	bne.n	800729e <VL53L0X_get_info_from_device+0x54a>
 80072aa:	e7c2      	b.n	8007232 <VL53L0X_get_info_from_device+0x4de>
		if (((option & 2) == 2) &&
 80072ac:	07b1      	lsls	r1, r6, #30
 80072ae:	d4c3      	bmi.n	8007238 <VL53L0X_get_info_from_device+0x4e4>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80072b0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80072b4:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80072b8:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80072bc:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80072c0:	a90b      	add	r1, sp, #44	; 0x2c
 80072c2:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 80072c6:	9302      	str	r3, [sp, #8]
 80072c8:	f01c fbc2 	bl	8023a50 <strcpy>
 80072cc:	9b02      	ldr	r3, [sp, #8]
 80072ce:	e7b3      	b.n	8007238 <VL53L0X_get_info_from_device+0x4e4>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072d0:	464d      	mov	r5, r9
 80072d2:	e7cc      	b.n	800726e <VL53L0X_get_info_from_device+0x51a>

080072d4 <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 80072d4:	b150      	cbz	r0, 80072ec <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 80072d6:	3801      	subs	r0, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80072d8:	2300      	movs	r3, #0
 80072da:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80072de:	b29a      	uxth	r2, r3
 80072e0:	f103 0301 	add.w	r3, r3, #1
 80072e4:	d103      	bne.n	80072ee <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 80072e6:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80072ea:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 80072ec:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 80072ee:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 80072f0:	e7f3      	b.n	80072da <VL53L0X_encode_timeout+0x6>

080072f2 <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80072f2:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80072f4:	0a00      	lsrs	r0, r0, #8
 80072f6:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 80072fa:	3001      	adds	r0, #1
 80072fc:	4770      	bx	lr
	...

08007300 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007300:	4b08      	ldr	r3, [pc, #32]	; (8007324 <VL53L0X_calc_timeout_mclks+0x24>)
 8007302:	435a      	muls	r2, r3

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007308:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 800730c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007310:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007314:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007318:	fb03 0001 	mla	r0, r3, r1, r0

	return timeout_period_mclks;
}
 800731c:	fbb0 f0f2 	udiv	r0, r0, r2
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	003a2f00 	.word	0x003a2f00

08007328 <set_sequence_step_timeout.part.0>:

	return Status;
}


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
 8007328:	b5f0      	push	{r4, r5, r6, r7, lr}
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800732a:	2903      	cmp	r1, #3
VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
 800732c:	b085      	sub	sp, #20
 800732e:	4605      	mov	r5, r0
 8007330:	4616      	mov	r6, r2
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007332:	d11f      	bne.n	8007374 <set_sequence_step_timeout.part.0+0x4c>

			if (Status == VL53L0X_ERROR_NONE) {
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007334:	f10d 0205 	add.w	r2, sp, #5
 8007338:	2100      	movs	r1, #0
 800733a:	f7fe fbeb 	bl	8005b14 <VL53L0X_GetVcselPulsePeriod>
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800733e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007342:	4631      	mov	r1, r6
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007344:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 8007346:	4628      	mov	r0, r5
 8007348:	f7ff ffda 	bl	8007300 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800734c:	b280      	uxth	r0, r0
 800734e:	f7ff ffc1 	bl	80072d4 <VL53L0X_encode_timeout>
 8007352:	4602      	mov	r2, r0
 8007354:	f8ad 0006 	strh.w	r0, [sp, #6]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007358:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800735c:	b93c      	cbnz	r4, 800736e <set_sequence_step_timeout.part.0+0x46>
				Status = VL53L0X_WrWord(Dev,
 800735e:	2151      	movs	r1, #81	; 0x51
 8007360:	4628      	mov	r0, r5
 8007362:	f7fd f9e9 	bl	8004738 <VL53L0X_WrWord>
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007366:	4604      	mov	r4, r0
 8007368:	b908      	cbnz	r0, 800736e <set_sequence_step_timeout.part.0+0x46>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800736a:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 800736e:	4620      	mov	r0, r4
 8007370:	b005      	add	sp, #20
 8007372:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007374:	2904      	cmp	r1, #4
 8007376:	d13b      	bne.n	80073f0 <set_sequence_step_timeout.part.0+0xc8>
			VL53L0X_GetSequenceStepEnables(Dev,
 8007378:	a902      	add	r1, sp, #8
 800737a:	f7fe fc1f 	bl	8005bbc <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 800737e:	f89d 700b 	ldrb.w	r7, [sp, #11]
 8007382:	b1b7      	cbz	r7, 80073b2 <set_sequence_step_timeout.part.0+0x8a>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007384:	f10d 0205 	add.w	r2, sp, #5
 8007388:	2100      	movs	r1, #0
 800738a:	4628      	mov	r0, r5
 800738c:	f7fe fbc2 	bl	8005b14 <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 8007390:	4604      	mov	r4, r0
 8007392:	2800      	cmp	r0, #0
 8007394:	d1eb      	bne.n	800736e <set_sequence_step_timeout.part.0+0x46>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007396:	f10d 0206 	add.w	r2, sp, #6
 800739a:	2151      	movs	r1, #81	; 0x51
 800739c:	4628      	mov	r0, r5
 800739e:	f7fd f975 	bl	800468c <VL53L0X_RdWord>
 80073a2:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 80073a4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80073a8:	f7ff ffa3 	bl	80072f2 <VL53L0X_decode_timeout>
					PreRangeTimeOutMClks =
 80073ac:	b287      	uxth	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 80073ae:	2c00      	cmp	r4, #0
 80073b0:	d1dd      	bne.n	800736e <set_sequence_step_timeout.part.0+0x46>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80073b2:	f10d 0205 	add.w	r2, sp, #5
 80073b6:	2101      	movs	r1, #1
 80073b8:	4628      	mov	r0, r5
 80073ba:	f7fe fbab 	bl	8005b14 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 80073be:	4604      	mov	r4, r0
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d1d4      	bne.n	800736e <set_sequence_step_timeout.part.0+0x46>
					VL53L0X_calc_timeout_mclks(Dev,
 80073c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7ff ff98 	bl	8007300 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80073d0:	fa17 f080 	uxtah	r0, r7, r0
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80073d4:	b280      	uxth	r0, r0
 80073d6:	f7ff ff7d 	bl	80072d4 <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80073da:	2171      	movs	r1, #113	; 0x71
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80073dc:	4602      	mov	r2, r0
					Status = VL53L0X_WrWord(Dev, 0x71,
 80073de:	4628      	mov	r0, r5
 80073e0:	f7fd f9aa 	bl	8004738 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 80073e4:	4604      	mov	r4, r0
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d1c1      	bne.n	800736e <set_sequence_step_timeout.part.0+0x46>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80073ea:	f8c5 60dc 	str.w	r6, [r5, #220]	; 0xdc
 80073ee:	e7be      	b.n	800736e <set_sequence_step_timeout.part.0+0x46>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073f0:	f06f 0403 	mvn.w	r4, #3
 80073f4:	e7bb      	b.n	800736e <set_sequence_step_timeout.part.0+0x46>
	...

080073f8 <VL53L0X_calc_timeout_us>:
{
 80073f8:	b510      	push	{r4, lr}
	macro_period_ps = (uint32_t)(macro_period_vclks
 80073fa:	4b08      	ldr	r3, [pc, #32]	; (800741c <VL53L0X_calc_timeout_us+0x24>)
 80073fc:	435a      	muls	r2, r3
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80073fe:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8007402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		+ (macro_period_ns / 2)) / 1000;
 8007406:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800740a:	fbb2 f3f0 	udiv	r3, r2, r0
		+ (macro_period_ns / 2)) / 1000;
 800740e:	fbb2 f2f4 	udiv	r2, r2, r4
 8007412:	fb01 2203 	mla	r2, r1, r3, r2
}
 8007416:	fbb2 f0f0 	udiv	r0, r2, r0
 800741a:	bd10      	pop	{r4, pc}
 800741c:	003a2f00 	.word	0x003a2f00

08007420 <get_sequence_step_timeout>:
{
 8007420:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007424:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 8007426:	f04f 0500 	mov.w	r5, #0
{
 800742a:	4607      	mov	r7, r0
 800742c:	4616      	mov	r6, r2
	uint8_t EncodedTimeOutByte = 0;
 800742e:	f88d 5003 	strb.w	r5, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 8007432:	f8ad 5004 	strh.w	r5, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007436:	d81c      	bhi.n	8007472 <get_sequence_step_timeout+0x52>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007438:	f10d 0202 	add.w	r2, sp, #2
 800743c:	4629      	mov	r1, r5
 800743e:	f7fe fb69 	bl	8005b14 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8007442:	4604      	mov	r4, r0
 8007444:	b930      	cbnz	r0, 8007454 <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 8007446:	f10d 0203 	add.w	r2, sp, #3
 800744a:	2146      	movs	r1, #70	; 0x46
 800744c:	4638      	mov	r0, r7
 800744e:	f7fd f8d4 	bl	80045fa <VL53L0X_RdByte>
 8007452:	4604      	mov	r4, r0
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007454:	f89d 0003 	ldrb.w	r0, [sp, #3]
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007458:	f7ff ff4b 	bl	80072f2 <VL53L0X_decode_timeout>
			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800745c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007460:	b281      	uxth	r1, r0
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007462:	4638      	mov	r0, r7
 8007464:	f7ff ffc8 	bl	80073f8 <VL53L0X_calc_timeout_us>
	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007468:	6030      	str	r0, [r6, #0]
}
 800746a:	4620      	mov	r0, r4
 800746c:	b004      	add	sp, #16
 800746e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007472:	2903      	cmp	r1, #3
 8007474:	d118      	bne.n	80074a8 <get_sequence_step_timeout+0x88>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007476:	f10d 0202 	add.w	r2, sp, #2
 800747a:	4629      	mov	r1, r5
 800747c:	f7fe fb4a 	bl	8005b14 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8007480:	4604      	mov	r4, r0
 8007482:	2800      	cmp	r0, #0
 8007484:	d149      	bne.n	800751a <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007486:	4601      	mov	r1, r0
 8007488:	f10d 0202 	add.w	r2, sp, #2
 800748c:	4638      	mov	r0, r7
 800748e:	f7fe fb41 	bl	8005b14 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8007492:	4604      	mov	r4, r0
 8007494:	b928      	cbnz	r0, 80074a2 <get_sequence_step_timeout+0x82>
				Status = VL53L0X_RdWord(Dev,
 8007496:	aa01      	add	r2, sp, #4
 8007498:	2151      	movs	r1, #81	; 0x51
 800749a:	4638      	mov	r0, r7
 800749c:	f7fd f8f6 	bl	800468c <VL53L0X_RdWord>
 80074a0:	4604      	mov	r4, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80074a2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80074a6:	e7d7      	b.n	8007458 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80074a8:	2904      	cmp	r1, #4
 80074aa:	d138      	bne.n	800751e <get_sequence_step_timeout+0xfe>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80074ac:	a902      	add	r1, sp, #8
 80074ae:	f7fe fb85 	bl	8005bbc <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80074b2:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80074b6:	b1a8      	cbz	r0, 80074e4 <get_sequence_step_timeout+0xc4>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80074b8:	f10d 0202 	add.w	r2, sp, #2
 80074bc:	4629      	mov	r1, r5
 80074be:	4638      	mov	r0, r7
 80074c0:	f7fe fb28 	bl	8005b14 <VL53L0X_GetVcselPulsePeriod>
 80074c4:	4604      	mov	r4, r0
			if (Status == VL53L0X_ERROR_NONE) {
 80074c6:	b958      	cbnz	r0, 80074e0 <get_sequence_step_timeout+0xc0>
				Status = VL53L0X_RdWord(Dev,
 80074c8:	aa01      	add	r2, sp, #4
 80074ca:	2151      	movs	r1, #81	; 0x51
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7fd f8dd 	bl	800468c <VL53L0X_RdWord>
 80074d2:	4604      	mov	r4, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80074d4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80074d8:	f7ff ff0b 	bl	80072f2 <VL53L0X_decode_timeout>
 80074dc:	b285      	uxth	r5, r0
		if (Status == VL53L0X_ERROR_NONE) {
 80074de:	b114      	cbz	r4, 80074e6 <get_sequence_step_timeout+0xc6>
	uint16_t FinalRangeTimeOutMClks = 0;
 80074e0:	2000      	movs	r0, #0
 80074e2:	e015      	b.n	8007510 <get_sequence_step_timeout+0xf0>
		PreRangeTimeOutMClks = 0;
 80074e4:	4605      	mov	r5, r0
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80074e6:	f10d 0202 	add.w	r2, sp, #2
 80074ea:	2101      	movs	r1, #1
 80074ec:	4638      	mov	r0, r7
 80074ee:	f7fe fb11 	bl	8005b14 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80074f2:	4604      	mov	r4, r0
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d1f3      	bne.n	80074e0 <get_sequence_step_timeout+0xc0>
			Status = VL53L0X_RdWord(Dev,
 80074f8:	f10d 0206 	add.w	r2, sp, #6
 80074fc:	2171      	movs	r1, #113	; 0x71
 80074fe:	4638      	mov	r0, r7
 8007500:	f7fd f8c4 	bl	800468c <VL53L0X_RdWord>
 8007504:	4604      	mov	r4, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007506:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800750a:	f7ff fef2 	bl	80072f2 <VL53L0X_decode_timeout>
 800750e:	b280      	uxth	r0, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007510:	1b45      	subs	r5, r0, r5
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007512:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007516:	b2a9      	uxth	r1, r5
 8007518:	e7a3      	b.n	8007462 <get_sequence_step_timeout+0x42>
	uint32_t TimeoutMicroSeconds = 0;
 800751a:	4628      	mov	r0, r5
 800751c:	e7a4      	b.n	8007468 <get_sequence_step_timeout+0x48>
 800751e:	4628      	mov	r0, r5
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007520:	462c      	mov	r4, r5
 8007522:	e7a1      	b.n	8007468 <get_sequence_step_timeout+0x48>

08007524 <set_sequence_step_timeout>:
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007524:	2902      	cmp	r1, #2
{
 8007526:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007528:	4604      	mov	r4, r0
 800752a:	4615      	mov	r5, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800752c:	d81b      	bhi.n	8007566 <set_sequence_step_timeout+0x42>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800752e:	f10d 0207 	add.w	r2, sp, #7
 8007532:	2100      	movs	r1, #0
 8007534:	f7fe faee 	bl	8005b14 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8007538:	b998      	cbnz	r0, 8007562 <set_sequence_step_timeout+0x3e>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800753a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800753e:	4629      	mov	r1, r5
 8007540:	4620      	mov	r0, r4
 8007542:	f7ff fedd 	bl	8007300 <VL53L0X_calc_timeout_mclks>
			if (MsrcRangeTimeOutMClks > 256)
 8007546:	b283      	uxth	r3, r0
 8007548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut =
 800754c:	bf9a      	itte	ls
 800754e:	f100 32ff 	addls.w	r2, r0, #4294967295
 8007552:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 8007554:	22ff      	movhi	r2, #255	; 0xff
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007556:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
			Status = VL53L0X_WrByte(Dev,
 800755a:	2146      	movs	r1, #70	; 0x46
 800755c:	4620      	mov	r0, r4
 800755e:	f7fd f8db 	bl	8004718 <VL53L0X_WrByte>
}
 8007562:	b003      	add	sp, #12
 8007564:	bd30      	pop	{r4, r5, pc}
 8007566:	f7ff fedf 	bl	8007328 <set_sequence_step_timeout.part.0>
 800756a:	e7fa      	b.n	8007562 <set_sequence_step_timeout+0x3e>

0800756c <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	b085      	sub	sp, #20
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8007572:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007574:	f012 0b01 	ands.w	fp, r2, #1
{
 8007578:	4680      	mov	r8, r0
 800757a:	468a      	mov	sl, r1
 800757c:	4691      	mov	r9, r2
	uint8_t PhaseCalInt = 0;
 800757e:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007582:	d104      	bne.n	800758e <VL53L0X_set_vcsel_pulse_period+0x22>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8007584:	b931      	cbnz	r1, 8007594 <VL53L0X_set_vcsel_pulse_period+0x28>
 8007586:	f1a2 030c 	sub.w	r3, r2, #12
 800758a:	2b06      	cmp	r3, #6
 800758c:	d957      	bls.n	800763e <VL53L0X_set_vcsel_pulse_period+0xd2>
 800758e:	f06f 0003 	mvn.w	r0, #3
 8007592:	e061      	b.n	8007658 <VL53L0X_set_vcsel_pulse_period+0xec>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8007594:	2901      	cmp	r1, #1
 8007596:	d01e      	beq.n	80075d6 <VL53L0X_set_vcsel_pulse_period+0x6a>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007598:	ea4f 0459 	mov.w	r4, r9, lsr #1
 800759c:	3c01      	subs	r4, #1
 800759e:	b2e4      	uxtb	r4, r4
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80075a0:	f1ba 0f00 	cmp.w	sl, #0
 80075a4:	f000 80b5 	beq.w	8007712 <VL53L0X_set_vcsel_pulse_period+0x1a6>
 80075a8:	f1ba 0f01 	cmp.w	sl, #1
 80075ac:	d1ef      	bne.n	800758e <VL53L0X_set_vcsel_pulse_period+0x22>
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80075ae:	aa01      	add	r2, sp, #4
 80075b0:	2104      	movs	r1, #4
 80075b2:	4640      	mov	r0, r8
 80075b4:	f7ff ff34 	bl	8007420 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80075b8:	b950      	cbnz	r0, 80075d0 <VL53L0X_set_vcsel_pulse_period+0x64>
				Status = VL53L0X_WrByte(Dev,
 80075ba:	4622      	mov	r2, r4
 80075bc:	2170      	movs	r1, #112	; 0x70
 80075be:	4640      	mov	r0, r8
 80075c0:	f7fd f8aa 	bl	8004718 <VL53L0X_WrByte>
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80075c4:	b920      	cbnz	r0, 80075d0 <VL53L0X_set_vcsel_pulse_period+0x64>
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80075c6:	9a01      	ldr	r2, [sp, #4]
 80075c8:	2104      	movs	r1, #4
 80075ca:	4640      	mov	r0, r8
 80075cc:	f7ff feac 	bl	8007328 <set_sequence_step_timeout.part.0>
				Status = set_sequence_step_timeout(Dev,
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80075d0:	f888 90e0 	strb.w	r9, [r8, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80075d4:	e0bc      	b.n	8007750 <VL53L0X_set_vcsel_pulse_period+0x1e4>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80075d6:	f1a2 0308 	sub.w	r3, r2, #8
 80075da:	2b06      	cmp	r3, #6
 80075dc:	d8d7      	bhi.n	800758e <VL53L0X_set_vcsel_pulse_period+0x22>
		if (VCSELPulsePeriodPCLK == 8) {
 80075de:	2a08      	cmp	r2, #8
 80075e0:	d149      	bne.n	8007676 <VL53L0X_set_vcsel_pulse_period+0x10a>
			Status = VL53L0X_WrByte(Dev,
 80075e2:	2210      	movs	r2, #16
 80075e4:	2148      	movs	r1, #72	; 0x48
 80075e6:	f7fd f897 	bl	8004718 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80075ea:	464a      	mov	r2, r9
 80075ec:	2147      	movs	r1, #71	; 0x47
 80075ee:	4640      	mov	r0, r8
 80075f0:	f7fd f892 	bl	8004718 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80075f4:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 80075f6:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80075f8:	2132      	movs	r1, #50	; 0x32
 80075fa:	4640      	mov	r0, r8
 80075fc:	f7fd f88c 	bl	8004718 <VL53L0X_WrByte>
 8007600:	4338      	orrs	r0, r7
 8007602:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8007604:	220c      	movs	r2, #12
 8007606:	2130      	movs	r1, #48	; 0x30
 8007608:	4640      	mov	r0, r8
 800760a:	f7fd f885 	bl	8004718 <VL53L0X_WrByte>
 800760e:	4338      	orrs	r0, r7
 8007610:	b246      	sxtb	r6, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007612:	4652      	mov	r2, sl
 8007614:	21ff      	movs	r1, #255	; 0xff
 8007616:	4640      	mov	r0, r8
 8007618:	f7fd f87e 	bl	8004718 <VL53L0X_WrByte>
 800761c:	4330      	orrs	r0, r6
 800761e:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev,
 8007620:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 8007622:	2130      	movs	r1, #48	; 0x30
 8007624:	4640      	mov	r0, r8
 8007626:	f7fd f877 	bl	8004718 <VL53L0X_WrByte>
 800762a:	4328      	orrs	r0, r5
 800762c:	b244      	sxtb	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800762e:	465a      	mov	r2, fp
 8007630:	21ff      	movs	r1, #255	; 0xff
 8007632:	4640      	mov	r0, r8
 8007634:	f7fd f870 	bl	8004718 <VL53L0X_WrByte>
 8007638:	4320      	orrs	r0, r4
 800763a:	b240      	sxtb	r0, r0
 800763c:	e00a      	b.n	8007654 <VL53L0X_set_vcsel_pulse_period+0xe8>
		if (VCSELPulsePeriodPCLK == 12) {
 800763e:	2a0c      	cmp	r2, #12
 8007640:	d10d      	bne.n	800765e <VL53L0X_set_vcsel_pulse_period+0xf2>
			Status = VL53L0X_WrByte(Dev,
 8007642:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
 8007644:	2157      	movs	r1, #87	; 0x57
 8007646:	f7fd f867 	bl	8004718 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800764a:	2208      	movs	r2, #8
 800764c:	2156      	movs	r1, #86	; 0x56
 800764e:	4640      	mov	r0, r8
 8007650:	f7fd f862 	bl	8004718 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8007654:	2800      	cmp	r0, #0
 8007656:	d09f      	beq.n	8007598 <VL53L0X_set_vcsel_pulse_period+0x2c>
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 8007658:	b005      	add	sp, #20
 800765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
 800765e:	2a0e      	cmp	r2, #14
 8007660:	d101      	bne.n	8007666 <VL53L0X_set_vcsel_pulse_period+0xfa>
			Status = VL53L0X_WrByte(Dev,
 8007662:	2230      	movs	r2, #48	; 0x30
 8007664:	e7ee      	b.n	8007644 <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 16) {
 8007666:	2a10      	cmp	r2, #16
 8007668:	d101      	bne.n	800766e <VL53L0X_set_vcsel_pulse_period+0x102>
			Status = VL53L0X_WrByte(Dev,
 800766a:	2240      	movs	r2, #64	; 0x40
 800766c:	e7ea      	b.n	8007644 <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 18) {
 800766e:	2a12      	cmp	r2, #18
 8007670:	d192      	bne.n	8007598 <VL53L0X_set_vcsel_pulse_period+0x2c>
			Status = VL53L0X_WrByte(Dev,
 8007672:	2250      	movs	r2, #80	; 0x50
 8007674:	e7e6      	b.n	8007644 <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007676:	2a0a      	cmp	r2, #10
 8007678:	d120      	bne.n	80076bc <VL53L0X_set_vcsel_pulse_period+0x150>
			Status = VL53L0X_WrByte(Dev,
 800767a:	2228      	movs	r2, #40	; 0x28
 800767c:	2148      	movs	r1, #72	; 0x48
 800767e:	f7fd f84b 	bl	8004718 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007682:	2208      	movs	r2, #8
 8007684:	2147      	movs	r1, #71	; 0x47
 8007686:	4640      	mov	r0, r8
 8007688:	f7fd f846 	bl	8004718 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800768c:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 800768e:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8007690:	2132      	movs	r1, #50	; 0x32
 8007692:	4640      	mov	r0, r8
 8007694:	f7fd f840 	bl	8004718 <VL53L0X_WrByte>
 8007698:	4338      	orrs	r0, r7
 800769a:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800769c:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 800769e:	2130      	movs	r1, #48	; 0x30
 80076a0:	4640      	mov	r0, r8
 80076a2:	f7fd f839 	bl	8004718 <VL53L0X_WrByte>
 80076a6:	4338      	orrs	r0, r7
 80076a8:	b246      	sxtb	r6, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80076aa:	4652      	mov	r2, sl
 80076ac:	21ff      	movs	r1, #255	; 0xff
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7fd f832 	bl	8004718 <VL53L0X_WrByte>
 80076b4:	4330      	orrs	r0, r6
 80076b6:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev,
 80076b8:	2220      	movs	r2, #32
 80076ba:	e7b2      	b.n	8007622 <VL53L0X_set_vcsel_pulse_period+0xb6>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80076bc:	2a0c      	cmp	r2, #12
 80076be:	d112      	bne.n	80076e6 <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 80076c0:	2238      	movs	r2, #56	; 0x38
 80076c2:	2148      	movs	r1, #72	; 0x48
 80076c4:	f7fd f828 	bl	8004718 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80076c8:	2208      	movs	r2, #8
 80076ca:	2147      	movs	r1, #71	; 0x47
 80076cc:	4640      	mov	r0, r8
 80076ce:	f7fd f823 	bl	8004718 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80076d2:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 80076d4:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80076d6:	2132      	movs	r1, #50	; 0x32
 80076d8:	4640      	mov	r0, r8
 80076da:	f7fd f81d 	bl	8004718 <VL53L0X_WrByte>
 80076de:	4338      	orrs	r0, r7
 80076e0:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80076e2:	2208      	movs	r2, #8
 80076e4:	e7db      	b.n	800769e <VL53L0X_set_vcsel_pulse_period+0x132>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80076e6:	2a0e      	cmp	r2, #14
 80076e8:	f47f af56 	bne.w	8007598 <VL53L0X_set_vcsel_pulse_period+0x2c>
			Status = VL53L0X_WrByte(Dev,
 80076ec:	2248      	movs	r2, #72	; 0x48
 80076ee:	4611      	mov	r1, r2
 80076f0:	f7fd f812 	bl	8004718 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80076f4:	2208      	movs	r2, #8
 80076f6:	2147      	movs	r1, #71	; 0x47
 80076f8:	4640      	mov	r0, r8
 80076fa:	f7fd f80d 	bl	8004718 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80076fe:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8007700:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8007702:	2132      	movs	r1, #50	; 0x32
 8007704:	4640      	mov	r0, r8
 8007706:	f7fd f807 	bl	8004718 <VL53L0X_WrByte>
 800770a:	4338      	orrs	r0, r7
 800770c:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800770e:	2207      	movs	r2, #7
 8007710:	e7c5      	b.n	800769e <VL53L0X_set_vcsel_pulse_period+0x132>
			Status = get_sequence_step_timeout(Dev,
 8007712:	aa02      	add	r2, sp, #8
 8007714:	2103      	movs	r1, #3
 8007716:	4640      	mov	r0, r8
 8007718:	f7ff fe82 	bl	8007420 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 800771c:	b9b0      	cbnz	r0, 800774c <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = get_sequence_step_timeout(Dev,
 800771e:	aa03      	add	r2, sp, #12
 8007720:	2102      	movs	r1, #2
 8007722:	4640      	mov	r0, r8
 8007724:	f7ff fe7c 	bl	8007420 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8007728:	b980      	cbnz	r0, 800774c <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = VL53L0X_WrByte(Dev,
 800772a:	4622      	mov	r2, r4
 800772c:	2150      	movs	r1, #80	; 0x50
 800772e:	4640      	mov	r0, r8
 8007730:	f7fc fff2 	bl	8004718 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 8007734:	b950      	cbnz	r0, 800774c <VL53L0X_set_vcsel_pulse_period+0x1e0>
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007736:	9a02      	ldr	r2, [sp, #8]
 8007738:	2103      	movs	r1, #3
 800773a:	4640      	mov	r0, r8
 800773c:	f7ff fdf4 	bl	8007328 <set_sequence_step_timeout.part.0>
			if (Status == VL53L0X_ERROR_NONE)
 8007740:	b920      	cbnz	r0, 800774c <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = set_sequence_step_timeout(Dev,
 8007742:	9a03      	ldr	r2, [sp, #12]
 8007744:	2102      	movs	r1, #2
 8007746:	4640      	mov	r0, r8
 8007748:	f7ff feec 	bl	8007524 <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800774c:	f888 90e8 	strb.w	r9, [r8, #232]	; 0xe8
	if (Status == VL53L0X_ERROR_NONE) {
 8007750:	2800      	cmp	r0, #0
 8007752:	d181      	bne.n	8007658 <VL53L0X_set_vcsel_pulse_period+0xec>
		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007754:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8007758:	4640      	mov	r0, r8
 800775a:	f7fe f9d7 	bl	8005b0c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 800775e:	2800      	cmp	r0, #0
 8007760:	f47f af7a 	bne.w	8007658 <VL53L0X_set_vcsel_pulse_period+0xec>
		Status = VL53L0X_perform_phase_calibration(
 8007764:	4602      	mov	r2, r0
 8007766:	2301      	movs	r3, #1
 8007768:	f10d 0103 	add.w	r1, sp, #3
 800776c:	4640      	mov	r0, r8
 800776e:	f7ff f915 	bl	800699c <VL53L0X_perform_phase_calibration>
 8007772:	e771      	b.n	8007658 <VL53L0X_set_vcsel_pulse_period+0xec>

08007774 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007774:	b513      	push	{r0, r1, r4, lr}
 8007776:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007778:	b129      	cbz	r1, 8007786 <VL53L0X_get_vcsel_pulse_period+0x12>
 800777a:	2901      	cmp	r1, #1
 800777c:	d010      	beq.n	80077a0 <VL53L0X_get_vcsel_pulse_period+0x2c>
 800777e:	f06f 0003 	mvn.w	r0, #3
	if (Status == VL53L0X_ERROR_NONE)
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 8007782:	b002      	add	sp, #8
 8007784:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 8007786:	f10d 0207 	add.w	r2, sp, #7
 800778a:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 800778c:	f7fc ff35 	bl	80045fa <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 8007790:	2800      	cmp	r0, #0
 8007792:	d1f6      	bne.n	8007782 <VL53L0X_get_vcsel_pulse_period+0xe>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007794:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007798:	3301      	adds	r3, #1
 800779a:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 800779c:	7023      	strb	r3, [r4, #0]
 800779e:	e7f0      	b.n	8007782 <VL53L0X_get_vcsel_pulse_period+0xe>
		Status = VL53L0X_RdByte(Dev,
 80077a0:	f10d 0207 	add.w	r2, sp, #7
 80077a4:	2170      	movs	r1, #112	; 0x70
 80077a6:	e7f1      	b.n	800778c <VL53L0X_get_vcsel_pulse_period+0x18>

080077a8 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80077a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80077aa:	2300      	movs	r3, #0
{
 80077ac:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80077ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80077b2:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80077b6:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80077ba:	4299      	cmp	r1, r3
{
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 80077c0:	d804      	bhi.n	80077cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 80077c2:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 80077c6:	4628      	mov	r0, r5
 80077c8:	b005      	add	sp, #20
 80077ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80077cc:	a902      	add	r1, sp, #8
 80077ce:	f7fe f9f5 	bl	8005bbc <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 80077d2:	4605      	mov	r5, r0
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d1f6      	bne.n	80077c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		SchedulerSequenceSteps.MsrcOn ||
 80077d8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80077dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80077e6:	4313      	orrs	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80077e8:	f6a7 04e8 	subw	r4, r7, #2280	; 0x8e8
		SchedulerSequenceSteps.MsrcOn ||
 80077ec:	d01b      	beq.n	8007826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
		Status = get_sequence_step_timeout(Dev,
 80077ee:	466a      	mov	r2, sp
 80077f0:	2102      	movs	r1, #2
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7ff fe14 	bl	8007420 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d13b      	bne.n	8007874 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
		if (SchedulerSequenceSteps.TccOn) {
 80077fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007800:	b12b      	cbz	r3, 800780e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x66>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007802:	9b00      	ldr	r3, [sp, #0]
 8007804:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 8007808:	429c      	cmp	r4, r3
 800780a:	d9da      	bls.n	80077c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 800780c:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 800780e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8007812:	b323      	cbz	r3, 800785e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xb6>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007814:	9b00      	ldr	r3, [sp, #0]
 8007816:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800781a:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800781e:	ea4f 0243 	mov.w	r2, r3, lsl #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007822:	d9ce      	bls.n	80077c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8007824:	1aa4      	subs	r4, r4, r2
	if (SchedulerSequenceSteps.PreRangeOn) {
 8007826:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800782a:	b15b      	cbz	r3, 8007844 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9c>
		Status = get_sequence_step_timeout(Dev,
 800782c:	aa01      	add	r2, sp, #4
 800782e:	2103      	movs	r1, #3
 8007830:	4630      	mov	r0, r6
 8007832:	f7ff fdf5 	bl	8007420 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007836:	9b01      	ldr	r3, [sp, #4]
 8007838:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800783c:	42a3      	cmp	r3, r4
 800783e:	d2c0      	bcs.n	80077c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 8007840:	b9c0      	cbnz	r0, 8007874 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007842:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 8007844:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0bc      	beq.n	80077c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800784c:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 8007850:	2104      	movs	r1, #4
 8007852:	4630      	mov	r0, r6
 8007854:	f7ff fd68 	bl	8007328 <set_sequence_step_timeout.part.0>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007858:	6177      	str	r7, [r6, #20]
 800785a:	4605      	mov	r5, r0
 800785c:	e7b3      	b.n	80077c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800785e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0df      	beq.n	8007826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	f503 7325 	add.w	r3, r3, #660	; 0x294
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800786c:	429c      	cmp	r4, r3
 800786e:	d9a8      	bls.n	80077c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8007870:	1ae4      	subs	r4, r4, r3
	if (Status != VL53L0X_ERROR_NONE) {
 8007872:	e7d8      	b.n	8007826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
 8007874:	4605      	mov	r5, r0
 8007876:	e7a6      	b.n	80077c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

08007878 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007878:	b570      	push	{r4, r5, r6, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800787a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
{
 800787e:	b086      	sub	sp, #24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007880:	2300      	movs	r3, #0
 8007882:	e9cd 2302 	strd	r2, r3, [sp, #8]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007886:	f640 3336 	movw	r3, #2870	; 0xb36
 800788a:	600b      	str	r3, [r1, #0]
{
 800788c:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800788e:	a904      	add	r1, sp, #16
{
 8007890:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007892:	f7fe f993 	bl	8005bbc <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 8007896:	4605      	mov	r5, r0
 8007898:	2800      	cmp	r0, #0
 800789a:	d136      	bne.n	800790a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
 800789c:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80078a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	d019      	beq.n	80078e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 80078ae:	aa02      	add	r2, sp, #8
 80078b0:	2102      	movs	r1, #2
 80078b2:	4630      	mov	r0, r6
 80078b4:	f7ff fdb4 	bl	8007420 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d140      	bne.n	800793e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 80078bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80078c0:	b12b      	cbz	r3, 80078ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 80078c2:	9b02      	ldr	r3, [sp, #8]
 80078c4:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	4413      	add	r3, r2
 80078cc:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80078ce:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80078d2:	b1eb      	cbz	r3, 8007910 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80078d4:	9b02      	ldr	r3, [sp, #8]
 80078d6:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 80078e0:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 80078e2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80078e6:	b9eb      	cbnz	r3, 8007924 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80078e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80078ec:	b15b      	cbz	r3, 8007906 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
			Status = get_sequence_step_timeout(Dev,
 80078ee:	aa01      	add	r2, sp, #4
 80078f0:	2104      	movs	r1, #4
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7ff fd94 	bl	8007420 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				(FinalRangeTimeoutMicroSeconds +
 80078f8:	9b01      	ldr	r3, [sp, #4]
 80078fa:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	4413      	add	r3, r2
 8007902:	6023      	str	r3, [r4, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007904:	b9d8      	cbnz	r0, 800793e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800790a:	4628      	mov	r0, r5
 800790c:	b006      	add	sp, #24
 800790e:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007910:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0e4      	beq.n	80078e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8007918:	9b02      	ldr	r3, [sp, #8]
 800791a:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	4413      	add	r3, r2
 8007922:	e7dd      	b.n	80078e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 8007924:	aa03      	add	r2, sp, #12
 8007926:	2103      	movs	r1, #3
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff fd79 	bl	8007420 <get_sequence_step_timeout>
				PreRangeTimeoutMicroSeconds +
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	4413      	add	r3, r2
 8007938:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800793a:	2800      	cmp	r0, #0
 800793c:	d0d4      	beq.n	80078e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
 800793e:	4605      	mov	r5, r0
 8007940:	e7e3      	b.n	800790a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

08007942 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007944:	2200      	movs	r2, #0
{
 8007946:	4607      	mov	r7, r0
 8007948:	460e      	mov	r6, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800794a:	4610      	mov	r0, r2

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800794c:	5cb3      	ldrb	r3, [r6, r2]
 800794e:	b103      	cbz	r3, 8007952 <VL53L0X_load_tuning_settings+0x10>
 8007950:	b108      	cbz	r0, 8007956 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007952:	b003      	add	sp, #12
 8007954:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Index++;
 8007956:	1c55      	adds	r5, r2, #1
		if (NumberOfWrites == 0xFF) {
 8007958:	2bff      	cmp	r3, #255	; 0xff
 800795a:	5d71      	ldrb	r1, [r6, r5]
 800795c:	d128      	bne.n	80079b0 <VL53L0X_load_tuning_settings+0x6e>
			Index++;
 800795e:	1c95      	adds	r5, r2, #2
			switch (SelectParam) {
 8007960:	5d73      	ldrb	r3, [r6, r5]
 8007962:	2903      	cmp	r1, #3
 8007964:	d837      	bhi.n	80079d6 <VL53L0X_load_tuning_settings+0x94>
 8007966:	e8df f001 	tbb	[pc, r1]
 800796a:	0b02      	.short	0x0b02
 800796c:	1b13      	.short	0x1b13
				Index++;
 800796e:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 8007970:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007972:	78d2      	ldrb	r2, [r2, #3]
 8007974:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007978:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800797c:	462a      	mov	r2, r5
 800797e:	e7e5      	b.n	800794c <VL53L0X_load_tuning_settings+0xa>
				Index++;
 8007980:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 8007982:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007984:	78d2      	ldrb	r2, [r2, #3]
 8007986:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800798a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
				break;
 800798e:	e7f5      	b.n	800797c <VL53L0X_load_tuning_settings+0x3a>
				Index++;
 8007990:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 8007992:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007994:	78d2      	ldrb	r2, [r2, #3]
 8007996:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800799a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
				break;
 800799e:	e7ed      	b.n	800797c <VL53L0X_load_tuning_settings+0x3a>
				Index++;
 80079a0:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 80079a2:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80079a4:	78d2      	ldrb	r2, [r2, #3]
 80079a6:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80079aa:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
				break;
 80079ae:	e7e5      	b.n	800797c <VL53L0X_load_tuning_settings+0x3a>
		} else if (NumberOfWrites <= 4) {
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d810      	bhi.n	80079d6 <VL53L0X_load_tuning_settings+0x94>
			Index++;
 80079b4:	f10d 0c04 	add.w	ip, sp, #4
 80079b8:	1c94      	adds	r4, r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 80079ba:	4435      	add	r5, r6
 80079bc:	4662      	mov	r2, ip
 80079be:	3001      	adds	r0, #1
				localBuffer[i] = *(pTuningSettingBuffer +
 80079c0:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 80079c4:	f80c eb01 	strb.w	lr, [ip], #1
			for (i = 0; i < NumberOfWrites; i++) {
 80079c8:	4283      	cmp	r3, r0
 80079ca:	dcf8      	bgt.n	80079be <VL53L0X_load_tuning_settings+0x7c>
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80079cc:	4638      	mov	r0, r7
 80079ce:	18e5      	adds	r5, r4, r3
 80079d0:	f7fc fe28 	bl	8004624 <VL53L0X_WriteMulti>
 80079d4:	e7d2      	b.n	800797c <VL53L0X_load_tuning_settings+0x3a>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079d6:	f06f 0003 	mvn.w	r0, #3
 80079da:	e7cf      	b.n	800797c <VL53L0X_load_tuning_settings+0x3a>

080079dc <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80079dc:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80079de:	2300      	movs	r3, #0
{
 80079e0:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 80079e2:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80079e4:	f10d 0107 	add.w	r1, sp, #7
{
 80079e8:	4605      	mov	r5, r0
 80079ea:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80079ec:	f7fe f935 	bl	8005c5a <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 80079f0:	b940      	cbnz	r0, 8007a04 <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 80079f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80079f6:	b12b      	cbz	r3, 8007a04 <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80079f8:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 80079fa:	6a2b      	ldr	r3, [r5, #32]
 80079fc:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80079fe:	3380      	adds	r3, #128	; 0x80
 8007a00:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007a02:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 8007a04:	b002      	add	sp, #8
 8007a06:	bd70      	pop	{r4, r5, r6, pc}

08007a08 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007a08:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007a0a:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 8007a0c:	6013      	str	r3, [r2, #0]
{
 8007a0e:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 8007a10:	aa01      	add	r2, sp, #4
 8007a12:	f7ff ffe3 	bl	80079dc <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007a16:	b918      	cbnz	r0, 8007a20 <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	9a01      	ldr	r2, [sp, #4]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	6023      	str	r3, [r4, #0]

	return Status;
}
 8007a20:	b002      	add	sp, #8
 8007a22:	bd10      	pop	{r4, pc}

08007a24 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 8007a26:	f8b0 c150 	ldrh.w	ip, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007a2a:	f8d0 5154 	ldr.w	r5, [r0, #340]	; 0x154
 8007a2e:	fb05 f50c 	mul.w	r5, r5, ip

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007a32:	3580      	adds	r5, #128	; 0x80
 8007a34:	0a2d      	lsrs	r5, r5, #8
{
 8007a36:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
	SignalAt0mm *= dmaxCalRange_mm;
 8007a3a:	fb05 f50c 	mul.w	r5, r5, ip

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 8007a3e:	b152      	cbz	r2, 8007a56 <VL53L0X_calc_dmax+0x32>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007a40:	028c      	lsls	r4, r1, #10

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007a42:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007a46:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007a4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007a4e:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007a50:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 8007a54:	0c22      	lsrs	r2, r4, #16
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007a56:	f506 4000 	add.w	r0, r6, #32768	; 0x8000
 8007a5a:	0c00      	lsrs	r0, r0, #16
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007a5c:	9906      	ldr	r1, [sp, #24]
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007a5e:	2406      	movs	r4, #6
 8007a60:	3003      	adds	r0, #3
 8007a62:	fbb0 f0f4 	udiv	r0, r0, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007a66:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 8007a6a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007a72:	bf38      	it	cc
 8007a74:	1cf1      	addcc	r1, r6, #3
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007a76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007a7a:	bf3e      	ittt	cc
 8007a7c:	fbb1 f1f4 	udivcc	r1, r1, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007a80:	ebc1 01c1 	rsbcc	r1, r1, r1, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007a84:	f501 4100 	addcc.w	r1, r1, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007a88:	ea4f 4313 	mov.w	r3, r3, lsr #16
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007a8c:	bf34      	ite	cc
 8007a8e:	0c09      	lsrcc	r1, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 8007a90:	491b      	ldrcs	r1, [pc, #108]	; (8007b00 <VL53L0X_calc_dmax+0xdc>)
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007a92:	fb03 f303 	mul.w	r3, r3, r3

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007a96:	bf38      	it	cc
 8007a98:	4349      	mulcc	r1, r1

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007a9a:	eb03 0357 	add.w	r3, r3, r7, lsr #1
 8007a9e:	440b      	add	r3, r1
	minSignalNeeded /= peakVcselDuration_us;
 8007aa0:	fbb3 f3f7 	udiv	r3, r3, r7

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007aa4:	039b      	lsls	r3, r3, #14
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007aa6:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded /= minSignalNeeded_p4;
 8007aaa:	24fe      	movs	r4, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007aac:	337f      	adds	r3, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8007aae:	fbb3 f3f4 	udiv	r3, r3, r4
	minSignalNeeded *= minSignalNeeded_p1;
 8007ab2:	fb03 f402 	mul.w	r4, r3, r2
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007ab6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8007aba:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007abe:	0980      	lsrs	r0, r0, #6
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007ac0:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 4;
 8007ac4:	0124      	lsls	r4, r4, #4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007ac6:	f7ff f90f 	bl	8006ce8 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007aca:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007ace:	42bc      	cmp	r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007ad0:	bf28      	it	cs
 8007ad2:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007ad6:	4606      	mov	r6, r0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007ad8:	bf29      	itett	cs
 8007ada:	fbb4 f3f3 	udivcs	r3, r4, r3
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007ade:	2000      	movcc	r0, #0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007ae0:	18ed      	addcs	r5, r5, r3
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007ae2:	fbb4 f4f7 	udivcs	r4, r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007ae6:	bf28      	it	cs
 8007ae8:	fbb5 f0f4 	udivcs	r0, r5, r4

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007aec:	f7ff f8fc 	bl	8006ce8 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
 8007af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af2:	4286      	cmp	r6, r0
 8007af4:	bf94      	ite	ls
 8007af6:	601e      	strls	r6, [r3, #0]
 8007af8:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8007afa:	2000      	movs	r0, #0
 8007afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007afe:	bf00      	nop
 8007b00:	fff00000 	.word	0xfff00000

08007b04 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b08:	ed2d 8b02 	vpush	{d8}
 8007b0c:	b08f      	sub	sp, #60	; 0x3c
 8007b0e:	4604      	mov	r4, r0
 8007b10:	9307      	str	r3, [sp, #28]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007b12:	6a03      	ldr	r3, [r0, #32]
 8007b14:	930c      	str	r3, [sp, #48]	; 0x30
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007b16:	690b      	ldr	r3, [r1, #16]
 8007b18:	9308      	str	r3, [sp, #32]

	correctedSignalRate_mcps =
 8007b1a:	68cb      	ldr	r3, [r1, #12]
{
 8007b1c:	460e      	mov	r6, r1
 8007b1e:	4693      	mov	fp, r2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007b20:	aa0d      	add	r2, sp, #52	; 0x34
	correctedSignalRate_mcps =
 8007b22:	ee08 3a10 	vmov	s16, r3
	Status = VL53L0X_get_total_signal_rate(
 8007b26:	f7ff ff6f 	bl	8007a08 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007b2a:	aa0c      	add	r2, sp, #48	; 0x30
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f7ff ff54 	bl	80079dc <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8007b34:	bb48      	cbnz	r0, 8007b8a <VL53L0X_calc_sigma_estimate+0x86>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007b36:	f894 a0e0 	ldrb.w	sl, [r4, #224]	; 0xe0
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007b3a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007b3c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007b40:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007b44:	f894 e0e8 	ldrb.w	lr, [r4, #232]	; 0xe8

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 8007b48:	f1ba 0f08 	cmp.w	sl, #8
		vcselWidth = 3;
 8007b4c:	bf0c      	ite	eq
 8007b4e:	2502      	moveq	r5, #2
 8007b50:	2503      	movne	r5, #3
 8007b52:	9509      	str	r5, [sp, #36]	; 0x24
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007b54:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007b58:	fb05 fc07 	mul.w	ip, r5, r7
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007b5c:	f50c 4200 	add.w	r2, ip, #32768	; 0x8000
 8007b60:	9204      	str	r2, [sp, #16]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007b62:	f107 0280 	add.w	r2, r7, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007b66:	f022 09ff 	bic.w	r9, r2, #255	; 0xff
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007b6a:	9205      	str	r2, [sp, #20]
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 8007b6c:	9a04      	ldr	r2, [sp, #16]
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007b6e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
		totalSignalRate_mcps <<= 8;
 8007b72:	4f62      	ldr	r7, [pc, #392]	; (8007cfc <VL53L0X_calc_sigma_estimate+0x1f8>)
 8007b74:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	if (peakSignalRate_kcps == 0) {
 8007b78:	0c12      	lsrs	r2, r2, #16
 8007b7a:	920a      	str	r2, [sp, #40]	; 0x28
 8007b7c:	d10a      	bne.n	8007b94 <VL53L0X_calc_sigma_estimate+0x90>
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 8007b7e:	9b07      	ldr	r3, [sp, #28]
		*pSigmaEstimate = cSigmaEstMax;
 8007b80:	f8cb 7000 	str.w	r7, [fp]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007b84:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
		*pDmax_mm = 0;
 8007b88:	6018      	str	r0, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007b8a:	b00f      	add	sp, #60	; 0x3c
 8007b8c:	ecbd 8b02 	vpop	{d8}
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007b94:	fb05 fc0c 	mul.w	ip, r5, ip
 8007b98:	f5bc 1f48 	cmp.w	ip, #3276800	; 0x320000
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007b9c:	4672      	mov	r2, lr
 8007b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	4663      	mov	r3, ip
 8007ba4:	bf28      	it	cs
 8007ba6:	f44f 1348 	movcs.w	r3, #3276800	; 0x320000
 8007baa:	9306      	str	r3, [sp, #24]
 8007bac:	f7ff fba8 	bl	8007300 <VL53L0X_calc_timeout_mclks>
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007bb2:	4680      	mov	r8, r0
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4652      	mov	r2, sl
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f7ff fba1 	bl	8007300 <VL53L0X_calc_timeout_mclks>
		peakVcselDuration_us = vcselWidth * 2048 *
 8007bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007bc0:	eb00 0308 	add.w	r3, r0, r8
		peakVcselDuration_us = vcselWidth * 2048 *
 8007bc4:	435a      	muls	r2, r3
 8007bc6:	02d3      	lsls	r3, r2, #11
		peakVcselDuration_us *= cPllPeriod_ps;
 8007bc8:	f240 6877 	movw	r8, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007bcc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007bd0:	fbb3 f3f5 	udiv	r3, r3, r5
		peakVcselDuration_us *= cPllPeriod_ps;
 8007bd4:	fb08 f803 	mul.w	r8, r8, r3
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007bd8:	9b05      	ldr	r3, [sp, #20]
 8007bda:	4a49      	ldr	r2, [pc, #292]	; (8007d00 <VL53L0X_calc_sigma_estimate+0x1fc>)
 8007bdc:	0a18      	lsrs	r0, r3, #8
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007bde:	9b08      	ldr	r3, [sp, #32]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007be0:	f508 78fa 	add.w	r8, r8, #500	; 0x1f4
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007be4:	fb05 fa03 	mul.w	sl, r5, r3
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007be8:	fbb8 f8f5 	udiv	r8, r8, r5
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007bec:	4b45      	ldr	r3, [pc, #276]	; (8007d04 <VL53L0X_calc_sigma_estimate+0x200>)
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007bee:	fb08 f000 	mul.w	r0, r8, r0
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007bf2:	3080      	adds	r0, #128	; 0x80
 8007bf4:	0a00      	lsrs	r0, r0, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007bf6:	ea0a 0a03 	and.w	sl, sl, r3
 8007bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfc:	fbba faf3 	udiv	sl, sl, r3
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007c00:	4592      	cmp	sl, r2
 8007c02:	bf28      	it	cs
 8007c04:	4692      	movcs	sl, r2
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007c06:	2801      	cmp	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007c08:	f44f 7216 	mov.w	r2, #600	; 0x258
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007c0c:	bf38      	it	cc
 8007c0e:	2001      	movcc	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007c10:	fb02 fa0a 	mul.w	sl, r2, sl
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007c14:	220c      	movs	r2, #12
 8007c16:	4350      	muls	r0, r2
 8007c18:	f7ff f866 	bl	8006ce8 <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c1c:	9b04      	ldr	r3, [sp, #16]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007c1e:	9005      	str	r0, [sp, #20]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c20:	461a      	mov	r2, r3
 8007c22:	4b38      	ldr	r3, [pc, #224]	; (8007d04 <VL53L0X_calc_sigma_estimate+0x200>)
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007c24:	8930      	ldrh	r0, [r6, #8]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c26:	ea02 0c03 	and.w	ip, r2, r3
 8007c2a:	9b06      	ldr	r3, [sp, #24]
			xTalkCompRate_kcps) + 500)/1000;
 8007c2c:	9a06      	ldr	r2, [sp, #24]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c2e:	ebac 0103 	sub.w	r1, ip, r3
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007c32:	4b35      	ldr	r3, [pc, #212]	; (8007d08 <VL53L0X_calc_sigma_estimate+0x204>)
 8007c34:	4343      	muls	r3, r0
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007c36:	f241 205c 	movw	r0, #4700	; 0x125c
 8007c3a:	fbb3 f3f0 	udiv	r3, r3, r0
			xTalkCompRate_kcps) + 500)/1000;
 8007c3e:	f502 70fa 	add.w	r0, r2, #500	; 0x1f4
 8007c42:	4460      	add	r0, ip
			xTalkCompRate_kcps) + 500)/1000;
 8007c44:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c48:	fbb1 f1f5 	udiv	r1, r1, r5
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007c4c:	fbb0 f5f5 	udiv	r5, r0, r5
		diff1_mcps <<= 8;
 8007c50:	0209      	lsls	r1, r1, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007c52:	fbb1 f5f5 	udiv	r5, r1, r5
		xTalkCorrection <<= 8;
 8007c56:	022d      	lsls	r5, r5, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007c58:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
 8007c5c:	435d      	muls	r5, r3
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007c5e:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 8007c62:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 8007c64:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 8007c68:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 8007c6a:	436d      	muls	r5, r5
		pwMult >>= 14;
 8007c6c:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 8007c6e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007c72:	4368      	muls	r0, r5
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007c74:	f50a 4300 	add.w	r3, sl, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007c78:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007c7c:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 8007c7e:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007c80:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007c82:	fb00 3000 	mla	r0, r0, r0, r3
 8007c86:	f7ff f82f 	bl	8006ce8 <VL53L0X_isqrt>
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007c8a:	9a05      	ldr	r2, [sp, #20]
		sqrtResult_centi_ns <<= 16;
 8007c8c:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007c8e:	3032      	adds	r0, #50	; 0x32
 8007c90:	2364      	movs	r3, #100	; 0x64
 8007c92:	fbb0 f3f3 	udiv	r3, r0, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007c96:	0050      	lsls	r0, r2, #1
		sigmaEstRtn		 += 5000;
 8007c98:	f640 32b5 	movw	r2, #2997	; 0xbb5
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007c9c:	fbb3 f0f0 	udiv	r0, r3, r0
		sigmaEstRtn		 += 5000;
 8007ca0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ca4:	fb02 3000 	mla	r0, r2, r0, r3
		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007ca8:	4b18      	ldr	r3, [pc, #96]	; (8007d0c <VL53L0X_calc_sigma_estimate+0x208>)
 8007caa:	4298      	cmp	r0, r3
		sigmaEstRtn		 /= 10000;
 8007cac:	bf96      	itet	ls
 8007cae:	f242 7310 	movwls	r3, #10000	; 0x2710
			sigmaEstRtn = cSigmaEstRtnMax;
 8007cb2:	f44f 4070 	movhi.w	r0, #61440	; 0xf000
		sigmaEstRtn		 /= 10000;
 8007cb6:	fbb0 f0f3 	udivls	r0, r0, r3
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007cba:	f241 1304 	movw	r3, #4356	; 0x1104
 8007cbe:	fb00 3000 	mla	r0, r0, r0, r3
 8007cc2:	f7ff f811 	bl	8006ce8 <VL53L0X_isqrt>
		sigmaEstimate	 = 1000 * sqrtResult;
 8007cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cca:	4358      	muls	r0, r3
		Status = VL53L0X_calc_dmax(
 8007ccc:	9b07      	ldr	r3, [sp, #28]
 8007cce:	f8cd a004 	str.w	sl, [sp, #4]
 8007cd2:	4287      	cmp	r7, r0
 8007cd4:	bf28      	it	cs
 8007cd6:	4607      	movcs	r7, r0
 8007cd8:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8007cdc:	f44f 7348 	mov.w	r3, #800	; 0x320
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007ce0:	f8cb 7000 	str.w	r7, [fp]
		Status = VL53L0X_calc_dmax(
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	ee18 2a10 	vmov	r2, s16
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007cea:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8007cee:	462b      	mov	r3, r5
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f7ff fe96 	bl	8007a24 <VL53L0X_calc_dmax>
 8007cf8:	e747      	b.n	8007b8a <VL53L0X_calc_sigma_estimate+0x86>
 8007cfa:	bf00      	nop
 8007cfc:	028f87ae 	.word	0x028f87ae
 8007d00:	00666666 	.word	0x00666666
 8007d04:	ffff0000 	.word	0xffff0000
 8007d08:	0006999a 	.word	0x0006999a
 8007d0c:	249f270f 	.word	0x249f270f

08007d10 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	b08b      	sub	sp, #44	; 0x2c
 8007d16:	4699      	mov	r9, r3
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
	uint8_t SigmaLimitCheckEnable = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007d1e:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007d22:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007d26:	f88d 3011 	strb.w	r3, [sp, #17]
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
	uint16_t tmpWord = 0;
 8007d2a:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007d2e:	9309      	str	r3, [sp, #36]	; 0x24
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007d30:	08cb      	lsrs	r3, r1, #3
 8007d32:	f3c1 06c3 	ubfx	r6, r1, #3, #4
 8007d36:	9300      	str	r3, [sp, #0]

	if (DeviceRangeStatusInternal == 0 ||
 8007d38:	f24f 03a1 	movw	r3, #61601	; 0xf0a1
 8007d3c:	40f3      	lsrs	r3, r6
{
 8007d3e:	4690      	mov	r8, r2
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
	} else {
		NoneFlag = 0;
 8007d40:	f003 0301 	and.w	r3, r3, #1
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d44:	2201      	movs	r2, #1
 8007d46:	21ff      	movs	r1, #255	; 0xff
{
 8007d48:	9f15      	ldr	r7, [sp, #84]	; 0x54
		NoneFlag = 0;
 8007d4a:	9301      	str	r3, [sp, #4]
{
 8007d4c:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d4e:	f7fc fce3 	bl	8004718 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8007d52:	b928      	cbnz	r0, 8007d60 <VL53L0X_get_pal_range_status+0x50>
		Status = VL53L0X_RdWord(Dev,
 8007d54:	f10d 0212 	add.w	r2, sp, #18
 8007d58:	21b6      	movs	r1, #182	; 0xb6
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7fc fc96 	bl	800468c <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007d60:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8007d64:	ea4f 2a4a 	mov.w	sl, sl, lsl #9

	if (Status == VL53L0X_ERROR_NONE)
 8007d68:	b920      	cbnz	r0, 8007d74 <VL53L0X_get_pal_range_status+0x64>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	21ff      	movs	r1, #255	; 0xff
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f7fc fcd2 	bl	8004718 <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007d74:	f8c4 a144 	str.w	sl, [r4, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007d78:	b928      	cbnz	r0, 8007d86 <VL53L0X_get_pal_range_status+0x76>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	f10d 020e 	add.w	r2, sp, #14
 8007d80:	4620      	mov	r0, r4
 8007d82:	f7fd ffc4 	bl	8005d0e <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007d86:	f89d 500e 	ldrb.w	r5, [sp, #14]
 8007d8a:	b1d5      	cbz	r5, 8007dc2 <VL53L0X_get_pal_range_status+0xb2>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	f040 808c 	bne.w	8007eaa <VL53L0X_get_pal_range_status+0x19a>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007d92:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007d94:	ab09      	add	r3, sp, #36	; 0x24
 8007d96:	aa05      	add	r2, sp, #20
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7ff feb3 	bl	8007b04 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	f040 8083 	bne.w	8007eaa <VL53L0X_get_pal_range_status+0x19a>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007da4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da8:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007daa:	4601      	mov	r1, r0
 8007dac:	aa06      	add	r2, sp, #24
 8007dae:	4620      	mov	r0, r4
 8007db0:	f7fd ffe6 	bl	8005d80 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007db4:	9d06      	ldr	r5, [sp, #24]
 8007db6:	b125      	cbz	r5, 8007dc2 <VL53L0X_get_pal_range_status+0xb2>
	uint8_t SigmaLimitflag = 0;
 8007db8:	9b05      	ldr	r3, [sp, #20]
 8007dba:	429d      	cmp	r5, r3
 8007dbc:	bf2c      	ite	cs
 8007dbe:	2500      	movcs	r5, #0
 8007dc0:	2501      	movcc	r5, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007dc2:	b920      	cbnz	r0, 8007dce <VL53L0X_get_pal_range_status+0xbe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007dc4:	aa04      	add	r2, sp, #16
 8007dc6:	2102      	movs	r1, #2
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f7fd ffa0 	bl	8005d0e <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007dce:	f89d b010 	ldrb.w	fp, [sp, #16]
 8007dd2:	f1bb 0f00 	cmp.w	fp, #0
 8007dd6:	d00f      	beq.n	8007df8 <VL53L0X_get_pal_range_status+0xe8>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d16a      	bne.n	8007eb2 <VL53L0X_get_pal_range_status+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007ddc:	aa07      	add	r2, sp, #28
 8007dde:	2102      	movs	r1, #2
 8007de0:	4620      	mov	r0, r4
 8007de2:	f7fd ffcd 	bl	8005d80 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8007de6:	9b07      	ldr	r3, [sp, #28]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d060      	beq.n	8007eae <VL53L0X_get_pal_range_status+0x19e>
	uint8_t SignalRefClipflag = 0;
 8007dec:	4553      	cmp	r3, sl
 8007dee:	bf2c      	ite	cs
 8007df0:	f04f 0b00 	movcs.w	fp, #0
 8007df4:	f04f 0b01 	movcc.w	fp, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007df8:	b928      	cbnz	r0, 8007e06 <VL53L0X_get_pal_range_status+0xf6>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007dfa:	f10d 0211 	add.w	r2, sp, #17
 8007dfe:	2103      	movs	r1, #3
 8007e00:	4620      	mov	r0, r4
 8007e02:	f7fd ff84 	bl	8005d0e <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007e06:	f89d a011 	ldrb.w	sl, [sp, #17]
 8007e0a:	f1ba 0f00 	cmp.w	sl, #0
 8007e0e:	d016      	beq.n	8007e3e <VL53L0X_get_pal_range_status+0x12e>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d177      	bne.n	8007f04 <VL53L0X_get_pal_range_status+0x1f4>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007e14:	f1b9 0f00 	cmp.w	r9, #0
 8007e18:	d003      	beq.n	8007e22 <VL53L0X_get_pal_range_status+0x112>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007e1a:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8007e1e:	fbb8 f9f9 	udiv	r9, r8, r9
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007e22:	aa08      	add	r2, sp, #32
 8007e24:	2103      	movs	r1, #3
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7fd ffaa 	bl	8005d80 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007e2c:	9a08      	ldr	r2, [sp, #32]
 8007e2e:	2a00      	cmp	r2, #0
 8007e30:	d042      	beq.n	8007eb8 <VL53L0X_get_pal_range_status+0x1a8>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007e32:	454a      	cmp	r2, r9
 8007e34:	bf94      	ite	ls
 8007e36:	f04f 0a00 	movls.w	sl, #0
 8007e3a:	f04f 0a01 	movhi.w	sl, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e3e:	b920      	cbnz	r0, 8007e4a <VL53L0X_get_pal_range_status+0x13a>
		if (NoneFlag == 1) {
 8007e40:	9b01      	ldr	r3, [sp, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d03a      	beq.n	8007ebc <VL53L0X_get_pal_range_status+0x1ac>
			*pPalRangeStatus = 255;	 /* NONE */
 8007e46:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007e48:	703a      	strb	r2, [r7, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007e4a:	783a      	ldrb	r2, [r7, #0]
 8007e4c:	b90a      	cbnz	r2, 8007e52 <VL53L0X_get_pal_range_status+0x142>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007e4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e50:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007e52:	f10d 020f 	add.w	r2, sp, #15
 8007e56:	2101      	movs	r1, #1
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7fd ff58 	bl	8005d0e <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007e5e:	bb08      	cbnz	r0, 8007ea4 <VL53L0X_get_pal_range_status+0x194>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007e60:	f89d 200e 	ldrb.w	r2, [sp, #14]
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007e64:	f89d 3011 	ldrb.w	r3, [sp, #17]
			Temp8 = 1;
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	bf08      	it	eq
 8007e6c:	2501      	moveq	r5, #1
		if ((DeviceRangeStatusInternal == 4) ||
 8007e6e:	2e04      	cmp	r6, #4
 8007e70:	bf18      	it	ne
 8007e72:	f89d 200f 	ldrbne.w	r2, [sp, #15]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e76:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
			Temp8 = 1;
 8007e7a:	bf1a      	itte	ne
 8007e7c:	fab2 f282 	clzne	r2, r2
 8007e80:	0952      	lsrne	r2, r2, #5
 8007e82:	2201      	moveq	r2, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e84:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007e88:	f89d 2010 	ldrb.w	r2, [sp, #16]
			Temp8 = 1;
 8007e8c:	2a00      	cmp	r2, #0
 8007e8e:	bf08      	it	eq
 8007e90:	f04f 0b01 	moveq.w	fp, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	bf08      	it	eq
 8007e98:	f04f 0a01 	moveq.w	sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e9c:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007ea0:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8007ea4:	b00b      	add	sp, #44	; 0x2c
 8007ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eaa:	2500      	movs	r5, #0
 8007eac:	e78f      	b.n	8007dce <VL53L0X_get_pal_range_status+0xbe>
	uint8_t SignalRefClipflag = 0;
 8007eae:	469b      	mov	fp, r3
 8007eb0:	e7a2      	b.n	8007df8 <VL53L0X_get_pal_range_status+0xe8>
 8007eb2:	f04f 0b00 	mov.w	fp, #0
 8007eb6:	e7a6      	b.n	8007e06 <VL53L0X_get_pal_range_status+0xf6>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007eb8:	4692      	mov	sl, r2
 8007eba:	e7c0      	b.n	8007e3e <VL53L0X_get_pal_range_status+0x12e>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007ebc:	1e72      	subs	r2, r6, #1
 8007ebe:	2a02      	cmp	r2, #2
 8007ec0:	d801      	bhi.n	8007ec6 <VL53L0X_get_pal_range_status+0x1b6>
			*pPalRangeStatus = 5; /* HW fail */
 8007ec2:	2205      	movs	r2, #5
 8007ec4:	e7c0      	b.n	8007e48 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007ec6:	2e06      	cmp	r6, #6
 8007ec8:	d001      	beq.n	8007ece <VL53L0X_get_pal_range_status+0x1be>
 8007eca:	2e09      	cmp	r6, #9
 8007ecc:	d101      	bne.n	8007ed2 <VL53L0X_get_pal_range_status+0x1c2>
			*pPalRangeStatus = 4;  /* Phase fail */
 8007ece:	2204      	movs	r2, #4
 8007ed0:	e7ba      	b.n	8007e48 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007ed2:	9b00      	ldr	r3, [sp, #0]
 8007ed4:	f003 020d 	and.w	r2, r3, #13
 8007ed8:	2a08      	cmp	r2, #8
 8007eda:	d002      	beq.n	8007ee2 <VL53L0X_get_pal_range_status+0x1d2>
					DeviceRangeStatusInternal == 10 ||
 8007edc:	f1bb 0f01 	cmp.w	fp, #1
 8007ee0:	d101      	bne.n	8007ee6 <VL53L0X_get_pal_range_status+0x1d6>
			*pPalRangeStatus = 3;  /* Min range */
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	e7b0      	b.n	8007e48 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007ee6:	2e04      	cmp	r6, #4
 8007ee8:	d002      	beq.n	8007ef0 <VL53L0X_get_pal_range_status+0x1e0>
 8007eea:	f1ba 0f01 	cmp.w	sl, #1
 8007eee:	d101      	bne.n	8007ef4 <VL53L0X_get_pal_range_status+0x1e4>
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	e7a9      	b.n	8007e48 <VL53L0X_get_pal_range_status+0x138>
		} else if (SigmaLimitflag == 1) {
 8007ef4:	2d01      	cmp	r5, #1
 8007ef6:	d101      	bne.n	8007efc <VL53L0X_get_pal_range_status+0x1ec>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007ef8:	2201      	movs	r2, #1
 8007efa:	e7a5      	b.n	8007e48 <VL53L0X_get_pal_range_status+0x138>
			*pPalRangeStatus = 0; /* Range Valid */
 8007efc:	2200      	movs	r2, #0
 8007efe:	703a      	strb	r2, [r7, #0]
 8007f00:	46aa      	mov	sl, r5
 8007f02:	e7a2      	b.n	8007e4a <VL53L0X_get_pal_range_status+0x13a>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007f04:	f04f 0a00 	mov.w	sl, #0
 8007f08:	e79f      	b.n	8007e4a <VL53L0X_get_pal_range_status+0x13a>
	...

08007f0c <VL53L0X_check_part_used>:
/* Functions Definition ------------------------------------------------------*/

VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007f10:	2102      	movs	r1, #2
{
 8007f12:	4606      	mov	r6, r0
 8007f14:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007f16:	f7fe ff1d 	bl	8006d54 <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	b940      	cbnz	r0, 8007f30 <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 8007f1e:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
 8007f22:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007f26:	b92b      	cbnz	r3, 8007f34 <VL53L0X_check_part_used+0x28>
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8007f28:	4905      	ldr	r1, [pc, #20]	; (8007f40 <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
 8007f2a:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007f2c:	f01b fd90 	bl	8023a50 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007f30:	4628      	mov	r0, r5
 8007f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8007f34:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
 8007f38:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007f3a:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
 8007f3e:	e7f5      	b.n	8007f2c <VL53L0X_check_part_used+0x20>
 8007f40:	08030466 	.word	0x08030466

08007f44 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f46:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007f48:	460a      	mov	r2, r1
 8007f4a:	f10d 0107 	add.w	r1, sp, #7
{
 8007f4e:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007f50:	f7ff ffdc 	bl	8007f0c <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 8007f54:	bb00      	cbnz	r0, 8007f98 <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
 8007f56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007f5a:	b9fb      	cbnz	r3, 8007f9c <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007f5c:	4915      	ldr	r1, [pc, #84]	; (8007fb4 <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f01b fd76 	bl	8023a50 <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8007f64:	4914      	ldr	r1, [pc, #80]	; (8007fb8 <VL53L0X_get_device_info+0x74>)
 8007f66:	f104 0020 	add.w	r0, r4, #32
 8007f6a:	f01b fd71 	bl	8023a50 <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007f6e:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8007f72:	21c0      	movs	r1, #192	; 0xc0
 8007f74:	4628      	mov	r0, r5
 8007f76:	f7fc fb40 	bl	80045fa <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f7a:	b968      	cbnz	r0, 8007f98 <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
 8007f7c:	f10d 0206 	add.w	r2, sp, #6
 8007f80:	21c2      	movs	r1, #194	; 0xc2
 8007f82:	4628      	mov	r0, r5
 8007f84:	f7fc fb39 	bl	80045fa <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 8007f8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007f92:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8007f94:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 8007f98:	b003      	add	sp, #12
 8007f9a:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 8007f9c:	2b22      	cmp	r3, #34	; 0x22
 8007f9e:	d803      	bhi.n	8007fa8 <VL53L0X_get_device_info+0x64>
 8007fa0:	2b20      	cmp	r3, #32
 8007fa2:	d003      	beq.n	8007fac <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007fa4:	4905      	ldr	r1, [pc, #20]	; (8007fbc <VL53L0X_get_device_info+0x78>)
 8007fa6:	e7da      	b.n	8007f5e <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 8007fa8:	2b26      	cmp	r3, #38	; 0x26
 8007faa:	d801      	bhi.n	8007fb0 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007fac:	4904      	ldr	r1, [pc, #16]	; (8007fc0 <VL53L0X_get_device_info+0x7c>)
 8007fae:	e7d6      	b.n	8007f5e <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007fb0:	4904      	ldr	r1, [pc, #16]	; (8007fc4 <VL53L0X_get_device_info+0x80>)
 8007fb2:	e7d4      	b.n	8007f5e <VL53L0X_get_device_info+0x1a>
 8007fb4:	0802f814 	.word	0x0802f814
 8007fb8:	0802f84d 	.word	0x0802f84d
 8007fbc:	0802f820 	.word	0x0802f820
 8007fc0:	0802f82c 	.word	0x0802f82c
 8007fc4:	0802f838 	.word	0x0802f838

08007fc8 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8007fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8007fca:	7803      	ldrb	r3, [r0, #0]
 8007fcc:	2b2d      	cmp	r3, #45	; 0x2d
 8007fce:	d115      	bne.n	8007ffc <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8007fd0:	3001      	adds	r0, #1
        minus = 1;
 8007fd2:	2501      	movs	r5, #1
 8007fd4:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007fda:	270a      	movs	r7, #10
 8007fdc:	e003      	b.n	8007fe6 <ParseNumber+0x1e>
        ptr++;
        i++;
 8007fde:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007fe0:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8007fe4:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8007fe6:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007fea:	3c30      	subs	r4, #48	; 0x30
 8007fec:	b2e6      	uxtb	r6, r4
 8007fee:	2e09      	cmp	r6, #9
 8007ff0:	d9f5      	bls.n	8007fde <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8007ff2:	b101      	cbz	r1, 8007ff6 <ParseNumber+0x2e>
        *cnt = i;
 8007ff4:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8007ff6:	b105      	cbz	r5, 8007ffa <ParseNumber+0x32>
        return 0 - sum;
 8007ff8:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8007ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	e7e9      	b.n	8007fd4 <ParseNumber+0xc>

08008000 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8008000:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8008002:	2600      	movs	r6, #0

  while(* ptr) {
 8008004:	7803      	ldrb	r3, [r0, #0]
 8008006:	b903      	cbnz	r3, 800800a <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8008008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 800800a:	2b3a      	cmp	r3, #58	; 0x3a
 800800c:	d128      	bne.n	8008060 <ParseMAC+0x60>
    hexcnt = 1;
 800800e:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 8008012:	4460      	add	r0, ip
 8008014:	e7f6      	b.n	8008004 <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8008016:	2a09      	cmp	r2, #9
        sum <<= 4;
 8008018:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800801c:	d905      	bls.n	800802a <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800801e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008022:	2a05      	cmp	r2, #5
 8008024:	d814      	bhi.n	8008050 <ParseMAC+0x50>
        return (a - 'a') + 10;
 8008026:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 8008028:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 800802a:	4414      	add	r4, r2
        i++;
 800802c:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800802e:	5d43      	ldrb	r3, [r0, r5]
 8008030:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008034:	b2d2      	uxtb	r2, r2
 8008036:	2a09      	cmp	r2, #9
 8008038:	fa5f fc85 	uxtb.w	ip, r5
 800803c:	d9eb      	bls.n	8008016 <ParseMAC+0x16>
 800803e:	f023 0720 	bic.w	r7, r3, #32
 8008042:	3f41      	subs	r7, #65	; 0x41
 8008044:	2f05      	cmp	r7, #5
 8008046:	d9e6      	bls.n	8008016 <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8008048:	1c73      	adds	r3, r6, #1
 800804a:	558c      	strb	r4, [r1, r6]
 800804c:	b2de      	uxtb	r6, r3
 800804e:	e7e0      	b.n	8008012 <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8008050:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008054:	2a05      	cmp	r2, #5
 8008056:	d801      	bhi.n	800805c <ParseMAC+0x5c>
        return (a - 'A') + 10;
 8008058:	3b37      	subs	r3, #55	; 0x37
 800805a:	e7e5      	b.n	8008028 <ParseMAC+0x28>
    return 0;
 800805c:	2200      	movs	r2, #0
 800805e:	e7e4      	b.n	800802a <ParseMAC+0x2a>
 8008060:	2500      	movs	r5, #0
    uint32_t sum = 0;
 8008062:	462c      	mov	r4, r5
 8008064:	e7e3      	b.n	800802e <ParseMAC+0x2e>

08008066 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8008066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008068:	4604      	mov	r4, r0
 800806a:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 800806c:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 800806e:	2701      	movs	r7, #1
  while(* ptr) {
 8008070:	7823      	ldrb	r3, [r4, #0]
 8008072:	b90b      	cbnz	r3, 8008078 <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8008074:	b003      	add	sp, #12
 8008076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 8008078:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 800807a:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 800807e:	d007      	beq.n	8008090 <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8008080:	f10d 0107 	add.w	r1, sp, #7
 8008084:	4620      	mov	r0, r4
 8008086:	f7ff ff9f 	bl	8007fc8 <ParseNumber>
 800808a:	1c6b      	adds	r3, r5, #1
 800808c:	5570      	strb	r0, [r6, r5]
 800808e:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 8008090:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008094:	441c      	add	r4, r3
 8008096:	e7eb      	b.n	8008070 <ParseIP+0xa>

08008098 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800809c:	4608      	mov	r0, r1
{
 800809e:	460e      	mov	r6, r1
 80080a0:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 80080a2:	f7f8 f89f 	bl	80001e4 <strlen>
 80080a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80080aa:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80080ae:	b281      	uxth	r1, r0
 80080b0:	4630      	mov	r0, r6
 80080b2:	4798      	blx	r3

  if( ret > 0)
 80080b4:	2800      	cmp	r0, #0
 80080b6:	dd21      	ble.n	80080fc <AT_ExecuteCommand+0x64>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80080b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80080bc:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80080c0:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80080c4:	4628      	mov	r0, r5
 80080c6:	4798      	blx	r3
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 80080c8:	1e43      	subs	r3, r0, #1
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f240 5276 	movw	r2, #1398	; 0x576
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d80d      	bhi.n	80080f0 <AT_ExecuteCommand+0x58>
    {
      *(pdata + recv_len) = 0;
 80080d4:	2400      	movs	r4, #0
 80080d6:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80080d8:	4909      	ldr	r1, [pc, #36]	; (8008100 <AT_ExecuteCommand+0x68>)
 80080da:	4628      	mov	r0, r5
 80080dc:	f01b fce5 	bl	8023aaa <strstr>
 80080e0:	b950      	cbnz	r0, 80080f8 <AT_ExecuteCommand+0x60>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80080e2:	4908      	ldr	r1, [pc, #32]	; (8008104 <AT_ExecuteCommand+0x6c>)
 80080e4:	4628      	mov	r0, r5
 80080e6:	f01b fce0 	bl	8023aaa <strstr>
 80080ea:	b138      	cbz	r0, 80080fc <AT_ExecuteCommand+0x64>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80080ec:	2005      	movs	r0, #5
 80080ee:	e002      	b.n	80080f6 <AT_ExecuteCommand+0x5e>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 80080f0:	3004      	adds	r0, #4
 80080f2:	d103      	bne.n	80080fc <AT_ExecuteCommand+0x64>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80080f4:	2006      	movs	r0, #6
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
}
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 80080f8:	4620      	mov	r0, r4
 80080fa:	e7fc      	b.n	80080f6 <AT_ExecuteCommand+0x5e>
  return ES_WIFI_STATUS_IO_ERROR;
 80080fc:	2004      	movs	r0, #4
 80080fe:	e7fa      	b.n	80080f6 <AT_ExecuteCommand+0x5e>
 8008100:	0802fc4b 	.word	0x0802fc4b
 8008104:	0802fc54 	.word	0x0802fc54

08008108 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8008108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800810c:	4680      	mov	r8, r0
  int len;
  uint8_t *p=Obj->CmdData;
  
  LOCK_WIFI();  
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800810e:	4608      	mov	r0, r1
{
 8008110:	4689      	mov	r9, r1
 8008112:	4615      	mov	r5, r2
 8008114:	461f      	mov	r7, r3
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8008116:	f7f8 f865 	bl	80001e4 <strlen>
 800811a:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
 800811e:	f8d8 26a0 	ldr.w	r2, [r8, #1696]	; 0x6a0
{
 8008122:	9e08      	ldr	r6, [sp, #32]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8008124:	b281      	uxth	r1, r0
 8008126:	4648      	mov	r0, r9
 8008128:	4798      	blx	r3
 800812a:	2800      	cmp	r0, #0
 800812c:	dc02      	bgt.n	8008134 <AT_RequestReceiveData+0x2c>
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800812e:	2004      	movs	r0, #4
}
 8008130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8008134:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 8008138:	f8d8 26a0 	ldr.w	r2, [r8, #1696]	; 0x6a0
 800813c:	2100      	movs	r1, #0
 800813e:	f508 7094 	add.w	r0, r8, #296	; 0x128
 8008142:	4798      	blx	r3
    if ((p[0]!='\r') || (p[1]!='\n'))
 8008144:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 8008148:	2b0d      	cmp	r3, #13
 800814a:	d1f0      	bne.n	800812e <AT_RequestReceiveData+0x26>
 800814c:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8008150:	2b0a      	cmp	r3, #10
 8008152:	d1ec      	bne.n	800812e <AT_RequestReceiveData+0x26>
    len-=2;
 8008154:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 8008156:	2907      	cmp	r1, #7
 8008158:	d9e9      	bls.n	800812e <AT_RequestReceiveData+0x26>
    p+=2;
 800815a:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len-1]==0x15)) len--;
 800815e:	f208 1829 	addw	r8, r8, #297	; 0x129
 8008162:	b119      	cbz	r1, 800816c <AT_RequestReceiveData+0x64>
 8008164:	f818 3001 	ldrb.w	r3, [r8, r1]
 8008168:	2b15      	cmp	r3, #21
 800816a:	d017      	beq.n	800819c <AT_RequestReceiveData+0x94>
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800816c:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 8008170:	f04f 0800 	mov.w	r8, #0
 8008174:	f809 8001 	strb.w	r8, [r9, r1]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8008178:	eb09 0004 	add.w	r0, r9, r4
 800817c:	490a      	ldr	r1, [pc, #40]	; (80081a8 <AT_RequestReceiveData+0xa0>)
 800817e:	f01b fc94 	bl	8023aaa <strstr>
 8008182:	b168      	cbz	r0, 80081a0 <AT_RequestReceiveData+0x98>
	   if (*ReadData > Reqlen)
 8008184:	b2a4      	uxth	r4, r4
 8008186:	42bc      	cmp	r4, r7
 8008188:	4622      	mov	r2, r4
 800818a:	bf28      	it	cs
 800818c:	463a      	movcs	r2, r7
 800818e:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 8008190:	4649      	mov	r1, r9
 8008192:	4628      	mov	r0, r5
 8008194:	f01a f974 	bl	8022480 <memcpy>
       return ES_WIFI_STATUS_OK;
 8008198:	4640      	mov	r0, r8
 800819a:	e7c9      	b.n	8008130 <AT_RequestReceiveData+0x28>
     while(len && (p[len-1]==0x15)) len--;
 800819c:	3901      	subs	r1, #1
 800819e:	e7e0      	b.n	8008162 <AT_RequestReceiveData+0x5a>
       *ReadData = 0;
 80081a0:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80081a2:	2005      	movs	r0, #5
 80081a4:	e7c4      	b.n	8008130 <AT_RequestReceiveData+0x28>
 80081a6:	bf00      	nop
 80081a8:	0802fc4b 	.word	0x0802fc4b

080081ac <AT_RequestSendData>:
{
 80081ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	4605      	mov	r5, r0
  cmd_len = strlen((char*)cmd);
 80081b2:	4608      	mov	r0, r1
{
 80081b4:	4688      	mov	r8, r1
 80081b6:	4691      	mov	r9, r2
 80081b8:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 80081ba:	f7f8 f813 	bl	80001e4 <strlen>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80081be:	f010 0401 	ands.w	r4, r0, #1
{
 80081c2:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 80081c4:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80081c8:	d126      	bne.n	8008218 <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80081ca:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80081ce:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 80081d2:	4651      	mov	r1, sl
 80081d4:	4640      	mov	r0, r8
 80081d6:	4798      	blx	r3
  if (n == cmd_len)
 80081d8:	b280      	uxth	r0, r0
 80081da:	4582      	cmp	sl, r0
 80081dc:	d123      	bne.n	8008226 <AT_RequestSendData+0x7a>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80081de:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80081e2:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 80081e6:	4639      	mov	r1, r7
 80081e8:	4648      	mov	r0, r9
 80081ea:	4798      	blx	r3
    if (send_len == len)
 80081ec:	42b8      	cmp	r0, r7
 80081ee:	d113      	bne.n	8008218 <AT_RequestSendData+0x6c>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80081f0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80081f4:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 80081f8:	4621      	mov	r1, r4
 80081fa:	4630      	mov	r0, r6
 80081fc:	4798      	blx	r3
      if (recv_len > 0)
 80081fe:	2800      	cmp	r0, #0
 8008200:	dd0d      	ble.n	800821e <AT_RequestSendData+0x72>
        *(pdata+recv_len) = 0;
 8008202:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8008204:	490b      	ldr	r1, [pc, #44]	; (8008234 <AT_RequestSendData+0x88>)
 8008206:	4630      	mov	r0, r6
 8008208:	f01b fc4f 	bl	8023aaa <strstr>
 800820c:	b968      	cbnz	r0, 800822a <AT_RequestSendData+0x7e>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800820e:	490a      	ldr	r1, [pc, #40]	; (8008238 <AT_RequestSendData+0x8c>)
 8008210:	4630      	mov	r0, r6
 8008212:	f01b fc4a 	bl	8023aaa <strstr>
 8008216:	b950      	cbnz	r0, 800822e <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_ERROR;
 8008218:	2002      	movs	r0, #2
}
 800821a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800821e:	3004      	adds	r0, #4
 8008220:	d1fa      	bne.n	8008218 <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 8008222:	2006      	movs	r0, #6
 8008224:	e7f9      	b.n	800821a <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 8008226:	2004      	movs	r0, #4
 8008228:	e7f7      	b.n	800821a <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 800822a:	4620      	mov	r0, r4
 800822c:	e7f5      	b.n	800821a <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800822e:	2005      	movs	r0, #5
 8008230:	e7f3      	b.n	800821a <AT_RequestSendData+0x6e>
 8008232:	bf00      	nop
 8008234:	0802fc4b 	.word	0x0802fc4b
 8008238:	0802fc54 	.word	0x0802fc54

0800823c <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8008240:	f247 5330 	movw	r3, #30000	; 0x7530
 8008244:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0
{
 8008248:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800824a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800824e:	2000      	movs	r0, #0
 8008250:	4798      	blx	r3
 8008252:	2800      	cmp	r0, #0
 8008254:	d14b      	bne.n	80082ee <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8008256:	4927      	ldr	r1, [pc, #156]	; (80082f4 <ES_WIFI_Init+0xb8>)
 8008258:	f504 7294 	add.w	r2, r4, #296	; 0x128
 800825c:	4620      	mov	r0, r4
 800825e:	f7ff ff1b 	bl	8008098 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8008262:	4605      	mov	r5, r0
 8008264:	b960      	cbnz	r0, 8008280 <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 8008266:	4924      	ldr	r1, [pc, #144]	; (80082f8 <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 8008268:	4f24      	ldr	r7, [pc, #144]	; (80082fc <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 800826a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80082f8 <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 800826e:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8008272:	f01c fa63 	bl	802473c <strtok>
  while (ptr != NULL){
 8008276:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8008278:	f104 0868 	add.w	r8, r4, #104	; 0x68
 800827c:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 800827e:	b910      	cbnz	r0, 8008286 <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8008280:	4628      	mov	r0, r5
 8008282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8008286:	2b06      	cmp	r3, #6
 8008288:	d824      	bhi.n	80082d4 <ES_WIFI_Init+0x98>
 800828a:	e8df f003 	tbb	[pc, r3]
 800828e:	0a04      	.short	0x0a04
 8008290:	1e19140f 	.word	0x1e19140f
 8008294:	29          	.byte	0x29
 8008295:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8008296:	4601      	mov	r1, r0
 8008298:	2220      	movs	r2, #32
 800829a:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800829c:	f01b fbf2 	bl	8023a84 <strncpy>
      break;
 80082a0:	e018      	b.n	80082d4 <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80082a2:	4601      	mov	r1, r0
 80082a4:	2218      	movs	r2, #24
 80082a6:	f104 0020 	add.w	r0, r4, #32
 80082aa:	e7f7      	b.n	800829c <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80082ac:	4601      	mov	r1, r0
 80082ae:	2210      	movs	r2, #16
 80082b0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80082b4:	e7f2      	b.n	800829c <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80082b6:	4601      	mov	r1, r0
 80082b8:	2210      	movs	r2, #16
 80082ba:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80082be:	e7ed      	b.n	800829c <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80082c0:	4601      	mov	r1, r0
 80082c2:	2210      	movs	r2, #16
 80082c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082c8:	e7e8      	b.n	800829c <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80082ca:	2100      	movs	r1, #0
 80082cc:	f7ff fe7c 	bl	8007fc8 <ParseNumber>
 80082d0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 80082d4:	4649      	mov	r1, r9
 80082d6:	2000      	movs	r0, #0
 80082d8:	f01c fa30 	bl	802473c <strtok>
 80082dc:	3601      	adds	r6, #1
 80082de:	e7cd      	b.n	800827c <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 80082e0:	4639      	mov	r1, r7
 80082e2:	f01c fa2b 	bl	802473c <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80082e6:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r");
 80082e8:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80082ea:	4640      	mov	r0, r8
 80082ec:	e7d6      	b.n	800829c <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80082ee:	2502      	movs	r5, #2
 80082f0:	e7c6      	b.n	8008280 <ES_WIFI_Init+0x44>
 80082f2:	bf00      	nop
 80082f4:	0802fc5c 	.word	0x0802fc5c
 80082f8:	08030a77 	.word	0x08030a77
 80082fc:	080305b9 	.word	0x080305b9

08008300 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8008300:	b530      	push	{r4, r5, lr}
 8008302:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8008306:	b158      	cbz	r0, 8008320 <ES_WIFI_RegisterBusIO+0x20>
 8008308:	b151      	cbz	r1, 8008320 <ES_WIFI_RegisterBusIO+0x20>
 800830a:	b14a      	cbz	r2, 8008320 <ES_WIFI_RegisterBusIO+0x20>
 800830c:	b145      	cbz	r5, 8008320 <ES_WIFI_RegisterBusIO+0x20>
 800830e:	b13c      	cbz	r4, 8008320 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 8008310:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8008314:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8008318:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800831c:	2000      	movs	r0, #0
}
 800831e:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8008320:	2002      	movs	r0, #2
 8008322:	e7fc      	b.n	800831e <ES_WIFI_RegisterBusIO+0x1e>

08008324 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8008326:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 800832a:	4605      	mov	r5, r0
 800832c:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800832e:	4620      	mov	r0, r4
 8008330:	460a      	mov	r2, r1
 8008332:	4918      	ldr	r1, [pc, #96]	; (8008394 <ES_WIFI_Connect+0x70>)
{
 8008334:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8008336:	f01b faed 	bl	8023914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800833a:	4622      	mov	r2, r4
 800833c:	4621      	mov	r1, r4
 800833e:	4628      	mov	r0, r5
 8008340:	f7ff feaa 	bl	8008098 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008344:	bb20      	cbnz	r0, 8008390 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8008346:	4914      	ldr	r1, [pc, #80]	; (8008398 <ES_WIFI_Connect+0x74>)
 8008348:	463a      	mov	r2, r7
 800834a:	4620      	mov	r0, r4
 800834c:	f01b fae2 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008350:	4622      	mov	r2, r4
 8008352:	4621      	mov	r1, r4
 8008354:	4628      	mov	r0, r5
 8008356:	f7ff fe9f 	bl	8008098 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 800835a:	b9c8      	cbnz	r0, 8008390 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800835c:	490f      	ldr	r1, [pc, #60]	; (800839c <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 800835e:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8008362:	4632      	mov	r2, r6
 8008364:	4620      	mov	r0, r4
 8008366:	f01b fad5 	bl	8023914 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800836a:	4622      	mov	r2, r4
 800836c:	4621      	mov	r1, r4
 800836e:	4628      	mov	r0, r5
 8008370:	f7ff fe92 	bl	8008098 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 8008374:	b960      	cbnz	r0, 8008390 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8008376:	490a      	ldr	r1, [pc, #40]	; (80083a0 <ES_WIFI_Connect+0x7c>)
 8008378:	4620      	mov	r0, r4
 800837a:	f01b fb69 	bl	8023a50 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800837e:	4622      	mov	r2, r4
 8008380:	4621      	mov	r1, r4
 8008382:	4628      	mov	r0, r5
 8008384:	f7ff fe88 	bl	8008098 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8008388:	b910      	cbnz	r0, 8008390 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 800838a:	2301      	movs	r3, #1
 800838c:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8008390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008392:	bf00      	nop
 8008394:	0802fc85 	.word	0x0802fc85
 8008398:	0802fc8c 	.word	0x0802fc8c
 800839c:	0802fc93 	.word	0x0802fc93
 80083a0:	0802fc9a 	.word	0x0802fc9a

080083a4 <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"CS\r");
 80083a4:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80083a8:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 80083aa:	490b      	ldr	r1, [pc, #44]	; (80083d8 <ES_WIFI_IsConnected+0x34>)
{
 80083ac:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 80083ae:	4610      	mov	r0, r2
 80083b0:	f01b fb4e 	bl	8023a50 <strcpy>
 80083b4:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083b6:	4601      	mov	r1, r0
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7ff fe6d 	bl	8008098 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80083be:	b938      	cbnz	r0, 80083d0 <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80083c0:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 80083c4:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80083c8:	4253      	negs	r3, r2
 80083ca:	4153      	adcs	r3, r2
 80083cc:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 80083d0:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 80083d4:	bd10      	pop	{r4, pc}
 80083d6:	bf00      	nop
 80083d8:	0802fc9e 	.word	0x0802fc9e

080083dc <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 80083dc:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 80083e4:	4935      	ldr	r1, [pc, #212]	; (80084bc <ES_WIFI_GetNetworkSettings+0xe0>)
{
 80083e6:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 80083e8:	4610      	mov	r0, r2
 80083ea:	f01b fb31 	bl	8023a50 <strcpy>
 80083ee:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083f0:	4601      	mov	r1, r0
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7ff fe50 	bl	8008098 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 80083f8:	4606      	mov	r6, r0
 80083fa:	b960      	cbnz	r0, 8008416 <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 80083fc:	4930      	ldr	r1, [pc, #192]	; (80084c0 <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 80083fe:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80084c0 <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 8008402:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8008406:	f01c f999 	bl	802473c <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800840a:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 800840e:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 8008410:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8008414:	b910      	cbnz	r0, 800841c <ES_WIFI_GetNetworkSettings+0x40>
  }
  
  UNLOCK_WIFI();
  return ret;
}
 8008416:	4630      	mov	r0, r6
 8008418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 800841c:	2d0b      	cmp	r5, #11
 800841e:	d80c      	bhi.n	800843a <ES_WIFI_GetNetworkSettings+0x5e>
 8008420:	e8df f005 	tbb	[pc, r5]
 8008424:	241e1906 	.word	0x241e1906
 8008428:	3835302a 	.word	0x3835302a
 800842c:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8008430:	4601      	mov	r1, r0
 8008432:	2221      	movs	r2, #33	; 0x21
 8008434:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8008436:	f01b fb25 	bl	8023a84 <strncpy>
    ptr = strtok(NULL, ",");
 800843a:	4649      	mov	r1, r9
 800843c:	2000      	movs	r0, #0
 800843e:	f01c f97d 	bl	802473c <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008442:	2800      	cmp	r0, #0
 8008444:	d0e7      	beq.n	8008416 <ES_WIFI_GetNetworkSettings+0x3a>
 8008446:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800844a:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 800844c:	bf14      	ite	ne
 800844e:	3501      	addne	r5, #1
      num++;
 8008450:	3502      	addeq	r5, #2
 8008452:	b2ed      	uxtb	r5, r5
 8008454:	e7de      	b.n	8008414 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8008456:	4601      	mov	r1, r0
 8008458:	2221      	movs	r2, #33	; 0x21
 800845a:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 800845e:	e7ea      	b.n	8008436 <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8008460:	2100      	movs	r1, #0
 8008462:	f7ff fdb1 	bl	8007fc8 <ParseNumber>
 8008466:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 800846a:	e7e6      	b.n	800843a <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800846c:	2100      	movs	r1, #0
 800846e:	f7ff fdab 	bl	8007fc8 <ParseNumber>
 8008472:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 8008476:	e7e0      	b.n	800843a <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8008478:	2100      	movs	r1, #0
 800847a:	f7ff fda5 	bl	8007fc8 <ParseNumber>
 800847e:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 8008482:	e7da      	b.n	800843a <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 8008484:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 8008488:	f7ff fded 	bl	8008066 <ParseIP>
      break;
 800848c:	e7d5      	b.n	800843a <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Mask);
 800848e:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8008492:	e7f9      	b.n	8008488 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8008494:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8008498:	e7f6      	b.n	8008488 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 800849a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 800849e:	e7f3      	b.n	8008488 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 80084a0:	4641      	mov	r1, r8
 80084a2:	e7f1      	b.n	8008488 <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80084a4:	2100      	movs	r1, #0
 80084a6:	f7ff fd8f 	bl	8007fc8 <ParseNumber>
 80084aa:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 80084ae:	e7c4      	b.n	800843a <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80084b0:	2100      	movs	r1, #0
 80084b2:	f7ff fd89 	bl	8007fc8 <ParseNumber>
 80084b6:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 80084ba:	e7be      	b.n	800843a <ES_WIFI_GetNetworkSettings+0x5e>
 80084bc:	0802fca6 	.word	0x0802fca6
 80084c0:	08030a77 	.word	0x08030a77

080084c4 <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"Z5\r");
 80084c4:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4604      	mov	r4, r0
 80084cc:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 80084ce:	4610      	mov	r0, r2
 80084d0:	4909      	ldr	r1, [pc, #36]	; (80084f8 <ES_WIFI_GetMACAddress+0x34>)
 80084d2:	f01b fabd 	bl	8023a50 <strcpy>
 80084d6:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084d8:	4601      	mov	r1, r0
 80084da:	4620      	mov	r0, r4
 80084dc:	f7ff fddc 	bl	8008098 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80084e0:	4605      	mov	r5, r0
 80084e2:	b938      	cbnz	r0, 80084f4 <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80084e4:	4905      	ldr	r1, [pc, #20]	; (80084fc <ES_WIFI_GetMACAddress+0x38>)
 80084e6:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80084ea:	f01c f927 	bl	802473c <strtok>
    ParseMAC(ptr, mac) ;
 80084ee:	4631      	mov	r1, r6
 80084f0:	f7ff fd86 	bl	8008000 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 80084f4:	4628      	mov	r0, r5
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	0802fceb 	.word	0x0802fceb
 80084fc:	0802ff06 	.word	0x0802ff06

08008500 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8008500:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8008502:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8008506:	4604      	mov	r4, r0
 8008508:	4616      	mov	r6, r2
  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 800850a:	4628      	mov	r0, r5
 800850c:	460a      	mov	r2, r1
 800850e:	490a      	ldr	r1, [pc, #40]	; (8008538 <ES_WIFI_DNS_LookUp+0x38>)
 8008510:	f01b fa00 	bl	8023914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008514:	462a      	mov	r2, r5
 8008516:	4629      	mov	r1, r5
 8008518:	4620      	mov	r0, r4
 800851a:	f7ff fdbd 	bl	8008098 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 800851e:	4605      	mov	r5, r0
 8008520:	b938      	cbnz	r0, 8008532 <ES_WIFI_DNS_LookUp+0x32>
  {
    ptr = strtok((char *)Obj->CmdData + 2, "\r");
 8008522:	4906      	ldr	r1, [pc, #24]	; (800853c <ES_WIFI_DNS_LookUp+0x3c>)
 8008524:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8008528:	f01c f908 	bl	802473c <strtok>
    ParseIP(ptr, ipaddress);
 800852c:	4631      	mov	r1, r6
 800852e:	f7ff fd9a 	bl	8008066 <ParseIP>
  }
  UNLOCK_WIFI();
  return ret;
}
 8008532:	4628      	mov	r0, r5
 8008534:	bd70      	pop	{r4, r5, r6, pc}
 8008536:	bf00      	nop
 8008538:	0802fd3f 	.word	0x0802fd3f
 800853c:	080305b9 	.word	0x080305b9

08008540 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008540:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008542:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8008546:	784a      	ldrb	r2, [r1, #1]
{
 8008548:	4605      	mov	r5, r0
 800854a:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800854c:	4620      	mov	r0, r4
 800854e:	4927      	ldr	r1, [pc, #156]	; (80085ec <ES_WIFI_StartClientConnection+0xac>)
 8008550:	f01b f9e0 	bl	8023914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008554:	4622      	mov	r2, r4
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f7ff fd9d 	bl	8008098 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 800855e:	2800      	cmp	r0, #0
 8008560:	d142      	bne.n	80085e8 <ES_WIFI_StartClientConnection+0xa8>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8008562:	7832      	ldrb	r2, [r6, #0]
 8008564:	4922      	ldr	r1, [pc, #136]	; (80085f0 <ES_WIFI_StartClientConnection+0xb0>)
 8008566:	4620      	mov	r0, r4
 8008568:	f01b f9d4 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800856c:	4622      	mov	r2, r4
 800856e:	4621      	mov	r1, r4
 8008570:	4628      	mov	r0, r5
 8008572:	f7ff fd91 	bl	8008098 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 8008576:	2800      	cmp	r0, #0
 8008578:	d136      	bne.n	80085e8 <ES_WIFI_StartClientConnection+0xa8>
 800857a:	88b2      	ldrh	r2, [r6, #4]
 800857c:	bb4a      	cbnz	r2, 80085d2 <ES_WIFI_StartClientConnection+0x92>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 800857e:	8872      	ldrh	r2, [r6, #2]
 8008580:	b14a      	cbz	r2, 8008596 <ES_WIFI_StartClientConnection+0x56>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8008582:	491c      	ldr	r1, [pc, #112]	; (80085f4 <ES_WIFI_StartClientConnection+0xb4>)
 8008584:	4620      	mov	r0, r4
 8008586:	f01b f9c5 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800858a:	4622      	mov	r2, r4
 800858c:	4621      	mov	r1, r4
 800858e:	4628      	mov	r0, r5
 8008590:	f7ff fd82 	bl	8008098 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
 8008594:	bb40      	cbnz	r0, 80085e8 <ES_WIFI_StartClientConnection+0xa8>
 8008596:	7833      	ldrb	r3, [r6, #0]
 8008598:	b97b      	cbnz	r3, 80085ba <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800859a:	7a73      	ldrb	r3, [r6, #9]
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	7a33      	ldrb	r3, [r6, #8]
 80085a0:	79b2      	ldrb	r2, [r6, #6]
 80085a2:	4915      	ldr	r1, [pc, #84]	; (80085f8 <ES_WIFI_StartClientConnection+0xb8>)
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	4620      	mov	r0, r4
 80085a8:	79f3      	ldrb	r3, [r6, #7]
 80085aa:	f01b f9b3 	bl	8023914 <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085ae:	4622      	mov	r2, r4
 80085b0:	4621      	mov	r1, r4
 80085b2:	4628      	mov	r0, r5
 80085b4:	f7ff fd70 	bl	8008098 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80085b8:	b9b0      	cbnz	r0, 80085e8 <ES_WIFI_StartClientConnection+0xa8>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80085ba:	4910      	ldr	r1, [pc, #64]	; (80085fc <ES_WIFI_StartClientConnection+0xbc>)
 80085bc:	4620      	mov	r0, r4
 80085be:	f01b fa47 	bl	8023a50 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085c2:	4622      	mov	r2, r4
 80085c4:	4621      	mov	r1, r4
 80085c6:	4628      	mov	r0, r5
  }
  
  UNLOCK_WIFI();
  return ret;
}
 80085c8:	b002      	add	sp, #8
 80085ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085ce:	f7ff bd63 	b.w	8008098 <AT_ExecuteCommand>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80085d2:	490b      	ldr	r1, [pc, #44]	; (8008600 <ES_WIFI_StartClientConnection+0xc0>)
 80085d4:	4620      	mov	r0, r4
 80085d6:	f01b f99d 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085da:	4622      	mov	r2, r4
 80085dc:	4621      	mov	r1, r4
 80085de:	4628      	mov	r0, r5
 80085e0:	f7ff fd5a 	bl	8008098 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d0ca      	beq.n	800857e <ES_WIFI_StartClientConnection+0x3e>
}
 80085e8:	b002      	add	sp, #8
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	0802fd46 	.word	0x0802fd46
 80085f0:	0802fd4d 	.word	0x0802fd4d
 80085f4:	0802fd5b 	.word	0x0802fd5b
 80085f8:	0802fd68 	.word	0x0802fd68
 80085fc:	0802fd62 	.word	0x0802fd62
 8008600:	0802fd54 	.word	0x0802fd54

08008604 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008604:	b538      	push	{r3, r4, r5, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008606:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800860a:	784a      	ldrb	r2, [r1, #1]
 800860c:	490b      	ldr	r1, [pc, #44]	; (800863c <ES_WIFI_StopClientConnection+0x38>)
{
 800860e:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008610:	4628      	mov	r0, r5
 8008612:	f01b f97f 	bl	8023914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008616:	462a      	mov	r2, r5
 8008618:	4629      	mov	r1, r5
 800861a:	4620      	mov	r0, r4
 800861c:	f7ff fd3c 	bl	8008098 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008620:	b950      	cbnz	r0, 8008638 <ES_WIFI_StopClientConnection+0x34>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8008622:	4907      	ldr	r1, [pc, #28]	; (8008640 <ES_WIFI_StopClientConnection+0x3c>)
 8008624:	4628      	mov	r0, r5
 8008626:	f01b fa13 	bl	8023a50 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800862a:	462a      	mov	r2, r5
 800862c:	4629      	mov	r1, r5
 800862e:	4620      	mov	r0, r4
  }
  UNLOCK_WIFI();
  return ret;
}
 8008630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008634:	f7ff bd30 	b.w	8008098 <AT_ExecuteCommand>
}
 8008638:	bd38      	pop	{r3, r4, r5, pc}
 800863a:	bf00      	nop
 800863c:	0802fd46 	.word	0x0802fd46
 8008640:	0802fd78 	.word	0x0802fd78

08008644 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8008644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008648:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800864c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8008650:	bf28      	it	cs
 8008652:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008656:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 800865a:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 800865c:	f8a8 3000 	strh.w	r3, [r8]
{
 8008660:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008662:	4628      	mov	r0, r5
 8008664:	460a      	mov	r2, r1
 8008666:	492c      	ldr	r1, [pc, #176]	; (8008718 <ES_WIFI_SendData+0xd4>)
 8008668:	461f      	mov	r7, r3
 800866a:	f01b f953 	bl	8023914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800866e:	462a      	mov	r2, r5
 8008670:	4629      	mov	r1, r5
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff fd10 	bl	8008098 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008678:	4604      	mov	r4, r0
 800867a:	2800      	cmp	r0, #0
 800867c:	d144      	bne.n	8008708 <ES_WIFI_SendData+0xc4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 800867e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008680:	4926      	ldr	r1, [pc, #152]	; (800871c <ES_WIFI_SendData+0xd8>)
 8008682:	4628      	mov	r0, r5
 8008684:	f01b f946 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008688:	462a      	mov	r2, r5
 800868a:	4629      	mov	r1, r5
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff fd03 	bl	8008098 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8008692:	4604      	mov	r4, r0
 8008694:	bb80      	cbnz	r0, 80086f8 <ES_WIFI_SendData+0xb4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8008696:	4922      	ldr	r1, [pc, #136]	; (8008720 <ES_WIFI_SendData+0xdc>)
 8008698:	463a      	mov	r2, r7
 800869a:	4628      	mov	r0, r5
 800869c:	f01b f93a 	bl	8023914 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80086a0:	9500      	str	r5, [sp, #0]
 80086a2:	463b      	mov	r3, r7
 80086a4:	464a      	mov	r2, r9
 80086a6:	4629      	mov	r1, r5
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff fd7f 	bl	80081ac <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 80086ae:	4604      	mov	r4, r0
 80086b0:	b998      	cbnz	r0, 80086da <ES_WIFI_SendData+0x96>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80086b2:	491c      	ldr	r1, [pc, #112]	; (8008724 <ES_WIFI_SendData+0xe0>)
 80086b4:	4628      	mov	r0, r5
 80086b6:	f01b f9f8 	bl	8023aaa <strstr>
 80086ba:	b1c8      	cbz	r0, 80086f0 <ES_WIFI_SendData+0xac>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 80086bc:	491a      	ldr	r1, [pc, #104]	; (8008728 <ES_WIFI_SendData+0xe4>)
 80086be:	481b      	ldr	r0, [pc, #108]	; (800872c <ES_WIFI_SendData+0xe8>)
 80086c0:	f240 7279 	movw	r2, #1913	; 0x779
 80086c4:	f01b f808 	bl	80236d8 <iprintf>
 80086c8:	4819      	ldr	r0, [pc, #100]	; (8008730 <ES_WIFI_SendData+0xec>)
 80086ca:	4629      	mov	r1, r5
 80086cc:	f01b f804 	bl	80236d8 <iprintf>
   DEBUG("P0 command failed\n"); 
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	f8a8 3000 	strh.w	r3, [r8]
 80086d6:	2402      	movs	r4, #2
 80086d8:	e00a      	b.n	80086f0 <ES_WIFI_SendData+0xac>
        DEBUG("Send Data command failed\n");  
 80086da:	4913      	ldr	r1, [pc, #76]	; (8008728 <ES_WIFI_SendData+0xe4>)
 80086dc:	4813      	ldr	r0, [pc, #76]	; (800872c <ES_WIFI_SendData+0xe8>)
 80086de:	f240 727f 	movw	r2, #1919	; 0x77f
 80086e2:	f01a fff9 	bl	80236d8 <iprintf>
 80086e6:	4813      	ldr	r0, [pc, #76]	; (8008734 <ES_WIFI_SendData+0xf0>)
   DEBUG("P0 command failed\n"); 
 80086e8:	f01b f892 	bl	8023810 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 80086ec:	2c02      	cmp	r4, #2
 80086ee:	d0ef      	beq.n	80086d0 <ES_WIFI_SendData+0x8c>
  }
  UNLOCK_WIFI();
  return ret;
}
 80086f0:	4620      	mov	r0, r4
 80086f2:	b003      	add	sp, #12
 80086f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n"); 
 80086f8:	490b      	ldr	r1, [pc, #44]	; (8008728 <ES_WIFI_SendData+0xe4>)
 80086fa:	480c      	ldr	r0, [pc, #48]	; (800872c <ES_WIFI_SendData+0xe8>)
 80086fc:	f240 7284 	movw	r2, #1924	; 0x784
 8008700:	f01a ffea 	bl	80236d8 <iprintf>
 8008704:	480c      	ldr	r0, [pc, #48]	; (8008738 <ES_WIFI_SendData+0xf4>)
 8008706:	e7ef      	b.n	80086e8 <ES_WIFI_SendData+0xa4>
   DEBUG("P0 command failed\n"); 
 8008708:	4907      	ldr	r1, [pc, #28]	; (8008728 <ES_WIFI_SendData+0xe4>)
 800870a:	4808      	ldr	r0, [pc, #32]	; (800872c <ES_WIFI_SendData+0xe8>)
 800870c:	f240 7289 	movw	r2, #1929	; 0x789
 8008710:	f01a ffe2 	bl	80236d8 <iprintf>
 8008714:	4809      	ldr	r0, [pc, #36]	; (800873c <ES_WIFI_SendData+0xf8>)
 8008716:	e7e7      	b.n	80086e8 <ES_WIFI_SendData+0xa4>
 8008718:	0802fd46 	.word	0x0802fd46
 800871c:	0802fef3 	.word	0x0802fef3
 8008720:	0802fefb 	.word	0x0802fefb
 8008724:	0802ff04 	.word	0x0802ff04
 8008728:	0802fdb4 	.word	0x0802fdb4
 800872c:	0802fe04 	.word	0x0802fe04
 8008730:	0802ff09 	.word	0x0802ff09
 8008734:	0802ff24 	.word	0x0802ff24
 8008738:	0802ff3d 	.word	0x0802ff3d
 800873c:	0802ff4f 	.word	0x0802ff4f

08008740 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 8008740:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008744:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8008748:	4606      	mov	r6, r0
 800874a:	4692      	mov	sl, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800874c:	4628      	mov	r0, r5
 800874e:	460a      	mov	r2, r1
 8008750:	493f      	ldr	r1, [pc, #252]	; (8008850 <ES_WIFI_SendDataTo+0x110>)
{
 8008752:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8008756:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800875a:	461f      	mov	r7, r3
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800875c:	f01b f8da 	bl	8023914 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008760:	462a      	mov	r2, r5
 8008762:	4629      	mov	r1, r5
 8008764:	4630      	mov	r0, r6
 8008766:	f7ff fc97 	bl	8008098 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 800876a:	4604      	mov	r4, r0
 800876c:	2800      	cmp	r0, #0
 800876e:	d15a      	bne.n	8008826 <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 8008770:	4938      	ldr	r1, [pc, #224]	; (8008854 <ES_WIFI_SendDataTo+0x114>)
 8008772:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 8008776:	4628      	mov	r0, r5
 8008778:	f01b f8cc 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800877c:	462a      	mov	r2, r5
 800877e:	4629      	mov	r1, r5
 8008780:	4630      	mov	r0, r6
 8008782:	f7ff fc89 	bl	8008098 <AT_ExecuteCommand>
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 8008786:	4604      	mov	r4, r0
 8008788:	2800      	cmp	r0, #0
 800878a:	d14c      	bne.n	8008826 <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 800878c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8008790:	4931      	ldr	r1, [pc, #196]	; (8008858 <ES_WIFI_SendDataTo+0x118>)
 8008792:	4628      	mov	r0, r5
 8008794:	f01b f8be 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008798:	462a      	mov	r2, r5
 800879a:	4629      	mov	r1, r5
 800879c:	4630      	mov	r0, r6
 800879e:	f7ff fc7b 	bl	8008098 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80087a2:	4604      	mov	r4, r0
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d13e      	bne.n	8008826 <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 80087a8:	f899 3003 	ldrb.w	r3, [r9, #3]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	f899 3002 	ldrb.w	r3, [r9, #2]
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	f899 3001 	ldrb.w	r3, [r9, #1]
 80087b8:	f899 2000 	ldrb.w	r2, [r9]
 80087bc:	4927      	ldr	r1, [pc, #156]	; (800885c <ES_WIFI_SendDataTo+0x11c>)
 80087be:	4628      	mov	r0, r5
 80087c0:	f01b f8a8 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087c4:	462a      	mov	r2, r5
 80087c6:	4629      	mov	r1, r5
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff fc65 	bl	8008098 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80087ce:	4604      	mov	r4, r0
 80087d0:	bb48      	cbnz	r0, 8008826 <ES_WIFI_SendDataTo+0xe6>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 80087d2:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", Timeout);
 80087d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087d8:	4921      	ldr	r1, [pc, #132]	; (8008860 <ES_WIFI_SendDataTo+0x120>)
 80087da:	4628      	mov	r0, r5
 80087dc:	bf28      	it	cs
 80087de:	f44f 6796 	movcs.w	r7, #1200	; 0x4b0
 80087e2:	f01b f897 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087e6:	462a      	mov	r2, r5
 80087e8:	4629      	mov	r1, r5
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7ff fc54 	bl	8008098 <AT_ExecuteCommand>
  }

  if(ret == ES_WIFI_STATUS_OK)
 80087f0:	4604      	mov	r4, r0
 80087f2:	b9c0      	cbnz	r0, 8008826 <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 80087f4:	491b      	ldr	r1, [pc, #108]	; (8008864 <ES_WIFI_SendDataTo+0x124>)
 80087f6:	463a      	mov	r2, r7
 80087f8:	4628      	mov	r0, r5
 80087fa:	f01b f88b 	bl	8023914 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80087fe:	9500      	str	r5, [sp, #0]
 8008800:	463b      	mov	r3, r7
 8008802:	4652      	mov	r2, sl
 8008804:	4629      	mov	r1, r5
 8008806:	4630      	mov	r0, r6
 8008808:	f7ff fcd0 	bl	80081ac <AT_RequestSendData>
  }

  if(ret == ES_WIFI_STATUS_OK)
 800880c:	4604      	mov	r4, r0
 800880e:	b950      	cbnz	r0, 8008826 <ES_WIFI_SendDataTo+0xe6>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 8008810:	4915      	ldr	r1, [pc, #84]	; (8008868 <ES_WIFI_SendDataTo+0x128>)
 8008812:	4628      	mov	r0, r5
 8008814:	f01b f949 	bl	8023aaa <strstr>
    if(ptr != NULL)
 8008818:	b198      	cbz	r0, 8008842 <ES_WIFI_SendDataTo+0x102>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 800881a:	f506 64d4 	add.w	r4, r6, #1696	; 0x6a0
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 800881e:	42a0      	cmp	r0, r4
 8008820:	bf34      	ite	cc
 8008822:	2402      	movcc	r4, #2
 8008824:	2404      	movcs	r4, #4
  {
    *SentLen = Reqlen;
  }
  else
  {
    DEBUG("Send error:\n%s\n", Obj->CmdData);
 8008826:	4911      	ldr	r1, [pc, #68]	; (800886c <ES_WIFI_SendDataTo+0x12c>)
 8008828:	4811      	ldr	r0, [pc, #68]	; (8008870 <ES_WIFI_SendDataTo+0x130>)
 800882a:	f240 72d9 	movw	r2, #2009	; 0x7d9
 800882e:	f01a ff53 	bl	80236d8 <iprintf>
 8008832:	4810      	ldr	r0, [pc, #64]	; (8008874 <ES_WIFI_SendDataTo+0x134>)
 8008834:	4629      	mov	r1, r5
 8008836:	f01a ff4f 	bl	80236d8 <iprintf>
    *SentLen = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	f8a8 3000 	strh.w	r3, [r8]
 8008840:	e001      	b.n	8008846 <ES_WIFI_SendDataTo+0x106>
    *SentLen = Reqlen;
 8008842:	f8a8 7000 	strh.w	r7, [r8]
  }

  UNLOCK_WIFI();
  return ret;
}
 8008846:	4620      	mov	r0, r4
 8008848:	b002      	add	sp, #8
 800884a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884e:	bf00      	nop
 8008850:	0802fd46 	.word	0x0802fd46
 8008854:	0802fd54 	.word	0x0802fd54
 8008858:	0802fd5b 	.word	0x0802fd5b
 800885c:	0802fd68 	.word	0x0802fd68
 8008860:	0802fef3 	.word	0x0802fef3
 8008864:	0802fefb 	.word	0x0802fefb
 8008868:	0802ff04 	.word	0x0802ff04
 800886c:	0802fdb4 	.word	0x0802fdb4
 8008870:	0802fe04 	.word	0x0802fe04
 8008874:	0802ff61 	.word	0x0802ff61

08008878 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8008878:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();  

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800887c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8008880:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8008884:	4606      	mov	r6, r0
 8008886:	4690      	mov	r8, r2
 8008888:	461f      	mov	r7, r3
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800888a:	d864      	bhi.n	8008956 <ES_WIFI_ReceiveData+0xde>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800888c:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008890:	460a      	mov	r2, r1
 8008892:	4628      	mov	r0, r5
 8008894:	4931      	ldr	r1, [pc, #196]	; (800895c <ES_WIFI_ReceiveData+0xe4>)
 8008896:	f01b f83d 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800889a:	462a      	mov	r2, r5
 800889c:	4629      	mov	r1, r5
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff fbfa 	bl	8008098 <AT_ExecuteCommand>
 80088a4:	4604      	mov	r4, r0
 80088a6:	4682      	mov	sl, r0

    if(ret == ES_WIFI_STATUS_OK)
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d146      	bne.n	800893a <ES_WIFI_ReceiveData+0xc2>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80088ac:	492c      	ldr	r1, [pc, #176]	; (8008960 <ES_WIFI_ReceiveData+0xe8>)
 80088ae:	463a      	mov	r2, r7
 80088b0:	4628      	mov	r0, r5
 80088b2:	f01b f82f 	bl	8023914 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80088b6:	462a      	mov	r2, r5
 80088b8:	4629      	mov	r1, r5
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7ff fbec 	bl	8008098 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80088c0:	4604      	mov	r4, r0
 80088c2:	bb70      	cbnz	r0, 8008922 <ES_WIFI_ReceiveData+0xaa>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 80088c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088c6:	4927      	ldr	r1, [pc, #156]	; (8008964 <ES_WIFI_ReceiveData+0xec>)
 80088c8:	4628      	mov	r0, r5
 80088ca:	f01b f823 	bl	8023914 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80088ce:	462a      	mov	r2, r5
 80088d0:	4629      	mov	r1, r5
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7ff fbe0 	bl	8008098 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80088d8:	4604      	mov	r4, r0
 80088da:	b9d0      	cbnz	r0, 8008912 <ES_WIFI_ReceiveData+0x9a>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80088dc:	4922      	ldr	r1, [pc, #136]	; (8008968 <ES_WIFI_ReceiveData+0xf0>)
 80088de:	4628      	mov	r0, r5
 80088e0:	f01b f8b6 	bl	8023a50 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80088e4:	f8cd 9000 	str.w	r9, [sp]
 80088e8:	463b      	mov	r3, r7
 80088ea:	4642      	mov	r2, r8
 80088ec:	4629      	mov	r1, r5
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7ff fc0a 	bl	8008108 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 80088f4:	4604      	mov	r4, r0
 80088f6:	b140      	cbz	r0, 800890a <ES_WIFI_ReceiveData+0x92>
          {
            DEBUG("AT_RequestReceiveData  failed\n"); 
 80088f8:	491c      	ldr	r1, [pc, #112]	; (800896c <ES_WIFI_ReceiveData+0xf4>)
 80088fa:	481d      	ldr	r0, [pc, #116]	; (8008970 <ES_WIFI_ReceiveData+0xf8>)
 80088fc:	f640 0202 	movw	r2, #2050	; 0x802
 8008900:	f01a feea 	bl	80236d8 <iprintf>
 8008904:	481b      	ldr	r0, [pc, #108]	; (8008974 <ES_WIFI_ReceiveData+0xfc>)
          }
        }
        else
        {
         DEBUG("setting timeout failed\n"); 
 8008906:	f01a ff83 	bl	8023810 <puts>
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 800890a:	4620      	mov	r0, r4
 800890c:	b002      	add	sp, #8
 800890e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("setting timeout failed\n"); 
 8008912:	4916      	ldr	r1, [pc, #88]	; (800896c <ES_WIFI_ReceiveData+0xf4>)
 8008914:	4816      	ldr	r0, [pc, #88]	; (8008970 <ES_WIFI_ReceiveData+0xf8>)
 8008916:	f640 0207 	movw	r2, #2055	; 0x807
 800891a:	f01a fedd 	bl	80236d8 <iprintf>
 800891e:	4816      	ldr	r0, [pc, #88]	; (8008978 <ES_WIFI_ReceiveData+0x100>)
 8008920:	e7f1      	b.n	8008906 <ES_WIFI_ReceiveData+0x8e>
        DEBUG("setting requested len failed\n"); 
 8008922:	4912      	ldr	r1, [pc, #72]	; (800896c <ES_WIFI_ReceiveData+0xf4>)
 8008924:	4812      	ldr	r0, [pc, #72]	; (8008970 <ES_WIFI_ReceiveData+0xf8>)
 8008926:	f640 020c 	movw	r2, #2060	; 0x80c
 800892a:	f01a fed5 	bl	80236d8 <iprintf>
 800892e:	4813      	ldr	r0, [pc, #76]	; (800897c <ES_WIFI_ReceiveData+0x104>)
 8008930:	f01a ff6e 	bl	8023810 <puts>
        *Receivedlen = 0;
 8008934:	f8a9 a000 	strh.w	sl, [r9]
 8008938:	e7e7      	b.n	800890a <ES_WIFI_ReceiveData+0x92>
      DEBUG("setting socket for read failed\n"); 
 800893a:	f640 0212 	movw	r2, #2066	; 0x812
 800893e:	490b      	ldr	r1, [pc, #44]	; (800896c <ES_WIFI_ReceiveData+0xf4>)
 8008940:	480b      	ldr	r0, [pc, #44]	; (8008970 <ES_WIFI_ReceiveData+0xf8>)
 8008942:	f01a fec9 	bl	80236d8 <iprintf>
 8008946:	480e      	ldr	r0, [pc, #56]	; (8008980 <ES_WIFI_ReceiveData+0x108>)
 8008948:	f01a ff62 	bl	8023810 <puts>
      issue15++;
 800894c:	4a0d      	ldr	r2, [pc, #52]	; (8008984 <ES_WIFI_ReceiveData+0x10c>)
 800894e:	6813      	ldr	r3, [r2, #0]
 8008950:	3301      	adds	r3, #1
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	e7d9      	b.n	800890a <ES_WIFI_ReceiveData+0x92>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008956:	2402      	movs	r4, #2
 8008958:	e7d7      	b.n	800890a <ES_WIFI_ReceiveData+0x92>
 800895a:	bf00      	nop
 800895c:	0802fd46 	.word	0x0802fd46
 8008960:	0802ff71 	.word	0x0802ff71
 8008964:	0802ff78 	.word	0x0802ff78
 8008968:	0802ff80 	.word	0x0802ff80
 800896c:	0802fdb4 	.word	0x0802fdb4
 8008970:	0802fe04 	.word	0x0802fe04
 8008974:	0802ff84 	.word	0x0802ff84
 8008978:	0802ffa2 	.word	0x0802ffa2
 800897c:	0802ffb9 	.word	0x0802ffb9
 8008980:	0802ffd6 	.word	0x0802ffd6
 8008984:	200010bc 	.word	0x200010bc

08008988 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 8008988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800898c:	b089      	sub	sp, #36	; 0x24
 800898e:	461f      	mov	r7, r3
 8008990:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 8008994:	2300      	movs	r3, #0
  LOCK_WIFI();  

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8008996:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
{
 800899a:	4606      	mov	r6, r0
 800899c:	4691      	mov	r9, r2
  *Receivedlen = 0;
 800899e:	f8a8 3000 	strh.w	r3, [r8]
  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80089a2:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80089a6:	d821      	bhi.n	80089ec <ES_WIFI_ReceiveDataFrom+0x64>
  {
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 80089a8:	460a      	mov	r2, r1
 80089aa:	4628      	mov	r0, r5
 80089ac:	496f      	ldr	r1, [pc, #444]	; (8008b6c <ES_WIFI_ReceiveDataFrom+0x1e4>)
 80089ae:	f01a ffb1 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089b2:	462a      	mov	r2, r5
 80089b4:	4629      	mov	r1, r5
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7ff fb6e 	bl	8008098 <AT_ExecuteCommand>
  }

  if(ret == ES_WIFI_STATUS_OK)
 80089bc:	4604      	mov	r4, r0
 80089be:	b9b0      	cbnz	r0, 80089ee <ES_WIFI_ReceiveDataFrom+0x66>
  {
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80089c0:	496b      	ldr	r1, [pc, #428]	; (8008b70 <ES_WIFI_ReceiveDataFrom+0x1e8>)
 80089c2:	463a      	mov	r2, r7
 80089c4:	4628      	mov	r0, r5
 80089c6:	f01a ffa5 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089ca:	462a      	mov	r2, r5
 80089cc:	4629      	mov	r1, r5
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff fb62 	bl	8008098 <AT_ExecuteCommand>
  else
  {
    DEBUG("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 80089d4:	4604      	mov	r4, r0
 80089d6:	b1a0      	cbz	r0, 8008a02 <ES_WIFI_ReceiveDataFrom+0x7a>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  else
  {
    DEBUG("R1 failed.\n");
 80089d8:	4966      	ldr	r1, [pc, #408]	; (8008b74 <ES_WIFI_ReceiveDataFrom+0x1ec>)
 80089da:	4867      	ldr	r0, [pc, #412]	; (8008b78 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 80089dc:	f640 0238 	movw	r2, #2104	; 0x838
 80089e0:	f01a fe7a 	bl	80236d8 <iprintf>
 80089e4:	4865      	ldr	r0, [pc, #404]	; (8008b7c <ES_WIFI_ReceiveDataFrom+0x1f4>)
 80089e6:	f01a ff13 	bl	8023810 <puts>
  }

  if(ret == ES_WIFI_STATUS_OK)
 80089ea:	e016      	b.n	8008a1a <ES_WIFI_ReceiveDataFrom+0x92>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80089ec:	2402      	movs	r4, #2
    DEBUG("P0 failed.\n");
 80089ee:	4961      	ldr	r1, [pc, #388]	; (8008b74 <ES_WIFI_ReceiveDataFrom+0x1ec>)
 80089f0:	4861      	ldr	r0, [pc, #388]	; (8008b78 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 80089f2:	f640 022e 	movw	r2, #2094	; 0x82e
 80089f6:	f01a fe6f 	bl	80236d8 <iprintf>
 80089fa:	4861      	ldr	r0, [pc, #388]	; (8008b80 <ES_WIFI_ReceiveDataFrom+0x1f8>)
 80089fc:	f01a ff08 	bl	8023810 <puts>
  if(ret == ES_WIFI_STATUS_OK)
 8008a00:	e7ea      	b.n	80089d8 <ES_WIFI_ReceiveDataFrom+0x50>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 8008a02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a04:	495f      	ldr	r1, [pc, #380]	; (8008b84 <ES_WIFI_ReceiveDataFrom+0x1fc>)
 8008a06:	4628      	mov	r0, r5
 8008a08:	f01a ff84 	bl	8023914 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff fb41 	bl	8008098 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008a16:	4604      	mov	r4, r0
 8008a18:	b148      	cbz	r0, 8008a2e <ES_WIFI_ReceiveDataFrom+0xa6>
    sprintf((char*)Obj->CmdData,"R0\r");
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
  }
  else
  {
    DEBUG("R2 failed.\n");
 8008a1a:	4956      	ldr	r1, [pc, #344]	; (8008b74 <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008a1c:	4856      	ldr	r0, [pc, #344]	; (8008b78 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8008a1e:	f640 0242 	movw	r2, #2114	; 0x842
 8008a22:	f01a fe59 	bl	80236d8 <iprintf>
 8008a26:	4858      	ldr	r0, [pc, #352]	; (8008b88 <ES_WIFI_ReceiveDataFrom+0x200>)
 8008a28:	f01a fef2 	bl	8023810 <puts>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008a2c:	e00d      	b.n	8008a4a <ES_WIFI_ReceiveDataFrom+0xc2>
    sprintf((char*)Obj->CmdData,"R0\r");
 8008a2e:	4957      	ldr	r1, [pc, #348]	; (8008b8c <ES_WIFI_ReceiveDataFrom+0x204>)
 8008a30:	4628      	mov	r0, r5
 8008a32:	f01b f80d 	bl	8023a50 <strcpy>
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008a36:	f8cd 8000 	str.w	r8, [sp]
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	464a      	mov	r2, r9
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4630      	mov	r0, r6
 8008a42:	f7ff fb61 	bl	8008108 <AT_RequestReceiveData>
  if (ret == ES_WIFI_STATUS_OK)
 8008a46:	4604      	mov	r4, r0
 8008a48:	b168      	cbz	r0, 8008a66 <ES_WIFI_ReceiveDataFrom+0xde>
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
  {
    DEBUG("Read error:\n%s\n", Obj->CmdData);
 8008a4a:	494a      	ldr	r1, [pc, #296]	; (8008b74 <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008a4c:	484a      	ldr	r0, [pc, #296]	; (8008b78 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8008a4e:	f640 0262 	movw	r2, #2146	; 0x862
 8008a52:	f01a fe41 	bl	80236d8 <iprintf>
 8008a56:	484e      	ldr	r0, [pc, #312]	; (8008b90 <ES_WIFI_ReceiveDataFrom+0x208>)
 8008a58:	4629      	mov	r1, r5
 8008a5a:	f01a fe3d 	bl	80236d8 <iprintf>
    *Receivedlen = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f8a8 3000 	strh.w	r3, [r8]
 8008a64:	e044      	b.n	8008af0 <ES_WIFI_ReceiveDataFrom+0x168>
    if (*Receivedlen > Reqlen)
 8008a66:	f8b8 3000 	ldrh.w	r3, [r8]
 8008a6a:	42bb      	cmp	r3, r7
 8008a6c:	d90a      	bls.n	8008a84 <ES_WIFI_ReceiveDataFrom+0xfc>
      DEBUG("AT_RequestReceiveData overflow\n.");
 8008a6e:	4941      	ldr	r1, [pc, #260]	; (8008b74 <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008a70:	4841      	ldr	r0, [pc, #260]	; (8008b78 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8008a72:	f640 0249 	movw	r2, #2121	; 0x849
 8008a76:	f01a fe2f 	bl	80236d8 <iprintf>
 8008a7a:	4846      	ldr	r0, [pc, #280]	; (8008b94 <ES_WIFI_ReceiveDataFrom+0x20c>)
 8008a7c:	f01a fe2c 	bl	80236d8 <iprintf>
      ret = ES_WIFI_STATUS_ERROR;
 8008a80:	2402      	movs	r4, #2
 8008a82:	e7e2      	b.n	8008a4a <ES_WIFI_ReceiveDataFrom+0xc2>
      if (*Receivedlen > 0)
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d033      	beq.n	8008af0 <ES_WIFI_ReceiveDataFrom+0x168>
        sprintf((char*)Obj->CmdData,"P?\r");
 8008a88:	4943      	ldr	r1, [pc, #268]	; (8008b98 <ES_WIFI_ReceiveDataFrom+0x210>)
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f01a ffe0 	bl	8023a50 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a90:	462a      	mov	r2, r5
 8008a92:	4629      	mov	r1, r5
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7ff faff 	bl	8008098 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d1d4      	bne.n	8008a4a <ES_WIFI_ReceiveDataFrom+0xc2>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	2214      	movs	r2, #20
 8008aa4:	a803      	add	r0, sp, #12
 8008aa6:	f019 fd13 	bl	80224d0 <memset>
  ptr = strtok(pdata + 2, ",");
 8008aaa:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 8008aae:	493b      	ldr	r1, [pc, #236]	; (8008b9c <ES_WIFI_ReceiveDataFrom+0x214>)
    ptr = strtok(NULL, ",");
 8008ab0:	4e3a      	ldr	r6, [pc, #232]	; (8008b9c <ES_WIFI_ReceiveDataFrom+0x214>)
  ptr = strtok(pdata + 2, ",");
 8008ab2:	f01b fe43 	bl	802473c <strtok>
  uint8_t num = 0;
 8008ab6:	4625      	mov	r5, r4
  while (ptr != NULL) {
 8008ab8:	b198      	cbz	r0, 8008ae2 <ES_WIFI_ReceiveDataFrom+0x15a>
    switch (num++) {
 8008aba:	2d09      	cmp	r5, #9
 8008abc:	d80b      	bhi.n	8008ad6 <ES_WIFI_ReceiveDataFrom+0x14e>
 8008abe:	e8df f005 	tbb	[pc, r5]
 8008ac2:	1b05      	.short	0x1b05
 8008ac4:	2e282620 	.word	0x2e282620
 8008ac8:	46403a34 	.word	0x46403a34
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 8008acc:	2100      	movs	r1, #0
 8008ace:	f7ff fa7b 	bl	8007fc8 <ParseNumber>
 8008ad2:	f88d 000c 	strb.w	r0, [sp, #12]
    ptr = strtok(NULL, ",");
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	2000      	movs	r0, #0
 8008ada:	f01b fe2f 	bl	802473c <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d13b      	bne.n	8008b5a <ES_WIFI_ReceiveDataFrom+0x1d2>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8008ae2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ae4:	9a05      	ldr	r2, [sp, #20]
 8008ae6:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8008ae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aea:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8008aee:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 8008af0:	4620      	mov	r0, r4
 8008af2:	b009      	add	sp, #36	; 0x24
 8008af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8008af8:	f10d 010d 	add.w	r1, sp, #13
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8008afc:	f7ff fab3 	bl	8008066 <ParseIP>
      break;
 8008b00:	e7e9      	b.n	8008ad6 <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 8008b02:	2100      	movs	r1, #0
 8008b04:	f7ff fa60 	bl	8007fc8 <ParseNumber>
 8008b08:	f8ad 0012 	strh.w	r0, [sp, #18]
      break;
 8008b0c:	e7e3      	b.n	8008ad6 <ES_WIFI_ReceiveDataFrom+0x14e>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8008b0e:	a905      	add	r1, sp, #20
 8008b10:	e7f4      	b.n	8008afc <ES_WIFI_ReceiveDataFrom+0x174>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 8008b12:	2100      	movs	r1, #0
 8008b14:	f7ff fa58 	bl	8007fc8 <ParseNumber>
 8008b18:	f8ad 0018 	strh.w	r0, [sp, #24]
      break;
 8008b1c:	e7db      	b.n	8008ad6 <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8008b1e:	2100      	movs	r1, #0
 8008b20:	f7ff fa52 	bl	8007fc8 <ParseNumber>
 8008b24:	f88d 001a 	strb.w	r0, [sp, #26]
      break;
 8008b28:	e7d5      	b.n	8008ad6 <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	f7ff fa4c 	bl	8007fc8 <ParseNumber>
 8008b30:	f88d 001b 	strb.w	r0, [sp, #27]
      break;
 8008b34:	e7cf      	b.n	8008ad6 <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 8008b36:	2100      	movs	r1, #0
 8008b38:	f7ff fa46 	bl	8007fc8 <ParseNumber>
 8008b3c:	f88d 001c 	strb.w	r0, [sp, #28]
      break;
 8008b40:	e7c9      	b.n	8008ad6 <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 8008b42:	2100      	movs	r1, #0
 8008b44:	f7ff fa40 	bl	8007fc8 <ParseNumber>
 8008b48:	f88d 001d 	strb.w	r0, [sp, #29]
      break;
 8008b4c:	e7c3      	b.n	8008ad6 <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8008b4e:	2100      	movs	r1, #0
 8008b50:	f7ff fa3a 	bl	8007fc8 <ParseNumber>
 8008b54:	f88d 001e 	strb.w	r0, [sp, #30]
      break;
 8008b58:	e7bd      	b.n	8008ad6 <ES_WIFI_ReceiveDataFrom+0x14e>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008b5a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8008b5e:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8008b60:	bf14      	ite	ne
 8008b62:	3501      	addne	r5, #1
      num++;
 8008b64:	3502      	addeq	r5, #2
 8008b66:	b2ed      	uxtb	r5, r5
 8008b68:	e7a6      	b.n	8008ab8 <ES_WIFI_ReceiveDataFrom+0x130>
 8008b6a:	bf00      	nop
 8008b6c:	0802fd46 	.word	0x0802fd46
 8008b70:	0802ff71 	.word	0x0802ff71
 8008b74:	0802fdb4 	.word	0x0802fdb4
 8008b78:	0802fe04 	.word	0x0802fe04
 8008b7c:	08030000 	.word	0x08030000
 8008b80:	0802fff5 	.word	0x0802fff5
 8008b84:	0802ff78 	.word	0x0802ff78
 8008b88:	0803000b 	.word	0x0803000b
 8008b8c:	0802ff80 	.word	0x0802ff80
 8008b90:	08030037 	.word	0x08030037
 8008b94:	08030016 	.word	0x08030016
 8008b98:	0802fe38 	.word	0x0802fe38
 8008b9c:	08030a77 	.word	0x08030a77

08008ba0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008ba0:	490f      	ldr	r1, [pc, #60]	; (8008be0 <SystemInit+0x40>)
 8008ba2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008ba6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008bae:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <SystemInit+0x44>)
 8008bb0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008bb2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8008bb4:	f042 0201 	orr.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8008bba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8008bc2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8008bc6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8008bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008bcc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008bd4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008bd6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECTOR_TABLE;
 8008bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bdc:	608b      	str	r3, [r1, #8]

}
 8008bde:	4770      	bx	lr
 8008be0:	e000ed00 	.word	0xe000ed00
 8008be4:	40021000 	.word	0x40021000

08008be8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8008be8:	4770      	bx	lr
	...

08008bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bec:	b507      	push	{r0, r1, r2, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8008bee:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <HAL_InitTick+0x28>)
{
 8008bf0:	9001      	str	r0, [sp, #4]
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bf8:	fbb0 f0f3 	udiv	r0, r0, r3
 8008bfc:	f000 f896 	bl	8008d2c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8008c00:	9901      	ldr	r1, [sp, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	f000 f840 	bl	8008c8c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	b003      	add	sp, #12
 8008c10:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c14:	20000590 	.word	0x20000590

08008c18 <HAL_Init>:
{
 8008c18:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c1a:	2003      	movs	r0, #3
 8008c1c:	f000 f824 	bl	8008c68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008c20:	200f      	movs	r0, #15
 8008c22:	f7ff ffe3 	bl	8008bec <HAL_InitTick>
  HAL_MspInit();
 8008c26:	f7ff ffdf 	bl	8008be8 <HAL_MspInit>
}
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	bd08      	pop	{r3, pc}
	...

08008c30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8008c30:	4a02      	ldr	r2, [pc, #8]	; (8008c3c <HAL_IncTick+0xc>)
 8008c32:	6813      	ldr	r3, [r2, #0]
 8008c34:	3301      	adds	r3, #1
 8008c36:	6013      	str	r3, [r2, #0]
}
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	200019f8 	.word	0x200019f8

08008c40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008c40:	4b01      	ldr	r3, [pc, #4]	; (8008c48 <HAL_GetTick+0x8>)
 8008c42:	6818      	ldr	r0, [r3, #0]
}
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	200019f8 	.word	0x200019f8

08008c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008c50:	f7ff fff6 	bl	8008c40 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c54:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8008c56:	4605      	mov	r5, r0
  {
    wait++;
 8008c58:	bf18      	it	ne
 8008c5a:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8008c5c:	f7ff fff0 	bl	8008c40 <HAL_GetTick>
 8008c60:	1b43      	subs	r3, r0, r5
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	d3fa      	bcc.n	8008c5c <HAL_Delay+0x10>
  {
  }
}
 8008c66:	bd38      	pop	{r3, r4, r5, pc}

08008c68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c68:	4907      	ldr	r1, [pc, #28]	; (8008c88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008c6a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008c70:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c72:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c78:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008c84:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008c86:	4770      	bx	lr
 8008c88:	e000ed00 	.word	0xe000ed00

08008c8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c8c:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c8e:	b530      	push	{r4, r5, lr}
 8008c90:	68dc      	ldr	r4, [r3, #12]
 8008c92:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c96:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c9a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c9c:	2d04      	cmp	r5, #4
 8008c9e:	bf28      	it	cs
 8008ca0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ca2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ca4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ca8:	bf8c      	ite	hi
 8008caa:	3c03      	subhi	r4, #3
 8008cac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cae:	fa03 f505 	lsl.w	r5, r3, r5
 8008cb2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cb6:	40a3      	lsls	r3, r4
 8008cb8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cbc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8008cbe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cc0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cc4:	bfac      	ite	ge
 8008cc6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cca:	4a08      	ldrlt	r2, [pc, #32]	; (8008cec <HAL_NVIC_SetPriority+0x60>)
 8008ccc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008cd0:	bfb8      	it	lt
 8008cd2:	f000 000f 	andlt.w	r0, r0, #15
 8008cd6:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cd8:	bfaa      	itet	ge
 8008cda:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cde:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ce0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008ce4:	bd30      	pop	{r4, r5, pc}
 8008ce6:	bf00      	nop
 8008ce8:	e000ed00 	.word	0xe000ed00
 8008cec:	e000ed14 	.word	0xe000ed14

08008cf0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008cf0:	0942      	lsrs	r2, r0, #5
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f000 001f 	and.w	r0, r0, #31
 8008cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8008cfc:	4b01      	ldr	r3, [pc, #4]	; (8008d04 <HAL_NVIC_EnableIRQ+0x14>)
 8008cfe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008d02:	4770      	bx	lr
 8008d04:	e000e100 	.word	0xe000e100

08008d08 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008d08:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008d0c:	4905      	ldr	r1, [pc, #20]	; (8008d24 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008d0e:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008d10:	68ca      	ldr	r2, [r1, #12]
 8008d12:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60cb      	str	r3, [r1, #12]
 8008d1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008d1e:	bf00      	nop
 8008d20:	e7fd      	b.n	8008d1e <HAL_NVIC_SystemReset+0x16>
 8008d22:	bf00      	nop
 8008d24:	e000ed00 	.word	0xe000ed00
 8008d28:	05fa0004 	.word	0x05fa0004

08008d2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d2c:	3801      	subs	r0, #1
 8008d2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008d32:	d20a      	bcs.n	8008d4a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d34:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d36:	4a07      	ldr	r2, [pc, #28]	; (8008d54 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d38:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d3a:	21f0      	movs	r1, #240	; 0xf0
 8008d3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d40:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d42:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d44:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008d4a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	e000e010 	.word	0xe000e010
 8008d54:	e000ed00 	.word	0xe000ed00

08008d58 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8008d58:	4770      	bx	lr

08008d5a <HAL_SYSTICK_IRQHandler>:
{
 8008d5a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8008d5c:	f7ff fffc 	bl	8008d58 <HAL_SYSTICK_Callback>
}
 8008d60:	bd08      	pop	{r3, pc}

08008d62 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008d62:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008d64:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8008d68:	2a02      	cmp	r2, #2
 8008d6a:	d003      	beq.n	8008d74 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8008d70:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8008d72:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d74:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008d76:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d78:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8008d7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d7c:	f021 010e 	bic.w	r1, r1, #14
 8008d80:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008d82:	6811      	ldr	r1, [r2, #0]
 8008d84:	f021 0101 	bic.w	r1, r1, #1
 8008d88:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008d8a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8008d92:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8008d94:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8008d96:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008d9a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8008d9e:	b113      	cbz	r3, 8008da6 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8008da0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008da2:	4620      	mov	r0, r4
 8008da4:	e7e5      	b.n	8008d72 <HAL_DMA_Abort_IT+0x10>
 8008da6:	4618      	mov	r0, r3
 8008da8:	e7e3      	b.n	8008d72 <HAL_DMA_Abort_IT+0x10>
	...

08008dac <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))
 8008dac:	4b32      	ldr	r3, [pc, #200]	; (8008e78 <FLASH_SetErrorCode+0xcc>)
 8008dae:	691a      	ldr	r2, [r3, #16]
 8008db0:	0792      	lsls	r2, r2, #30
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OP;
 8008db2:	bf41      	itttt	mi
 8008db4:	4931      	ldrmi	r1, [pc, #196]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008db6:	684a      	ldrmi	r2, [r1, #4]
 8008db8:	f042 0201 	orrmi.w	r2, r2, #1
 8008dbc:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR))
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	071b      	lsls	r3, r3, #28
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008dc2:	bf41      	itttt	mi
 8008dc4:	4a2d      	ldrmi	r2, [pc, #180]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008dc6:	6853      	ldrmi	r3, [r2, #4]
 8008dc8:	f043 0302 	orrmi.w	r3, r3, #2
 8008dcc:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008dce:	4b2a      	ldr	r3, [pc, #168]	; (8008e78 <FLASH_SetErrorCode+0xcc>)
 8008dd0:	691a      	ldr	r2, [r3, #16]
 8008dd2:	06d0      	lsls	r0, r2, #27
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008dd4:	bf41      	itttt	mi
 8008dd6:	4929      	ldrmi	r1, [pc, #164]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008dd8:	684a      	ldrmi	r2, [r1, #4]
 8008dda:	f042 0204 	orrmi.w	r2, r2, #4
 8008dde:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	0699      	lsls	r1, r3, #26
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008de4:	bf41      	itttt	mi
 8008de6:	4a25      	ldrmi	r2, [pc, #148]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008de8:	6853      	ldrmi	r3, [r2, #4]
 8008dea:	f043 0308 	orrmi.w	r3, r3, #8
 8008dee:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8008df0:	4b21      	ldr	r3, [pc, #132]	; (8008e78 <FLASH_SetErrorCode+0xcc>)
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	0652      	lsls	r2, r2, #25
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZ;
 8008df6:	bf41      	itttt	mi
 8008df8:	4920      	ldrmi	r1, [pc, #128]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008dfa:	684a      	ldrmi	r2, [r1, #4]
 8008dfc:	f042 0210 	orrmi.w	r2, r2, #16
 8008e00:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	061b      	lsls	r3, r3, #24
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008e06:	bf41      	itttt	mi
 8008e08:	4a1c      	ldrmi	r2, [pc, #112]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008e0a:	6853      	ldrmi	r3, [r2, #4]
 8008e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008e10:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR))
 8008e12:	4b19      	ldr	r3, [pc, #100]	; (8008e78 <FLASH_SetErrorCode+0xcc>)
 8008e14:	691a      	ldr	r2, [r3, #16]
 8008e16:	05d0      	lsls	r0, r2, #23
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_MIS;
 8008e18:	bf41      	itttt	mi
 8008e1a:	4918      	ldrmi	r1, [pc, #96]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008e1c:	684a      	ldrmi	r2, [r1, #4]
 8008e1e:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 8008e22:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR))
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	0599      	lsls	r1, r3, #22
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_FAST;
 8008e28:	bf41      	itttt	mi
 8008e2a:	4a14      	ldrmi	r2, [pc, #80]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008e2c:	6853      	ldrmi	r3, [r2, #4]
 8008e2e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8008e32:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8008e34:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <FLASH_SetErrorCode+0xcc>)
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	0452      	lsls	r2, r2, #17
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008e3a:	bf41      	itttt	mi
 8008e3c:	490f      	ldrmi	r1, [pc, #60]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008e3e:	684a      	ldrmi	r2, [r1, #4]
 8008e40:	f442 7280 	orrmi.w	r2, r2, #256	; 0x100
 8008e44:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	041b      	lsls	r3, r3, #16
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8008e4a:	bf41      	itttt	mi
 8008e4c:	4a0b      	ldrmi	r2, [pc, #44]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008e4e:	6853      	ldrmi	r3, [r2, #4]
 8008e50:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8008e54:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8008e56:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <FLASH_SetErrorCode+0xcc>)
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	2a00      	cmp	r2, #0
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_ECCD;
 8008e5c:	bfbf      	itttt	lt
 8008e5e:	4907      	ldrlt	r1, [pc, #28]	; (8008e7c <FLASH_SetErrorCode+0xd0>)
 8008e60:	684a      	ldrlt	r2, [r1, #4]
 8008e62:	f442 6280 	orrlt.w	r2, r2, #1024	; 0x400
 8008e66:	604a      	strlt	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
  }
#endif
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008e6e:	619a      	str	r2, [r3, #24]
 8008e70:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8008e74:	611a      	str	r2, [r3, #16]
} 
 8008e76:	4770      	bx	lr
 8008e78:	40022000 	.word	0x40022000
 8008e7c:	200019fc 	.word	0x200019fc

08008e80 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008e80:	4a07      	ldr	r2, [pc, #28]	; (8008ea0 <FLASH_Program_Fast+0x20>)
 8008e82:	6953      	ldr	r3, [r2, #20]
 8008e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e8a:	b672      	cpsid	i
}
 8008e8c:	2300      	movs	r3, #0
  __disable_irq();
  
  /* Program the double word of the row */
  do
  {
    *dest_addr++ = *src_addr++;
 8008e8e:	58ca      	ldr	r2, [r1, r3]
 8008e90:	50c2      	str	r2, [r0, r3]
  } while (--row_index != 0);
 8008e92:	3304      	adds	r3, #4
 8008e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e98:	d1f9      	bne.n	8008e8e <FLASH_Program_Fast+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8008e9a:	b662      	cpsie	i

  /* Re-enable the interrupts */
  __enable_irq();
}
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	40022000 	.word	0x40022000

08008ea4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <HAL_FLASH_Unlock+0x1c>)
 8008ea6:	695a      	ldr	r2, [r3, #20]
 8008ea8:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008eaa:	bfbf      	itttt	lt
 8008eac:	4a05      	ldrlt	r2, [pc, #20]	; (8008ec4 <HAL_FLASH_Unlock+0x20>)
 8008eae:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008eb0:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8008eb4:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008eb6:	bfba      	itte	lt
 8008eb8:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8008eba:	0fc0      	lsrlt	r0, r0, #31
 8008ebc:	2000      	movge	r0, #0
}
 8008ebe:	4770      	bx	lr
 8008ec0:	40022000 	.word	0x40022000
 8008ec4:	45670123 	.word	0x45670123

08008ec8 <FLASH_WaitForLastOperation>:
{
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8008ecc:	f7ff feb8 	bl	8008c40 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008ed0:	4c1e      	ldr	r4, [pc, #120]	; (8008f4c <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 8008ed2:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	03d8      	lsls	r0, r3, #15
 8008ed8:	d426      	bmi.n	8008f28 <FLASH_WaitForLastOperation+0x60>
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	0799      	lsls	r1, r3, #30
 8008ede:	d41f      	bmi.n	8008f20 <FLASH_WaitForLastOperation+0x58>
 8008ee0:	6923      	ldr	r3, [r4, #16]
 8008ee2:	071a      	lsls	r2, r3, #28
 8008ee4:	d41c      	bmi.n	8008f20 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008ee6:	6923      	ldr	r3, [r4, #16]
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 8008ee8:	06db      	lsls	r3, r3, #27
 8008eea:	d419      	bmi.n	8008f20 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	069e      	lsls	r6, r3, #26
 8008ef0:	d416      	bmi.n	8008f20 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008ef2:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008ef4:	065d      	lsls	r5, r3, #25
 8008ef6:	d413      	bmi.n	8008f20 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008ef8:	6923      	ldr	r3, [r4, #16]
 8008efa:	0618      	lsls	r0, r3, #24
 8008efc:	d410      	bmi.n	8008f20 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008efe:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008f00:	05d9      	lsls	r1, r3, #23
 8008f02:	d40d      	bmi.n	8008f20 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	059a      	lsls	r2, r3, #22
 8008f08:	d40a      	bmi.n	8008f20 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008f0a:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008f0c:	045b      	lsls	r3, r3, #17
 8008f0e:	d407      	bmi.n	8008f20 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008f10:	490e      	ldr	r1, [pc, #56]	; (8008f4c <FLASH_WaitForLastOperation+0x84>)
 8008f12:	690a      	ldr	r2, [r1, #16]
 8008f14:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8008f18:	d102      	bne.n	8008f20 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD)))
 8008f1a:	698b      	ldr	r3, [r1, #24]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	da0c      	bge.n	8008f3a <FLASH_WaitForLastOperation+0x72>
    FLASH_SetErrorCode();
 8008f20:	f7ff ff44 	bl	8008dac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008f24:	2001      	movs	r0, #1
}
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8008f28:	1c6b      	adds	r3, r5, #1
 8008f2a:	d0d3      	beq.n	8008ed4 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8008f2c:	f7ff fe88 	bl	8008c40 <HAL_GetTick>
 8008f30:	1b80      	subs	r0, r0, r6
 8008f32:	42a8      	cmp	r0, r5
 8008f34:	d3ce      	bcc.n	8008ed4 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8008f36:	2003      	movs	r0, #3
 8008f38:	e7f5      	b.n	8008f26 <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008f3a:	6908      	ldr	r0, [r1, #16]
 8008f3c:	f010 0001 	ands.w	r0, r0, #1
 8008f40:	d0f1      	beq.n	8008f26 <FLASH_WaitForLastOperation+0x5e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008f42:	2301      	movs	r3, #1
 8008f44:	610b      	str	r3, [r1, #16]
  return HAL_OK;  
 8008f46:	4610      	mov	r0, r2
 8008f48:	e7ed      	b.n	8008f26 <FLASH_WaitForLastOperation+0x5e>
 8008f4a:	bf00      	nop
 8008f4c:	40022000 	.word	0x40022000

08008f50 <HAL_FLASH_Program>:
{
 8008f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8008f54:	4c24      	ldr	r4, [pc, #144]	; (8008fe8 <HAL_FLASH_Program+0x98>)
{
 8008f56:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8008f58:	7823      	ldrb	r3, [r4, #0]
 8008f5a:	2b01      	cmp	r3, #1
{
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	460f      	mov	r7, r1
 8008f60:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8008f62:	d03f      	beq.n	8008fe4 <HAL_FLASH_Program+0x94>
 8008f64:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f66:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8008f6a:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f6c:	f7ff ffac 	bl	8008ec8 <FLASH_WaitForLastOperation>
 8008f70:	4605      	mov	r5, r0
  if(status == HAL_OK)
 8008f72:	bb20      	cbnz	r0, 8008fbe <HAL_FLASH_Program+0x6e>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008f74:	4d1d      	ldr	r5, [pc, #116]	; (8008fec <HAL_FLASH_Program+0x9c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008f76:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008f78:	682a      	ldr	r2, [r5, #0]
 8008f7a:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008f7e:	bf17      	itett	ne
 8008f80:	682b      	ldrne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008f82:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008f84:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8008f88:	602b      	strne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008f8a:	bf1c      	itt	ne
 8008f8c:	2302      	movne	r3, #2
 8008f8e:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008f90:	b9d6      	cbnz	r6, 8008fc8 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008f92:	696b      	ldr	r3, [r5, #20]
 8008f94:	f043 0301 	orr.w	r3, r3, #1
 8008f98:	616b      	str	r3, [r5, #20]
      prog_bit = FLASH_CR_PG;
 8008f9a:	2601      	movs	r6, #1
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008f9c:	f8c7 8000 	str.w	r8, [r7]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008fa0:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008fa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008fa8:	f7ff ff8e 	bl	8008ec8 <FLASH_WaitForLastOperation>
 8008fac:	4605      	mov	r5, r0
    if (prog_bit != 0)
 8008fae:	b126      	cbz	r6, 8008fba <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008fb0:	4a0e      	ldr	r2, [pc, #56]	; (8008fec <HAL_FLASH_Program+0x9c>)
 8008fb2:	6953      	ldr	r3, [r2, #20]
 8008fb4:	ea23 0606 	bic.w	r6, r3, r6
 8008fb8:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 8008fba:	f000 f851 	bl	8009060 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	7023      	strb	r3, [r4, #0]
}
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8008fc8:	1e73      	subs	r3, r6, #1
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d901      	bls.n	8008fd2 <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 8008fce:	2600      	movs	r6, #0
 8008fd0:	e7e8      	b.n	8008fa4 <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f7ff ff53 	bl	8008e80 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008fda:	2e02      	cmp	r6, #2
 8008fdc:	d1f7      	bne.n	8008fce <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 8008fde:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8008fe2:	e7df      	b.n	8008fa4 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8008fe4:	2502      	movs	r5, #2
 8008fe6:	e7ec      	b.n	8008fc2 <HAL_FLASH_Program+0x72>
 8008fe8:	200019fc 	.word	0x200019fc
 8008fec:	40022000 	.word	0x40022000

08008ff0 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != RESET)
 8008ff0:	4b09      	ldr	r3, [pc, #36]	; (8009018 <FLASH_MassErase+0x28>)
 8008ff2:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008ff6:	bf1e      	ittt	ne
 8008ff8:	695a      	ldrne	r2, [r3, #20]
 8008ffa:	f042 0204 	orrne.w	r2, r2, #4
 8008ffe:	615a      	strne	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != RESET)
 8009000:	0782      	lsls	r2, r0, #30
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8009002:	bf42      	ittt	mi
 8009004:	695a      	ldrmi	r2, [r3, #20]
 8009006:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
 800900a:	615a      	strmi	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800900c:	4a02      	ldr	r2, [pc, #8]	; (8009018 <FLASH_MassErase+0x28>)
 800900e:	6953      	ldr	r3, [r2, #20]
 8009010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009014:	6153      	str	r3, [r2, #20]
}
 8009016:	4770      	bx	lr
 8009018:	40022000 	.word	0x40022000

0800901c <FLASH_PageErase>:
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != RESET)
 800901c:	4b0f      	ldr	r3, [pc, #60]	; (800905c <FLASH_PageErase+0x40>)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800901e:	695a      	ldr	r2, [r3, #20]
    if((Banks & FLASH_BANK_1) != RESET)
 8009020:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8009024:	bf14      	ite	ne
 8009026:	f422 6200 	bicne.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800902a:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 800902e:	615a      	str	r2, [r3, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (Page << POSITION_VAL(FLASH_CR_PNB)));
 8009030:	695a      	ldr	r2, [r3, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009032:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8009036:	fa91 f1a1 	rbit	r1, r1
 800903a:	fab1 f181 	clz	r1, r1
 800903e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8009042:	4088      	lsls	r0, r1
 8009044:	4310      	orrs	r0, r2
 8009046:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009048:	695a      	ldr	r2, [r3, #20]
 800904a:	f042 0202 	orr.w	r2, r2, #2
 800904e:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009050:	695a      	ldr	r2, [r3, #20]
 8009052:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009056:	615a      	str	r2, [r3, #20]
}
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	40022000 	.word	0x40022000

08009060 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8009060:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <FLASH_FlushCaches+0x54>)
 8009062:	7f1a      	ldrb	r2, [r3, #28]
 8009064:	2a01      	cmp	r2, #1
 8009066:	d002      	beq.n	800906e <FLASH_FlushCaches+0xe>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8009068:	7f1a      	ldrb	r2, [r3, #28]
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 800906a:	2a03      	cmp	r2, #3
 800906c:	d10c      	bne.n	8009088 <FLASH_FlushCaches+0x28>
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800906e:	4a12      	ldr	r2, [pc, #72]	; (80090b8 <FLASH_FlushCaches+0x58>)
 8009070:	6811      	ldr	r1, [r2, #0]
 8009072:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8009076:	6011      	str	r1, [r2, #0]
 8009078:	6811      	ldr	r1, [r2, #0]
 800907a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800907e:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009080:	6811      	ldr	r1, [r2, #0]
 8009082:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8009086:	6011      	str	r1, [r2, #0]
  }
  
  /* Flush data cache */
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8009088:	7f1a      	ldrb	r2, [r3, #28]
 800908a:	2a02      	cmp	r2, #2
 800908c:	d002      	beq.n	8009094 <FLASH_FlushCaches+0x34>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 800908e:	7f1a      	ldrb	r2, [r3, #28]
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8009090:	2a03      	cmp	r2, #3
 8009092:	d10c      	bne.n	80090ae <FLASH_FlushCaches+0x4e>
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009094:	4a08      	ldr	r2, [pc, #32]	; (80090b8 <FLASH_FlushCaches+0x58>)
 8009096:	6811      	ldr	r1, [r2, #0]
 8009098:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800909c:	6011      	str	r1, [r2, #0]
 800909e:	6811      	ldr	r1, [r2, #0]
 80090a0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80090a4:	6011      	str	r1, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80090a6:	6811      	ldr	r1, [r2, #0]
 80090a8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80090ac:	6011      	str	r1, [r2, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80090ae:	2200      	movs	r2, #0
 80090b0:	771a      	strb	r2, [r3, #28]
}
 80090b2:	4770      	bx	lr
 80090b4:	200019fc 	.word	0x200019fc
 80090b8:	40022000 	.word	0x40022000

080090bc <HAL_FLASHEx_Erase>:
{
 80090bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80090c0:	4d35      	ldr	r5, [pc, #212]	; (8009198 <HAL_FLASHEx_Erase+0xdc>)
 80090c2:	782b      	ldrb	r3, [r5, #0]
 80090c4:	2b01      	cmp	r3, #1
{
 80090c6:	4606      	mov	r6, r0
 80090c8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80090ca:	d062      	beq.n	8009192 <HAL_FLASHEx_Erase+0xd6>
 80090cc:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090ce:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80090d2:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090d4:	f7ff fef8 	bl	8008ec8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80090d8:	4604      	mov	r4, r0
 80090da:	bb40      	cbnz	r0, 800912e <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80090dc:	4b2f      	ldr	r3, [pc, #188]	; (800919c <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80090de:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80090e6:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80090e8:	d026      	beq.n	8009138 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80090ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80090ee:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	0551      	lsls	r1, r2, #21
 80090f4:	d506      	bpl.n	8009104 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090fc:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80090fe:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009100:	772b      	strb	r3, [r5, #28]
 8009102:	e000      	b.n	8009106 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009104:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009106:	6833      	ldr	r3, [r6, #0]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d11f      	bne.n	800914c <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 800910c:	6870      	ldr	r0, [r6, #4]
 800910e:	f7ff ff6f 	bl	8008ff0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009112:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009116:	f7ff fed7 	bl	8008ec8 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800911a:	4a20      	ldr	r2, [pc, #128]	; (800919c <HAL_FLASHEx_Erase+0xe0>)
 800911c:	6953      	ldr	r3, [r2, #20]
 800911e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009122:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009126:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8009128:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800912a:	f7ff ff99 	bl	8009060 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800912e:	2300      	movs	r3, #0
 8009130:	702b      	strb	r3, [r5, #0]
}
 8009132:	4620      	mov	r0, r4
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009138:	0552      	lsls	r2, r2, #21
 800913a:	d505      	bpl.n	8009148 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009142:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009144:	2302      	movs	r3, #2
 8009146:	e7db      	b.n	8009100 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009148:	7728      	strb	r0, [r5, #28]
 800914a:	e7dc      	b.n	8009106 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFF;
 800914c:	f04f 33ff 	mov.w	r3, #4294967295
 8009150:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009154:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009156:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800919c <HAL_FLASHEx_Erase+0xe0>
 800915a:	f8df a044 	ldr.w	sl, [pc, #68]	; 80091a0 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800915e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8009162:	4413      	add	r3, r2
 8009164:	42bb      	cmp	r3, r7
 8009166:	d9e0      	bls.n	800912a <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8009168:	6871      	ldr	r1, [r6, #4]
 800916a:	4638      	mov	r0, r7
 800916c:	f7ff ff56 	bl	800901c <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009170:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009174:	f7ff fea8 	bl	8008ec8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009178:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800917c:	ea03 030a 	and.w	r3, r3, sl
 8009180:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8009184:	b118      	cbz	r0, 800918e <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8009186:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800918a:	4604      	mov	r4, r0
          break;
 800918c:	e7cd      	b.n	800912a <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800918e:	3701      	adds	r7, #1
 8009190:	e7e5      	b.n	800915e <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 8009192:	2402      	movs	r4, #2
 8009194:	e7cd      	b.n	8009132 <HAL_FLASHEx_Erase+0x76>
 8009196:	bf00      	nop
 8009198:	200019fc 	.word	0x200019fc
 800919c:	40022000 	.word	0x40022000
 80091a0:	fffff805 	.word	0xfffff805

080091a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800935c <HAL_GPIO_Init+0x1b8>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80091ac:	4d69      	ldr	r5, [pc, #420]	; (8009354 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00;
 80091ae:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80091b0:	680a      	ldr	r2, [r1, #0]
 80091b2:	fa32 f403 	lsrs.w	r4, r2, r3
 80091b6:	d102      	bne.n	80091be <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 80091b8:	b003      	add	sp, #12
 80091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80091be:	2601      	movs	r6, #1
 80091c0:	409e      	lsls	r6, r3
    if(iocurrent)
 80091c2:	4032      	ands	r2, r6
 80091c4:	f000 80b7 	beq.w	8009336 <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80091c8:	684c      	ldr	r4, [r1, #4]
 80091ca:	f024 0e10 	bic.w	lr, r4, #16
 80091ce:	f1be 0f02 	cmp.w	lr, #2
 80091d2:	d116      	bne.n	8009202 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 80091d4:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80091d8:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80091dc:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80091e0:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80091e4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80091e8:	f04f 0c0f 	mov.w	ip, #15
 80091ec:	fa0c fc0a 	lsl.w	ip, ip, sl
 80091f0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80091f4:	690f      	ldr	r7, [r1, #16]
 80091f6:	fa07 f70a 	lsl.w	r7, r7, sl
 80091fa:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 80091fe:	f8c9 7020 	str.w	r7, [r9, #32]
      temp = GPIOx->MODER;
 8009202:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8009206:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800920a:	f04f 0b03 	mov.w	fp, #3
 800920e:	fa0b f70c 	lsl.w	r7, fp, ip
 8009212:	ea2a 0b07 	bic.w	fp, sl, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009216:	f004 0a03 	and.w	sl, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800921a:	ea6f 0907 	mvn.w	r9, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800921e:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009222:	fa0a f70c 	lsl.w	r7, sl, ip
 8009226:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800922a:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 800922e:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009230:	d811      	bhi.n	8009256 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8009232:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8009234:	ea09 0e07 	and.w	lr, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8009238:	68cf      	ldr	r7, [r1, #12]
 800923a:	fa07 f70c 	lsl.w	r7, r7, ip
 800923e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8009242:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009244:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009246:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800924a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800924e:	409f      	lsls	r7, r3
 8009250:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8009254:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8009256:	f1ba 0f03 	cmp.w	sl, #3
 800925a:	d107      	bne.n	800926c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 800925c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800925e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8009262:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8009266:	409f      	lsls	r7, r3
 8009268:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800926a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800926c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800926e:	ea09 0906 	and.w	r9, r9, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009272:	688e      	ldr	r6, [r1, #8]
 8009274:	fa06 f60c 	lsl.w	r6, r6, ip
 8009278:	ea46 0609 	orr.w	r6, r6, r9
      GPIOx->PUPDR = temp;
 800927c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800927e:	00e6      	lsls	r6, r4, #3
 8009280:	d559      	bpl.n	8009336 <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009282:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8009286:	f046 0601 	orr.w	r6, r6, #1
 800928a:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 800928e:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8009292:	f023 0703 	bic.w	r7, r3, #3
 8009296:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800929a:	f006 0601 	and.w	r6, r6, #1
 800929e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80092a2:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80092a4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092a8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80092aa:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80092ac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80092b0:	f04f 0c0f 	mov.w	ip, #15
 80092b4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80092b8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80092bc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80092c0:	d03b      	beq.n	800933a <HAL_GPIO_Init+0x196>
 80092c2:	4e25      	ldr	r6, [pc, #148]	; (8009358 <HAL_GPIO_Init+0x1b4>)
 80092c4:	42b0      	cmp	r0, r6
 80092c6:	d03a      	beq.n	800933e <HAL_GPIO_Init+0x19a>
 80092c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80092cc:	42b0      	cmp	r0, r6
 80092ce:	d038      	beq.n	8009342 <HAL_GPIO_Init+0x19e>
 80092d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80092d4:	42b0      	cmp	r0, r6
 80092d6:	d036      	beq.n	8009346 <HAL_GPIO_Init+0x1a2>
 80092d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80092dc:	42b0      	cmp	r0, r6
 80092de:	d034      	beq.n	800934a <HAL_GPIO_Init+0x1a6>
 80092e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80092e4:	42b0      	cmp	r0, r6
 80092e6:	d032      	beq.n	800934e <HAL_GPIO_Init+0x1aa>
 80092e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80092ec:	42b0      	cmp	r0, r6
 80092ee:	bf0c      	ite	eq
 80092f0:	2606      	moveq	r6, #6
 80092f2:	2607      	movne	r6, #7
 80092f4:	fa06 f60e 	lsl.w	r6, r6, lr
 80092f8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80092fc:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 80092fe:	682e      	ldr	r6, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 8009300:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009302:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8009306:	bf0c      	ite	eq
 8009308:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800930a:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 800930c:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 800930e:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009310:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8009314:	bf0c      	ite	eq
 8009316:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8009318:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800931a:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 800931c:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800931e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8009322:	bf0c      	ite	eq
 8009324:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8009326:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8009328:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 800932a:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800932c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800932e:	bf54      	ite	pl
 8009330:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8009332:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8009334:	60ee      	str	r6, [r5, #12]
    position++;
 8009336:	3301      	adds	r3, #1
 8009338:	e73a      	b.n	80091b0 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800933a:	2600      	movs	r6, #0
 800933c:	e7da      	b.n	80092f4 <HAL_GPIO_Init+0x150>
 800933e:	2601      	movs	r6, #1
 8009340:	e7d8      	b.n	80092f4 <HAL_GPIO_Init+0x150>
 8009342:	2602      	movs	r6, #2
 8009344:	e7d6      	b.n	80092f4 <HAL_GPIO_Init+0x150>
 8009346:	2603      	movs	r6, #3
 8009348:	e7d4      	b.n	80092f4 <HAL_GPIO_Init+0x150>
 800934a:	2604      	movs	r6, #4
 800934c:	e7d2      	b.n	80092f4 <HAL_GPIO_Init+0x150>
 800934e:	2605      	movs	r6, #5
 8009350:	e7d0      	b.n	80092f4 <HAL_GPIO_Init+0x150>
 8009352:	bf00      	nop
 8009354:	40010400 	.word	0x40010400
 8009358:	48000400 	.word	0x48000400
 800935c:	40021000 	.word	0x40021000

08009360 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009360:	6903      	ldr	r3, [r0, #16]
 8009362:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009364:	bf14      	ite	ne
 8009366:	2001      	movne	r0, #1
 8009368:	2000      	moveq	r0, #0
 800936a:	4770      	bx	lr

0800936c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800936c:	b10a      	cbz	r2, 8009372 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800936e:	6181      	str	r1, [r0, #24]
 8009370:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009372:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8009374:	4770      	bx	lr

08009376 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8009376:	6943      	ldr	r3, [r0, #20]
 8009378:	4059      	eors	r1, r3
 800937a:	6141      	str	r1, [r0, #20]
}
 800937c:	4770      	bx	lr
	...

08009380 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009380:	4a04      	ldr	r2, [pc, #16]	; (8009394 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8009382:	6951      	ldr	r1, [r2, #20]
 8009384:	4201      	tst	r1, r0
{
 8009386:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009388:	d002      	beq.n	8009390 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800938a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800938c:	f7fa ff88 	bl	80042a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8009390:	bd08      	pop	{r3, pc}
 8009392:	bf00      	nop
 8009394:	40010400 	.word	0x40010400

08009398 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009398:	6803      	ldr	r3, [r0, #0]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800939e:	bf44      	itt	mi
 80093a0:	2200      	movmi	r2, #0
 80093a2:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80093a8:	bf5e      	ittt	pl
 80093aa:	699a      	ldrpl	r2, [r3, #24]
 80093ac:	f042 0201 	orrpl.w	r2, r2, #1
 80093b0:	619a      	strpl	r2, [r3, #24]
  }
}
 80093b2:	4770      	bx	lr

080093b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80093b4:	b530      	push	{r4, r5, lr}
 80093b6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80093b8:	6804      	ldr	r4, [r0, #0]
 80093ba:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80093be:	431a      	orrs	r2, r3
 80093c0:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <I2C_TransferConfig+0x24>)
 80093c2:	6860      	ldr	r0, [r4, #4]
 80093c4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80093c8:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80093cc:	430a      	orrs	r2, r1
 80093ce:	ea20 0003 	bic.w	r0, r0, r3
 80093d2:	4302      	orrs	r2, r0
 80093d4:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80093d6:	bd30      	pop	{r4, r5, pc}
 80093d8:	03ff63ff 	.word	0x03ff63ff

080093dc <I2C_WaitOnFlagUntilTimeout>:
{
 80093dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e0:	9f06      	ldr	r7, [sp, #24]
 80093e2:	4604      	mov	r4, r0
 80093e4:	4688      	mov	r8, r1
 80093e6:	4616      	mov	r6, r2
 80093e8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093ea:	6822      	ldr	r2, [r4, #0]
 80093ec:	6993      	ldr	r3, [r2, #24]
 80093ee:	ea38 0303 	bics.w	r3, r8, r3
 80093f2:	bf0c      	ite	eq
 80093f4:	2301      	moveq	r3, #1
 80093f6:	2300      	movne	r3, #0
 80093f8:	42b3      	cmp	r3, r6
 80093fa:	d001      	beq.n	8009400 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80093fc:	2000      	movs	r0, #0
 80093fe:	e00b      	b.n	8009418 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8009400:	1c6b      	adds	r3, r5, #1
 8009402:	d0f3      	beq.n	80093ec <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009404:	b955      	cbnz	r5, 800941c <I2C_WaitOnFlagUntilTimeout+0x40>
        hi2c->State = HAL_I2C_STATE_READY;
 8009406:	2320      	movs	r3, #32
 8009408:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800940c:	2300      	movs	r3, #0
 800940e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009412:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8009416:	2003      	movs	r0, #3
}
 8009418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800941c:	f7ff fc10 	bl	8008c40 <HAL_GetTick>
 8009420:	1bc0      	subs	r0, r0, r7
 8009422:	42a8      	cmp	r0, r5
 8009424:	d9e1      	bls.n	80093ea <I2C_WaitOnFlagUntilTimeout+0xe>
 8009426:	e7ee      	b.n	8009406 <I2C_WaitOnFlagUntilTimeout+0x2a>

08009428 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009428:	6803      	ldr	r3, [r0, #0]
{
 800942a:	b570      	push	{r4, r5, r6, lr}
 800942c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800942e:	6998      	ldr	r0, [r3, #24]
 8009430:	f010 0010 	ands.w	r0, r0, #16
{
 8009434:	460d      	mov	r5, r1
 8009436:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009438:	d112      	bne.n	8009460 <I2C_IsAcknowledgeFailed+0x38>
}
 800943a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 800943c:	1c69      	adds	r1, r5, #1
 800943e:	d010      	beq.n	8009462 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009440:	b125      	cbz	r5, 800944c <I2C_IsAcknowledgeFailed+0x24>
 8009442:	f7ff fbfd 	bl	8008c40 <HAL_GetTick>
 8009446:	1b80      	subs	r0, r0, r6
 8009448:	4285      	cmp	r5, r0
 800944a:	d209      	bcs.n	8009460 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 800944c:	2320      	movs	r3, #32
 800944e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009452:	2300      	movs	r3, #0
 8009454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8009458:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 800945c:	2003      	movs	r0, #3
 800945e:	e7ec      	b.n	800943a <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	699a      	ldr	r2, [r3, #24]
 8009464:	0692      	lsls	r2, r2, #26
 8009466:	d5e9      	bpl.n	800943c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009468:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800946a:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800946c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800946e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009470:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8009472:	f7ff ff91 	bl	8009398 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8009476:	6822      	ldr	r2, [r4, #0]
 8009478:	6853      	ldr	r3, [r2, #4]
 800947a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800947e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8009482:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009486:	f023 0301 	bic.w	r3, r3, #1
 800948a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800948c:	2304      	movs	r3, #4
 800948e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009490:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009492:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009496:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800949a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 800949e:	2001      	movs	r0, #1
 80094a0:	e7cb      	b.n	800943a <I2C_IsAcknowledgeFailed+0x12>

080094a2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80094a2:	b570      	push	{r4, r5, r6, lr}
 80094a4:	4604      	mov	r4, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	075b      	lsls	r3, r3, #29
 80094b0:	d40e      	bmi.n	80094d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80094b2:	4632      	mov	r2, r6
 80094b4:	4629      	mov	r1, r5
 80094b6:	4620      	mov	r0, r4
 80094b8:	f7ff ffb6 	bl	8009428 <I2C_IsAcknowledgeFailed>
 80094bc:	b9f0      	cbnz	r0, 80094fc <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	0691      	lsls	r1, r2, #26
 80094c4:	d51c      	bpl.n	8009500 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	0752      	lsls	r2, r2, #29
 80094ca:	d503      	bpl.n	80094d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80094cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80094ce:	b10a      	cbz	r2, 80094d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80094d0:	2000      	movs	r0, #0
}
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094d4:	2120      	movs	r1, #32
 80094d6:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80094de:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80094e2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80094e6:	f022 0201 	bic.w	r2, r2, #1
 80094ea:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094ec:	2300      	movs	r3, #0
 80094ee:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80094f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80094f4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 80094fc:	2001      	movs	r0, #1
 80094fe:	e7e8      	b.n	80094d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009500:	b95d      	cbnz	r5, 800951a <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009502:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009504:	f043 0320 	orr.w	r3, r3, #32
 8009508:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800950a:	2320      	movs	r3, #32
 800950c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8009510:	2300      	movs	r3, #0
 8009512:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 8009516:	2003      	movs	r0, #3
 8009518:	e7db      	b.n	80094d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800951a:	f7ff fb91 	bl	8008c40 <HAL_GetTick>
 800951e:	1b80      	subs	r0, r0, r6
 8009520:	42a8      	cmp	r0, r5
 8009522:	d9c2      	bls.n	80094aa <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8009524:	e7ed      	b.n	8009502 <I2C_WaitOnRXNEFlagUntilTimeout+0x60>

08009526 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009526:	b570      	push	{r4, r5, r6, lr}
 8009528:	4604      	mov	r4, r0
 800952a:	460d      	mov	r5, r1
 800952c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	079b      	lsls	r3, r3, #30
 8009534:	d501      	bpl.n	800953a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8009536:	2000      	movs	r0, #0
 8009538:	e015      	b.n	8009566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800953a:	4632      	mov	r2, r6
 800953c:	4629      	mov	r1, r5
 800953e:	4620      	mov	r0, r4
 8009540:	f7ff ff72 	bl	8009428 <I2C_IsAcknowledgeFailed>
 8009544:	b9b0      	cbnz	r0, 8009574 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8009546:	1c6a      	adds	r2, r5, #1
 8009548:	d0f1      	beq.n	800952e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800954a:	b96d      	cbnz	r5, 8009568 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800954c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800954e:	f043 0320 	orr.w	r3, r3, #32
 8009552:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009554:	2320      	movs	r3, #32
 8009556:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800955a:	2300      	movs	r3, #0
 800955c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009560:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009564:	2003      	movs	r0, #3
}
 8009566:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009568:	f7ff fb6a 	bl	8008c40 <HAL_GetTick>
 800956c:	1b80      	subs	r0, r0, r6
 800956e:	42a8      	cmp	r0, r5
 8009570:	d9dd      	bls.n	800952e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8009572:	e7eb      	b.n	800954c <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8009574:	2001      	movs	r0, #1
 8009576:	e7f6      	b.n	8009566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>

08009578 <I2C_RequestMemoryWrite>:
{
 8009578:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800957c:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 8009580:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009582:	4b19      	ldr	r3, [pc, #100]	; (80095e8 <I2C_RequestMemoryWrite+0x70>)
 8009584:	9300      	str	r3, [sp, #0]
{
 8009586:	4604      	mov	r4, r0
 8009588:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800958a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800958e:	b2f2      	uxtb	r2, r6
 8009590:	f7ff ff10 	bl	80093b4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009594:	4642      	mov	r2, r8
 8009596:	4639      	mov	r1, r7
 8009598:	4620      	mov	r0, r4
 800959a:	f7ff ffc4 	bl	8009526 <I2C_WaitOnTXISFlagUntilTimeout>
 800959e:	b140      	cbz	r0, 80095b2 <I2C_RequestMemoryWrite+0x3a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d003      	beq.n	80095ae <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 80095a6:	2003      	movs	r0, #3
}
 80095a8:	b002      	add	sp, #8
 80095aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80095ae:	2001      	movs	r0, #1
 80095b0:	e7fa      	b.n	80095a8 <I2C_RequestMemoryWrite+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095b2:	2e01      	cmp	r6, #1
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	d10c      	bne.n	80095d2 <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095b8:	b2ed      	uxtb	r5, r5
 80095ba:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80095bc:	2200      	movs	r2, #0
 80095be:	f8cd 8000 	str.w	r8, [sp]
 80095c2:	463b      	mov	r3, r7
 80095c4:	2180      	movs	r1, #128	; 0x80
 80095c6:	4620      	mov	r0, r4
 80095c8:	f7ff ff08 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d0eb      	beq.n	80095a8 <I2C_RequestMemoryWrite+0x30>
 80095d0:	e7e9      	b.n	80095a6 <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095d2:	0a2a      	lsrs	r2, r5, #8
 80095d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095d6:	4639      	mov	r1, r7
 80095d8:	4642      	mov	r2, r8
 80095da:	4620      	mov	r0, r4
 80095dc:	f7ff ffa3 	bl	8009526 <I2C_WaitOnTXISFlagUntilTimeout>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d1dd      	bne.n	80095a0 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	e7e7      	b.n	80095b8 <I2C_RequestMemoryWrite+0x40>
 80095e8:	80002000 	.word	0x80002000

080095ec <I2C_RequestMemoryRead>:
{
 80095ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80095f0:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 80095f4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80095f6:	4b19      	ldr	r3, [pc, #100]	; (800965c <I2C_RequestMemoryRead+0x70>)
 80095f8:	9300      	str	r3, [sp, #0]
{
 80095fa:	4604      	mov	r4, r0
 80095fc:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80095fe:	2300      	movs	r3, #0
 8009600:	b2f2      	uxtb	r2, r6
 8009602:	f7ff fed7 	bl	80093b4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009606:	4642      	mov	r2, r8
 8009608:	4639      	mov	r1, r7
 800960a:	4620      	mov	r0, r4
 800960c:	f7ff ff8b 	bl	8009526 <I2C_WaitOnTXISFlagUntilTimeout>
 8009610:	b140      	cbz	r0, 8009624 <I2C_RequestMemoryRead+0x38>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009612:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009614:	2b04      	cmp	r3, #4
 8009616:	d003      	beq.n	8009620 <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8009618:	2003      	movs	r0, #3
}
 800961a:	b002      	add	sp, #8
 800961c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8009620:	2001      	movs	r0, #1
 8009622:	e7fa      	b.n	800961a <I2C_RequestMemoryRead+0x2e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009624:	2e01      	cmp	r6, #1
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	d10c      	bne.n	8009644 <I2C_RequestMemoryRead+0x58>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800962a:	b2ed      	uxtb	r5, r5
 800962c:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800962e:	2200      	movs	r2, #0
 8009630:	f8cd 8000 	str.w	r8, [sp]
 8009634:	463b      	mov	r3, r7
 8009636:	2140      	movs	r1, #64	; 0x40
 8009638:	4620      	mov	r0, r4
 800963a:	f7ff fecf 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 800963e:	2800      	cmp	r0, #0
 8009640:	d0eb      	beq.n	800961a <I2C_RequestMemoryRead+0x2e>
 8009642:	e7e9      	b.n	8009618 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009644:	0a2a      	lsrs	r2, r5, #8
 8009646:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009648:	4639      	mov	r1, r7
 800964a:	4642      	mov	r2, r8
 800964c:	4620      	mov	r0, r4
 800964e:	f7ff ff6a 	bl	8009526 <I2C_WaitOnTXISFlagUntilTimeout>
 8009652:	2800      	cmp	r0, #0
 8009654:	d1dd      	bne.n	8009612 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	e7e7      	b.n	800962a <I2C_RequestMemoryRead+0x3e>
 800965a:	bf00      	nop
 800965c:	80002000 	.word	0x80002000

08009660 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	4604      	mov	r4, r0
 8009664:	460d      	mov	r5, r1
 8009666:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	069b      	lsls	r3, r3, #26
 800966e:	d501      	bpl.n	8009674 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8009670:	2000      	movs	r0, #0
 8009672:	e013      	b.n	800969c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009674:	4632      	mov	r2, r6
 8009676:	4629      	mov	r1, r5
 8009678:	4620      	mov	r0, r4
 800967a:	f7ff fed5 	bl	8009428 <I2C_IsAcknowledgeFailed>
 800967e:	b9a0      	cbnz	r0, 80096aa <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009680:	b96d      	cbnz	r5, 800969e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009682:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009684:	f043 0320 	orr.w	r3, r3, #32
 8009688:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800968a:	2320      	movs	r3, #32
 800968c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009690:	2300      	movs	r3, #0
 8009692:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009696:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800969a:	2003      	movs	r0, #3
}
 800969c:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800969e:	f7ff facf 	bl	8008c40 <HAL_GetTick>
 80096a2:	1b80      	subs	r0, r0, r6
 80096a4:	42a8      	cmp	r0, r5
 80096a6:	d9df      	bls.n	8009668 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80096a8:	e7eb      	b.n	8009682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80096aa:	2001      	movs	r0, #1
 80096ac:	e7f6      	b.n	800969c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

080096ae <HAL_I2C_MspInit>:
}
 80096ae:	4770      	bx	lr

080096b0 <HAL_I2C_Init>:
{
 80096b0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80096b2:	4604      	mov	r4, r0
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d04a      	beq.n	800974e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80096bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80096c0:	b91b      	cbnz	r3, 80096ca <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80096c2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80096c6:	f7ff fff2 	bl	80096ae <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80096ca:	2324      	movs	r3, #36	; 0x24
 80096cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	f022 0201 	bic.w	r2, r2, #1
 80096d8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80096da:	6862      	ldr	r2, [r4, #4]
 80096dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096e0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096e8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80096ea:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80096ee:	2901      	cmp	r1, #1
 80096f0:	d124      	bne.n	800973c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80096f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096f6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80096fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009702:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800970a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800970c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8009710:	430a      	orrs	r2, r1
 8009712:	69a1      	ldr	r1, [r4, #24]
 8009714:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009718:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800971a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800971e:	430a      	orrs	r2, r1
 8009720:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	f042 0201 	orr.w	r2, r2, #1
 8009728:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800972a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800972c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800972e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009730:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009734:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009736:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800973a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800973c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009740:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009742:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009744:	bf04      	itt	eq
 8009746:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800974a:	605a      	streq	r2, [r3, #4]
 800974c:	e7d4      	b.n	80096f8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800974e:	2001      	movs	r0, #1
 8009750:	e7f3      	b.n	800973a <HAL_I2C_Init+0x8a>

08009752 <HAL_I2C_MspDeInit>:
 8009752:	4770      	bx	lr

08009754 <HAL_I2C_DeInit>:
{
 8009754:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009756:	4604      	mov	r4, r0
 8009758:	b198      	cbz	r0, 8009782 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800975a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800975c:	2324      	movs	r3, #36	; 0x24
 800975e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009762:	6813      	ldr	r3, [r2, #0]
 8009764:	f023 0301 	bic.w	r3, r3, #1
 8009768:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800976a:	f7ff fff2 	bl	8009752 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800976e:	2000      	movs	r0, #0
 8009770:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8009772:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8009776:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800977a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800977c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8009780:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009782:	2001      	movs	r0, #1
 8009784:	e7fc      	b.n	8009780 <HAL_I2C_DeInit+0x2c>
	...

08009788 <HAL_I2C_Master_Transmit>:
{
 8009788:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800978e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009792:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009794:	2b20      	cmp	r3, #32
{
 8009796:	4604      	mov	r4, r0
 8009798:	460e      	mov	r6, r1
 800979a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800979c:	f040 808a 	bne.w	80098b4 <HAL_I2C_Master_Transmit+0x12c>
    __HAL_LOCK(hi2c);
 80097a0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	f000 8085 	beq.w	80098b4 <HAL_I2C_Master_Transmit+0x12c>
 80097aa:	f04f 0a01 	mov.w	sl, #1
 80097ae:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80097b2:	f7ff fa45 	bl	8008c40 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80097b6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80097b8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80097ba:	9000      	str	r0, [sp, #0]
 80097bc:	4652      	mov	r2, sl
 80097be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097c2:	4620      	mov	r0, r4
 80097c4:	f7ff fe0a 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d148      	bne.n	800985e <HAL_I2C_Master_Transmit+0xd6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80097cc:	2321      	movs	r3, #33	; 0x21
 80097ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80097d2:	2310      	movs	r3, #16
 80097d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097d8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80097da:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80097e0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80097e8:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097ea:	4b33      	ldr	r3, [pc, #204]	; (80098b8 <HAL_I2C_Master_Transmit+0x130>)
 80097ec:	d925      	bls.n	800983a <HAL_I2C_Master_Transmit+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097ee:	22ff      	movs	r2, #255	; 0xff
 80097f0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80097f2:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80097f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097f8:	4631      	mov	r1, r6
 80097fa:	4620      	mov	r0, r4
 80097fc:	f7ff fdda 	bl	80093b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009800:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009802:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009804:	462a      	mov	r2, r5
 8009806:	4639      	mov	r1, r7
 8009808:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800980a:	b9f3      	cbnz	r3, 800984a <HAL_I2C_Master_Transmit+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800980c:	f7ff ff28 	bl	8009660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009810:	b9f0      	cbnz	r0, 8009850 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	2120      	movs	r1, #32
 8009816:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800981e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009822:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009826:	f022 0201 	bic.w	r2, r2, #1
 800982a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800982c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009830:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009834:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009838:	e00e      	b.n	8009858 <HAL_I2C_Master_Transmit+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 800983a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800983c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800983e:	b292      	uxth	r2, r2
 8009840:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	e7d6      	b.n	80097f8 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800984a:	f7ff fe6c 	bl	8009526 <I2C_WaitOnTXISFlagUntilTimeout>
 800984e:	b140      	cbz	r0, 8009862 <HAL_I2C_Master_Transmit+0xda>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009850:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009852:	2b04      	cmp	r3, #4
 8009854:	d103      	bne.n	800985e <HAL_I2C_Master_Transmit+0xd6>
          return HAL_ERROR;
 8009856:	2001      	movs	r0, #1
}
 8009858:	b002      	add	sp, #8
 800985a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          return HAL_TIMEOUT;
 800985e:	2003      	movs	r0, #3
 8009860:	e7fa      	b.n	8009858 <HAL_I2C_Master_Transmit+0xd0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	6262      	str	r2, [r4, #36]	; 0x24
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800986e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009870:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009872:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009874:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009876:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009878:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800987a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800987c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800987e:	2a00      	cmp	r2, #0
 8009880:	d1be      	bne.n	8009800 <HAL_I2C_Master_Transmit+0x78>
 8009882:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009884:	b29b      	uxth	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0ba      	beq.n	8009800 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800988a:	9500      	str	r5, [sp, #0]
 800988c:	463b      	mov	r3, r7
 800988e:	2180      	movs	r1, #128	; 0x80
 8009890:	4620      	mov	r0, r4
 8009892:	f7ff fda3 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 8009896:	2800      	cmp	r0, #0
 8009898:	d1e1      	bne.n	800985e <HAL_I2C_Master_Transmit+0xd6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800989a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800989c:	b29b      	uxth	r3, r3
 800989e:	2bff      	cmp	r3, #255	; 0xff
 80098a0:	d903      	bls.n	80098aa <HAL_I2C_Master_Transmit+0x122>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098a2:	22ff      	movs	r2, #255	; 0xff
 80098a4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80098a6:	9000      	str	r0, [sp, #0]
 80098a8:	e7a4      	b.n	80097f4 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 80098aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098ac:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80098ae:	b292      	uxth	r2, r2
 80098b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098b2:	e7c6      	b.n	8009842 <HAL_I2C_Master_Transmit+0xba>
    return HAL_BUSY;
 80098b4:	2002      	movs	r0, #2
 80098b6:	e7cf      	b.n	8009858 <HAL_I2C_Master_Transmit+0xd0>
 80098b8:	80002000 	.word	0x80002000

080098bc <HAL_I2C_Master_Receive>:
{
 80098bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80098c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80098c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80098c8:	2b20      	cmp	r3, #32
{
 80098ca:	4604      	mov	r4, r0
 80098cc:	460e      	mov	r6, r1
 80098ce:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80098d0:	f040 808a 	bne.w	80099e8 <HAL_I2C_Master_Receive+0x12c>
    __HAL_LOCK(hi2c);
 80098d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80098d8:	2b01      	cmp	r3, #1
 80098da:	f000 8085 	beq.w	80099e8 <HAL_I2C_Master_Receive+0x12c>
 80098de:	f04f 0a01 	mov.w	sl, #1
 80098e2:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80098e6:	f7ff f9ab 	bl	8008c40 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098ea:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80098ec:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098ee:	9000      	str	r0, [sp, #0]
 80098f0:	4652      	mov	r2, sl
 80098f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7ff fd70 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d148      	bne.n	8009992 <HAL_I2C_Master_Receive+0xd6>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009900:	2322      	movs	r3, #34	; 0x22
 8009902:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009906:	2310      	movs	r3, #16
 8009908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800990c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800990e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009912:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8009914:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009918:	b29b      	uxth	r3, r3
 800991a:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800991c:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800991e:	4b33      	ldr	r3, [pc, #204]	; (80099ec <HAL_I2C_Master_Receive+0x130>)
 8009920:	d925      	bls.n	800996e <HAL_I2C_Master_Receive+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009922:	22ff      	movs	r2, #255	; 0xff
 8009924:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009926:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800992c:	4631      	mov	r1, r6
 800992e:	4620      	mov	r0, r4
 8009930:	f7ff fd40 	bl	80093b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009934:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009936:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009938:	462a      	mov	r2, r5
 800993a:	4639      	mov	r1, r7
 800993c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800993e:	b9f3      	cbnz	r3, 800997e <HAL_I2C_Master_Receive+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009940:	f7ff fe8e 	bl	8009660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009944:	b9f0      	cbnz	r0, 8009984 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	2120      	movs	r1, #32
 800994a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009952:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009956:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800995a:	f022 0201 	bic.w	r2, r2, #1
 800995e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009960:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009964:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009968:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800996c:	e00e      	b.n	800998c <HAL_I2C_Master_Receive+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 800996e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009970:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009972:	b292      	uxth	r2, r2
 8009974:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	e7d6      	b.n	800992c <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800997e:	f7ff fd90 	bl	80094a2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009982:	b140      	cbz	r0, 8009996 <HAL_I2C_Master_Receive+0xda>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009986:	2b04      	cmp	r3, #4
 8009988:	d103      	bne.n	8009992 <HAL_I2C_Master_Receive+0xd6>
          return HAL_ERROR;
 800998a:	2001      	movs	r0, #1
}
 800998c:	b002      	add	sp, #8
 800998e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          return HAL_TIMEOUT;
 8009992:	2003      	movs	r0, #3
 8009994:	e7fa      	b.n	800998c <HAL_I2C_Master_Receive+0xd0>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800999a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800999c:	1c59      	adds	r1, r3, #1
 800999e:	6261      	str	r1, [r4, #36]	; 0x24
 80099a0:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80099a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80099a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80099a6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80099a8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80099aa:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80099ac:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80099ae:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80099b0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	d1be      	bne.n	8009934 <HAL_I2C_Master_Receive+0x78>
 80099b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0ba      	beq.n	8009934 <HAL_I2C_Master_Receive+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099be:	9500      	str	r5, [sp, #0]
 80099c0:	463b      	mov	r3, r7
 80099c2:	2180      	movs	r1, #128	; 0x80
 80099c4:	4620      	mov	r0, r4
 80099c6:	f7ff fd09 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d1e1      	bne.n	8009992 <HAL_I2C_Master_Receive+0xd6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	2bff      	cmp	r3, #255	; 0xff
 80099d4:	d903      	bls.n	80099de <HAL_I2C_Master_Receive+0x122>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80099d6:	22ff      	movs	r2, #255	; 0xff
 80099d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80099da:	9000      	str	r0, [sp, #0]
 80099dc:	e7a4      	b.n	8009928 <HAL_I2C_Master_Receive+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 80099de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80099e0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80099e2:	b292      	uxth	r2, r2
 80099e4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80099e6:	e7c6      	b.n	8009976 <HAL_I2C_Master_Receive+0xba>
    return HAL_BUSY;
 80099e8:	2002      	movs	r0, #2
 80099ea:	e7cf      	b.n	800998c <HAL_I2C_Master_Receive+0xd0>
 80099ec:	80002400 	.word	0x80002400

080099f0 <HAL_I2C_Mem_Write>:
{
 80099f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	b085      	sub	sp, #20
 80099f6:	469b      	mov	fp, r3
 80099f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80099fc:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80099fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009a02:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a06:	2b20      	cmp	r3, #32
{
 8009a08:	4604      	mov	r4, r0
 8009a0a:	460f      	mov	r7, r1
 8009a0c:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a0e:	f040 80a5 	bne.w	8009b5c <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8009a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a14:	b91b      	cbnz	r3, 8009a1e <HAL_I2C_Mem_Write+0x2e>
      return  HAL_ERROR;
 8009a16:	2001      	movs	r0, #1
}
 8009a18:	b005      	add	sp, #20
 8009a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8009a1e:	9b03      	ldr	r3, [sp, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d0f8      	beq.n	8009a16 <HAL_I2C_Mem_Write+0x26>
    __HAL_LOCK(hi2c);
 8009a24:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	f000 8097 	beq.w	8009b5c <HAL_I2C_Mem_Write+0x16c>
 8009a2e:	2501      	movs	r5, #1
 8009a30:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009a34:	f7ff f904 	bl	8008c40 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a38:	2319      	movs	r3, #25
 8009a3a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009a3c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a3e:	462a      	mov	r2, r5
 8009a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a44:	4620      	mov	r0, r4
 8009a46:	f7ff fcc9 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 8009a4a:	4680      	mov	r8, r0
 8009a4c:	b9c8      	cbnz	r0, 8009a82 <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a4e:	2321      	movs	r3, #33	; 0x21
 8009a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a54:	2340      	movs	r3, #64	; 0x40
 8009a56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8009a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a5c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8009a5e:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a60:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8009a62:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8009a64:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a66:	e9cd 9600 	strd	r9, r6, [sp]
 8009a6a:	465b      	mov	r3, fp
 8009a6c:	4652      	mov	r2, sl
 8009a6e:	4639      	mov	r1, r7
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7ff fd81 	bl	8009578 <I2C_RequestMemoryWrite>
 8009a76:	b130      	cbz	r0, 8009a86 <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a78:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009a7a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	d0c9      	beq.n	8009a16 <HAL_I2C_Mem_Write+0x26>
          return HAL_TIMEOUT;
 8009a82:	2003      	movs	r0, #3
 8009a84:	e7c8      	b.n	8009a18 <HAL_I2C_Mem_Write+0x28>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	2bff      	cmp	r3, #255	; 0xff
 8009a8c:	d910      	bls.n	8009ab0 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a8e:	22ff      	movs	r2, #255	; 0xff
 8009a90:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009a92:	9000      	str	r0, [sp, #0]
 8009a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a98:	4639      	mov	r1, r7
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7ff fc8a 	bl	80093b4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009aa0:	4632      	mov	r2, r6
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f7ff fd3e 	bl	8009526 <I2C_WaitOnTXISFlagUntilTimeout>
 8009aaa:	b148      	cbz	r0, 8009ac0 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009aae:	e7e6      	b.n	8009a7e <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8009ab0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ab2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009ab4:	b292      	uxth	r2, r2
 8009ab6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009abc:	b2d2      	uxtb	r2, r2
 8009abe:	e7eb      	b.n	8009a98 <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	6262      	str	r2, [r4, #36]	; 0x24
 8009ac6:	6822      	ldr	r2, [r4, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8009acc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009ace:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009ad0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009ad2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009ad4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009ad6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009ad8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009ada:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009adc:	b9ba      	cbnz	r2, 8009b0e <HAL_I2C_Mem_Write+0x11e>
 8009ade:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	b1a3      	cbz	r3, 8009b0e <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ae4:	9600      	str	r6, [sp, #0]
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	2180      	movs	r1, #128	; 0x80
 8009aea:	4620      	mov	r0, r4
 8009aec:	f7ff fc76 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1c6      	bne.n	8009a82 <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009af4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2bff      	cmp	r3, #255	; 0xff
 8009afa:	d927      	bls.n	8009b4c <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009afc:	22ff      	movs	r2, #255	; 0xff
 8009afe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009b00:	9000      	str	r0, [sp, #0]
 8009b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009b06:	4639      	mov	r1, r7
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f7ff fc53 	bl	80093b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8009b0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1c4      	bne.n	8009aa0 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b16:	4632      	mov	r2, r6
 8009b18:	4649      	mov	r1, r9
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f7ff fda0 	bl	8009660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d1c3      	bne.n	8009aac <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	2120      	movs	r1, #32
 8009b28:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009b30:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009b34:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009b38:	f022 0201 	bic.w	r2, r2, #1
 8009b3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009b3e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009b42:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009b46:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009b4a:	e765      	b.n	8009a18 <HAL_I2C_Mem_Write+0x28>
          hi2c->XferSize = hi2c->XferCount;
 8009b4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009b4e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009b50:	b292      	uxth	r2, r2
 8009b52:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b58:	b2d2      	uxtb	r2, r2
 8009b5a:	e7d4      	b.n	8009b06 <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 8009b5c:	2002      	movs	r0, #2
 8009b5e:	e75b      	b.n	8009a18 <HAL_I2C_Mem_Write+0x28>

08009b60 <HAL_I2C_Mem_Read>:
{
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	b085      	sub	sp, #20
 8009b66:	469b      	mov	fp, r3
 8009b68:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009b6c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009b72:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b76:	2b20      	cmp	r3, #32
{
 8009b78:	4604      	mov	r4, r0
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b7e:	f040 80a8 	bne.w	8009cd2 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8009b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b84:	b91b      	cbnz	r3, 8009b8e <HAL_I2C_Mem_Read+0x2e>
      return  HAL_ERROR;
 8009b86:	2001      	movs	r0, #1
}
 8009b88:	b005      	add	sp, #20
 8009b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8009b8e:	9b03      	ldr	r3, [sp, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0f8      	beq.n	8009b86 <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8009b94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	f000 809a 	beq.w	8009cd2 <HAL_I2C_Mem_Read+0x172>
 8009b9e:	2501      	movs	r5, #1
 8009ba0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009ba4:	f7ff f84c 	bl	8008c40 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ba8:	2319      	movs	r3, #25
 8009baa:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009bac:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009bae:	462a      	mov	r2, r5
 8009bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f7ff fc11 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 8009bba:	4680      	mov	r8, r0
 8009bbc:	b9c8      	cbnz	r0, 8009bf2 <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009bbe:	2322      	movs	r3, #34	; 0x22
 8009bc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bc4:	2340      	movs	r3, #64	; 0x40
 8009bc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8009bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bcc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8009bce:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bd0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8009bd2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8009bd4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bd6:	e9cd 9600 	strd	r9, r6, [sp]
 8009bda:	465b      	mov	r3, fp
 8009bdc:	4652      	mov	r2, sl
 8009bde:	4639      	mov	r1, r7
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7ff fd03 	bl	80095ec <I2C_RequestMemoryRead>
 8009be6:	b130      	cbz	r0, 8009bf6 <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009be8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009bea:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bee:	2b04      	cmp	r3, #4
 8009bf0:	d0c9      	beq.n	8009b86 <HAL_I2C_Mem_Read+0x26>
        return HAL_TIMEOUT;
 8009bf2:	2003      	movs	r0, #3
 8009bf4:	e7c8      	b.n	8009b88 <HAL_I2C_Mem_Read+0x28>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	2bff      	cmp	r3, #255	; 0xff
 8009bfc:	4b36      	ldr	r3, [pc, #216]	; (8009cd8 <HAL_I2C_Mem_Read+0x178>)
 8009bfe:	d944      	bls.n	8009c8a <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c00:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009c02:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c04:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f7ff fbd1 	bl	80093b4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009c12:	9600      	str	r6, [sp, #0]
 8009c14:	464b      	mov	r3, r9
 8009c16:	2200      	movs	r2, #0
 8009c18:	2104      	movs	r1, #4
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7ff fbde 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d1e6      	bne.n	8009bf2 <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c2a:	1c59      	adds	r1, r3, #1
 8009c2c:	6261      	str	r1, [r4, #36]	; 0x24
 8009c2e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8009c30:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009c32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009c34:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009c36:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009c38:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009c3a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009c3c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009c3e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009c40:	b9ba      	cbnz	r2, 8009c72 <HAL_I2C_Mem_Read+0x112>
 8009c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	b1a3      	cbz	r3, 8009c72 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009c48:	9600      	str	r6, [sp, #0]
 8009c4a:	464b      	mov	r3, r9
 8009c4c:	2180      	movs	r1, #128	; 0x80
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f7ff fbc4 	bl	80093dc <I2C_WaitOnFlagUntilTimeout>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d1cc      	bne.n	8009bf2 <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	2bff      	cmp	r3, #255	; 0xff
 8009c5e:	d91c      	bls.n	8009c9a <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c60:	22ff      	movs	r2, #255	; 0xff
 8009c62:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c64:	9000      	str	r0, [sp, #0]
 8009c66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f7ff fba1 	bl	80093b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8009c72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1cb      	bne.n	8009c12 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c7a:	4632      	mov	r2, r6
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7ff fcee 	bl	8009660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c84:	b188      	cbz	r0, 8009caa <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009c88:	e7b1      	b.n	8009bee <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8009c8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009c8c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009c8e:	b292      	uxth	r2, r2
 8009c90:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	e7b7      	b.n	8009c0a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8009c9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c9c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009c9e:	b292      	uxth	r2, r2
 8009ca0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ca6:	b2d2      	uxtb	r2, r2
 8009ca8:	e7df      	b.n	8009c6a <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	2120      	movs	r1, #32
 8009cae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009cb6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009cba:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009cbe:	f022 0201 	bic.w	r2, r2, #1
 8009cc2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009cc4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009cc8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ccc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009cd0:	e75a      	b.n	8009b88 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8009cd2:	2002      	movs	r0, #2
 8009cd4:	e758      	b.n	8009b88 <HAL_I2C_Mem_Read+0x28>
 8009cd6:	bf00      	nop
 8009cd8:	80002400 	.word	0x80002400

08009cdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009cdc:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cde:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	b2dc      	uxtb	r4, r3
 8009ce6:	d11d      	bne.n	8009d24 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ce8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d019      	beq.n	8009d24 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cf0:	2324      	movs	r3, #36	; 0x24
 8009cf2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cf6:	6803      	ldr	r3, [r0, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	f022 0201 	bic.w	r2, r2, #1
 8009cfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4311      	orrs	r1, r2
 8009d0c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	f042 0201 	orr.w	r2, r2, #1
 8009d14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d16:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009d18:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009d1c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009d20:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009d22:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009d24:	2002      	movs	r0, #2
 8009d26:	e7fc      	b.n	8009d22 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08009d28 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <HAL_PWREx_GetVoltageRange+0xc>)
 8009d2a:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8009d2c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	40007000 	.word	0x40007000

08009d38 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d38:	4b16      	ldr	r3, [pc, #88]	; (8009d94 <HAL_PWREx_ControlVoltageScaling+0x5c>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d3a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d40:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d44:	d11c      	bne.n	8009d80 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d46:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009d4a:	d101      	bne.n	8009d50 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d50:	681a      	ldr	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8009d52:	4911      	ldr	r1, [pc, #68]	; (8009d98 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d54:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8009d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d5c:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8009d5e:	4a0f      	ldr	r2, [pc, #60]	; (8009d9c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	fbb2 f1f1 	udiv	r1, r2, r1
 8009d66:	2232      	movs	r2, #50	; 0x32
 8009d68:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8009d6a:	b112      	cbz	r2, 8009d72 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8009d6c:	6959      	ldr	r1, [r3, #20]
 8009d6e:	0549      	lsls	r1, r1, #21
 8009d70:	d404      	bmi.n	8009d7c <HAL_PWREx_ControlVoltageScaling+0x44>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	055b      	lsls	r3, r3, #21
 8009d76:	d5e9      	bpl.n	8009d4c <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8009d78:	2003      	movs	r0, #3
}  
 8009d7a:	4770      	bx	lr
        wait_loop_index--;
 8009d7c:	3a01      	subs	r2, #1
 8009d7e:	e7f4      	b.n	8009d6a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009d80:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009d84:	bf1f      	itttt	ne
 8009d86:	681a      	ldrne	r2, [r3, #0]
 8009d88:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8009d8c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8009d90:	601a      	strne	r2, [r3, #0]
 8009d92:	e7db      	b.n	8009d4c <HAL_PWREx_ControlVoltageScaling+0x14>
 8009d94:	40007000 	.word	0x40007000
 8009d98:	000f4240 	.word	0x000f4240
 8009d9c:	20000590 	.word	0x20000590

08009da0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009da2:	4d1e      	ldr	r5, [pc, #120]	; (8009e1c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009da4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009da6:	00da      	lsls	r2, r3, #3
{
 8009da8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009daa:	d518      	bpl.n	8009dde <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009dac:	f7ff ffbc 	bl	8009d28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009db0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009db4:	d123      	bne.n	8009dfe <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009db6:	2c80      	cmp	r4, #128	; 0x80
 8009db8:	d929      	bls.n	8009e0e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009dba:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009dbc:	bf8c      	ite	hi
 8009dbe:	2402      	movhi	r4, #2
 8009dc0:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009dc2:	4917      	ldr	r1, [pc, #92]	; (8009e20 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8009dc4:	680a      	ldr	r2, [r1, #0]
 8009dc6:	f022 0207 	bic.w	r2, r2, #7
 8009dca:	4322      	orrs	r2, r4
 8009dcc:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8009dce:	6808      	ldr	r0, [r1, #0]
 8009dd0:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8009dd4:	1b00      	subs	r0, r0, r4
 8009dd6:	bf18      	it	ne
 8009dd8:	2001      	movne	r0, #1
 8009dda:	b003      	add	sp, #12
 8009ddc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8009dde:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009de4:	65ab      	str	r3, [r5, #88]	; 0x58
 8009de6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8009df0:	f7ff ff9a 	bl	8009d28 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8009df4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dfa:	65ab      	str	r3, [r5, #88]	; 0x58
 8009dfc:	e7d8      	b.n	8009db0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8009dfe:	2c80      	cmp	r4, #128	; 0x80
 8009e00:	d807      	bhi.n	8009e12 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8009e02:	d008      	beq.n	8009e16 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8009e04:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8009e08:	425c      	negs	r4, r3
 8009e0a:	415c      	adcs	r4, r3
 8009e0c:	e7d9      	b.n	8009dc2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009e0e:	2400      	movs	r4, #0
 8009e10:	e7d7      	b.n	8009dc2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8009e12:	2403      	movs	r4, #3
 8009e14:	e7d5      	b.n	8009dc2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8009e16:	2402      	movs	r4, #2
 8009e18:	e7d3      	b.n	8009dc2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8009e1a:	bf00      	nop
 8009e1c:	40021000 	.word	0x40021000
 8009e20:	40022000 	.word	0x40022000

08009e24 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009e24:	4b2f      	ldr	r3, [pc, #188]	; (8009ee4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	f012 0f0c 	tst.w	r2, #12
{
 8009e2c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009e2e:	d009      	beq.n	8009e44 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009e36:	2a0c      	cmp	r2, #12
 8009e38:	d12e      	bne.n	8009e98 <HAL_RCC_GetSysClockFreq+0x74>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8009e3a:	68da      	ldr	r2, [r3, #12]
 8009e3c:	f002 0203 	and.w	r2, r2, #3
 8009e40:	2a01      	cmp	r2, #1
 8009e42:	d129      	bne.n	8009e98 <HAL_RCC_GetSysClockFreq+0x74>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8009e44:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8009e46:	4928      	ldr	r1, [pc, #160]	; (8009ee8 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8009e48:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009e4a:	bf55      	itete	pl
 8009e4c:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e50:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009e52:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e56:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8009e5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8009e5e:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8009e60:	f011 0f0c 	tst.w	r1, #12
 8009e64:	bf0c      	ite	eq
 8009e66:	4610      	moveq	r0, r2
 8009e68:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009e6a:	6899      	ldr	r1, [r3, #8]
 8009e6c:	f001 010c 	and.w	r1, r1, #12
 8009e70:	290c      	cmp	r1, #12
 8009e72:	d131      	bne.n	8009ed8 <HAL_RCC_GetSysClockFreq+0xb4>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e74:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e76:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e78:	f004 0403 	and.w	r4, r4, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e7c:	f3c0 1002 	ubfx	r0, r0, #4, #3
    switch (pllsource)
 8009e80:	2c02      	cmp	r4, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e82:	f100 0101 	add.w	r1, r0, #1
    switch (pllsource)
 8009e86:	d019      	beq.n	8009ebc <HAL_RCC_GetSysClockFreq+0x98>
 8009e88:	2c03      	cmp	r4, #3
 8009e8a:	d026      	beq.n	8009eda <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e8c:	fbb2 f2f1 	udiv	r2, r2, r1
 8009e90:	68d8      	ldr	r0, [r3, #12]
 8009e92:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8009e96:	e017      	b.n	8009ec8 <HAL_RCC_GetSysClockFreq+0xa4>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	f002 020c 	and.w	r2, r2, #12
 8009e9e:	2a04      	cmp	r2, #4
 8009ea0:	d007      	beq.n	8009eb2 <HAL_RCC_GetSysClockFreq+0x8e>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	f002 020c 	and.w	r2, r2, #12
 8009ea8:	2a08      	cmp	r2, #8
 8009eaa:	d104      	bne.n	8009eb6 <HAL_RCC_GetSysClockFreq+0x92>
    sysclockfreq = HSE_VALUE;
 8009eac:	480f      	ldr	r0, [pc, #60]	; (8009eec <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8009eae:	2200      	movs	r2, #0
 8009eb0:	e7db      	b.n	8009e6a <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8009eb2:	480f      	ldr	r0, [pc, #60]	; (8009ef0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009eb4:	e7fb      	b.n	8009eae <HAL_RCC_GetSysClockFreq+0x8a>
  uint32_t sysclockfreq = 0U;
 8009eb6:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8009eb8:	4602      	mov	r2, r0
 8009eba:	e7d6      	b.n	8009e6a <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	480c      	ldr	r0, [pc, #48]	; (8009ef0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009ec0:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ec4:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8009ece:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ed0:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009ed2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8009ed4:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8009ed8:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009eda:	68da      	ldr	r2, [r3, #12]
 8009edc:	4803      	ldr	r0, [pc, #12]	; (8009eec <HAL_RCC_GetSysClockFreq+0xc8>)
 8009ede:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8009ee2:	e7ef      	b.n	8009ec4 <HAL_RCC_GetSysClockFreq+0xa0>
 8009ee4:	40021000 	.word	0x40021000
 8009ee8:	08028658 	.word	0x08028658
 8009eec:	007a1200 	.word	0x007a1200
 8009ef0:	00f42400 	.word	0x00f42400

08009ef4 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009ef4:	6803      	ldr	r3, [r0, #0]
{
 8009ef6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009efa:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009efc:	06d8      	lsls	r0, r3, #27
 8009efe:	d53b      	bpl.n	8009f78 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8009f00:	4ca9      	ldr	r4, [pc, #676]	; (800a1a8 <HAL_RCC_OscConfig+0x2b4>)
 8009f02:	68a3      	ldr	r3, [r4, #8]
 8009f04:	f013 0f0c 	tst.w	r3, #12
 8009f08:	d160      	bne.n	8009fcc <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	0799      	lsls	r1, r3, #30
 8009f0e:	d505      	bpl.n	8009f1c <HAL_RCC_OscConfig+0x28>
 8009f10:	69ab      	ldr	r3, [r5, #24]
 8009f12:	b91b      	cbnz	r3, 8009f1c <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8009f14:	2001      	movs	r0, #1
}
 8009f16:	b002      	add	sp, #8
 8009f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	6a28      	ldr	r0, [r5, #32]
 8009f20:	071a      	lsls	r2, r3, #28
 8009f22:	bf56      	itet	pl
 8009f24:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8009f28:	6823      	ldrmi	r3, [r4, #0]
 8009f2a:	091b      	lsrpl	r3, r3, #4
 8009f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f30:	4298      	cmp	r0, r3
 8009f32:	d936      	bls.n	8009fa2 <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009f34:	f7ff ff34 	bl	8009da0 <RCC_SetFlashLatencyFromMSIRange>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d1eb      	bne.n	8009f14 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	f043 0308 	orr.w	r3, r3, #8
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	6a2a      	ldr	r2, [r5, #32]
 8009f48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009f50:	6863      	ldr	r3, [r4, #4]
 8009f52:	69ea      	ldr	r2, [r5, #28]
 8009f54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f5c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009f5e:	f7ff ff61 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 8009f62:	68a3      	ldr	r3, [r4, #8]
 8009f64:	4a91      	ldr	r2, [pc, #580]	; (800a1ac <HAL_RCC_OscConfig+0x2b8>)
 8009f66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009f6a:	5cd3      	ldrb	r3, [r2, r3]
 8009f6c:	40d8      	lsrs	r0, r3
 8009f6e:	4b90      	ldr	r3, [pc, #576]	; (800a1b0 <HAL_RCC_OscConfig+0x2bc>)
 8009f70:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8009f72:	200f      	movs	r0, #15
 8009f74:	f7fe fe3a 	bl	8008bec <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	07de      	lsls	r6, r3, #31
 8009f7c:	d45b      	bmi.n	800a036 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f7e:	682b      	ldr	r3, [r5, #0]
 8009f80:	079c      	lsls	r4, r3, #30
 8009f82:	f100 80a3 	bmi.w	800a0cc <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f86:	682b      	ldr	r3, [r5, #0]
 8009f88:	0719      	lsls	r1, r3, #28
 8009f8a:	f100 80e1 	bmi.w	800a150 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f8e:	682b      	ldr	r3, [r5, #0]
 8009f90:	075a      	lsls	r2, r3, #29
 8009f92:	f100 810f 	bmi.w	800a1b4 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009f96:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	f040 8176 	bne.w	800a28a <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e7b9      	b.n	8009f16 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	f043 0308 	orr.w	r3, r3, #8
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fb0:	4303      	orrs	r3, r0
 8009fb2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009fb4:	6863      	ldr	r3, [r4, #4]
 8009fb6:	69ea      	ldr	r2, [r5, #28]
 8009fb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fc0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009fc2:	f7ff feed 	bl	8009da0 <RCC_SetFlashLatencyFromMSIRange>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d0c9      	beq.n	8009f5e <HAL_RCC_OscConfig+0x6a>
 8009fca:	e7a3      	b.n	8009f14 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009fcc:	69ab      	ldr	r3, [r5, #24]
 8009fce:	b313      	cbz	r3, 800a016 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	f043 0301 	orr.w	r3, r3, #1
 8009fd6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009fd8:	f7fe fe32 	bl	8008c40 <HAL_GetTick>
 8009fdc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	079b      	lsls	r3, r3, #30
 8009fe2:	d511      	bpl.n	800a008 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	f043 0308 	orr.w	r3, r3, #8
 8009fea:	6023      	str	r3, [r4, #0]
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	6a2a      	ldr	r2, [r5, #32]
 8009ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	69ea      	ldr	r2, [r5, #28]
 8009ffc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a004:	6063      	str	r3, [r4, #4]
 800a006:	e7b7      	b.n	8009f78 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a008:	f7fe fe1a 	bl	8008c40 <HAL_GetTick>
 800a00c:	1b80      	subs	r0, r0, r6
 800a00e:	2802      	cmp	r0, #2
 800a010:	d9e5      	bls.n	8009fde <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 800a012:	2003      	movs	r0, #3
 800a014:	e77f      	b.n	8009f16 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	f023 0301 	bic.w	r3, r3, #1
 800a01c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a01e:	f7fe fe0f 	bl	8008c40 <HAL_GetTick>
 800a022:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	079f      	lsls	r7, r3, #30
 800a028:	d5a6      	bpl.n	8009f78 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a02a:	f7fe fe09 	bl	8008c40 <HAL_GetTick>
 800a02e:	1b80      	subs	r0, r0, r6
 800a030:	2802      	cmp	r0, #2
 800a032:	d9f7      	bls.n	800a024 <HAL_RCC_OscConfig+0x130>
 800a034:	e7ed      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800a036:	4c5c      	ldr	r4, [pc, #368]	; (800a1a8 <HAL_RCC_OscConfig+0x2b4>)
 800a038:	68a3      	ldr	r3, [r4, #8]
 800a03a:	f003 030c 	and.w	r3, r3, #12
 800a03e:	2b08      	cmp	r3, #8
 800a040:	d009      	beq.n	800a056 <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a042:	68a3      	ldr	r3, [r4, #8]
 800a044:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800a048:	2b0c      	cmp	r3, #12
 800a04a:	d10b      	bne.n	800a064 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a04c:	68e3      	ldr	r3, [r4, #12]
 800a04e:	f003 0303 	and.w	r3, r3, #3
 800a052:	2b03      	cmp	r3, #3
 800a054:	d106      	bne.n	800a064 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	0398      	lsls	r0, r3, #14
 800a05a:	d590      	bpl.n	8009f7e <HAL_RCC_OscConfig+0x8a>
 800a05c:	686b      	ldr	r3, [r5, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d18d      	bne.n	8009f7e <HAL_RCC_OscConfig+0x8a>
 800a062:	e757      	b.n	8009f14 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a064:	686b      	ldr	r3, [r5, #4]
 800a066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a06a:	d110      	bne.n	800a08e <HAL_RCC_OscConfig+0x19a>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a072:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a074:	f7fe fde4 	bl	8008c40 <HAL_GetTick>
 800a078:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	0399      	lsls	r1, r3, #14
 800a07e:	f53f af7e 	bmi.w	8009f7e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a082:	f7fe fddd 	bl	8008c40 <HAL_GetTick>
 800a086:	1b80      	subs	r0, r0, r6
 800a088:	2864      	cmp	r0, #100	; 0x64
 800a08a:	d9f6      	bls.n	800a07a <HAL_RCC_OscConfig+0x186>
 800a08c:	e7c1      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a08e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a092:	d104      	bne.n	800a09e <HAL_RCC_OscConfig+0x1aa>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	e7e6      	b.n	800a06c <HAL_RCC_OscConfig+0x178>
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a0a4:	6022      	str	r2, [r4, #0]
 800a0a6:	6822      	ldr	r2, [r4, #0]
 800a0a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a0ac:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1e0      	bne.n	800a074 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 800a0b2:	f7fe fdc5 	bl	8008c40 <HAL_GetTick>
 800a0b6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	039a      	lsls	r2, r3, #14
 800a0bc:	f57f af5f 	bpl.w	8009f7e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0c0:	f7fe fdbe 	bl	8008c40 <HAL_GetTick>
 800a0c4:	1b80      	subs	r0, r0, r6
 800a0c6:	2864      	cmp	r0, #100	; 0x64
 800a0c8:	d9f6      	bls.n	800a0b8 <HAL_RCC_OscConfig+0x1c4>
 800a0ca:	e7a2      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800a0cc:	4c36      	ldr	r4, [pc, #216]	; (800a1a8 <HAL_RCC_OscConfig+0x2b4>)
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	f003 030c 	and.w	r3, r3, #12
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d009      	beq.n	800a0ec <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a0d8:	68a3      	ldr	r3, [r4, #8]
 800a0da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800a0de:	2b0c      	cmp	r3, #12
 800a0e0:	d113      	bne.n	800a10a <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a0e2:	68e3      	ldr	r3, [r4, #12]
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d10e      	bne.n	800a10a <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	055b      	lsls	r3, r3, #21
 800a0f0:	d503      	bpl.n	800a0fa <HAL_RCC_OscConfig+0x206>
 800a0f2:	68eb      	ldr	r3, [r5, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f43f af0d 	beq.w	8009f14 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0fa:	6863      	ldr	r3, [r4, #4]
 800a0fc:	692a      	ldr	r2, [r5, #16]
 800a0fe:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800a102:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a106:	6063      	str	r3, [r4, #4]
 800a108:	e73d      	b.n	8009f86 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a10a:	68eb      	ldr	r3, [r5, #12]
 800a10c:	b17b      	cbz	r3, 800a12e <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a114:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a116:	f7fe fd93 	bl	8008c40 <HAL_GetTick>
 800a11a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	055f      	lsls	r7, r3, #21
 800a120:	d4eb      	bmi.n	800a0fa <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a122:	f7fe fd8d 	bl	8008c40 <HAL_GetTick>
 800a126:	1b80      	subs	r0, r0, r6
 800a128:	2802      	cmp	r0, #2
 800a12a:	d9f7      	bls.n	800a11c <HAL_RCC_OscConfig+0x228>
 800a12c:	e771      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a134:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a136:	f7fe fd83 	bl	8008c40 <HAL_GetTick>
 800a13a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	0558      	lsls	r0, r3, #21
 800a140:	f57f af21 	bpl.w	8009f86 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a144:	f7fe fd7c 	bl	8008c40 <HAL_GetTick>
 800a148:	1b80      	subs	r0, r0, r6
 800a14a:	2802      	cmp	r0, #2
 800a14c:	d9f6      	bls.n	800a13c <HAL_RCC_OscConfig+0x248>
 800a14e:	e760      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a150:	696b      	ldr	r3, [r5, #20]
 800a152:	4c15      	ldr	r4, [pc, #84]	; (800a1a8 <HAL_RCC_OscConfig+0x2b4>)
 800a154:	b19b      	cbz	r3, 800a17e <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 800a156:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a15a:	f043 0301 	orr.w	r3, r3, #1
 800a15e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a162:	f7fe fd6d 	bl	8008c40 <HAL_GetTick>
 800a166:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800a168:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a16c:	079b      	lsls	r3, r3, #30
 800a16e:	f53f af0e 	bmi.w	8009f8e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a172:	f7fe fd65 	bl	8008c40 <HAL_GetTick>
 800a176:	1b80      	subs	r0, r0, r6
 800a178:	2802      	cmp	r0, #2
 800a17a:	d9f5      	bls.n	800a168 <HAL_RCC_OscConfig+0x274>
 800a17c:	e749      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 800a17e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a182:	f023 0301 	bic.w	r3, r3, #1
 800a186:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a18a:	f7fe fd59 	bl	8008c40 <HAL_GetTick>
 800a18e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800a190:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a194:	079f      	lsls	r7, r3, #30
 800a196:	f57f aefa 	bpl.w	8009f8e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a19a:	f7fe fd51 	bl	8008c40 <HAL_GetTick>
 800a19e:	1b80      	subs	r0, r0, r6
 800a1a0:	2802      	cmp	r0, #2
 800a1a2:	d9f5      	bls.n	800a190 <HAL_RCC_OscConfig+0x29c>
 800a1a4:	e735      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
 800a1a6:	bf00      	nop
 800a1a8:	40021000 	.word	0x40021000
 800a1ac:	08028688 	.word	0x08028688
 800a1b0:	20000590 	.word	0x20000590
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a1b4:	4c66      	ldr	r4, [pc, #408]	; (800a350 <HAL_RCC_OscConfig+0x45c>)
 800a1b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1b8:	00de      	lsls	r6, r3, #3
 800a1ba:	d427      	bmi.n	800a20c <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c2:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ca:	9301      	str	r3, [sp, #4]
 800a1cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a1ce:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1d0:	4e60      	ldr	r6, [pc, #384]	; (800a354 <HAL_RCC_OscConfig+0x460>)
 800a1d2:	6833      	ldr	r3, [r6, #0]
 800a1d4:	05d8      	lsls	r0, r3, #23
 800a1d6:	d51b      	bpl.n	800a210 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1d8:	68ab      	ldr	r3, [r5, #8]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d129      	bne.n	800a232 <HAL_RCC_OscConfig+0x33e>
 800a1de:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800a1ea:	f7fe fd29 	bl	8008c40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ee:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a1f2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800a1f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a1f8:	079a      	lsls	r2, r3, #30
 800a1fa:	d540      	bpl.n	800a27e <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 800a1fc:	2f00      	cmp	r7, #0
 800a1fe:	f43f aeca 	beq.w	8009f96 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a202:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a208:	65a3      	str	r3, [r4, #88]	; 0x58
 800a20a:	e6c4      	b.n	8009f96 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 800a20c:	2700      	movs	r7, #0
 800a20e:	e7df      	b.n	800a1d0 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a210:	6833      	ldr	r3, [r6, #0]
 800a212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a216:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800a218:	f7fe fd12 	bl	8008c40 <HAL_GetTick>
 800a21c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a21e:	6833      	ldr	r3, [r6, #0]
 800a220:	05d9      	lsls	r1, r3, #23
 800a222:	d4d9      	bmi.n	800a1d8 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a224:	f7fe fd0c 	bl	8008c40 <HAL_GetTick>
 800a228:	eba0 0008 	sub.w	r0, r0, r8
 800a22c:	2802      	cmp	r0, #2
 800a22e:	d9f6      	bls.n	800a21e <HAL_RCC_OscConfig+0x32a>
 800a230:	e6ef      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a232:	2b05      	cmp	r3, #5
 800a234:	d106      	bne.n	800a244 <HAL_RCC_OscConfig+0x350>
 800a236:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a23a:	f043 0304 	orr.w	r3, r3, #4
 800a23e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800a242:	e7cc      	b.n	800a1de <HAL_RCC_OscConfig+0x2ea>
 800a244:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a248:	f022 0201 	bic.w	r2, r2, #1
 800a24c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800a250:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a254:	f022 0204 	bic.w	r2, r2, #4
 800a258:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1c4      	bne.n	800a1ea <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800a260:	f7fe fcee 	bl	8008c40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a264:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a268:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800a26a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a26e:	079b      	lsls	r3, r3, #30
 800a270:	d5c4      	bpl.n	800a1fc <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a272:	f7fe fce5 	bl	8008c40 <HAL_GetTick>
 800a276:	1b80      	subs	r0, r0, r6
 800a278:	4540      	cmp	r0, r8
 800a27a:	d9f6      	bls.n	800a26a <HAL_RCC_OscConfig+0x376>
 800a27c:	e6c9      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a27e:	f7fe fcdf 	bl	8008c40 <HAL_GetTick>
 800a282:	1b80      	subs	r0, r0, r6
 800a284:	4540      	cmp	r0, r8
 800a286:	d9b5      	bls.n	800a1f4 <HAL_RCC_OscConfig+0x300>
 800a288:	e6c3      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a28a:	4c31      	ldr	r4, [pc, #196]	; (800a350 <HAL_RCC_OscConfig+0x45c>)
 800a28c:	68a3      	ldr	r3, [r4, #8]
 800a28e:	f003 030c 	and.w	r3, r3, #12
 800a292:	2b0c      	cmp	r3, #12
 800a294:	f43f ae3e 	beq.w	8009f14 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 800a298:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a29a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800a29c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2a0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a2a2:	d137      	bne.n	800a314 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 800a2a4:	f7fe fccc 	bl	8008c40 <HAL_GetTick>
 800a2a8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	019f      	lsls	r7, r3, #6
 800a2ae:	d42b      	bmi.n	800a308 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a2b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a2b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a2b8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800a2ba:	3a01      	subs	r2, #1
 800a2bc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a2c0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800a2c2:	0912      	lsrs	r2, r2, #4
 800a2c4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800a2c8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800a2ca:	0852      	lsrs	r2, r2, #1
 800a2cc:	3a01      	subs	r2, #1
 800a2ce:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a2d2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800a2d4:	0852      	lsrs	r2, r2, #1
 800a2d6:	3a01      	subs	r2, #1
 800a2d8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a2dc:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2e4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a2e6:	68e3      	ldr	r3, [r4, #12]
 800a2e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2ec:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800a2ee:	f7fe fca7 	bl	8008c40 <HAL_GetTick>
 800a2f2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	0198      	lsls	r0, r3, #6
 800a2f8:	f53f ae51 	bmi.w	8009f9e <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2fc:	f7fe fca0 	bl	8008c40 <HAL_GetTick>
 800a300:	1b40      	subs	r0, r0, r5
 800a302:	2802      	cmp	r0, #2
 800a304:	d9f6      	bls.n	800a2f4 <HAL_RCC_OscConfig+0x400>
 800a306:	e684      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a308:	f7fe fc9a 	bl	8008c40 <HAL_GetTick>
 800a30c:	1b80      	subs	r0, r0, r6
 800a30e:	2802      	cmp	r0, #2
 800a310:	d9cb      	bls.n	800a2aa <HAL_RCC_OscConfig+0x3b6>
 800a312:	e67e      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	0119      	lsls	r1, r3, #4
 800a318:	d406      	bmi.n	800a328 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800a31a:	6823      	ldr	r3, [r4, #0]
           &&
 800a31c:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a31e:	bf5e      	ittt	pl
 800a320:	68e3      	ldrpl	r3, [r4, #12]
 800a322:	f023 0303 	bicpl.w	r3, r3, #3
 800a326:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a328:	68e3      	ldr	r3, [r4, #12]
 800a32a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a32e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a332:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800a334:	f7fe fc84 	bl	8008c40 <HAL_GetTick>
 800a338:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	019b      	lsls	r3, r3, #6
 800a33e:	f57f ae2e 	bpl.w	8009f9e <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a342:	f7fe fc7d 	bl	8008c40 <HAL_GetTick>
 800a346:	1b40      	subs	r0, r0, r5
 800a348:	2802      	cmp	r0, #2
 800a34a:	d9f6      	bls.n	800a33a <HAL_RCC_OscConfig+0x446>
 800a34c:	e661      	b.n	800a012 <HAL_RCC_OscConfig+0x11e>
 800a34e:	bf00      	nop
 800a350:	40021000 	.word	0x40021000
 800a354:	40007000 	.word	0x40007000

0800a358 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a358:	4a55      	ldr	r2, [pc, #340]	; (800a4b0 <HAL_RCC_ClockConfig+0x158>)
 800a35a:	6813      	ldr	r3, [r2, #0]
 800a35c:	f003 0307 	and.w	r3, r3, #7
 800a360:	428b      	cmp	r3, r1
{
 800a362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a366:	4605      	mov	r5, r0
 800a368:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a36a:	d32a      	bcc.n	800a3c2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	07d9      	lsls	r1, r3, #31
 800a370:	d434      	bmi.n	800a3dc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a372:	6829      	ldr	r1, [r5, #0]
 800a374:	078a      	lsls	r2, r1, #30
 800a376:	f100 8081 	bmi.w	800a47c <HAL_RCC_ClockConfig+0x124>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a37a:	4a4d      	ldr	r2, [pc, #308]	; (800a4b0 <HAL_RCC_ClockConfig+0x158>)
 800a37c:	6813      	ldr	r3, [r2, #0]
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	42b3      	cmp	r3, r6
 800a384:	f200 8082 	bhi.w	800a48c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a388:	f011 0f04 	tst.w	r1, #4
 800a38c:	4c49      	ldr	r4, [pc, #292]	; (800a4b4 <HAL_RCC_ClockConfig+0x15c>)
 800a38e:	f040 8088 	bne.w	800a4a2 <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a392:	070b      	lsls	r3, r1, #28
 800a394:	d506      	bpl.n	800a3a4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	692a      	ldr	r2, [r5, #16]
 800a39a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a39e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a3a2:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a3a4:	f7ff fd3e 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 800a3a8:	68a3      	ldr	r3, [r4, #8]
 800a3aa:	4a43      	ldr	r2, [pc, #268]	; (800a4b8 <HAL_RCC_ClockConfig+0x160>)
 800a3ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a3b0:	5cd3      	ldrb	r3, [r2, r3]
 800a3b2:	40d8      	lsrs	r0, r3
 800a3b4:	4b41      	ldr	r3, [pc, #260]	; (800a4bc <HAL_RCC_ClockConfig+0x164>)
 800a3b6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800a3b8:	200f      	movs	r0, #15
 800a3ba:	f7fe fc17 	bl	8008bec <HAL_InitTick>
  return HAL_OK;
 800a3be:	2000      	movs	r0, #0
 800a3c0:	e00a      	b.n	800a3d8 <HAL_RCC_ClockConfig+0x80>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3c2:	6813      	ldr	r3, [r2, #0]
 800a3c4:	f023 0307 	bic.w	r3, r3, #7
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800a3cc:	6813      	ldr	r3, [r2, #0]
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	428b      	cmp	r3, r1
 800a3d4:	d0ca      	beq.n	800a36c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800a3d6:	2001      	movs	r0, #1
}
 800a3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3dc:	686a      	ldr	r2, [r5, #4]
 800a3de:	4c35      	ldr	r4, [pc, #212]	; (800a4b4 <HAL_RCC_ClockConfig+0x15c>)
 800a3e0:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a3e2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3e4:	d11b      	bne.n	800a41e <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a3e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a3ea:	d0f4      	beq.n	800a3d6 <HAL_RCC_ClockConfig+0x7e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3ec:	68a3      	ldr	r3, [r4, #8]
 800a3ee:	f023 0303 	bic.w	r3, r3, #3
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800a3f6:	f7fe fc23 	bl	8008c40 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3fa:	686b      	ldr	r3, [r5, #4]
 800a3fc:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 800a3fe:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a400:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a404:	d117      	bne.n	800a436 <HAL_RCC_ClockConfig+0xde>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	f003 030c 	and.w	r3, r3, #12
 800a40c:	2b0c      	cmp	r3, #12
 800a40e:	d0b0      	beq.n	800a372 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a410:	f7fe fc16 	bl	8008c40 <HAL_GetTick>
 800a414:	1bc0      	subs	r0, r0, r7
 800a416:	4540      	cmp	r0, r8
 800a418:	d9f5      	bls.n	800a406 <HAL_RCC_ClockConfig+0xae>
          return HAL_TIMEOUT;
 800a41a:	2003      	movs	r0, #3
 800a41c:	e7dc      	b.n	800a3d8 <HAL_RCC_ClockConfig+0x80>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a41e:	2a02      	cmp	r2, #2
 800a420:	d102      	bne.n	800a428 <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800a422:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a426:	e7e0      	b.n	800a3ea <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a428:	b912      	cbnz	r2, 800a430 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800a42a:	f013 0f02 	tst.w	r3, #2
 800a42e:	e7dc      	b.n	800a3ea <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a430:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a434:	e7d9      	b.n	800a3ea <HAL_RCC_ClockConfig+0x92>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a436:	2b02      	cmp	r3, #2
 800a438:	d10a      	bne.n	800a450 <HAL_RCC_ClockConfig+0xf8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800a43a:	68a3      	ldr	r3, [r4, #8]
 800a43c:	f003 030c 	and.w	r3, r3, #12
 800a440:	2b08      	cmp	r3, #8
 800a442:	d096      	beq.n	800a372 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a444:	f7fe fbfc 	bl	8008c40 <HAL_GetTick>
 800a448:	1bc0      	subs	r0, r0, r7
 800a44a:	4540      	cmp	r0, r8
 800a44c:	d9f5      	bls.n	800a43a <HAL_RCC_ClockConfig+0xe2>
 800a44e:	e7e4      	b.n	800a41a <HAL_RCC_ClockConfig+0xc2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a450:	b973      	cbnz	r3, 800a470 <HAL_RCC_ClockConfig+0x118>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800a452:	68a3      	ldr	r3, [r4, #8]
 800a454:	f013 0f0c 	tst.w	r3, #12
 800a458:	d08b      	beq.n	800a372 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a45a:	f7fe fbf1 	bl	8008c40 <HAL_GetTick>
 800a45e:	1bc0      	subs	r0, r0, r7
 800a460:	4540      	cmp	r0, r8
 800a462:	d9f6      	bls.n	800a452 <HAL_RCC_ClockConfig+0xfa>
 800a464:	e7d9      	b.n	800a41a <HAL_RCC_ClockConfig+0xc2>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a466:	f7fe fbeb 	bl	8008c40 <HAL_GetTick>
 800a46a:	1bc0      	subs	r0, r0, r7
 800a46c:	4540      	cmp	r0, r8
 800a46e:	d8d4      	bhi.n	800a41a <HAL_RCC_ClockConfig+0xc2>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800a470:	68a3      	ldr	r3, [r4, #8]
 800a472:	f003 030c 	and.w	r3, r3, #12
 800a476:	2b04      	cmp	r3, #4
 800a478:	d1f5      	bne.n	800a466 <HAL_RCC_ClockConfig+0x10e>
 800a47a:	e77a      	b.n	800a372 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a47c:	4a0d      	ldr	r2, [pc, #52]	; (800a4b4 <HAL_RCC_ClockConfig+0x15c>)
 800a47e:	68a8      	ldr	r0, [r5, #8]
 800a480:	6893      	ldr	r3, [r2, #8]
 800a482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a486:	4303      	orrs	r3, r0
 800a488:	6093      	str	r3, [r2, #8]
 800a48a:	e776      	b.n	800a37a <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a48c:	6813      	ldr	r3, [r2, #0]
 800a48e:	f023 0307 	bic.w	r3, r3, #7
 800a492:	4333      	orrs	r3, r6
 800a494:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800a496:	6813      	ldr	r3, [r2, #0]
 800a498:	f003 0307 	and.w	r3, r3, #7
 800a49c:	42b3      	cmp	r3, r6
 800a49e:	d19a      	bne.n	800a3d6 <HAL_RCC_ClockConfig+0x7e>
 800a4a0:	e772      	b.n	800a388 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	68ea      	ldr	r2, [r5, #12]
 800a4a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	60a3      	str	r3, [r4, #8]
 800a4ae:	e770      	b.n	800a392 <HAL_RCC_ClockConfig+0x3a>
 800a4b0:	40022000 	.word	0x40022000
 800a4b4:	40021000 	.word	0x40021000
 800a4b8:	08028688 	.word	0x08028688
 800a4bc:	20000590 	.word	0x20000590

0800a4c0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a4c0:	4b04      	ldr	r3, [pc, #16]	; (800a4d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 800a4c2:	4a05      	ldr	r2, [pc, #20]	; (800a4d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a4ca:	5cd3      	ldrb	r3, [r2, r3]
 800a4cc:	4a03      	ldr	r2, [pc, #12]	; (800a4dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a4ce:	6810      	ldr	r0, [r2, #0]
}
 800a4d0:	40d8      	lsrs	r0, r3
 800a4d2:	4770      	bx	lr
 800a4d4:	40021000 	.word	0x40021000
 800a4d8:	08028698 	.word	0x08028698
 800a4dc:	20000590 	.word	0x20000590

0800a4e0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <HAL_RCC_GetPCLK2Freq+0x14>)
 800a4e2:	4a05      	ldr	r2, [pc, #20]	; (800a4f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a4ea:	5cd3      	ldrb	r3, [r2, r3]
 800a4ec:	4a03      	ldr	r2, [pc, #12]	; (800a4fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a4ee:	6810      	ldr	r0, [r2, #0]
}
 800a4f0:	40d8      	lsrs	r0, r3
 800a4f2:	4770      	bx	lr
 800a4f4:	40021000 	.word	0x40021000
 800a4f8:	08028698 	.word	0x08028698
 800a4fc:	20000590 	.word	0x20000590

0800a500 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a500:	4a44      	ldr	r2, [pc, #272]	; (800a614 <RCCEx_PLLSAI1_Config+0x114>)
{
 800a502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a504:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a506:	68d1      	ldr	r1, [r2, #12]
 800a508:	6803      	ldr	r3, [r0, #0]
 800a50a:	f011 0f03 	tst.w	r1, #3
{
 800a50e:	4605      	mov	r5, r0
 800a510:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a512:	d029      	beq.n	800a568 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a514:	68d1      	ldr	r1, [r2, #12]
 800a516:	f001 0103 	and.w	r1, r1, #3
 800a51a:	4299      	cmp	r1, r3
 800a51c:	d178      	bne.n	800a610 <RCCEx_PLLSAI1_Config+0x110>
       ||
 800a51e:	2900      	cmp	r1, #0
 800a520:	d076      	beq.n	800a610 <RCCEx_PLLSAI1_Config+0x110>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a522:	68d3      	ldr	r3, [r2, #12]
       ||
 800a524:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a526:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a52a:	3301      	adds	r3, #1
       ||
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d16f      	bne.n	800a610 <RCCEx_PLLSAI1_Config+0x110>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a536:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a538:	f7fe fb82 	bl	8008c40 <HAL_GetTick>
 800a53c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	011a      	lsls	r2, r3, #4
 800a542:	d430      	bmi.n	800a5a6 <RCCEx_PLLSAI1_Config+0xa6>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a544:	68ab      	ldr	r3, [r5, #8]
 800a546:	021f      	lsls	r7, r3, #8
 800a548:	b3a6      	cbz	r6, 800a5b4 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a54a:	2e01      	cmp	r6, #1
 800a54c:	d14d      	bne.n	800a5ea <RCCEx_PLLSAI1_Config+0xea>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a54e:	692a      	ldr	r2, [r5, #16]
 800a550:	6921      	ldr	r1, [r4, #16]
 800a552:	0852      	lsrs	r2, r2, #1
 800a554:	1e53      	subs	r3, r2, #1
 800a556:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 800a55a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800a55e:	433a      	orrs	r2, r7
 800a560:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 800a564:	6122      	str	r2, [r4, #16]
 800a566:	e030      	b.n	800a5ca <RCCEx_PLLSAI1_Config+0xca>
    switch(PllSai1->PLLSAI1Source)
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d011      	beq.n	800a590 <RCCEx_PLLSAI1_Config+0x90>
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d013      	beq.n	800a598 <RCCEx_PLLSAI1_Config+0x98>
 800a570:	2b01      	cmp	r3, #1
 800a572:	d14d      	bne.n	800a610 <RCCEx_PLLSAI1_Config+0x110>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	f012 0f02 	tst.w	r2, #2
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a57a:	d049      	beq.n	800a610 <RCCEx_PLLSAI1_Config+0x110>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a57c:	68e0      	ldr	r0, [r4, #12]
 800a57e:	686a      	ldr	r2, [r5, #4]
 800a580:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800a584:	3a01      	subs	r2, #1
 800a586:	4318      	orrs	r0, r3
 800a588:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a58c:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800a58e:	e7cf      	b.n	800a530 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a590:	6812      	ldr	r2, [r2, #0]
 800a592:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a596:	e7f0      	b.n	800a57a <RCCEx_PLLSAI1_Config+0x7a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a598:	6811      	ldr	r1, [r2, #0]
 800a59a:	0389      	lsls	r1, r1, #14
 800a59c:	d4ee      	bmi.n	800a57c <RCCEx_PLLSAI1_Config+0x7c>
 800a59e:	6812      	ldr	r2, [r2, #0]
 800a5a0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800a5a4:	e7e9      	b.n	800a57a <RCCEx_PLLSAI1_Config+0x7a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a5a6:	f7fe fb4b 	bl	8008c40 <HAL_GetTick>
 800a5aa:	1bc0      	subs	r0, r0, r7
 800a5ac:	2802      	cmp	r0, #2
 800a5ae:	d9c6      	bls.n	800a53e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800a5b0:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a5b4:	6921      	ldr	r1, [r4, #16]
 800a5b6:	68eb      	ldr	r3, [r5, #12]
 800a5b8:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800a5bc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800a5c0:	091b      	lsrs	r3, r3, #4
 800a5c2:	4339      	orrs	r1, r7
 800a5c4:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800a5c8:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a5d0:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a5d2:	f7fe fb35 	bl	8008c40 <HAL_GetTick>
 800a5d6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	011b      	lsls	r3, r3, #4
 800a5dc:	d512      	bpl.n	800a604 <RCCEx_PLLSAI1_Config+0x104>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	69aa      	ldr	r2, [r5, #24]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	6123      	str	r3, [r4, #16]
 800a5e6:	2000      	movs	r0, #0
  return status;
 800a5e8:	e7e3      	b.n	800a5b2 <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a5ea:	696b      	ldr	r3, [r5, #20]
 800a5ec:	6922      	ldr	r2, [r4, #16]
 800a5ee:	085b      	lsrs	r3, r3, #1
 800a5f0:	1e59      	subs	r1, r3, #1
 800a5f2:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800a5f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a5fa:	433b      	orrs	r3, r7
 800a5fc:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a600:	6123      	str	r3, [r4, #16]
 800a602:	e7e2      	b.n	800a5ca <RCCEx_PLLSAI1_Config+0xca>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a604:	f7fe fb1c 	bl	8008c40 <HAL_GetTick>
 800a608:	1b80      	subs	r0, r0, r6
 800a60a:	2802      	cmp	r0, #2
 800a60c:	d9e4      	bls.n	800a5d8 <RCCEx_PLLSAI1_Config+0xd8>
 800a60e:	e7cf      	b.n	800a5b0 <RCCEx_PLLSAI1_Config+0xb0>
      status = HAL_ERROR;
 800a610:	2001      	movs	r0, #1
 800a612:	e7ce      	b.n	800a5b2 <RCCEx_PLLSAI1_Config+0xb2>
 800a614:	40021000 	.word	0x40021000

0800a618 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a618:	4a3d      	ldr	r2, [pc, #244]	; (800a710 <RCCEx_PLLSAI2_Config+0xf8>)
{
 800a61a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61c:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a61e:	68d1      	ldr	r1, [r2, #12]
 800a620:	6803      	ldr	r3, [r0, #0]
 800a622:	f011 0f03 	tst.w	r1, #3
{
 800a626:	4605      	mov	r5, r0
 800a628:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a62a:	d027      	beq.n	800a67c <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a62c:	68d1      	ldr	r1, [r2, #12]
 800a62e:	f001 0103 	and.w	r1, r1, #3
 800a632:	4299      	cmp	r1, r3
 800a634:	d169      	bne.n	800a70a <RCCEx_PLLSAI2_Config+0xf2>
       ||
 800a636:	2900      	cmp	r1, #0
 800a638:	d067      	beq.n	800a70a <RCCEx_PLLSAI2_Config+0xf2>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a63a:	68d3      	ldr	r3, [r2, #12]
       ||
 800a63c:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a63e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a642:	3301      	adds	r3, #1
       ||
 800a644:	4293      	cmp	r3, r2
 800a646:	d160      	bne.n	800a70a <RCCEx_PLLSAI2_Config+0xf2>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a64e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a650:	f7fe faf6 	bl	8008c40 <HAL_GetTick>
 800a654:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	009a      	lsls	r2, r3, #2
 800a65a:	d42e      	bmi.n	800a6ba <RCCEx_PLLSAI2_Config+0xa2>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a65c:	68ab      	ldr	r3, [r5, #8]
 800a65e:	0218      	lsls	r0, r3, #8
 800a660:	b396      	cbz	r6, 800a6c8 <RCCEx_PLLSAI2_Config+0xb0>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a662:	6963      	ldr	r3, [r4, #20]
 800a664:	6929      	ldr	r1, [r5, #16]
 800a666:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a66a:	0849      	lsrs	r1, r1, #1
 800a66c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a670:	3901      	subs	r1, #1
 800a672:	4303      	orrs	r3, r0
 800a674:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a678:	6163      	str	r3, [r4, #20]
 800a67a:	e030      	b.n	800a6de <RCCEx_PLLSAI2_Config+0xc6>
    switch(PllSai2->PLLSAI2Source)
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d011      	beq.n	800a6a4 <RCCEx_PLLSAI2_Config+0x8c>
 800a680:	2b03      	cmp	r3, #3
 800a682:	d013      	beq.n	800a6ac <RCCEx_PLLSAI2_Config+0x94>
 800a684:	2b01      	cmp	r3, #1
 800a686:	d140      	bne.n	800a70a <RCCEx_PLLSAI2_Config+0xf2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a688:	6812      	ldr	r2, [r2, #0]
 800a68a:	f012 0f02 	tst.w	r2, #2
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a68e:	d03c      	beq.n	800a70a <RCCEx_PLLSAI2_Config+0xf2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a690:	68e0      	ldr	r0, [r4, #12]
 800a692:	686a      	ldr	r2, [r5, #4]
 800a694:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800a698:	3a01      	subs	r2, #1
 800a69a:	4318      	orrs	r0, r3
 800a69c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a6a0:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800a6a2:	e7d1      	b.n	800a648 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a6aa:	e7f0      	b.n	800a68e <RCCEx_PLLSAI2_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a6ac:	6811      	ldr	r1, [r2, #0]
 800a6ae:	0389      	lsls	r1, r1, #14
 800a6b0:	d4ee      	bmi.n	800a690 <RCCEx_PLLSAI2_Config+0x78>
 800a6b2:	6812      	ldr	r2, [r2, #0]
 800a6b4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800a6b8:	e7e9      	b.n	800a68e <RCCEx_PLLSAI2_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a6ba:	f7fe fac1 	bl	8008c40 <HAL_GetTick>
 800a6be:	1bc0      	subs	r0, r0, r7
 800a6c0:	2802      	cmp	r0, #2
 800a6c2:	d9c8      	bls.n	800a656 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800a6c4:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a6c8:	6962      	ldr	r2, [r4, #20]
 800a6ca:	68eb      	ldr	r3, [r5, #12]
 800a6cc:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800a6d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a6d4:	091b      	lsrs	r3, r3, #4
 800a6d6:	4302      	orrs	r2, r0
 800a6d8:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800a6dc:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6e4:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a6e6:	f7fe faab 	bl	8008c40 <HAL_GetTick>
 800a6ea:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	d505      	bpl.n	800a6fe <RCCEx_PLLSAI2_Config+0xe6>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a6f2:	6963      	ldr	r3, [r4, #20]
 800a6f4:	696a      	ldr	r2, [r5, #20]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	6163      	str	r3, [r4, #20]
 800a6fa:	2000      	movs	r0, #0
  return status;
 800a6fc:	e7e3      	b.n	800a6c6 <RCCEx_PLLSAI2_Config+0xae>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a6fe:	f7fe fa9f 	bl	8008c40 <HAL_GetTick>
 800a702:	1b80      	subs	r0, r0, r6
 800a704:	2802      	cmp	r0, #2
 800a706:	d9f1      	bls.n	800a6ec <RCCEx_PLLSAI2_Config+0xd4>
 800a708:	e7dc      	b.n	800a6c4 <RCCEx_PLLSAI2_Config+0xac>
      status = HAL_ERROR;
 800a70a:	2001      	movs	r0, #1
 800a70c:	e7db      	b.n	800a6c6 <RCCEx_PLLSAI2_Config+0xae>
 800a70e:	bf00      	nop
 800a710:	40021000 	.word	0x40021000

0800a714 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a714:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a718:	6806      	ldr	r6, [r0, #0]
 800a71a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800a71e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a720:	d009      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a722:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800a724:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a728:	d022      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a72a:	d813      	bhi.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a72c:	b331      	cbz	r1, 800a77c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800a72e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a732:	d02a      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a734:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	04d8      	lsls	r0, r3, #19
 800a73a:	d509      	bpl.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a73c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a73e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800a742:	d02c      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800a744:	d826      	bhi.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800a746:	b381      	cbz	r1, 800a7aa <HAL_RCCEx_PeriphCLKConfig+0x96>
 800a748:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800a74c:	d070      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800a74e:	2601      	movs	r6, #1
 800a750:	4635      	mov	r5, r6
 800a752:	e039      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a754:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800a758:	d1ec      	bne.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a75a:	4ab5      	ldr	r2, [pc, #724]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a75c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a75e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a762:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a766:	430b      	orrs	r3, r1
 800a768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800a76c:	2600      	movs	r6, #0
 800a76e:	e7e2      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a770:	4aaf      	ldr	r2, [pc, #700]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a772:	68d3      	ldr	r3, [r2, #12]
 800a774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a778:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800a77a:	e7ee      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a77c:	3004      	adds	r0, #4
 800a77e:	f7ff febf 	bl	800a500 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a782:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a784:	2800      	cmp	r0, #0
 800a786:	d1d6      	bne.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x22>
 800a788:	e7e7      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a78a:	2100      	movs	r1, #0
 800a78c:	3020      	adds	r0, #32
 800a78e:	f7ff ff43 	bl	800a618 <RCCEx_PLLSAI2_Config>
 800a792:	e7f6      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a794:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800a798:	d1d9      	bne.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800a79a:	4635      	mov	r5, r6
 800a79c:	e009      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a79e:	4aa4      	ldr	r2, [pc, #656]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a7a0:	68d3      	ldr	r3, [r2, #12]
 800a7a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7a6:	60d3      	str	r3, [r2, #12]
      break;
 800a7a8:	e7f7      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a7aa:	1d20      	adds	r0, r4, #4
 800a7ac:	f7ff fea8 	bl	800a500 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a7b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a7b2:	2d00      	cmp	r5, #0
 800a7b4:	d142      	bne.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a7b6:	4a9e      	ldr	r2, [pc, #632]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a7b8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a7ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a7be:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800a7c2:	430b      	orrs	r3, r1
 800a7c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	0399      	lsls	r1, r3, #14
 800a7cc:	f140 815e 	bpl.w	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7d0:	4f97      	ldr	r7, [pc, #604]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a7d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7d4:	00da      	lsls	r2, r3, #3
 800a7d6:	d433      	bmi.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7de:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a7ea:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7ee:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800aa34 <HAL_RCCEx_PeriphCLKConfig+0x320>
 800a7f2:	f8d9 3000 	ldr.w	r3, [r9]
 800a7f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7fa:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800a7fe:	f7fe fa1f 	bl	8008c40 <HAL_GetTick>
 800a802:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800a804:	f8d9 3000 	ldr.w	r3, [r9]
 800a808:	05db      	lsls	r3, r3, #23
 800a80a:	d51c      	bpl.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 800a80c:	bb15      	cbnz	r5, 800a854 <HAL_RCCEx_PeriphCLKConfig+0x140>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a80e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a812:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800a816:	f040 810f 	bne.w	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a81a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a81e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a826:	4313      	orrs	r3, r2
 800a828:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a82c:	4635      	mov	r5, r6
 800a82e:	e011      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x140>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a830:	2100      	movs	r1, #0
 800a832:	f104 0020 	add.w	r0, r4, #32
 800a836:	f7ff feef 	bl	800a618 <RCCEx_PLLSAI2_Config>
 800a83a:	e7b9      	b.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800a83c:	462e      	mov	r6, r5
 800a83e:	e7c3      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800a840:	f04f 0800 	mov.w	r8, #0
 800a844:	e7d3      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xda>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a846:	f7fe f9fb 	bl	8008c40 <HAL_GetTick>
 800a84a:	eba0 000a 	sub.w	r0, r0, sl
 800a84e:	2802      	cmp	r0, #2
 800a850:	d9d8      	bls.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 800a852:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800a854:	f1b8 0f00 	cmp.w	r8, #0
 800a858:	d003      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a85a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a85c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a860:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	07da      	lsls	r2, r3, #31
 800a866:	d508      	bpl.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a868:	4971      	ldr	r1, [pc, #452]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a86a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a86c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a870:	f022 0203 	bic.w	r2, r2, #3
 800a874:	4302      	orrs	r2, r0
 800a876:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a87a:	079f      	lsls	r7, r3, #30
 800a87c:	d508      	bpl.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a87e:	496c      	ldr	r1, [pc, #432]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a880:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a882:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a886:	f022 020c 	bic.w	r2, r2, #12
 800a88a:	4302      	orrs	r2, r0
 800a88c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a890:	075e      	lsls	r6, r3, #29
 800a892:	d508      	bpl.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a894:	4966      	ldr	r1, [pc, #408]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a896:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a898:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a89c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a8a0:	4302      	orrs	r2, r0
 800a8a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a8a6:	0718      	lsls	r0, r3, #28
 800a8a8:	d508      	bpl.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a8aa:	4961      	ldr	r1, [pc, #388]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a8ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a8ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a8b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a8b6:	4302      	orrs	r2, r0
 800a8b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a8bc:	06d9      	lsls	r1, r3, #27
 800a8be:	d508      	bpl.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a8c0:	495b      	ldr	r1, [pc, #364]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a8c2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a8c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a8c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a8cc:	4302      	orrs	r2, r0
 800a8ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8d2:	069a      	lsls	r2, r3, #26
 800a8d4:	d508      	bpl.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8d6:	4956      	ldr	r1, [pc, #344]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a8d8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a8da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a8de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a8e2:	4302      	orrs	r2, r0
 800a8e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a8e8:	059f      	lsls	r7, r3, #22
 800a8ea:	d508      	bpl.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8ec:	4950      	ldr	r1, [pc, #320]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a8ee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a8f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a8f4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800a8f8:	4302      	orrs	r2, r0
 800a8fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a8fe:	055e      	lsls	r6, r3, #21
 800a900:	d508      	bpl.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a902:	494b      	ldr	r1, [pc, #300]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a904:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a906:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a90a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a90e:	4302      	orrs	r2, r0
 800a910:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a914:	0658      	lsls	r0, r3, #25
 800a916:	d508      	bpl.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a918:	4945      	ldr	r1, [pc, #276]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a91a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a91c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a920:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a924:	4302      	orrs	r2, r0
 800a926:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a92a:	0619      	lsls	r1, r3, #24
 800a92c:	d508      	bpl.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a92e:	4940      	ldr	r1, [pc, #256]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a930:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a932:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a936:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a93a:	4302      	orrs	r2, r0
 800a93c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a940:	05da      	lsls	r2, r3, #23
 800a942:	d508      	bpl.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a944:	493a      	ldr	r1, [pc, #232]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a946:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a948:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a94c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a950:	4302      	orrs	r2, r0
 800a952:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a956:	049b      	lsls	r3, r3, #18
 800a958:	d510      	bpl.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a95a:	4a35      	ldr	r2, [pc, #212]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a95c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a95e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a962:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a966:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a968:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a96c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a970:	f040 808e 	bne.w	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a974:	68d3      	ldr	r3, [r2, #12]
 800a976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a97a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	031f      	lsls	r7, r3, #12
 800a980:	d510      	bpl.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a982:	4a2b      	ldr	r2, [pc, #172]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a984:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a986:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a98a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a98e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a990:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a998:	f040 8086 	bne.w	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a99c:	68d3      	ldr	r3, [r2, #12]
 800a99e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9a2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a9a4:	6823      	ldr	r3, [r4, #0]
 800a9a6:	035e      	lsls	r6, r3, #13
 800a9a8:	d50f      	bpl.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9aa:	4a21      	ldr	r2, [pc, #132]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a9ac:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a9ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a9b2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a9b6:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a9b8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a9c0:	d17e      	bne.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a9c2:	68d3      	ldr	r3, [r2, #12]
 800a9c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9c8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	0458      	lsls	r0, r3, #17
 800a9ce:	d512      	bpl.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9d0:	4917      	ldr	r1, [pc, #92]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a9d2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a9d4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a9d8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a9dc:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a9de:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a9e6:	d176      	bne.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a9e8:	2102      	movs	r1, #2
 800a9ea:	1d20      	adds	r0, r4, #4
 800a9ec:	f7ff fd88 	bl	800a500 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	bf18      	it	ne
 800a9f4:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a9f6:	6822      	ldr	r2, [r4, #0]
 800a9f8:	0411      	lsls	r1, r2, #16
 800a9fa:	d508      	bpl.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a9fc:	490c      	ldr	r1, [pc, #48]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a9fe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aa00:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800aa04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa08:	4303      	orrs	r3, r0
 800aa0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aa0e:	03d3      	lsls	r3, r2, #15
 800aa10:	d509      	bpl.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa12:	4a07      	ldr	r2, [pc, #28]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800aa14:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800aa18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800aa1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa20:	430b      	orrs	r3, r1
 800aa22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800aa26:	4628      	mov	r0, r5
 800aa28:	b002      	add	sp, #8
 800aa2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2e:	bf00      	nop
 800aa30:	40021000 	.word	0x40021000
 800aa34:	40007000 	.word	0x40007000
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aa38:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	f43f aeec 	beq.w	800a81a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aa42:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aa56:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa5e:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800aa64:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa68:	f57f aed7 	bpl.w	800a81a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 800aa6c:	f7fe f8e8 	bl	8008c40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa70:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800aa74:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800aa76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa7a:	0799      	lsls	r1, r3, #30
 800aa7c:	f53f aecd 	bmi.w	800a81a <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa80:	f7fe f8de 	bl	8008c40 <HAL_GetTick>
 800aa84:	1b40      	subs	r0, r0, r5
 800aa86:	4548      	cmp	r0, r9
 800aa88:	d9f5      	bls.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800aa8a:	e6e2      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800aa8c:	4635      	mov	r5, r6
 800aa8e:	e6e8      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800aa90:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800aa94:	f47f af72 	bne.w	800a97c <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aa98:	2101      	movs	r1, #1
 800aa9a:	1d20      	adds	r0, r4, #4
 800aa9c:	f7ff fd30 	bl	800a500 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	bf18      	it	ne
 800aaa4:	4605      	movne	r5, r0
 800aaa6:	e769      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x268>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800aaa8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800aaac:	f47f af7a 	bne.w	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aab0:	2101      	movs	r1, #1
 800aab2:	1d20      	adds	r0, r4, #4
 800aab4:	f7ff fd24 	bl	800a500 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800aab8:	2800      	cmp	r0, #0
 800aaba:	bf18      	it	ne
 800aabc:	4605      	movne	r5, r0
 800aabe:	e771      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x290>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800aac0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800aac4:	d181      	bne.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aac6:	2101      	movs	r1, #1
 800aac8:	1d20      	adds	r0, r4, #4
 800aaca:	f7ff fd19 	bl	800a500 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800aace:	2800      	cmp	r0, #0
 800aad0:	bf18      	it	ne
 800aad2:	4605      	movne	r5, r0
 800aad4:	e779      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800aad6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800aada:	d18c      	bne.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800aadc:	2102      	movs	r1, #2
 800aade:	f104 0020 	add.w	r0, r4, #32
 800aae2:	f7ff fd99 	bl	800a618 <RCCEx_PLLSAI2_Config>
 800aae6:	e783      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>

0800aae8 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800aae8:	4a02      	ldr	r2, [pc, #8]	; (800aaf4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800aaea:	6813      	ldr	r3, [r2, #0]
 800aaec:	f043 0304 	orr.w	r3, r3, #4
 800aaf0:	6013      	str	r3, [r2, #0]
}
 800aaf2:	4770      	bx	lr
 800aaf4:	40021000 	.word	0x40021000

0800aaf8 <HAL_RNG_Init>:
  * @brief  Initialize the RNG peripheral and initialize the associated handle.
  * @param  hrng: pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 800aaf8:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 800aafa:	4604      	mov	r4, r0
 800aafc:	b188      	cbz	r0, 800ab22 <HAL_RNG_Init+0x2a>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined(RNG_CR_CED)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* defined(RNG_CR_CED) */

  if(hrng->State == HAL_RNG_STATE_RESET)
 800aafe:	7943      	ldrb	r3, [r0, #5]
 800ab00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ab04:	b913      	cbnz	r3, 800ab0c <HAL_RNG_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800ab06:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ab08:	f7f9 fcce 	bl	80044a8 <HAL_RNG_MspInit>
  /* Clock Error Detection configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ab0c:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800ab0e:	2302      	movs	r3, #2
 800ab10:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800ab12:	6813      	ldr	r3, [r2, #0]
 800ab14:	f043 0304 	orr.w	r3, r3, #4
 800ab18:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 800ab1e:	2000      	movs	r0, #0
}
 800ab20:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ab22:	2001      	movs	r0, #1
 800ab24:	e7fc      	b.n	800ab20 <HAL_RNG_Init+0x28>

0800ab26 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit: pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800ab26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;    
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng); 
 800ab28:	7903      	ldrb	r3, [r0, #4]
 800ab2a:	2b01      	cmp	r3, #1
{
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	460e      	mov	r6, r1
  __HAL_LOCK(hrng); 
 800ab30:	d021      	beq.n	800ab76 <HAL_RNG_GenerateRandomNumber+0x50>
  
  /* Check RNS peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 800ab32:	7963      	ldrb	r3, [r4, #5]
  __HAL_LOCK(hrng); 
 800ab34:	2001      	movs	r0, #1
  if(hrng->State == HAL_RNG_STATE_READY)
 800ab36:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng); 
 800ab38:	7120      	strb	r0, [r4, #4]
  if(hrng->State == HAL_RNG_STATE_READY)
 800ab3a:	d10f      	bne.n	800ab5c <HAL_RNG_GenerateRandomNumber+0x36>
  {
    /* Change RNG peripheral state */  
    hrng->State = HAL_RNG_STATE_BUSY;  
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ab40:	f7fe f87e 	bl	8008c40 <HAL_GetTick>
 800ab44:	4607      	mov	r7, r0
  
    /* Check if data register contains valid random data */
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ab46:	6822      	ldr	r2, [r4, #0]
 800ab48:	6855      	ldr	r5, [r2, #4]
 800ab4a:	f015 0501 	ands.w	r5, r5, #1
 800ab4e:	d008      	beq.n	800ab62 <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_TIMEOUT;
      } 
    }
  
    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800ab50:	6893      	ldr	r3, [r2, #8]
 800ab52:	60a3      	str	r3, [r4, #8]
    *random32bit = hrng->RandomNumber;
 800ab54:	6033      	str	r3, [r6, #0]
  
    hrng->State = HAL_RNG_STATE_READY;
 800ab56:	2301      	movs	r3, #1
 800ab58:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800ab5a:	2000      	movs	r0, #0
  {
    status = HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	7123      	strb	r3, [r4, #4]

  return status;
 800ab60:	e008      	b.n	800ab74 <HAL_RNG_GenerateRandomNumber+0x4e>
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 800ab62:	f7fe f86d 	bl	8008c40 <HAL_GetTick>
 800ab66:	1bc0      	subs	r0, r0, r7
 800ab68:	2802      	cmp	r0, #2
 800ab6a:	d9ec      	bls.n	800ab46 <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_ERROR;
 800ab6c:	2304      	movs	r3, #4
 800ab6e:	7163      	strb	r3, [r4, #5]
        __HAL_UNLOCK(hrng);
 800ab70:	7125      	strb	r5, [r4, #4]
        return HAL_TIMEOUT;
 800ab72:	2003      	movs	r0, #3
}
 800ab74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng); 
 800ab76:	2002      	movs	r0, #2
 800ab78:	e7fc      	b.n	800ab74 <HAL_RNG_GenerateRandomNumber+0x4e>

0800ab7a <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ab7a:	6802      	ldr	r2, [r0, #0]
{
 800ab7c:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ab7e:	68d3      	ldr	r3, [r2, #12]
 800ab80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab84:	60d3      	str	r3, [r2, #12]
{
 800ab86:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800ab88:	f7fe f85a 	bl	8008c40 <HAL_GetTick>
 800ab8c:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	069b      	lsls	r3, r3, #26
 800ab94:	d501      	bpl.n	800ab9a <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800ab96:	2000      	movs	r0, #0
}
 800ab98:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ab9a:	f7fe f851 	bl	8008c40 <HAL_GetTick>
 800ab9e:	1b40      	subs	r0, r0, r5
 800aba0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800aba4:	d9f3      	bls.n	800ab8e <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800aba6:	2003      	movs	r0, #3
 800aba8:	e7f6      	b.n	800ab98 <HAL_RTC_WaitForSynchro+0x1e>

0800abaa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800abaa:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800abac:	6803      	ldr	r3, [r0, #0]
 800abae:	68da      	ldr	r2, [r3, #12]
 800abb0:	0652      	lsls	r2, r2, #25
{
 800abb2:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800abb4:	d501      	bpl.n	800abba <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800abb6:	2000      	movs	r0, #0
}
 800abb8:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800abba:	f04f 32ff 	mov.w	r2, #4294967295
 800abbe:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800abc0:	f7fe f83e 	bl	8008c40 <HAL_GetTick>
 800abc4:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	065b      	lsls	r3, r3, #25
 800abcc:	d4f3      	bmi.n	800abb6 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800abce:	f7fe f837 	bl	8008c40 <HAL_GetTick>
 800abd2:	1b40      	subs	r0, r0, r5
 800abd4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800abd8:	d9f5      	bls.n	800abc6 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800abda:	2003      	movs	r0, #3
 800abdc:	e7ec      	b.n	800abb8 <RTC_EnterInitMode+0xe>

0800abde <HAL_RTC_Init>:
{
 800abde:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800abe0:	4604      	mov	r4, r0
 800abe2:	b1d8      	cbz	r0, 800ac1c <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800abe4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800abe8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800abec:	b91b      	cbnz	r3, 800abf6 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 800abee:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800abf2:	f7f9 fc6f 	bl	80044d4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800abf6:	2302      	movs	r3, #2
 800abf8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	22ca      	movs	r2, #202	; 0xca
 800ac00:	625a      	str	r2, [r3, #36]	; 0x24
 800ac02:	2253      	movs	r2, #83	; 0x53
 800ac04:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ac06:	4620      	mov	r0, r4
 800ac08:	f7ff ffcf 	bl	800abaa <RTC_EnterInitMode>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b130      	cbz	r0, 800ac20 <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac12:	22ff      	movs	r2, #255	; 0xff
 800ac14:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ac16:	2304      	movs	r3, #4
 800ac18:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 800ac1c:	2501      	movs	r5, #1
 800ac1e:	e031      	b.n	800ac84 <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ac20:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ac22:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ac24:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800ac28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac2c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ac2e:	6862      	ldr	r2, [r4, #4]
 800ac30:	6899      	ldr	r1, [r3, #8]
 800ac32:	4302      	orrs	r2, r0
 800ac34:	69a0      	ldr	r0, [r4, #24]
 800ac36:	4302      	orrs	r2, r0
 800ac38:	430a      	orrs	r2, r1
 800ac3a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ac3c:	68e2      	ldr	r2, [r4, #12]
 800ac3e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800ac40:	691a      	ldr	r2, [r3, #16]
 800ac42:	68a1      	ldr	r1, [r4, #8]
 800ac44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ac48:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ac4a:	68da      	ldr	r2, [r3, #12]
 800ac4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac50:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	069b      	lsls	r3, r3, #26
 800ac56:	d405      	bmi.n	800ac64 <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f7ff ff8e 	bl	800ab7a <HAL_RTC_WaitForSynchro>
 800ac5e:	b108      	cbz	r0, 800ac64 <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	e7d6      	b.n	800ac12 <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ac64:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ac66:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ac68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac6a:	f022 0203 	bic.w	r2, r2, #3
 800ac6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ac70:	69e2      	ldr	r2, [r4, #28]
 800ac72:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ac74:	4302      	orrs	r2, r0
 800ac76:	430a      	orrs	r2, r1
 800ac78:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac7a:	22ff      	movs	r2, #255	; 0xff
 800ac7c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800ac84:	4628      	mov	r0, r5
 800ac86:	bd38      	pop	{r3, r4, r5, pc}

0800ac88 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 800ac88:	2300      	movs	r3, #0

  while(Value >= 10)
 800ac8a:	2809      	cmp	r0, #9
 800ac8c:	d803      	bhi.n	800ac96 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800ac8e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800ac92:	b2c0      	uxtb	r0, r0
 800ac94:	4770      	bx	lr
    Value -= 10;
 800ac96:	380a      	subs	r0, #10
    bcdhigh++;
 800ac98:	3301      	adds	r3, #1
    Value -= 10;
 800ac9a:	b2c0      	uxtb	r0, r0
 800ac9c:	e7f5      	b.n	800ac8a <RTC_ByteToBcd2+0x2>

0800ac9e <HAL_RTC_SetTime>:
{
 800ac9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800aca2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800aca6:	2b01      	cmp	r3, #1
{
 800aca8:	4605      	mov	r5, r0
 800acaa:	460e      	mov	r6, r1
 800acac:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 800acb0:	d032      	beq.n	800ad18 <HAL_RTC_SetTime+0x7a>
 800acb2:	2301      	movs	r3, #1
 800acb4:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800acb8:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 800acbc:	6801      	ldr	r1, [r0, #0]
 800acbe:	7874      	ldrb	r4, [r6, #1]
 800acc0:	7830      	ldrb	r0, [r6, #0]
 800acc2:	78b7      	ldrb	r7, [r6, #2]
 800acc4:	bb5a      	cbnz	r2, 800ad1e <HAL_RTC_SetTime+0x80>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800acc6:	688a      	ldr	r2, [r1, #8]
 800acc8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00;
 800accc:	bf08      	it	eq
 800acce:	70f2      	strbeq	r2, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800acd0:	f7ff ffda 	bl	800ac88 <RTC_ByteToBcd2>
 800acd4:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800acd6:	4620      	mov	r0, r4
 800acd8:	f7ff ffd6 	bl	800ac88 <RTC_ByteToBcd2>
 800acdc:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800acde:	4638      	mov	r0, r7
 800ace0:	f7ff ffd2 	bl	800ac88 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 800ace4:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ace6:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800acea:	ea42 4308 	orr.w	r3, r2, r8, lsl #16
 800acee:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acf2:	23ca      	movs	r3, #202	; 0xca
 800acf4:	624b      	str	r3, [r1, #36]	; 0x24
 800acf6:	2353      	movs	r3, #83	; 0x53
 800acf8:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800acfa:	4628      	mov	r0, r5
 800acfc:	f7ff ff55 	bl	800abaa <RTC_EnterInitMode>
 800ad00:	682a      	ldr	r2, [r5, #0]
 800ad02:	4607      	mov	r7, r0
 800ad04:	b1c0      	cbz	r0, 800ad38 <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad06:	23ff      	movs	r3, #255	; 0xff
 800ad08:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad0a:	2304      	movs	r3, #4
 800ad0c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800ad10:	2300      	movs	r3, #0
 800ad12:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 800ad16:	2701      	movs	r7, #1
}
 800ad18:	4638      	mov	r0, r7
 800ad1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ad1e:	688a      	ldr	r2, [r1, #8]
 800ad20:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00;
 800ad24:	bf08      	it	eq
 800ad26:	70f2      	strbeq	r2, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ad28:	0224      	lsls	r4, r4, #8
              ((uint32_t)(sTime->TimeFormat) << 16));
 800ad2a:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ad2c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ad30:	433c      	orrs	r4, r7
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ad32:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800ad36:	e7dc      	b.n	800acf2 <HAL_RTC_SetTime+0x54>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ad38:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800ad3c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800ad40:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800ad42:	6893      	ldr	r3, [r2, #8]
 800ad44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad48:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ad4a:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 800ad4e:	6891      	ldr	r1, [r2, #8]
 800ad50:	4303      	orrs	r3, r0
 800ad52:	430b      	orrs	r3, r1
 800ad54:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ad56:	68d3      	ldr	r3, [r2, #12]
 800ad58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad5c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ad5e:	6893      	ldr	r3, [r2, #8]
 800ad60:	069b      	lsls	r3, r3, #26
 800ad62:	d40c      	bmi.n	800ad7e <HAL_RTC_SetTime+0xe0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad64:	4628      	mov	r0, r5
 800ad66:	f7ff ff08 	bl	800ab7a <HAL_RTC_WaitForSynchro>
 800ad6a:	b140      	cbz	r0, 800ad7e <HAL_RTC_SetTime+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	22ff      	movs	r2, #255	; 0xff
 800ad70:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ad72:	2304      	movs	r3, #4
 800ad74:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800ad78:	f885 7020 	strb.w	r7, [r5, #32]
 800ad7c:	e7cb      	b.n	800ad16 <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad7e:	682b      	ldr	r3, [r5, #0]
 800ad80:	22ff      	movs	r2, #255	; 0xff
 800ad82:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800ad84:	2301      	movs	r3, #1
 800ad86:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f885 3020 	strb.w	r3, [r5, #32]
   return HAL_OK;
 800ad90:	e7c2      	b.n	800ad18 <HAL_RTC_SetTime+0x7a>

0800ad92 <HAL_RTC_SetDate>:
{
 800ad92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800ad94:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ad98:	2b01      	cmp	r3, #1
{
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 800ada0:	d035      	beq.n	800ae0e <HAL_RTC_SetDate+0x7c>
 800ada2:	2301      	movs	r3, #1
 800ada4:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ada8:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800adac:	780d      	ldrb	r5, [r1, #0]
 800adae:	784b      	ldrb	r3, [r1, #1]
 800adb0:	788f      	ldrb	r7, [r1, #2]
 800adb2:	78c8      	ldrb	r0, [r1, #3]
 800adb4:	036d      	lsls	r5, r5, #13
 800adb6:	2a00      	cmp	r2, #0
 800adb8:	d14e      	bne.n	800ae58 <HAL_RTC_SetDate+0xc6>
 800adba:	06da      	lsls	r2, r3, #27
 800adbc:	d503      	bpl.n	800adc6 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800adbe:	f023 0310 	bic.w	r3, r3, #16
 800adc2:	330a      	adds	r3, #10
 800adc4:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800adc6:	f7ff ff5f 	bl	800ac88 <RTC_ByteToBcd2>
 800adca:	4606      	mov	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800adcc:	7848      	ldrb	r0, [r1, #1]
 800adce:	f7ff ff5b 	bl	800ac88 <RTC_ByteToBcd2>
 800add2:	4601      	mov	r1, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800add4:	4638      	mov	r0, r7
 800add6:	f7ff ff57 	bl	800ac88 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800adda:	ea40 0205 	orr.w	r2, r0, r5
 800adde:	ea42 4306 	orr.w	r3, r2, r6, lsl #16
 800ade2:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	22ca      	movs	r2, #202	; 0xca
 800adea:	625a      	str	r2, [r3, #36]	; 0x24
 800adec:	2253      	movs	r2, #83	; 0x53
 800adee:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800adf0:	4620      	mov	r0, r4
 800adf2:	f7ff feda 	bl	800abaa <RTC_EnterInitMode>
 800adf6:	6822      	ldr	r2, [r4, #0]
 800adf8:	4606      	mov	r6, r0
 800adfa:	b150      	cbz	r0, 800ae12 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adfc:	23ff      	movs	r3, #255	; 0xff
 800adfe:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ae00:	2304      	movs	r3, #4
 800ae02:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800ae06:	2300      	movs	r3, #0
 800ae08:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800ae0c:	2601      	movs	r6, #1
}
 800ae0e:	4630      	mov	r0, r6
 800ae10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ae12:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800ae16:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800ae1a:	6055      	str	r5, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ae1c:	68d3      	ldr	r3, [r2, #12]
 800ae1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae22:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ae24:	6893      	ldr	r3, [r2, #8]
 800ae26:	069b      	lsls	r3, r3, #26
 800ae28:	d40c      	bmi.n	800ae44 <HAL_RTC_SetDate+0xb2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f7ff fea5 	bl	800ab7a <HAL_RTC_WaitForSynchro>
 800ae30:	b140      	cbz	r0, 800ae44 <HAL_RTC_SetDate+0xb2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	22ff      	movs	r2, #255	; 0xff
 800ae36:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ae38:	2304      	movs	r3, #4
 800ae3a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800ae3e:	f884 6020 	strb.w	r6, [r4, #32]
 800ae42:	e7e3      	b.n	800ae0c <HAL_RTC_SetDate+0x7a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	22ff      	movs	r2, #255	; 0xff
 800ae48:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800ae50:	2300      	movs	r3, #0
 800ae52:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 800ae56:	e7da      	b.n	800ae0e <HAL_RTC_SetDate+0x7c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ae58:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800ae5c:	433d      	orrs	r5, r7
 800ae5e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800ae62:	e7c0      	b.n	800ade6 <HAL_RTC_SetDate+0x54>

0800ae64 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ae64:	0903      	lsrs	r3, r0, #4
 800ae66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800ae6a:	f000 000f 	and.w	r0, r0, #15
 800ae6e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800ae72:	b2c0      	uxtb	r0, r0
 800ae74:	4770      	bx	lr

0800ae76 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ae76:	6803      	ldr	r3, [r0, #0]
 800ae78:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ae7a:	6048      	str	r0, [r1, #4]
{
 800ae7c:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ae7e:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ae80:	681c      	ldr	r4, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ae82:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ae86:	f3c4 4506 	ubfx	r5, r4, #16, #7
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800ae8a:	f3c4 2606 	ubfx	r6, r4, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ae8e:	6088      	str	r0, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800ae90:	f005 0340 	and.w	r3, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ae94:	f3c4 4005 	ubfx	r0, r4, #16, #6
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ae98:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ae9c:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800ae9e:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800aea0:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800aea2:	70cb      	strb	r3, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800aea4:	b952      	cbnz	r2, 800aebc <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800aea6:	f7ff ffdd 	bl	800ae64 <RTC_Bcd2ToByte>
 800aeaa:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800aeac:	4630      	mov	r0, r6
 800aeae:	f7ff ffd9 	bl	800ae64 <RTC_Bcd2ToByte>
 800aeb2:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f7ff ffd5 	bl	800ae64 <RTC_Bcd2ToByte>
 800aeba:	7088      	strb	r0, [r1, #2]
}
 800aebc:	2000      	movs	r0, #0
 800aebe:	bd70      	pop	{r4, r5, r6, pc}

0800aec0 <HAL_RTC_GetDate>:
{
 800aec0:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800aec2:	6803      	ldr	r3, [r0, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800aec6:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800aeca:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800aece:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 800aed2:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800aed6:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800aed8:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800aeda:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 800aedc:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800aede:	b952      	cbnz	r2, 800aef6 <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800aee0:	f7ff ffc0 	bl	800ae64 <RTC_Bcd2ToByte>
 800aee4:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800aee6:	4628      	mov	r0, r5
 800aee8:	f7ff ffbc 	bl	800ae64 <RTC_Bcd2ToByte>
 800aeec:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aeee:	4620      	mov	r0, r4
 800aef0:	f7ff ffb8 	bl	800ae64 <RTC_Bcd2ToByte>
 800aef4:	7088      	strb	r0, [r1, #2]
}
 800aef6:	2000      	movs	r0, #0
 800aef8:	bd38      	pop	{r3, r4, r5, pc}

0800aefa <SPI_WaitFifoStateUntilTimeout.part.0>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aefa:	6803      	ldr	r3, [r0, #0]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af04:	6842      	ldr	r2, [r0, #4]
 800af06:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800af0a:	d10a      	bne.n	800af22 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
 800af0c:	6882      	ldr	r2, [r0, #8]
 800af0e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800af12:	d002      	beq.n	800af1a <SPI_WaitFifoStateUntilTimeout.part.0+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af14:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800af18:	d103      	bne.n	800af22 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af22:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800af24:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800af28:	d107      	bne.n	800af3a <SPI_WaitFifoStateUntilTimeout.part.0+0x40>
        {
          SPI_RESET_CRC(hspi);
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af3a:	2301      	movs	r3, #1
 800af3c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af40:	2300      	movs	r3, #0
 800af42:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800af46:	2003      	movs	r0, #3
 800af48:	4770      	bx	lr

0800af4a <SPI_WaitFlagStateUntilTimeout>:
{
 800af4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af4e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800af52:	4605      	mov	r5, r0
 800af54:	460f      	mov	r7, r1
 800af56:	4616      	mov	r6, r2
 800af58:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af5a:	682a      	ldr	r2, [r5, #0]
 800af5c:	6893      	ldr	r3, [r2, #8]
 800af5e:	ea37 0303 	bics.w	r3, r7, r3
 800af62:	bf0c      	ite	eq
 800af64:	2301      	moveq	r3, #1
 800af66:	2300      	movne	r3, #0
 800af68:	429e      	cmp	r6, r3
 800af6a:	d102      	bne.n	800af72 <SPI_WaitFlagStateUntilTimeout+0x28>
}
 800af6c:	2000      	movs	r0, #0
 800af6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800af72:	1c63      	adds	r3, r4, #1
 800af74:	d0f2      	beq.n	800af5c <SPI_WaitFlagStateUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800af76:	b924      	cbnz	r4, 800af82 <SPI_WaitFlagStateUntilTimeout+0x38>
 800af78:	4628      	mov	r0, r5
}
 800af7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af7e:	f7ff bfbc 	b.w	800aefa <SPI_WaitFifoStateUntilTimeout.part.0>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800af82:	f7fd fe5d 	bl	8008c40 <HAL_GetTick>
 800af86:	eba0 0008 	sub.w	r0, r0, r8
 800af8a:	42a0      	cmp	r0, r4
 800af8c:	d3e5      	bcc.n	800af5a <SPI_WaitFlagStateUntilTimeout+0x10>
 800af8e:	e7f3      	b.n	800af78 <SPI_WaitFlagStateUntilTimeout+0x2e>

0800af90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800af94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af98:	4607      	mov	r7, r0
 800af9a:	460e      	mov	r6, r1
 800af9c:	4615      	mov	r5, r2
 800af9e:	461c      	mov	r4, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	6893      	ldr	r3, [r2, #8]
 800afa4:	4033      	ands	r3, r6
 800afa6:	42ab      	cmp	r3, r5
 800afa8:	d103      	bne.n	800afb2 <SPI_WaitFifoStateUntilTimeout+0x22>
      }
    }
  }

  return HAL_OK;
}
 800afaa:	2000      	movs	r0, #0
 800afac:	b002      	add	sp, #8
 800afae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800afb2:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800afb6:	d106      	bne.n	800afc6 <SPI_WaitFifoStateUntilTimeout+0x36>
 800afb8:	b92d      	cbnz	r5, 800afc6 <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800afba:	7b13      	ldrb	r3, [r2, #12]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 800afc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 800afc6:	1c63      	adds	r3, r4, #1
 800afc8:	d0eb      	beq.n	800afa2 <SPI_WaitFifoStateUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800afca:	b92c      	cbnz	r4, 800afd8 <SPI_WaitFifoStateUntilTimeout+0x48>
 800afcc:	4638      	mov	r0, r7
}
 800afce:	b002      	add	sp, #8
 800afd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afd4:	f7ff bf91 	b.w	800aefa <SPI_WaitFifoStateUntilTimeout.part.0>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800afd8:	f7fd fe32 	bl	8008c40 <HAL_GetTick>
 800afdc:	eba0 0008 	sub.w	r0, r0, r8
 800afe0:	42a0      	cmp	r0, r4
 800afe2:	d3dd      	bcc.n	800afa0 <SPI_WaitFifoStateUntilTimeout+0x10>
 800afe4:	e7f2      	b.n	800afcc <SPI_WaitFifoStateUntilTimeout+0x3c>

0800afe6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800afe6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800afe8:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afea:	6842      	ldr	r2, [r0, #4]
 800afec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800aff0:	4604      	mov	r4, r0
 800aff2:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aff4:	d10b      	bne.n	800b00e <SPI_EndRxTransaction+0x28>
 800aff6:	6882      	ldr	r2, [r0, #8]
 800aff8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800affc:	d002      	beq.n	800b004 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800affe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b002:	d104      	bne.n	800b00e <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b004:	6821      	ldr	r1, [r4, #0]
 800b006:	680a      	ldr	r2, [r1, #0]
 800b008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b00c:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b00e:	9600      	str	r6, [sp, #0]
 800b010:	2200      	movs	r2, #0
 800b012:	2180      	movs	r1, #128	; 0x80
 800b014:	4620      	mov	r0, r4
 800b016:	9303      	str	r3, [sp, #12]
 800b018:	f7ff ff97 	bl	800af4a <SPI_WaitFlagStateUntilTimeout>
 800b01c:	9b03      	ldr	r3, [sp, #12]
 800b01e:	4605      	mov	r5, r0
 800b020:	b128      	cbz	r0, 800b02e <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b022:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b024:	f043 0320 	orr.w	r3, r3, #32
 800b028:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b02a:	2503      	movs	r5, #3
 800b02c:	e013      	b.n	800b056 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b02e:	6862      	ldr	r2, [r4, #4]
 800b030:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b034:	d10f      	bne.n	800b056 <SPI_EndRxTransaction+0x70>
 800b036:	68a2      	ldr	r2, [r4, #8]
 800b038:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b03c:	d002      	beq.n	800b044 <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b03e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b042:	d108      	bne.n	800b056 <SPI_EndRxTransaction+0x70>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b044:	9600      	str	r6, [sp, #0]
 800b046:	2200      	movs	r2, #0
 800b048:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b04c:	4620      	mov	r0, r4
 800b04e:	f7ff ff9f 	bl	800af90 <SPI_WaitFifoStateUntilTimeout>
 800b052:	2800      	cmp	r0, #0
 800b054:	d1e5      	bne.n	800b022 <SPI_EndRxTransaction+0x3c>
}
 800b056:	4628      	mov	r0, r5
 800b058:	b004      	add	sp, #16
 800b05a:	bd70      	pop	{r4, r5, r6, pc}

0800b05c <SPI_EndRxTxTransaction>:
{
 800b05c:	b530      	push	{r4, r5, lr}
 800b05e:	b085      	sub	sp, #20
 800b060:	460b      	mov	r3, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b062:	9200      	str	r2, [sp, #0]
 800b064:	9103      	str	r1, [sp, #12]
{
 800b066:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b068:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b06c:	2200      	movs	r2, #0
{
 800b06e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b070:	f7ff ff8e 	bl	800af90 <SPI_WaitFifoStateUntilTimeout>
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	4602      	mov	r2, r0
 800b078:	b128      	cbz	r0, 800b086 <SPI_EndRxTxTransaction+0x2a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b07a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b07c:	f043 0320 	orr.w	r3, r3, #32
 800b080:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b082:	2003      	movs	r0, #3
 800b084:	e011      	b.n	800b0aa <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b086:	9500      	str	r5, [sp, #0]
 800b088:	2180      	movs	r1, #128	; 0x80
 800b08a:	4620      	mov	r0, r4
 800b08c:	9303      	str	r3, [sp, #12]
 800b08e:	f7ff ff5c 	bl	800af4a <SPI_WaitFlagStateUntilTimeout>
 800b092:	9b03      	ldr	r3, [sp, #12]
 800b094:	4602      	mov	r2, r0
 800b096:	2800      	cmp	r0, #0
 800b098:	d1ef      	bne.n	800b07a <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b09a:	9500      	str	r5, [sp, #0]
 800b09c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f7ff ff75 	bl	800af90 <SPI_WaitFifoStateUntilTimeout>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d1e7      	bne.n	800b07a <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 800b0aa:	b005      	add	sp, #20
 800b0ac:	bd30      	pop	{r4, r5, pc}

0800b0ae <HAL_SPI_MspInit>:
}
 800b0ae:	4770      	bx	lr

0800b0b0 <HAL_SPI_Init>:
{
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d053      	beq.n	800b160 <HAL_SPI_Init+0xb0>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0b8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800b0bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b0c0:	b91b      	cbnz	r3, 800b0ca <HAL_SPI_Init+0x1a>
    hspi->Lock = HAL_UNLOCKED;
 800b0c2:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800b0c6:	f7ff fff2 	bl	800b0ae <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800b0ca:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0cc:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800b0d4:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0d6:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800b0da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0de:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0e0:	f04f 0300 	mov.w	r3, #0
 800b0e4:	d83e      	bhi.n	800b164 <HAL_SPI_Init+0xb4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b0e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b0ea:	d000      	beq.n	800b0ee <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0ec:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b0ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0f0:	b92b      	cbnz	r3, 800b0fe <HAL_SPI_Init+0x4e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0f2:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b0f6:	bf8c      	ite	hi
 800b0f8:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b0fa:	2301      	movls	r3, #1
 800b0fc:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b0fe:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b102:	433b      	orrs	r3, r7
 800b104:	6927      	ldr	r7, [r4, #16]
 800b106:	69a1      	ldr	r1, [r4, #24]
 800b108:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b10a:	433b      	orrs	r3, r7
 800b10c:	6967      	ldr	r7, [r4, #20]
 800b10e:	433b      	orrs	r3, r7
 800b110:	69e7      	ldr	r7, [r4, #28]
 800b112:	433b      	orrs	r3, r7
 800b114:	6a27      	ldr	r7, [r4, #32]
 800b116:	433b      	orrs	r3, r7
 800b118:	4333      	orrs	r3, r6
 800b11a:	f401 7700 	and.w	r7, r1, #512	; 0x200
 800b11e:	433b      	orrs	r3, r7
 800b120:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b122:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b124:	2b02      	cmp	r3, #2
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
 800b126:	bf02      	ittt	eq
 800b128:	6813      	ldreq	r3, [r2, #0]
 800b12a:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800b12e:	6013      	streq	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b132:	431d      	orrs	r5, r3
 800b134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b136:	0c09      	lsrs	r1, r1, #16
 800b138:	431d      	orrs	r5, r3
 800b13a:	f001 0104 	and.w	r1, r1, #4
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b13e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b142:	ea45 0501 	orr.w	r5, r5, r1
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800b146:	bf08      	it	eq
 800b148:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b14a:	ea40 0005 	orr.w	r0, r0, r5
 800b14e:	6050      	str	r0, [r2, #4]
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800b150:	bf08      	it	eq
 800b152:	6113      	streq	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b154:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800b156:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b158:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b15a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800b15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b160:	2001      	movs	r0, #1
 800b162:	e7fc      	b.n	800b15e <HAL_SPI_Init+0xae>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b164:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b166:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800b16a:	e7be      	b.n	800b0ea <HAL_SPI_Init+0x3a>

0800b16c <HAL_SPI_MspDeInit>:
 800b16c:	4770      	bx	lr

0800b16e <HAL_SPI_DeInit>:
{
 800b16e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800b170:	4604      	mov	r4, r0
 800b172:	b180      	cbz	r0, 800b196 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800b174:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b176:	2302      	movs	r3, #2
 800b178:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800b17c:	6813      	ldr	r3, [r2, #0]
 800b17e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b182:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800b184:	f7ff fff2 	bl	800b16c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b188:	2000      	movs	r0, #0
 800b18a:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800b18c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800b190:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 800b194:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b196:	2001      	movs	r0, #1
 800b198:	e7fc      	b.n	800b194 <HAL_SPI_DeInit+0x26>

0800b19a <HAL_SPI_TransmitReceive>:
{
 800b19a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	4699      	mov	r9, r3
  __IO uint16_t tmpreg = 0U;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f8ad 300e 	strh.w	r3, [sp, #14]
  __HAL_LOCK(hspi);
 800b1a8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800b1ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800b1ae:	2b01      	cmp	r3, #1
{
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800b1b6:	f000 81a4 	beq.w	800b502 <HAL_SPI_TransmitReceive+0x368>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800b1c0:	f7fd fd3e 	bl	8008c40 <HAL_GetTick>
  tmp  = hspi->State;
 800b1c4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 800b1c8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b1ca:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800b1cc:	4680      	mov	r8, r0
  tmp  = hspi->State;
 800b1ce:	b2d9      	uxtb	r1, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b1d0:	d00a      	beq.n	800b1e8 <HAL_SPI_TransmitReceive+0x4e>
 800b1d2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b1d6:	f040 8192 	bne.w	800b4fe <HAL_SPI_TransmitReceive+0x364>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800b1da:	68a3      	ldr	r3, [r4, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f040 818e 	bne.w	800b4fe <HAL_SPI_TransmitReceive+0x364>
 800b1e2:	2904      	cmp	r1, #4
 800b1e4:	f040 818b 	bne.w	800b4fe <HAL_SPI_TransmitReceive+0x364>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b1e8:	2d00      	cmp	r5, #0
 800b1ea:	f000 8170 	beq.w	800b4ce <HAL_SPI_TransmitReceive+0x334>
 800b1ee:	2e00      	cmp	r6, #0
 800b1f0:	f000 816d 	beq.w	800b4ce <HAL_SPI_TransmitReceive+0x334>
 800b1f4:	f1b9 0f00 	cmp.w	r9, #0
 800b1f8:	f000 8169 	beq.w	800b4ce <HAL_SPI_TransmitReceive+0x334>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b1fc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b200:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b202:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b204:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b206:	bf1c      	itt	ne
 800b208:	2305      	movne	r3, #5
 800b20a:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b20e:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b210:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b214:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800b216:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800b21a:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b224:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b226:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b22a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b22e:	d107      	bne.n	800b240 <HAL_SPI_TransmitReceive+0xa6>
    SPI_RESET_CRC(hspi);
 800b230:	6819      	ldr	r1, [r3, #0]
 800b232:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b236:	6019      	str	r1, [r3, #0]
 800b238:	6819      	ldr	r1, [r3, #0]
 800b23a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b23e:	6019      	str	r1, [r3, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800b240:	68e0      	ldr	r0, [r4, #12]
 800b242:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b246:	d804      	bhi.n	800b252 <HAL_SPI_TransmitReceive+0xb8>
 800b248:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800b24c:	b289      	uxth	r1, r1
 800b24e:	2901      	cmp	r1, #1
 800b250:	d937      	bls.n	800b2c2 <HAL_SPI_TransmitReceive+0x128>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b252:	6859      	ldr	r1, [r3, #4]
 800b254:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b258:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b25a:	6819      	ldr	r1, [r3, #0]
 800b25c:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 800b25e:	bf5e      	ittt	pl
 800b260:	6819      	ldrpl	r1, [r3, #0]
 800b262:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
 800b266:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b268:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b26c:	d97f      	bls.n	800b36e <HAL_SPI_TransmitReceive+0x1d4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800b26e:	b11a      	cbz	r2, 800b278 <HAL_SPI_TransmitReceive+0xde>
 800b270:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b272:	b292      	uxth	r2, r2
 800b274:	2a01      	cmp	r2, #1
 800b276:	d106      	bne.n	800b286 <HAL_SPI_TransmitReceive+0xec>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800b278:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b27c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800b27e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b280:	3b01      	subs	r3, #1
 800b282:	b29b      	uxth	r3, r3
 800b284:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800b286:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b28a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	b9e3      	cbnz	r3, 800b2ca <HAL_SPI_TransmitReceive+0x130>
 800b290:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b294:	b29b      	uxth	r3, r3
 800b296:	b9c3      	cbnz	r3, 800b2ca <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b298:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b29a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b29e:	f040 80ff 	bne.w	800b4a0 <HAL_SPI_TransmitReceive+0x306>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f8cd 8000 	str.w	r8, [sp]
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	4611      	mov	r1, r2
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f7ff fe4c 	bl	800af4a <SPI_WaitFlagStateUntilTimeout>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	f000 80e9 	beq.w	800b48a <HAL_SPI_TransmitReceive+0x2f0>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b2b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b2ba:	f043 0302 	orr.w	r3, r3, #2
 800b2be:	6623      	str	r3, [r4, #96]	; 0x60
 800b2c0:	e04a      	b.n	800b358 <HAL_SPI_TransmitReceive+0x1be>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2c2:	6859      	ldr	r1, [r3, #4]
 800b2c4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800b2c8:	e7c6      	b.n	800b258 <HAL_SPI_TransmitReceive+0xbe>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b2ca:	f1b9 0f00 	cmp.w	r9, #0
 800b2ce:	d028      	beq.n	800b322 <HAL_SPI_TransmitReceive+0x188>
 800b2d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	b32b      	cbz	r3, 800b322 <HAL_SPI_TransmitReceive+0x188>
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	689a      	ldr	r2, [r3, #8]
 800b2da:	0790      	lsls	r0, r2, #30
 800b2dc:	d521      	bpl.n	800b322 <HAL_SPI_TransmitReceive+0x188>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800b2de:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b2e2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800b2e4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b2e6:	3a01      	subs	r2, #1
 800b2e8:	b292      	uxth	r2, r2
 800b2ea:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b2ec:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
 800b2f0:	fa1f f989 	uxth.w	r9, r9
 800b2f4:	f1b9 0f00 	cmp.w	r9, #0
 800b2f8:	d111      	bne.n	800b31e <HAL_SPI_TransmitReceive+0x184>
 800b2fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b2fc:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b300:	d10f      	bne.n	800b322 <HAL_SPI_TransmitReceive+0x188>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	0751      	lsls	r1, r2, #29
 800b306:	d406      	bmi.n	800b316 <HAL_SPI_TransmitReceive+0x17c>
 800b308:	685a      	ldr	r2, [r3, #4]
 800b30a:	0712      	lsls	r2, r2, #28
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800b30c:	bf42      	ittt	mi
 800b30e:	681a      	ldrmi	r2, [r3, #0]
 800b310:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800b314:	601a      	strmi	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b31c:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800b31e:	f04f 0900 	mov.w	r9, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800b322:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b326:	b29b      	uxth	r3, r3
 800b328:	b173      	cbz	r3, 800b348 <HAL_SPI_TransmitReceive+0x1ae>
 800b32a:	6821      	ldr	r1, [r4, #0]
 800b32c:	688a      	ldr	r2, [r1, #8]
 800b32e:	f012 0201 	ands.w	r2, r2, #1
 800b332:	d009      	beq.n	800b348 <HAL_SPI_TransmitReceive+0x1ae>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800b334:	68cb      	ldr	r3, [r1, #12]
 800b336:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800b33a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b33e:	3b01      	subs	r3, #1
 800b340:	b29b      	uxth	r3, r3
 800b342:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800b346:	4691      	mov	r9, r2
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b348:	1c7b      	adds	r3, r7, #1
 800b34a:	d09e      	beq.n	800b28a <HAL_SPI_TransmitReceive+0xf0>
 800b34c:	f7fd fc78 	bl	8008c40 <HAL_GetTick>
 800b350:	eba0 0008 	sub.w	r0, r0, r8
 800b354:	42b8      	cmp	r0, r7
 800b356:	d398      	bcc.n	800b28a <HAL_SPI_TransmitReceive+0xf0>
          errorcode = HAL_TIMEOUT;
 800b358:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800b35a:	2301      	movs	r3, #1
 800b35c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b360:	2300      	movs	r3, #0
 800b362:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b366:	4628      	mov	r0, r5
 800b368:	b005      	add	sp, #20
 800b36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800b36e:	b11a      	cbz	r2, 800b378 <HAL_SPI_TransmitReceive+0x1de>
 800b370:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b372:	b292      	uxth	r2, r2
 800b374:	2a01      	cmp	r2, #1
 800b376:	d10a      	bne.n	800b38e <HAL_SPI_TransmitReceive+0x1f4>
      if (hspi->TxXferCount > 1U)
 800b378:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b37a:	b292      	uxth	r2, r2
 800b37c:	2a01      	cmp	r2, #1
 800b37e:	d974      	bls.n	800b46a <HAL_SPI_TransmitReceive+0x2d0>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800b380:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b384:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800b386:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b388:	3b02      	subs	r3, #2
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800b38e:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b392:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b394:	b29b      	uxth	r3, r3
 800b396:	b92b      	cbnz	r3, 800b3a4 <HAL_SPI_TransmitReceive+0x20a>
 800b398:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f43f af7a 	beq.w	800b298 <HAL_SPI_TransmitReceive+0xfe>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b3a4:	f1b9 0f00 	cmp.w	r9, #0
 800b3a8:	d035      	beq.n	800b416 <HAL_SPI_TransmitReceive+0x27c>
 800b3aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d031      	beq.n	800b416 <HAL_SPI_TransmitReceive+0x27c>
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	689a      	ldr	r2, [r3, #8]
 800b3b6:	0790      	lsls	r0, r2, #30
 800b3b8:	d52d      	bpl.n	800b416 <HAL_SPI_TransmitReceive+0x27c>
        if (hspi->TxXferCount > 1U)
 800b3ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b3bc:	b292      	uxth	r2, r2
 800b3be:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800b3c0:	bf8b      	itete	hi
 800b3c2:	f835 2b02 	ldrhhi.w	r2, [r5], #2
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b3c6:	f815 2b01 	ldrbls.w	r2, [r5], #1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800b3ca:	60da      	strhi	r2, [r3, #12]
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b3cc:	731a      	strbls	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800b3ce:	bf8b      	itete	hi
 800b3d0:	8fe3      	ldrhhi	r3, [r4, #62]	; 0x3e
          hspi->TxXferCount--;
 800b3d2:	8fe3      	ldrhls	r3, [r4, #62]	; 0x3e
          hspi->TxXferCount -= 2U;
 800b3d4:	3b02      	subhi	r3, #2
          hspi->TxXferCount--;
 800b3d6:	f103 33ff 	addls.w	r3, r3, #4294967295
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b3de:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
 800b3e2:	fa1f f989 	uxth.w	r9, r9
 800b3e6:	f1b9 0f00 	cmp.w	r9, #0
 800b3ea:	d112      	bne.n	800b412 <HAL_SPI_TransmitReceive+0x278>
 800b3ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b3ee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b3f2:	d110      	bne.n	800b416 <HAL_SPI_TransmitReceive+0x27c>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	0751      	lsls	r1, r2, #29
 800b3fa:	d406      	bmi.n	800b40a <HAL_SPI_TransmitReceive+0x270>
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	0712      	lsls	r2, r2, #28
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800b400:	bf42      	ittt	mi
 800b402:	681a      	ldrmi	r2, [r3, #0]
 800b404:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800b408:	601a      	strmi	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b410:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800b412:	f04f 0900 	mov.w	r9, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800b416:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	b1e3      	cbz	r3, 800b458 <HAL_SPI_TransmitReceive+0x2be>
 800b41e:	6820      	ldr	r0, [r4, #0]
 800b420:	6881      	ldr	r1, [r0, #8]
 800b422:	f011 0101 	ands.w	r1, r1, #1
 800b426:	d017      	beq.n	800b458 <HAL_SPI_TransmitReceive+0x2be>
        if (hspi->RxXferCount > 1U)
 800b428:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d921      	bls.n	800b476 <HAL_SPI_TransmitReceive+0x2dc>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800b432:	68c3      	ldr	r3, [r0, #12]
 800b434:	f826 3b02 	strh.w	r3, [r6], #2
          hspi->RxXferCount -= 2U;
 800b438:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b43c:	3b02      	subs	r3, #2
 800b43e:	b29b      	uxth	r3, r3
 800b440:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b444:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b448:	b29b      	uxth	r3, r3
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d803      	bhi.n	800b456 <HAL_SPI_TransmitReceive+0x2bc>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b44e:	6843      	ldr	r3, [r0, #4]
 800b450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b454:	6043      	str	r3, [r0, #4]
        txallowed = 1U;
 800b456:	4689      	mov	r9, r1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b458:	1c7b      	adds	r3, r7, #1
 800b45a:	d09a      	beq.n	800b392 <HAL_SPI_TransmitReceive+0x1f8>
 800b45c:	f7fd fbf0 	bl	8008c40 <HAL_GetTick>
 800b460:	eba0 0008 	sub.w	r0, r0, r8
 800b464:	42b8      	cmp	r0, r7
 800b466:	d394      	bcc.n	800b392 <HAL_SPI_TransmitReceive+0x1f8>
 800b468:	e776      	b.n	800b358 <HAL_SPI_TransmitReceive+0x1be>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b46a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800b46e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800b470:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b472:	3b01      	subs	r3, #1
 800b474:	e789      	b.n	800b38a <HAL_SPI_TransmitReceive+0x1f0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b476:	7b03      	ldrb	r3, [r0, #12]
 800b478:	f806 3b01 	strb.w	r3, [r6], #1
          hspi->RxXferCount--;
 800b47c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b480:	3b01      	subs	r3, #1
 800b482:	b29b      	uxth	r3, r3
 800b484:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b488:	e7e5      	b.n	800b456 <HAL_SPI_TransmitReceive+0x2bc>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b48a:	68e2      	ldr	r2, [r4, #12]
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b492:	d11e      	bne.n	800b4d2 <HAL_SPI_TransmitReceive+0x338>
      tmpreg = hspi->Instance->DR;
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b498:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 800b49c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800b4a0:	6822      	ldr	r2, [r4, #0]
 800b4a2:	6895      	ldr	r5, [r2, #8]
 800b4a4:	f015 0510 	ands.w	r5, r5, #16
 800b4a8:	d007      	beq.n	800b4ba <HAL_SPI_TransmitReceive+0x320>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b4aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b4ac:	f043 0302 	orr.w	r3, r3, #2
 800b4b0:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b4b2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b4b6:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 800b4b8:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4ba:	4642      	mov	r2, r8
 800b4bc:	4639      	mov	r1, r7
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f7ff fdcc 	bl	800b05c <SPI_EndRxTxTransaction>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	f43f af48 	beq.w	800b35a <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4ca:	2320      	movs	r3, #32
 800b4cc:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b4ce:	2501      	movs	r5, #1
 800b4d0:	e743      	b.n	800b35a <HAL_SPI_TransmitReceive+0x1c0>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b4d2:	7b1b      	ldrb	r3, [r3, #12]
 800b4d4:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg);
 800b4d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b4dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d1de      	bne.n	800b4a0 <HAL_SPI_TransmitReceive+0x306>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f8cd 8000 	str.w	r8, [sp]
 800b4e8:	463b      	mov	r3, r7
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f7ff fd2c 	bl	800af4a <SPI_WaitFlagStateUntilTimeout>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f47f aee0 	bne.w	800b2b8 <HAL_SPI_TransmitReceive+0x11e>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	7b1b      	ldrb	r3, [r3, #12]
 800b4fc:	e7cc      	b.n	800b498 <HAL_SPI_TransmitReceive+0x2fe>
    errorcode = HAL_BUSY;
 800b4fe:	2502      	movs	r5, #2
 800b500:	e72b      	b.n	800b35a <HAL_SPI_TransmitReceive+0x1c0>
  __HAL_LOCK(hspi);
 800b502:	2502      	movs	r5, #2
 800b504:	e72f      	b.n	800b366 <HAL_SPI_TransmitReceive+0x1cc>

0800b506 <HAL_SPI_Receive>:
{
 800b506:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b50a:	461d      	mov	r5, r3
  __IO uint16_t tmpreg = 0U;
 800b50c:	2300      	movs	r3, #0
 800b50e:	f8ad 300e 	strh.w	r3, [sp, #14]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b512:	6843      	ldr	r3, [r0, #4]
 800b514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800b518:	4604      	mov	r4, r0
 800b51a:	460e      	mov	r6, r1
 800b51c:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b51e:	d10c      	bne.n	800b53a <HAL_SPI_Receive+0x34>
 800b520:	6883      	ldr	r3, [r0, #8]
 800b522:	b953      	cbnz	r3, 800b53a <HAL_SPI_Receive+0x34>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b524:	2304      	movs	r3, #4
 800b526:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b52a:	4613      	mov	r3, r2
 800b52c:	9500      	str	r5, [sp, #0]
 800b52e:	460a      	mov	r2, r1
 800b530:	f7ff fe33 	bl	800b19a <HAL_SPI_TransmitReceive>
}
 800b534:	b004      	add	sp, #16
 800b536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800b53a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b53e:	2b01      	cmp	r3, #1
 800b540:	f000 80f6 	beq.w	800b730 <HAL_SPI_Receive+0x22a>
 800b544:	2301      	movs	r3, #1
 800b546:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800b54a:	f7fd fb79 	bl	8008c40 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b54e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b552:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800b554:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800b556:	b2d8      	uxtb	r0, r3
 800b558:	f040 80e8 	bne.w	800b72c <HAL_SPI_Receive+0x226>
  if ((pData == NULL) || (Size == 0U))
 800b55c:	2e00      	cmp	r6, #0
 800b55e:	f000 8092 	beq.w	800b686 <HAL_SPI_Receive+0x180>
 800b562:	f1b8 0f00 	cmp.w	r8, #0
 800b566:	f000 808e 	beq.w	800b686 <HAL_SPI_Receive+0x180>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b56a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b56c:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b56e:	2304      	movs	r3, #4
 800b570:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b574:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b578:	f04f 0300 	mov.w	r3, #0
 800b57c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800b57e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800b582:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b586:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b588:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b58a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b58c:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	d10d      	bne.n	800b5b0 <HAL_SPI_Receive+0xaa>
    SPI_RESET_CRC(hspi);
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b5a2:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount--;
 800b5a4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b5a8:	3a01      	subs	r2, #1
 800b5aa:	b292      	uxth	r2, r2
 800b5ac:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5b0:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5b2:	685a      	ldr	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5b8:	bf8c      	ite	hi
 800b5ba:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5be:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
 800b5c2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5c4:	68a2      	ldr	r2, [r4, #8]
 800b5c6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800b5ca:	bf02      	ittt	eq
 800b5cc:	681a      	ldreq	r2, [r3, #0]
 800b5ce:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800b5d2:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800b5d8:	bf5e      	ittt	pl
 800b5da:	681a      	ldrpl	r2, [r3, #0]
 800b5dc:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800b5e0:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b5e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b5e6:	d91e      	bls.n	800b626 <HAL_SPI_Receive+0x120>
    while (hspi->RxXferCount > 0U)
 800b5e8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	b1fb      	cbz	r3, 800b630 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	689a      	ldr	r2, [r3, #8]
 800b5f4:	07d1      	lsls	r1, r2, #31
 800b5f6:	d555      	bpl.n	800b6a4 <HAL_SPI_Receive+0x19e>
        *((uint16_t *)pData) = hspi->Instance->DR;
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800b5fe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b602:	3b01      	subs	r3, #1
 800b604:	b29b      	uxth	r3, r3
 800b606:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b60a:	e7ed      	b.n	800b5e8 <HAL_SPI_Receive+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	689a      	ldr	r2, [r3, #8]
 800b610:	07d2      	lsls	r2, r2, #31
 800b612:	d536      	bpl.n	800b682 <HAL_SPI_Receive+0x17c>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b614:	7b1b      	ldrb	r3, [r3, #12]
 800b616:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 800b61a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b61e:	3b01      	subs	r3, #1
 800b620:	b29b      	uxth	r3, r3
 800b622:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800b626:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1ed      	bne.n	800b60c <HAL_SPI_Receive+0x106>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b636:	d14a      	bne.n	800b6ce <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b638:	6822      	ldr	r2, [r4, #0]
 800b63a:	6813      	ldr	r3, [r2, #0]
 800b63c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b640:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b642:	2201      	movs	r2, #1
 800b644:	9700      	str	r7, [sp, #0]
 800b646:	462b      	mov	r3, r5
 800b648:	4611      	mov	r1, r2
 800b64a:	4620      	mov	r0, r4
 800b64c:	f7ff fc7d 	bl	800af4a <SPI_WaitFlagStateUntilTimeout>
 800b650:	b9c0      	cbnz	r0, 800b684 <HAL_SPI_Receive+0x17e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b652:	68e2      	ldr	r2, [r4, #12]
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      *((uint16_t *)pData) = hspi->Instance->DR;
 800b65a:	bf8a      	itet	hi
 800b65c:	68db      	ldrhi	r3, [r3, #12]
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b65e:	7b1b      	ldrbls	r3, [r3, #12]
      *((uint16_t *)pData) = hspi->Instance->DR;
 800b660:	8033      	strhhi	r3, [r6, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b662:	f04f 0201 	mov.w	r2, #1
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b666:	bf98      	it	ls
 800b668:	7033      	strbls	r3, [r6, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b66a:	9700      	str	r7, [sp, #0]
 800b66c:	462b      	mov	r3, r5
 800b66e:	4611      	mov	r1, r2
 800b670:	4620      	mov	r0, r4
 800b672:	f7ff fc6a 	bl	800af4a <SPI_WaitFlagStateUntilTimeout>
 800b676:	b1f8      	cbz	r0, 800b6b8 <HAL_SPI_Receive+0x1b2>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b678:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b67a:	f043 0302 	orr.w	r3, r3, #2
 800b67e:	6623      	str	r3, [r4, #96]	; 0x60
 800b680:	e000      	b.n	800b684 <HAL_SPI_Receive+0x17e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b682:	b93d      	cbnz	r5, 800b694 <HAL_SPI_Receive+0x18e>
          errorcode = HAL_TIMEOUT;
 800b684:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800b686:	2301      	movs	r3, #1
 800b688:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b68c:	2300      	movs	r3, #0
 800b68e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800b692:	e74f      	b.n	800b534 <HAL_SPI_Receive+0x2e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b694:	1c68      	adds	r0, r5, #1
 800b696:	d0c6      	beq.n	800b626 <HAL_SPI_Receive+0x120>
 800b698:	f7fd fad2 	bl	8008c40 <HAL_GetTick>
 800b69c:	1bc0      	subs	r0, r0, r7
 800b69e:	42a8      	cmp	r0, r5
 800b6a0:	d3c1      	bcc.n	800b626 <HAL_SPI_Receive+0x120>
 800b6a2:	e7ef      	b.n	800b684 <HAL_SPI_Receive+0x17e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b6a4:	2d00      	cmp	r5, #0
 800b6a6:	d0ed      	beq.n	800b684 <HAL_SPI_Receive+0x17e>
 800b6a8:	1c6a      	adds	r2, r5, #1
 800b6aa:	d09d      	beq.n	800b5e8 <HAL_SPI_Receive+0xe2>
 800b6ac:	f7fd fac8 	bl	8008c40 <HAL_GetTick>
 800b6b0:	1bc0      	subs	r0, r0, r7
 800b6b2:	42a8      	cmp	r0, r5
 800b6b4:	d398      	bcc.n	800b5e8 <HAL_SPI_Receive+0xe2>
 800b6b6:	e7e5      	b.n	800b684 <HAL_SPI_Receive+0x17e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b6b8:	68e2      	ldr	r2, [r4, #12]
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b6c0:	d11d      	bne.n	800b6fe <HAL_SPI_Receive+0x1f8>
      tmpreg = hspi->Instance->DR;
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b6c6:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 800b6ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f7ff fc87 	bl	800afe6 <SPI_EndRxTransaction>
 800b6d8:	b108      	cbz	r0, 800b6de <HAL_SPI_Receive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6da:	2320      	movs	r3, #32
 800b6dc:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800b6de:	6822      	ldr	r2, [r4, #0]
 800b6e0:	6893      	ldr	r3, [r2, #8]
 800b6e2:	06db      	lsls	r3, r3, #27
 800b6e4:	d506      	bpl.n	800b6f4 <HAL_SPI_Receive+0x1ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b6e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b6e8:	f043 0302 	orr.w	r3, r3, #2
 800b6ec:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b6ee:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b6f2:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6f4:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800b6f6:	3800      	subs	r0, #0
 800b6f8:	bf18      	it	ne
 800b6fa:	2001      	movne	r0, #1
error :
 800b6fc:	e7c3      	b.n	800b686 <HAL_SPI_Receive+0x180>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b6fe:	7b1b      	ldrb	r3, [r3, #12]
 800b700:	f8ad 300e 	strh.w	r3, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b704:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg);
 800b708:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b70c:	d1df      	bne.n	800b6ce <HAL_SPI_Receive+0x1c8>
 800b70e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b710:	2b02      	cmp	r3, #2
 800b712:	d1dc      	bne.n	800b6ce <HAL_SPI_Receive+0x1c8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout, tickstart) != HAL_OK)
 800b714:	2201      	movs	r2, #1
 800b716:	9700      	str	r7, [sp, #0]
 800b718:	462b      	mov	r3, r5
 800b71a:	4611      	mov	r1, r2
 800b71c:	4620      	mov	r0, r4
 800b71e:	f7ff fc14 	bl	800af4a <SPI_WaitFlagStateUntilTimeout>
 800b722:	2800      	cmp	r0, #0
 800b724:	d1a8      	bne.n	800b678 <HAL_SPI_Receive+0x172>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	7b1b      	ldrb	r3, [r3, #12]
 800b72a:	e7cc      	b.n	800b6c6 <HAL_SPI_Receive+0x1c0>
    errorcode = HAL_BUSY;
 800b72c:	2002      	movs	r0, #2
 800b72e:	e7aa      	b.n	800b686 <HAL_SPI_Receive+0x180>
  __HAL_LOCK(hspi);
 800b730:	2002      	movs	r0, #2
 800b732:	e6ff      	b.n	800b534 <HAL_SPI_Receive+0x2e>

0800b734 <HAL_SPI_Transmit_IT>:
{
 800b734:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800b736:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800b73a:	2801      	cmp	r0, #1
 800b73c:	d049      	beq.n	800b7d2 <HAL_SPI_Transmit_IT+0x9e>
 800b73e:	2001      	movs	r0, #1
 800b740:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800b744:	2900      	cmp	r1, #0
 800b746:	d03c      	beq.n	800b7c2 <HAL_SPI_Transmit_IT+0x8e>
 800b748:	2a00      	cmp	r2, #0
 800b74a:	d03a      	beq.n	800b7c2 <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b74c:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 800b750:	2801      	cmp	r0, #1
 800b752:	d13a      	bne.n	800b7ca <HAL_SPI_Transmit_IT+0x96>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b754:	2003      	movs	r0, #3
 800b756:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b75a:	2000      	movs	r0, #0
 800b75c:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b75e:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b760:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 800b762:	491d      	ldr	r1, [pc, #116]	; (800b7d8 <HAL_SPI_Transmit_IT+0xa4>)
  hspi->RxXferCount = 0U;
 800b764:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->TxXferSize  = Size;
 800b768:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b76a:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b76c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b770:	64d8      	str	r0, [r3, #76]	; 0x4c
    hspi->TxISR = SPI_TxISR_8BIT;
 800b772:	4a1a      	ldr	r2, [pc, #104]	; (800b7dc <HAL_SPI_Transmit_IT+0xa8>)
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b774:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 800b776:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b77a:	bf98      	it	ls
 800b77c:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b77e:	6899      	ldr	r1, [r3, #8]
 800b780:	651a      	str	r2, [r3, #80]	; 0x50
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800b788:	bf02      	ittt	eq
 800b78a:	6811      	ldreq	r1, [r2, #0]
 800b78c:	f441 4180 	orreq.w	r1, r1, #16384	; 0x4000
 800b790:	6011      	streq	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b792:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b794:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b798:	d107      	bne.n	800b7aa <HAL_SPI_Transmit_IT+0x76>
    SPI_RESET_CRC(hspi);
 800b79a:	6811      	ldr	r1, [r2, #0]
 800b79c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b7a0:	6011      	str	r1, [r2, #0]
 800b7a2:	6811      	ldr	r1, [r2, #0]
 800b7a4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b7a8:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b7aa:	6851      	ldr	r1, [r2, #4]
 800b7ac:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 800b7b0:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b7b2:	6810      	ldr	r0, [r2, #0]
 800b7b4:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b7b8:	d109      	bne.n	800b7ce <HAL_SPI_Transmit_IT+0x9a>
    __HAL_SPI_ENABLE(hspi);
 800b7ba:	6811      	ldr	r1, [r2, #0]
 800b7bc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800b7c0:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b7c8:	4770      	bx	lr
    errorcode = HAL_BUSY;
 800b7ca:	2002      	movs	r0, #2
 800b7cc:	e7f9      	b.n	800b7c2 <HAL_SPI_Transmit_IT+0x8e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	e7f7      	b.n	800b7c2 <HAL_SPI_Transmit_IT+0x8e>
  __HAL_LOCK(hspi);
 800b7d2:	2002      	movs	r0, #2
}
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	0800ba33 	.word	0x0800ba33
 800b7dc:	0800ba65 	.word	0x0800ba65

0800b7e0 <HAL_SPI_TransmitReceive_IT>:
{
 800b7e0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 800b7e2:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800b7e6:	2c01      	cmp	r4, #1
 800b7e8:	d073      	beq.n	800b8d2 <HAL_SPI_TransmitReceive_IT+0xf2>
 800b7ea:	2401      	movs	r4, #1
 800b7ec:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp  = hspi->State;
 800b7f0:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b7f4:	2c01      	cmp	r4, #1
  tmp  = hspi->State;
 800b7f6:	b2e5      	uxtb	r5, r4
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b7f8:	d008      	beq.n	800b80c <HAL_SPI_TransmitReceive_IT+0x2c>
 800b7fa:	6844      	ldr	r4, [r0, #4]
 800b7fc:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 800b800:	d161      	bne.n	800b8c6 <HAL_SPI_TransmitReceive_IT+0xe6>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800b802:	6884      	ldr	r4, [r0, #8]
 800b804:	2c00      	cmp	r4, #0
 800b806:	d15e      	bne.n	800b8c6 <HAL_SPI_TransmitReceive_IT+0xe6>
 800b808:	2d04      	cmp	r5, #4
 800b80a:	d15c      	bne.n	800b8c6 <HAL_SPI_TransmitReceive_IT+0xe6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b80c:	2900      	cmp	r1, #0
 800b80e:	d05c      	beq.n	800b8ca <HAL_SPI_TransmitReceive_IT+0xea>
 800b810:	2a00      	cmp	r2, #0
 800b812:	d05a      	beq.n	800b8ca <HAL_SPI_TransmitReceive_IT+0xea>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d058      	beq.n	800b8ca <HAL_SPI_TransmitReceive_IT+0xea>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b818:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->TxXferSize  = Size;
 800b81c:	8783      	strh	r3, [r0, #60]	; 0x3c
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b81e:	2c04      	cmp	r4, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b820:	bf1c      	itt	ne
 800b822:	2405      	movne	r4, #5
 800b824:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b828:	2400      	movs	r4, #0
 800b82a:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->RxXferSize  = Size;
 800b82c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->TxXferCount = Size;
 800b830:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferCount = Size;
 800b832:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b836:	68c3      	ldr	r3, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b838:	6402      	str	r2, [r0, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b83a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b83e:	bf8b      	itete	hi
 800b840:	4a25      	ldrhi	r2, [pc, #148]	; (800b8d8 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b842:	4a26      	ldrls	r2, [pc, #152]	; (800b8dc <HAL_SPI_TransmitReceive_IT+0xfc>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b844:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b846:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800b848:	bf8c      	ite	hi
 800b84a:	4a25      	ldrhi	r2, [pc, #148]	; (800b8e0 <HAL_SPI_TransmitReceive_IT+0x100>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800b84c:	4a25      	ldrls	r2, [pc, #148]	; (800b8e4 <HAL_SPI_TransmitReceive_IT+0x104>)
 800b84e:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b850:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b852:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b854:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b858:	6802      	ldr	r2, [r0, #0]
 800b85a:	d12d      	bne.n	800b8b8 <HAL_SPI_TransmitReceive_IT+0xd8>
    hspi->CRCSize = 1U;
 800b85c:	2101      	movs	r1, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b85e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->CRCSize = 1U;
 800b862:	6481      	str	r1, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b864:	d803      	bhi.n	800b86e <HAL_SPI_TransmitReceive_IT+0x8e>
 800b866:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b868:	2902      	cmp	r1, #2
      hspi->CRCSize = 2U;
 800b86a:	bf08      	it	eq
 800b86c:	6481      	streq	r1, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800b86e:	6811      	ldr	r1, [r2, #0]
 800b870:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b874:	6011      	str	r1, [r2, #0]
 800b876:	6811      	ldr	r1, [r2, #0]
 800b878:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b87c:	6011      	str	r1, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 800b87e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b882:	d804      	bhi.n	800b88e <HAL_SPI_TransmitReceive_IT+0xae>
 800b884:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b888:	b29b      	uxth	r3, r3
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d917      	bls.n	800b8be <HAL_SPI_TransmitReceive_IT+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b88e:	6853      	ldr	r3, [r2, #4]
 800b890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b894:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b896:	6853      	ldr	r3, [r2, #4]
 800b898:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b89c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b89e:	6813      	ldr	r3, [r2, #0]
 800b8a0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800b8a4:	d113      	bne.n	800b8ce <HAL_SPI_TransmitReceive_IT+0xee>
    __HAL_SPI_ENABLE(hspi);
 800b8a6:	6811      	ldr	r1, [r2, #0]
 800b8a8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800b8ac:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	6481      	str	r1, [r0, #72]	; 0x48
 800b8bc:	e7df      	b.n	800b87e <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8be:	6853      	ldr	r3, [r2, #4]
 800b8c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b8c4:	e7e6      	b.n	800b894 <HAL_SPI_TransmitReceive_IT+0xb4>
    errorcode = HAL_BUSY;
 800b8c6:	2302      	movs	r3, #2
 800b8c8:	e7f1      	b.n	800b8ae <HAL_SPI_TransmitReceive_IT+0xce>
    errorcode = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e7ef      	b.n	800b8ae <HAL_SPI_TransmitReceive_IT+0xce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e7ed      	b.n	800b8ae <HAL_SPI_TransmitReceive_IT+0xce>
  __HAL_LOCK(hspi);
 800b8d2:	2302      	movs	r3, #2
 800b8d4:	e7ee      	b.n	800b8b4 <HAL_SPI_TransmitReceive_IT+0xd4>
 800b8d6:	bf00      	nop
 800b8d8:	0800bdc1 	.word	0x0800bdc1
 800b8dc:	0800bcb5 	.word	0x0800bcb5
 800b8e0:	0800bd6b 	.word	0x0800bd6b
 800b8e4:	0800bc53 	.word	0x0800bc53

0800b8e8 <HAL_SPI_Receive_IT>:
{
 800b8e8:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b8ea:	6886      	ldr	r6, [r0, #8]
{
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b8f0:	b95e      	cbnz	r6, 800b90a <HAL_SPI_Receive_IT+0x22>
 800b8f2:	6843      	ldr	r3, [r0, #4]
 800b8f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8f8:	d107      	bne.n	800b90a <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b8fa:	2304      	movs	r3, #4
 800b8fc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 800b900:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800b902:	4613      	mov	r3, r2
 800b904:	460a      	mov	r2, r1
 800b906:	f7ff bf6b 	b.w	800b7e0 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 800b90a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d05d      	beq.n	800b9ce <HAL_SPI_Receive_IT+0xe6>
 800b912:	2301      	movs	r3, #1
 800b914:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800b918:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	b2d8      	uxtb	r0, r3
 800b920:	d151      	bne.n	800b9c6 <HAL_SPI_Receive_IT+0xde>
  if ((pData == NULL) || (Size == 0U))
 800b922:	2d00      	cmp	r5, #0
 800b924:	d047      	beq.n	800b9b6 <HAL_SPI_Receive_IT+0xce>
 800b926:	2a00      	cmp	r2, #0
 800b928:	d045      	beq.n	800b9b6 <HAL_SPI_Receive_IT+0xce>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b92a:	2304      	movs	r3, #4
 800b92c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b930:	2300      	movs	r3, #0
 800b932:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b934:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b936:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 800b93a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b93c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b93e:	6523      	str	r3, [r4, #80]	; 0x50
 800b940:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b942:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 800b944:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b948:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b94a:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b94c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b950:	bf8b      	itete	hi
 800b952:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b956:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b95a:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b95c:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800b95e:	bf8c      	ite	hi
 800b960:	4a1c      	ldrhi	r2, [pc, #112]	; (800b9d4 <HAL_SPI_Receive_IT+0xec>)
    hspi->RxISR = SPI_RxISR_8BIT;
 800b962:	4a1d      	ldrls	r2, [pc, #116]	; (800b9d8 <HAL_SPI_Receive_IT+0xf0>)
 800b964:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b966:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800b96a:	bf02      	ittt	eq
 800b96c:	681a      	ldreq	r2, [r3, #0]
 800b96e:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800b972:	601a      	streq	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b974:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b976:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b97a:	d121      	bne.n	800b9c0 <HAL_SPI_Receive_IT+0xd8>
    hspi->CRCSize = 1U;
 800b97c:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b97e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 800b982:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b984:	d803      	bhi.n	800b98e <HAL_SPI_Receive_IT+0xa6>
 800b986:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b988:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 800b98a:	bf08      	it	eq
 800b98c:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b99c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b9a4:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9a6:	6818      	ldr	r0, [r3, #0]
 800b9a8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b9ac:	d10d      	bne.n	800b9ca <HAL_SPI_Receive_IT+0xe2>
    __HAL_SPI_ENABLE(hspi);
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9b4:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b9bc:	bc70      	pop	{r4, r5, r6}
 800b9be:	4770      	bx	lr
    hspi->CRCSize = 0U;
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	64a2      	str	r2, [r4, #72]	; 0x48
 800b9c4:	e7eb      	b.n	800b99e <HAL_SPI_Receive_IT+0xb6>
    errorcode = HAL_BUSY;
 800b9c6:	2002      	movs	r0, #2
 800b9c8:	e7f5      	b.n	800b9b6 <HAL_SPI_Receive_IT+0xce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	e7f3      	b.n	800b9b6 <HAL_SPI_Receive_IT+0xce>
  __HAL_LOCK(hspi);
 800b9ce:	2002      	movs	r0, #2
 800b9d0:	e7f4      	b.n	800b9bc <HAL_SPI_Receive_IT+0xd4>
 800b9d2:	bf00      	nop
 800b9d4:	0800bb69 	.word	0x0800bb69
 800b9d8:	0800baed 	.word	0x0800baed

0800b9dc <HAL_SPI_TxRxCpltCallback>:
 800b9dc:	4770      	bx	lr

0800b9de <HAL_SPI_ErrorCallback>:
 800b9de:	4770      	bx	lr

0800b9e0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b9e0:	b513      	push	{r0, r1, r4, lr}
 800b9e2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b9e4:	f7fd f92c 	bl	8008c40 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b9e8:	6821      	ldr	r1, [r4, #0]
 800b9ea:	684b      	ldr	r3, [r1, #4]
 800b9ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 800b9f0:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b9f2:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	2164      	movs	r1, #100	; 0x64
 800b9f8:	f7ff fb30 	bl	800b05c <SPI_EndRxTxTransaction>
 800b9fc:	b118      	cbz	r0, 800ba06 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ba00:	f043 0320 	orr.w	r3, r3, #32
 800ba04:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba06:	68a3      	ldr	r3, [r4, #8]
 800ba08:	b933      	cbnz	r3, 800ba18 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	68da      	ldr	r2, [r3, #12]
 800ba10:	9201      	str	r2, [sp, #4]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    HAL_SPI_ErrorCallback(hspi);
 800ba20:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba22:	b11b      	cbz	r3, 800ba2c <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 800ba24:	f7ff ffdb 	bl	800b9de <HAL_SPI_ErrorCallback>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
  }
}
 800ba28:	b002      	add	sp, #8
 800ba2a:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 800ba2c:	f7f9 f9f2 	bl	8004e14 <HAL_SPI_TxCpltCallback>
}
 800ba30:	e7fa      	b.n	800ba28 <SPI_CloseTx_ISR+0x48>

0800ba32 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800ba32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	6382      	str	r2, [r0, #56]	; 0x38
 800ba38:	6802      	ldr	r2, [r0, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	7313      	strb	r3, [r2, #12]
  hspi->TxXferCount--;
 800ba3e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ba40:	3b01      	subs	r3, #1
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800ba46:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	b953      	cbnz	r3, 800ba62 <SPI_TxISR_8BIT+0x30>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ba4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ba52:	bf01      	itttt	eq
 800ba54:	6802      	ldreq	r2, [r0, #0]
 800ba56:	6813      	ldreq	r3, [r2, #0]
 800ba58:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800ba5c:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 800ba5e:	f7ff bfbf 	b.w	800b9e0 <SPI_CloseTx_ISR>
}
 800ba62:	4770      	bx	lr

0800ba64 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba66:	6802      	ldr	r2, [r0, #0]
 800ba68:	f833 1b02 	ldrh.w	r1, [r3], #2
 800ba6c:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba6e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800ba70:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ba72:	3b01      	subs	r3, #1
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800ba78:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	b94b      	cbnz	r3, 800ba92 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ba80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ba84:	bf02      	ittt	eq
 800ba86:	6813      	ldreq	r3, [r2, #0]
 800ba88:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800ba8c:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 800ba8e:	f7ff bfa7 	b.w	800b9e0 <SPI_CloseTx_ISR>
}
 800ba92:	4770      	bx	lr

0800ba94 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ba94:	6802      	ldr	r2, [r0, #0]
 800ba96:	6853      	ldr	r3, [r2, #4]
 800ba98:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 800ba9c:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ba9e:	6053      	str	r3, [r2, #4]
{
 800baa0:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800baa2:	f7fd f8cd 	bl	8008c40 <HAL_GetTick>
 800baa6:	2164      	movs	r1, #100	; 0x64
 800baa8:	4602      	mov	r2, r0
 800baaa:	4620      	mov	r0, r4
 800baac:	f7ff fa9b 	bl	800afe6 <SPI_EndRxTransaction>
 800bab0:	b118      	cbz	r0, 800baba <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bab2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bab4:	f043 0320 	orr.w	r3, r3, #32
 800bab8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800baba:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800babc:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800babe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800bac2:	6893      	ldr	r3, [r2, #8]
 800bac4:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800bac8:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800baca:	d009      	beq.n	800bae0 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800bacc:	f043 0302 	orr.w	r3, r3, #2
 800bad0:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800bad2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800bad6:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 800bad8:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 800bada:	f7ff ff80 	bl	800b9de <HAL_SPI_ErrorCallback>
}
 800bade:	e004      	b.n	800baea <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 800bae0:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1f9      	bne.n	800bada <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 800bae6:	f7f9 f98d 	bl	8004e04 <HAL_SPI_RxCpltCallback>
}
 800baea:	bd10      	pop	{r4, pc}

0800baec <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 800baec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800baee:	6802      	ldr	r2, [r0, #0]
 800baf0:	1c59      	adds	r1, r3, #1
 800baf2:	6401      	str	r1, [r0, #64]	; 0x40
 800baf4:	7b12      	ldrb	r2, [r2, #12]
 800baf6:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800baf8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bafc:	3b01      	subs	r3, #1
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800bb04:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d108      	bne.n	800bb20 <SPI_RxISR_8BIT+0x34>
 800bb0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800bb14:	bf01      	itttt	eq
 800bb16:	6802      	ldreq	r2, [r0, #0]
 800bb18:	6813      	ldreq	r3, [r2, #0]
 800bb1a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800bb1e:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800bb20:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	b943      	cbnz	r3, 800bb3a <SPI_RxISR_8BIT+0x4e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb2e:	d102      	bne.n	800bb36 <SPI_RxISR_8BIT+0x4a>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 800bb30:	4b02      	ldr	r3, [pc, #8]	; (800bb3c <SPI_RxISR_8BIT+0x50>)
 800bb32:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800bb34:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 800bb36:	f7ff bfad 	b.w	800ba94 <SPI_CloseRx_ISR>
}
 800bb3a:	4770      	bx	lr
 800bb3c:	0800bb41 	.word	0x0800bb41

0800bb40 <SPI_RxISR_8BITCRC>:
{
 800bb40:	b082      	sub	sp, #8
  __IO uint8_t tmpreg = 0U;
 800bb42:	2200      	movs	r2, #0
 800bb44:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800bb48:	6802      	ldr	r2, [r0, #0]
 800bb4a:	7b12      	ldrb	r2, [r2, #12]
 800bb4c:	b2d2      	uxtb	r2, r2
 800bb4e:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg);
 800bb52:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 800bb56:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800bb58:	3a01      	subs	r2, #1
 800bb5a:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800bb5c:	b912      	cbnz	r2, 800bb64 <SPI_RxISR_8BITCRC+0x24>
}
 800bb5e:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 800bb60:	f7ff bf98 	b.w	800ba94 <SPI_CloseRx_ISR>
}
 800bb64:	b002      	add	sp, #8
 800bb66:	4770      	bx	lr

0800bb68 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb68:	6802      	ldr	r2, [r0, #0]
 800bb6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bb6c:	68d1      	ldr	r1, [r2, #12]
 800bb6e:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb72:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800bb74:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800bb80:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d107      	bne.n	800bb9a <SPI_RxISR_16BIT+0x32>
 800bb8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800bb90:	bf02      	ittt	eq
 800bb92:	6813      	ldreq	r3, [r2, #0]
 800bb94:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800bb98:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800bb9a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	b943      	cbnz	r3, 800bbb4 <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bba2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba8:	d102      	bne.n	800bbb0 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800bbaa:	4b03      	ldr	r3, [pc, #12]	; (800bbb8 <SPI_RxISR_16BIT+0x50>)
 800bbac:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800bbae:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 800bbb0:	f7ff bf70 	b.w	800ba94 <SPI_CloseRx_ISR>
}
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	0800bbbd 	.word	0x0800bbbd

0800bbbc <SPI_RxISR_16BITCRC>:
{
 800bbbc:	b082      	sub	sp, #8
  __IO uint16_t tmpreg = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f8ad 3006 	strh.w	r3, [sp, #6]
  tmpreg = hspi->Instance->DR;
 800bbc4:	6803      	ldr	r3, [r0, #0]
 800bbc6:	68da      	ldr	r2, [r3, #12]
 800bbc8:	b292      	uxth	r2, r2
 800bbca:	f8ad 2006 	strh.w	r2, [sp, #6]
  UNUSED(tmpreg);
 800bbce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bbd2:	685a      	ldr	r2, [r3, #4]
 800bbd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bbd8:	605a      	str	r2, [r3, #4]
}
 800bbda:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 800bbdc:	f7ff bf5a 	b.w	800ba94 <SPI_CloseRx_ISR>

0800bbe0 <SPI_CloseRxTx_ISR>:
{
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800bbe4:	f7fd f82c 	bl	8008c40 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bbe8:	6821      	ldr	r1, [r4, #0]
 800bbea:	684b      	ldr	r3, [r1, #4]
 800bbec:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 800bbf0:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bbf2:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	2164      	movs	r1, #100	; 0x64
 800bbf8:	f7ff fa30 	bl	800b05c <SPI_EndRxTxTransaction>
 800bbfc:	b118      	cbz	r0, 800bc06 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbfe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bc00:	f043 0320 	orr.w	r3, r3, #32
 800bc04:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800bc06:	6822      	ldr	r2, [r4, #0]
 800bc08:	6893      	ldr	r3, [r2, #8]
 800bc0a:	f013 0f10 	tst.w	r3, #16
 800bc0e:	f04f 0301 	mov.w	r3, #1
 800bc12:	d00c      	beq.n	800bc2e <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 800bc14:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800bc18:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bc1a:	f043 0302 	orr.w	r3, r3, #2
 800bc1e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800bc20:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800bc24:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 800bc26:	4620      	mov	r0, r4
 800bc28:	f7ff fed9 	bl	800b9de <HAL_SPI_ErrorCallback>
}
 800bc2c:	e00a      	b.n	800bc44 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800bc2e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bc30:	b962      	cbnz	r2, 800bc4c <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bc32:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 800bc36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bc3a:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 800bc3c:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bc3e:	d102      	bne.n	800bc46 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 800bc40:	f7f9 f8e0 	bl	8004e04 <HAL_SPI_RxCpltCallback>
}
 800bc44:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 800bc46:	f7ff fec9 	bl	800b9dc <HAL_SPI_TxRxCpltCallback>
 800bc4a:	e7fb      	b.n	800bc44 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 800bc4c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800bc50:	e7e9      	b.n	800bc26 <SPI_CloseRxTx_ISR+0x46>

0800bc52 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 800bc52:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 800bc54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bc56:	6801      	ldr	r1, [r0, #0]
 800bc58:	b292      	uxth	r2, r2
 800bc5a:	2a01      	cmp	r2, #1
 800bc5c:	d918      	bls.n	800bc90 <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc5e:	f833 2b02 	ldrh.w	r2, [r3], #2
 800bc62:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc64:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800bc66:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bc68:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800bc6e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	b9f3      	cbnz	r3, 800bcb2 <SPI_2linesTxISR_8BIT+0x60>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc74:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bc76:	6803      	ldr	r3, [r0, #0]
 800bc78:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bc7c:	d10f      	bne.n	800bc9e <SPI_2linesTxISR_8BIT+0x4c>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bc84:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc8c:	605a      	str	r2, [r3, #4]
      return;
 800bc8e:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800bc90:	1c5a      	adds	r2, r3, #1
 800bc92:	6382      	str	r2, [r0, #56]	; 0x38
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	730b      	strb	r3, [r1, #12]
    hspi->TxXferCount--;
 800bc98:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	e7e5      	b.n	800bc6a <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bca4:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 800bca6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	b90b      	cbnz	r3, 800bcb2 <SPI_2linesTxISR_8BIT+0x60>
      SPI_CloseRxTx_ISR(hspi);
 800bcae:	f7ff bf97 	b.w	800bbe0 <SPI_CloseRxTx_ISR>
}
 800bcb2:	4770      	bx	lr

0800bcb4 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 800bcb4:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
 800bcb8:	6802      	ldr	r2, [r0, #0]
 800bcba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bcbc:	b289      	uxth	r1, r1
 800bcbe:	2901      	cmp	r1, #1
 800bcc0:	d922      	bls.n	800bd08 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bcc2:	68d1      	ldr	r1, [r2, #12]
 800bcc4:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcc8:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800bcca:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bcce:	3b02      	subs	r3, #2
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800bcd6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d103      	bne.n	800bce8 <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bce0:	6853      	ldr	r3, [r2, #4]
 800bce2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bce6:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 800bce8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	b9f3      	cbnz	r3, 800bd2e <SPI_2linesRxISR_8BIT+0x7a>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bcf0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bcf2:	6803      	ldr	r3, [r0, #0]
 800bcf4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bcf8:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bcfa:	d110      	bne.n	800bd1e <SPI_2linesRxISR_8BIT+0x6a>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bcfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bd00:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 800bd02:	4b0b      	ldr	r3, [pc, #44]	; (800bd30 <SPI_2linesRxISR_8BIT+0x7c>)
 800bd04:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800bd06:	4770      	bx	lr
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 800bd08:	1c59      	adds	r1, r3, #1
 800bd0a:	6401      	str	r1, [r0, #64]	; 0x40
 800bd0c:	7b12      	ldrb	r2, [r2, #12]
 800bd0e:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 800bd10:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bd14:	3b01      	subs	r3, #1
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 800bd1c:	e7e4      	b.n	800bce8 <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bd1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bd22:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 800bd24:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	b90b      	cbnz	r3, 800bd2e <SPI_2linesRxISR_8BIT+0x7a>
      SPI_CloseRxTx_ISR(hspi);
 800bd2a:	f7ff bf59 	b.w	800bbe0 <SPI_CloseRxTx_ISR>
}
 800bd2e:	4770      	bx	lr
 800bd30:	0800bd35 	.word	0x0800bd35

0800bd34 <SPI_2linesRxISR_8BITCRC>:
{
 800bd34:	b082      	sub	sp, #8
  __IO uint8_t tmpreg = 0U;
 800bd36:	2200      	movs	r2, #0
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800bd38:	6801      	ldr	r1, [r0, #0]
  __IO uint8_t tmpreg = 0U;
 800bd3a:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800bd3e:	7b0a      	ldrb	r2, [r1, #12]
 800bd40:	b2d2      	uxtb	r2, r2
 800bd42:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg);
 800bd46:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 800bd4a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800bd4c:	3a01      	subs	r2, #1
 800bd4e:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800bd50:	b94a      	cbnz	r2, 800bd66 <SPI_2linesRxISR_8BITCRC+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bd52:	684a      	ldr	r2, [r1, #4]
 800bd54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bd58:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800bd5a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	b913      	cbnz	r3, 800bd66 <SPI_2linesRxISR_8BITCRC+0x32>
}
 800bd60:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 800bd62:	f7ff bf3d 	b.w	800bbe0 <SPI_CloseRxTx_ISR>
}
 800bd66:	b002      	add	sp, #8
 800bd68:	4770      	bx	lr

0800bd6a <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd6a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800bd6c:	6802      	ldr	r2, [r0, #0]
{
 800bd6e:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd70:	f831 4b02 	ldrh.w	r4, [r1], #2
 800bd74:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd76:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800bd78:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800bd7a:	3901      	subs	r1, #1
 800bd7c:	b289      	uxth	r1, r1
 800bd7e:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800bd80:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800bd82:	b289      	uxth	r1, r1
 800bd84:	b959      	cbnz	r1, 800bd9e <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd86:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800bd88:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bd8c:	d10a      	bne.n	800bda4 <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800bd8e:	6813      	ldr	r3, [r2, #0]
 800bd90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bd94:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bd96:	6853      	ldr	r3, [r2, #4]
 800bd98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd9c:	6053      	str	r3, [r2, #4]
}
 800bd9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bda2:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bda4:	6851      	ldr	r1, [r2, #4]
 800bda6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bdaa:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800bdac:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1f3      	bne.n	800bd9e <SPI_2linesTxISR_16BIT+0x34>
}
 800bdb6:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800bdba:	f7ff bf11 	b.w	800bbe0 <SPI_CloseRxTx_ISR>
	...

0800bdc0 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bdc0:	6801      	ldr	r1, [r0, #0]
 800bdc2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800bdc4:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bdc6:	68cc      	ldr	r4, [r1, #12]
 800bdc8:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdcc:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800bdce:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 800bdd2:	3a01      	subs	r2, #1
 800bdd4:	b292      	uxth	r2, r2
 800bdd6:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800bdda:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 800bdde:	b292      	uxth	r2, r2
 800bde0:	b92a      	cbnz	r2, 800bdee <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bde2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bde4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bde8:	d104      	bne.n	800bdf4 <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 800bdea:	4a08      	ldr	r2, [pc, #32]	; (800be0c <SPI_2linesRxISR_16BIT+0x4c>)
 800bdec:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 800bdee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdf2:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bdf4:	684a      	ldr	r2, [r1, #4]
 800bdf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdfa:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800bdfc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1f4      	bne.n	800bdee <SPI_2linesRxISR_16BIT+0x2e>
}
 800be04:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800be08:	f7ff beea 	b.w	800bbe0 <SPI_CloseRxTx_ISR>
 800be0c:	0800be11 	.word	0x0800be11

0800be10 <SPI_2linesRxISR_16BITCRC>:
{
 800be10:	b082      	sub	sp, #8
  __IO uint16_t tmpreg = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	f8ad 3006 	strh.w	r3, [sp, #6]
  tmpreg = hspi->Instance->DR;
 800be18:	6803      	ldr	r3, [r0, #0]
 800be1a:	68da      	ldr	r2, [r3, #12]
 800be1c:	b292      	uxth	r2, r2
 800be1e:	f8ad 2006 	strh.w	r2, [sp, #6]
  UNUSED(tmpreg);
 800be22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800be26:	685a      	ldr	r2, [r3, #4]
 800be28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be2c:	605a      	str	r2, [r3, #4]
}
 800be2e:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 800be30:	f7ff bed6 	b.w	800bbe0 <SPI_CloseRxTx_ISR>

0800be34 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800be34:	6803      	ldr	r3, [r0, #0]
{
 800be36:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800be38:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800be3a:	689a      	ldr	r2, [r3, #8]
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800be3c:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800be40:	2d01      	cmp	r5, #1
{
 800be42:	b085      	sub	sp, #20
 800be44:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800be46:	d106      	bne.n	800be56 <HAL_SPI_IRQHandler+0x22>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800be48:	064d      	lsls	r5, r1, #25
 800be4a:	d504      	bpl.n	800be56 <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 800be4c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 800be4e:	b005      	add	sp, #20
 800be50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 800be54:	4718      	bx	r3
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800be56:	0795      	lsls	r5, r2, #30
 800be58:	d504      	bpl.n	800be64 <HAL_SPI_IRQHandler+0x30>
 800be5a:	0608      	lsls	r0, r1, #24
 800be5c:	d502      	bpl.n	800be64 <HAL_SPI_IRQHandler+0x30>
    hspi->TxISR(hspi);
 800be5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800be60:	4620      	mov	r0, r4
 800be62:	e7f4      	b.n	800be4e <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800be64:	f412 7fb0 	tst.w	r2, #352	; 0x160
 800be68:	d051      	beq.n	800bf0e <HAL_SPI_IRQHandler+0xda>
 800be6a:	068d      	lsls	r5, r1, #26
 800be6c:	d54f      	bpl.n	800bf0e <HAL_SPI_IRQHandler+0xda>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 800be6e:	0650      	lsls	r0, r2, #25
 800be70:	d50f      	bpl.n	800be92 <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800be72:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800be76:	2803      	cmp	r0, #3
 800be78:	f04f 0500 	mov.w	r5, #0
 800be7c:	d041      	beq.n	800bf02 <HAL_SPI_IRQHandler+0xce>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800be7e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800be80:	f040 0004 	orr.w	r0, r0, #4
 800be84:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be86:	9500      	str	r5, [sp, #0]
 800be88:	68d8      	ldr	r0, [r3, #12]
 800be8a:	9000      	str	r0, [sp, #0]
 800be8c:	6898      	ldr	r0, [r3, #8]
 800be8e:	9000      	str	r0, [sp, #0]
 800be90:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 800be92:	0695      	lsls	r5, r2, #26
 800be94:	d50c      	bpl.n	800beb0 <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800be96:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800be98:	f040 0001 	orr.w	r0, r0, #1
 800be9c:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800be9e:	2000      	movs	r0, #0
 800bea0:	9002      	str	r0, [sp, #8]
 800bea2:	6898      	ldr	r0, [r3, #8]
 800bea4:	9002      	str	r0, [sp, #8]
 800bea6:	6818      	ldr	r0, [r3, #0]
 800bea8:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800beac:	6018      	str	r0, [r3, #0]
 800beae:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 800beb0:	05d0      	lsls	r0, r2, #23
 800beb2:	d508      	bpl.n	800bec6 <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800beb4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800beb6:	f042 0208 	orr.w	r2, r2, #8
 800beba:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bebc:	2200      	movs	r2, #0
 800bebe:	9203      	str	r2, [sp, #12]
 800bec0:	689a      	ldr	r2, [r3, #8]
 800bec2:	9203      	str	r2, [sp, #12]
 800bec4:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bec6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bec8:	b30a      	cbz	r2, 800bf0e <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bed0:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800bed2:	2201      	movs	r2, #1
 800bed4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bed8:	078a      	lsls	r2, r1, #30
 800beda:	d01a      	beq.n	800bf12 <HAL_SPI_IRQHandler+0xde>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bedc:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800bede:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bee0:	f022 0203 	bic.w	r2, r2, #3
 800bee4:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800bee6:	b118      	cbz	r0, 800bef0 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bee8:	4b0c      	ldr	r3, [pc, #48]	; (800bf1c <HAL_SPI_IRQHandler+0xe8>)
 800beea:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800beec:	f7fc ff39 	bl	8008d62 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 800bef0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bef2:	b160      	cbz	r0, 800bf0e <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bef4:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <HAL_SPI_IRQHandler+0xe8>)
 800bef6:	6383      	str	r3, [r0, #56]	; 0x38
}
 800bef8:	b005      	add	sp, #20
 800befa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800befe:	f7fc bf30 	b.w	8008d62 <HAL_DMA_Abort_IT>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf02:	9501      	str	r5, [sp, #4]
 800bf04:	68da      	ldr	r2, [r3, #12]
 800bf06:	9201      	str	r2, [sp, #4]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	9b01      	ldr	r3, [sp, #4]
}
 800bf0e:	b005      	add	sp, #20
 800bf10:	bd30      	pop	{r4, r5, pc}
        HAL_SPI_ErrorCallback(hspi);
 800bf12:	4620      	mov	r0, r4
 800bf14:	f7ff fd63 	bl	800b9de <HAL_SPI_ErrorCallback>
 800bf18:	e7f9      	b.n	800bf0e <HAL_SPI_IRQHandler+0xda>
 800bf1a:	bf00      	nop
 800bf1c:	0800bf21 	.word	0x0800bf21

0800bf20 <SPI_DMAAbortOnError>:
{
 800bf20:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf22:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800bf24:	2300      	movs	r3, #0
 800bf26:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800bf2a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800bf2c:	f7ff fd57 	bl	800b9de <HAL_SPI_ErrorCallback>
}
 800bf30:	bd08      	pop	{r3, pc}

0800bf32 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf32:	6803      	ldr	r3, [r0, #0]
 800bf34:	68da      	ldr	r2, [r3, #12]
 800bf36:	f042 0201 	orr.w	r2, r2, #1
 800bf3a:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	f042 0201 	orr.w	r2, r2, #1
 800bf42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800bf44:	2000      	movs	r0, #0
 800bf46:	4770      	bx	lr

0800bf48 <HAL_TIM_OC_DelayElapsedCallback>:
 800bf48:	4770      	bx	lr

0800bf4a <HAL_TIM_IC_CaptureCallback>:
 800bf4a:	4770      	bx	lr

0800bf4c <HAL_TIM_PWM_PulseFinishedCallback>:
 800bf4c:	4770      	bx	lr

0800bf4e <HAL_TIM_TriggerCallback>:
 800bf4e:	4770      	bx	lr

0800bf50 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf50:	6803      	ldr	r3, [r0, #0]
 800bf52:	691a      	ldr	r2, [r3, #16]
 800bf54:	0791      	lsls	r1, r2, #30
{
 800bf56:	b510      	push	{r4, lr}
 800bf58:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf5a:	d50e      	bpl.n	800bf7a <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800bf5c:	68da      	ldr	r2, [r3, #12]
 800bf5e:	0792      	lsls	r2, r2, #30
 800bf60:	d50b      	bpl.n	800bf7a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf62:	f06f 0202 	mvn.w	r2, #2
 800bf66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf68:	2201      	movs	r2, #1
 800bf6a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	079b      	lsls	r3, r3, #30
 800bf70:	d077      	beq.n	800c062 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800bf72:	f7ff ffea 	bl	800bf4a <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf76:	2300      	movs	r3, #0
 800bf78:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	691a      	ldr	r2, [r3, #16]
 800bf7e:	0750      	lsls	r0, r2, #29
 800bf80:	d510      	bpl.n	800bfa4 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	0751      	lsls	r1, r2, #29
 800bf86:	d50d      	bpl.n	800bfa4 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bf88:	f06f 0204 	mvn.w	r2, #4
 800bf8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf8e:	2202      	movs	r2, #2
 800bf90:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bf98:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800bf9a:	d068      	beq.n	800c06e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800bf9c:	f7ff ffd5 	bl	800bf4a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bfa4:	6823      	ldr	r3, [r4, #0]
 800bfa6:	691a      	ldr	r2, [r3, #16]
 800bfa8:	0712      	lsls	r2, r2, #28
 800bfaa:	d50f      	bpl.n	800bfcc <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800bfac:	68da      	ldr	r2, [r3, #12]
 800bfae:	0710      	lsls	r0, r2, #28
 800bfb0:	d50c      	bpl.n	800bfcc <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bfb2:	f06f 0208 	mvn.w	r2, #8
 800bfb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bfb8:	2204      	movs	r2, #4
 800bfba:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bfc0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800bfc2:	d05a      	beq.n	800c07a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800bfc4:	f7ff ffc1 	bl	800bf4a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	691a      	ldr	r2, [r3, #16]
 800bfd0:	06d2      	lsls	r2, r2, #27
 800bfd2:	d510      	bpl.n	800bff6 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800bfd4:	68da      	ldr	r2, [r3, #12]
 800bfd6:	06d0      	lsls	r0, r2, #27
 800bfd8:	d50d      	bpl.n	800bff6 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bfda:	f06f 0210 	mvn.w	r2, #16
 800bfde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfe0:	2208      	movs	r2, #8
 800bfe2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bfea:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800bfec:	d04b      	beq.n	800c086 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800bfee:	f7ff ffac 	bl	800bf4a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bff2:	2300      	movs	r3, #0
 800bff4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	691a      	ldr	r2, [r3, #16]
 800bffa:	07d1      	lsls	r1, r2, #31
 800bffc:	d508      	bpl.n	800c010 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800bffe:	68da      	ldr	r2, [r3, #12]
 800c000:	07d2      	lsls	r2, r2, #31
 800c002:	d505      	bpl.n	800c010 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c004:	f06f 0201 	mvn.w	r2, #1
 800c008:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7f8 f9fc 	bl	8004408 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	691a      	ldr	r2, [r3, #16]
 800c014:	0610      	lsls	r0, r2, #24
 800c016:	d508      	bpl.n	800c02a <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800c018:	68da      	ldr	r2, [r3, #12]
 800c01a:	0611      	lsls	r1, r2, #24
 800c01c:	d505      	bpl.n	800c02a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c01e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c022:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c024:	4620      	mov	r0, r4
 800c026:	f000 f8dc 	bl	800c1e2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	691a      	ldr	r2, [r3, #16]
 800c02e:	0652      	lsls	r2, r2, #25
 800c030:	d508      	bpl.n	800c044 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800c032:	68da      	ldr	r2, [r3, #12]
 800c034:	0650      	lsls	r0, r2, #25
 800c036:	d505      	bpl.n	800c044 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c03c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c03e:	4620      	mov	r0, r4
 800c040:	f7ff ff85 	bl	800bf4e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	691a      	ldr	r2, [r3, #16]
 800c048:	0691      	lsls	r1, r2, #26
 800c04a:	d522      	bpl.n	800c092 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800c04c:	68da      	ldr	r2, [r3, #12]
 800c04e:	0692      	lsls	r2, r2, #26
 800c050:	d51f      	bpl.n	800c092 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c052:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800c056:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c058:	611a      	str	r2, [r3, #16]
    }
  }
}
 800c05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800c05e:	f000 b8bf 	b.w	800c1e0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c062:	f7ff ff71 	bl	800bf48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c066:	4620      	mov	r0, r4
 800c068:	f7ff ff70 	bl	800bf4c <HAL_TIM_PWM_PulseFinishedCallback>
 800c06c:	e783      	b.n	800bf76 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c06e:	f7ff ff6b 	bl	800bf48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c072:	4620      	mov	r0, r4
 800c074:	f7ff ff6a 	bl	800bf4c <HAL_TIM_PWM_PulseFinishedCallback>
 800c078:	e792      	b.n	800bfa0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c07a:	f7ff ff65 	bl	800bf48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c07e:	4620      	mov	r0, r4
 800c080:	f7ff ff64 	bl	800bf4c <HAL_TIM_PWM_PulseFinishedCallback>
 800c084:	e7a0      	b.n	800bfc8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c086:	f7ff ff5f 	bl	800bf48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c08a:	4620      	mov	r0, r4
 800c08c:	f7ff ff5e 	bl	800bf4c <HAL_TIM_PWM_PulseFinishedCallback>
 800c090:	e7af      	b.n	800bff2 <HAL_TIM_IRQHandler+0xa2>
}
 800c092:	bd10      	pop	{r4, pc}

0800c094 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c094:	4a30      	ldr	r2, [pc, #192]	; (800c158 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800c096:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c098:	4290      	cmp	r0, r2
 800c09a:	d012      	beq.n	800c0c2 <TIM_Base_SetConfig+0x2e>
 800c09c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c0a0:	d00f      	beq.n	800c0c2 <TIM_Base_SetConfig+0x2e>
 800c0a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c0a6:	4290      	cmp	r0, r2
 800c0a8:	d00b      	beq.n	800c0c2 <TIM_Base_SetConfig+0x2e>
 800c0aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0ae:	4290      	cmp	r0, r2
 800c0b0:	d007      	beq.n	800c0c2 <TIM_Base_SetConfig+0x2e>
 800c0b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0b6:	4290      	cmp	r0, r2
 800c0b8:	d003      	beq.n	800c0c2 <TIM_Base_SetConfig+0x2e>
 800c0ba:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c0be:	4290      	cmp	r0, r2
 800c0c0:	d119      	bne.n	800c0f6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800c0c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c0c8:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0ca:	4a23      	ldr	r2, [pc, #140]	; (800c158 <TIM_Base_SetConfig+0xc4>)
 800c0cc:	4290      	cmp	r0, r2
 800c0ce:	d01d      	beq.n	800c10c <TIM_Base_SetConfig+0x78>
 800c0d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c0d4:	d01a      	beq.n	800c10c <TIM_Base_SetConfig+0x78>
 800c0d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c0da:	4290      	cmp	r0, r2
 800c0dc:	d016      	beq.n	800c10c <TIM_Base_SetConfig+0x78>
 800c0de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0e2:	4290      	cmp	r0, r2
 800c0e4:	d012      	beq.n	800c10c <TIM_Base_SetConfig+0x78>
 800c0e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c0ea:	4290      	cmp	r0, r2
 800c0ec:	d00e      	beq.n	800c10c <TIM_Base_SetConfig+0x78>
 800c0ee:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c0f2:	4290      	cmp	r0, r2
 800c0f4:	d00a      	beq.n	800c10c <TIM_Base_SetConfig+0x78>
 800c0f6:	4a19      	ldr	r2, [pc, #100]	; (800c15c <TIM_Base_SetConfig+0xc8>)
 800c0f8:	4290      	cmp	r0, r2
 800c0fa:	d007      	beq.n	800c10c <TIM_Base_SetConfig+0x78>
 800c0fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c100:	4290      	cmp	r0, r2
 800c102:	d003      	beq.n	800c10c <TIM_Base_SetConfig+0x78>
 800c104:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c108:	4290      	cmp	r0, r2
 800c10a:	d103      	bne.n	800c114 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c10c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c10e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c112:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800c114:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 800c116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800c11a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800c11c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c11e:	688b      	ldr	r3, [r1, #8]
 800c120:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800c122:	680b      	ldr	r3, [r1, #0]
 800c124:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c126:	4b0c      	ldr	r3, [pc, #48]	; (800c158 <TIM_Base_SetConfig+0xc4>)
 800c128:	4298      	cmp	r0, r3
 800c12a:	d00f      	beq.n	800c14c <TIM_Base_SetConfig+0xb8>
 800c12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c130:	4298      	cmp	r0, r3
 800c132:	d00b      	beq.n	800c14c <TIM_Base_SetConfig+0xb8>
 800c134:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800c138:	4298      	cmp	r0, r3
 800c13a:	d007      	beq.n	800c14c <TIM_Base_SetConfig+0xb8>
 800c13c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c140:	4298      	cmp	r0, r3
 800c142:	d003      	beq.n	800c14c <TIM_Base_SetConfig+0xb8>
 800c144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c148:	4298      	cmp	r0, r3
 800c14a:	d101      	bne.n	800c150 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c14c:	690b      	ldr	r3, [r1, #16]
 800c14e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c150:	2301      	movs	r3, #1
 800c152:	6143      	str	r3, [r0, #20]
}
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	40012c00 	.word	0x40012c00
 800c15c:	40014000 	.word	0x40014000

0800c160 <HAL_TIM_Base_Init>:
{
 800c160:	b510      	push	{r4, lr}
  if(htim == NULL)
 800c162:	4604      	mov	r4, r0
 800c164:	b1a0      	cbz	r0, 800c190 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800c166:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c16a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c16e:	b91b      	cbnz	r3, 800c178 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c170:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c174:	f7f8 fa02 	bl	800457c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800c178:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c17a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800c17c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c180:	1d21      	adds	r1, r4, #4
 800c182:	f7ff ff87 	bl	800c094 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800c186:	2301      	movs	r3, #1
 800c188:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c18c:	2000      	movs	r0, #0
}
 800c18e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c190:	2001      	movs	r0, #1
 800c192:	e7fc      	b.n	800c18e <HAL_TIM_Base_Init+0x2e>

0800c194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800c194:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c196:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d01c      	beq.n	800c1d8 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c19e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1a0:	4d0e      	ldr	r5, [pc, #56]	; (800c1dc <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800c1a2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800c1a4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1a6:	42aa      	cmp	r2, r5
 800c1a8:	d003      	beq.n	800c1b2 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800c1aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800c1ae:	42aa      	cmp	r2, r5
 800c1b0:	d103      	bne.n	800c1ba <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1b2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1b8:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1ba:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1bc:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1c2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c1c4:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1c8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1ca:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800c1cc:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800c1ce:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800c1d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800c1d4:	4618      	mov	r0, r3
}
 800c1d6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800c1d8:	2002      	movs	r0, #2
 800c1da:	e7fc      	b.n	800c1d6 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800c1dc:	40012c00 	.word	0x40012c00

0800c1e0 <HAL_TIMEx_CommutationCallback>:
 800c1e0:	4770      	bx	lr

0800c1e2 <HAL_TIMEx_BreakCallback>:
 800c1e2:	4770      	bx	lr

0800c1e4 <HAL_UART_MspInit>:
  UNUSED(huart);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800c1e4:	4770      	bx	lr
	...

0800c1e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1ea:	69c1      	ldr	r1, [r0, #28]
  if(UART_INSTANCE_LOWPOWER(huart))
 800c1ec:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1ee:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1f0:	681d      	ldr	r5, [r3, #0]
{
 800c1f2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1f4:	6900      	ldr	r0, [r0, #16]
 800c1f6:	4302      	orrs	r2, r0
 800c1f8:	6960      	ldr	r0, [r4, #20]
 800c1fa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1fc:	48ac      	ldr	r0, [pc, #688]	; (800c4b0 <UART_SetConfig+0x2c8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1fe:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c200:	4028      	ands	r0, r5
 800c202:	4302      	orrs	r2, r0
 800c204:	601a      	str	r2, [r3, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	68e0      	ldr	r0, [r4, #12]
 800c20a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c20e:	4302      	orrs	r2, r0
 800c210:	605a      	str	r2, [r3, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c212:	4aa8      	ldr	r2, [pc, #672]	; (800c4b4 <UART_SetConfig+0x2cc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c214:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c216:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c218:	bf1c      	itt	ne
 800c21a:	6a22      	ldrne	r2, [r4, #32]
 800c21c:	4310      	orrne	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c21e:	689a      	ldr	r2, [r3, #8]
 800c220:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800c224:	4302      	orrs	r2, r0
 800c226:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c228:	4aa3      	ldr	r2, [pc, #652]	; (800c4b8 <UART_SetConfig+0x2d0>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d11c      	bne.n	800c268 <UART_SetConfig+0x80>
 800c22e:	4ba3      	ldr	r3, [pc, #652]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c234:	f003 0303 	and.w	r3, r3, #3
 800c238:	3b01      	subs	r3, #1
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	f200 8120 	bhi.w	800c480 <UART_SetConfig+0x298>
 800c240:	4a9f      	ldr	r2, [pc, #636]	; (800c4c0 <UART_SetConfig+0x2d8>)
 800c242:	5cd3      	ldrb	r3, [r2, r3]
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c244:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c248:	f040 80df 	bne.w	800c40a <UART_SetConfig+0x222>
  {
    switch (clocksource)
 800c24c:	2b08      	cmp	r3, #8
 800c24e:	f200 80d9 	bhi.w	800c404 <UART_SetConfig+0x21c>
 800c252:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c256:	0148      	.short	0x0148
 800c258:	011e0118 	.word	0x011e0118
 800c25c:	012a00d7 	.word	0x012a00d7
 800c260:	00d700d7 	.word	0x00d700d7
 800c264:	003400d7 	.word	0x003400d7
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c268:	4a96      	ldr	r2, [pc, #600]	; (800c4c4 <UART_SetConfig+0x2dc>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d108      	bne.n	800c280 <UART_SetConfig+0x98>
 800c26e:	4b93      	ldr	r3, [pc, #588]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c270:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c274:	4b92      	ldr	r3, [pc, #584]	; (800c4c0 <UART_SetConfig+0x2d8>)
 800c276:	f002 020c 	and.w	r2, r2, #12
 800c27a:	4413      	add	r3, r2
 800c27c:	78db      	ldrb	r3, [r3, #3]
  if(UART_INSTANCE_LOWPOWER(huart))
 800c27e:	e7e1      	b.n	800c244 <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c280:	4a91      	ldr	r2, [pc, #580]	; (800c4c8 <UART_SetConfig+0x2e0>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d120      	bne.n	800c2c8 <UART_SetConfig+0xe0>
 800c286:	4b8d      	ldr	r3, [pc, #564]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c28c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c290:	2b20      	cmp	r3, #32
 800c292:	f000 80fb 	beq.w	800c48c <UART_SetConfig+0x2a4>
 800c296:	d80c      	bhi.n	800c2b2 <UART_SetConfig+0xca>
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 8121 	beq.w	800c4e0 <UART_SetConfig+0x2f8>
 800c29e:	2b10      	cmp	r3, #16
 800c2a0:	f000 8100 	beq.w	800c4a4 <UART_SetConfig+0x2bc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2a4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c2a8:	f000 80ac 	beq.w	800c404 <UART_SetConfig+0x21c>
 800c2ac:	2501      	movs	r5, #1
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	e0cd      	b.n	800c44e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2b2:	2b30      	cmp	r3, #48	; 0x30
 800c2b4:	d1f6      	bne.n	800c2a4 <UART_SetConfig+0xbc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2b6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c2ba:	f040 80da 	bne.w	800c472 <UART_SetConfig+0x28a>
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c2be:	6862      	ldr	r2, [r4, #4]
 800c2c0:	0853      	lsrs	r3, r2, #1
 800c2c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c2c6:	e0ea      	b.n	800c49e <UART_SetConfig+0x2b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2c8:	4a80      	ldr	r2, [pc, #512]	; (800c4cc <UART_SetConfig+0x2e4>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d10f      	bne.n	800c2ee <UART_SetConfig+0x106>
 800c2ce:	4b7b      	ldr	r3, [pc, #492]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c2d8:	2b80      	cmp	r3, #128	; 0x80
 800c2da:	f000 80d7 	beq.w	800c48c <UART_SetConfig+0x2a4>
 800c2de:	d804      	bhi.n	800c2ea <UART_SetConfig+0x102>
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f000 80fd 	beq.w	800c4e0 <UART_SetConfig+0x2f8>
 800c2e6:	2b40      	cmp	r3, #64	; 0x40
 800c2e8:	e7da      	b.n	800c2a0 <UART_SetConfig+0xb8>
 800c2ea:	2bc0      	cmp	r3, #192	; 0xc0
 800c2ec:	e7e2      	b.n	800c2b4 <UART_SetConfig+0xcc>
 800c2ee:	4a78      	ldr	r2, [pc, #480]	; (800c4d0 <UART_SetConfig+0x2e8>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d112      	bne.n	800c31a <UART_SetConfig+0x132>
 800c2f4:	4b71      	ldr	r3, [pc, #452]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c302:	f000 80c3 	beq.w	800c48c <UART_SetConfig+0x2a4>
 800c306:	d805      	bhi.n	800c314 <UART_SetConfig+0x12c>
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 80e9 	beq.w	800c4e0 <UART_SetConfig+0x2f8>
 800c30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c312:	e7c5      	b.n	800c2a0 <UART_SetConfig+0xb8>
 800c314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c318:	e7cc      	b.n	800c2b4 <UART_SetConfig+0xcc>
 800c31a:	4a66      	ldr	r2, [pc, #408]	; (800c4b4 <UART_SetConfig+0x2cc>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d1c1      	bne.n	800c2a4 <UART_SetConfig+0xbc>
 800c320:	4b66      	ldr	r3, [pc, #408]	; (800c4bc <UART_SetConfig+0x2d4>)
 800c322:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800c326:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800c32a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c32e:	d02b      	beq.n	800c388 <UART_SetConfig+0x1a0>
 800c330:	d809      	bhi.n	800c346 <UART_SetConfig+0x15e>
 800c332:	b17d      	cbz	r5, 800c354 <UART_SetConfig+0x16c>
 800c334:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c338:	d022      	beq.n	800c380 <UART_SetConfig+0x198>
        ret = HAL_ERROR;
 800c33a:	2501      	movs	r5, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c33c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800c33e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  
  return ret;
}
 800c342:	4628      	mov	r0, r5
 800c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c346:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800c34a:	d1f6      	bne.n	800c33a <UART_SetConfig+0x152>
 800c34c:	2508      	movs	r5, #8
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800c34e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c352:	e004      	b.n	800c35e <UART_SetConfig+0x176>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800c354:	f7fe f8b4 	bl	800a4c0 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800c358:	2800      	cmp	r0, #0
 800c35a:	f000 808f 	beq.w	800c47c <UART_SetConfig+0x294>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800c35e:	6862      	ldr	r2, [r4, #4]
 800c360:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800c364:	4283      	cmp	r3, r0
 800c366:	d8e8      	bhi.n	800c33a <UART_SetConfig+0x152>
 800c368:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800c36c:	d8e5      	bhi.n	800c33a <UART_SetConfig+0x152>
        switch (clocksource)
 800c36e:	2d08      	cmp	r5, #8
 800c370:	d845      	bhi.n	800c3fe <UART_SetConfig+0x216>
 800c372:	e8df f005 	tbb	[pc, r5]
 800c376:	440c      	.short	0x440c
 800c378:	442e4422 	.word	0x442e4422
 800c37c:	4444      	.short	0x4444
 800c37e:	3b          	.byte	0x3b
 800c37f:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800c380:	f7fd fd50 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
      break;
 800c384:	2504      	movs	r5, #4
 800c386:	e7e7      	b.n	800c358 <UART_SetConfig+0x170>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800c388:	4852      	ldr	r0, [pc, #328]	; (800c4d4 <UART_SetConfig+0x2ec>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c38a:	2502      	movs	r5, #2
 800c38c:	e7e7      	b.n	800c35e <UART_SetConfig+0x176>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c38e:	f7fe f897 	bl	800a4c0 <HAL_RCC_GetPCLK1Freq>
 800c392:	6862      	ldr	r2, [r4, #4]
 800c394:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c398:	0856      	lsrs	r6, r2, #1
 800c39a:	2700      	movs	r7, #0
 800c39c:	fbe1 6700 	umlal	r6, r7, r1, r0
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	4639      	mov	r1, r7
 800c3a6:	f7f4 fc7f 	bl	8000ca8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3aa:	4b4b      	ldr	r3, [pc, #300]	; (800c4d8 <UART_SetConfig+0x2f0>)
 800c3ac:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d8c2      	bhi.n	800c33a <UART_SetConfig+0x152>
      huart->Instance->BRR = usartdiv;
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	60d8      	str	r0, [r3, #12]
 800c3b8:	e7c0      	b.n	800c33c <UART_SetConfig+0x154>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800c3ba:	4848      	ldr	r0, [pc, #288]	; (800c4dc <UART_SetConfig+0x2f4>)
 800c3bc:	0855      	lsrs	r5, r2, #1
 800c3be:	2100      	movs	r1, #0
 800c3c0:	1940      	adds	r0, r0, r5
 800c3c2:	f04f 0300 	mov.w	r3, #0
 800c3c6:	f141 0100 	adc.w	r1, r1, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c3ca:	f7f4 fc6d 	bl	8000ca8 <__aeabi_uldivmod>
          break;
 800c3ce:	2500      	movs	r5, #0
 800c3d0:	e7eb      	b.n	800c3aa <UART_SetConfig+0x1c2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c3d2:	f7fd fd27 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 800c3d6:	6862      	ldr	r2, [r4, #4]
 800c3d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3dc:	0856      	lsrs	r6, r2, #1
 800c3de:	2700      	movs	r7, #0
 800c3e0:	fbe1 6700 	umlal	r6, r7, r1, r0
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	4639      	mov	r1, r7
 800c3ea:	e7ee      	b.n	800c3ca <UART_SetConfig+0x1e2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c3ec:	0850      	lsrs	r0, r2, #1
 800c3ee:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800c3f2:	f04f 0300 	mov.w	r3, #0
 800c3f6:	bf2c      	ite	cs
 800c3f8:	2101      	movcs	r1, #1
 800c3fa:	2100      	movcc	r1, #0
 800c3fc:	e7e5      	b.n	800c3ca <UART_SetConfig+0x1e2>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800c3fe:	2501      	movs	r5, #1
 800c400:	2000      	movs	r0, #0
 800c402:	e7d2      	b.n	800c3aa <UART_SetConfig+0x1c2>
      ret = HAL_ERROR;
 800c404:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c406:	2300      	movs	r3, #0
 800c408:	e077      	b.n	800c4fa <UART_SetConfig+0x312>
    switch (clocksource)
 800c40a:	2b08      	cmp	r3, #8
 800c40c:	f63f af4e 	bhi.w	800c2ac <UART_SetConfig+0xc4>
 800c410:	a201      	add	r2, pc, #4	; (adr r2, 800c418 <UART_SetConfig+0x230>)
 800c412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c416:	bf00      	nop
 800c418:	0800c43d 	.word	0x0800c43d
 800c41c:	0800c459 	.word	0x0800c459
 800c420:	0800c45f 	.word	0x0800c45f
 800c424:	0800c2ad 	.word	0x0800c2ad
 800c428:	0800c46d 	.word	0x0800c46d
 800c42c:	0800c2ad 	.word	0x0800c2ad
 800c430:	0800c2ad 	.word	0x0800c2ad
 800c434:	0800c2ad 	.word	0x0800c2ad
 800c438:	0800c473 	.word	0x0800c473
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c43c:	f7fe f840 	bl	800a4c0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c440:	6863      	ldr	r3, [r4, #4]
 800c442:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c446:	fbb0 f0f3 	udiv	r0, r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800c44a:	2500      	movs	r5, #0
 800c44c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c44e:	f1a0 0210 	sub.w	r2, r0, #16
 800c452:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c456:	e7ab      	b.n	800c3b0 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c458:	f7fe f842 	bl	800a4e0 <HAL_RCC_GetPCLK2Freq>
 800c45c:	e7f0      	b.n	800c440 <UART_SetConfig+0x258>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c45e:	6863      	ldr	r3, [r4, #4]
 800c460:	0858      	lsrs	r0, r3, #1
 800c462:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800c466:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 800c46a:	e7ec      	b.n	800c446 <UART_SetConfig+0x25e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c46c:	f7fd fcda 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 800c470:	e7e6      	b.n	800c440 <UART_SetConfig+0x258>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c472:	6863      	ldr	r3, [r4, #4]
 800c474:	0858      	lsrs	r0, r3, #1
 800c476:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800c47a:	e7e4      	b.n	800c446 <UART_SetConfig+0x25e>
 800c47c:	4605      	mov	r5, r0
 800c47e:	e75d      	b.n	800c33c <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c480:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c484:	d1e8      	bne.n	800c458 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c486:	f7fe f82b 	bl	800a4e0 <HAL_RCC_GetPCLK2Freq>
 800c48a:	e02e      	b.n	800c4ea <UART_SetConfig+0x302>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c48c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c490:	d1e5      	bne.n	800c45e <UART_SetConfig+0x276>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c492:	6862      	ldr	r2, [r4, #4]
 800c494:	0853      	lsrs	r3, r2, #1
 800c496:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800c49a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c49e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a2:	e028      	b.n	800c4f6 <UART_SetConfig+0x30e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4a4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c4a8:	d1e0      	bne.n	800c46c <UART_SetConfig+0x284>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c4aa:	f7fd fcbb 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 800c4ae:	e01c      	b.n	800c4ea <UART_SetConfig+0x302>
 800c4b0:	efff69f3 	.word	0xefff69f3
 800c4b4:	40008000 	.word	0x40008000
 800c4b8:	40013800 	.word	0x40013800
 800c4bc:	40021000 	.word	0x40021000
 800c4c0:	080286a0 	.word	0x080286a0
 800c4c4:	40004400 	.word	0x40004400
 800c4c8:	40004800 	.word	0x40004800
 800c4cc:	40004c00 	.word	0x40004c00
 800c4d0:	40005000 	.word	0x40005000
 800c4d4:	00f42400 	.word	0x00f42400
 800c4d8:	000ffcff 	.word	0x000ffcff
 800c4dc:	f4240000 	.word	0xf4240000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c4e4:	d1aa      	bne.n	800c43c <UART_SetConfig+0x254>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c4e6:	f7fd ffeb 	bl	800a4c0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c4ea:	6863      	ldr	r3, [r4, #4]
 800c4ec:	085a      	lsrs	r2, r3, #1
 800c4ee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c4f2:	fbb0 f3f3 	udiv	r3, r0, r3
 800c4f6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800c4f8:	2500      	movs	r5, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4fa:	f1a3 0110 	sub.w	r1, r3, #16
 800c4fe:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800c502:	4291      	cmp	r1, r2
 800c504:	f63f af19 	bhi.w	800c33a <UART_SetConfig+0x152>
      brrtemp = usartdiv & 0xFFF0U;
 800c508:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 800c50c:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c50e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800c512:	4313      	orrs	r3, r2
 800c514:	60cb      	str	r3, [r1, #12]
 800c516:	e711      	b.n	800c33c <UART_SetConfig+0x154>

0800c518 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c518:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c51a:	07da      	lsls	r2, r3, #31
{
 800c51c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c51e:	d506      	bpl.n	800c52e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c520:	6801      	ldr	r1, [r0, #0]
 800c522:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c524:	684a      	ldr	r2, [r1, #4]
 800c526:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c52a:	4322      	orrs	r2, r4
 800c52c:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c52e:	079c      	lsls	r4, r3, #30
 800c530:	d506      	bpl.n	800c540 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c532:	6801      	ldr	r1, [r0, #0]
 800c534:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c536:	684a      	ldr	r2, [r1, #4]
 800c538:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c53c:	4322      	orrs	r2, r4
 800c53e:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c540:	0759      	lsls	r1, r3, #29
 800c542:	d506      	bpl.n	800c552 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c544:	6801      	ldr	r1, [r0, #0]
 800c546:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c548:	684a      	ldr	r2, [r1, #4]
 800c54a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c54e:	4322      	orrs	r2, r4
 800c550:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c552:	071a      	lsls	r2, r3, #28
 800c554:	d506      	bpl.n	800c564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c556:	6801      	ldr	r1, [r0, #0]
 800c558:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c55a:	684a      	ldr	r2, [r1, #4]
 800c55c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c560:	4322      	orrs	r2, r4
 800c562:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c564:	06dc      	lsls	r4, r3, #27
 800c566:	d506      	bpl.n	800c576 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c568:	6801      	ldr	r1, [r0, #0]
 800c56a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c56c:	688a      	ldr	r2, [r1, #8]
 800c56e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c572:	4322      	orrs	r2, r4
 800c574:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c576:	0699      	lsls	r1, r3, #26
 800c578:	d506      	bpl.n	800c588 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c57a:	6801      	ldr	r1, [r0, #0]
 800c57c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c57e:	688a      	ldr	r2, [r1, #8]
 800c580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c584:	4322      	orrs	r2, r4
 800c586:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c588:	065a      	lsls	r2, r3, #25
 800c58a:	d50f      	bpl.n	800c5ac <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c58c:	6801      	ldr	r1, [r0, #0]
 800c58e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c590:	684a      	ldr	r2, [r1, #4]
 800c592:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c596:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c598:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c59c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c59e:	d105      	bne.n	800c5ac <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5a0:	684a      	ldr	r2, [r1, #4]
 800c5a2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c5a4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c5a8:	4322      	orrs	r2, r4
 800c5aa:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5ac:	061b      	lsls	r3, r3, #24
 800c5ae:	d506      	bpl.n	800c5be <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5b0:	6802      	ldr	r2, [r0, #0]
 800c5b2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800c5b4:	6853      	ldr	r3, [r2, #4]
 800c5b6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c5ba:	430b      	orrs	r3, r1
 800c5bc:	6053      	str	r3, [r2, #4]
  }
}
 800c5be:	bd10      	pop	{r4, pc}

0800c5c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	460e      	mov	r6, r1
 800c5cc:	4615      	mov	r5, r2
 800c5ce:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5d0:	6822      	ldr	r2, [r4, #0]
 800c5d2:	69d3      	ldr	r3, [r2, #28]
 800c5d4:	ea36 0303 	bics.w	r3, r6, r3
 800c5d8:	bf0c      	ite	eq
 800c5da:	2301      	moveq	r3, #1
 800c5dc:	2300      	movne	r3, #0
 800c5de:	42ab      	cmp	r3, r5
 800c5e0:	d001      	beq.n	800c5e6 <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	e017      	b.n	800c616 <UART_WaitOnFlagUntilTimeout+0x56>
    if(Timeout != HAL_MAX_DELAY)
 800c5e6:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c5ea:	d0f2      	beq.n	800c5d2 <UART_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c5ec:	f1b8 0f00 	cmp.w	r8, #0
 800c5f0:	d113      	bne.n	800c61a <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c5fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5fc:	689a      	ldr	r2, [r3, #8]
 800c5fe:	f022 0201 	bic.w	r2, r2, #1
 800c602:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c604:	2320      	movs	r3, #32
 800c606:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800c60a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 800c60e:	2300      	movs	r3, #0
 800c610:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800c614:	2003      	movs	r0, #3
}
 800c616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c61a:	f7fc fb11 	bl	8008c40 <HAL_GetTick>
 800c61e:	1bc0      	subs	r0, r0, r7
 800c620:	4540      	cmp	r0, r8
 800c622:	d9d5      	bls.n	800c5d0 <UART_WaitOnFlagUntilTimeout+0x10>
 800c624:	e7e5      	b.n	800c5f2 <UART_WaitOnFlagUntilTimeout+0x32>

0800c626 <HAL_UART_Transmit>:
{
 800c626:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c628:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800c62a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800c62e:	2b20      	cmp	r3, #32
{
 800c630:	b085      	sub	sp, #20
 800c632:	4604      	mov	r4, r0
 800c634:	460d      	mov	r5, r1
 800c636:	4616      	mov	r6, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800c638:	d149      	bne.n	800c6ce <HAL_UART_Transmit+0xa8>
    if((pData == NULL ) || (Size == 0U))
 800c63a:	2900      	cmp	r1, #0
 800c63c:	d045      	beq.n	800c6ca <HAL_UART_Transmit+0xa4>
 800c63e:	2a00      	cmp	r2, #0
 800c640:	d043      	beq.n	800c6ca <HAL_UART_Transmit+0xa4>
    __HAL_LOCK(huart);
 800c642:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c646:	2b01      	cmp	r3, #1
 800c648:	d041      	beq.n	800c6ce <HAL_UART_Transmit+0xa8>
 800c64a:	2301      	movs	r3, #1
 800c64c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c650:	2300      	movs	r3, #0
 800c652:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c654:	2321      	movs	r3, #33	; 0x21
 800c656:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 800c65a:	f7fc faf1 	bl	8008c40 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800c65e:	f8a4 6050 	strh.w	r6, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800c662:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800c664:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800c668:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c66c:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 800c66e:	b292      	uxth	r2, r2
 800c670:	b952      	cbnz	r2, 800c688 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c672:	2140      	movs	r1, #64	; 0x40
 800c674:	4620      	mov	r0, r4
 800c676:	f7ff ffa3 	bl	800c5c0 <UART_WaitOnFlagUntilTimeout>
 800c67a:	b968      	cbnz	r0, 800c698 <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800c67c:	2320      	movs	r3, #32
 800c67e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 800c682:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 800c686:	e008      	b.n	800c69a <HAL_UART_Transmit+0x74>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c688:	2200      	movs	r2, #0
 800c68a:	2180      	movs	r1, #128	; 0x80
 800c68c:	4620      	mov	r0, r4
 800c68e:	9303      	str	r3, [sp, #12]
 800c690:	f7ff ff96 	bl	800c5c0 <UART_WaitOnFlagUntilTimeout>
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	b110      	cbz	r0, 800c69e <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800c698:	2003      	movs	r0, #3
}
 800c69a:	b005      	add	sp, #20
 800c69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c69e:	68a2      	ldr	r2, [r4, #8]
 800c6a0:	6821      	ldr	r1, [r4, #0]
 800c6a2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c6a6:	d10d      	bne.n	800c6c4 <HAL_UART_Transmit+0x9e>
 800c6a8:	6922      	ldr	r2, [r4, #16]
 800c6aa:	b95a      	cbnz	r2, 800c6c4 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800c6ac:	f835 2b02 	ldrh.w	r2, [r5], #2
 800c6b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800c6b4:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800c6b6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800c6ba:	3a01      	subs	r2, #1
 800c6bc:	b292      	uxth	r2, r2
 800c6be:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800c6c2:	e7d1      	b.n	800c668 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800c6c4:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c6c8:	e7f4      	b.n	800c6b4 <HAL_UART_Transmit+0x8e>
      return  HAL_ERROR;
 800c6ca:	2001      	movs	r0, #1
 800c6cc:	e7e5      	b.n	800c69a <HAL_UART_Transmit+0x74>
    return HAL_BUSY;
 800c6ce:	2002      	movs	r0, #2
 800c6d0:	e7e3      	b.n	800c69a <HAL_UART_Transmit+0x74>

0800c6d2 <HAL_UART_Receive>:
{
 800c6d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c6d6:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800c6d8:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800c6dc:	2b20      	cmp	r3, #32
{
 800c6de:	4604      	mov	r4, r0
 800c6e0:	460d      	mov	r5, r1
 800c6e2:	4617      	mov	r7, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800c6e4:	d15f      	bne.n	800c7a6 <HAL_UART_Receive+0xd4>
    if((pData == NULL ) || (Size == 0U))
 800c6e6:	2900      	cmp	r1, #0
 800c6e8:	d05b      	beq.n	800c7a2 <HAL_UART_Receive+0xd0>
 800c6ea:	2a00      	cmp	r2, #0
 800c6ec:	d059      	beq.n	800c7a2 <HAL_UART_Receive+0xd0>
    __HAL_LOCK(huart);
 800c6ee:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d057      	beq.n	800c7a6 <HAL_UART_Receive+0xd4>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c700:	2322      	movs	r3, #34	; 0x22
 800c702:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 800c706:	f7fc fa9b 	bl	8008c40 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800c70a:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 800c70c:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800c710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800c714:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800c716:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800c71a:	d115      	bne.n	800c748 <HAL_UART_Receive+0x76>
 800c71c:	6923      	ldr	r3, [r4, #16]
 800c71e:	b98b      	cbnz	r3, 800c744 <HAL_UART_Receive+0x72>
 800c720:	f240 13ff 	movw	r3, #511	; 0x1ff
 800c724:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800c728:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800c72c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800c730:	b290      	uxth	r0, r2
 800c732:	b9b8      	cbnz	r0, 800c764 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 800c734:	2320      	movs	r3, #32
 800c736:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 800c73a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800c73e:	b002      	add	sp, #8
 800c740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 800c744:	23ff      	movs	r3, #255	; 0xff
 800c746:	e7ed      	b.n	800c724 <HAL_UART_Receive+0x52>
 800c748:	b923      	cbnz	r3, 800c754 <HAL_UART_Receive+0x82>
 800c74a:	6923      	ldr	r3, [r4, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d0f9      	beq.n	800c744 <HAL_UART_Receive+0x72>
 800c750:	237f      	movs	r3, #127	; 0x7f
 800c752:	e7e7      	b.n	800c724 <HAL_UART_Receive+0x52>
 800c754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c758:	d1e6      	bne.n	800c728 <HAL_UART_Receive+0x56>
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0f7      	beq.n	800c750 <HAL_UART_Receive+0x7e>
 800c760:	233f      	movs	r3, #63	; 0x3f
 800c762:	e7df      	b.n	800c724 <HAL_UART_Receive+0x52>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c764:	9600      	str	r6, [sp, #0]
 800c766:	4643      	mov	r3, r8
 800c768:	2200      	movs	r2, #0
 800c76a:	2120      	movs	r1, #32
 800c76c:	4620      	mov	r0, r4
 800c76e:	f7ff ff27 	bl	800c5c0 <UART_WaitOnFlagUntilTimeout>
 800c772:	b9d0      	cbnz	r0, 800c7aa <HAL_UART_Receive+0xd8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c774:	68a2      	ldr	r2, [r4, #8]
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c77c:	d10c      	bne.n	800c798 <HAL_UART_Receive+0xc6>
 800c77e:	6922      	ldr	r2, [r4, #16]
 800c780:	b952      	cbnz	r2, 800c798 <HAL_UART_Receive+0xc6>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800c782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c784:	403b      	ands	r3, r7
 800c786:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 800c78a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800c78e:	3a01      	subs	r2, #1
 800c790:	b292      	uxth	r2, r2
 800c792:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800c796:	e7c9      	b.n	800c72c <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c798:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c79a:	403b      	ands	r3, r7
 800c79c:	f805 3b01 	strb.w	r3, [r5], #1
 800c7a0:	e7f3      	b.n	800c78a <HAL_UART_Receive+0xb8>
      return  HAL_ERROR;
 800c7a2:	2001      	movs	r0, #1
 800c7a4:	e7cb      	b.n	800c73e <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 800c7a6:	2002      	movs	r0, #2
 800c7a8:	e7c9      	b.n	800c73e <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800c7aa:	2003      	movs	r0, #3
 800c7ac:	e7c7      	b.n	800c73e <HAL_UART_Receive+0x6c>

0800c7ae <UART_CheckIdleState>:
{
 800c7ae:	b530      	push	{r4, r5, lr}
 800c7b0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7b2:	2500      	movs	r5, #0
{
 800c7b4:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7b6:	6745      	str	r5, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800c7b8:	f7fc fa42 	bl	8008c40 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7bc:	6822      	ldr	r2, [r4, #0]
 800c7be:	6812      	ldr	r2, [r2, #0]
 800c7c0:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800c7c2:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7c4:	d416      	bmi.n	800c7f4 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7c6:	6822      	ldr	r2, [r4, #0]
 800c7c8:	6812      	ldr	r2, [r2, #0]
 800c7ca:	0752      	lsls	r2, r2, #29
 800c7cc:	d509      	bpl.n	800c7e2 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7ce:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800c7d2:	9200      	str	r2, [sp, #0]
 800c7d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c7d8:	2200      	movs	r2, #0
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f7ff fef0 	bl	800c5c0 <UART_WaitOnFlagUntilTimeout>
 800c7e0:	b9a8      	cbnz	r0, 800c80e <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 800c7e2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c7e4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800c7e6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800c7ea:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 800c7ee:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800c7f2:	e00d      	b.n	800c810 <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7f4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800c7f8:	9200      	str	r2, [sp, #0]
 800c7fa:	9003      	str	r0, [sp, #12]
 800c7fc:	462a      	mov	r2, r5
 800c7fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c802:	4620      	mov	r0, r4
 800c804:	f7ff fedc 	bl	800c5c0 <UART_WaitOnFlagUntilTimeout>
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d0db      	beq.n	800c7c6 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800c80e:	2003      	movs	r0, #3
}
 800c810:	b005      	add	sp, #20
 800c812:	bd30      	pop	{r4, r5, pc}

0800c814 <HAL_UART_Init>:
{
 800c814:	b510      	push	{r4, lr}
  if(huart == NULL)
 800c816:	4604      	mov	r4, r0
 800c818:	b360      	cbz	r0, 800c874 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800c81a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800c81e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c822:	b91b      	cbnz	r3, 800c82c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800c824:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800c828:	f7ff fcdc 	bl	800c1e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c82c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c82e:	2324      	movs	r3, #36	; 0x24
 800c830:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800c834:	6813      	ldr	r3, [r2, #0]
 800c836:	f023 0301 	bic.w	r3, r3, #1
 800c83a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c83c:	4620      	mov	r0, r4
 800c83e:	f7ff fcd3 	bl	800c1e8 <UART_SetConfig>
 800c842:	2801      	cmp	r0, #1
 800c844:	d016      	beq.n	800c874 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c848:	b113      	cbz	r3, 800c850 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800c84a:	4620      	mov	r0, r4
 800c84c:	f7ff fe64 	bl	800c518 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c858:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c85a:	689a      	ldr	r2, [r3, #8]
 800c85c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c860:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800c868:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800c86a:	601a      	str	r2, [r3, #0]
}
 800c86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800c870:	f7ff bf9d 	b.w	800c7ae <UART_CheckIdleState>
}
 800c874:	2001      	movs	r0, #1
 800c876:	bd10      	pop	{r4, pc}

0800c878 <MQTTCloseSession>:

void MQTTCloseSession(MQTTClient* c)
{
    c->ping_outstanding = 0;
    c->isconnected = 0;
    if (c->cleansession)
 800c878:	6a42      	ldr	r2, [r0, #36]	; 0x24
    c->ping_outstanding = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	7703      	strb	r3, [r0, #28]
    c->isconnected = 0;
 800c87e:	6203      	str	r3, [r0, #32]
    if (c->cleansession)
 800c880:	b122      	cbz	r2, 800c88c <MQTTCloseSession+0x14>
        c->messageHandlers[i].topicFilter = NULL;
 800c882:	6283      	str	r3, [r0, #40]	; 0x28
 800c884:	6303      	str	r3, [r0, #48]	; 0x30
 800c886:	6383      	str	r3, [r0, #56]	; 0x38
 800c888:	6403      	str	r3, [r0, #64]	; 0x40
 800c88a:	6483      	str	r3, [r0, #72]	; 0x48
        MQTTCleanSession(c);
}
 800c88c:	4770      	bx	lr

0800c88e <sendPacket>:
{
 800c88e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c892:	4604      	mov	r4, r0
 800c894:	460f      	mov	r7, r1
 800c896:	4616      	mov	r6, r2
        sent = 0;
 800c898:	2500      	movs	r5, #0
    while (sent < length && !TimerIsExpired(timer))
 800c89a:	42bd      	cmp	r5, r7
 800c89c:	da1d      	bge.n	800c8da <sendPacket+0x4c>
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7f6 fa61 	bl	8002d66 <TimerIsExpired>
 800c8a4:	b990      	cbnz	r0, 800c8cc <sendPacket+0x3e>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length - sent, TimerLeftMS(timer)); // length changed by length - sent for long packets and non blocking sockets
 800c8a6:	6921      	ldr	r1, [r4, #16]
 800c8a8:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
 800c8ac:	4429      	add	r1, r5
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f8d9 a008 	ldr.w	sl, [r9, #8]
 800c8b4:	9101      	str	r1, [sp, #4]
 800c8b6:	f7f6 fa42 	bl	8002d3e <TimerLeftMS>
 800c8ba:	eba7 0805 	sub.w	r8, r7, r5
 800c8be:	4603      	mov	r3, r0
 800c8c0:	9901      	ldr	r1, [sp, #4]
 800c8c2:	4642      	mov	r2, r8
 800c8c4:	4648      	mov	r0, r9
 800c8c6:	47d0      	blx	sl
        if (rc < 0)  // there was an error writing the data
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	da04      	bge.n	800c8d6 <sendPacket+0x48>
        rc = FAILURE;
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c8d0:	b002      	add	sp, #8
 800c8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sent += rc;
 800c8d6:	4405      	add	r5, r0
 800c8d8:	e7df      	b.n	800c89a <sendPacket+0xc>
    if (sent == length)
 800c8da:	d1f7      	bne.n	800c8cc <sendPacket+0x3e>
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800c8dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8e0:	69a1      	ldr	r1, [r4, #24]
 800c8e2:	f7f6 fa21 	bl	8002d28 <TimerCountdown>
        rc = MQSUCCESS;
 800c8e6:	2000      	movs	r0, #0
    return rc;
 800c8e8:	e7f2      	b.n	800c8d0 <sendPacket+0x42>
	...

0800c8ec <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800c8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c8f0:	6d45      	ldr	r5, [r0, #84]	; 0x54
{
 800c8f2:	b093      	sub	sp, #76	; 0x4c
 800c8f4:	460f      	mov	r7, r1
 800c8f6:	4604      	mov	r4, r0
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c8f8:	6941      	ldr	r1, [r0, #20]
 800c8fa:	686e      	ldr	r6, [r5, #4]
 800c8fc:	9107      	str	r1, [sp, #28]
 800c8fe:	4638      	mov	r0, r7
 800c900:	f7f6 fa1d 	bl	8002d3e <TimerLeftMS>
 800c904:	9907      	ldr	r1, [sp, #28]
 800c906:	4603      	mov	r3, r0
 800c908:	2201      	movs	r2, #1
 800c90a:	4628      	mov	r0, r5
 800c90c:	47b0      	blx	r6
    if (rc != 1)
 800c90e:	2801      	cmp	r0, #1
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c910:	4606      	mov	r6, r0
    if (rc != 1)
 800c912:	d14e      	bne.n	800c9b2 <cycle+0xc6>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800c914:	4638      	mov	r0, r7
 800c916:	f7f6 fa12 	bl	8002d3e <TimerLeftMS>
 800c91a:	f04f 0805 	mov.w	r8, #5
 800c91e:	4681      	mov	r9, r0
    *value = 0;
 800c920:	2500      	movs	r5, #0
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800c922:	f1b8 0801 	subs.w	r8, r8, #1
 800c926:	d012      	beq.n	800c94e <cycle+0x62>
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800c928:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c92a:	464b      	mov	r3, r9
 800c92c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800c930:	2201      	movs	r2, #1
 800c932:	a90e      	add	r1, sp, #56	; 0x38
 800c934:	47d0      	blx	sl
        if (rc != 1)
 800c936:	2801      	cmp	r0, #1
 800c938:	d109      	bne.n	800c94e <cycle+0x62>
        *value += (i & 127) * multiplier;
 800c93a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800c93e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c942:	fb06 5502 	mla	r5, r6, r2, r5
    } while ((i & 128) != 0);
 800c946:	061a      	lsls	r2, r3, #24
        multiplier *= 128;
 800c948:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((i & 128) != 0);
 800c94c:	d4e9      	bmi.n	800c922 <cycle+0x36>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c94e:	6960      	ldr	r0, [r4, #20]
 800c950:	4629      	mov	r1, r5
 800c952:	3001      	adds	r0, #1
 800c954:	f000 fc80 	bl	800d258 <MQTTPacket_encode>
    if (rem_len > (c->readbuf_size - len))
 800c958:	68e3      	ldr	r3, [r4, #12]
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c95a:	3001      	adds	r0, #1
    if (rem_len > (c->readbuf_size - len))
 800c95c:	1a1b      	subs	r3, r3, r0
 800c95e:	42ab      	cmp	r3, r5
 800c960:	d20a      	bcs.n	800c978 <cycle+0x8c>
        rc = BUFFER_OVERFLOW;
 800c962:	f06f 0501 	mvn.w	r5, #1
    }

exit:
    if (rc == MQSUCCESS)
        rc = packet_type;
    else if (c->isconnected)
 800c966:	6a23      	ldr	r3, [r4, #32]
 800c968:	b113      	cbz	r3, 800c970 <cycle+0x84>
        MQTTCloseSession(c);
 800c96a:	4620      	mov	r0, r4
 800c96c:	f7ff ff84 	bl	800c878 <MQTTCloseSession>
    return rc;
}
 800c970:	4628      	mov	r0, r5
 800c972:	b013      	add	sp, #76	; 0x4c
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (rem_len > 0)
 800c978:	b195      	cbz	r5, 800c9a0 <cycle+0xb4>
      rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer));
 800c97a:	6961      	ldr	r1, [r4, #20]
 800c97c:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800c97e:	4401      	add	r1, r0
 800c980:	4638      	mov	r0, r7
 800c982:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800c986:	9107      	str	r1, [sp, #28]
 800c988:	f7f6 f9d9 	bl	8002d3e <TimerLeftMS>
 800c98c:	9907      	ldr	r1, [sp, #28]
 800c98e:	4603      	mov	r3, r0
 800c990:	462a      	mov	r2, r5
 800c992:	4630      	mov	r0, r6
 800c994:	47c0      	blx	r8
      if (rc != rem_len)
 800c996:	42a8      	cmp	r0, r5
 800c998:	d002      	beq.n	800c9a0 <cycle+0xb4>
        rc = 0;
 800c99a:	2600      	movs	r6, #0
 800c99c:	2500      	movs	r5, #0
 800c99e:	e0ae      	b.n	800cafe <cycle+0x212>
    header.byte = c->readbuf[0];
 800c9a0:	6963      	ldr	r3, [r4, #20]
    if (c->keepAliveInterval > 0)
 800c9a2:	69a1      	ldr	r1, [r4, #24]
    header.byte = c->readbuf[0];
 800c9a4:	781e      	ldrb	r6, [r3, #0]
    rc = header.bits.type;
 800c9a6:	0936      	lsrs	r6, r6, #4
    if (c->keepAliveInterval > 0)
 800c9a8:	b119      	cbz	r1, 800c9b2 <cycle+0xc6>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800c9aa:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c9ae:	f7f6 f9bb 	bl	8002d28 <TimerCountdown>
    switch (packet_type)
 800c9b2:	2e0d      	cmp	r6, #13
 800c9b4:	f200 80f9 	bhi.w	800cbaa <cycle+0x2be>
 800c9b8:	a301      	add	r3, pc, #4	; (adr r3, 800c9c0 <cycle+0xd4>)
 800c9ba:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 800c9be:	bf00      	nop
 800c9c0:	0800c99d 	.word	0x0800c99d
 800c9c4:	0800cbab 	.word	0x0800cbab
 800c9c8:	0800c99d 	.word	0x0800c99d
 800c9cc:	0800c9f9 	.word	0x0800c9f9
 800c9d0:	0800c99d 	.word	0x0800c99d
 800c9d4:	0800cb51 	.word	0x0800cb51
 800c9d8:	0800cb51 	.word	0x0800cb51
 800c9dc:	0800c99d 	.word	0x0800c99d
 800c9e0:	0800cbab 	.word	0x0800cbab
 800c9e4:	0800c99d 	.word	0x0800c99d
 800c9e8:	0800cbab 	.word	0x0800cbab
 800c9ec:	0800cbab 	.word	0x0800cbab
 800c9f0:	0800cbab 	.word	0x0800cbab
 800c9f4:	0800cb91 	.word	0x0800cb91
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	9311      	str	r3, [sp, #68]	; 0x44
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800c9fc:	68e3      	ldr	r3, [r4, #12]
 800c9fe:	9304      	str	r3, [sp, #16]
 800ca00:	6963      	ldr	r3, [r4, #20]
 800ca02:	9303      	str	r3, [sp, #12]
 800ca04:	ab11      	add	r3, sp, #68	; 0x44
 800ca06:	9302      	str	r3, [sp, #8]
 800ca08:	ad0b      	add	r5, sp, #44	; 0x2c
 800ca0a:	ab10      	add	r3, sp, #64	; 0x40
 800ca0c:	9301      	str	r3, [sp, #4]
 800ca0e:	9500      	str	r5, [sp, #0]
 800ca10:	ab0f      	add	r3, sp, #60	; 0x3c
 800ca12:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 800ca16:	a908      	add	r1, sp, #32
 800ca18:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 800ca1c:	f000 fb9e 	bl	800d15c <MQTTDeserialize_publish>
 800ca20:	2801      	cmp	r0, #1
 800ca22:	d001      	beq.n	800ca28 <cycle+0x13c>
 800ca24:	4635      	mov	r5, r6
    return rc;
 800ca26:	e7a3      	b.n	800c970 <cycle+0x84>
            msg.qos = (enum QoS)intQoS;
 800ca28:	9b08      	ldr	r3, [sp, #32]
 800ca2a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ca2e:	46a2      	mov	sl, r4
 800ca30:	f104 0828 	add.w	r8, r4, #40	; 0x28
    int rc = FAILURE;
 800ca34:	f04f 3bff 	mov.w	fp, #4294967295
    md->message = aMessage;
 800ca38:	f10d 0938 	add.w	r9, sp, #56	; 0x38
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800ca3c:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 800ca40:	b1c9      	cbz	r1, 800ca76 <cycle+0x18a>
 800ca42:	4628      	mov	r0, r5
 800ca44:	f000 fce4 	bl	800d410 <MQTTPacket_equals>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	f040 80b3 	bne.w	800cbb4 <cycle+0x2c8>
    char* curn_end = curn + topicName->lenstring.len;
 800ca4e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800ca52:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800ca56:	4411      	add	r1, r2
    while (*curf && curn < curn_end)
 800ca58:	1e58      	subs	r0, r3, #1
 800ca5a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f000 80a5 	beq.w	800cbae <cycle+0x2c2>
 800ca64:	4291      	cmp	r1, r2
 800ca66:	d906      	bls.n	800ca76 <cycle+0x18a>
        if (*curn == '/' && *curf != '/')
 800ca68:	f892 c000 	ldrb.w	ip, [r2]
 800ca6c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800ca70:	d122      	bne.n	800cab8 <cycle+0x1cc>
 800ca72:	2b2f      	cmp	r3, #47	; 0x2f
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800ca74:	d02f      	beq.n	800cad6 <cycle+0x1ea>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ca76:	f10a 0a08 	add.w	sl, sl, #8
 800ca7a:	45d0      	cmp	r8, sl
 800ca7c:	d1de      	bne.n	800ca3c <cycle+0x150>
    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800ca7e:	f1bb 0f00 	cmp.w	fp, #0
 800ca82:	d006      	beq.n	800ca92 <cycle+0x1a6>
 800ca84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ca86:	b123      	cbz	r3, 800ca92 <cycle+0x1a6>
    md->message = aMessage;
 800ca88:	aa0e      	add	r2, sp, #56	; 0x38
    md->topicName = aTopicName;
 800ca8a:	950a      	str	r5, [sp, #40]	; 0x28
    md->message = aMessage;
 800ca8c:	9209      	str	r2, [sp, #36]	; 0x24
        c->defaultMessageHandler(&md);
 800ca8e:	a809      	add	r0, sp, #36	; 0x24
 800ca90:	4798      	blx	r3
            if (msg.qos != QOS0)
 800ca92:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800ca96:	b395      	cbz	r5, 800cafe <cycle+0x212>
                if (msg.qos == QOS1)
 800ca98:	2d01      	cmp	r5, #1
 800ca9a:	d120      	bne.n	800cade <cycle+0x1f2>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800ca9c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800caa0:	9300      	str	r3, [sp, #0]
 800caa2:	2204      	movs	r2, #4
 800caa4:	2300      	movs	r3, #0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800caa6:	68a1      	ldr	r1, [r4, #8]
 800caa8:	6920      	ldr	r0, [r4, #16]
 800caaa:	f000 fd1d 	bl	800d4e8 <MQTTSerialize_ack>
                if (len <= 0)
 800caae:	2800      	cmp	r0, #0
 800cab0:	dc1d      	bgt.n	800caee <cycle+0x202>
        rc = FAILURE;
 800cab2:	f04f 35ff 	mov.w	r5, #4294967295
 800cab6:	e756      	b.n	800c966 <cycle+0x7a>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800cab8:	2b2b      	cmp	r3, #43	; 0x2b
 800caba:	d004      	beq.n	800cac6 <cycle+0x1da>
 800cabc:	2b23      	cmp	r3, #35	; 0x23
 800cabe:	d00c      	beq.n	800cada <cycle+0x1ee>
 800cac0:	459c      	cmp	ip, r3
 800cac2:	e7d7      	b.n	800ca74 <cycle+0x188>
 800cac4:	461a      	mov	r2, r3
            while (nextpos < curn_end && *nextpos != '/')
 800cac6:	1c53      	adds	r3, r2, #1
 800cac8:	4299      	cmp	r1, r3
 800caca:	d004      	beq.n	800cad6 <cycle+0x1ea>
 800cacc:	f892 c001 	ldrb.w	ip, [r2, #1]
 800cad0:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800cad4:	d1f6      	bne.n	800cac4 <cycle+0x1d8>
        curn++;
 800cad6:	3201      	adds	r2, #1
 800cad8:	e7bf      	b.n	800ca5a <cycle+0x16e>
            curn = curn_end - 1;    // skip until end of string
 800cada:	1e4a      	subs	r2, r1, #1
 800cadc:	e7fb      	b.n	800cad6 <cycle+0x1ea>
                else if (msg.qos == QOS2)
 800cade:	2d02      	cmp	r5, #2
 800cae0:	d1e7      	bne.n	800cab2 <cycle+0x1c6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800cae2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	2205      	movs	r2, #5
 800caea:	2300      	movs	r3, #0
 800caec:	e7db      	b.n	800caa6 <cycle+0x1ba>
                    rc = sendPacket(c, len, timer);
 800caee:	4601      	mov	r1, r0
 800caf0:	463a      	mov	r2, r7
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7ff fecb 	bl	800c88e <sendPacket>
                if (rc == FAILURE)
 800caf8:	1c43      	adds	r3, r0, #1
                    rc = sendPacket(c, len, timer);
 800cafa:	4605      	mov	r5, r0
                if (rc == FAILURE)
 800cafc:	d0d9      	beq.n	800cab2 <cycle+0x1c6>
    if (c->keepAliveInterval == 0)
 800cafe:	69a3      	ldr	r3, [r4, #24]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d04e      	beq.n	800cba2 <cycle+0x2b6>
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800cb04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb08:	f7f6 f92d 	bl	8002d66 <TimerIsExpired>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d042      	beq.n	800cb96 <cycle+0x2aa>
        if (c->ping_outstanding)
 800cb10:	7f23      	ldrb	r3, [r4, #28]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1cd      	bne.n	800cab2 <cycle+0x1c6>
            TimerInit(&timer);
 800cb16:	a80e      	add	r0, sp, #56	; 0x38
 800cb18:	f7f6 f92d 	bl	8002d76 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800cb1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cb20:	a80e      	add	r0, sp, #56	; 0x38
 800cb22:	f7f6 f8f9 	bl	8002d18 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800cb26:	68a1      	ldr	r1, [r4, #8]
 800cb28:	6920      	ldr	r0, [r4, #16]
 800cb2a:	f000 fb14 	bl	800d156 <MQTTSerialize_pingreq>
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQSUCCESS) // send the ping packet
 800cb2e:	1e01      	subs	r1, r0, #0
 800cb30:	dd37      	ble.n	800cba2 <cycle+0x2b6>
 800cb32:	aa0e      	add	r2, sp, #56	; 0x38
 800cb34:	4620      	mov	r0, r4
 800cb36:	f7ff feaa 	bl	800c88e <sendPacket>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d1b9      	bne.n	800cab2 <cycle+0x1c6>
                c->ping_outstanding = 1;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	7723      	strb	r3, [r4, #28]
                TimerCountdownMS(&c->last_received, 5000);  // allow for a few seconds to receive the ping response
 800cb42:	f241 3188 	movw	r1, #5000	; 0x1388
 800cb46:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800cb4a:	f7f6 f8e5 	bl	8002d18 <TimerCountdownMS>
    return rc;
 800cb4e:	e028      	b.n	800cba2 <cycle+0x2b6>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800cb50:	68e3      	ldr	r3, [r4, #12]
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	aa0e      	add	r2, sp, #56	; 0x38
 800cb56:	6963      	ldr	r3, [r4, #20]
 800cb58:	a909      	add	r1, sp, #36	; 0x24
 800cb5a:	a80b      	add	r0, sp, #44	; 0x2c
 800cb5c:	f000 fb43 	bl	800d1e6 <MQTTDeserialize_ack>
 800cb60:	2801      	cmp	r0, #1
 800cb62:	d1a6      	bne.n	800cab2 <cycle+0x1c6>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 800cb64:	2e05      	cmp	r6, #5
 800cb66:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800cb6a:	68a1      	ldr	r1, [r4, #8]
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	bf0c      	ite	eq
 800cb70:	2206      	moveq	r2, #6
 800cb72:	2207      	movne	r2, #7
 800cb74:	6920      	ldr	r0, [r4, #16]
 800cb76:	2300      	movs	r3, #0
 800cb78:	f000 fcb6 	bl	800d4e8 <MQTTSerialize_ack>
 800cb7c:	1e01      	subs	r1, r0, #0
 800cb7e:	dd98      	ble.n	800cab2 <cycle+0x1c6>
            else if ((rc = sendPacket(c, len, timer)) != MQSUCCESS) // send the PUBREL packet
 800cb80:	463a      	mov	r2, r7
 800cb82:	4620      	mov	r0, r4
 800cb84:	f7ff fe83 	bl	800c88e <sendPacket>
 800cb88:	4605      	mov	r5, r0
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d0b7      	beq.n	800cafe <cycle+0x212>
 800cb8e:	e790      	b.n	800cab2 <cycle+0x1c6>
            c->ping_outstanding = 0;
 800cb90:	2500      	movs	r5, #0
 800cb92:	7725      	strb	r5, [r4, #28]
            break;
 800cb94:	e7b3      	b.n	800cafe <cycle+0x212>
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800cb96:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800cb9a:	f7f6 f8e4 	bl	8002d66 <TimerIsExpired>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d1b6      	bne.n	800cb10 <cycle+0x224>
    if (rc == MQSUCCESS)
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	f43f af3e 	beq.w	800ca24 <cycle+0x138>
 800cba8:	e6dd      	b.n	800c966 <cycle+0x7a>
 800cbaa:	4635      	mov	r5, r6
 800cbac:	e6db      	b.n	800c966 <cycle+0x7a>
    return (curn == curn_end) && (*curf == '\0');
 800cbae:	4291      	cmp	r1, r2
 800cbb0:	f47f af61 	bne.w	800ca76 <cycle+0x18a>
            if (c->messageHandlers[i].fp != NULL)
 800cbb4:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f43f af5c 	beq.w	800ca76 <cycle+0x18a>
    md->message = aMessage;
 800cbbe:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
                c->messageHandlers[i].fp(&md);
 800cbc2:	a809      	add	r0, sp, #36	; 0x24
 800cbc4:	4798      	blx	r3
                rc = MQSUCCESS;
 800cbc6:	f04f 0b00 	mov.w	fp, #0
 800cbca:	e754      	b.n	800ca76 <cycle+0x18a>

0800cbcc <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	4606      	mov	r6, r0
 800cbd0:	460f      	mov	r7, r1
 800cbd2:	4615      	mov	r5, r2
    int rc = FAILURE;
 800cbd4:	f04f 34ff 	mov.w	r4, #4294967295

    do
    {
        if (TimerIsExpired(timer))
 800cbd8:	4628      	mov	r0, r5
 800cbda:	f7f6 f8c4 	bl	8002d66 <TimerIsExpired>
 800cbde:	b940      	cbnz	r0, 800cbf2 <waitfor+0x26>
            break; // we timed out
        rc = cycle(c, timer);
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f7ff fe82 	bl	800c8ec <cycle>
    }
    while (rc != packet_type && rc >= 0);
 800cbe8:	42b8      	cmp	r0, r7
        rc = cycle(c, timer);
 800cbea:	4604      	mov	r4, r0
    while (rc != packet_type && rc >= 0);
 800cbec:	d001      	beq.n	800cbf2 <waitfor+0x26>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	daf2      	bge.n	800cbd8 <waitfor+0xc>

    return rc;
}
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbf6 <MQTTClientInit>:
{
 800cbf6:	b510      	push	{r4, lr}
    c->buf = sendbuf;
 800cbf8:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
 800cbfa:	9b02      	ldr	r3, [sp, #8]
 800cbfc:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
 800cbfe:	9b03      	ldr	r3, [sp, #12]
 800cc00:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
 800cc02:	9b04      	ldr	r3, [sp, #16]
    c->ipstack = network;
 800cc04:	6541      	str	r1, [r0, #84]	; 0x54
    c->readbuf_size = readbuf_size;
 800cc06:	60c3      	str	r3, [r0, #12]
        c->messageHandlers[i].topicFilter = 0;
 800cc08:	2100      	movs	r1, #0
	  c->next_packetid = 1;
 800cc0a:	2301      	movs	r3, #1
{
 800cc0c:	4604      	mov	r4, r0
    c->cleansession = 0;
 800cc0e:	e9c0 1108 	strd	r1, r1, [r0, #32]
        c->messageHandlers[i].topicFilter = 0;
 800cc12:	6281      	str	r1, [r0, #40]	; 0x28
 800cc14:	6301      	str	r1, [r0, #48]	; 0x30
 800cc16:	6381      	str	r1, [r0, #56]	; 0x38
 800cc18:	6401      	str	r1, [r0, #64]	; 0x40
 800cc1a:	6481      	str	r1, [r0, #72]	; 0x48
    c->command_timeout_ms = command_timeout_ms;
 800cc1c:	6042      	str	r2, [r0, #4]
    c->ping_outstanding = 0;
 800cc1e:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
 800cc20:	6501      	str	r1, [r0, #80]	; 0x50
	  c->next_packetid = 1;
 800cc22:	f840 3b58 	str.w	r3, [r0], #88
    TimerInit(&c->last_sent);
 800cc26:	f7f6 f8a6 	bl	8002d76 <TimerInit>
    TimerInit(&c->last_received);
 800cc2a:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
 800cc2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerInit(&c->last_received);
 800cc32:	f7f6 b8a0 	b.w	8002d76 <TimerInit>

0800cc36 <MQTTYield>:
{
 800cc36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc38:	4604      	mov	r4, r0
    TimerInit(&timer);
 800cc3a:	a802      	add	r0, sp, #8
{
 800cc3c:	9101      	str	r1, [sp, #4]
    TimerInit(&timer);
 800cc3e:	f7f6 f89a 	bl	8002d76 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800cc42:	9901      	ldr	r1, [sp, #4]
 800cc44:	a802      	add	r0, sp, #8
 800cc46:	f7f6 f867 	bl	8002d18 <TimerCountdownMS>
        if (cycle(c, &timer) < 0)
 800cc4a:	a902      	add	r1, sp, #8
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f7ff fe4d 	bl	800c8ec <cycle>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	db07      	blt.n	800cc66 <MQTTYield+0x30>
  	} while (!TimerIsExpired(&timer));
 800cc56:	a802      	add	r0, sp, #8
 800cc58:	f7f6 f885 	bl	8002d66 <TimerIsExpired>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d0f4      	beq.n	800cc4a <MQTTYield+0x14>
    int rc = MQSUCCESS;
 800cc60:	2000      	movs	r0, #0
}
 800cc62:	b004      	add	sp, #16
 800cc64:	bd10      	pop	{r4, pc}
            rc = FAILURE;
 800cc66:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
 800cc6a:	e7fa      	b.n	800cc62 <MQTTYield+0x2c>

0800cc6c <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 800cc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc6e:	b099      	sub	sp, #100	; 0x64
 800cc70:	4604      	mov	r4, r0
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800cc72:	af02      	add	r7, sp, #8
{
 800cc74:	460d      	mov	r5, r1
 800cc76:	4616      	mov	r6, r2
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800cc78:	4921      	ldr	r1, [pc, #132]	; (800cd00 <MQTTConnectWithResults+0x94>)
 800cc7a:	2258      	movs	r2, #88	; 0x58
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f015 fbff 	bl	8022480 <memcpy>
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 800cc82:	6a23      	ldr	r3, [r4, #32]
 800cc84:	b123      	cbz	r3, 800cc90 <MQTTConnectWithResults+0x24>
    int rc = FAILURE;
 800cc86:	f04f 35ff 	mov.w	r5, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
}
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	b019      	add	sp, #100	; 0x64
 800cc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        options = &default_options; /* set default options if none were supplied */
 800cc90:	2d00      	cmp	r5, #0
 800cc92:	bf08      	it	eq
 800cc94:	463d      	moveq	r5, r7
    TimerInit(&connect_timer);
 800cc96:	4668      	mov	r0, sp
 800cc98:	f7f6 f86d 	bl	8002d76 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800cc9c:	6861      	ldr	r1, [r4, #4]
 800cc9e:	4668      	mov	r0, sp
 800cca0:	f7f6 f83a 	bl	8002d18 <TimerCountdownMS>
    c->keepAliveInterval = options->keepAliveInterval;
 800cca4:	8b29      	ldrh	r1, [r5, #24]
 800cca6:	61a1      	str	r1, [r4, #24]
    c->cleansession = options->cleansession;
 800cca8:	7eab      	ldrb	r3, [r5, #26]
 800ccaa:	6263      	str	r3, [r4, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 800ccac:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800ccb0:	f7f6 f83a 	bl	8002d28 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800ccb4:	68a1      	ldr	r1, [r4, #8]
 800ccb6:	6920      	ldr	r0, [r4, #16]
 800ccb8:	462a      	mov	r2, r5
 800ccba:	f000 f957 	bl	800cf6c <MQTTSerialize_connect>
 800ccbe:	1e01      	subs	r1, r0, #0
 800ccc0:	dde1      	ble.n	800cc86 <MQTTConnectWithResults+0x1a>
    if ((rc = sendPacket(c, len, &connect_timer)) != MQSUCCESS)  // send the connect packet
 800ccc2:	466a      	mov	r2, sp
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f7ff fde2 	bl	800c88e <sendPacket>
 800ccca:	4605      	mov	r5, r0
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d1dc      	bne.n	800cc8a <MQTTConnectWithResults+0x1e>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800ccd0:	466a      	mov	r2, sp
 800ccd2:	2102      	movs	r1, #2
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f7ff ff79 	bl	800cbcc <waitfor>
 800ccda:	2802      	cmp	r0, #2
 800ccdc:	d1d3      	bne.n	800cc86 <MQTTConnectWithResults+0x1a>
        data->sessionPresent = 0;
 800ccde:	4630      	mov	r0, r6
        data->rc = 0;
 800cce0:	7035      	strb	r5, [r6, #0]
        data->sessionPresent = 0;
 800cce2:	f800 5f01 	strb.w	r5, [r0, #1]!
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 800cce6:	4631      	mov	r1, r6
 800cce8:	68e3      	ldr	r3, [r4, #12]
 800ccea:	6962      	ldr	r2, [r4, #20]
 800ccec:	f000 fa0c 	bl	800d108 <MQTTDeserialize_connack>
 800ccf0:	2801      	cmp	r0, #1
 800ccf2:	d1c8      	bne.n	800cc86 <MQTTConnectWithResults+0x1a>
            rc = data->rc;
 800ccf4:	7835      	ldrb	r5, [r6, #0]
    if (rc == MQSUCCESS)
 800ccf6:	2d00      	cmp	r5, #0
 800ccf8:	d1c7      	bne.n	800cc8a <MQTTConnectWithResults+0x1e>
        c->isconnected = 1;
 800ccfa:	6220      	str	r0, [r4, #32]
        c->ping_outstanding = 0;
 800ccfc:	7725      	strb	r5, [r4, #28]
    return rc;
 800ccfe:	e7c4      	b.n	800cc8a <MQTTConnectWithResults+0x1e>
 800cd00:	080286b0 	.word	0x080286b0

0800cd04 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800cd04:	b507      	push	{r0, r1, r2, lr}
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 800cd06:	aa01      	add	r2, sp, #4
 800cd08:	f7ff ffb0 	bl	800cc6c <MQTTConnectWithResults>
}
 800cd0c:	b003      	add	sp, #12
 800cd0e:	f85d fb04 	ldr.w	pc, [sp], #4

0800cd12 <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 800cd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd16:	4606      	mov	r6, r0
 800cd18:	460f      	mov	r7, r1
 800cd1a:	4615      	mov	r5, r2
    int rc = FAILURE;
    int i = -1;

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800cd1c:	2400      	movs	r4, #0
 800cd1e:	f100 0828 	add.w	r8, r0, #40	; 0x28
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 800cd22:	f858 0034 	ldr.w	r0, [r8, r4, lsl #3]
 800cd26:	b150      	cbz	r0, 800cd3e <MQTTSetMessageHandler+0x2c>
 800cd28:	4639      	mov	r1, r7
 800cd2a:	f7f3 fa51 	bl	80001d0 <strcmp>
 800cd2e:	b930      	cbnz	r0, 800cd3e <MQTTSetMessageHandler+0x2c>
        {
            if (messageHandler == NULL) /* remove existing */
 800cd30:	b99d      	cbnz	r5, 800cd5a <MQTTSetMessageHandler+0x48>
            {
                c->messageHandlers[i].topicFilter = NULL;
 800cd32:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
                c->messageHandlers[i].fp = NULL;
 800cd36:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
            c->messageHandlers[i].topicFilter = topicFilter;
            c->messageHandlers[i].fp = messageHandler;
        }
    }
    return rc;
}
 800cd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800cd3e:	3401      	adds	r4, #1
 800cd40:	2c05      	cmp	r4, #5
 800cd42:	d1ee      	bne.n	800cd22 <MQTTSetMessageHandler+0x10>
    if (messageHandler != NULL) {
 800cd44:	b135      	cbz	r5, 800cd54 <MQTTSetMessageHandler+0x42>
 800cd46:	2400      	movs	r4, #0
                if (c->messageHandlers[i].topicFilter == NULL)
 800cd48:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
 800cd4c:	b12b      	cbz	r3, 800cd5a <MQTTSetMessageHandler+0x48>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800cd4e:	3401      	adds	r4, #1
 800cd50:	2c05      	cmp	r4, #5
 800cd52:	d1f9      	bne.n	800cd48 <MQTTSetMessageHandler+0x36>
    if (messageHandler != NULL) {
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	e7ef      	b.n	800cd3a <MQTTSetMessageHandler+0x28>
            c->messageHandlers[i].topicFilter = topicFilter;
 800cd5a:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
            c->messageHandlers[i].fp = messageHandler;
 800cd5e:	e9c0 750a 	strd	r7, r5, [r0, #40]	; 0x28
 800cd62:	2000      	movs	r0, #0
    return rc;
 800cd64:	e7e9      	b.n	800cd3a <MQTTSetMessageHandler+0x28>

0800cd66 <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 800cd66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd6a:	461f      	mov	r7, r3
 800cd6c:	b08f      	sub	sp, #60	; 0x3c
    int rc = FAILURE;
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    topic.cstring = (char *)topicFilter;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800cd74:	6a03      	ldr	r3, [r0, #32]
{
 800cd76:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cd7a:	f88d 2017 	strb.w	r2, [sp, #23]
 800cd7e:	4604      	mov	r4, r0
 800cd80:	460e      	mov	r6, r1
    topic.cstring = (char *)topicFilter;
 800cd82:	910b      	str	r1, [sp, #44]	; 0x2c
	  if (!c->isconnected)
 800cd84:	b943      	cbnz	r3, 800cd98 <MQTTSubscribeWithResults+0x32>
    else
        rc = FAILURE;

exit:
    if (rc == FAILURE)
        MQTTCloseSession(c);
 800cd86:	4620      	mov	r0, r4
 800cd88:	f7ff fd76 	bl	800c878 <MQTTCloseSession>
 800cd8c:	f04f 35ff 	mov.w	r5, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800cd90:	4628      	mov	r0, r5
 800cd92:	b00f      	add	sp, #60	; 0x3c
 800cd94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TimerInit(&timer);
 800cd98:	a809      	add	r0, sp, #36	; 0x24
 800cd9a:	f7f5 ffec 	bl	8002d76 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800cd9e:	6861      	ldr	r1, [r4, #4]
 800cda0:	a809      	add	r0, sp, #36	; 0x24
 800cda2:	f7f5 ffb9 	bl	8002d18 <TimerCountdownMS>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cda6:	6822      	ldr	r2, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cda8:	68a1      	ldr	r1, [r4, #8]
 800cdaa:	6920      	ldr	r0, [r4, #16]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cdac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cdb0:	429a      	cmp	r2, r3
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cdb2:	f10d 0317 	add.w	r3, sp, #23
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cdb6:	bf14      	ite	ne
 800cdb8:	3201      	addne	r2, #1
 800cdba:	2201      	moveq	r2, #1
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cdbc:	9302      	str	r3, [sp, #8]
 800cdbe:	f04f 0901 	mov.w	r9, #1
 800cdc2:	ab0b      	add	r3, sp, #44	; 0x2c
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cdc4:	6022      	str	r2, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cdc6:	9301      	str	r3, [sp, #4]
 800cdc8:	f8cd 9000 	str.w	r9, [sp]
 800cdcc:	b293      	uxth	r3, r2
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f000 fbb1 	bl	800d536 <MQTTSerialize_subscribe>
    if (len <= 0)
 800cdd4:	1e01      	subs	r1, r0, #0
 800cdd6:	ddd6      	ble.n	800cd86 <MQTTSubscribeWithResults+0x20>
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800cdd8:	aa09      	add	r2, sp, #36	; 0x24
 800cdda:	4620      	mov	r0, r4
 800cddc:	f7ff fd57 	bl	800c88e <sendPacket>
 800cde0:	4605      	mov	r5, r0
 800cde2:	bb00      	cbnz	r0, 800ce26 <MQTTSubscribeWithResults+0xc0>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 800cde4:	aa09      	add	r2, sp, #36	; 0x24
 800cde6:	2109      	movs	r1, #9
 800cde8:	4620      	mov	r0, r4
 800cdea:	f7ff feef 	bl	800cbcc <waitfor>
 800cdee:	2809      	cmp	r0, #9
 800cdf0:	d1c9      	bne.n	800cd86 <MQTTSubscribeWithResults+0x20>
        data->grantedQoS = QOS0;
 800cdf2:	f888 5000 	strb.w	r5, [r8]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800cdf6:	68e3      	ldr	r3, [r4, #12]
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	6963      	ldr	r3, [r4, #20]
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	aa08      	add	r2, sp, #32
 800ce00:	4643      	mov	r3, r8
 800ce02:	4649      	mov	r1, r9
 800ce04:	f10d 001e 	add.w	r0, sp, #30
        int count = 0;
 800ce08:	9508      	str	r5, [sp, #32]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800ce0a:	f000 fbe0 	bl	800d5ce <MQTTDeserialize_suback>
 800ce0e:	4548      	cmp	r0, r9
 800ce10:	d1be      	bne.n	800cd90 <MQTTSubscribeWithResults+0x2a>
            if (data->grantedQoS != 0x80)
 800ce12:	f898 3000 	ldrb.w	r3, [r8]
 800ce16:	2b80      	cmp	r3, #128	; 0x80
 800ce18:	d0ba      	beq.n	800cd90 <MQTTSubscribeWithResults+0x2a>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 800ce1a:	463a      	mov	r2, r7
 800ce1c:	4631      	mov	r1, r6
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f7ff ff77 	bl	800cd12 <MQTTSetMessageHandler>
 800ce24:	4605      	mov	r5, r0
    if (rc == FAILURE)
 800ce26:	1c6b      	adds	r3, r5, #1
 800ce28:	d1b2      	bne.n	800cd90 <MQTTSubscribeWithResults+0x2a>
 800ce2a:	e7ac      	b.n	800cd86 <MQTTSubscribeWithResults+0x20>

0800ce2c <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 800ce2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 800ce2e:	ac03      	add	r4, sp, #12
 800ce30:	9400      	str	r4, [sp, #0]
 800ce32:	f7ff ff98 	bl	800cd66 <MQTTSubscribeWithResults>
}
 800ce36:	b004      	add	sp, #16
 800ce38:	bd10      	pop	{r4, pc}

0800ce3a <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800ce3a:	b570      	push	{r4, r5, r6, lr}
    int rc = FAILURE;
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800ce3c:	2300      	movs	r3, #0
{
 800ce3e:	b08e      	sub	sp, #56	; 0x38
    MQTTString topic = MQTTString_initializer;
 800ce40:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800ce44:	6a03      	ldr	r3, [r0, #32]
    topic.cstring = (char *)topicName;
 800ce46:	910b      	str	r1, [sp, #44]	; 0x2c
{
 800ce48:	4604      	mov	r4, r0
 800ce4a:	4615      	mov	r5, r2
	  if (!c->isconnected)
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d053      	beq.n	800cef8 <MQTTPublish+0xbe>
		    goto exit;

    TimerInit(&timer);
 800ce50:	a809      	add	r0, sp, #36	; 0x24
 800ce52:	f7f5 ff90 	bl	8002d76 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800ce56:	6861      	ldr	r1, [r4, #4]
 800ce58:	a809      	add	r0, sp, #36	; 0x24
 800ce5a:	f7f5 ff5d 	bl	8002d18 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800ce5e:	782b      	ldrb	r3, [r5, #0]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d808      	bhi.n	800ce78 <MQTTPublish+0x3e>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800ce66:	6823      	ldr	r3, [r4, #0]
 800ce68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	bf14      	ite	ne
 800ce70:	3301      	addne	r3, #1
 800ce72:	2301      	moveq	r3, #1
 800ce74:	6023      	str	r3, [r4, #0]
        message->id = getNextPacketId(c);
 800ce76:	80ab      	strh	r3, [r5, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800ce78:	68eb      	ldr	r3, [r5, #12]
 800ce7a:	9306      	str	r3, [sp, #24]
 800ce7c:	68ab      	ldr	r3, [r5, #8]
 800ce7e:	9305      	str	r3, [sp, #20]
 800ce80:	aa0e      	add	r2, sp, #56	; 0x38
 800ce82:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800ce86:	ab02      	add	r3, sp, #8
 800ce88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ce8c:	88ab      	ldrh	r3, [r5, #4]
 800ce8e:	9301      	str	r3, [sp, #4]
 800ce90:	786b      	ldrb	r3, [r5, #1]
 800ce92:	68a1      	ldr	r1, [r4, #8]
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	6920      	ldr	r0, [r4, #16]
 800ce98:	782b      	ldrb	r3, [r5, #0]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f000 fad3 	bl	800d446 <MQTTSerialize_publish>
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
 800cea0:	1e01      	subs	r1, r0, #0
 800cea2:	dd29      	ble.n	800cef8 <MQTTPublish+0xbe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800cea4:	aa09      	add	r2, sp, #36	; 0x24
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7ff fcf1 	bl	800c88e <sendPacket>
 800ceac:	4606      	mov	r6, r0
 800ceae:	bb08      	cbnz	r0, 800cef4 <MQTTPublish+0xba>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800ceb0:	782b      	ldrb	r3, [r5, #0]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d115      	bne.n	800cee2 <MQTTPublish+0xa8>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800ceb6:	aa09      	add	r2, sp, #36	; 0x24
 800ceb8:	2104      	movs	r1, #4
 800ceba:	4620      	mov	r0, r4
 800cebc:	f7ff fe86 	bl	800cbcc <waitfor>
 800cec0:	2804      	cmp	r0, #4
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800cec2:	d119      	bne.n	800cef8 <MQTTPublish+0xbe>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800cec4:	68e3      	ldr	r3, [r4, #12]
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800cecc:	6963      	ldr	r3, [r4, #20]
 800cece:	a908      	add	r1, sp, #32
 800ced0:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800ced4:	f000 f987 	bl	800d1e6 <MQTTDeserialize_ack>
 800ced8:	2801      	cmp	r0, #1
 800ceda:	d10d      	bne.n	800cef8 <MQTTPublish+0xbe>
        MQTTCloseSession(c);
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800cedc:	4630      	mov	r0, r6
 800cede:	b00e      	add	sp, #56	; 0x38
 800cee0:	bd70      	pop	{r4, r5, r6, pc}
    else if (message->qos == QOS2)
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d1fa      	bne.n	800cedc <MQTTPublish+0xa2>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800cee6:	aa09      	add	r2, sp, #36	; 0x24
 800cee8:	2107      	movs	r1, #7
 800ceea:	4620      	mov	r0, r4
 800ceec:	f7ff fe6e 	bl	800cbcc <waitfor>
 800cef0:	2807      	cmp	r0, #7
 800cef2:	e7e6      	b.n	800cec2 <MQTTPublish+0x88>
    if (rc == FAILURE)
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d1f1      	bne.n	800cedc <MQTTPublish+0xa2>
        MQTTCloseSession(c);
 800cef8:	4620      	mov	r0, r4
 800cefa:	f7ff fcbd 	bl	800c878 <MQTTCloseSession>
 800cefe:	f04f 36ff 	mov.w	r6, #4294967295
    return rc;
 800cf02:	e7eb      	b.n	800cedc <MQTTPublish+0xa2>

0800cf04 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 800cf04:	b513      	push	{r0, r1, r4, lr}
 800cf06:	4604      	mov	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 800cf08:	4668      	mov	r0, sp
 800cf0a:	f7f5 ff34 	bl	8002d76 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800cf0e:	6861      	ldr	r1, [r4, #4]
 800cf10:	4668      	mov	r0, sp
 800cf12:	f7f5 ff01 	bl	8002d18 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 800cf16:	68a1      	ldr	r1, [r4, #8]
 800cf18:	6920      	ldr	r0, [r4, #16]
 800cf1a:	f000 f919 	bl	800d150 <MQTTSerialize_disconnect>
    if (len > 0)
 800cf1e:	1e01      	subs	r1, r0, #0
 800cf20:	dd0a      	ble.n	800cf38 <MQTTDisconnect+0x34>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 800cf22:	466a      	mov	r2, sp
 800cf24:	4620      	mov	r0, r4
 800cf26:	f7ff fcb2 	bl	800c88e <sendPacket>
 800cf2a:	4601      	mov	r1, r0
    MQTTCloseSession(c);
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f7ff fca3 	bl	800c878 <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800cf32:	4608      	mov	r0, r1
 800cf34:	b002      	add	sp, #8
 800cf36:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
 800cf38:	f04f 31ff 	mov.w	r1, #4294967295
 800cf3c:	e7f6      	b.n	800cf2c <MQTTDisconnect+0x28>

0800cf3e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800cf3e:	b513      	push	{r0, r1, r4, lr}
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
 800cf40:	2901      	cmp	r1, #1
{
 800cf42:	4604      	mov	r4, r0
	unsigned char *ptr = buf;
 800cf44:	9001      	str	r0, [sp, #4]
	if (buflen < 2)
 800cf46:	dd0e      	ble.n	800cf66 <MQTTSerialize_zero+0x28>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
 800cf48:	0112      	lsls	r2, r2, #4
	writeChar(&ptr, header.byte); /* write header */
 800cf4a:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 800cf4e:	a801      	add	r0, sp, #4
 800cf50:	f000 f9e8 	bl	800d324 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800cf54:	9801      	ldr	r0, [sp, #4]
 800cf56:	2100      	movs	r1, #0
 800cf58:	f000 f97e 	bl	800d258 <MQTTPacket_encode>
 800cf5c:	9b01      	ldr	r3, [sp, #4]
 800cf5e:	4403      	add	r3, r0
	rc = ptr - buf;
 800cf60:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800cf62:	b002      	add	sp, #8
 800cf64:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cf66:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800cf6a:	e7fa      	b.n	800cf62 <MQTTSerialize_zero+0x24>

0800cf6c <MQTTSerialize_connect>:
{
 800cf6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (options->MQTTVersion == 3)
 800cf70:	7a13      	ldrb	r3, [r2, #8]
	unsigned char *ptr = buf;
 800cf72:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 3)
 800cf74:	2b03      	cmp	r3, #3
{
 800cf76:	4606      	mov	r6, r0
 800cf78:	4689      	mov	r9, r1
 800cf7a:	4614      	mov	r4, r2
	if (options->MQTTVersion == 3)
 800cf7c:	f000 80b5 	beq.w	800d0ea <MQTTSerialize_connect+0x17e>
		len = 10;
 800cf80:	2b04      	cmp	r3, #4
 800cf82:	bf14      	ite	ne
 800cf84:	2500      	movne	r5, #0
 800cf86:	250a      	moveq	r5, #10
	len += MQTTstrlen(options->clientID)+2;
 800cf88:	f104 070c 	add.w	r7, r4, #12
 800cf8c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800cf90:	f000 fa32 	bl	800d3f8 <MQTTstrlen>
	if (options->willFlag)
 800cf94:	7ee3      	ldrb	r3, [r4, #27]
	len += MQTTstrlen(options->clientID)+2;
 800cf96:	3002      	adds	r0, #2
 800cf98:	4405      	add	r5, r0
	if (options->willFlag)
 800cf9a:	b17b      	cbz	r3, 800cfbc <MQTTSerialize_connect+0x50>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800cf9c:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800cfa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfa4:	f000 fa28 	bl	800d3f8 <MQTTstrlen>
 800cfa8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800cfac:	4680      	mov	r8, r0
 800cfae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfb2:	f000 fa21 	bl	800d3f8 <MQTTstrlen>
 800cfb6:	4440      	add	r0, r8
 800cfb8:	3004      	adds	r0, #4
 800cfba:	4405      	add	r5, r0
	if (options->username.cstring || options->username.lenstring.data)
 800cfbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfbe:	b90b      	cbnz	r3, 800cfc4 <MQTTSerialize_connect+0x58>
 800cfc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cfc2:	b13b      	cbz	r3, 800cfd4 <MQTTSerialize_connect+0x68>
		len += MQTTstrlen(options->username)+2;
 800cfc4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cfc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfcc:	f000 fa14 	bl	800d3f8 <MQTTstrlen>
 800cfd0:	3002      	adds	r0, #2
 800cfd2:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
 800cfd4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cfd6:	b90b      	cbnz	r3, 800cfdc <MQTTSerialize_connect+0x70>
 800cfd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cfda:	b13b      	cbz	r3, 800cfec <MQTTSerialize_connect+0x80>
		len += MQTTstrlen(options->password)+2;
 800cfdc:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 800cfe0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfe4:	f000 fa08 	bl	800d3f8 <MQTTstrlen>
 800cfe8:	3002      	adds	r0, #2
 800cfea:	4405      	add	r5, r0
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800cfec:	4628      	mov	r0, r5
 800cfee:	f000 f96f 	bl	800d2d0 <MQTTPacket_len>
 800cff2:	4548      	cmp	r0, r9
 800cff4:	f300 8081 	bgt.w	800d0fa <MQTTSerialize_connect+0x18e>
	writeChar(&ptr, header.byte); /* write header */
 800cff8:	2110      	movs	r1, #16
 800cffa:	a801      	add	r0, sp, #4
 800cffc:	f000 f992 	bl	800d324 <writeChar>
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800d000:	4629      	mov	r1, r5
 800d002:	9801      	ldr	r0, [sp, #4]
 800d004:	f000 f928 	bl	800d258 <MQTTPacket_encode>
 800d008:	9b01      	ldr	r3, [sp, #4]
	if (options->MQTTVersion == 4)
 800d00a:	7a25      	ldrb	r5, [r4, #8]
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800d00c:	4418      	add	r0, r3
	if (options->MQTTVersion == 4)
 800d00e:	2d04      	cmp	r5, #4
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800d010:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 4)
 800d012:	d16c      	bne.n	800d0ee <MQTTSerialize_connect+0x182>
		writeCString(&ptr, "MQTT");
 800d014:	493a      	ldr	r1, [pc, #232]	; (800d100 <MQTTSerialize_connect+0x194>)
 800d016:	a801      	add	r0, sp, #4
 800d018:	f000 f99f 	bl	800d35a <writeCString>
		writeChar(&ptr, (char) 4);
 800d01c:	4629      	mov	r1, r5
		writeChar(&ptr, (char) 3);
 800d01e:	a801      	add	r0, sp, #4
 800d020:	f000 f980 	bl	800d324 <writeChar>
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800d024:	7ee3      	ldrb	r3, [r4, #27]
 800d026:	1e1a      	subs	r2, r3, #0
	flags.bits.cleansession = options->cleansession;
 800d028:	7ea3      	ldrb	r3, [r4, #26]
	flags.all = 0;
 800d02a:	f04f 0100 	mov.w	r1, #0
	flags.bits.cleansession = options->cleansession;
 800d02e:	ea4f 0343 	mov.w	r3, r3, lsl #1
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800d032:	bf18      	it	ne
 800d034:	2201      	movne	r2, #1
	flags.all = 0;
 800d036:	f36f 0107 	bfc	r1, #0, #8
	flags.bits.cleansession = options->cleansession;
 800d03a:	f003 0302 	and.w	r3, r3, #2
 800d03e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800d042:	f021 0206 	bic.w	r2, r1, #6
 800d046:	4313      	orrs	r3, r2
 800d048:	f363 0107 	bfi	r1, r3, #0, #8
	if (flags.bits.will)
 800d04c:	0748      	lsls	r0, r1, #29
 800d04e:	d50f      	bpl.n	800d070 <MQTTSerialize_connect+0x104>
		flags.bits.willQoS = options->will.qos;
 800d050:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d054:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800d058:	015b      	lsls	r3, r3, #5
 800d05a:	00d2      	lsls	r2, r2, #3
 800d05c:	f002 0218 	and.w	r2, r2, #24
 800d060:	f003 0320 	and.w	r3, r3, #32
 800d064:	4313      	orrs	r3, r2
 800d066:	f021 0238 	bic.w	r2, r1, #56	; 0x38
 800d06a:	4313      	orrs	r3, r2
 800d06c:	f363 0107 	bfi	r1, r3, #0, #8
	if (options->username.cstring || options->username.lenstring.data)
 800d070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d072:	b90b      	cbnz	r3, 800d078 <MQTTSerialize_connect+0x10c>
 800d074:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d076:	b10b      	cbz	r3, 800d07c <MQTTSerialize_connect+0x110>
		flags.bits.username = 1;
 800d078:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
 800d07c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d07e:	b90b      	cbnz	r3, 800d084 <MQTTSerialize_connect+0x118>
 800d080:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d082:	b10b      	cbz	r3, 800d088 <MQTTSerialize_connect+0x11c>
		flags.bits.password = 1;
 800d084:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	writeChar(&ptr, flags.all);
 800d088:	b2cd      	uxtb	r5, r1
 800d08a:	4629      	mov	r1, r5
 800d08c:	a801      	add	r0, sp, #4
 800d08e:	f000 f949 	bl	800d324 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800d092:	8b21      	ldrh	r1, [r4, #24]
 800d094:	a801      	add	r0, sp, #4
 800d096:	f000 f94b 	bl	800d330 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800d09a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d09e:	a801      	add	r0, sp, #4
 800d0a0:	f000 f96f 	bl	800d382 <writeMQTTString>
	if (options->willFlag)
 800d0a4:	7ee3      	ldrb	r3, [r4, #27]
 800d0a6:	b15b      	cbz	r3, 800d0c0 <MQTTSerialize_connect+0x154>
		writeMQTTString(&ptr, options->will.topicName);
 800d0a8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800d0ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0ae:	a801      	add	r0, sp, #4
 800d0b0:	f000 f967 	bl	800d382 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800d0b4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800d0b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0ba:	a801      	add	r0, sp, #4
 800d0bc:	f000 f961 	bl	800d382 <writeMQTTString>
	if (flags.bits.username)
 800d0c0:	062a      	lsls	r2, r5, #24
 800d0c2:	d505      	bpl.n	800d0d0 <MQTTSerialize_connect+0x164>
		writeMQTTString(&ptr, options->username);
 800d0c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d0c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0ca:	a801      	add	r0, sp, #4
 800d0cc:	f000 f959 	bl	800d382 <writeMQTTString>
	if (flags.bits.password)
 800d0d0:	066b      	lsls	r3, r5, #25
 800d0d2:	d505      	bpl.n	800d0e0 <MQTTSerialize_connect+0x174>
		writeMQTTString(&ptr, options->password);
 800d0d4:	344c      	adds	r4, #76	; 0x4c
 800d0d6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d0da:	a801      	add	r0, sp, #4
 800d0dc:	f000 f951 	bl	800d382 <writeMQTTString>
	rc = ptr - buf;
 800d0e0:	9801      	ldr	r0, [sp, #4]
 800d0e2:	1b80      	subs	r0, r0, r6
}
 800d0e4:	b003      	add	sp, #12
 800d0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
 800d0ea:	250c      	movs	r5, #12
 800d0ec:	e74c      	b.n	800cf88 <MQTTSerialize_connect+0x1c>
		writeCString(&ptr, "MQIsdp");
 800d0ee:	4905      	ldr	r1, [pc, #20]	; (800d104 <MQTTSerialize_connect+0x198>)
 800d0f0:	a801      	add	r0, sp, #4
 800d0f2:	f000 f932 	bl	800d35a <writeCString>
		writeChar(&ptr, (char) 3);
 800d0f6:	2103      	movs	r1, #3
 800d0f8:	e791      	b.n	800d01e <MQTTSerialize_connect+0xb2>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d0fa:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d0fe:	e7f1      	b.n	800d0e4 <MQTTSerialize_connect+0x178>
 800d100:	08030047 	.word	0x08030047
 800d104:	0803004c 	.word	0x0803004c

0800d108 <MQTTDeserialize_connack>:
{
 800d108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d10a:	4605      	mov	r5, r0
	header.byte = readChar(&curdata);
 800d10c:	4668      	mov	r0, sp
{
 800d10e:	460c      	mov	r4, r1
	unsigned char* curdata = buf;
 800d110:	9200      	str	r2, [sp, #0]
	header.byte = readChar(&curdata);
 800d112:	f000 f901 	bl	800d318 <readChar>
	if (header.bits.type != CONNACK)
 800d116:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800d11a:	2820      	cmp	r0, #32
 800d11c:	d116      	bne.n	800d14c <MQTTDeserialize_connack+0x44>
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d11e:	9800      	ldr	r0, [sp, #0]
 800d120:	a901      	add	r1, sp, #4
 800d122:	f000 f8e7 	bl	800d2f4 <MQTTPacket_decodeBuf>
 800d126:	9b00      	ldr	r3, [sp, #0]
 800d128:	4403      	add	r3, r0
 800d12a:	9300      	str	r3, [sp, #0]
	if (enddata - curdata < 2)
 800d12c:	9b01      	ldr	r3, [sp, #4]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	dd0a      	ble.n	800d148 <MQTTDeserialize_connack+0x40>
	flags.all = readChar(&curdata);
 800d132:	4668      	mov	r0, sp
 800d134:	f000 f8f0 	bl	800d318 <readChar>
	*sessionPresent = flags.bits.sessionpresent;
 800d138:	f000 0001 	and.w	r0, r0, #1
 800d13c:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
 800d13e:	4668      	mov	r0, sp
 800d140:	f000 f8ea 	bl	800d318 <readChar>
 800d144:	7020      	strb	r0, [r4, #0]
	rc = 1;
 800d146:	2001      	movs	r0, #1
}
 800d148:	b003      	add	sp, #12
 800d14a:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
 800d14c:	2000      	movs	r0, #0
	return rc;
 800d14e:	e7fb      	b.n	800d148 <MQTTDeserialize_connack+0x40>

0800d150 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 800d150:	220e      	movs	r2, #14
 800d152:	f7ff bef4 	b.w	800cf3e <MQTTSerialize_zero>

0800d156 <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800d156:	220c      	movs	r2, #12
 800d158:	f7ff bef1 	b.w	800cf3e <MQTTSerialize_zero>

0800d15c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800d15c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
 800d160:	2500      	movs	r5, #0
{
 800d162:	4681      	mov	r9, r0
 800d164:	461f      	mov	r7, r3

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d166:	4668      	mov	r0, sp
	unsigned char* curdata = buf;
 800d168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d16a:	9300      	str	r3, [sp, #0]
{
 800d16c:	460e      	mov	r6, r1
 800d16e:	4690      	mov	r8, r2
	int mylen = 0;
 800d170:	9501      	str	r5, [sp, #4]
	header.byte = readChar(&curdata);
 800d172:	f000 f8d1 	bl	800d318 <readChar>
	if (header.bits.type != PUBLISH)
 800d176:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	header.byte = readChar(&curdata);
 800d17a:	462c      	mov	r4, r5
	if (header.bits.type != PUBLISH)
 800d17c:	2b30      	cmp	r3, #48	; 0x30
	header.byte = readChar(&curdata);
 800d17e:	f360 0407 	bfi	r4, r0, #0, #8
	if (header.bits.type != PUBLISH)
 800d182:	d12c      	bne.n	800d1de <MQTTDeserialize_publish+0x82>
		goto exit;
	*dup = header.bits.dup;
 800d184:	f3c4 03c0 	ubfx	r3, r4, #3, #1
 800d188:	f889 3000 	strb.w	r3, [r9]
	*qos = header.bits.qos;
 800d18c:	f3c4 0341 	ubfx	r3, r4, #1, #2
	*retained = header.bits.retain;
 800d190:	f3c4 0400 	ubfx	r4, r4, #0, #1
	*qos = header.bits.qos;
 800d194:	6033      	str	r3, [r6, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d196:	a901      	add	r1, sp, #4
	*retained = header.bits.retain;
 800d198:	f888 4000 	strb.w	r4, [r8]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d19c:	9800      	ldr	r0, [sp, #0]
 800d19e:	f000 f8a9 	bl	800d2f4 <MQTTPacket_decodeBuf>
 800d1a2:	9c00      	ldr	r4, [sp, #0]
	enddata = curdata + mylen;
 800d1a4:	9a01      	ldr	r2, [sp, #4]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d1a6:	4404      	add	r4, r0
 800d1a8:	9400      	str	r4, [sp, #0]
	enddata = curdata + mylen;
 800d1aa:	4414      	add	r4, r2
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d1ac:	4605      	mov	r5, r0

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800d1ae:	4622      	mov	r2, r4
 800d1b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d1b2:	4669      	mov	r1, sp
 800d1b4:	f000 f907 	bl	800d3c6 <readMQTTLenString>
 800d1b8:	b188      	cbz	r0, 800d1de <MQTTDeserialize_publish+0x82>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800d1ba:	9b00      	ldr	r3, [sp, #0]
 800d1bc:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	db0d      	blt.n	800d1de <MQTTDeserialize_publish+0x82>
		goto exit;

	if (*qos > 0)
 800d1c2:	6833      	ldr	r3, [r6, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	dd03      	ble.n	800d1d0 <MQTTDeserialize_publish+0x74>
		*packetid = readInt(&curdata);
 800d1c8:	4668      	mov	r0, sp
 800d1ca:	f000 f89d 	bl	800d308 <readInt>
 800d1ce:	8038      	strh	r0, [r7, #0]

	*payloadlen = enddata - curdata;
 800d1d0:	9b00      	ldr	r3, [sp, #0]
 800d1d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1d4:	1ae4      	subs	r4, r4, r3
 800d1d6:	6014      	str	r4, [r2, #0]
	*payload = curdata;
 800d1d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	rc = 1;
 800d1da:	2501      	movs	r5, #1
	*payload = curdata;
 800d1dc:	6013      	str	r3, [r2, #0]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d1de:	4628      	mov	r0, r5
 800d1e0:	b003      	add	sp, #12
 800d1e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d1e6 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800d1e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1e8:	4605      	mov	r5, r0
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d1ea:	4668      	mov	r0, sp
{
 800d1ec:	460e      	mov	r6, r1
 800d1ee:	4614      	mov	r4, r2
	unsigned char* curdata = buf;
 800d1f0:	9300      	str	r3, [sp, #0]
	header.byte = readChar(&curdata);
 800d1f2:	f000 f891 	bl	800d318 <readChar>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	f360 0307 	bfi	r3, r0, #0, #8
	*dup = header.bits.dup;
 800d1fc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	*packettype = header.bits.type;
 800d200:	f3c3 1303 	ubfx	r3, r3, #4, #4
	*dup = header.bits.dup;
 800d204:	7032      	strb	r2, [r6, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d206:	9800      	ldr	r0, [sp, #0]
	*packettype = header.bits.type;
 800d208:	702b      	strb	r3, [r5, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d20a:	a901      	add	r1, sp, #4
 800d20c:	f000 f872 	bl	800d2f4 <MQTTPacket_decodeBuf>
 800d210:	9b00      	ldr	r3, [sp, #0]
 800d212:	4403      	add	r3, r0
 800d214:	9300      	str	r3, [sp, #0]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
 800d216:	9b01      	ldr	r3, [sp, #4]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	dd04      	ble.n	800d226 <MQTTDeserialize_ack+0x40>
		goto exit;
	*packetid = readInt(&curdata);
 800d21c:	4668      	mov	r0, sp
 800d21e:	f000 f873 	bl	800d308 <readInt>
 800d222:	8020      	strh	r0, [r4, #0]

	rc = 1;
 800d224:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d226:	b002      	add	sp, #8
 800d228:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d22c <bufchar>:

int bufchar(unsigned char* c, int count)
{
	int i;

	for (i = 0; i < count; ++i)
 800d22c:	4b09      	ldr	r3, [pc, #36]	; (800d254 <bufchar+0x28>)
{
 800d22e:	b530      	push	{r4, r5, lr}
 800d230:	681a      	ldr	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800d232:	2500      	movs	r5, #0
 800d234:	462c      	mov	r4, r5
 800d236:	428c      	cmp	r4, r1
 800d238:	db06      	blt.n	800d248 <bufchar+0x1c>
 800d23a:	2900      	cmp	r1, #0
 800d23c:	bfa8      	it	ge
 800d23e:	1852      	addge	r2, r2, r1
 800d240:	b105      	cbz	r5, 800d244 <bufchar+0x18>
 800d242:	601a      	str	r2, [r3, #0]
		*c = *bufptr++;
	return count;
}
 800d244:	4608      	mov	r0, r1
 800d246:	bd30      	pop	{r4, r5, pc}
		*c = *bufptr++;
 800d248:	5d15      	ldrb	r5, [r2, r4]
 800d24a:	7005      	strb	r5, [r0, #0]
	for (i = 0; i < count; ++i)
 800d24c:	3401      	adds	r4, #1
 800d24e:	2501      	movs	r5, #1
 800d250:	e7f1      	b.n	800d236 <bufchar+0xa>
 800d252:	bf00      	nop
 800d254:	200010c0 	.word	0x200010c0

0800d258 <MQTTPacket_encode>:
{
 800d258:	b530      	push	{r4, r5, lr}
 800d25a:	f1c0 0202 	rsb	r2, r0, #2
 800d25e:	1e45      	subs	r5, r0, #1
		char d = length % 128;
 800d260:	4248      	negs	r0, r1
 800d262:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d266:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800d26a:	460c      	mov	r4, r1
 800d26c:	bf58      	it	pl
 800d26e:	4243      	negpl	r3, r0
		length /= 128;
 800d270:	2900      	cmp	r1, #0
		char d = length % 128;
 800d272:	b2db      	uxtb	r3, r3
		length /= 128;
 800d274:	bfb8      	it	lt
 800d276:	317f      	addlt	r1, #127	; 0x7f
		if (length > 0)
 800d278:	2c7f      	cmp	r4, #127	; 0x7f
			d |= 0x80;
 800d27a:	bfc8      	it	gt
 800d27c:	f043 0380 	orrgt.w	r3, r3, #128	; 0x80
	} while (length > 0);
 800d280:	2c7f      	cmp	r4, #127	; 0x7f
 800d282:	eb02 0005 	add.w	r0, r2, r5
		length /= 128;
 800d286:	ea4f 11e1 	mov.w	r1, r1, asr #7
		buf[rc++] = d;
 800d28a:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while (length > 0);
 800d28e:	dce7      	bgt.n	800d260 <MQTTPacket_encode+0x8>
}
 800d290:	bd30      	pop	{r4, r5, pc}

0800d292 <MQTTPacket_decode>:
{
 800d292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*value = 0;
 800d294:	2400      	movs	r4, #0
{
 800d296:	4607      	mov	r7, r0
 800d298:	460d      	mov	r5, r1
	*value = 0;
 800d29a:	600c      	str	r4, [r1, #0]
	int multiplier = 1;
 800d29c:	2601      	movs	r6, #1
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800d29e:	3401      	adds	r4, #1
 800d2a0:	2c05      	cmp	r4, #5
 800d2a2:	d011      	beq.n	800d2c8 <MQTTPacket_decode+0x36>
		rc = (*getcharfn)(&c, 1);
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	f10d 0007 	add.w	r0, sp, #7
 800d2aa:	47b8      	blx	r7
		if (rc != 1)
 800d2ac:	2801      	cmp	r0, #1
 800d2ae:	d10b      	bne.n	800d2c8 <MQTTPacket_decode+0x36>
		*value += (c & 127) * multiplier;
 800d2b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d2b4:	6829      	ldr	r1, [r5, #0]
 800d2b6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800d2ba:	fb06 1303 	mla	r3, r6, r3, r1
 800d2be:	602b      	str	r3, [r5, #0]
	} while ((c & 128) != 0);
 800d2c0:	0613      	lsls	r3, r2, #24
		multiplier *= 128;
 800d2c2:	ea4f 16c6 	mov.w	r6, r6, lsl #7
	} while ((c & 128) != 0);
 800d2c6:	d4ea      	bmi.n	800d29e <MQTTPacket_decode+0xc>
}
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	b003      	add	sp, #12
 800d2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d2d0 <MQTTPacket_len>:
	rem_len += 1; /* header byte */
 800d2d0:	1c43      	adds	r3, r0, #1
	if (rem_len < 128)
 800d2d2:	2b7f      	cmp	r3, #127	; 0x7f
 800d2d4:	dc01      	bgt.n	800d2da <MQTTPacket_len+0xa>
		rem_len += 1;
 800d2d6:	3002      	adds	r0, #2
 800d2d8:	4770      	bx	lr
	else if (rem_len < 16384)
 800d2da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2de:	da01      	bge.n	800d2e4 <MQTTPacket_len+0x14>
		rem_len += 2;
 800d2e0:	3003      	adds	r0, #3
 800d2e2:	4770      	bx	lr
	else if (rem_len < 2097151)
 800d2e4:	4a02      	ldr	r2, [pc, #8]	; (800d2f0 <MQTTPacket_len+0x20>)
 800d2e6:	4293      	cmp	r3, r2
		rem_len += 3;
 800d2e8:	bfd4      	ite	le
 800d2ea:	3004      	addle	r0, #4
		rem_len += 4;
 800d2ec:	3005      	addgt	r0, #5
}
 800d2ee:	4770      	bx	lr
 800d2f0:	001ffffe 	.word	0x001ffffe

0800d2f4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
	bufptr = buf;
 800d2f4:	4b02      	ldr	r3, [pc, #8]	; (800d300 <MQTTPacket_decodeBuf+0xc>)
 800d2f6:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
 800d2f8:	4802      	ldr	r0, [pc, #8]	; (800d304 <MQTTPacket_decodeBuf+0x10>)
 800d2fa:	f7ff bfca 	b.w	800d292 <MQTTPacket_decode>
 800d2fe:	bf00      	nop
 800d300:	200010c0 	.word	0x200010c0
 800d304:	0800d22d 	.word	0x0800d22d

0800d308 <readInt>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
	unsigned char* ptr = *pptr;
 800d308:	6803      	ldr	r3, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
 800d30a:	7819      	ldrb	r1, [r3, #0]
 800d30c:	785a      	ldrb	r2, [r3, #1]
	*pptr += 2;
 800d30e:	3302      	adds	r3, #2
 800d310:	6003      	str	r3, [r0, #0]
	return len;
}
 800d312:	eb02 2001 	add.w	r0, r2, r1, lsl #8
 800d316:	4770      	bx	lr

0800d318 <readChar>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
	char c = **pptr;
 800d318:	6802      	ldr	r2, [r0, #0]
{
 800d31a:	4603      	mov	r3, r0
	char c = **pptr;
 800d31c:	f812 0b01 	ldrb.w	r0, [r2], #1
	(*pptr)++;
 800d320:	601a      	str	r2, [r3, #0]
	return c;
}
 800d322:	4770      	bx	lr

0800d324 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
 800d324:	6803      	ldr	r3, [r0, #0]
 800d326:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
 800d328:	6803      	ldr	r3, [r0, #0]
 800d32a:	3301      	adds	r3, #1
 800d32c:	6003      	str	r3, [r0, #0]
}
 800d32e:	4770      	bx	lr

0800d330 <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
 800d330:	2900      	cmp	r1, #0
 800d332:	6802      	ldr	r2, [r0, #0]
 800d334:	460b      	mov	r3, r1
 800d336:	bfb8      	it	lt
 800d338:	f101 03ff 	addlt.w	r3, r1, #255	; 0xff
 800d33c:	121b      	asrs	r3, r3, #8
 800d33e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800d340:	6802      	ldr	r2, [r0, #0]
 800d342:	1c53      	adds	r3, r2, #1
 800d344:	6003      	str	r3, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 800d346:	424b      	negs	r3, r1
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	b2c9      	uxtb	r1, r1
 800d34c:	bf58      	it	pl
 800d34e:	4259      	negpl	r1, r3
 800d350:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
 800d352:	6803      	ldr	r3, [r0, #0]
 800d354:	3301      	adds	r3, #1
 800d356:	6003      	str	r3, [r0, #0]
}
 800d358:	4770      	bx	lr

0800d35a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800d35a:	b570      	push	{r4, r5, r6, lr}
 800d35c:	4604      	mov	r4, r0
	int len = strlen(string);
 800d35e:	4608      	mov	r0, r1
{
 800d360:	460e      	mov	r6, r1
	int len = strlen(string);
 800d362:	f7f2 ff3f 	bl	80001e4 <strlen>
 800d366:	4605      	mov	r5, r0
	writeInt(pptr, len);
 800d368:	4601      	mov	r1, r0
 800d36a:	4620      	mov	r0, r4
 800d36c:	f7ff ffe0 	bl	800d330 <writeInt>
	memcpy(*pptr, string, len);
 800d370:	6820      	ldr	r0, [r4, #0]
 800d372:	462a      	mov	r2, r5
 800d374:	4631      	mov	r1, r6
 800d376:	f015 f883 	bl	8022480 <memcpy>
	*pptr += len;
 800d37a:	6820      	ldr	r0, [r4, #0]
 800d37c:	4428      	add	r0, r5
 800d37e:	6020      	str	r0, [r4, #0]
}
 800d380:	bd70      	pop	{r4, r5, r6, pc}

0800d382 <writeMQTTString>:


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800d382:	b530      	push	{r4, r5, lr}
 800d384:	b085      	sub	sp, #20
 800d386:	ad04      	add	r5, sp, #16
 800d388:	e905 000e 	stmdb	r5, {r1, r2, r3}
 800d38c:	9d02      	ldr	r5, [sp, #8]
	if (mqttstring.lenstring.len > 0)
 800d38e:	2d00      	cmp	r5, #0
{
 800d390:	4604      	mov	r4, r0
	if (mqttstring.lenstring.len > 0)
 800d392:	dd0c      	ble.n	800d3ae <writeMQTTString+0x2c>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800d394:	4629      	mov	r1, r5
 800d396:	f7ff ffcb 	bl	800d330 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800d39a:	462a      	mov	r2, r5
 800d39c:	9903      	ldr	r1, [sp, #12]
 800d39e:	6800      	ldr	r0, [r0, #0]
 800d3a0:	f015 f86e 	bl	8022480 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800d3a4:	6822      	ldr	r2, [r4, #0]
 800d3a6:	442a      	add	r2, r5
 800d3a8:	6022      	str	r2, [r4, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800d3aa:	b005      	add	sp, #20
 800d3ac:	bd30      	pop	{r4, r5, pc}
 800d3ae:	9901      	ldr	r1, [sp, #4]
	else if (mqttstring.cstring)
 800d3b0:	b121      	cbz	r1, 800d3bc <writeMQTTString+0x3a>
}
 800d3b2:	b005      	add	sp, #20
 800d3b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeCString(pptr, mqttstring.cstring);
 800d3b8:	f7ff bfcf 	b.w	800d35a <writeCString>
}
 800d3bc:	b005      	add	sp, #20
 800d3be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeInt(pptr, 0);
 800d3c2:	f7ff bfb5 	b.w	800d330 <writeInt>

0800d3c6 <readMQTTLenString>:
{
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800d3c6:	680b      	ldr	r3, [r1, #0]
 800d3c8:	1ad3      	subs	r3, r2, r3
 800d3ca:	2b01      	cmp	r3, #1
{
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	460c      	mov	r4, r1
 800d3d2:	4616      	mov	r6, r2
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800d3d4:	dc03      	bgt.n	800d3de <readMQTTLenString+0x18>
	int rc = 0;
 800d3d6:	2000      	movs	r0, #0
			mqttstring->lenstring.data = (char*)*pptr;
			*pptr += mqttstring->lenstring.len;
			rc = 1;
		}
	}
	mqttstring->cstring = NULL;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	602b      	str	r3, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d3dc:	bd70      	pop	{r4, r5, r6, pc}
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800d3de:	4608      	mov	r0, r1
 800d3e0:	f7ff ff92 	bl	800d308 <readInt>
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800d3e4:	6822      	ldr	r2, [r4, #0]
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800d3e6:	6068      	str	r0, [r5, #4]
 800d3e8:	4603      	mov	r3, r0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800d3ea:	4413      	add	r3, r2
 800d3ec:	42b3      	cmp	r3, r6
 800d3ee:	d8f2      	bhi.n	800d3d6 <readMQTTLenString+0x10>
			mqttstring->lenstring.data = (char*)*pptr;
 800d3f0:	60aa      	str	r2, [r5, #8]
			rc = 1;
 800d3f2:	2001      	movs	r0, #1
			*pptr += mqttstring->lenstring.len;
 800d3f4:	6023      	str	r3, [r4, #0]
			rc = 1;
 800d3f6:	e7ef      	b.n	800d3d8 <readMQTTLenString+0x12>

0800d3f8 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800d3f8:	b084      	sub	sp, #16
 800d3fa:	ab04      	add	r3, sp, #16
 800d3fc:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800d400:	9801      	ldr	r0, [sp, #4]
	int rc = 0;

	if (mqttstring.cstring)
 800d402:	b110      	cbz	r0, 800d40a <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
 800d404:	b004      	add	sp, #16
		rc = strlen(mqttstring.cstring);
 800d406:	f7f2 beed 	b.w	80001e4 <strlen>
}
 800d40a:	9802      	ldr	r0, [sp, #8]
 800d40c:	b004      	add	sp, #16
 800d40e:	4770      	bx	lr

0800d410 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800d410:	b570      	push	{r4, r5, r6, lr}
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
 800d412:	6805      	ldr	r5, [r0, #0]
{
 800d414:	460e      	mov	r6, r1
	if (a->cstring)
 800d416:	b18d      	cbz	r5, 800d43c <MQTTPacket_equals+0x2c>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
 800d418:	4628      	mov	r0, r5
 800d41a:	f7f2 fee3 	bl	80001e4 <strlen>
 800d41e:	4604      	mov	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
 800d420:	4630      	mov	r0, r6
 800d422:	f7f2 fedf 	bl	80001e4 <strlen>
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800d426:	4284      	cmp	r4, r0
 800d428:	d10b      	bne.n	800d442 <MQTTPacket_equals+0x32>
 800d42a:	4622      	mov	r2, r4
 800d42c:	4631      	mov	r1, r6
 800d42e:	4628      	mov	r0, r5
 800d430:	f016 fb16 	bl	8023a60 <strncmp>
 800d434:	fab0 f080 	clz	r0, r0
 800d438:	0940      	lsrs	r0, r0, #5
}
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
		alen = a->lenstring.len;
 800d43c:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
 800d440:	e7ee      	b.n	800d420 <MQTTPacket_equals+0x10>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800d442:	2000      	movs	r0, #0
 800d444:	e7f9      	b.n	800d43a <MQTTPacket_equals+0x2a>

0800d446 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800d446:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d44a:	af0e      	add	r7, sp, #56	; 0x38
 800d44c:	460e      	mov	r6, r1
	unsigned char *ptr = buf;
 800d44e:	9000      	str	r0, [sp, #0]
{
 800d450:	4681      	mov	r9, r0
 800d452:	4615      	mov	r5, r2
 800d454:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d458:	4698      	mov	r8, r3
 800d45a:	ab01      	add	r3, sp, #4
 800d45c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d460:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800d464:	f7ff ffc8 	bl	800d3f8 <MQTTstrlen>
 800d468:	3002      	adds	r0, #2
	if (qos > 0)
 800d46a:	f1b8 0f00 	cmp.w	r8, #0
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800d46e:	eb00 040a 	add.w	r4, r0, sl
		len += 2; /* packetid */
 800d472:	bfc8      	it	gt
 800d474:	3402      	addgt	r4, #2
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800d476:	4620      	mov	r0, r4
 800d478:	f7ff ff2a 	bl	800d2d0 <MQTTPacket_len>
 800d47c:	42b0      	cmp	r0, r6
 800d47e:	dc30      	bgt.n	800d4e2 <MQTTSerialize_publish+0x9c>
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
	header.bits.qos = qos;
	header.bits.retain = retained;
 800d480:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800d484:	f006 0601 	and.w	r6, r6, #1
 800d488:	f008 0103 	and.w	r1, r8, #3
 800d48c:	f046 0630 	orr.w	r6, r6, #48	; 0x30
 800d490:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 800d494:	00e9      	lsls	r1, r5, #3
 800d496:	f001 0108 	and.w	r1, r1, #8
	writeChar(&ptr, header.byte); /* write header */
 800d49a:	4331      	orrs	r1, r6
 800d49c:	4668      	mov	r0, sp
 800d49e:	f7ff ff41 	bl	800d324 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	9800      	ldr	r0, [sp, #0]
 800d4a6:	f7ff fed7 	bl	800d258 <MQTTPacket_encode>
 800d4aa:	9b00      	ldr	r3, [sp, #0]
 800d4ac:	4418      	add	r0, r3
 800d4ae:	9000      	str	r0, [sp, #0]

	writeMQTTString(&ptr, topicName);
 800d4b0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d4b4:	4668      	mov	r0, sp
 800d4b6:	f7ff ff64 	bl	800d382 <writeMQTTString>

	if (qos > 0)
 800d4ba:	f1b8 0f00 	cmp.w	r8, #0
 800d4be:	dd04      	ble.n	800d4ca <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
 800d4c0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800d4c4:	4668      	mov	r0, sp
 800d4c6:	f7ff ff33 	bl	800d330 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800d4ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d4cc:	9800      	ldr	r0, [sp, #0]
 800d4ce:	4652      	mov	r2, sl
 800d4d0:	f014 ffd6 	bl	8022480 <memcpy>
	ptr += payloadlen;
 800d4d4:	9800      	ldr	r0, [sp, #0]
 800d4d6:	4450      	add	r0, sl

	rc = ptr - buf;
 800d4d8:	eba0 0009 	sub.w	r0, r0, r9

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d4dc:	b004      	add	sp, #16
 800d4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d4e2:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d4e6:	e7f9      	b.n	800d4dc <MQTTSerialize_publish+0x96>

0800d4e8 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800d4e8:	b513      	push	{r0, r1, r4, lr}
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 4)
 800d4ea:	2903      	cmp	r1, #3
{
 800d4ec:	4604      	mov	r4, r0
	unsigned char *ptr = buf;
 800d4ee:	9001      	str	r0, [sp, #4]
	if (buflen < 4)
 800d4f0:	dd1e      	ble.n	800d530 <MQTTSerialize_ack+0x48>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
	header.bits.dup = dup;
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800d4f2:	1f90      	subs	r0, r2, #6
 800d4f4:	00d9      	lsls	r1, r3, #3
 800d4f6:	4243      	negs	r3, r0
 800d4f8:	4143      	adcs	r3, r0
 800d4fa:	f001 0108 	and.w	r1, r1, #8
 800d4fe:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
 800d502:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
	writeChar(&ptr, header.byte); /* write header */
 800d506:	f001 01fa 	and.w	r1, r1, #250	; 0xfa
 800d50a:	a801      	add	r0, sp, #4
 800d50c:	f7ff ff0a 	bl	800d324 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d510:	2102      	movs	r1, #2
 800d512:	9801      	ldr	r0, [sp, #4]
 800d514:	f7ff fea0 	bl	800d258 <MQTTPacket_encode>
 800d518:	9b01      	ldr	r3, [sp, #4]
	writeInt(&ptr, packetid);
 800d51a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d51e:	4418      	add	r0, r3
 800d520:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
 800d522:	a801      	add	r0, sp, #4
 800d524:	f7ff ff04 	bl	800d330 <writeInt>
	rc = ptr - buf;
 800d528:	9b01      	ldr	r3, [sp, #4]
 800d52a:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d52c:	b002      	add	sp, #8
 800d52e:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d530:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d534:	e7fa      	b.n	800d52c <MQTTSerialize_ack+0x44>

0800d536 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800d536:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	unsigned char *ptr = buf;
 800d53e:	9001      	str	r0, [sp, #4]
{
 800d540:	4605      	mov	r5, r0
 800d542:	4689      	mov	r9, r1
 800d544:	4614      	mov	r4, r2
 800d546:	4698      	mov	r8, r3
	int len = 2; /* packetid */
 800d548:	2602      	movs	r6, #2
	for (i = 0; i < count; ++i)
 800d54a:	2700      	movs	r7, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800d54c:	f04f 0a0c 	mov.w	sl, #12
	for (i = 0; i < count; ++i)
 800d550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d552:	42bb      	cmp	r3, r7
 800d554:	dc21      	bgt.n	800d59a <MQTTSerialize_subscribe+0x64>
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800d556:	4630      	mov	r0, r6
 800d558:	f7ff feba 	bl	800d2d0 <MQTTPacket_len>
 800d55c:	4548      	cmp	r0, r9
 800d55e:	dc33      	bgt.n	800d5c8 <MQTTSerialize_subscribe+0x92>
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
	header.bits.qos = 1;
 800d560:	00e1      	lsls	r1, r4, #3
 800d562:	f001 0108 	and.w	r1, r1, #8
	writeChar(&ptr, header.byte); /* write header */
 800d566:	f041 0182 	orr.w	r1, r1, #130	; 0x82
 800d56a:	a801      	add	r0, sp, #4
 800d56c:	f7ff feda 	bl	800d324 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d570:	4631      	mov	r1, r6
 800d572:	9801      	ldr	r0, [sp, #4]
 800d574:	f7ff fe70 	bl	800d258 <MQTTPacket_encode>
 800d578:	9b01      	ldr	r3, [sp, #4]
 800d57a:	4418      	add	r0, r3
 800d57c:	9001      	str	r0, [sp, #4]

	writeInt(&ptr, packetid);
 800d57e:	4641      	mov	r1, r8
 800d580:	a801      	add	r0, sp, #4
 800d582:	f7ff fed5 	bl	800d330 <writeInt>

	for (i = 0; i < count; ++i)
 800d586:	2400      	movs	r4, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800d588:	260c      	movs	r6, #12
	for (i = 0; i < count; ++i)
 800d58a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d58c:	429c      	cmp	r4, r3
 800d58e:	db0d      	blt.n	800d5ac <MQTTSerialize_subscribe+0x76>
		writeChar(&ptr, requestedQoSs[i]);
	}

	rc = ptr - buf;
 800d590:	9801      	ldr	r0, [sp, #4]
 800d592:	1b40      	subs	r0, r0, r5
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d594:	b003      	add	sp, #12
 800d596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800d59a:	fb0a b207 	mla	r2, sl, r7, fp
 800d59e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d5a0:	f7ff ff2a 	bl	800d3f8 <MQTTstrlen>
 800d5a4:	3003      	adds	r0, #3
 800d5a6:	4406      	add	r6, r0
	for (i = 0; i < count; ++i)
 800d5a8:	3701      	adds	r7, #1
 800d5aa:	e7d1      	b.n	800d550 <MQTTSerialize_subscribe+0x1a>
		writeMQTTString(&ptr, topicFilters[i]);
 800d5ac:	fb06 b304 	mla	r3, r6, r4, fp
 800d5b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5b2:	a801      	add	r0, sp, #4
 800d5b4:	f7ff fee5 	bl	800d382 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800d5b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5ba:	a801      	add	r0, sp, #4
 800d5bc:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
 800d5c0:	f7ff feb0 	bl	800d324 <writeChar>
	for (i = 0; i < count; ++i)
 800d5c4:	3401      	adds	r4, #1
 800d5c6:	e7e0      	b.n	800d58a <MQTTSerialize_subscribe+0x54>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d5c8:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d5cc:	e7e2      	b.n	800d594 <MQTTSerialize_subscribe+0x5e>

0800d5ce <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800d5ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d5d2:	4680      	mov	r8, r0
 800d5d4:	461f      	mov	r7, r3
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d5d6:	4668      	mov	r0, sp
	unsigned char* curdata = buf;
 800d5d8:	9b08      	ldr	r3, [sp, #32]
 800d5da:	9300      	str	r3, [sp, #0]
{
 800d5dc:	460e      	mov	r6, r1
 800d5de:	4615      	mov	r5, r2
	header.byte = readChar(&curdata);
 800d5e0:	f7ff fe9a 	bl	800d318 <readChar>
	if (header.bits.type != SUBACK)
 800d5e4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800d5e8:	2890      	cmp	r0, #144	; 0x90
 800d5ea:	d124      	bne.n	800d636 <MQTTDeserialize_suback+0x68>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d5ec:	9800      	ldr	r0, [sp, #0]
 800d5ee:	a901      	add	r1, sp, #4
 800d5f0:	f7ff fe80 	bl	800d2f4 <MQTTPacket_decodeBuf>
 800d5f4:	9c00      	ldr	r4, [sp, #0]
	enddata = curdata + mylen;
 800d5f6:	9b01      	ldr	r3, [sp, #4]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d5f8:	4404      	add	r4, r0
	if (enddata - curdata < 2)
 800d5fa:	2b01      	cmp	r3, #1
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d5fc:	9400      	str	r4, [sp, #0]
	if (enddata - curdata < 2)
 800d5fe:	dd0b      	ble.n	800d618 <MQTTDeserialize_suback+0x4a>
		goto exit;

	*packetid = readInt(&curdata);
 800d600:	4668      	mov	r0, sp
	enddata = curdata + mylen;
 800d602:	441c      	add	r4, r3
	*packetid = readInt(&curdata);
 800d604:	f7ff fe80 	bl	800d308 <readInt>

	*count = 0;
 800d608:	2300      	movs	r3, #0
	*packetid = readInt(&curdata);
 800d60a:	f8a8 0000 	strh.w	r0, [r8]
	*count = 0;
 800d60e:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
 800d610:	9b00      	ldr	r3, [sp, #0]
 800d612:	42a3      	cmp	r3, r4
 800d614:	d303      	bcc.n	800d61e <MQTTDeserialize_suback+0x50>
			goto exit;
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
	}

	rc = 1;
 800d616:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d618:	b002      	add	sp, #8
 800d61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*count > maxcount)
 800d61e:	682b      	ldr	r3, [r5, #0]
 800d620:	42b3      	cmp	r3, r6
 800d622:	dc0a      	bgt.n	800d63a <MQTTDeserialize_suback+0x6c>
		grantedQoSs[(*count)++] = readChar(&curdata);
 800d624:	4668      	mov	r0, sp
 800d626:	f7ff fe77 	bl	800d318 <readChar>
 800d62a:	682b      	ldr	r3, [r5, #0]
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	602a      	str	r2, [r5, #0]
 800d630:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
 800d634:	e7ec      	b.n	800d610 <MQTTDeserialize_suback+0x42>
	int rc = 0;
 800d636:	2000      	movs	r0, #0
 800d638:	e7ee      	b.n	800d618 <MQTTDeserialize_suback+0x4a>
			rc = -1;
 800d63a:	f04f 30ff 	mov.w	r0, #4294967295
	return rc;
 800d63e:	e7eb      	b.n	800d618 <MQTTDeserialize_suback+0x4a>

0800d640 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 800d640:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d644:	2100      	movs	r1, #0
 800d646:	f014 bf43 	b.w	80224d0 <memset>

0800d64a <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 800d64a:	b120      	cbz	r0, 800d656 <mbedtls_aes_free+0xc>
 800d64c:	f500 738c 	add.w	r3, r0, #280	; 0x118
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800d650:	2200      	movs	r2, #0
 800d652:	4298      	cmp	r0, r3
 800d654:	d100      	bne.n	800d658 <mbedtls_aes_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
}
 800d656:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800d658:	f800 2b01 	strb.w	r2, [r0], #1
 800d65c:	e7f9      	b.n	800d652 <mbedtls_aes_free+0x8>
	...

0800d660 <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
 800d660:	2ac0      	cmp	r2, #192	; 0xc0
{
 800d662:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( keybits )
 800d664:	d049      	beq.n	800d6fa <mbedtls_aes_setkey_enc+0x9a>
 800d666:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d66a:	d048      	beq.n	800d6fe <mbedtls_aes_setkey_enc+0x9e>
 800d66c:	2a80      	cmp	r2, #128	; 0x80
 800d66e:	f040 80e5 	bne.w	800d83c <mbedtls_aes_setkey_enc+0x1dc>
    {
        case 128: ctx->nr = 10; break;
 800d672:	230a      	movs	r3, #10

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800d674:	4604      	mov	r4, r0
        case 256: ctx->nr = 14; break;
 800d676:	6003      	str	r3, [r0, #0]
    ctx->rk = RK = ctx->buf;
 800d678:	f100 0308 	add.w	r3, r0, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d67c:	0952      	lsrs	r2, r2, #5
    ctx->rk = RK = ctx->buf;
 800d67e:	f844 3f04 	str.w	r3, [r4, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d682:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d686:	428a      	cmp	r2, r1
 800d688:	d13b      	bne.n	800d702 <mbedtls_aes_setkey_enc+0xa2>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 800d68a:	6803      	ldr	r3, [r0, #0]
 800d68c:	2b0c      	cmp	r3, #12
 800d68e:	d046      	beq.n	800d71e <mbedtls_aes_setkey_enc+0xbe>
 800d690:	2b0e      	cmp	r3, #14
 800d692:	d07c      	beq.n	800d78e <mbedtls_aes_setkey_enc+0x12e>
 800d694:	2b0a      	cmp	r3, #10
 800d696:	d12e      	bne.n	800d6f6 <mbedtls_aes_setkey_enc+0x96>
 800d698:	4d6a      	ldr	r5, [pc, #424]	; (800d844 <mbedtls_aes_setkey_enc+0x1e4>)
 800d69a:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
 800d69e:	4629      	mov	r1, r5
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d6a0:	6942      	ldr	r2, [r0, #20]
                RK[4]  = RK[0] ^ RCON[i] ^
 800d6a2:	f855 4b04 	ldr.w	r4, [r5], #4
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d6a6:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d6a8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d6ac:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d6ae:	407c      	eors	r4, r7
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d6b4:	4063      	eors	r3, r4
 800d6b6:	eb01 6412 	add.w	r4, r1, r2, lsr #24
 800d6ba:	3010      	adds	r0, #16
 800d6bc:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
 800d6c0:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800d6c4:	fa51 f482 	uxtab	r4, r1, r2
 800d6c8:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d6cc:	ea83 6304 	eor.w	r3, r3, r4, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800d6d0:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d6d4:	440c      	add	r4, r1
 800d6d6:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d6da:	ea83 2304 	eor.w	r3, r3, r4, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 800d6de:	f850 4c04 	ldr.w	r4, [r0, #-4]
                RK[4]  = RK[0] ^ RCON[i] ^
 800d6e2:	6083      	str	r3, [r0, #8]
                RK[5]  = RK[1] ^ RK[4];
 800d6e4:	4063      	eors	r3, r4
                RK[6]  = RK[2] ^ RK[5];
 800d6e6:	6804      	ldr	r4, [r0, #0]
                RK[5]  = RK[1] ^ RK[4];
 800d6e8:	60c3      	str	r3, [r0, #12]
                RK[6]  = RK[2] ^ RK[5];
 800d6ea:	4063      	eors	r3, r4
 800d6ec:	6103      	str	r3, [r0, #16]
                RK[7]  = RK[3] ^ RK[6];
 800d6ee:	4053      	eors	r3, r2
 800d6f0:	6143      	str	r3, [r0, #20]
            for( i = 0; i < 10; i++, RK += 4 )
 800d6f2:	4286      	cmp	r6, r0
 800d6f4:	d1d4      	bne.n	800d6a0 <mbedtls_aes_setkey_enc+0x40>
    switch( ctx->nr )
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	e0a2      	b.n	800d840 <mbedtls_aes_setkey_enc+0x1e0>
        case 192: ctx->nr = 12; break;
 800d6fa:	230c      	movs	r3, #12
 800d6fc:	e7ba      	b.n	800d674 <mbedtls_aes_setkey_enc+0x14>
        case 256: ctx->nr = 14; break;
 800d6fe:	230e      	movs	r3, #14
 800d700:	e7b8      	b.n	800d674 <mbedtls_aes_setkey_enc+0x14>
        GET_UINT32_LE( RK[i], key, i << 2 );
 800d702:	788b      	ldrb	r3, [r1, #2]
 800d704:	784d      	ldrb	r5, [r1, #1]
 800d706:	041b      	lsls	r3, r3, #16
 800d708:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d70c:	780d      	ldrb	r5, [r1, #0]
 800d70e:	432b      	orrs	r3, r5
 800d710:	78cd      	ldrb	r5, [r1, #3]
 800d712:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800d716:	f844 3f04 	str.w	r3, [r4, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d71a:	3104      	adds	r1, #4
 800d71c:	e7b3      	b.n	800d686 <mbedtls_aes_setkey_enc+0x26>
 800d71e:	4c49      	ldr	r4, [pc, #292]	; (800d844 <mbedtls_aes_setkey_enc+0x1e4>)
 800d720:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
 800d724:	4621      	mov	r1, r4
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d726:	69c2      	ldr	r2, [r0, #28]
                RK[6]  = RK[0] ^ RCON[i] ^
 800d728:	f854 6b04 	ldr.w	r6, [r4], #4
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d72c:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d72e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d732:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d734:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d73a:	4073      	eors	r3, r6
 800d73c:	eb01 6612 	add.w	r6, r1, r2, lsr #24
 800d740:	3018      	adds	r0, #24
 800d742:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800d746:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800d74a:	fa51 f682 	uxtab	r6, r1, r2
 800d74e:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d752:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800d756:	f3c2 4607 	ubfx	r6, r2, #16, #8
 800d75a:	440e      	add	r6, r1
 800d75c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d760:	ea83 2306 	eor.w	r3, r3, r6, lsl #8

                RK[7]  = RK[1] ^ RK[6];
 800d764:	f850 6c0c 	ldr.w	r6, [r0, #-12]
                RK[6]  = RK[0] ^ RCON[i] ^
 800d768:	6083      	str	r3, [r0, #8]
                RK[7]  = RK[1] ^ RK[6];
 800d76a:	4073      	eors	r3, r6
                RK[8]  = RK[2] ^ RK[7];
 800d76c:	f850 6c08 	ldr.w	r6, [r0, #-8]
                RK[7]  = RK[1] ^ RK[6];
 800d770:	60c3      	str	r3, [r0, #12]
                RK[8]  = RK[2] ^ RK[7];
 800d772:	4073      	eors	r3, r6
                RK[9]  = RK[3] ^ RK[8];
 800d774:	f850 6c04 	ldr.w	r6, [r0, #-4]
                RK[8]  = RK[2] ^ RK[7];
 800d778:	6103      	str	r3, [r0, #16]
                RK[9]  = RK[3] ^ RK[8];
 800d77a:	4073      	eors	r3, r6
                RK[10] = RK[4] ^ RK[9];
 800d77c:	6806      	ldr	r6, [r0, #0]
                RK[9]  = RK[3] ^ RK[8];
 800d77e:	6143      	str	r3, [r0, #20]
                RK[10] = RK[4] ^ RK[9];
 800d780:	4073      	eors	r3, r6
 800d782:	6183      	str	r3, [r0, #24]
                RK[11] = RK[5] ^ RK[10];
 800d784:	4053      	eors	r3, r2
 800d786:	61c3      	str	r3, [r0, #28]
            for( i = 0; i < 8; i++, RK += 6 )
 800d788:	4285      	cmp	r5, r0
 800d78a:	d1cc      	bne.n	800d726 <mbedtls_aes_setkey_enc+0xc6>
 800d78c:	e7b3      	b.n	800d6f6 <mbedtls_aes_setkey_enc+0x96>
 800d78e:	4d2d      	ldr	r5, [pc, #180]	; (800d844 <mbedtls_aes_setkey_enc+0x1e4>)
 800d790:	f100 06e0 	add.w	r6, r0, #224	; 0xe0
 800d794:	4629      	mov	r1, r5
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d796:	6a44      	ldr	r4, [r0, #36]	; 0x24
                RK[8]  = RK[0] ^ RCON[i] ^
 800d798:	f855 2b04 	ldr.w	r2, [r5], #4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d79c:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d79e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800d7a2:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d7a4:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d7a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d7aa:	6987      	ldr	r7, [r0, #24]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d7ac:	4053      	eors	r3, r2
 800d7ae:	eb01 6214 	add.w	r2, r1, r4, lsr #24
 800d7b2:	3020      	adds	r0, #32
 800d7b4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d7b8:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800d7bc:	fa51 f284 	uxtab	r2, r1, r4
 800d7c0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d7c4:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800d7c8:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800d7cc:	440a      	add	r2, r1
 800d7ce:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d7d2:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 800d7d6:	f850 2c14 	ldr.w	r2, [r0, #-20]
                RK[8]  = RK[0] ^ RCON[i] ^
 800d7da:	6083      	str	r3, [r0, #8]
                RK[9]  = RK[1] ^ RK[8];
 800d7dc:	4053      	eors	r3, r2
                RK[10] = RK[2] ^ RK[9];
 800d7de:	f850 2c10 	ldr.w	r2, [r0, #-16]
                RK[9]  = RK[1] ^ RK[8];
 800d7e2:	60c3      	str	r3, [r0, #12]
                RK[10] = RK[2] ^ RK[9];
 800d7e4:	4053      	eors	r3, r2
                RK[11] = RK[3] ^ RK[10];
 800d7e6:	f850 2c0c 	ldr.w	r2, [r0, #-12]
                RK[10] = RK[2] ^ RK[9];
 800d7ea:	6103      	str	r3, [r0, #16]
                RK[11] = RK[3] ^ RK[10];
 800d7ec:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800d7ee:	fa51 f283 	uxtab	r2, r1, r3
                RK[11] = RK[3] ^ RK[10];
 800d7f2:	6143      	str	r3, [r0, #20]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800d7f4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d7f8:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800d7fa:	eb01 6713 	add.w	r7, r1, r3, lsr #24
 800d7fe:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d802:	ea82 6207 	eor.w	r2, r2, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800d806:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800d80a:	440f      	add	r7, r1
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d80c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800d810:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800d812:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d81a:	ea82 2207 	eor.w	r2, r2, r7, lsl #8
 800d81e:	ea82 4303 	eor.w	r3, r2, r3, lsl #16

                RK[13] = RK[5] ^ RK[12];
 800d822:	f850 2c04 	ldr.w	r2, [r0, #-4]
                RK[12] = RK[4] ^
 800d826:	6183      	str	r3, [r0, #24]
                RK[13] = RK[5] ^ RK[12];
 800d828:	4053      	eors	r3, r2
                RK[14] = RK[6] ^ RK[13];
 800d82a:	6802      	ldr	r2, [r0, #0]
                RK[13] = RK[5] ^ RK[12];
 800d82c:	61c3      	str	r3, [r0, #28]
                RK[14] = RK[6] ^ RK[13];
 800d82e:	4053      	eors	r3, r2
 800d830:	6203      	str	r3, [r0, #32]
                RK[15] = RK[7] ^ RK[14];
 800d832:	4063      	eors	r3, r4
 800d834:	6243      	str	r3, [r0, #36]	; 0x24
            for( i = 0; i < 7; i++, RK += 8 )
 800d836:	4286      	cmp	r6, r0
 800d838:	d1ad      	bne.n	800d796 <mbedtls_aes_setkey_enc+0x136>
 800d83a:	e75c      	b.n	800d6f6 <mbedtls_aes_setkey_enc+0x96>
    switch( keybits )
 800d83c:	f06f 001f 	mvn.w	r0, #31
            }
            break;
    }

    return( 0 );
}
 800d840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d842:	bf00      	nop
 800d844:	08028708 	.word	0x08028708

0800d848 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800d848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	b0c9      	sub	sp, #292	; 0x124
 800d84e:	4604      	mov	r4, r0
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 800d850:	a802      	add	r0, sp, #8
{
 800d852:	e9cd 2100 	strd	r2, r1, [sp]
    mbedtls_aes_init( &cty );
 800d856:	f7ff fef3 	bl	800d640 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800d85a:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800d85e:	e9dd 2100 	ldrd	r2, r1, [sp]
    ctx->rk = RK = ctx->buf;
 800d862:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800d864:	a802      	add	r0, sp, #8
 800d866:	f7ff fefb 	bl	800d660 <mbedtls_aes_setkey_enc>
 800d86a:	4680      	mov	r8, r0
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d137      	bne.n	800d8e0 <mbedtls_aes_setkey_dec+0x98>
        goto exit;

    ctx->nr = cty.nr;
 800d870:	9e02      	ldr	r6, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 800d872:	9b03      	ldr	r3, [sp, #12]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d874:	4938      	ldr	r1, [pc, #224]	; (800d958 <mbedtls_aes_setkey_dec+0x110>)
    ctx->nr = cty.nr;
 800d876:	6026      	str	r6, [r4, #0]
    SK = cty.rk + cty.nr * 4;
 800d878:	0135      	lsls	r5, r6, #4
 800d87a:	eb03 1206 	add.w	r2, r3, r6, lsl #4
    *RK++ = *SK++;
 800d87e:	595b      	ldr	r3, [r3, r5]
 800d880:	60a3      	str	r3, [r4, #8]
    *RK++ = *SK++;
 800d882:	6853      	ldr	r3, [r2, #4]
 800d884:	60e3      	str	r3, [r4, #12]
    *RK++ = *SK++;
 800d886:	6893      	ldr	r3, [r2, #8]
 800d888:	6123      	str	r3, [r4, #16]
    *RK++ = *SK++;
 800d88a:	f104 0318 	add.w	r3, r4, #24
 800d88e:	9300      	str	r3, [sp, #0]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d890:	f106 3aff 	add.w	sl, r6, #4294967295
    *RK++ = *SK++;
 800d894:	68d3      	ldr	r3, [r2, #12]
 800d896:	6163      	str	r3, [r4, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d898:	3a10      	subs	r2, #16
 800d89a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800d89e:	4696      	mov	lr, r2
 800d8a0:	4650      	mov	r0, sl
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	f1a3 0c10 	sub.w	ip, r3, #16
 800d8a8:	dc21      	bgt.n	800d8ee <mbedtls_aes_setkey_dec+0xa6>
 800d8aa:	9b00      	ldr	r3, [sp, #0]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 800d8ac:	9800      	ldr	r0, [sp, #0]
 800d8ae:	2e00      	cmp	r6, #0
 800d8b0:	f1a5 0510 	sub.w	r5, r5, #16
 800d8b4:	bfd8      	it	le
 800d8b6:	2500      	movle	r5, #0
 800d8b8:	eb03 0105 	add.w	r1, r3, r5
 800d8bc:	f06f 030f 	mvn.w	r3, #15
 800d8c0:	fb03 fa0a 	mul.w	sl, r3, sl
 800d8c4:	bfd8      	it	le
 800d8c6:	f04f 0a00 	movle.w	sl, #0
 800d8ca:	eb02 030a 	add.w	r3, r2, sl
 800d8ce:	f852 200a 	ldr.w	r2, [r2, sl]
 800d8d2:	5142      	str	r2, [r0, r5]
    *RK++ = *SK++;
 800d8d4:	685a      	ldr	r2, [r3, #4]
 800d8d6:	604a      	str	r2, [r1, #4]
    *RK++ = *SK++;
 800d8d8:	689a      	ldr	r2, [r3, #8]
 800d8da:	608a      	str	r2, [r1, #8]
    *RK++ = *SK++;
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	60cb      	str	r3, [r1, #12]

exit:
    mbedtls_aes_free( &cty );
 800d8e0:	a802      	add	r0, sp, #8
 800d8e2:	f7ff feb2 	bl	800d64a <mbedtls_aes_free>

    return( ret );
}
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	b049      	add	sp, #292	; 0x124
 800d8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ee:	f1ae 0b04 	sub.w	fp, lr, #4
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d8f2:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 800d8f6:	fa51 f784 	uxtab	r7, r1, r4
 800d8fa:	f897 9028 	ldrb.w	r9, [r7, #40]	; 0x28
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d8fe:	eb01 6714 	add.w	r7, r1, r4, lsr #24
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d902:	eb01 0989 	add.w	r9, r1, r9, lsl #2
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d906:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d90a:	f8d9 9128 	ldr.w	r9, [r9, #296]	; 0x128
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d90e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d912:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800d916:	ea89 0907 	eor.w	r9, r9, r7
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d91a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 800d91e:	440f      	add	r7, r1
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d920:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800d924:	440c      	add	r4, r1
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d926:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d92a:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d92e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d932:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d936:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800d93a:	f8d4 4d28 	ldr.w	r4, [r4, #3368]	; 0xd28
 800d93e:	ea89 0707 	eor.w	r7, r9, r7
 800d942:	4067      	eors	r7, r4
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d944:	f84c 7b04 	str.w	r7, [ip], #4
        for( j = 0; j < 4; j++, SK++ )
 800d948:	459c      	cmp	ip, r3
 800d94a:	d1d2      	bne.n	800d8f2 <mbedtls_aes_setkey_dec+0xaa>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d94c:	3801      	subs	r0, #1
 800d94e:	f1ae 0e10 	sub.w	lr, lr, #16
 800d952:	3310      	adds	r3, #16
 800d954:	e7a5      	b.n	800d8a2 <mbedtls_aes_setkey_dec+0x5a>
 800d956:	bf00      	nop
 800d958:	08028708 	.word	0x08028708

0800d95c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800d95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800d960:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d962:	680e      	ldr	r6, [r1, #0]
 800d964:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d966:	684d      	ldr	r5, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d968:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d96a:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d96c:	4066      	eors	r6, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d96e:	685c      	ldr	r4, [r3, #4]
 800d970:	4065      	eors	r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d972:	689c      	ldr	r4, [r3, #8]
{
 800d974:	b08d      	sub	sp, #52	; 0x34
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d976:	1040      	asrs	r0, r0, #1
 800d978:	3801      	subs	r0, #1
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d97a:	ea84 0b07 	eor.w	fp, r4, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d97e:	68cf      	ldr	r7, [r1, #12]
 800d980:	68d9      	ldr	r1, [r3, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d982:	9000      	str	r0, [sp, #0]
 800d984:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d988:	4bc2      	ldr	r3, [pc, #776]	; (800dc94 <mbedtls_internal_aes_encrypt+0x338>)
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d98a:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d98c:	f850 7c10 	ldr.w	r7, [r0, #-16]
 800d990:	9701      	str	r7, [sp, #4]
 800d992:	b2f7      	uxtb	r7, r6
 800d994:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d998:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800d99c:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d99e:	ea87 0e04 	eor.w	lr, r7, r4
 800d9a2:	0e0f      	lsrs	r7, r1, #24
 800d9a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9a8:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 800d9ac:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d9b0:	ea8e 0e07 	eor.w	lr, lr, r7
 800d9b4:	f3c5 2707 	ubfx	r7, r5, #8, #8
 800d9b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9bc:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800d9c0:	f8d7 7830 	ldr.w	r7, [r7, #2096]	; 0x830
 800d9c4:	ea8e 0e07 	eor.w	lr, lr, r7
 800d9c8:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800d9cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9d0:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d9d4:	f8d7 7c30 	ldr.w	r7, [r7, #3120]	; 0xc30
 800d9d8:	f8da a430 	ldr.w	sl, [sl, #1072]	; 0x430
 800d9dc:	ea8e 0e07 	eor.w	lr, lr, r7
 800d9e0:	b2ef      	uxtb	r7, r5
 800d9e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9e6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 800d9ea:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d9ec:	ea87 0c04 	eor.w	ip, r7, r4
 800d9f0:	0e37      	lsrs	r7, r6, #24
 800d9f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9f6:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800d9fa:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d9fe:	ea8c 0c07 	eor.w	ip, ip, r7
 800da02:	f3cb 2707 	ubfx	r7, fp, #8, #8
 800da06:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da0a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800da0e:	f8d7 7830 	ldr.w	r7, [r7, #2096]	; 0x830
 800da12:	ea8c 0c07 	eor.w	ip, ip, r7
 800da16:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800da1a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da1e:	fa5f f88e 	uxtb.w	r8, lr
 800da22:	f8d7 7c30 	ldr.w	r7, [r7, #3120]	; 0xc30
 800da26:	ea8c 0c07 	eor.w	ip, ip, r7
 800da2a:	fa5f f78b 	uxtb.w	r7, fp
 800da2e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da32:	f3cc 2907 	ubfx	r9, ip, #8, #8
 800da36:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800da38:	4067      	eors	r7, r4
 800da3a:	ea87 070a 	eor.w	r7, r7, sl
 800da3e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800da42:	b2c9      	uxtb	r1, r1
 800da44:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800da48:	f850 4c14 	ldr.w	r4, [r0, #-20]
 800da4c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800da4e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800da52:	4061      	eors	r1, r4
 800da54:	f8da a830 	ldr.w	sl, [sl, #2096]	; 0x830
 800da58:	ea4f 641b 	mov.w	r4, fp, lsr #24
 800da5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da60:	ea87 070a 	eor.w	r7, r7, sl
 800da64:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 800da68:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800da6c:	f8d4 4430 	ldr.w	r4, [r4, #1072]	; 0x430
 800da70:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800da74:	4061      	eors	r1, r4
 800da76:	f8d6 4830 	ldr.w	r4, [r6, #2096]	; 0x830
 800da7a:	4061      	eors	r1, r4
 800da7c:	f8d5 4c30 	ldr.w	r4, [r5, #3120]	; 0xc30
 800da80:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800da84:	4061      	eors	r1, r4
 800da86:	f8da ac30 	ldr.w	sl, [sl, #3120]	; 0xc30
 800da8a:	f850 4c0c 	ldr.w	r4, [r0, #-12]
 800da8e:	9402      	str	r4, [sp, #8]
 800da90:	f3c1 4607 	ubfx	r6, r1, #16, #8
 800da94:	9603      	str	r6, [sp, #12]
 800da96:	ea4f 661e 	mov.w	r6, lr, lsr #24
 800da9a:	ea87 070a 	eor.w	r7, r7, sl
 800da9e:	9604      	str	r6, [sp, #16]
 800daa0:	f850 6c08 	ldr.w	r6, [r0, #-8]
 800daa4:	9605      	str	r6, [sp, #20]
 800daa6:	b2fe      	uxtb	r6, r7
 800daa8:	9606      	str	r6, [sp, #24]
 800daaa:	f3c1 2607 	ubfx	r6, r1, #8, #8
 800daae:	9607      	str	r6, [sp, #28]
 800dab0:	f3ce 4607 	ubfx	r6, lr, #16, #8
 800dab4:	9608      	str	r6, [sp, #32]
 800dab6:	0e0d      	lsrs	r5, r1, #24
 800dab8:	ea4f 661c 	mov.w	r6, ip, lsr #24
 800dabc:	b2c9      	uxtb	r1, r1
 800dabe:	9609      	str	r6, [sp, #36]	; 0x24
 800dac0:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800dac4:	910b      	str	r1, [sp, #44]	; 0x2c
 800dac6:	9900      	ldr	r1, [sp, #0]
 800dac8:	960a      	str	r6, [sp, #40]	; 0x28
 800daca:	2900      	cmp	r1, #0
 800dacc:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800dad0:	fa5f f48c 	uxtb.w	r4, ip
 800dad4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 800dad8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 800dadc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800dae0:	ea4f 6717 	mov.w	r7, r7, lsr #24
 800dae4:	f100 0020 	add.w	r0, r0, #32
 800dae8:	dc77      	bgt.n	800dbda <mbedtls_internal_aes_encrypt+0x27e>

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800daea:	4b6b      	ldr	r3, [pc, #428]	; (800dc98 <mbedtls_internal_aes_encrypt+0x33c>)
    X0 = *RK++ ^ \
 800daec:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800daee:	4498      	add	r8, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800daf0:	4499      	add	r9, r3
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800daf2:	f898 6028 	ldrb.w	r6, [r8, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800daf6:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800dafa:	449a      	add	sl, r3
    X0 = *RK++ ^ \
 800dafc:	4046      	eors	r6, r0
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800dafe:	441d      	add	r5, r3
    X0 = *RK++ ^ \
 800db00:	ea86 2601 	eor.w	r6, r6, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800db04:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28

    X1 = *RK++ ^ \
 800db08:	9802      	ldr	r0, [sp, #8]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800db0a:	441c      	add	r4, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800db0c:	449b      	add	fp, r3
    X0 = *RK++ ^ \
 800db0e:	ea86 4601 	eor.w	r6, r6, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800db12:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800db16:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 800db1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    X0 = *RK++ ^ \
 800db1c:	ea86 6601 	eor.w	r6, r6, r1, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800db20:	f89b 1028 	ldrb.w	r1, [fp, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800db24:	7016      	strb	r6, [r2, #0]
    X1 = *RK++ ^ \
 800db26:	4045      	eors	r5, r0
 800db28:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800db2c:	9903      	ldr	r1, [sp, #12]
 800db2e:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800db30:	449e      	add	lr, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800db32:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800db36:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800db3a:	9904      	ldr	r1, [sp, #16]
 800db3c:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800db3e:	449c      	add	ip, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800db40:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800db44:	ea85 6501 	eor.w	r5, r5, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800db48:	9907      	ldr	r1, [sp, #28]
    PUT_UINT32_LE( X1, output,  4 );
 800db4a:	7115      	strb	r5, [r2, #4]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800db4c:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800db4e:	441f      	add	r7, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800db50:	f891 8028 	ldrb.w	r8, [r1, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800db54:	9906      	ldr	r1, [sp, #24]
 800db56:	4419      	add	r1, r3
 800db58:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800db5c:	9905      	ldr	r1, [sp, #20]
 800db5e:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800db60:	9908      	ldr	r1, [sp, #32]
 800db62:	4419      	add	r1, r3
    X2 = *RK++ ^ \
 800db64:	ea80 2008 	eor.w	r0, r0, r8, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800db68:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800db6c:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800db70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db72:	4419      	add	r1, r3
 800db74:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800db78:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800db7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db7e:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800db80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800db84:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X3 = *RK++ ^ \
 800db88:	4061      	eors	r1, r4
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800db8a:	f89e 4028 	ldrb.w	r4, [lr, #40]	; 0x28
    X3 = *RK++ ^ \
 800db8e:	ea81 2104 	eor.w	r1, r1, r4, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800db92:	f89c 4028 	ldrb.w	r4, [ip, #40]	; 0x28
    X3 = *RK++ ^ \
 800db96:	ea81 4104 	eor.w	r1, r1, r4, lsl #16
 800db9a:	ea81 6303 	eor.w	r3, r1, r3, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
 800db9e:	0a31      	lsrs	r1, r6, #8
 800dba0:	7051      	strb	r1, [r2, #1]
 800dba2:	0c31      	lsrs	r1, r6, #16
 800dba4:	7091      	strb	r1, [r2, #2]
 800dba6:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 800dba8:	0a29      	lsrs	r1, r5, #8
    PUT_UINT32_LE( X0, output,  0 );
 800dbaa:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800dbac:	7151      	strb	r1, [r2, #5]
 800dbae:	0c29      	lsrs	r1, r5, #16
 800dbb0:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 800dbb2:	0a01      	lsrs	r1, r0, #8
 800dbb4:	7251      	strb	r1, [r2, #9]
 800dbb6:	0c01      	lsrs	r1, r0, #16
 800dbb8:	7210      	strb	r0, [r2, #8]
 800dbba:	7291      	strb	r1, [r2, #10]
 800dbbc:	0e00      	lsrs	r0, r0, #24
    PUT_UINT32_LE( X3, output, 12 );
 800dbbe:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 800dbc0:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
 800dbc2:	72d0      	strb	r0, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800dbc4:	7313      	strb	r3, [r2, #12]
 800dbc6:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800dbc8:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800dbca:	0c19      	lsrs	r1, r3, #16
 800dbcc:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 800dbce:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X3, output, 12 );
 800dbd0:	7391      	strb	r1, [r2, #14]
 800dbd2:	73d3      	strb	r3, [r2, #15]
}
 800dbd4:	b00d      	add	sp, #52	; 0x34
 800dbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800dbda:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800dbde:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800dbe2:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
 800dbe6:	f8d5 1430 	ldr.w	r1, [r5, #1072]	; 0x430
 800dbea:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800dbee:	404e      	eors	r6, r1
 800dbf0:	9901      	ldr	r1, [sp, #4]
 800dbf2:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800dbf6:	404e      	eors	r6, r1
 800dbf8:	f8d9 1830 	ldr.w	r1, [r9, #2096]	; 0x830
 800dbfc:	404e      	eors	r6, r1
 800dbfe:	f8da 1c30 	ldr.w	r1, [sl, #3120]	; 0xc30
 800dc02:	404e      	eors	r6, r1
 800dc04:	9904      	ldr	r1, [sp, #16]
 800dc06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc0a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dc0e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800dc10:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
 800dc14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dc16:	404d      	eors	r5, r1
 800dc18:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800dc1c:	9902      	ldr	r1, [sp, #8]
 800dc1e:	404d      	eors	r5, r1
 800dc20:	f8db 1830 	ldr.w	r1, [fp, #2096]	; 0x830
 800dc24:	404d      	eors	r5, r1
 800dc26:	9903      	ldr	r1, [sp, #12]
 800dc28:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dc2c:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 800dc30:	f8d1 1c30 	ldr.w	r1, [r1, #3120]	; 0xc30
 800dc34:	404d      	eors	r5, r1
 800dc36:	9906      	ldr	r1, [sp, #24]
 800dc38:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dc3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc40:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800dc42:	f8d8 1430 	ldr.w	r1, [r8, #1072]	; 0x430
 800dc46:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800dc4a:	404c      	eors	r4, r1
 800dc4c:	9905      	ldr	r1, [sp, #20]
 800dc4e:	404c      	eors	r4, r1
 800dc50:	9907      	ldr	r1, [sp, #28]
 800dc52:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dc56:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800dc5a:	f8d1 1830 	ldr.w	r1, [r1, #2096]	; 0x830
 800dc5e:	404c      	eors	r4, r1
 800dc60:	9908      	ldr	r1, [sp, #32]
 800dc62:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dc66:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800dc6a:	f8d1 1c30 	ldr.w	r1, [r1, #3120]	; 0xc30
 800dc6e:	ea84 0b01 	eor.w	fp, r4, r1
 800dc72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc74:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dc78:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800dc7a:	4079      	eors	r1, r7
 800dc7c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dc7e:	4079      	eors	r1, r7
 800dc80:	f8de 7830 	ldr.w	r7, [lr, #2096]	; 0x830
 800dc84:	4079      	eors	r1, r7
 800dc86:	f8dc 7c30 	ldr.w	r7, [ip, #3120]	; 0xc30
 800dc8a:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dc8c:	9f00      	ldr	r7, [sp, #0]
 800dc8e:	3f01      	subs	r7, #1
 800dc90:	9700      	str	r7, [sp, #0]
 800dc92:	e67b      	b.n	800d98c <mbedtls_internal_aes_encrypt+0x30>
 800dc94:	08029800 	.word	0x08029800
 800dc98:	08028708 	.word	0x08028708

0800dc9c <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800dc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800dca0:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800dca2:	680d      	ldr	r5, [r1, #0]
 800dca4:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800dca6:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dca8:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800dcaa:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800dcac:	4065      	eors	r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800dcae:	685c      	ldr	r4, [r3, #4]
 800dcb0:	4066      	eors	r6, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800dcb2:	689c      	ldr	r4, [r3, #8]
{
 800dcb4:	b08d      	sub	sp, #52	; 0x34
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dcb6:	1040      	asrs	r0, r0, #1
 800dcb8:	3801      	subs	r0, #1
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800dcba:	ea84 0b07 	eor.w	fp, r4, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800dcbe:	68cf      	ldr	r7, [r1, #12]
 800dcc0:	68d9      	ldr	r1, [r3, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dcc2:	9000      	str	r0, [sp, #0]
 800dcc4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800dcc8:	4bc7      	ldr	r3, [pc, #796]	; (800dfe8 <mbedtls_internal_aes_decrypt+0x34c>)
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800dcca:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dccc:	b2ef      	uxtb	r7, r5
 800dcce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcd2:	f850 4c10 	ldr.w	r4, [r0, #-16]
 800dcd6:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800dcda:	9401      	str	r4, [sp, #4]
 800dcdc:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800dce0:	ea87 0c04 	eor.w	ip, r7, r4
 800dce4:	0e37      	lsrs	r7, r6, #24
 800dce6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcea:	f850 4c14 	ldr.w	r4, [r0, #-20]
 800dcee:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800dcf2:	ea8c 0c07 	eor.w	ip, ip, r7
 800dcf6:	f3c1 2707 	ubfx	r7, r1, #8, #8
 800dcfa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcfe:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 800dd02:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800dd06:	ea8c 0c07 	eor.w	ip, ip, r7
 800dd0a:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800dd0e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd12:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800dd16:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800dd1a:	f8da a528 	ldr.w	sl, [sl, #1320]	; 0x528
 800dd1e:	ea8c 0c07 	eor.w	ip, ip, r7
 800dd22:	b2cf      	uxtb	r7, r1
 800dd24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd28:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800dd2c:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800dd30:	ea87 0e04 	eor.w	lr, r7, r4
 800dd34:	0e2f      	lsrs	r7, r5, #24
 800dd36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd3a:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800dd3e:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800dd42:	ea8e 0e07 	eor.w	lr, lr, r7
 800dd46:	f3cb 2707 	ubfx	r7, fp, #8, #8
 800dd4a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd4e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dd52:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800dd56:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800dd5a:	ea8e 0e07 	eor.w	lr, lr, r7
 800dd5e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800dd62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd66:	fa5f f88c 	uxtb.w	r8, ip
 800dd6a:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800dd6e:	ea8e 0e07 	eor.w	lr, lr, r7
 800dd72:	fa5f f78b 	uxtb.w	r7, fp
 800dd76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd7a:	f3ce 2907 	ubfx	r9, lr, #8, #8
 800dd7e:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800dd82:	4067      	eors	r7, r4
 800dd84:	ea87 070a 	eor.w	r7, r7, sl
 800dd88:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 800dd8c:	b2f6      	uxtb	r6, r6
 800dd8e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800dd92:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800dd96:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 800dd9a:	f8da a928 	ldr.w	sl, [sl, #2344]	; 0x928
 800dd9e:	f8d6 6128 	ldr.w	r6, [r6, #296]	; 0x128
 800dda2:	ea87 070a 	eor.w	r7, r7, sl
 800dda6:	4066      	eors	r6, r4
 800dda8:	f3c5 4a07 	ubfx	sl, r5, #16, #8
 800ddac:	ea4f 641b 	mov.w	r4, fp, lsr #24
 800ddb0:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800ddb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ddb8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800ddbc:	f8da ad28 	ldr.w	sl, [sl, #3368]	; 0xd28
 800ddc0:	f8d4 4528 	ldr.w	r4, [r4, #1320]	; 0x528
 800ddc4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800ddc8:	ea87 070a 	eor.w	r7, r7, sl
 800ddcc:	4066      	eors	r6, r4
 800ddce:	f8d5 4928 	ldr.w	r4, [r5, #2344]	; 0x928
 800ddd2:	f3ce 4507 	ubfx	r5, lr, #16, #8
 800ddd6:	9503      	str	r5, [sp, #12]
 800ddd8:	0e3d      	lsrs	r5, r7, #24
 800ddda:	4066      	eors	r6, r4
 800dddc:	9504      	str	r5, [sp, #16]
 800ddde:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800dde2:	9505      	str	r5, [sp, #20]
 800dde4:	404e      	eors	r6, r1
 800dde6:	b2fd      	uxtb	r5, r7
 800dde8:	9506      	str	r5, [sp, #24]
 800ddea:	f3c6 2507 	ubfx	r5, r6, #8, #8
 800ddee:	9507      	str	r5, [sp, #28]
 800ddf0:	f3cc 4507 	ubfx	r5, ip, #16, #8
 800ddf4:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 800ddf8:	9508      	str	r5, [sp, #32]
 800ddfa:	ea4f 651e 	mov.w	r5, lr, lsr #24
 800ddfe:	9102      	str	r1, [sp, #8]
 800de00:	9509      	str	r5, [sp, #36]	; 0x24
 800de02:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800de06:	950a      	str	r5, [sp, #40]	; 0x28
 800de08:	fa5f f58e 	uxtb.w	r5, lr
 800de0c:	950b      	str	r5, [sp, #44]	; 0x2c
 800de0e:	9d00      	ldr	r5, [sp, #0]
 800de10:	2d00      	cmp	r5, #0
 800de12:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800de16:	f3cc 2407 	ubfx	r4, ip, #8, #8
 800de1a:	f3c7 2e07 	ubfx	lr, r7, #8, #8
 800de1e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 800de22:	b2f1      	uxtb	r1, r6
 800de24:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800de28:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800de2c:	f100 0020 	add.w	r0, r0, #32
 800de30:	dc77      	bgt.n	800df22 <mbedtls_internal_aes_decrypt+0x286>

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800de32:	4b6e      	ldr	r3, [pc, #440]	; (800dfec <mbedtls_internal_aes_decrypt+0x350>)
    X0 = *RK++ ^ \
 800de34:	9e01      	ldr	r6, [sp, #4]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800de36:	4498      	add	r8, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800de38:	4499      	add	r9, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800de3a:	f818 5cc8 	ldrb.w	r5, [r8, #-200]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800de3e:	f819 0cc8 	ldrb.w	r0, [r9, #-200]
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800de42:	449a      	add	sl, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800de44:	4419      	add	r1, r3
    X0 = *RK++ ^ \
 800de46:	4075      	eors	r5, r6
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800de48:	449b      	add	fp, r3
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800de4a:	f811 6cc8 	ldrb.w	r6, [r1, #-200]
    X1 = *RK++ ^ \
 800de4e:	9902      	ldr	r1, [sp, #8]
    X0 = *RK++ ^ \
 800de50:	ea85 2500 	eor.w	r5, r5, r0, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800de54:	f81a 0cc8 	ldrb.w	r0, [sl, #-200]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800de58:	441c      	add	r4, r3
    X0 = *RK++ ^ \
 800de5a:	ea85 4500 	eor.w	r5, r5, r0, lsl #16
    X1 = *RK++ ^ \
 800de5e:	404e      	eors	r6, r1
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800de60:	f81b 0cc8 	ldrb.w	r0, [fp, #-200]
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800de64:	9903      	ldr	r1, [sp, #12]
    X0 = *RK++ ^ \
 800de66:	ea85 6500 	eor.w	r5, r5, r0, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800de6a:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800de6c:	f814 0cc8 	ldrb.w	r0, [r4, #-200]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800de70:	7015      	strb	r5, [r2, #0]
    X1 = *RK++ ^ \
 800de72:	ea86 2600 	eor.w	r6, r6, r0, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800de76:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800de7a:	9904      	ldr	r1, [sp, #16]
 800de7c:	4419      	add	r1, r3
    X1 = *RK++ ^ \
 800de7e:	ea86 4600 	eor.w	r6, r6, r0, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800de82:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800de86:	9907      	ldr	r1, [sp, #28]
 800de88:	4419      	add	r1, r3
    X1 = *RK++ ^ \
 800de8a:	ea86 6600 	eor.w	r6, r6, r0, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800de8e:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800de92:	9906      	ldr	r1, [sp, #24]
    PUT_UINT32_LE( X1, output,  4 );
 800de94:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800de96:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800de98:	449e      	add	lr, r3
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800de9a:	f811 4cc8 	ldrb.w	r4, [r1, #-200]
    X2 = *RK++ ^ \
 800de9e:	9905      	ldr	r1, [sp, #20]
 800dea0:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800dea2:	9908      	ldr	r1, [sp, #32]
 800dea4:	4419      	add	r1, r3
    X2 = *RK++ ^ \
 800dea6:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800deaa:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
    X3 = *RK++ ^ \
 800deae:	980a      	ldr	r0, [sp, #40]	; 0x28
    X2 = *RK++ ^ \
 800deb0:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800deb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800deb6:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800deb8:	441f      	add	r7, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800deba:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
    X2 = *RK++ ^ \
 800debe:	ea84 6401 	eor.w	r4, r4, r1, lsl #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800dec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dec4:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800dec6:	449c      	add	ip, r3
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800dec8:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800decc:	f81c 3cc8 	ldrb.w	r3, [ip, #-200]
    X3 = *RK++ ^ \
 800ded0:	4041      	eors	r1, r0
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800ded2:	f81e 0cc8 	ldrb.w	r0, [lr, #-200]
    X3 = *RK++ ^ \
 800ded6:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800deda:	f817 0cc8 	ldrb.w	r0, [r7, #-200]
    X3 = *RK++ ^ \
 800dede:	ea81 4100 	eor.w	r1, r1, r0, lsl #16
 800dee2:	ea81 6303 	eor.w	r3, r1, r3, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
 800dee6:	0a29      	lsrs	r1, r5, #8
 800dee8:	7051      	strb	r1, [r2, #1]
 800deea:	0c29      	lsrs	r1, r5, #16
 800deec:	7091      	strb	r1, [r2, #2]
 800deee:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X1, output,  4 );
 800def0:	0a31      	lsrs	r1, r6, #8
    PUT_UINT32_LE( X0, output,  0 );
 800def2:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800def4:	7151      	strb	r1, [r2, #5]
 800def6:	0c31      	lsrs	r1, r6, #16
 800def8:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 800defa:	0a21      	lsrs	r1, r4, #8
 800defc:	7251      	strb	r1, [r2, #9]
 800defe:	0c21      	lsrs	r1, r4, #16
 800df00:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 800df02:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 800df04:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 800df06:	7214      	strb	r4, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800df08:	7313      	strb	r3, [r2, #12]
    PUT_UINT32_LE( X2, output,  8 );
 800df0a:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
 800df0c:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800df0e:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800df10:	0c19      	lsrs	r1, r3, #16
 800df12:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 800df14:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 800df16:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800df18:	7391      	strb	r1, [r2, #14]
 800df1a:	73d3      	strb	r3, [r2, #15]
}
 800df1c:	b00d      	add	sp, #52	; 0x34
 800df1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800df22:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800df26:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800df2a:	f8d8 5128 	ldr.w	r5, [r8, #296]	; 0x128
 800df2e:	f8db 6528 	ldr.w	r6, [fp, #1320]	; 0x528
 800df32:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800df36:	4075      	eors	r5, r6
 800df38:	9e01      	ldr	r6, [sp, #4]
 800df3a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800df3e:	4075      	eors	r5, r6
 800df40:	f8d9 6928 	ldr.w	r6, [r9, #2344]	; 0x928
 800df44:	4075      	eors	r5, r6
 800df46:	f8da 6d28 	ldr.w	r6, [sl, #3368]	; 0xd28
 800df4a:	4075      	eors	r5, r6
 800df4c:	9e04      	ldr	r6, [sp, #16]
 800df4e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800df52:	eb03 0886 	add.w	r8, r3, r6, lsl #2
 800df56:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
 800df5a:	f8d8 1528 	ldr.w	r1, [r8, #1320]	; 0x528
 800df5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800df62:	404e      	eors	r6, r1
 800df64:	9902      	ldr	r1, [sp, #8]
 800df66:	404e      	eors	r6, r1
 800df68:	f8d4 1928 	ldr.w	r1, [r4, #2344]	; 0x928
 800df6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800df6e:	404e      	eors	r6, r1
 800df70:	9903      	ldr	r1, [sp, #12]
 800df72:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800df76:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 800df7a:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800df7e:	404e      	eors	r6, r1
 800df80:	9906      	ldr	r1, [sp, #24]
 800df82:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800df86:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800df8a:	f8d1 4128 	ldr.w	r4, [r1, #296]	; 0x128
 800df8e:	f8d8 1528 	ldr.w	r1, [r8, #1320]	; 0x528
 800df92:	f8dc c528 	ldr.w	ip, [ip, #1320]	; 0x528
 800df96:	404c      	eors	r4, r1
 800df98:	9905      	ldr	r1, [sp, #20]
 800df9a:	404c      	eors	r4, r1
 800df9c:	9907      	ldr	r1, [sp, #28]
 800df9e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dfa2:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800dfa6:	f8d1 1928 	ldr.w	r1, [r1, #2344]	; 0x928
 800dfaa:	404c      	eors	r4, r1
 800dfac:	9908      	ldr	r1, [sp, #32]
 800dfae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dfb2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dfb6:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800dfba:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800dfbe:	ea84 0b01 	eor.w	fp, r4, r1
 800dfc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dfc6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dfca:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 800dfce:	ea81 010c 	eor.w	r1, r1, ip
 800dfd2:	4061      	eors	r1, r4
 800dfd4:	f8de c928 	ldr.w	ip, [lr, #2344]	; 0x928
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dfd8:	9c00      	ldr	r4, [sp, #0]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800dfda:	ea81 010c 	eor.w	r1, r1, ip
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dfde:	3c01      	subs	r4, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800dfe0:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dfe2:	9400      	str	r4, [sp, #0]
 800dfe4:	e672      	b.n	800dccc <mbedtls_internal_aes_decrypt+0x30>
 800dfe6:	bf00      	nop
 800dfe8:	08028708 	.word	0x08028708
 800dfec:	0802a8f8 	.word	0x0802a8f8

0800dff0 <mbedtls_aes_crypt_cbc.part.0>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
/*
 * AES-CBC buffer encryption/decryption
 */
int mbedtls_aes_crypt_cbc( mbedtls_aes_context *ctx,
 800dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff4:	b085      	sub	sp, #20
 800dff6:	4681      	mov	r9, r0
 800dff8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dffa:	4617      	mov	r7, r2
 800dffc:	350f      	adds	r5, #15
 800dffe:	461c      	mov	r4, r3
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 800e000:	eb03 0801 	add.w	r8, r3, r1
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 800e004:	f10d 0a10 	add.w	sl, sp, #16
        while( length > 0 )
 800e008:	4544      	cmp	r4, r8
 800e00a:	f1a5 020f 	sub.w	r2, r5, #15
 800e00e:	d103      	bne.n	800e018 <mbedtls_aes_crypt_cbc.part.0+0x28>
            length -= 16;
        }
    }

    return( 0 );
}
 800e010:	2000      	movs	r0, #0
 800e012:	b005      	add	sp, #20
 800e014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            memcpy( temp, input, 16 );
 800e018:	46ec      	mov	ip, sp
 800e01a:	4623      	mov	r3, r4
 800e01c:	f104 0b10 	add.w	fp, r4, #16
 800e020:	4666      	mov	r6, ip
 800e022:	6818      	ldr	r0, [r3, #0]
 800e024:	6859      	ldr	r1, [r3, #4]
 800e026:	46e6      	mov	lr, ip
 800e028:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e02c:	3308      	adds	r3, #8
 800e02e:	455b      	cmp	r3, fp
 800e030:	46f4      	mov	ip, lr
 800e032:	d1f6      	bne.n	800e022 <mbedtls_aes_crypt_cbc.part.0+0x32>
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800e034:	4621      	mov	r1, r4
 800e036:	4648      	mov	r0, r9
 800e038:	f7ff fe30 	bl	800dc9c <mbedtls_internal_aes_decrypt>
            for( i = 0; i < 16; i++ )
 800e03c:	f1a5 0310 	sub.w	r3, r5, #16
 800e040:	1e79      	subs	r1, r7, #1
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800e042:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e046:	f811 0f01 	ldrb.w	r0, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800e04a:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800e04c:	ea82 0200 	eor.w	r2, r2, r0
 800e050:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800e052:	d1f6      	bne.n	800e042 <mbedtls_aes_crypt_cbc.part.0+0x52>
            memcpy( iv, temp, 16 );
 800e054:	463a      	mov	r2, r7
 800e056:	4633      	mov	r3, r6
 800e058:	cb03      	ldmia	r3!, {r0, r1}
 800e05a:	4553      	cmp	r3, sl
 800e05c:	6010      	str	r0, [r2, #0]
 800e05e:	6051      	str	r1, [r2, #4]
 800e060:	461e      	mov	r6, r3
 800e062:	f102 0208 	add.w	r2, r2, #8
 800e066:	d1f6      	bne.n	800e056 <mbedtls_aes_crypt_cbc.part.0+0x66>
            input  += 16;
 800e068:	3410      	adds	r4, #16
            length -= 16;
 800e06a:	3510      	adds	r5, #16
 800e06c:	e7cc      	b.n	800e008 <mbedtls_aes_crypt_cbc.part.0+0x18>

0800e06e <mbedtls_aes_crypt_ecb>:
{
 800e06e:	b410      	push	{r4}
 800e070:	460c      	mov	r4, r1
    if( mode == MBEDTLS_AES_ENCRYPT )
 800e072:	2c01      	cmp	r4, #1
{
 800e074:	4611      	mov	r1, r2
 800e076:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 800e078:	d103      	bne.n	800e082 <mbedtls_aes_crypt_ecb+0x14>
}
 800e07a:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800e07e:	f7ff bc6d 	b.w	800d95c <mbedtls_internal_aes_encrypt>
}
 800e082:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800e086:	f7ff be09 	b.w	800dc9c <mbedtls_internal_aes_decrypt>

0800e08a <mbedtls_aes_crypt_cbc>:
{
 800e08a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e08e:	4689      	mov	r9, r1
 800e090:	4611      	mov	r1, r2
    if( length % 16 )
 800e092:	070a      	lsls	r2, r1, #28
{
 800e094:	461e      	mov	r6, r3
 800e096:	4680      	mov	r8, r0
 800e098:	e9dd 3708 	ldrd	r3, r7, [sp, #32]
    if( length % 16 )
 800e09c:	d12d      	bne.n	800e0fa <mbedtls_aes_crypt_cbc+0x70>
    if( mode == MBEDTLS_AES_DECRYPT )
 800e09e:	f1b9 0f00 	cmp.w	r9, #0
 800e0a2:	d125      	bne.n	800e0f0 <mbedtls_aes_crypt_cbc+0x66>
 800e0a4:	9708      	str	r7, [sp, #32]
 800e0a6:	4632      	mov	r2, r6
}
 800e0a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ac:	f7ff bfa0 	b.w	800dff0 <mbedtls_aes_crypt_cbc.part.0>
            for( i = 0; i < 16; i++ )
 800e0b0:	2200      	movs	r2, #0
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800e0b2:	5c8b      	ldrb	r3, [r1, r2]
 800e0b4:	5cb0      	ldrb	r0, [r6, r2]
 800e0b6:	4043      	eors	r3, r0
 800e0b8:	54ab      	strb	r3, [r5, r2]
            for( i = 0; i < 16; i++ )
 800e0ba:	3201      	adds	r2, #1
 800e0bc:	2a10      	cmp	r2, #16
 800e0be:	d1f8      	bne.n	800e0b2 <mbedtls_aes_crypt_cbc+0x28>
            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800e0c0:	462b      	mov	r3, r5
 800e0c2:	462a      	mov	r2, r5
 800e0c4:	4649      	mov	r1, r9
 800e0c6:	4640      	mov	r0, r8
 800e0c8:	f7ff ffd1 	bl	800e06e <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 800e0cc:	4633      	mov	r3, r6
 800e0ce:	f105 0210 	add.w	r2, r5, #16
 800e0d2:	f855 1b04 	ldr.w	r1, [r5], #4
 800e0d6:	f843 1b04 	str.w	r1, [r3], #4
 800e0da:	4295      	cmp	r5, r2
 800e0dc:	d1f9      	bne.n	800e0d2 <mbedtls_aes_crypt_cbc+0x48>
            length -= 16;
 800e0de:	3c10      	subs	r4, #16
 800e0e0:	ebaa 0104 	sub.w	r1, sl, r4
 800e0e4:	1b3d      	subs	r5, r7, r4
        while( length > 0 )
 800e0e6:	2c00      	cmp	r4, #0
 800e0e8:	d1e2      	bne.n	800e0b0 <mbedtls_aes_crypt_cbc+0x26>
    return( 0 );
 800e0ea:	4620      	mov	r0, r4
}
 800e0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	eb03 0a01 	add.w	sl, r3, r1
 800e0f6:	440f      	add	r7, r1
 800e0f8:	e7f2      	b.n	800e0e0 <mbedtls_aes_crypt_cbc+0x56>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800e0fa:	f06f 0021 	mvn.w	r0, #33	; 0x21
 800e0fe:	e7f5      	b.n	800e0ec <mbedtls_aes_crypt_cbc+0x62>

0800e100 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 800e100:	6803      	ldr	r3, [r0, #0]
{
 800e102:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
 800e104:	1acd      	subs	r5, r1, r3
 800e106:	2d00      	cmp	r5, #0
 800e108:	dd0d      	ble.n	800e126 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
 800e10a:	f993 6000 	ldrsb.w	r6, [r3]
 800e10e:	781c      	ldrb	r4, [r3, #0]
 800e110:	2e00      	cmp	r6, #0
 800e112:	db0b      	blt.n	800e12c <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
 800e114:	1c5c      	adds	r4, r3, #1
 800e116:	6004      	str	r4, [r0, #0]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 800e11c:	6803      	ldr	r3, [r0, #0]
 800e11e:	1ac9      	subs	r1, r1, r3
 800e120:	6813      	ldr	r3, [r2, #0]
 800e122:	428b      	cmp	r3, r1
 800e124:	d932      	bls.n	800e18c <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800e126:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
 800e12a:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
 800e12c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800e130:	3c01      	subs	r4, #1
 800e132:	2c03      	cmp	r4, #3
 800e134:	d827      	bhi.n	800e186 <mbedtls_asn1_get_len+0x86>
 800e136:	e8df f004 	tbb	[pc, r4]
 800e13a:	0902      	.short	0x0902
 800e13c:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
 800e13e:	2d01      	cmp	r5, #1
 800e140:	d0f1      	beq.n	800e126 <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
 800e142:	785c      	ldrb	r4, [r3, #1]
 800e144:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 800e146:	3302      	adds	r3, #2
            (*p) += 5;
 800e148:	6003      	str	r3, [r0, #0]
            break;
 800e14a:	e7e7      	b.n	800e11c <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
 800e14c:	2d02      	cmp	r5, #2
 800e14e:	ddea      	ble.n	800e126 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 800e150:	f8b3 4001 	ldrh.w	r4, [r3, #1]
 800e154:	ba64      	rev16	r4, r4
 800e156:	b2a4      	uxth	r4, r4
 800e158:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 800e15a:	3303      	adds	r3, #3
 800e15c:	e7f4      	b.n	800e148 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
 800e15e:	2d03      	cmp	r5, #3
 800e160:	dde1      	ble.n	800e126 <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800e162:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 800e164:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800e166:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 800e168:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800e16c:	78dd      	ldrb	r5, [r3, #3]
 800e16e:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 800e170:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 800e172:	3304      	adds	r3, #4
 800e174:	e7e8      	b.n	800e148 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
 800e176:	2d04      	cmp	r5, #4
 800e178:	ddd5      	ble.n	800e126 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800e17a:	f8d3 4001 	ldr.w	r4, [r3, #1]
 800e17e:	ba24      	rev	r4, r4
 800e180:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 800e182:	3305      	adds	r3, #5
 800e184:	e7e0      	b.n	800e148 <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
 800e186:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800e18a:	e7ce      	b.n	800e12a <mbedtls_asn1_get_len+0x2a>
    return( 0 );
 800e18c:	2000      	movs	r0, #0
 800e18e:	e7cc      	b.n	800e12a <mbedtls_asn1_get_len+0x2a>

0800e190 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 800e190:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 800e192:	6804      	ldr	r4, [r0, #0]
 800e194:	1b0e      	subs	r6, r1, r4
 800e196:	2e00      	cmp	r6, #0
 800e198:	dd07      	ble.n	800e1aa <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 800e19a:	7826      	ldrb	r6, [r4, #0]
 800e19c:	429e      	cmp	r6, r3
 800e19e:	d108      	bne.n	800e1b2 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 800e1a0:	3401      	adds	r4, #1
 800e1a2:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 800e1a4:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 800e1a6:	f7ff bfab 	b.w	800e100 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800e1aa:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 800e1ae:	bc70      	pop	{r4, r5, r6}
 800e1b0:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 800e1b2:	f06f 0061 	mvn.w	r0, #97	; 0x61
 800e1b6:	e7fa      	b.n	800e1ae <mbedtls_asn1_get_tag+0x1e>

0800e1b8 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 800e1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800e1ba:	2301      	movs	r3, #1
{
 800e1bc:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800e1be:	aa01      	add	r2, sp, #4
{
 800e1c0:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800e1c2:	f7ff ffe5 	bl	800e190 <mbedtls_asn1_get_tag>
 800e1c6:	b950      	cbnz	r0, 800e1de <mbedtls_asn1_get_bool+0x26>
        return( ret );

    if( len != 1 )
 800e1c8:	9b01      	ldr	r3, [sp, #4]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d109      	bne.n	800e1e2 <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1d4:	3a00      	subs	r2, #0
 800e1d6:	bf18      	it	ne
 800e1d8:	2201      	movne	r2, #1
 800e1da:	602a      	str	r2, [r5, #0]
    (*p)++;
 800e1dc:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 800e1de:	b003      	add	sp, #12
 800e1e0:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800e1e2:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800e1e6:	e7fa      	b.n	800e1de <mbedtls_asn1_get_bool+0x26>

0800e1e8 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 800e1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e1ea:	2302      	movs	r3, #2
{
 800e1ec:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e1ee:	aa01      	add	r2, sp, #4
{
 800e1f0:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e1f2:	f7ff ffcd 	bl	800e190 <mbedtls_asn1_get_tag>
 800e1f6:	b968      	cbnz	r0, 800e214 <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 800e1f8:	9b01      	ldr	r3, [sp, #4]
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	2b03      	cmp	r3, #3
 800e1fe:	d814      	bhi.n	800e22a <mbedtls_asn1_get_int+0x42>
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	f993 3000 	ldrsb.w	r3, [r3]
 800e206:	2b00      	cmp	r3, #0
 800e208:	db0f      	blt.n	800e22a <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 800e20a:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 800e20c:	9b01      	ldr	r3, [sp, #4]
 800e20e:	1e5a      	subs	r2, r3, #1
 800e210:	9201      	str	r2, [sp, #4]
 800e212:	b90b      	cbnz	r3, 800e218 <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 800e214:	b003      	add	sp, #12
 800e216:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	6829      	ldr	r1, [r5, #0]
 800e21c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e220:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e224:	602a      	str	r2, [r5, #0]
        (*p)++;
 800e226:	6023      	str	r3, [r4, #0]
 800e228:	e7f0      	b.n	800e20c <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800e22a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800e22e:	e7f1      	b.n	800e214 <mbedtls_asn1_get_int+0x2c>

0800e230 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 800e230:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e232:	2302      	movs	r3, #2
{
 800e234:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e236:	aa01      	add	r2, sp, #4
{
 800e238:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e23a:	f7ff ffa9 	bl	800e190 <mbedtls_asn1_get_tag>
 800e23e:	b940      	cbnz	r0, 800e252 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 800e240:	9a01      	ldr	r2, [sp, #4]
 800e242:	6821      	ldr	r1, [r4, #0]
 800e244:	4628      	mov	r0, r5
 800e246:	f000 fd2c 	bl	800eca2 <mbedtls_mpi_read_binary>

    *p += len;
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	9a01      	ldr	r2, [sp, #4]
 800e24e:	4413      	add	r3, r2
 800e250:	6023      	str	r3, [r4, #0]

    return( ret );
}
 800e252:	b003      	add	sp, #12
 800e254:	bd30      	pop	{r4, r5, pc}

0800e256 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 800e256:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800e258:	2303      	movs	r3, #3
{
 800e25a:	4605      	mov	r5, r0
 800e25c:	460e      	mov	r6, r1
 800e25e:	4614      	mov	r4, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800e260:	f7ff ff96 	bl	800e190 <mbedtls_asn1_get_tag>
 800e264:	b988      	cbnz	r0, 800e28a <mbedtls_asn1_get_bitstring+0x34>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 800e266:	6812      	ldr	r2, [r2, #0]
 800e268:	b182      	cbz	r2, 800e28c <mbedtls_asn1_get_bitstring+0x36>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 800e26a:	1e53      	subs	r3, r2, #1
 800e26c:	6023      	str	r3, [r4, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 800e26e:	682b      	ldr	r3, [r5, #0]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	7123      	strb	r3, [r4, #4]
    if( bs->unused_bits > 7 )
 800e274:	2b07      	cmp	r3, #7
 800e276:	d80c      	bhi.n	800e292 <mbedtls_asn1_get_bitstring+0x3c>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	1c59      	adds	r1, r3, #1

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 800e27c:	4413      	add	r3, r2

    if( *p != end )
 800e27e:	42b3      	cmp	r3, r6
    bs->p = *p;
 800e280:	60a1      	str	r1, [r4, #8]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e282:	bf18      	it	ne
 800e284:	f06f 0065 	mvnne.w	r0, #101	; 0x65
    *p += bs->len;
 800e288:	602b      	str	r3, [r5, #0]

    return( 0 );
}
 800e28a:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800e28c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 800e290:	e7fb      	b.n	800e28a <mbedtls_asn1_get_bitstring+0x34>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800e292:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800e296:	e7f8      	b.n	800e28a <mbedtls_asn1_get_bitstring+0x34>

0800e298 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 800e298:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800e29a:	2303      	movs	r3, #3
{
 800e29c:	4604      	mov	r4, r0
 800e29e:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800e2a0:	f7ff ff76 	bl	800e190 <mbedtls_asn1_get_tag>
 800e2a4:	b958      	cbnz	r0, 800e2be <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 800e2a6:	6813      	ldr	r3, [r2, #0]
 800e2a8:	1e5a      	subs	r2, r3, #1
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	602a      	str	r2, [r5, #0]
 800e2ae:	d904      	bls.n	800e2ba <mbedtls_asn1_get_bitstring_null+0x22>
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	1c5a      	adds	r2, r3, #1
 800e2b4:	6022      	str	r2, [r4, #0]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	b10b      	cbz	r3, 800e2be <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800e2ba:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 800e2be:	bd38      	pop	{r3, r4, r5, pc}

0800e2c0 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 800e2c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2c4:	4614      	mov	r4, r2
 800e2c6:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e2c8:	aa01      	add	r2, sp, #4
 800e2ca:	2330      	movs	r3, #48	; 0x30
{
 800e2cc:	4606      	mov	r6, r0
 800e2ce:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e2d0:	f7ff ff5e 	bl	800e190 <mbedtls_asn1_get_tag>
 800e2d4:	4605      	mov	r5, r0
 800e2d6:	b980      	cbnz	r0, 800e2fa <mbedtls_asn1_get_sequence_of+0x3a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 800e2d8:	6833      	ldr	r3, [r6, #0]
 800e2da:	9a01      	ldr	r2, [sp, #4]
 800e2dc:	4413      	add	r3, r2
 800e2de:	429f      	cmp	r7, r3
 800e2e0:	d109      	bne.n	800e2f6 <mbedtls_asn1_get_sequence_of+0x36>
        *p += buf->len;

        /* Allocate and assign next pointer */
        if( *p < end )
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 800e2e2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800e33c <mbedtls_asn1_get_sequence_of+0x7c>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800e2e6:	1d22      	adds	r2, r4, #4
    while( *p < end )
 800e2e8:	6833      	ldr	r3, [r6, #0]
 800e2ea:	42bb      	cmp	r3, r7
 800e2ec:	d309      	bcc.n	800e302 <mbedtls_asn1_get_sequence_of+0x42>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 800e2ee:	f04f 0300 	mov.w	r3, #0
 800e2f2:	60e3      	str	r3, [r4, #12]

    if( *p != end )
 800e2f4:	d001      	beq.n	800e2fa <mbedtls_asn1_get_sequence_of+0x3a>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e2f6:	f06f 0565 	mvn.w	r5, #101	; 0x65

    return( 0 );
}
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	b003      	add	sp, #12
 800e2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buf->tag = **p;
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800e306:	4639      	mov	r1, r7
 800e308:	4643      	mov	r3, r8
 800e30a:	4630      	mov	r0, r6
 800e30c:	f7ff ff40 	bl	800e190 <mbedtls_asn1_get_tag>
 800e310:	b978      	cbnz	r0, 800e332 <mbedtls_asn1_get_sequence_of+0x72>
        buf->p = *p;
 800e312:	6833      	ldr	r3, [r6, #0]
        *p += buf->len;
 800e314:	6861      	ldr	r1, [r4, #4]
        buf->p = *p;
 800e316:	60a3      	str	r3, [r4, #8]
        *p += buf->len;
 800e318:	440b      	add	r3, r1
        if( *p < end )
 800e31a:	42bb      	cmp	r3, r7
        *p += buf->len;
 800e31c:	6033      	str	r3, [r6, #0]
        if( *p < end )
 800e31e:	d2e3      	bcs.n	800e2e8 <mbedtls_asn1_get_sequence_of+0x28>
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 800e320:	f8d9 3000 	ldr.w	r3, [r9]
 800e324:	2110      	movs	r1, #16
 800e326:	2001      	movs	r0, #1
 800e328:	4798      	blx	r3
 800e32a:	60e0      	str	r0, [r4, #12]
            if( cur->next == NULL )
 800e32c:	b118      	cbz	r0, 800e336 <mbedtls_asn1_get_sequence_of+0x76>
 800e32e:	4604      	mov	r4, r0
 800e330:	e7d9      	b.n	800e2e6 <mbedtls_asn1_get_sequence_of+0x26>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800e332:	4605      	mov	r5, r0
 800e334:	e7e1      	b.n	800e2fa <mbedtls_asn1_get_sequence_of+0x3a>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 800e336:	f06f 0569 	mvn.w	r5, #105	; 0x69
 800e33a:	e7de      	b.n	800e2fa <mbedtls_asn1_get_sequence_of+0x3a>
 800e33c:	200005a0 	.word	0x200005a0

0800e340 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 800e340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e344:	4690      	mov	r8, r2
 800e346:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e348:	aa01      	add	r2, sp, #4
 800e34a:	2330      	movs	r3, #48	; 0x30
{
 800e34c:	4606      	mov	r6, r0
 800e34e:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e350:	f7ff ff1e 	bl	800e190 <mbedtls_asn1_get_tag>
 800e354:	4604      	mov	r4, r0
 800e356:	bb00      	cbnz	r0, 800e39a <mbedtls_asn1_get_alg+0x5a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 800e358:	6837      	ldr	r7, [r6, #0]
 800e35a:	eba9 0907 	sub.w	r9, r9, r7
 800e35e:	f1b9 0f00 	cmp.w	r9, #0
 800e362:	dd36      	ble.n	800e3d2 <mbedtls_asn1_get_alg+0x92>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    end = *p + len;
 800e364:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
 800e366:	783b      	ldrb	r3, [r7, #0]
 800e368:	4642      	mov	r2, r8
    end = *p + len;
 800e36a:	440f      	add	r7, r1
    alg->tag = **p;
 800e36c:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 800e370:	4639      	mov	r1, r7
 800e372:	2306      	movs	r3, #6
 800e374:	4630      	mov	r0, r6
 800e376:	f7ff ff0b 	bl	800e190 <mbedtls_asn1_get_tag>
 800e37a:	4604      	mov	r4, r0
 800e37c:	b968      	cbnz	r0, 800e39a <mbedtls_asn1_get_alg+0x5a>
        return( ret );

    alg->p = *p;
 800e37e:	6832      	ldr	r2, [r6, #0]
    *p += alg->len;
 800e380:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
 800e384:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
 800e388:	1853      	adds	r3, r2, r1

    if( *p == end )
 800e38a:	42bb      	cmp	r3, r7
    *p += alg->len;
 800e38c:	6033      	str	r3, [r6, #0]
    if( *p == end )
 800e38e:	d10b      	bne.n	800e3a8 <mbedtls_asn1_get_alg+0x68>
 800e390:	f105 030c 	add.w	r3, r5, #12
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800e394:	4602      	mov	r2, r0
 800e396:	429d      	cmp	r5, r3
 800e398:	d103      	bne.n	800e3a2 <mbedtls_asn1_get_alg+0x62>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 800e39a:	4620      	mov	r0, r4
 800e39c:	b003      	add	sp, #12
 800e39e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800e3a2:	f805 2b01 	strb.w	r2, [r5], #1
 800e3a6:	e7f6      	b.n	800e396 <mbedtls_asn1_get_alg+0x56>
    params->tag = **p;
 800e3a8:	5c51      	ldrb	r1, [r2, r1]
 800e3aa:	462a      	mov	r2, r5
    (*p)++;
 800e3ac:	3301      	adds	r3, #1
    params->tag = **p;
 800e3ae:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800e3b2:	4630      	mov	r0, r6
    (*p)++;
 800e3b4:	6033      	str	r3, [r6, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800e3b6:	4639      	mov	r1, r7
 800e3b8:	f7ff fea2 	bl	800e100 <mbedtls_asn1_get_len>
 800e3bc:	b960      	cbnz	r0, 800e3d8 <mbedtls_asn1_get_alg+0x98>
    params->p = *p;
 800e3be:	6833      	ldr	r3, [r6, #0]
    *p += params->len;
 800e3c0:	686a      	ldr	r2, [r5, #4]
    params->p = *p;
 800e3c2:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 800e3c4:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e3c6:	42bb      	cmp	r3, r7
    *p += params->len;
 800e3c8:	6033      	str	r3, [r6, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e3ca:	bf18      	it	ne
 800e3cc:	f06f 0465 	mvnne.w	r4, #101	; 0x65
 800e3d0:	e7e3      	b.n	800e39a <mbedtls_asn1_get_alg+0x5a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800e3d2:	f06f 045f 	mvn.w	r4, #95	; 0x5f
 800e3d6:	e7e0      	b.n	800e39a <mbedtls_asn1_get_alg+0x5a>
 800e3d8:	4604      	mov	r4, r0
 800e3da:	e7de      	b.n	800e39a <mbedtls_asn1_get_alg+0x5a>

0800e3dc <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 800e3dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 800e3de:	2300      	movs	r3, #0
 800e3e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800e3e4:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 800e3e6:	ab01      	add	r3, sp, #4
 800e3e8:	f7ff ffaa 	bl	800e340 <mbedtls_asn1_get_alg>
 800e3ec:	b940      	cbnz	r0, 800e400 <mbedtls_asn1_get_alg_null+0x24>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 800e3ee:	9b01      	ldr	r3, [sp, #4]
 800e3f0:	2b05      	cmp	r3, #5
 800e3f2:	d000      	beq.n	800e3f6 <mbedtls_asn1_get_alg_null+0x1a>
 800e3f4:	b93b      	cbnz	r3, 800e406 <mbedtls_asn1_get_alg_null+0x2a>
 800e3f6:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	bf18      	it	ne
 800e3fc:	f06f 0067 	mvnne.w	r0, #103	; 0x67

    return( 0 );
}
 800e400:	b005      	add	sp, #20
 800e402:	f85d fb04 	ldr.w	pc, [sp], #4
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800e406:	f06f 0067 	mvn.w	r0, #103	; 0x67
 800e40a:	e7f9      	b.n	800e400 <mbedtls_asn1_get_alg_null+0x24>

0800e40c <mbedtls_asn1_write_len>:
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
 800e40c:	6803      	ldr	r3, [r0, #0]
 800e40e:	2a7f      	cmp	r2, #127	; 0x7f
 800e410:	eba3 0101 	sub.w	r1, r3, r1
 800e414:	d807      	bhi.n	800e426 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
 800e416:	2900      	cmp	r1, #0
 800e418:	dd69      	ble.n	800e4ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800e41a:	1e59      	subs	r1, r3, #1
 800e41c:	6001      	str	r1, [r0, #0]
 800e41e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 800e422:	2001      	movs	r0, #1
 800e424:	4770      	bx	lr
    }

    if( len <= 0xFF )
 800e426:	2aff      	cmp	r2, #255	; 0xff
 800e428:	d80d      	bhi.n	800e446 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
 800e42a:	2901      	cmp	r1, #1
 800e42c:	dd5f      	ble.n	800e4ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800e42e:	1e59      	subs	r1, r3, #1
 800e430:	6001      	str	r1, [r0, #0]
 800e432:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 800e436:	6803      	ldr	r3, [r0, #0]
 800e438:	1e5a      	subs	r2, r3, #1
 800e43a:	6002      	str	r2, [r0, #0]
 800e43c:	2281      	movs	r2, #129	; 0x81
 800e43e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 800e442:	2002      	movs	r0, #2
 800e444:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 800e446:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e44a:	d213      	bcs.n	800e474 <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
 800e44c:	2902      	cmp	r1, #2
 800e44e:	dd4e      	ble.n	800e4ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800e450:	1e59      	subs	r1, r3, #1
 800e452:	6001      	str	r1, [r0, #0]
 800e454:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800e458:	6803      	ldr	r3, [r0, #0]
 800e45a:	0a12      	lsrs	r2, r2, #8
 800e45c:	1e59      	subs	r1, r3, #1
 800e45e:	6001      	str	r1, [r0, #0]
 800e460:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 800e464:	6803      	ldr	r3, [r0, #0]
 800e466:	1e5a      	subs	r2, r3, #1
 800e468:	6002      	str	r2, [r0, #0]
 800e46a:	2282      	movs	r2, #130	; 0x82
 800e46c:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
 800e470:	2003      	movs	r0, #3
 800e472:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 800e474:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800e478:	d219      	bcs.n	800e4ae <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
 800e47a:	2903      	cmp	r1, #3
 800e47c:	dd37      	ble.n	800e4ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800e47e:	1e59      	subs	r1, r3, #1
 800e480:	6001      	str	r1, [r0, #0]
 800e482:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800e486:	6803      	ldr	r3, [r0, #0]
 800e488:	1e59      	subs	r1, r3, #1
 800e48a:	6001      	str	r1, [r0, #0]
 800e48c:	0a11      	lsrs	r1, r2, #8
 800e48e:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800e492:	6803      	ldr	r3, [r0, #0]
 800e494:	0c12      	lsrs	r2, r2, #16
 800e496:	1e59      	subs	r1, r3, #1
 800e498:	6001      	str	r1, [r0, #0]
 800e49a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 800e49e:	6803      	ldr	r3, [r0, #0]
 800e4a0:	1e5a      	subs	r2, r3, #1
 800e4a2:	6002      	str	r2, [r0, #0]
 800e4a4:	2283      	movs	r2, #131	; 0x83
 800e4a6:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
 800e4aa:	2004      	movs	r0, #4
 800e4ac:	4770      	bx	lr
 */
#if defined(MBEDTLS_HAVE_INT64)
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 800e4ae:	2904      	cmp	r1, #4
 800e4b0:	dd1d      	ble.n	800e4ee <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800e4b2:	1e59      	subs	r1, r3, #1
 800e4b4:	6001      	str	r1, [r0, #0]
 800e4b6:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800e4ba:	6803      	ldr	r3, [r0, #0]
 800e4bc:	1e59      	subs	r1, r3, #1
 800e4be:	6001      	str	r1, [r0, #0]
 800e4c0:	0a11      	lsrs	r1, r2, #8
 800e4c2:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800e4c6:	6803      	ldr	r3, [r0, #0]
 800e4c8:	1e59      	subs	r1, r3, #1
 800e4ca:	6001      	str	r1, [r0, #0]
 800e4cc:	0c11      	lsrs	r1, r2, #16
 800e4ce:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 800e4d2:	6803      	ldr	r3, [r0, #0]
 800e4d4:	0e12      	lsrs	r2, r2, #24
 800e4d6:	1e59      	subs	r1, r3, #1
 800e4d8:	6001      	str	r1, [r0, #0]
 800e4da:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 800e4de:	6803      	ldr	r3, [r0, #0]
 800e4e0:	1e5a      	subs	r2, r3, #1
 800e4e2:	6002      	str	r2, [r0, #0]
 800e4e4:	2284      	movs	r2, #132	; 0x84
 800e4e6:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
 800e4ea:	2005      	movs	r0, #5
 800e4ec:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e4ee:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 * On 32 bit platforms, this return statement will not be reached
 */
#if defined(MBEDTLS_HAVE_INT64)
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 800e4f2:	4770      	bx	lr

0800e4f4 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 800e4f4:	6803      	ldr	r3, [r0, #0]
 800e4f6:	1a59      	subs	r1, r3, r1
 800e4f8:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 800e4fa:	bfc1      	itttt	gt
 800e4fc:	f103 31ff 	addgt.w	r1, r3, #4294967295
 800e500:	6001      	strgt	r1, [r0, #0]

    return( 1 );
 800e502:	2001      	movgt	r0, #1
    *--(*p) = tag;
 800e504:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e508:	bfd8      	it	le
 800e50a:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
 800e50e:	4770      	bx	lr

0800e510 <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 800e510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e514:	4607      	mov	r7, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 800e516:	4610      	mov	r0, r2
{
 800e518:	4688      	mov	r8, r1
 800e51a:	4615      	mov	r5, r2
    len = mbedtls_mpi_size( X );
 800e51c:	f000 fbbb 	bl	800ec96 <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 800e520:	6839      	ldr	r1, [r7, #0]
 800e522:	4541      	cmp	r1, r8
    len = mbedtls_mpi_size( X );
 800e524:	4606      	mov	r6, r0
    if( *p < start || (size_t)( *p - start ) < len )
 800e526:	d204      	bcs.n	800e532 <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e528:	f06f 046b 	mvn.w	r4, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
 800e52c:	4620      	mov	r0, r4
 800e52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
 800e532:	eba1 0208 	sub.w	r2, r1, r8
 800e536:	4282      	cmp	r2, r0
 800e538:	d3f6      	bcc.n	800e528 <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
 800e53a:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800e53c:	4602      	mov	r2, r0
    (*p) -= len;
 800e53e:	6039      	str	r1, [r7, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800e540:	4628      	mov	r0, r5
 800e542:	f000 fbe1 	bl	800ed08 <mbedtls_mpi_write_binary>
 800e546:	4604      	mov	r4, r0
 800e548:	2800      	cmp	r0, #0
 800e54a:	d1ef      	bne.n	800e52c <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d10d      	bne.n	800e56e <mbedtls_asn1_write_mpi+0x5e>
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	f993 2000 	ldrsb.w	r2, [r3]
 800e558:	2a00      	cmp	r2, #0
 800e55a:	da08      	bge.n	800e56e <mbedtls_asn1_write_mpi+0x5e>
        if( *p - start < 1 )
 800e55c:	eba3 0208 	sub.w	r2, r3, r8
 800e560:	2a00      	cmp	r2, #0
 800e562:	dde1      	ble.n	800e528 <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
 800e564:	1e5a      	subs	r2, r3, #1
 800e566:	603a      	str	r2, [r7, #0]
        len += 1;
 800e568:	3601      	adds	r6, #1
        *--(*p) = 0x00;
 800e56a:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800e56e:	4632      	mov	r2, r6
 800e570:	4641      	mov	r1, r8
 800e572:	4638      	mov	r0, r7
 800e574:	f7ff ff4a 	bl	800e40c <mbedtls_asn1_write_len>
 800e578:	1e04      	subs	r4, r0, #0
 800e57a:	dbd7      	blt.n	800e52c <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800e57c:	2202      	movs	r2, #2
 800e57e:	4641      	mov	r1, r8
 800e580:	4638      	mov	r0, r7
 800e582:	f7ff ffb7 	bl	800e4f4 <mbedtls_asn1_write_tag>
 800e586:	1e03      	subs	r3, r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800e588:	bfa6      	itte	ge
 800e58a:	19a0      	addge	r0, r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800e58c:	181c      	addge	r4, r3, r0
    ret = (int) len;
 800e58e:	461c      	movlt	r4, r3
 800e590:	e7cc      	b.n	800e52c <mbedtls_asn1_write_mpi+0x1c>
	...

0800e594 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 800e594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 800e598:	f04f 0c00 	mov.w	ip, #0
{
 800e59c:	9e07      	ldr	r6, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 800e59e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800e6c8 <mbedtls_base64_decode+0x134>
    for( i = n = j = 0; i < slen; i++ )
 800e5a2:	4664      	mov	r4, ip
 800e5a4:	4665      	mov	r5, ip
 800e5a6:	42b5      	cmp	r5, r6
 800e5a8:	d30a      	bcc.n	800e5c0 <mbedtls_base64_decode+0x2c>
 800e5aa:	462e      	mov	r6, r5
 800e5ac:	e004      	b.n	800e5b8 <mbedtls_base64_decode+0x24>
            ++i;
 800e5ae:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
 800e5b0:	42ae      	cmp	r6, r5
            ++x;
 800e5b2:	f10e 0e01 	add.w	lr, lr, #1
        while( i < slen && src[i] == ' ' )
 800e5b6:	d105      	bne.n	800e5c4 <mbedtls_base64_decode+0x30>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 800e5b8:	bbb4      	cbnz	r4, 800e628 <mbedtls_base64_decode+0x94>
    {
        *olen = 0;
 800e5ba:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
 800e5bc:	2000      	movs	r0, #0
 800e5be:	e052      	b.n	800e666 <mbedtls_base64_decode+0xd2>
        x = 0;
 800e5c0:	f04f 0e00 	mov.w	lr, #0
        while( i < slen && src[i] == ' ' )
 800e5c4:	5d5f      	ldrb	r7, [r3, r5]
 800e5c6:	2f20      	cmp	r7, #32
 800e5c8:	d0f1      	beq.n	800e5ae <mbedtls_base64_decode+0x1a>
        if( i == slen )
 800e5ca:	42ae      	cmp	r6, r5
 800e5cc:	d0f4      	beq.n	800e5b8 <mbedtls_base64_decode+0x24>
        if( ( slen - i ) >= 2 &&
 800e5ce:	eba6 0905 	sub.w	r9, r6, r5
 800e5d2:	f1b9 0f01 	cmp.w	r9, #1
 800e5d6:	d915      	bls.n	800e604 <mbedtls_base64_decode+0x70>
 800e5d8:	2f0d      	cmp	r7, #13
 800e5da:	d113      	bne.n	800e604 <mbedtls_base64_decode+0x70>
            src[i] == '\r' && src[i + 1] == '\n' )
 800e5dc:	eb03 0905 	add.w	r9, r3, r5
 800e5e0:	f899 9001 	ldrb.w	r9, [r9, #1]
 800e5e4:	f1b9 0f0a 	cmp.w	r9, #10
        if( src[i] == '\n' )
 800e5e8:	d01c      	beq.n	800e624 <mbedtls_base64_decode+0x90>
        if( x != 0 )
 800e5ea:	f1be 0f00 	cmp.w	lr, #0
 800e5ee:	d106      	bne.n	800e5fe <mbedtls_base64_decode+0x6a>
        if( src[i] == '=' && ++j > 2 )
 800e5f0:	2f3d      	cmp	r7, #61	; 0x3d
 800e5f2:	d109      	bne.n	800e608 <mbedtls_base64_decode+0x74>
 800e5f4:	f10c 0c01 	add.w	ip, ip, #1
 800e5f8:	f1bc 0f02 	cmp.w	ip, #2
 800e5fc:	d907      	bls.n	800e60e <mbedtls_base64_decode+0x7a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 800e5fe:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 800e602:	e030      	b.n	800e666 <mbedtls_base64_decode+0xd2>
        if( src[i] == '\n' )
 800e604:	2f0a      	cmp	r7, #10
 800e606:	e7ef      	b.n	800e5e8 <mbedtls_base64_decode+0x54>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 800e608:	f017 0f80 	tst.w	r7, #128	; 0x80
 800e60c:	d1f7      	bne.n	800e5fe <mbedtls_base64_decode+0x6a>
 800e60e:	4447      	add	r7, r8
 800e610:	f897 7040 	ldrb.w	r7, [r7, #64]	; 0x40
 800e614:	2f7f      	cmp	r7, #127	; 0x7f
 800e616:	d0f2      	beq.n	800e5fe <mbedtls_base64_decode+0x6a>
        if( base64_dec_map[src[i]] < 64 && j != 0 )
 800e618:	2f3f      	cmp	r7, #63	; 0x3f
 800e61a:	d802      	bhi.n	800e622 <mbedtls_base64_decode+0x8e>
 800e61c:	f1bc 0f00 	cmp.w	ip, #0
 800e620:	d1ed      	bne.n	800e5fe <mbedtls_base64_decode+0x6a>
        n++;
 800e622:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 800e624:	3501      	adds	r5, #1
 800e626:	e7be      	b.n	800e5a6 <mbedtls_base64_decode+0x12>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 800e628:	f004 0707 	and.w	r7, r4, #7
 800e62c:	2506      	movs	r5, #6
 800e62e:	08e4      	lsrs	r4, r4, #3
 800e630:	436f      	muls	r7, r5
 800e632:	436c      	muls	r4, r5
 800e634:	3707      	adds	r7, #7
    n -= j;
 800e636:	eba4 040c 	sub.w	r4, r4, ip
 800e63a:	eb04 04d7 	add.w	r4, r4, r7, lsr #3
    if( dst == NULL || dlen < n )
 800e63e:	b178      	cbz	r0, 800e660 <mbedtls_base64_decode+0xcc>
 800e640:	428c      	cmp	r4, r1
 800e642:	d80d      	bhi.n	800e660 <mbedtls_base64_decode+0xcc>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e644:	2700      	movs	r7, #0
        j -= ( base64_dec_map[*src] == 64 );
 800e646:	f8df e080 	ldr.w	lr, [pc, #128]	; 800e6c8 <mbedtls_base64_decode+0x134>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 800e64a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800e6cc <mbedtls_base64_decode+0x138>
 800e64e:	441e      	add	r6, r3
    if( dst == NULL || dlen < n )
 800e650:	4601      	mov	r1, r0
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e652:	2503      	movs	r5, #3
 800e654:	463c      	mov	r4, r7
 800e656:	429e      	cmp	r6, r3
 800e658:	d107      	bne.n	800e66a <mbedtls_base64_decode+0xd6>
    *olen = p - dst;
 800e65a:	1a09      	subs	r1, r1, r0
 800e65c:	6011      	str	r1, [r2, #0]
 800e65e:	e7ad      	b.n	800e5bc <mbedtls_base64_decode+0x28>
        *olen = n;
 800e660:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 800e662:	f06f 0029 	mvn.w	r0, #41	; 0x29
}
 800e666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 800e66a:	f813 9b01 	ldrb.w	r9, [r3], #1
 800e66e:	f1a9 0c0a 	sub.w	ip, r9, #10
 800e672:	fa5f fc8c 	uxtb.w	ip, ip
 800e676:	f1bc 0f16 	cmp.w	ip, #22
 800e67a:	d804      	bhi.n	800e686 <mbedtls_base64_decode+0xf2>
 800e67c:	fa28 fc0c 	lsr.w	ip, r8, ip
 800e680:	f01c 0f01 	tst.w	ip, #1
 800e684:	d1e7      	bne.n	800e656 <mbedtls_base64_decode+0xc2>
        j -= ( base64_dec_map[*src] == 64 );
 800e686:	44f1      	add	r9, lr
        if( ++n == 4 )
 800e688:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 800e68a:	f899 c040 	ldrb.w	ip, [r9, #64]	; 0x40
 800e68e:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 800e692:	bf08      	it	eq
 800e694:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 800e696:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
        if( ++n == 4 )
 800e69a:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 800e69c:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
        if( ++n == 4 )
 800e6a0:	d1d9      	bne.n	800e656 <mbedtls_base64_decode+0xc2>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e6a2:	b17d      	cbz	r5, 800e6c4 <mbedtls_base64_decode+0x130>
 800e6a4:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e6a6:	2d01      	cmp	r5, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e6a8:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e6aa:	d102      	bne.n	800e6b2 <mbedtls_base64_decode+0x11e>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e6ac:	3101      	adds	r1, #1
            n = 0;
 800e6ae:	2400      	movs	r4, #0
 800e6b0:	e7d1      	b.n	800e656 <mbedtls_base64_decode+0xc2>
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e6b2:	2d02      	cmp	r5, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e6b4:	ea4f 2417 	mov.w	r4, r7, lsr #8
 800e6b8:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e6ba:	bf16      	itet	ne
 800e6bc:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e6be:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e6c0:	3103      	addne	r1, #3
 800e6c2:	e7f4      	b.n	800e6ae <mbedtls_base64_decode+0x11a>
            n = 0;
 800e6c4:	462c      	mov	r4, r5
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e6c6:	e7c6      	b.n	800e656 <mbedtls_base64_decode+0xc2>
 800e6c8:	0802a9f0 	.word	0x0802a9f0
 800e6cc:	00400009 	.word	0x00400009

0800e6d0 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800e6d0:	2300      	movs	r3, #0
{
 800e6d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6d4:	1f16      	subs	r6, r2, #4
    for( i = c = 0; i < n; i++, s++, d++ )
 800e6d6:	461c      	mov	r4, r3
 800e6d8:	4284      	cmp	r4, r0
 800e6da:	d103      	bne.n	800e6e4 <mpi_sub_hlp+0x14>
 800e6dc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 800e6e0:	b9b3      	cbnz	r3, 800e710 <mpi_sub_hlp+0x40>
    {
        z = ( *d < c ); *d -= c;
        c = z; i++; d++;
    }
}
 800e6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 800e6e4:	f856 cf04 	ldr.w	ip, [r6, #4]!
 800e6e8:	ebac 0503 	sub.w	r5, ip, r3
 800e6ec:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 800e6ee:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 800e6f2:	42bd      	cmp	r5, r7
 800e6f4:	bf2c      	ite	cs
 800e6f6:	f04f 0e00 	movcs.w	lr, #0
 800e6fa:	f04f 0e01 	movcc.w	lr, #1
 800e6fe:	1bed      	subs	r5, r5, r7
 800e700:	459c      	cmp	ip, r3
 800e702:	bf2c      	ite	cs
 800e704:	4673      	movcs	r3, lr
 800e706:	f10e 0301 	addcc.w	r3, lr, #1
 800e70a:	6035      	str	r5, [r6, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 800e70c:	3401      	adds	r4, #1
 800e70e:	e7e3      	b.n	800e6d8 <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 800e710:	6811      	ldr	r1, [r2, #0]
 800e712:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 800e714:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
 800e716:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 800e71a:	bf2c      	ite	cs
 800e71c:	2300      	movcs	r3, #0
 800e71e:	2301      	movcc	r3, #1
 800e720:	e7de      	b.n	800e6e0 <mpi_sub_hlp+0x10>

0800e722 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800e722:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e724:	b087      	sub	sp, #28
 800e726:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e72a:	9301      	str	r3, [sp, #4]
    mbedtls_mpi_uint c = 0, t = 0;
 800e72c:	2300      	movs	r3, #0
{
 800e72e:	4684      	mov	ip, r0
    mbedtls_mpi_uint c = 0, t = 0;
 800e730:	9305      	str	r3, [sp, #20]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800e732:	4686      	mov	lr, r0
 800e734:	f1be 0f0f 	cmp.w	lr, #15
 800e738:	f200 8085 	bhi.w	800e846 <mpi_mul_hlp+0x124>
 800e73c:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800e740:	f06f 000f 	mvn.w	r0, #15
 800e744:	fb00 cc03 	mla	ip, r0, r3, ip
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800e748:	f1bc 0f07 	cmp.w	ip, #7
 800e74c:	d968      	bls.n	800e820 <mpi_mul_hlp+0xfe>
    {
        MULADDC_INIT
 800e74e:	9803      	ldr	r0, [sp, #12]
 800e750:	9902      	ldr	r1, [sp, #8]
 800e752:	9a05      	ldr	r2, [sp, #20]
 800e754:	9b01      	ldr	r3, [sp, #4]
 800e756:	f850 4b04 	ldr.w	r4, [r0], #4
 800e75a:	f04f 0500 	mov.w	r5, #0
 800e75e:	680e      	ldr	r6, [r1, #0]
 800e760:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e764:	18b7      	adds	r7, r6, r2
 800e766:	f145 0200 	adc.w	r2, r5, #0
 800e76a:	f841 7b04 	str.w	r7, [r1], #4
 800e76e:	f850 4b04 	ldr.w	r4, [r0], #4
 800e772:	f04f 0500 	mov.w	r5, #0
 800e776:	680e      	ldr	r6, [r1, #0]
 800e778:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e77c:	18b7      	adds	r7, r6, r2
 800e77e:	f145 0200 	adc.w	r2, r5, #0
 800e782:	f841 7b04 	str.w	r7, [r1], #4
 800e786:	f850 4b04 	ldr.w	r4, [r0], #4
 800e78a:	f04f 0500 	mov.w	r5, #0
 800e78e:	680e      	ldr	r6, [r1, #0]
 800e790:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e794:	18b7      	adds	r7, r6, r2
 800e796:	f145 0200 	adc.w	r2, r5, #0
 800e79a:	f841 7b04 	str.w	r7, [r1], #4
 800e79e:	f850 4b04 	ldr.w	r4, [r0], #4
 800e7a2:	f04f 0500 	mov.w	r5, #0
 800e7a6:	680e      	ldr	r6, [r1, #0]
 800e7a8:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e7ac:	18b7      	adds	r7, r6, r2
 800e7ae:	f145 0200 	adc.w	r2, r5, #0
 800e7b2:	f841 7b04 	str.w	r7, [r1], #4
 800e7b6:	f850 4b04 	ldr.w	r4, [r0], #4
 800e7ba:	f04f 0500 	mov.w	r5, #0
 800e7be:	680e      	ldr	r6, [r1, #0]
 800e7c0:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e7c4:	18b7      	adds	r7, r6, r2
 800e7c6:	f145 0200 	adc.w	r2, r5, #0
 800e7ca:	f841 7b04 	str.w	r7, [r1], #4
 800e7ce:	f850 4b04 	ldr.w	r4, [r0], #4
 800e7d2:	f04f 0500 	mov.w	r5, #0
 800e7d6:	680e      	ldr	r6, [r1, #0]
 800e7d8:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e7dc:	18b7      	adds	r7, r6, r2
 800e7de:	f145 0200 	adc.w	r2, r5, #0
 800e7e2:	f841 7b04 	str.w	r7, [r1], #4
 800e7e6:	f850 4b04 	ldr.w	r4, [r0], #4
 800e7ea:	f04f 0500 	mov.w	r5, #0
 800e7ee:	680e      	ldr	r6, [r1, #0]
 800e7f0:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e7f4:	18b7      	adds	r7, r6, r2
 800e7f6:	f145 0200 	adc.w	r2, r5, #0
 800e7fa:	f841 7b04 	str.w	r7, [r1], #4
 800e7fe:	f850 4b04 	ldr.w	r4, [r0], #4
 800e802:	f04f 0500 	mov.w	r5, #0
 800e806:	680e      	ldr	r6, [r1, #0]
 800e808:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e80c:	18b7      	adds	r7, r6, r2
 800e80e:	f145 0200 	adc.w	r2, r5, #0
 800e812:	f841 7b04 	str.w	r7, [r1], #4
 800e816:	9205      	str	r2, [sp, #20]
 800e818:	9102      	str	r1, [sp, #8]
 800e81a:	9003      	str	r0, [sp, #12]
    for( ; i >= 8; i -= 8 )
 800e81c:	f1ac 0c08 	sub.w	ip, ip, #8
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 800e820:	f1bc 0f00 	cmp.w	ip, #0
 800e824:	f040 80d9 	bne.w	800e9da <mpi_mul_hlp+0x2b8>
 800e828:	9a02      	ldr	r2, [sp, #8]
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 800e82a:	9905      	ldr	r1, [sp, #20]
 800e82c:	6813      	ldr	r3, [r2, #0]
 800e82e:	440b      	add	r3, r1
 800e830:	f842 3b04 	str.w	r3, [r2], #4
 800e834:	9905      	ldr	r1, [sp, #20]
 800e836:	428b      	cmp	r3, r1
 800e838:	bf34      	ite	cc
 800e83a:	2301      	movcc	r3, #1
 800e83c:	2300      	movcs	r3, #0
 800e83e:	9305      	str	r3, [sp, #20]
    }
    while( c != 0 );
 800e840:	d3f3      	bcc.n	800e82a <mpi_mul_hlp+0x108>
}
 800e842:	b007      	add	sp, #28
 800e844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for( ; i >= 16; i -= 16 )
 800e846:	f1ae 0e10 	sub.w	lr, lr, #16
        MULADDC_INIT
 800e84a:	9803      	ldr	r0, [sp, #12]
 800e84c:	9902      	ldr	r1, [sp, #8]
 800e84e:	9a05      	ldr	r2, [sp, #20]
 800e850:	9b01      	ldr	r3, [sp, #4]
 800e852:	f850 4b04 	ldr.w	r4, [r0], #4
 800e856:	f04f 0500 	mov.w	r5, #0
 800e85a:	680e      	ldr	r6, [r1, #0]
 800e85c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e860:	18b7      	adds	r7, r6, r2
 800e862:	f145 0200 	adc.w	r2, r5, #0
 800e866:	f841 7b04 	str.w	r7, [r1], #4
 800e86a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e86e:	f04f 0500 	mov.w	r5, #0
 800e872:	680e      	ldr	r6, [r1, #0]
 800e874:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e878:	18b7      	adds	r7, r6, r2
 800e87a:	f145 0200 	adc.w	r2, r5, #0
 800e87e:	f841 7b04 	str.w	r7, [r1], #4
 800e882:	f850 4b04 	ldr.w	r4, [r0], #4
 800e886:	f04f 0500 	mov.w	r5, #0
 800e88a:	680e      	ldr	r6, [r1, #0]
 800e88c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e890:	18b7      	adds	r7, r6, r2
 800e892:	f145 0200 	adc.w	r2, r5, #0
 800e896:	f841 7b04 	str.w	r7, [r1], #4
 800e89a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e89e:	f04f 0500 	mov.w	r5, #0
 800e8a2:	680e      	ldr	r6, [r1, #0]
 800e8a4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e8a8:	18b7      	adds	r7, r6, r2
 800e8aa:	f145 0200 	adc.w	r2, r5, #0
 800e8ae:	f841 7b04 	str.w	r7, [r1], #4
 800e8b2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e8b6:	f04f 0500 	mov.w	r5, #0
 800e8ba:	680e      	ldr	r6, [r1, #0]
 800e8bc:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e8c0:	18b7      	adds	r7, r6, r2
 800e8c2:	f145 0200 	adc.w	r2, r5, #0
 800e8c6:	f841 7b04 	str.w	r7, [r1], #4
 800e8ca:	f850 4b04 	ldr.w	r4, [r0], #4
 800e8ce:	f04f 0500 	mov.w	r5, #0
 800e8d2:	680e      	ldr	r6, [r1, #0]
 800e8d4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e8d8:	18b7      	adds	r7, r6, r2
 800e8da:	f145 0200 	adc.w	r2, r5, #0
 800e8de:	f841 7b04 	str.w	r7, [r1], #4
 800e8e2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e8e6:	f04f 0500 	mov.w	r5, #0
 800e8ea:	680e      	ldr	r6, [r1, #0]
 800e8ec:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e8f0:	18b7      	adds	r7, r6, r2
 800e8f2:	f145 0200 	adc.w	r2, r5, #0
 800e8f6:	f841 7b04 	str.w	r7, [r1], #4
 800e8fa:	f850 4b04 	ldr.w	r4, [r0], #4
 800e8fe:	f04f 0500 	mov.w	r5, #0
 800e902:	680e      	ldr	r6, [r1, #0]
 800e904:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e908:	18b7      	adds	r7, r6, r2
 800e90a:	f145 0200 	adc.w	r2, r5, #0
 800e90e:	f841 7b04 	str.w	r7, [r1], #4
 800e912:	f850 4b04 	ldr.w	r4, [r0], #4
 800e916:	f04f 0500 	mov.w	r5, #0
 800e91a:	680e      	ldr	r6, [r1, #0]
 800e91c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e920:	18b7      	adds	r7, r6, r2
 800e922:	f145 0200 	adc.w	r2, r5, #0
 800e926:	f841 7b04 	str.w	r7, [r1], #4
 800e92a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e92e:	f04f 0500 	mov.w	r5, #0
 800e932:	680e      	ldr	r6, [r1, #0]
 800e934:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e938:	18b7      	adds	r7, r6, r2
 800e93a:	f145 0200 	adc.w	r2, r5, #0
 800e93e:	f841 7b04 	str.w	r7, [r1], #4
 800e942:	f850 4b04 	ldr.w	r4, [r0], #4
 800e946:	f04f 0500 	mov.w	r5, #0
 800e94a:	680e      	ldr	r6, [r1, #0]
 800e94c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e950:	18b7      	adds	r7, r6, r2
 800e952:	f145 0200 	adc.w	r2, r5, #0
 800e956:	f841 7b04 	str.w	r7, [r1], #4
 800e95a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e95e:	f04f 0500 	mov.w	r5, #0
 800e962:	680e      	ldr	r6, [r1, #0]
 800e964:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e968:	18b7      	adds	r7, r6, r2
 800e96a:	f145 0200 	adc.w	r2, r5, #0
 800e96e:	f841 7b04 	str.w	r7, [r1], #4
 800e972:	f850 4b04 	ldr.w	r4, [r0], #4
 800e976:	f04f 0500 	mov.w	r5, #0
 800e97a:	680e      	ldr	r6, [r1, #0]
 800e97c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e980:	18b7      	adds	r7, r6, r2
 800e982:	f145 0200 	adc.w	r2, r5, #0
 800e986:	f841 7b04 	str.w	r7, [r1], #4
 800e98a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e98e:	f04f 0500 	mov.w	r5, #0
 800e992:	680e      	ldr	r6, [r1, #0]
 800e994:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e998:	18b7      	adds	r7, r6, r2
 800e99a:	f145 0200 	adc.w	r2, r5, #0
 800e99e:	f841 7b04 	str.w	r7, [r1], #4
 800e9a2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e9a6:	f04f 0500 	mov.w	r5, #0
 800e9aa:	680e      	ldr	r6, [r1, #0]
 800e9ac:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e9b0:	18b7      	adds	r7, r6, r2
 800e9b2:	f145 0200 	adc.w	r2, r5, #0
 800e9b6:	f841 7b04 	str.w	r7, [r1], #4
 800e9ba:	f850 4b04 	ldr.w	r4, [r0], #4
 800e9be:	f04f 0500 	mov.w	r5, #0
 800e9c2:	680e      	ldr	r6, [r1, #0]
 800e9c4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e9c8:	18b7      	adds	r7, r6, r2
 800e9ca:	f145 0200 	adc.w	r2, r5, #0
 800e9ce:	f841 7b04 	str.w	r7, [r1], #4
 800e9d2:	9205      	str	r2, [sp, #20]
 800e9d4:	9102      	str	r1, [sp, #8]
 800e9d6:	9003      	str	r0, [sp, #12]
    for( ; i >= 16; i -= 16 )
 800e9d8:	e6ac      	b.n	800e734 <mpi_mul_hlp+0x12>
    for( ; i > 0; i-- )
 800e9da:	f10c 3cff 	add.w	ip, ip, #4294967295
        MULADDC_INIT
 800e9de:	9803      	ldr	r0, [sp, #12]
 800e9e0:	9902      	ldr	r1, [sp, #8]
 800e9e2:	9a05      	ldr	r2, [sp, #20]
 800e9e4:	9b01      	ldr	r3, [sp, #4]
 800e9e6:	f850 4b04 	ldr.w	r4, [r0], #4
 800e9ea:	f04f 0500 	mov.w	r5, #0
 800e9ee:	680e      	ldr	r6, [r1, #0]
 800e9f0:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e9f4:	18b7      	adds	r7, r6, r2
 800e9f6:	f145 0200 	adc.w	r2, r5, #0
 800e9fa:	f841 7b04 	str.w	r7, [r1], #4
 800e9fe:	9205      	str	r2, [sp, #20]
 800ea00:	9102      	str	r1, [sp, #8]
 800ea02:	9003      	str	r0, [sp, #12]
    for( ; i > 0; i-- )
 800ea04:	e70c      	b.n	800e820 <mpi_mul_hlp+0xfe>

0800ea06 <mbedtls_mpi_init>:
    if( X == NULL )
 800ea06:	b120      	cbz	r0, 800ea12 <mbedtls_mpi_init+0xc>
    X->n = 0;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
 800ea10:	6083      	str	r3, [r0, #8]
}
 800ea12:	4770      	bx	lr

0800ea14 <mbedtls_mpi_free>:
{
 800ea14:	b510      	push	{r4, lr}
    if( X == NULL )
 800ea16:	4604      	mov	r4, r0
 800ea18:	b170      	cbz	r0, 800ea38 <mbedtls_mpi_free+0x24>
    if( X->p != NULL )
 800ea1a:	6880      	ldr	r0, [r0, #8]
 800ea1c:	b138      	cbz	r0, 800ea2e <mbedtls_mpi_free+0x1a>
        mbedtls_mpi_zeroize( X->p, X->n );
 800ea1e:	6862      	ldr	r2, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800ea20:	4603      	mov	r3, r0
 800ea22:	2100      	movs	r1, #0
 800ea24:	3a01      	subs	r2, #1
 800ea26:	d208      	bcs.n	800ea3a <mbedtls_mpi_free+0x26>
        mbedtls_free( X->p );
 800ea28:	4b05      	ldr	r3, [pc, #20]	; (800ea40 <mbedtls_mpi_free+0x2c>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4798      	blx	r3
    X->n = 0;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	2201      	movs	r2, #1
 800ea32:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
 800ea36:	60a3      	str	r3, [r4, #8]
}
 800ea38:	bd10      	pop	{r4, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800ea3a:	f843 1b04 	str.w	r1, [r3], #4
 800ea3e:	e7f1      	b.n	800ea24 <mbedtls_mpi_free+0x10>
 800ea40:	200005a4 	.word	0x200005a4

0800ea44 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800ea44:	f242 7310 	movw	r3, #10000	; 0x2710
 800ea48:	4299      	cmp	r1, r3
{
 800ea4a:	b570      	push	{r4, r5, r6, lr}
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800ea50:	d902      	bls.n	800ea58 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800ea52:	f06f 000f 	mvn.w	r0, #15
}
 800ea56:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
 800ea58:	6843      	ldr	r3, [r0, #4]
 800ea5a:	428b      	cmp	r3, r1
 800ea5c:	d218      	bcs.n	800ea90 <mbedtls_mpi_grow+0x4c>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800ea5e:	4b0f      	ldr	r3, [pc, #60]	; (800ea9c <mbedtls_mpi_grow+0x58>)
 800ea60:	2104      	movs	r1, #4
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4628      	mov	r0, r5
 800ea66:	4798      	blx	r3
 800ea68:	4606      	mov	r6, r0
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d0f1      	beq.n	800ea52 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
 800ea6e:	68a1      	ldr	r1, [r4, #8]
 800ea70:	b161      	cbz	r1, 800ea8c <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
 800ea72:	6862      	ldr	r2, [r4, #4]
 800ea74:	0092      	lsls	r2, r2, #2
 800ea76:	f013 fd03 	bl	8022480 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800ea7a:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800ea7e:	2100      	movs	r1, #0
 800ea80:	4603      	mov	r3, r0
 800ea82:	3a01      	subs	r2, #1
 800ea84:	d206      	bcs.n	800ea94 <mbedtls_mpi_grow+0x50>
            mbedtls_free( X->p );
 800ea86:	4b06      	ldr	r3, [pc, #24]	; (800eaa0 <mbedtls_mpi_grow+0x5c>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4798      	blx	r3
        X->p = p;
 800ea8c:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 800ea90:	2000      	movs	r0, #0
 800ea92:	e7e0      	b.n	800ea56 <mbedtls_mpi_grow+0x12>
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800ea94:	f843 1b04 	str.w	r1, [r3], #4
 800ea98:	e7f3      	b.n	800ea82 <mbedtls_mpi_grow+0x3e>
 800ea9a:	bf00      	nop
 800ea9c:	200005a0 	.word	0x200005a0
 800eaa0:	200005a4 	.word	0x200005a4

0800eaa4 <mbedtls_mpi_shrink>:
    if( X->n <= nblimbs )
 800eaa4:	6843      	ldr	r3, [r0, #4]
 800eaa6:	428b      	cmp	r3, r1
{
 800eaa8:	b570      	push	{r4, r5, r6, lr}
 800eaaa:	4604      	mov	r4, r0
 800eaac:	460d      	mov	r5, r1
    if( X->n <= nblimbs )
 800eaae:	d807      	bhi.n	800eac0 <mbedtls_mpi_shrink+0x1c>
}
 800eab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_grow( X, nblimbs ) );
 800eab4:	f7ff bfc6 	b.w	800ea44 <mbedtls_mpi_grow>
        if( X->p[i] != 0 )
 800eab8:	68a2      	ldr	r2, [r4, #8]
 800eaba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eabe:	b912      	cbnz	r2, 800eac6 <mbedtls_mpi_shrink+0x22>
    for( i = X->n - 1; i > 0; i-- )
 800eac0:	3b01      	subs	r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1f8      	bne.n	800eab8 <mbedtls_mpi_shrink+0x14>
    i++;
 800eac6:	3301      	adds	r3, #1
    if( i < nblimbs )
 800eac8:	429d      	cmp	r5, r3
 800eaca:	bf38      	it	cc
 800eacc:	461d      	movcc	r5, r3
    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 800eace:	4b0f      	ldr	r3, [pc, #60]	; (800eb0c <mbedtls_mpi_shrink+0x68>)
 800ead0:	2104      	movs	r1, #4
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4628      	mov	r0, r5
 800ead6:	4798      	blx	r3
 800ead8:	4606      	mov	r6, r0
 800eada:	b1a0      	cbz	r0, 800eb06 <mbedtls_mpi_shrink+0x62>
    if( X->p != NULL )
 800eadc:	68a1      	ldr	r1, [r4, #8]
 800eade:	b159      	cbz	r1, 800eaf8 <mbedtls_mpi_shrink+0x54>
        memcpy( p, X->p, i * ciL );
 800eae0:	00aa      	lsls	r2, r5, #2
 800eae2:	f013 fccd 	bl	8022480 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 800eae6:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800eaea:	2100      	movs	r1, #0
 800eaec:	4603      	mov	r3, r0
 800eaee:	3a01      	subs	r2, #1
 800eaf0:	d206      	bcs.n	800eb00 <mbedtls_mpi_shrink+0x5c>
        mbedtls_free( X->p );
 800eaf2:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <mbedtls_mpi_shrink+0x6c>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4798      	blx	r3
    X->p = p;
 800eaf8:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 800eafc:	2000      	movs	r0, #0
}
 800eafe:	bd70      	pop	{r4, r5, r6, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800eb00:	f843 1b04 	str.w	r1, [r3], #4
 800eb04:	e7f3      	b.n	800eaee <mbedtls_mpi_shrink+0x4a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800eb06:	f06f 000f 	mvn.w	r0, #15
 800eb0a:	e7f8      	b.n	800eafe <mbedtls_mpi_shrink+0x5a>
 800eb0c:	200005a0 	.word	0x200005a0
 800eb10:	200005a4 	.word	0x200005a4

0800eb14 <mbedtls_mpi_copy>:
    if( X == Y )
 800eb14:	4288      	cmp	r0, r1
{
 800eb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb18:	4606      	mov	r6, r0
 800eb1a:	460f      	mov	r7, r1
    if( X == Y )
 800eb1c:	d022      	beq.n	800eb64 <mbedtls_mpi_copy+0x50>
    if( Y->p == NULL )
 800eb1e:	688c      	ldr	r4, [r1, #8]
 800eb20:	b91c      	cbnz	r4, 800eb2a <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 800eb22:	f7ff ff77 	bl	800ea14 <mbedtls_mpi_free>
}
 800eb26:	4620      	mov	r0, r4
 800eb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( i = Y->n - 1; i > 0; i-- )
 800eb2a:	684a      	ldr	r2, [r1, #4]
 800eb2c:	3a01      	subs	r2, #1
 800eb2e:	b11a      	cbz	r2, 800eb38 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 800eb30:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d0f9      	beq.n	800eb2c <mbedtls_mpi_copy+0x18>
    X->s = Y->s;
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	6033      	str	r3, [r6, #0]
    i++;
 800eb3c:	1c55      	adds	r5, r2, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800eb3e:	4629      	mov	r1, r5
 800eb40:	4630      	mov	r0, r6
 800eb42:	f7ff ff7f 	bl	800ea44 <mbedtls_mpi_grow>
 800eb46:	4604      	mov	r4, r0
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d1ec      	bne.n	800eb26 <mbedtls_mpi_copy+0x12>
    memset( X->p, 0, X->n * ciL );
 800eb4c:	6872      	ldr	r2, [r6, #4]
 800eb4e:	4601      	mov	r1, r0
 800eb50:	0092      	lsls	r2, r2, #2
 800eb52:	68b0      	ldr	r0, [r6, #8]
 800eb54:	f013 fcbc 	bl	80224d0 <memset>
    memcpy( X->p, Y->p, i * ciL );
 800eb58:	68b9      	ldr	r1, [r7, #8]
 800eb5a:	68b0      	ldr	r0, [r6, #8]
 800eb5c:	00aa      	lsls	r2, r5, #2
 800eb5e:	f013 fc8f 	bl	8022480 <memcpy>
 800eb62:	e7e0      	b.n	800eb26 <mbedtls_mpi_copy+0x12>
        return( 0 );
 800eb64:	2400      	movs	r4, #0
 800eb66:	e7de      	b.n	800eb26 <mbedtls_mpi_copy+0x12>

0800eb68 <mbedtls_mpi_safe_cond_assign>:
{
 800eb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6a:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800eb6c:	6849      	ldr	r1, [r1, #4]
{
 800eb6e:	4605      	mov	r5, r0
 800eb70:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800eb72:	f7ff ff67 	bl	800ea44 <mbedtls_mpi_grow>
 800eb76:	b998      	cbnz	r0, 800eba0 <mbedtls_mpi_safe_cond_assign+0x38>
    assign = (assign | (unsigned char)-assign) >> 7;
 800eb78:	4262      	negs	r2, r4
 800eb7a:	4322      	orrs	r2, r4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800eb7c:	6834      	ldr	r4, [r6, #0]
 800eb7e:	682b      	ldr	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800eb80:	f8d6 e004 	ldr.w	lr, [r6, #4]
    assign = (assign | (unsigned char)-assign) >> 7;
 800eb84:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800eb88:	f1c2 0101 	rsb	r1, r2, #1
 800eb8c:	4354      	muls	r4, r2
 800eb8e:	fb03 4301 	mla	r3, r3, r1, r4
 800eb92:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800eb94:	4603      	mov	r3, r0
 800eb96:	459e      	cmp	lr, r3
 800eb98:	d103      	bne.n	800eba2 <mbedtls_mpi_safe_cond_assign+0x3a>
    for( ; i < X->n; i++ )
 800eb9a:	686e      	ldr	r6, [r5, #4]
 800eb9c:	429e      	cmp	r6, r3
 800eb9e:	d80e      	bhi.n	800ebbe <mbedtls_mpi_safe_cond_assign+0x56>
}
 800eba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 800eba2:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800eba6:	68b4      	ldr	r4, [r6, #8]
 800eba8:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 800ebac:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800ebb0:	434f      	muls	r7, r1
 800ebb2:	fb04 7402 	mla	r4, r4, r2, r7
 800ebb6:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
 800ebba:	3301      	adds	r3, #1
 800ebbc:	e7eb      	b.n	800eb96 <mbedtls_mpi_safe_cond_assign+0x2e>
        X->p[i] *= ( 1 - assign );
 800ebbe:	68ac      	ldr	r4, [r5, #8]
 800ebc0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800ebc4:	434a      	muls	r2, r1
 800ebc6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( ; i < X->n; i++ )
 800ebca:	3301      	adds	r3, #1
 800ebcc:	e7e6      	b.n	800eb9c <mbedtls_mpi_safe_cond_assign+0x34>

0800ebce <mbedtls_mpi_lset>:
{
 800ebce:	b570      	push	{r4, r5, r6, lr}
 800ebd0:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800ebd2:	2101      	movs	r1, #1
{
 800ebd4:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800ebd6:	f7ff ff35 	bl	800ea44 <mbedtls_mpi_grow>
 800ebda:	4605      	mov	r5, r0
 800ebdc:	b988      	cbnz	r0, 800ec02 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 800ebde:	6862      	ldr	r2, [r4, #4]
 800ebe0:	4601      	mov	r1, r0
 800ebe2:	0092      	lsls	r2, r2, #2
 800ebe4:	68a0      	ldr	r0, [r4, #8]
 800ebe6:	f013 fc73 	bl	80224d0 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 800ebea:	68a3      	ldr	r3, [r4, #8]
 800ebec:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 800ebf0:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 800ebf2:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 800ebf6:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 800ebf8:	bfb4      	ite	lt
 800ebfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebfe:	2301      	movge	r3, #1
 800ec00:	6023      	str	r3, [r4, #0]
}
 800ec02:	4628      	mov	r0, r5
 800ec04:	bd70      	pop	{r4, r5, r6, pc}

0800ec06 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 800ec06:	6843      	ldr	r3, [r0, #4]
 800ec08:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800ec0c:	bf3f      	itttt	cc
 800ec0e:	094a      	lsrcc	r2, r1, #5
 800ec10:	6883      	ldrcc	r3, [r0, #8]
 800ec12:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 800ec16:	f001 011f 	andcc.w	r1, r1, #31
 800ec1a:	bf3a      	itte	cc
 800ec1c:	fa20 f101 	lsrcc.w	r1, r0, r1
 800ec20:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
 800ec24:	2000      	movcs	r0, #0
}
 800ec26:	4770      	bx	lr

0800ec28 <mbedtls_mpi_lsb>:
{
 800ec28:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, j, count = 0;
 800ec2a:	2100      	movs	r1, #0
    for( i = 0; i < X->n; i++ )
 800ec2c:	6845      	ldr	r5, [r0, #4]
 800ec2e:	460a      	mov	r2, r1
 800ec30:	4295      	cmp	r5, r2
 800ec32:	d102      	bne.n	800ec3a <mbedtls_mpi_lsb+0x12>
    return( 0 );
 800ec34:	2400      	movs	r4, #0
}
 800ec36:	4620      	mov	r0, r4
 800ec38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800ec3a:	6883      	ldr	r3, [r0, #8]
 800ec3c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        for( j = 0; j < biL; j++, count++ )
 800ec40:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800ec42:	fa26 f703 	lsr.w	r7, r6, r3
 800ec46:	07ff      	lsls	r7, r7, #31
 800ec48:	eb01 0403 	add.w	r4, r1, r3
 800ec4c:	d4f3      	bmi.n	800ec36 <mbedtls_mpi_lsb+0xe>
        for( j = 0; j < biL; j++, count++ )
 800ec4e:	3301      	adds	r3, #1
 800ec50:	2b20      	cmp	r3, #32
 800ec52:	eb01 0403 	add.w	r4, r1, r3
 800ec56:	d1f4      	bne.n	800ec42 <mbedtls_mpi_lsb+0x1a>
    for( i = 0; i < X->n; i++ )
 800ec58:	3201      	adds	r2, #1
        for( j = 0; j < biL; j++, count++ )
 800ec5a:	4621      	mov	r1, r4
 800ec5c:	e7e8      	b.n	800ec30 <mbedtls_mpi_lsb+0x8>

0800ec5e <mbedtls_mpi_bitlen>:
{
 800ec5e:	4602      	mov	r2, r0
    if( X->n == 0 )
 800ec60:	6840      	ldr	r0, [r0, #4]
 800ec62:	b188      	cbz	r0, 800ec88 <mbedtls_mpi_bitlen+0x2a>
    for( i = X->n - 1; i > 0; i-- )
 800ec64:	6892      	ldr	r2, [r2, #8]
 800ec66:	1e43      	subs	r3, r0, #1
 800ec68:	b97b      	cbnz	r3, 800ec8a <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
 800ec6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
 800ec6e:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800ec70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
 800ec74:	4211      	tst	r1, r2
 800ec76:	d104      	bne.n	800ec82 <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
 800ec78:	3001      	adds	r0, #1
 800ec7a:	2820      	cmp	r0, #32
        mask >>= 1;
 800ec7c:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
 800ec80:	d1f8      	bne.n	800ec74 <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
 800ec82:	3301      	adds	r3, #1
 800ec84:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
 800ec88:	4770      	bx	lr
        if( X->p[i] != 0 )
 800ec8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ec8e:	2900      	cmp	r1, #0
 800ec90:	d1eb      	bne.n	800ec6a <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
 800ec92:	3b01      	subs	r3, #1
 800ec94:	e7e8      	b.n	800ec68 <mbedtls_mpi_bitlen+0xa>

0800ec96 <mbedtls_mpi_size>:
{
 800ec96:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800ec98:	f7ff ffe1 	bl	800ec5e <mbedtls_mpi_bitlen>
 800ec9c:	3007      	adds	r0, #7
}
 800ec9e:	08c0      	lsrs	r0, r0, #3
 800eca0:	bd08      	pop	{r3, pc}

0800eca2 <mbedtls_mpi_read_binary>:
{
 800eca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca4:	4607      	mov	r7, r0
 800eca6:	460c      	mov	r4, r1
 800eca8:	4616      	mov	r6, r2
    for( n = 0; n < buflen; n++ )
 800ecaa:	2500      	movs	r5, #0
 800ecac:	42b5      	cmp	r5, r6
 800ecae:	d001      	beq.n	800ecb4 <mbedtls_mpi_read_binary+0x12>
        if( buf[n] != 0 )
 800ecb0:	5d63      	ldrb	r3, [r4, r5]
 800ecb2:	b1ab      	cbz	r3, 800ece0 <mbedtls_mpi_read_binary+0x3e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, CHARS_TO_LIMBS( buflen - n ) ) );
 800ecb4:	1b71      	subs	r1, r6, r5
 800ecb6:	f011 0303 	ands.w	r3, r1, #3
 800ecba:	bf18      	it	ne
 800ecbc:	2301      	movne	r3, #1
 800ecbe:	eb03 0191 	add.w	r1, r3, r1, lsr #2
 800ecc2:	4638      	mov	r0, r7
 800ecc4:	f7ff febe 	bl	800ea44 <mbedtls_mpi_grow>
 800ecc8:	b948      	cbnz	r0, 800ecde <mbedtls_mpi_read_binary+0x3c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800ecca:	4601      	mov	r1, r0
 800eccc:	4638      	mov	r0, r7
 800ecce:	f7ff ff7e 	bl	800ebce <mbedtls_mpi_lset>
 800ecd2:	b920      	cbnz	r0, 800ecde <mbedtls_mpi_read_binary+0x3c>
 800ecd4:	4434      	add	r4, r6
    for( i = buflen, j = 0; i > n; i--, j++ )
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	1af2      	subs	r2, r6, r3
 800ecda:	42aa      	cmp	r2, r5
 800ecdc:	d802      	bhi.n	800ece4 <mbedtls_mpi_read_binary+0x42>
}
 800ecde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( n = 0; n < buflen; n++ )
 800ece0:	3501      	adds	r5, #1
 800ece2:	e7e3      	b.n	800ecac <mbedtls_mpi_read_binary+0xa>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 800ece4:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
 800ece8:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800ecec:	f023 0c03 	bic.w	ip, r3, #3
 800ecf0:	00d9      	lsls	r1, r3, #3
 800ecf2:	f001 0118 	and.w	r1, r1, #24
 800ecf6:	fa02 f101 	lsl.w	r1, r2, r1
 800ecfa:	f85e 200c 	ldr.w	r2, [lr, ip]
 800ecfe:	430a      	orrs	r2, r1
 800ed00:	f84e 200c 	str.w	r2, [lr, ip]
    for( i = buflen, j = 0; i > n; i--, j++ )
 800ed04:	3301      	adds	r3, #1
 800ed06:	e7e7      	b.n	800ecd8 <mbedtls_mpi_read_binary+0x36>

0800ed08 <mbedtls_mpi_write_binary>:
{
 800ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed0a:	4615      	mov	r5, r2
 800ed0c:	4607      	mov	r7, r0
 800ed0e:	460c      	mov	r4, r1
    n = mbedtls_mpi_size( X );
 800ed10:	f7ff ffc1 	bl	800ec96 <mbedtls_mpi_size>
    if( buflen < n )
 800ed14:	42a8      	cmp	r0, r5
    n = mbedtls_mpi_size( X );
 800ed16:	4606      	mov	r6, r0
    if( buflen < n )
 800ed18:	d816      	bhi.n	800ed48 <mbedtls_mpi_write_binary+0x40>
    memset( buf, 0, buflen );
 800ed1a:	462a      	mov	r2, r5
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f013 fbd6 	bl	80224d0 <memset>
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 800ed24:	1962      	adds	r2, r4, r5
 800ed26:	2300      	movs	r3, #0
 800ed28:	42b3      	cmp	r3, r6
 800ed2a:	d101      	bne.n	800ed30 <mbedtls_mpi_write_binary+0x28>
    return( 0 );
 800ed2c:	2000      	movs	r0, #0
}
 800ed2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 800ed30:	68bd      	ldr	r5, [r7, #8]
 800ed32:	f023 0403 	bic.w	r4, r3, #3
 800ed36:	00d9      	lsls	r1, r3, #3
 800ed38:	f001 0018 	and.w	r0, r1, #24
 800ed3c:	5929      	ldr	r1, [r5, r4]
 800ed3e:	40c1      	lsrs	r1, r0
 800ed40:	f802 1d01 	strb.w	r1, [r2, #-1]!
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 800ed44:	3301      	adds	r3, #1
 800ed46:	e7ef      	b.n	800ed28 <mbedtls_mpi_write_binary+0x20>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 800ed48:	f06f 0007 	mvn.w	r0, #7
 800ed4c:	e7ef      	b.n	800ed2e <mbedtls_mpi_write_binary+0x26>

0800ed4e <mbedtls_mpi_shift_l>:
{
 800ed4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed50:	4604      	mov	r4, r0
 800ed52:	460e      	mov	r6, r1
    v0 = count / (biL    );
 800ed54:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
 800ed56:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 800ed5a:	f7ff ff80 	bl	800ec5e <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 800ed5e:	6863      	ldr	r3, [r4, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 800ed60:	4430      	add	r0, r6
    if( X->n * biL < i )
 800ed62:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 800ed66:	d804      	bhi.n	800ed72 <mbedtls_mpi_shift_l+0x24>
    if( v0 > 0 )
 800ed68:	2e1f      	cmp	r6, #31
 800ed6a:	d80e      	bhi.n	800ed8a <mbedtls_mpi_shift_l+0x3c>
    if( t1 > 0 )
 800ed6c:	bb5f      	cbnz	r7, 800edc6 <mbedtls_mpi_shift_l+0x78>
    ret = 0;
 800ed6e:	2000      	movs	r0, #0
 800ed70:	e00a      	b.n	800ed88 <mbedtls_mpi_shift_l+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800ed72:	f010 011f 	ands.w	r1, r0, #31
 800ed76:	bf18      	it	ne
 800ed78:	2101      	movne	r1, #1
 800ed7a:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f7ff fe60 	bl	800ea44 <mbedtls_mpi_grow>
 800ed84:	2800      	cmp	r0, #0
 800ed86:	d0ef      	beq.n	800ed68 <mbedtls_mpi_shift_l+0x1a>
}
 800ed88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 800ed8a:	6863      	ldr	r3, [r4, #4]
 800ed8c:	f06f 0003 	mvn.w	r0, #3
 800ed90:	009a      	lsls	r2, r3, #2
 800ed92:	4368      	muls	r0, r5
 800ed94:	4619      	mov	r1, r3
 800ed96:	42a9      	cmp	r1, r5
 800ed98:	f1a2 0204 	sub.w	r2, r2, #4
 800ed9c:	d80a      	bhi.n	800edb4 <mbedtls_mpi_shift_l+0x66>
 800ed9e:	42ab      	cmp	r3, r5
 800eda0:	bf28      	it	cs
 800eda2:	462b      	movcs	r3, r5
 800eda4:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
 800eda6:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
 800eda8:	3b04      	subs	r3, #4
 800edaa:	1d19      	adds	r1, r3, #4
 800edac:	d0de      	beq.n	800ed6c <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
 800edae:	68a1      	ldr	r1, [r4, #8]
 800edb0:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
 800edb2:	e7f9      	b.n	800eda8 <mbedtls_mpi_shift_l+0x5a>
            X->p[i - 1] = X->p[i - v0 - 1];
 800edb4:	68a6      	ldr	r6, [r4, #8]
 800edb6:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
 800edba:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 800edbc:	f85c c000 	ldr.w	ip, [ip, r0]
 800edc0:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
 800edc4:	e7e7      	b.n	800ed96 <mbedtls_mpi_shift_l+0x48>
        for( i = v0; i < X->n; i++ )
 800edc6:	6866      	ldr	r6, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;
 800edc8:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
 800edca:	f1c7 0c20 	rsb	ip, r7, #32
        for( i = v0; i < X->n; i++ )
 800edce:	42ae      	cmp	r6, r5
 800edd0:	d9cd      	bls.n	800ed6e <mbedtls_mpi_shift_l+0x20>
            r1 = X->p[i] >> (biL - t1);
 800edd2:	68a0      	ldr	r0, [r4, #8]
 800edd4:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
            X->p[i] <<= t1;
 800edd8:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
 800eddc:	4313      	orrs	r3, r2
 800edde:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            r0 = r1;
 800ede2:	fa21 f20c 	lsr.w	r2, r1, ip
        for( i = v0; i < X->n; i++ )
 800ede6:	3501      	adds	r5, #1
 800ede8:	e7f1      	b.n	800edce <mbedtls_mpi_shift_l+0x80>

0800edea <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800edea:	6843      	ldr	r3, [r0, #4]
{
 800edec:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
 800edee:	094e      	lsrs	r6, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800edf0:	42b3      	cmp	r3, r6
    v1 = count & (biL - 1);
 800edf2:	f001 041f 	and.w	r4, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800edf6:	d301      	bcc.n	800edfc <mbedtls_mpi_shift_r+0x12>
 800edf8:	d104      	bne.n	800ee04 <mbedtls_mpi_shift_r+0x1a>
 800edfa:	b35c      	cbz	r4, 800ee54 <mbedtls_mpi_shift_r+0x6a>
}
 800edfc:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
 800edfe:	2100      	movs	r1, #0
 800ee00:	f7ff bee5 	b.w	800ebce <mbedtls_mpi_lset>
    if( v0 > 0 )
 800ee04:	291f      	cmp	r1, #31
 800ee06:	d827      	bhi.n	800ee58 <mbedtls_mpi_shift_r+0x6e>
    if( v1 > 0 )
 800ee08:	bb04      	cbnz	r4, 800ee4c <mbedtls_mpi_shift_r+0x62>
}
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	bcf0      	pop	{r4, r5, r6, r7}
 800ee0e:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
 800ee10:	6882      	ldr	r2, [r0, #8]
 800ee12:	5957      	ldr	r7, [r2, r5]
 800ee14:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 800ee18:	3504      	adds	r5, #4
 800ee1a:	3101      	adds	r1, #1
 800ee1c:	1b9a      	subs	r2, r3, r6
 800ee1e:	428a      	cmp	r2, r1
 800ee20:	d8f6      	bhi.n	800ee10 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
 800ee22:	2100      	movs	r1, #0
        for( ; i < X->n; i++ )
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d9ef      	bls.n	800ee08 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
 800ee28:	6885      	ldr	r5, [r0, #8]
 800ee2a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
        for( ; i < X->n; i++ )
 800ee2e:	3201      	adds	r2, #1
 800ee30:	e7f8      	b.n	800ee24 <mbedtls_mpi_shift_r+0x3a>
            r1 = X->p[i - 1] << (biL - v1);
 800ee32:	6886      	ldr	r6, [r0, #8]
 800ee34:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
 800ee38:	fa25 f204 	lsr.w	r2, r5, r4
            X->p[i - 1] |= r0;
 800ee3c:	430a      	orrs	r2, r1
 800ee3e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
            r0 = r1;
 800ee42:	fa05 f107 	lsl.w	r1, r5, r7
        for( i = X->n; i > 0; i-- )
 800ee46:	3b01      	subs	r3, #1
 800ee48:	d2f3      	bcs.n	800ee32 <mbedtls_mpi_shift_r+0x48>
 800ee4a:	e7de      	b.n	800ee0a <mbedtls_mpi_shift_r+0x20>
    mbedtls_mpi_uint r0 = 0, r1;
 800ee4c:	2100      	movs	r1, #0
            r1 = X->p[i - 1] << (biL - v1);
 800ee4e:	f1c4 0720 	rsb	r7, r4, #32
 800ee52:	e7f8      	b.n	800ee46 <mbedtls_mpi_shift_r+0x5c>
    if( v0 > 0 )
 800ee54:	291f      	cmp	r1, #31
 800ee56:	d9d8      	bls.n	800ee0a <mbedtls_mpi_shift_r+0x20>
 800ee58:	00b5      	lsls	r5, r6, #2
{
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	e7de      	b.n	800ee1c <mbedtls_mpi_shift_r+0x32>

0800ee5e <mbedtls_mpi_cmp_abs>:
{
 800ee5e:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
 800ee60:	6843      	ldr	r3, [r0, #4]
 800ee62:	b92b      	cbnz	r3, 800ee70 <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
 800ee64:	684a      	ldr	r2, [r1, #4]
 800ee66:	b962      	cbnz	r2, 800ee82 <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
 800ee68:	1e18      	subs	r0, r3, #0
 800ee6a:	bf18      	it	ne
 800ee6c:	2001      	movne	r0, #1
 800ee6e:	e028      	b.n	800eec2 <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
 800ee70:	6882      	ldr	r2, [r0, #8]
 800ee72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ee76:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800ee7a:	2a00      	cmp	r2, #0
 800ee7c:	d1f2      	bne.n	800ee64 <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	e7ef      	b.n	800ee62 <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
 800ee82:	688c      	ldr	r4, [r1, #8]
 800ee84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ee88:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800ee8c:	b985      	cbnz	r5, 800eeb0 <mbedtls_mpi_cmp_abs+0x52>
    for( j = Y->n; j > 0; j-- )
 800ee8e:	3a01      	subs	r2, #1
 800ee90:	e7e9      	b.n	800ee66 <mbedtls_mpi_cmp_abs+0x8>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800ee92:	6882      	ldr	r2, [r0, #8]
 800ee94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ee98:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800ee9c:	4291      	cmp	r1, r2
 800ee9e:	d805      	bhi.n	800eeac <mbedtls_mpi_cmp_abs+0x4e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800eea0:	f103 33ff 	add.w	r3, r3, #4294967295
 800eea4:	d20a      	bcs.n	800eebc <mbedtls_mpi_cmp_abs+0x5e>
    if( j > i ) return( -1 );
 800eea6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeaa:	e00a      	b.n	800eec2 <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
 800eeac:	2001      	movs	r0, #1
 800eeae:	e008      	b.n	800eec2 <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
 800eeb0:	b10b      	cbz	r3, 800eeb6 <mbedtls_mpi_cmp_abs+0x58>
    if( i > j ) return(  1 );
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d8fa      	bhi.n	800eeac <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d3f5      	bcc.n	800eea6 <mbedtls_mpi_cmp_abs+0x48>
 800eeba:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
 800eebc:	1c5a      	adds	r2, r3, #1
 800eebe:	d1e8      	bne.n	800ee92 <mbedtls_mpi_cmp_abs+0x34>
    return( 0 );
 800eec0:	2000      	movs	r0, #0
}
 800eec2:	bd30      	pop	{r4, r5, pc}

0800eec4 <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 800eec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec8:	4615      	mov	r5, r2
 800eeca:	9301      	str	r3, [sp, #4]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 800eecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eece:	685a      	ldr	r2, [r3, #4]
 800eed0:	686b      	ldr	r3, [r5, #4]
 800eed2:	3301      	adds	r3, #1
 800eed4:	429a      	cmp	r2, r3
{
 800eed6:	4606      	mov	r6, r0
 800eed8:	468a      	mov	sl, r1
    if( T->n < N->n + 1 || T->p == NULL )
 800eeda:	d357      	bcc.n	800ef8c <mpi_montmul+0xc8>
 800eedc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eede:	6898      	ldr	r0, [r3, #8]
 800eee0:	2800      	cmp	r0, #0
 800eee2:	d053      	beq.n	800ef8c <mpi_montmul+0xc8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 800eee4:	0092      	lsls	r2, r2, #2
 800eee6:	2100      	movs	r1, #0
 800eee8:	f013 faf2 	bl	80224d0 <memset>

    d = T->p;
 800eeec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    n = N->n;
 800eeee:	f8d5 9004 	ldr.w	r9, [r5, #4]
    d = T->p;
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 800eef6:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
 800eefa:	f8dd 8000 	ldr.w	r8, [sp]
    m = ( B->n < n ) ? B->n : n;
 800eefe:	454b      	cmp	r3, r9
 800ef00:	bf28      	it	cs
 800ef02:	464b      	movcs	r3, r9
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 800ef04:	f109 0701 	add.w	r7, r9, #1
    m = ( B->n < n ) ? B->n : n;
 800ef08:	ee07 3a90 	vmov	s15, r3
        *d++ = u0; d[n + 1] = 0;
 800ef0c:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 800ef0e:	2400      	movs	r4, #0
 800ef10:	454c      	cmp	r4, r9
 800ef12:	68b0      	ldr	r0, [r6, #8]
 800ef14:	d119      	bne.n	800ef4a <mpi_montmul+0x86>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 800ef16:	9b00      	ldr	r3, [sp, #0]
 800ef18:	1f39      	subs	r1, r7, #4
 800ef1a:	440b      	add	r3, r1
 800ef1c:	463a      	mov	r2, r7
 800ef1e:	4619      	mov	r1, r3
 800ef20:	f013 faae 	bl	8022480 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 800ef24:	4629      	mov	r1, r5
 800ef26:	4630      	mov	r0, r6
 800ef28:	f7ff ff99 	bl	800ee5e <mbedtls_mpi_cmp_abs>
 800ef2c:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 800ef2e:	bfb3      	iteet	lt
 800ef30:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
        mpi_sub_hlp( n, N->p, A->p );
 800ef32:	68b2      	ldrge	r2, [r6, #8]
 800ef34:	68a9      	ldrge	r1, [r5, #8]
        mpi_sub_hlp( n, A->p, T->p );
 800ef36:	689a      	ldrlt	r2, [r3, #8]
 800ef38:	bfb8      	it	lt
 800ef3a:	68b1      	ldrlt	r1, [r6, #8]
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	f7ff fbc7 	bl	800e6d0 <mpi_sub_hlp>

    return( 0 );
 800ef42:	2000      	movs	r0, #0
}
 800ef44:	b003      	add	sp, #12
 800ef46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800ef4a:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
 800ef4e:	f850 b024 	ldr.w	fp, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800ef52:	680b      	ldr	r3, [r1, #0]
 800ef54:	f8d8 0000 	ldr.w	r0, [r8]
 800ef58:	9a01      	ldr	r2, [sp, #4]
 800ef5a:	fb03 030b 	mla	r3, r3, fp, r0
 800ef5e:	4353      	muls	r3, r2
 800ef60:	ee07 3a10 	vmov	s14, r3
        mpi_mul_hlp( m, B->p, d, u0 );
 800ef64:	ee17 0a90 	vmov	r0, s15
 800ef68:	4642      	mov	r2, r8
 800ef6a:	465b      	mov	r3, fp
 800ef6c:	f7ff fbd9 	bl	800e722 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 800ef70:	4642      	mov	r2, r8
 800ef72:	ee17 3a10 	vmov	r3, s14
 800ef76:	68a9      	ldr	r1, [r5, #8]
 800ef78:	4648      	mov	r0, r9
 800ef7a:	f7ff fbd2 	bl	800e722 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 800ef7e:	f848 bb04 	str.w	fp, [r8], #4
 800ef82:	2300      	movs	r3, #0
 800ef84:	f848 3007 	str.w	r3, [r8, r7]
    for( i = 0; i < n; i++ )
 800ef88:	3401      	adds	r4, #1
 800ef8a:	e7c1      	b.n	800ef10 <mpi_montmul+0x4c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800ef8c:	f06f 0003 	mvn.w	r0, #3
 800ef90:	e7d8      	b.n	800ef44 <mpi_montmul+0x80>

0800ef92 <mbedtls_mpi_cmp_mpi>:
{
 800ef92:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
 800ef94:	6843      	ldr	r3, [r0, #4]
{
 800ef96:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
 800ef98:	b923      	cbnz	r3, 800efa4 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
 800ef9a:	6848      	ldr	r0, [r1, #4]
 800ef9c:	b958      	cbnz	r0, 800efb6 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d138      	bne.n	800f014 <mbedtls_mpi_cmp_mpi+0x82>
 800efa2:	e031      	b.n	800f008 <mbedtls_mpi_cmp_mpi+0x76>
        if( X->p[i - 1] != 0 )
 800efa4:	6890      	ldr	r0, [r2, #8]
 800efa6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800efaa:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800efae:	2800      	cmp	r0, #0
 800efb0:	d1f3      	bne.n	800ef9a <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
 800efb2:	3b01      	subs	r3, #1
 800efb4:	e7f0      	b.n	800ef98 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
 800efb6:	688c      	ldr	r4, [r1, #8]
 800efb8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800efbc:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800efc0:	bb25      	cbnz	r5, 800f00c <mbedtls_mpi_cmp_mpi+0x7a>
    for( j = Y->n; j > 0; j-- )
 800efc2:	3801      	subs	r0, #1
 800efc4:	e7ea      	b.n	800ef9c <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
 800efc6:	4283      	cmp	r3, r0
 800efc8:	6809      	ldr	r1, [r1, #0]
 800efca:	d201      	bcs.n	800efd0 <mbedtls_mpi_cmp_mpi+0x3e>
 800efcc:	4248      	negs	r0, r1
 800efce:	e022      	b.n	800f016 <mbedtls_mpi_cmp_mpi+0x84>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800efd0:	6810      	ldr	r0, [r2, #0]
 800efd2:	2800      	cmp	r0, #0
 800efd4:	dd03      	ble.n	800efde <mbedtls_mpi_cmp_mpi+0x4c>
 800efd6:	2900      	cmp	r1, #0
 800efd8:	da13      	bge.n	800f002 <mbedtls_mpi_cmp_mpi+0x70>
 800efda:	2001      	movs	r0, #1
 800efdc:	e01b      	b.n	800f016 <mbedtls_mpi_cmp_mpi+0x84>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800efde:	2900      	cmp	r1, #0
 800efe0:	dd0f      	ble.n	800f002 <mbedtls_mpi_cmp_mpi+0x70>
 800efe2:	b170      	cbz	r0, 800f002 <mbedtls_mpi_cmp_mpi+0x70>
 800efe4:	f04f 30ff 	mov.w	r0, #4294967295
 800efe8:	e015      	b.n	800f016 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800efea:	6891      	ldr	r1, [r2, #8]
 800efec:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800eff0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800eff4:	428d      	cmp	r5, r1
 800eff6:	d80e      	bhi.n	800f016 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800eff8:	f103 33ff 	add.w	r3, r3, #4294967295
 800effc:	d202      	bcs.n	800f004 <mbedtls_mpi_cmp_mpi+0x72>
 800effe:	4240      	negs	r0, r0
 800f000:	e009      	b.n	800f016 <mbedtls_mpi_cmp_mpi+0x84>
 800f002:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
 800f004:	1c59      	adds	r1, r3, #1
 800f006:	d1f0      	bne.n	800efea <mbedtls_mpi_cmp_mpi+0x58>
    return( 0 );
 800f008:	2000      	movs	r0, #0
 800f00a:	e004      	b.n	800f016 <mbedtls_mpi_cmp_mpi+0x84>
    if( i == 0 && j == 0 )
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d0da      	beq.n	800efc6 <mbedtls_mpi_cmp_mpi+0x34>
    if( i > j ) return(  X->s );
 800f010:	4283      	cmp	r3, r0
 800f012:	d9d8      	bls.n	800efc6 <mbedtls_mpi_cmp_mpi+0x34>
 800f014:	6810      	ldr	r0, [r2, #0]
}
 800f016:	bd30      	pop	{r4, r5, pc}

0800f018 <mbedtls_mpi_cmp_int>:
{
 800f018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 800f01a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800f01e:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 800f022:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 800f024:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 800f026:	bfb4      	ite	lt
 800f028:	f04f 33ff 	movlt.w	r3, #4294967295
 800f02c:	2301      	movge	r3, #1
 800f02e:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800f030:	a901      	add	r1, sp, #4
    Y.n = 1;
 800f032:	2301      	movs	r3, #1
 800f034:	9302      	str	r3, [sp, #8]
    Y.p = p;
 800f036:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800f03a:	f7ff ffaa 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
}
 800f03e:	b005      	add	sp, #20
 800f040:	f85d fb04 	ldr.w	pc, [sp], #4

0800f044 <mbedtls_mpi_add_abs>:
    if( X == B )
 800f044:	4290      	cmp	r0, r2
{
 800f046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f04a:	4607      	mov	r7, r0
 800f04c:	460d      	mov	r5, r1
 800f04e:	4616      	mov	r6, r2
    if( X == B )
 800f050:	d002      	beq.n	800f058 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 800f052:	4288      	cmp	r0, r1
 800f054:	d129      	bne.n	800f0aa <mbedtls_mpi_add_abs+0x66>
{
 800f056:	4635      	mov	r5, r6
    X->s = 1;
 800f058:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
 800f05a:	686e      	ldr	r6, [r5, #4]
    X->s = 1;
 800f05c:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
 800f05e:	bb66      	cbnz	r6, 800f0ba <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800f060:	4631      	mov	r1, r6
 800f062:	4638      	mov	r0, r7
 800f064:	f7ff fcee 	bl	800ea44 <mbedtls_mpi_grow>
 800f068:	4604      	mov	r4, r0
 800f06a:	bb18      	cbnz	r0, 800f0b4 <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	68a9      	ldr	r1, [r5, #8]
 800f070:	4605      	mov	r5, r0
    for( i = 0; i < j; i++, o++, p++ )
 800f072:	4286      	cmp	r6, r0
 800f074:	d12a      	bne.n	800f0cc <mbedtls_mpi_add_abs+0x88>
 800f076:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    while( c != 0 )
 800f07a:	b1dd      	cbz	r5, 800f0b4 <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	42b2      	cmp	r2, r6
 800f080:	f106 0801 	add.w	r8, r6, #1
 800f084:	d808      	bhi.n	800f098 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800f086:	4641      	mov	r1, r8
 800f088:	4638      	mov	r0, r7
 800f08a:	f7ff fcdb 	bl	800ea44 <mbedtls_mpi_grow>
 800f08e:	2800      	cmp	r0, #0
 800f090:	d12f      	bne.n	800f0f2 <mbedtls_mpi_add_abs+0xae>
            p = X->p + i;
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	eb03 0386 	add.w	r3, r3, r6, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	1955      	adds	r5, r2, r5
 800f09c:	f843 5b04 	str.w	r5, [r3], #4
 800f0a0:	4646      	mov	r6, r8
 800f0a2:	bf2c      	ite	cs
 800f0a4:	2501      	movcs	r5, #1
 800f0a6:	2500      	movcc	r5, #0
 800f0a8:	e7e7      	b.n	800f07a <mbedtls_mpi_add_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800f0aa:	f7ff fd33 	bl	800eb14 <mbedtls_mpi_copy>
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d0d0      	beq.n	800f056 <mbedtls_mpi_add_abs+0x12>
}
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 800f0ba:	68ab      	ldr	r3, [r5, #8]
 800f0bc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f0c0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1cb      	bne.n	800f060 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
 800f0c8:	3e01      	subs	r6, #1
 800f0ca:	e7c8      	b.n	800f05e <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
 800f0cc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800f0d0:	eb12 0c05 	adds.w	ip, r2, r5
 800f0d4:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 800f0d8:	bf2c      	ite	cs
 800f0da:	2501      	movcs	r5, #1
 800f0dc:	2500      	movcc	r5, #0
        *p += tmp; c += ( *p < tmp );
 800f0de:	eb1c 0202 	adds.w	r2, ip, r2
 800f0e2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800f0e6:	bf2c      	ite	cs
 800f0e8:	2201      	movcs	r2, #1
 800f0ea:	2200      	movcc	r2, #0
 800f0ec:	4415      	add	r5, r2
    for( i = 0; i < j; i++, o++, p++ )
 800f0ee:	3001      	adds	r0, #1
 800f0f0:	e7bf      	b.n	800f072 <mbedtls_mpi_add_abs+0x2e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800f0f2:	4604      	mov	r4, r0
    return( ret );
 800f0f4:	e7de      	b.n	800f0b4 <mbedtls_mpi_add_abs+0x70>

0800f0f6 <mbedtls_mpi_sub_abs>:
{
 800f0f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0f8:	460f      	mov	r7, r1
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f0fe:	4611      	mov	r1, r2
 800f100:	4638      	mov	r0, r7
{
 800f102:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f104:	f7ff feab 	bl	800ee5e <mbedtls_mpi_cmp_abs>
 800f108:	2800      	cmp	r0, #0
 800f10a:	db2e      	blt.n	800f16a <mbedtls_mpi_sub_abs+0x74>
    X->n = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	2201      	movs	r2, #1
    if( X == B )
 800f110:	42b5      	cmp	r5, r6
    X->n = 0;
 800f112:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
 800f116:	9303      	str	r3, [sp, #12]
    if( X == B )
 800f118:	d106      	bne.n	800f128 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800f11a:	4629      	mov	r1, r5
 800f11c:	a801      	add	r0, sp, #4
 800f11e:	f7ff fcf9 	bl	800eb14 <mbedtls_mpi_copy>
 800f122:	4604      	mov	r4, r0
 800f124:	b998      	cbnz	r0, 800f14e <mbedtls_mpi_sub_abs+0x58>
        B = &TB;
 800f126:	ad01      	add	r5, sp, #4
    if( X != A )
 800f128:	42b7      	cmp	r7, r6
 800f12a:	d109      	bne.n	800f140 <mbedtls_mpi_sub_abs+0x4a>
    X->s = 1;
 800f12c:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800f130:	2301      	movs	r3, #1
 800f132:	6033      	str	r3, [r6, #0]
    for( n = B->n; n > 0; n-- )
 800f134:	b988      	cbnz	r0, 800f15a <mbedtls_mpi_sub_abs+0x64>
    mpi_sub_hlp( n, B->p, X->p );
 800f136:	68b2      	ldr	r2, [r6, #8]
 800f138:	f7ff faca 	bl	800e6d0 <mpi_sub_hlp>
    ret = 0;
 800f13c:	2400      	movs	r4, #0
 800f13e:	e006      	b.n	800f14e <mbedtls_mpi_sub_abs+0x58>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800f140:	4639      	mov	r1, r7
 800f142:	4630      	mov	r0, r6
 800f144:	f7ff fce6 	bl	800eb14 <mbedtls_mpi_copy>
 800f148:	4604      	mov	r4, r0
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d0ee      	beq.n	800f12c <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
 800f14e:	a801      	add	r0, sp, #4
 800f150:	f7ff fc60 	bl	800ea14 <mbedtls_mpi_free>
}
 800f154:	4620      	mov	r0, r4
 800f156:	b005      	add	sp, #20
 800f158:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 800f15a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800f15e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1e7      	bne.n	800f136 <mbedtls_mpi_sub_abs+0x40>
    for( n = B->n; n > 0; n-- )
 800f166:	3801      	subs	r0, #1
 800f168:	e7e4      	b.n	800f134 <mbedtls_mpi_sub_abs+0x3e>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800f16a:	f06f 0409 	mvn.w	r4, #9
 800f16e:	e7f1      	b.n	800f154 <mbedtls_mpi_sub_abs+0x5e>

0800f170 <mbedtls_mpi_add_mpi>:
{
 800f170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 800f172:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
 800f174:	6813      	ldr	r3, [r2, #0]
 800f176:	436b      	muls	r3, r5
{
 800f178:	4604      	mov	r4, r0
 800f17a:	460f      	mov	r7, r1
 800f17c:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 800f17e:	d516      	bpl.n	800f1ae <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800f180:	4611      	mov	r1, r2
 800f182:	4638      	mov	r0, r7
 800f184:	f7ff fe6b 	bl	800ee5e <mbedtls_mpi_cmp_abs>
 800f188:	2800      	cmp	r0, #0
 800f18a:	db06      	blt.n	800f19a <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800f18c:	4632      	mov	r2, r6
 800f18e:	4639      	mov	r1, r7
 800f190:	4620      	mov	r0, r4
 800f192:	f7ff ffb0 	bl	800f0f6 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f196:	b140      	cbz	r0, 800f1aa <mbedtls_mpi_add_mpi+0x3a>
}
 800f198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800f19a:	463a      	mov	r2, r7
 800f19c:	4631      	mov	r1, r6
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f7ff ffa9 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d1f7      	bne.n	800f198 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 800f1a8:	426d      	negs	r5, r5
        X->s = s;
 800f1aa:	6025      	str	r5, [r4, #0]
    return( ret );
 800f1ac:	e7f4      	b.n	800f198 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f1ae:	f7ff ff49 	bl	800f044 <mbedtls_mpi_add_abs>
 800f1b2:	e7f0      	b.n	800f196 <mbedtls_mpi_add_mpi+0x26>

0800f1b4 <mbedtls_mpi_sub_mpi>:
{
 800f1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 800f1b6:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
 800f1b8:	6813      	ldr	r3, [r2, #0]
 800f1ba:	436b      	muls	r3, r5
 800f1bc:	2b00      	cmp	r3, #0
{
 800f1be:	4604      	mov	r4, r0
 800f1c0:	460f      	mov	r7, r1
 800f1c2:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 800f1c4:	dd16      	ble.n	800f1f4 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	4638      	mov	r0, r7
 800f1ca:	f7ff fe48 	bl	800ee5e <mbedtls_mpi_cmp_abs>
 800f1ce:	2800      	cmp	r0, #0
 800f1d0:	db06      	blt.n	800f1e0 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800f1d2:	4632      	mov	r2, r6
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f7ff ff8d 	bl	800f0f6 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f1dc:	b140      	cbz	r0, 800f1f0 <mbedtls_mpi_sub_mpi+0x3c>
}
 800f1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800f1e0:	463a      	mov	r2, r7
 800f1e2:	4631      	mov	r1, r6
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f7ff ff86 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	d1f7      	bne.n	800f1de <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 800f1ee:	426d      	negs	r5, r5
        X->s = s;
 800f1f0:	6025      	str	r5, [r4, #0]
    return( ret );
 800f1f2:	e7f4      	b.n	800f1de <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f1f4:	f7ff ff26 	bl	800f044 <mbedtls_mpi_add_abs>
 800f1f8:	e7f0      	b.n	800f1dc <mbedtls_mpi_sub_mpi+0x28>

0800f1fa <mbedtls_mpi_sub_int>:
{
 800f1fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 800f1fc:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800f200:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 800f204:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 800f206:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 800f208:	bfb4      	ite	lt
 800f20a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f20e:	2301      	movge	r3, #1
 800f210:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800f212:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800f214:	2301      	movs	r3, #1
 800f216:	9302      	str	r3, [sp, #8]
    _B.p = p;
 800f218:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800f21c:	f7ff ffca 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
}
 800f220:	b005      	add	sp, #20
 800f222:	f85d fb04 	ldr.w	pc, [sp], #4

0800f226 <mbedtls_mpi_mul_mpi>:
{
 800f226:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
 800f22a:	2300      	movs	r3, #0
{
 800f22c:	b087      	sub	sp, #28
 800f22e:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800f230:	4288      	cmp	r0, r1
    X->n = 0;
 800f232:	f04f 0201 	mov.w	r2, #1
 800f236:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
 800f23a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
 800f23e:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
 800f242:	4680      	mov	r8, r0
 800f244:	460e      	mov	r6, r1
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800f246:	d105      	bne.n	800f254 <mbedtls_mpi_mul_mpi+0x2e>
 800f248:	4668      	mov	r0, sp
 800f24a:	f7ff fc63 	bl	800eb14 <mbedtls_mpi_copy>
 800f24e:	4604      	mov	r4, r0
 800f250:	b9e8      	cbnz	r0, 800f28e <mbedtls_mpi_mul_mpi+0x68>
 800f252:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 800f254:	45a8      	cmp	r8, r5
 800f256:	d106      	bne.n	800f266 <mbedtls_mpi_mul_mpi+0x40>
 800f258:	4641      	mov	r1, r8
 800f25a:	a803      	add	r0, sp, #12
 800f25c:	f7ff fc5a 	bl	800eb14 <mbedtls_mpi_copy>
 800f260:	4604      	mov	r4, r0
 800f262:	b9a0      	cbnz	r0, 800f28e <mbedtls_mpi_mul_mpi+0x68>
 800f264:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 800f266:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800f26a:	f1b9 0f00 	cmp.w	r9, #0
 800f26e:	d118      	bne.n	800f2a2 <mbedtls_mpi_mul_mpi+0x7c>
    for( j = B->n; j > 0; j-- )
 800f270:	686f      	ldr	r7, [r5, #4]
 800f272:	bb07      	cbnz	r7, 800f2b6 <mbedtls_mpi_mul_mpi+0x90>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800f274:	eb09 0107 	add.w	r1, r9, r7
 800f278:	4640      	mov	r0, r8
 800f27a:	f7ff fbe3 	bl	800ea44 <mbedtls_mpi_grow>
 800f27e:	4604      	mov	r4, r0
 800f280:	b928      	cbnz	r0, 800f28e <mbedtls_mpi_mul_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800f282:	4601      	mov	r1, r0
 800f284:	4640      	mov	r0, r8
 800f286:	f7ff fca2 	bl	800ebce <mbedtls_mpi_lset>
 800f28a:	4604      	mov	r4, r0
 800f28c:	b338      	cbz	r0, 800f2de <mbedtls_mpi_mul_mpi+0xb8>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 800f28e:	a803      	add	r0, sp, #12
 800f290:	f7ff fbc0 	bl	800ea14 <mbedtls_mpi_free>
 800f294:	4668      	mov	r0, sp
 800f296:	f7ff fbbd 	bl	800ea14 <mbedtls_mpi_free>
}
 800f29a:	4620      	mov	r0, r4
 800f29c:	b007      	add	sp, #28
 800f29e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( A->p[i - 1] != 0 )
 800f2a2:	68b3      	ldr	r3, [r6, #8]
 800f2a4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f2a8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d1df      	bne.n	800f270 <mbedtls_mpi_mul_mpi+0x4a>
    for( i = A->n; i > 0; i-- )
 800f2b0:	f109 39ff 	add.w	r9, r9, #4294967295
 800f2b4:	e7d9      	b.n	800f26a <mbedtls_mpi_mul_mpi+0x44>
        if( B->p[j - 1] != 0 )
 800f2b6:	68ab      	ldr	r3, [r5, #8]
 800f2b8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800f2bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d1d7      	bne.n	800f274 <mbedtls_mpi_mul_mpi+0x4e>
    for( j = B->n; j > 0; j-- )
 800f2c4:	3f01      	subs	r7, #1
 800f2c6:	e7d4      	b.n	800f272 <mbedtls_mpi_mul_mpi+0x4c>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 800f2c8:	68ab      	ldr	r3, [r5, #8]
 800f2ca:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f2ce:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800f2d2:	68b1      	ldr	r1, [r6, #8]
 800f2d4:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800f2d8:	4648      	mov	r0, r9
 800f2da:	f7ff fa22 	bl	800e722 <mpi_mul_hlp>
    for( i++; j > 0; j-- )
 800f2de:	3f01      	subs	r7, #1
 800f2e0:	d2f2      	bcs.n	800f2c8 <mbedtls_mpi_mul_mpi+0xa2>
    X->s = A->s * B->s;
 800f2e2:	6832      	ldr	r2, [r6, #0]
 800f2e4:	682b      	ldr	r3, [r5, #0]
 800f2e6:	4353      	muls	r3, r2
 800f2e8:	f8c8 3000 	str.w	r3, [r8]
 800f2ec:	e7cf      	b.n	800f28e <mbedtls_mpi_mul_mpi+0x68>

0800f2ee <mbedtls_mpi_mul_int>:
{
 800f2ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 800f2f0:	2301      	movs	r3, #1
    p[0] = b;
 800f2f2:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800f2f4:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800f2f6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
 800f2fa:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800f2fe:	f7ff ff92 	bl	800f226 <mbedtls_mpi_mul_mpi>
}
 800f302:	b005      	add	sp, #20
 800f304:	f85d fb04 	ldr.w	pc, [sp], #4

0800f308 <mbedtls_mpi_div_mpi>:
{
 800f308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f30c:	ed2d 8b02 	vpush	{d8}
 800f310:	4606      	mov	r6, r0
 800f312:	b095      	sub	sp, #84	; 0x54
 800f314:	4688      	mov	r8, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800f316:	4618      	mov	r0, r3
 800f318:	2100      	movs	r1, #0
{
 800f31a:	ee08 3a90 	vmov	s17, r3
 800f31e:	4691      	mov	r9, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800f320:	f7ff fe7a 	bl	800f018 <mbedtls_mpi_cmp_int>
 800f324:	2800      	cmp	r0, #0
 800f326:	f000 81a9 	beq.w	800f67c <mbedtls_mpi_div_mpi+0x374>
    X->n = 0;
 800f32a:	2400      	movs	r4, #0
 800f32c:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f32e:	ee18 1a90 	vmov	r1, s17
 800f332:	4648      	mov	r0, r9
    X->n = 0;
 800f334:	e9cd 5405 	strd	r5, r4, [sp, #20]
    X->s = 1;
 800f338:	e9cd 4507 	strd	r4, r5, [sp, #28]
    X->p = NULL;
 800f33c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    X->n = 0;
 800f340:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
    X->s = 1;
 800f344:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
    X->p = NULL;
 800f348:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    X->n = 0;
 800f34c:	e9cd 5411 	strd	r5, r4, [sp, #68]	; 0x44
    X->p = NULL;
 800f350:	9413      	str	r4, [sp, #76]	; 0x4c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f352:	f7ff fd84 	bl	800ee5e <mbedtls_mpi_cmp_abs>
 800f356:	42a0      	cmp	r0, r4
 800f358:	da29      	bge.n	800f3ae <mbedtls_mpi_div_mpi+0xa6>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800f35a:	b94e      	cbnz	r6, 800f370 <mbedtls_mpi_div_mpi+0x68>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800f35c:	f1b8 0f00 	cmp.w	r8, #0
 800f360:	d11d      	bne.n	800f39e <mbedtls_mpi_div_mpi+0x96>
        return( 0 );
 800f362:	2400      	movs	r4, #0
}
 800f364:	4620      	mov	r0, r4
 800f366:	b015      	add	sp, #84	; 0x54
 800f368:	ecbd 8b02 	vpop	{d8}
 800f36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800f370:	4621      	mov	r1, r4
 800f372:	4630      	mov	r0, r6
 800f374:	f7ff fc2b 	bl	800ebce <mbedtls_mpi_lset>
 800f378:	4604      	mov	r4, r0
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d0ee      	beq.n	800f35c <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800f37e:	a805      	add	r0, sp, #20
 800f380:	f7ff fb48 	bl	800ea14 <mbedtls_mpi_free>
 800f384:	a808      	add	r0, sp, #32
 800f386:	f7ff fb45 	bl	800ea14 <mbedtls_mpi_free>
 800f38a:	a80b      	add	r0, sp, #44	; 0x2c
 800f38c:	f7ff fb42 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 800f390:	a80e      	add	r0, sp, #56	; 0x38
 800f392:	f7ff fb3f 	bl	800ea14 <mbedtls_mpi_free>
 800f396:	a811      	add	r0, sp, #68	; 0x44
 800f398:	f7ff fb3c 	bl	800ea14 <mbedtls_mpi_free>
    return( ret );
 800f39c:	e7e2      	b.n	800f364 <mbedtls_mpi_div_mpi+0x5c>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800f39e:	4649      	mov	r1, r9
 800f3a0:	4640      	mov	r0, r8
 800f3a2:	f7ff fbb7 	bl	800eb14 <mbedtls_mpi_copy>
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d1e8      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
 800f3ac:	e7d9      	b.n	800f362 <mbedtls_mpi_div_mpi+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800f3ae:	4649      	mov	r1, r9
 800f3b0:	a805      	add	r0, sp, #20
 800f3b2:	f7ff fbaf 	bl	800eb14 <mbedtls_mpi_copy>
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	d1e0      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 800f3bc:	af08      	add	r7, sp, #32
 800f3be:	ee18 1a90 	vmov	r1, s17
 800f3c2:	4638      	mov	r0, r7
 800f3c4:	f7ff fba6 	bl	800eb14 <mbedtls_mpi_copy>
 800f3c8:	4604      	mov	r4, r0
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	d1d7      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800f3ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
    X.s = Y.s = 1;
 800f3d2:	9508      	str	r5, [sp, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800f3d4:	3102      	adds	r1, #2
 800f3d6:	a80b      	add	r0, sp, #44	; 0x2c
    X.s = Y.s = 1;
 800f3d8:	9505      	str	r5, [sp, #20]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800f3da:	f7ff fb33 	bl	800ea44 <mbedtls_mpi_grow>
 800f3de:	4604      	mov	r4, r0
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d1cc      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800f3e4:	4601      	mov	r1, r0
 800f3e6:	a80b      	add	r0, sp, #44	; 0x2c
 800f3e8:	f7ff fbf1 	bl	800ebce <mbedtls_mpi_lset>
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d1c5      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 800f3f2:	2102      	movs	r1, #2
 800f3f4:	a80e      	add	r0, sp, #56	; 0x38
 800f3f6:	f7ff fb25 	bl	800ea44 <mbedtls_mpi_grow>
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d1be      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 800f400:	2103      	movs	r1, #3
 800f402:	a811      	add	r0, sp, #68	; 0x44
 800f404:	f7ff fb1e 	bl	800ea44 <mbedtls_mpi_grow>
 800f408:	4604      	mov	r4, r0
 800f40a:	2800      	cmp	r0, #0
 800f40c:	d1b7      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800f40e:	4638      	mov	r0, r7
 800f410:	f7ff fc25 	bl	800ec5e <mbedtls_mpi_bitlen>
 800f414:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 800f418:	281f      	cmp	r0, #31
 800f41a:	d075      	beq.n	800f508 <mbedtls_mpi_div_mpi+0x200>
        k = biL - 1 - k;
 800f41c:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800f420:	4619      	mov	r1, r3
 800f422:	a805      	add	r0, sp, #20
        k = biL - 1 - k;
 800f424:	ee08 3a10 	vmov	s16, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800f428:	f7ff fc91 	bl	800ed4e <mbedtls_mpi_shift_l>
 800f42c:	4604      	mov	r4, r0
 800f42e:	2800      	cmp	r0, #0
 800f430:	d1a5      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 800f432:	ee18 1a10 	vmov	r1, s16
 800f436:	4638      	mov	r0, r7
 800f438:	f7ff fc89 	bl	800ed4e <mbedtls_mpi_shift_l>
 800f43c:	4604      	mov	r4, r0
 800f43e:	2800      	cmp	r0, #0
 800f440:	d19d      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
    n = X.n - 1;
 800f442:	9d06      	ldr	r5, [sp, #24]
    t = Y.n - 1;
 800f444:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800f448:	eba5 030a 	sub.w	r3, r5, sl
 800f44c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800f450:	4659      	mov	r1, fp
 800f452:	4638      	mov	r0, r7
 800f454:	9300      	str	r3, [sp, #0]
 800f456:	f7ff fc7a 	bl	800ed4e <mbedtls_mpi_shift_l>
 800f45a:	4604      	mov	r4, r0
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d18e      	bne.n	800f37e <mbedtls_mpi_div_mpi+0x76>
        Z.p[n - t]++;
 800f460:	9b00      	ldr	r3, [sp, #0]
 800f462:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800f464:	4639      	mov	r1, r7
 800f466:	a805      	add	r0, sp, #20
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	f7ff fd92 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 800f46e:	2800      	cmp	r0, #0
 800f470:	9b00      	ldr	r3, [sp, #0]
 800f472:	da4c      	bge.n	800f50e <mbedtls_mpi_div_mpi+0x206>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800f474:	4659      	mov	r1, fp
 800f476:	4638      	mov	r0, r7
 800f478:	f7ff fcb7 	bl	800edea <mbedtls_mpi_shift_r>
 800f47c:	4604      	mov	r4, r0
 800f47e:	2800      	cmp	r0, #0
 800f480:	f47f af7d 	bne.w	800f37e <mbedtls_mpi_div_mpi+0x76>
    t = Y.n - 1;
 800f484:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f488:	9300      	str	r3, [sp, #0]
        if( X.p[i] >= Y.p[t] )
 800f48a:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
 800f48c:	1e6f      	subs	r7, r5, #1
        if( X.p[i] >= Y.p[t] )
 800f48e:	9301      	str	r3, [sp, #4]
 800f490:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f494:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 800f498:	3b02      	subs	r3, #2
 800f49a:	3d01      	subs	r5, #1
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	eba5 0a0a 	sub.w	sl, r5, sl
 800f4a2:	9303      	str	r3, [sp, #12]
 800f4a4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    for( i = n; i > t ; i-- )
 800f4a8:	9b00      	ldr	r3, [sp, #0]
 800f4aa:	429f      	cmp	r7, r3
 800f4ac:	d83e      	bhi.n	800f52c <mbedtls_mpi_div_mpi+0x224>
    if( Q != NULL )
 800f4ae:	b15e      	cbz	r6, 800f4c8 <mbedtls_mpi_div_mpi+0x1c0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 800f4b0:	a90b      	add	r1, sp, #44	; 0x2c
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	f7ff fb2e 	bl	800eb14 <mbedtls_mpi_copy>
 800f4b8:	bb20      	cbnz	r0, 800f504 <mbedtls_mpi_div_mpi+0x1fc>
        Q->s = A->s * B->s;
 800f4ba:	ee18 3a90 	vmov	r3, s17
 800f4be:	f8d9 2000 	ldr.w	r2, [r9]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	4353      	muls	r3, r2
 800f4c6:	6033      	str	r3, [r6, #0]
    if( R != NULL )
 800f4c8:	f1b8 0f00 	cmp.w	r8, #0
 800f4cc:	f43f af57 	beq.w	800f37e <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800f4d0:	ee18 1a10 	vmov	r1, s16
 800f4d4:	a805      	add	r0, sp, #20
 800f4d6:	f7ff fc88 	bl	800edea <mbedtls_mpi_shift_r>
 800f4da:	b998      	cbnz	r0, 800f504 <mbedtls_mpi_div_mpi+0x1fc>
        X.s = A->s;
 800f4dc:	f8d9 3000 	ldr.w	r3, [r9]
 800f4e0:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800f4e2:	a905      	add	r1, sp, #20
 800f4e4:	4640      	mov	r0, r8
 800f4e6:	f7ff fb15 	bl	800eb14 <mbedtls_mpi_copy>
 800f4ea:	4601      	mov	r1, r0
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	f040 80c3 	bne.w	800f678 <mbedtls_mpi_div_mpi+0x370>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800f4f2:	4640      	mov	r0, r8
 800f4f4:	f7ff fd90 	bl	800f018 <mbedtls_mpi_cmp_int>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	f47f af40 	bne.w	800f37e <mbedtls_mpi_div_mpi+0x76>
            R->s = 1;
 800f4fe:	2301      	movs	r3, #1
 800f500:	f8c8 3000 	str.w	r3, [r8]
 800f504:	4604      	mov	r4, r0
 800f506:	e73a      	b.n	800f37e <mbedtls_mpi_div_mpi+0x76>
    else k = 0;
 800f508:	ee08 4a10 	vmov	s16, r4
 800f50c:	e799      	b.n	800f442 <mbedtls_mpi_div_mpi+0x13a>
        Z.p[n - t]++;
 800f50e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	58ca      	ldr	r2, [r1, r3]
 800f514:	3201      	adds	r2, #1
 800f516:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800f518:	a905      	add	r1, sp, #20
 800f51a:	463a      	mov	r2, r7
 800f51c:	4608      	mov	r0, r1
 800f51e:	f7ff fe49 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800f522:	9b00      	ldr	r3, [sp, #0]
 800f524:	4604      	mov	r4, r0
 800f526:	2800      	cmp	r0, #0
 800f528:	d09c      	beq.n	800f464 <mbedtls_mpi_div_mpi+0x15c>
 800f52a:	e728      	b.n	800f37e <mbedtls_mpi_div_mpi+0x76>
        if( X.p[i] >= Y.p[t] )
 800f52c:	9801      	ldr	r0, [sp, #4]
 800f52e:	9b07      	ldr	r3, [sp, #28]
 800f530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f532:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800f536:	5812      	ldr	r2, [r2, r0]
 800f538:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800f53c:	f1ab 0004 	sub.w	r0, fp, #4
 800f540:	9002      	str	r0, [sp, #8]
 800f542:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f544:	4291      	cmp	r1, r2
 800f546:	eb00 050a 	add.w	r5, r0, sl
 800f54a:	d37e      	bcc.n	800f64a <mbedtls_mpi_div_mpi+0x342>
            Z.p[i - t - 1] = ~0;
 800f54c:	f04f 33ff 	mov.w	r3, #4294967295
 800f550:	f840 300a 	str.w	r3, [r0, sl]
        Z.p[i - t - 1]++;
 800f554:	682b      	ldr	r3, [r5, #0]
 800f556:	3301      	adds	r3, #1
 800f558:	602b      	str	r3, [r5, #0]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f55a:	f1ab 0508 	sub.w	r5, fp, #8
            Z.p[i - t - 1]--;
 800f55e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f560:	f852 300a 	ldr.w	r3, [r2, sl]
 800f564:	3b01      	subs	r3, #1
 800f566:	f842 300a 	str.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800f56a:	2100      	movs	r1, #0
 800f56c:	a80e      	add	r0, sp, #56	; 0x38
 800f56e:	f7ff fb2e 	bl	800ebce <mbedtls_mpi_lset>
 800f572:	2800      	cmp	r0, #0
 800f574:	d1c6      	bne.n	800f504 <mbedtls_mpi_div_mpi+0x1fc>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f576:	9b00      	ldr	r3, [sp, #0]
 800f578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d07a      	beq.n	800f674 <mbedtls_mpi_div_mpi+0x36c>
 800f57e:	9b03      	ldr	r3, [sp, #12]
 800f580:	58d1      	ldr	r1, [r2, r3]
 800f582:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f584:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 800f586:	9901      	ldr	r1, [sp, #4]
 800f588:	5852      	ldr	r2, [r2, r1]
 800f58a:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800f58c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f58e:	a90e      	add	r1, sp, #56	; 0x38
 800f590:	4608      	mov	r0, r1
 800f592:	f853 200a 	ldr.w	r2, [r3, sl]
 800f596:	f7ff feaa 	bl	800f2ee <mbedtls_mpi_mul_int>
 800f59a:	4601      	mov	r1, r0
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d16b      	bne.n	800f678 <mbedtls_mpi_div_mpi+0x370>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 800f5a0:	a811      	add	r0, sp, #68	; 0x44
 800f5a2:	f7ff fb14 	bl	800ebce <mbedtls_mpi_lset>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d1ac      	bne.n	800f504 <mbedtls_mpi_div_mpi+0x1fc>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f5aa:	9a07      	ldr	r2, [sp, #28]
 800f5ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800f5ae:	9902      	ldr	r1, [sp, #8]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f5b0:	2f01      	cmp	r7, #1
 800f5b2:	bf18      	it	ne
 800f5b4:	5950      	ldrne	r0, [r2, r5]
 800f5b6:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800f5b8:	5851      	ldr	r1, [r2, r1]
 800f5ba:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 800f5bc:	f852 200b 	ldr.w	r2, [r2, fp]
 800f5c0:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800f5c2:	a911      	add	r1, sp, #68	; 0x44
 800f5c4:	a80e      	add	r0, sp, #56	; 0x38
 800f5c6:	f7ff fce4 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	dcc7      	bgt.n	800f55e <mbedtls_mpi_div_mpi+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800f5ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5d0:	a908      	add	r1, sp, #32
 800f5d2:	f853 200a 	ldr.w	r2, [r3, sl]
 800f5d6:	a80e      	add	r0, sp, #56	; 0x38
 800f5d8:	f7ff fe89 	bl	800f2ee <mbedtls_mpi_mul_int>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d191      	bne.n	800f504 <mbedtls_mpi_div_mpi+0x1fc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800f5e0:	ea4f 05ca 	mov.w	r5, sl, lsl #3
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	a80e      	add	r0, sp, #56	; 0x38
 800f5e8:	f7ff fbb1 	bl	800ed4e <mbedtls_mpi_shift_l>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	d189      	bne.n	800f504 <mbedtls_mpi_div_mpi+0x1fc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800f5f0:	a905      	add	r1, sp, #20
 800f5f2:	4608      	mov	r0, r1
 800f5f4:	aa0e      	add	r2, sp, #56	; 0x38
 800f5f6:	f7ff fddd 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800f5fa:	4601      	mov	r1, r0
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d13b      	bne.n	800f678 <mbedtls_mpi_div_mpi+0x370>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800f600:	a805      	add	r0, sp, #20
 800f602:	f7ff fd09 	bl	800f018 <mbedtls_mpi_cmp_int>
 800f606:	2800      	cmp	r0, #0
 800f608:	da1b      	bge.n	800f642 <mbedtls_mpi_div_mpi+0x33a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 800f60a:	a908      	add	r1, sp, #32
 800f60c:	a80e      	add	r0, sp, #56	; 0x38
 800f60e:	f7ff fa81 	bl	800eb14 <mbedtls_mpi_copy>
 800f612:	2800      	cmp	r0, #0
 800f614:	f47f af76 	bne.w	800f504 <mbedtls_mpi_div_mpi+0x1fc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800f618:	4629      	mov	r1, r5
 800f61a:	a80e      	add	r0, sp, #56	; 0x38
 800f61c:	f7ff fb97 	bl	800ed4e <mbedtls_mpi_shift_l>
 800f620:	2800      	cmp	r0, #0
 800f622:	f47f af6f 	bne.w	800f504 <mbedtls_mpi_div_mpi+0x1fc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800f626:	a905      	add	r1, sp, #20
 800f628:	aa0e      	add	r2, sp, #56	; 0x38
 800f62a:	4608      	mov	r0, r1
 800f62c:	f7ff fda0 	bl	800f170 <mbedtls_mpi_add_mpi>
 800f630:	2800      	cmp	r0, #0
 800f632:	f47f af67 	bne.w	800f504 <mbedtls_mpi_div_mpi+0x1fc>
            Z.p[i - t - 1]--;
 800f636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f638:	f852 300a 	ldr.w	r3, [r2, sl]
 800f63c:	3b01      	subs	r3, #1
 800f63e:	f842 300a 	str.w	r3, [r2, sl]
    for( i = n; i > t ; i-- )
 800f642:	3f01      	subs	r7, #1
 800f644:	f1aa 0a04 	sub.w	sl, sl, #4
 800f648:	e72e      	b.n	800f4a8 <mbedtls_mpi_div_mpi+0x1a0>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800f64a:	9802      	ldr	r0, [sp, #8]
 800f64c:	5818      	ldr	r0, [r3, r0]
    if( 0 == d || u1 >= d )
 800f64e:	b172      	cbz	r2, 800f66e <mbedtls_mpi_div_mpi+0x366>
    quotient = dividend / d;
 800f650:	2300      	movs	r3, #0
 800f652:	f7f1 fb29 	bl	8000ca8 <__aeabi_uldivmod>
 800f656:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
 800f658:	2100      	movs	r1, #0
    quotient = dividend / d;
 800f65a:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
 800f65c:	4299      	cmp	r1, r3
 800f65e:	f04f 30ff 	mov.w	r0, #4294967295
 800f662:	bf08      	it	eq
 800f664:	4290      	cmpeq	r0, r2
 800f666:	d200      	bcs.n	800f66a <mbedtls_mpi_div_mpi+0x362>
 800f668:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800f66a:	602a      	str	r2, [r5, #0]
 800f66c:	e772      	b.n	800f554 <mbedtls_mpi_div_mpi+0x24c>
        return ( ~0 );
 800f66e:	f04f 32ff 	mov.w	r2, #4294967295
 800f672:	e7fa      	b.n	800f66a <mbedtls_mpi_div_mpi+0x362>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f674:	9900      	ldr	r1, [sp, #0]
 800f676:	e784      	b.n	800f582 <mbedtls_mpi_div_mpi+0x27a>
 800f678:	460c      	mov	r4, r1
 800f67a:	e680      	b.n	800f37e <mbedtls_mpi_div_mpi+0x76>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800f67c:	f06f 040b 	mvn.w	r4, #11
 800f680:	e670      	b.n	800f364 <mbedtls_mpi_div_mpi+0x5c>

0800f682 <mbedtls_mpi_mod_mpi>:
{
 800f682:	b570      	push	{r4, r5, r6, lr}
 800f684:	4604      	mov	r4, r0
 800f686:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800f688:	4610      	mov	r0, r2
 800f68a:	2100      	movs	r1, #0
{
 800f68c:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800f68e:	f7ff fcc3 	bl	800f018 <mbedtls_mpi_cmp_int>
 800f692:	2800      	cmp	r0, #0
 800f694:	db24      	blt.n	800f6e0 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800f696:	462a      	mov	r2, r5
 800f698:	4633      	mov	r3, r6
 800f69a:	4621      	mov	r1, r4
 800f69c:	2000      	movs	r0, #0
 800f69e:	f7ff fe33 	bl	800f308 <mbedtls_mpi_div_mpi>
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	b138      	cbz	r0, 800f6b6 <mbedtls_mpi_mod_mpi+0x34>
}
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800f6aa:	4632      	mov	r2, r6
 800f6ac:	4621      	mov	r1, r4
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f7ff fd5e 	bl	800f170 <mbedtls_mpi_add_mpi>
 800f6b4:	b990      	cbnz	r0, 800f6dc <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f7ff fcad 	bl	800f018 <mbedtls_mpi_cmp_int>
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	dbf3      	blt.n	800f6aa <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800f6c2:	4631      	mov	r1, r6
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f7ff fc64 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	dbeb      	blt.n	800f6a6 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800f6ce:	4632      	mov	r2, r6
 800f6d0:	4621      	mov	r1, r4
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f7ff fd6e 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d0f2      	beq.n	800f6c2 <mbedtls_mpi_mod_mpi+0x40>
 800f6dc:	4605      	mov	r5, r0
 800f6de:	e7e2      	b.n	800f6a6 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800f6e0:	f06f 0509 	mvn.w	r5, #9
 800f6e4:	e7df      	b.n	800f6a6 <mbedtls_mpi_mod_mpi+0x24>

0800f6e6 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 800f6e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ea:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 800f6ee:	4605      	mov	r5, r0
 800f6f0:	4688      	mov	r8, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	2100      	movs	r1, #0
{
 800f6f6:	9202      	str	r2, [sp, #8]
 800f6f8:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )
 800f6fa:	f7ff fc8d 	bl	800f018 <mbedtls_mpi_cmp_int>
 800f6fe:	2800      	cmp	r0, #0
 800f700:	f2c0 821c 	blt.w	800fb3c <mbedtls_mpi_exp_mod+0x456>
 800f704:	68a3      	ldr	r3, [r4, #8]
 800f706:	681e      	ldr	r6, [r3, #0]
 800f708:	f016 0301 	ands.w	r3, r6, #1
 800f70c:	9304      	str	r3, [sp, #16]
 800f70e:	f000 8215 	beq.w	800fb3c <mbedtls_mpi_exp_mod+0x456>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 800f712:	9802      	ldr	r0, [sp, #8]
 800f714:	2100      	movs	r1, #0
 800f716:	f7ff fc7f 	bl	800f018 <mbedtls_mpi_cmp_int>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	f2c0 820e 	blt.w	800fb3c <mbedtls_mpi_exp_mod+0x456>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 800f720:	1cb7      	adds	r7, r6, #2
 800f722:	007f      	lsls	r7, r7, #1
 800f724:	f007 0708 	and.w	r7, r7, #8
 800f728:	4437      	add	r7, r6
 800f72a:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
 800f72c:	fb07 f306 	mul.w	r3, r7, r6
 800f730:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
 800f734:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 800f736:	fb03 f707 	mul.w	r7, r3, r7
    for( i = biL; i >= 8; i /= 2 )
 800f73a:	d1f7      	bne.n	800f72c <mbedtls_mpi_exp_mod+0x46>
    X->s = 1;
 800f73c:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 800f73e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f742:	a814      	add	r0, sp, #80	; 0x50
    X->n = 0;
 800f744:	e9cd 3108 	strd	r3, r1, [sp, #32]
    X->s = 1;
 800f748:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    X->p = NULL;
 800f74c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    X->n = 0;
 800f750:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
    X->p = NULL;
 800f754:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 800f756:	f012 febb 	bl	80224d0 <memset>

    i = mbedtls_mpi_bitlen( E );
 800f75a:	9802      	ldr	r0, [sp, #8]
 800f75c:	f7ff fa7f 	bl	800ec5e <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800f760:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 800f764:	f080 80e2 	bcs.w	800f92c <mbedtls_mpi_exp_mod+0x246>
 800f768:	28ef      	cmp	r0, #239	; 0xef
 800f76a:	f200 80e1 	bhi.w	800f930 <mbedtls_mpi_exp_mod+0x24a>
 800f76e:	284f      	cmp	r0, #79	; 0x4f
 800f770:	f200 80e0 	bhi.w	800f934 <mbedtls_mpi_exp_mod+0x24e>
 800f774:	9b04      	ldr	r3, [sp, #16]
 800f776:	2817      	cmp	r0, #23
 800f778:	bf94      	ite	ls
 800f77a:	461e      	movls	r6, r3
 800f77c:	2603      	movhi	r6, #3
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 800f77e:	6861      	ldr	r1, [r4, #4]
 800f780:	f101 0901 	add.w	r9, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800f784:	4649      	mov	r1, r9
 800f786:	4628      	mov	r0, r5
 800f788:	f7ff f95c 	bl	800ea44 <mbedtls_mpi_grow>
 800f78c:	4602      	mov	r2, r0
 800f78e:	2800      	cmp	r0, #0
 800f790:	f040 81a9 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800f794:	4649      	mov	r1, r9
 800f796:	a817      	add	r0, sp, #92	; 0x5c
 800f798:	f7ff f954 	bl	800ea44 <mbedtls_mpi_grow>
 800f79c:	4602      	mov	r2, r0
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	f040 81a1 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800f7a4:	ea4f 0149 	mov.w	r1, r9, lsl #1
 800f7a8:	a80b      	add	r0, sp, #44	; 0x2c
 800f7aa:	f7ff f94b 	bl	800ea44 <mbedtls_mpi_grow>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	f040 8198 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 800f7b6:	f8d8 3000 	ldr.w	r3, [r8]
 800f7ba:	9303      	str	r3, [sp, #12]
    if( neg )
 800f7bc:	3301      	adds	r3, #1
 800f7be:	d10b      	bne.n	800f7d8 <mbedtls_mpi_exp_mod+0xf2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 800f7c0:	4641      	mov	r1, r8
 800f7c2:	a80e      	add	r0, sp, #56	; 0x38
 800f7c4:	f7ff f9a6 	bl	800eb14 <mbedtls_mpi_copy>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	f040 818b 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
        Apos.s = 1;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 800f7d4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 800f7d8:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800f7dc:	b11b      	cbz	r3, 800f7e6 <mbedtls_mpi_exp_mod+0x100>
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f040 80a9 	bne.w	800f938 <mbedtls_mpi_exp_mod+0x252>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 800f7e6:	2101      	movs	r1, #1
 800f7e8:	a808      	add	r0, sp, #32
 800f7ea:	f7ff f9f0 	bl	800ebce <mbedtls_mpi_lset>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	f040 8178 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 800f7f6:	6861      	ldr	r1, [r4, #4]
 800f7f8:	a808      	add	r0, sp, #32
 800f7fa:	0189      	lsls	r1, r1, #6
 800f7fc:	f7ff faa7 	bl	800ed4e <mbedtls_mpi_shift_l>
 800f800:	4602      	mov	r2, r0
 800f802:	2800      	cmp	r0, #0
 800f804:	f040 816f 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 800f808:	a908      	add	r1, sp, #32
 800f80a:	4622      	mov	r2, r4
 800f80c:	4608      	mov	r0, r1
 800f80e:	f7ff ff38 	bl	800f682 <mbedtls_mpi_mod_mpi>
 800f812:	4602      	mov	r2, r0
 800f814:	2800      	cmp	r0, #0
 800f816:	f040 8166 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>

        if( _RR != NULL )
 800f81a:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800f81e:	b13b      	cbz	r3, 800f830 <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 800f820:	ab08      	add	r3, sp, #32
 800f822:	cb03      	ldmia	r3!, {r0, r1}
 800f824:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800f828:	6010      	str	r0, [r2, #0]
 800f82a:	6818      	ldr	r0, [r3, #0]
 800f82c:	6051      	str	r1, [r2, #4]
 800f82e:	6090      	str	r0, [r2, #8]
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 800f830:	4621      	mov	r1, r4
 800f832:	4640      	mov	r0, r8
 800f834:	f7ff fbad 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 800f838:	2800      	cmp	r0, #0
 800f83a:	f2c0 8086 	blt.w	800f94a <mbedtls_mpi_exp_mod+0x264>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 800f83e:	4622      	mov	r2, r4
 800f840:	4641      	mov	r1, r8
 800f842:	a817      	add	r0, sp, #92	; 0x5c
 800f844:	f7ff ff1d 	bl	800f682 <mbedtls_mpi_mod_mpi>
 800f848:	4602      	mov	r2, r0
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f040 814b 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800f850:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    *mm = ~x + 1;
 800f854:	427b      	negs	r3, r7
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800f856:	4622      	mov	r2, r4
 800f858:	f8cd 9000 	str.w	r9, [sp]
 800f85c:	a908      	add	r1, sp, #32
 800f85e:	a817      	add	r0, sp, #92	; 0x5c
 800f860:	9305      	str	r3, [sp, #20]
 800f862:	f7ff fb2f 	bl	800eec4 <mpi_montmul>
 800f866:	4602      	mov	r2, r0
 800f868:	2800      	cmp	r0, #0
 800f86a:	f040 813c 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 800f86e:	a908      	add	r1, sp, #32
 800f870:	4628      	mov	r0, r5
 800f872:	f7ff f94f 	bl	800eb14 <mbedtls_mpi_copy>
 800f876:	4602      	mov	r2, r0
 800f878:	2800      	cmp	r0, #0
 800f87a:	f040 8134 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
    mbedtls_mpi_uint z = 1;
 800f87e:	aa07      	add	r2, sp, #28
 800f880:	2701      	movs	r7, #1
    U.p = &z;
 800f882:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f884:	9b05      	ldr	r3, [sp, #20]
 800f886:	f8cd 9000 	str.w	r9, [sp]
 800f88a:	4622      	mov	r2, r4
 800f88c:	a911      	add	r1, sp, #68	; 0x44
 800f88e:	4628      	mov	r0, r5
    U.n = U.s = (int) z;
 800f890:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
 800f894:	9707      	str	r7, [sp, #28]
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f896:	f7ff fb15 	bl	800eec4 <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800f89a:	4602      	mov	r2, r0
 800f89c:	2800      	cmp	r0, #0
 800f89e:	f040 8122 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>

    if( wsize > 1 )
 800f8a2:	42be      	cmp	r6, r7
 800f8a4:	9b05      	ldr	r3, [sp, #20]
 800f8a6:	d155      	bne.n	800f954 <mbedtls_mpi_exp_mod+0x26e>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 800f8a8:	9a02      	ldr	r2, [sp, #8]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 800f8aa:	f04f 0800 	mov.w	r8, #0
    nblimbs = E->n;
 800f8ae:	f8d2 b004 	ldr.w	fp, [r2, #4]
    nbits   = 0;
 800f8b2:	4647      	mov	r7, r8
    bufsize = 0;
 800f8b4:	46c1      	mov	r9, r8
    wbits   = 0;
 800f8b6:	46c2      	mov	sl, r8

    while( 1 )
    {
        if( bufsize == 0 )
 800f8b8:	f1b9 0f00 	cmp.w	r9, #0
 800f8bc:	f040 80ac 	bne.w	800fa18 <mbedtls_mpi_exp_mod+0x332>
        {
            if( nblimbs == 0 )
 800f8c0:	f1bb 0f00 	cmp.w	fp, #0
 800f8c4:	f040 80a4 	bne.w	800fa10 <mbedtls_mpi_exp_mod+0x32a>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 800f8c8:	f04f 0901 	mov.w	r9, #1
 800f8cc:	fa09 f906 	lsl.w	r9, r9, r6
 800f8d0:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    for( i = 0; i < nbits; i++ )
 800f8d4:	45bb      	cmp	fp, r7
 800f8d6:	f040 80e7 	bne.w	800faa8 <mbedtls_mpi_exp_mod+0x3c2>
    mbedtls_mpi_uint z = 1;
 800f8da:	2201      	movs	r2, #1
 800f8dc:	a907      	add	r1, sp, #28
    U.n = U.s = (int) z;
 800f8de:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
 800f8e2:	9207      	str	r2, [sp, #28]
    U.p = &z;
 800f8e4:	9113      	str	r1, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f8e6:	4622      	mov	r2, r4
 800f8e8:	f8cd 8000 	str.w	r8, [sp]
 800f8ec:	a911      	add	r1, sp, #68	; 0x44
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	f7ff fae8 	bl	800eec4 <mpi_montmul>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	f040 80f5 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 800f8fc:	9b03      	ldr	r3, [sp, #12]
 800f8fe:	3301      	adds	r3, #1
 800f900:	f040 80f1 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
 800f904:	9b02      	ldr	r3, [sp, #8]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	f000 80ec 	beq.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
 800f90e:	9b02      	ldr	r3, [sp, #8]
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	07db      	lsls	r3, r3, #31
 800f916:	f140 80e6 	bpl.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
    {
        X->s = -1;
 800f91a:	9b03      	ldr	r3, [sp, #12]
 800f91c:	602b      	str	r3, [r5, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 800f91e:	462a      	mov	r2, r5
 800f920:	4621      	mov	r1, r4
 800f922:	4628      	mov	r0, r5
 800f924:	f7ff fc24 	bl	800f170 <mbedtls_mpi_add_mpi>
 800f928:	4602      	mov	r2, r0
    }

cleanup:
 800f92a:	e0dc      	b.n	800fae6 <mbedtls_mpi_exp_mod+0x400>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800f92c:	2606      	movs	r6, #6
 800f92e:	e726      	b.n	800f77e <mbedtls_mpi_exp_mod+0x98>
 800f930:	2605      	movs	r6, #5
 800f932:	e724      	b.n	800f77e <mbedtls_mpi_exp_mod+0x98>
 800f934:	2604      	movs	r6, #4
 800f936:	e722      	b.n	800f77e <mbedtls_mpi_exp_mod+0x98>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 800f938:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800f93c:	6810      	ldr	r0, [r2, #0]
 800f93e:	6851      	ldr	r1, [r2, #4]
 800f940:	ab08      	add	r3, sp, #32
 800f942:	c303      	stmia	r3!, {r0, r1}
 800f944:	6890      	ldr	r0, [r2, #8]
 800f946:	6018      	str	r0, [r3, #0]
 800f948:	e772      	b.n	800f830 <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 800f94a:	4641      	mov	r1, r8
 800f94c:	a817      	add	r0, sp, #92	; 0x5c
 800f94e:	f7ff f8e1 	bl	800eb14 <mbedtls_mpi_copy>
 800f952:	e779      	b.n	800f848 <mbedtls_mpi_exp_mod+0x162>
 800f954:	f106 3bff 	add.w	fp, r6, #4294967295
 800f958:	fa07 f80b 	lsl.w	r8, r7, fp
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800f95c:	270c      	movs	r7, #12
 800f95e:	6861      	ldr	r1, [r4, #4]
 800f960:	9305      	str	r3, [sp, #20]
 800f962:	fa07 f70b 	lsl.w	r7, r7, fp
 800f966:	ab14      	add	r3, sp, #80	; 0x50
 800f968:	441f      	add	r7, r3
 800f96a:	3101      	adds	r1, #1
 800f96c:	4638      	mov	r0, r7
 800f96e:	f7ff f869 	bl	800ea44 <mbedtls_mpi_grow>
 800f972:	4602      	mov	r2, r0
 800f974:	2800      	cmp	r0, #0
 800f976:	f040 80b6 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800f97a:	a917      	add	r1, sp, #92	; 0x5c
 800f97c:	4638      	mov	r0, r7
 800f97e:	f7ff f8c9 	bl	800eb14 <mbedtls_mpi_copy>
 800f982:	4602      	mov	r2, r0
 800f984:	2800      	cmp	r0, #0
 800f986:	f040 80ae 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800f98a:	9b05      	ldr	r3, [sp, #20]
        for( i = 0; i < wsize - 1; i++ )
 800f98c:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800f98e:	4622      	mov	r2, r4
 800f990:	f8cd 9000 	str.w	r9, [sp]
 800f994:	4639      	mov	r1, r7
 800f996:	4638      	mov	r0, r7
 800f998:	9305      	str	r3, [sp, #20]
 800f99a:	f7ff fa93 	bl	800eec4 <mpi_montmul>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	f040 80a0 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
        for( i = 0; i < wsize - 1; i++ )
 800f9a6:	f10a 0a01 	add.w	sl, sl, #1
 800f9aa:	45d3      	cmp	fp, sl
 800f9ac:	9b05      	ldr	r3, [sp, #20]
 800f9ae:	d8ee      	bhi.n	800f98e <mbedtls_mpi_exp_mod+0x2a8>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f9b0:	f04f 0a01 	mov.w	sl, #1
 800f9b4:	46bb      	mov	fp, r7
 800f9b6:	f108 0801 	add.w	r8, r8, #1
 800f9ba:	fa0a fa06 	lsl.w	sl, sl, r6
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800f9be:	af0b      	add	r7, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f9c0:	45c2      	cmp	sl, r8
 800f9c2:	f67f af71 	bls.w	800f8a8 <mbedtls_mpi_exp_mod+0x1c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800f9c6:	6861      	ldr	r1, [r4, #4]
 800f9c8:	9305      	str	r3, [sp, #20]
 800f9ca:	f10b 090c 	add.w	r9, fp, #12
 800f9ce:	3101      	adds	r1, #1
 800f9d0:	4648      	mov	r0, r9
 800f9d2:	f7ff f837 	bl	800ea44 <mbedtls_mpi_grow>
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	f040 8084 	bne.w	800fae6 <mbedtls_mpi_exp_mod+0x400>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800f9de:	4659      	mov	r1, fp
 800f9e0:	4648      	mov	r0, r9
 800f9e2:	f7ff f897 	bl	800eb14 <mbedtls_mpi_copy>
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	d17c      	bne.n	800fae6 <mbedtls_mpi_exp_mod+0x400>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800f9ec:	4622      	mov	r2, r4
 800f9ee:	9b05      	ldr	r3, [sp, #20]
 800f9f0:	9700      	str	r7, [sp, #0]
 800f9f2:	a917      	add	r1, sp, #92	; 0x5c
 800f9f4:	4648      	mov	r0, r9
 800f9f6:	f7ff fa65 	bl	800eec4 <mpi_montmul>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	d172      	bne.n	800fae6 <mbedtls_mpi_exp_mod+0x400>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800fa00:	9b05      	ldr	r3, [sp, #20]
 800fa02:	f108 0801 	add.w	r8, r8, #1
 800fa06:	46cb      	mov	fp, r9
 800fa08:	e7da      	b.n	800f9c0 <mbedtls_mpi_exp_mod+0x2da>
        state = 2;
 800fa0a:	f04f 0802 	mov.w	r8, #2
 800fa0e:	e753      	b.n	800f8b8 <mbedtls_mpi_exp_mod+0x1d2>
            nblimbs--;
 800fa10:	f10b 3bff 	add.w	fp, fp, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 800fa14:	f04f 0920 	mov.w	r9, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800fa18:	9a02      	ldr	r2, [sp, #8]
 800fa1a:	6892      	ldr	r2, [r2, #8]
 800fa1c:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
        bufsize--;
 800fa20:	f109 39ff 	add.w	r9, r9, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800fa24:	fa22 f209 	lsr.w	r2, r2, r9
        if( ei == 0 && state == 0 )
 800fa28:	f012 0201 	ands.w	r2, r2, #1
 800fa2c:	d113      	bne.n	800fa56 <mbedtls_mpi_exp_mod+0x370>
 800fa2e:	f1b8 0f00 	cmp.w	r8, #0
 800fa32:	f43f af41 	beq.w	800f8b8 <mbedtls_mpi_exp_mod+0x1d2>
        if( ei == 0 && state == 1 )
 800fa36:	f1b8 0f01 	cmp.w	r8, #1
 800fa3a:	d10c      	bne.n	800fa56 <mbedtls_mpi_exp_mod+0x370>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800fa3c:	aa0b      	add	r2, sp, #44	; 0x2c
 800fa3e:	9200      	str	r2, [sp, #0]
 800fa40:	4629      	mov	r1, r5
 800fa42:	4622      	mov	r2, r4
 800fa44:	4628      	mov	r0, r5
 800fa46:	9305      	str	r3, [sp, #20]
 800fa48:	f7ff fa3c 	bl	800eec4 <mpi_montmul>
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d149      	bne.n	800fae6 <mbedtls_mpi_exp_mod+0x400>
 800fa52:	9b05      	ldr	r3, [sp, #20]
 800fa54:	e730      	b.n	800f8b8 <mbedtls_mpi_exp_mod+0x1d2>
        nbits++;
 800fa56:	3701      	adds	r7, #1
        wbits |= ( ei << ( wsize - nbits ) );
 800fa58:	1bf1      	subs	r1, r6, r7
 800fa5a:	408a      	lsls	r2, r1
        if( nbits == wsize )
 800fa5c:	42be      	cmp	r6, r7
        wbits |= ( ei << ( wsize - nbits ) );
 800fa5e:	ea4a 0a02 	orr.w	sl, sl, r2
        if( nbits == wsize )
 800fa62:	d1d2      	bne.n	800fa0a <mbedtls_mpi_exp_mod+0x324>
            for( i = 0; i < wsize; i++ )
 800fa64:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800fa68:	aa0b      	add	r2, sp, #44	; 0x2c
 800fa6a:	9200      	str	r2, [sp, #0]
 800fa6c:	4629      	mov	r1, r5
 800fa6e:	4622      	mov	r2, r4
 800fa70:	4628      	mov	r0, r5
 800fa72:	9305      	str	r3, [sp, #20]
 800fa74:	f7ff fa26 	bl	800eec4 <mpi_montmul>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	bba0      	cbnz	r0, 800fae6 <mbedtls_mpi_exp_mod+0x400>
            for( i = 0; i < wsize; i++ )
 800fa7c:	f108 0801 	add.w	r8, r8, #1
 800fa80:	4547      	cmp	r7, r8
 800fa82:	9b05      	ldr	r3, [sp, #20]
 800fa84:	d8f0      	bhi.n	800fa68 <mbedtls_mpi_exp_mod+0x382>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800fa86:	aa0b      	add	r2, sp, #44	; 0x2c
 800fa88:	a814      	add	r0, sp, #80	; 0x50
 800fa8a:	210c      	movs	r1, #12
 800fa8c:	9200      	str	r2, [sp, #0]
 800fa8e:	fb01 010a 	mla	r1, r1, sl, r0
 800fa92:	4622      	mov	r2, r4
 800fa94:	4628      	mov	r0, r5
 800fa96:	f7ff fa15 	bl	800eec4 <mpi_montmul>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	bb18      	cbnz	r0, 800fae6 <mbedtls_mpi_exp_mod+0x400>
            state--;
 800fa9e:	f8dd 8010 	ldr.w	r8, [sp, #16]
            nbits = 0;
 800faa2:	4607      	mov	r7, r0
            wbits = 0;
 800faa4:	4682      	mov	sl, r0
 800faa6:	e7d4      	b.n	800fa52 <mbedtls_mpi_exp_mod+0x36c>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800faa8:	4622      	mov	r2, r4
 800faaa:	f8cd 8000 	str.w	r8, [sp]
 800faae:	4629      	mov	r1, r5
 800fab0:	4628      	mov	r0, r5
 800fab2:	9304      	str	r3, [sp, #16]
 800fab4:	f7ff fa06 	bl	800eec4 <mpi_montmul>
 800fab8:	4602      	mov	r2, r0
 800faba:	b9a0      	cbnz	r0, 800fae6 <mbedtls_mpi_exp_mod+0x400>
        wbits <<= 1;
 800fabc:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 800fac0:	ea19 0f0a 	tst.w	r9, sl
 800fac4:	9b04      	ldr	r3, [sp, #16]
 800fac6:	d102      	bne.n	800face <mbedtls_mpi_exp_mod+0x3e8>
    for( i = 0; i < nbits; i++ )
 800fac8:	f10b 0b01 	add.w	fp, fp, #1
 800facc:	e702      	b.n	800f8d4 <mbedtls_mpi_exp_mod+0x1ee>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800face:	4622      	mov	r2, r4
 800fad0:	f8cd 8000 	str.w	r8, [sp]
 800fad4:	a917      	add	r1, sp, #92	; 0x5c
 800fad6:	4628      	mov	r0, r5
 800fad8:	9304      	str	r3, [sp, #16]
 800fada:	f7ff f9f3 	bl	800eec4 <mpi_montmul>
 800fade:	9b04      	ldr	r3, [sp, #16]
 800fae0:	4602      	mov	r2, r0
 800fae2:	2800      	cmp	r0, #0
 800fae4:	d0f0      	beq.n	800fac8 <mbedtls_mpi_exp_mod+0x3e2>

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800fae6:	1e74      	subs	r4, r6, #1
 800fae8:	2301      	movs	r3, #1
 800faea:	fa03 f404 	lsl.w	r4, r3, r4
 800faee:	fa03 f606 	lsl.w	r6, r3, r6
        mbedtls_mpi_free( &W[i] );
 800faf2:	250c      	movs	r5, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800faf4:	42a6      	cmp	r6, r4
 800faf6:	9202      	str	r2, [sp, #8]
 800faf8:	d818      	bhi.n	800fb2c <mbedtls_mpi_exp_mod+0x446>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 800fafa:	a817      	add	r0, sp, #92	; 0x5c
 800fafc:	f7fe ff8a 	bl	800ea14 <mbedtls_mpi_free>
 800fb00:	a80b      	add	r0, sp, #44	; 0x2c
 800fb02:	f7fe ff87 	bl	800ea14 <mbedtls_mpi_free>
 800fb06:	a80e      	add	r0, sp, #56	; 0x38
 800fb08:	f7fe ff84 	bl	800ea14 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 800fb0c:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800fb10:	9a02      	ldr	r2, [sp, #8]
 800fb12:	b10b      	cbz	r3, 800fb18 <mbedtls_mpi_exp_mod+0x432>
 800fb14:	689b      	ldr	r3, [r3, #8]
 800fb16:	b923      	cbnz	r3, 800fb22 <mbedtls_mpi_exp_mod+0x43c>
        mbedtls_mpi_free( &RR );
 800fb18:	a808      	add	r0, sp, #32
 800fb1a:	9202      	str	r2, [sp, #8]
 800fb1c:	f7fe ff7a 	bl	800ea14 <mbedtls_mpi_free>
 800fb20:	9a02      	ldr	r2, [sp, #8]

    return( ret );
}
 800fb22:	4610      	mov	r0, r2
 800fb24:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 800fb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_free( &W[i] );
 800fb2c:	ab14      	add	r3, sp, #80	; 0x50
 800fb2e:	fb05 3004 	mla	r0, r5, r4, r3
 800fb32:	f7fe ff6f 	bl	800ea14 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800fb36:	3401      	adds	r4, #1
 800fb38:	9a02      	ldr	r2, [sp, #8]
 800fb3a:	e7db      	b.n	800faf4 <mbedtls_mpi_exp_mod+0x40e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800fb3c:	f06f 0203 	mvn.w	r2, #3
 800fb40:	e7ef      	b.n	800fb22 <mbedtls_mpi_exp_mod+0x43c>

0800fb42 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800fb42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb44:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
 800fb46:	2300      	movs	r3, #0
 800fb48:	2701      	movs	r7, #1
{
 800fb4a:	4605      	mov	r5, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800fb4c:	a804      	add	r0, sp, #16
    X->n = 0;
 800fb4e:	e9cd 7301 	strd	r7, r3, [sp, #4]
    X->s = 1;
 800fb52:	e9cd 3703 	strd	r3, r7, [sp, #12]
    X->p = NULL;
 800fb56:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
 800fb5a:	e9cd 7307 	strd	r7, r3, [sp, #28]
{
 800fb5e:	4616      	mov	r6, r2
    X->p = NULL;
 800fb60:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800fb62:	f7fe ffd7 	bl	800eb14 <mbedtls_mpi_copy>
 800fb66:	4604      	mov	r4, r0
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d157      	bne.n	800fc1c <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800fb6c:	4631      	mov	r1, r6
 800fb6e:	a807      	add	r0, sp, #28
 800fb70:	f7fe ffd0 	bl	800eb14 <mbedtls_mpi_copy>
 800fb74:	4604      	mov	r4, r0
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d150      	bne.n	800fc1c <mbedtls_mpi_gcd+0xda>

    lz = mbedtls_mpi_lsb( &TA );
 800fb7a:	a804      	add	r0, sp, #16
 800fb7c:	f7ff f854 	bl	800ec28 <mbedtls_mpi_lsb>
 800fb80:	4606      	mov	r6, r0
    lzt = mbedtls_mpi_lsb( &TB );
 800fb82:	a807      	add	r0, sp, #28
 800fb84:	f7ff f850 	bl	800ec28 <mbedtls_mpi_lsb>

    if( lzt < lz )
 800fb88:	4286      	cmp	r6, r0
 800fb8a:	bf28      	it	cs
 800fb8c:	4606      	movcs	r6, r0
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800fb8e:	4631      	mov	r1, r6
 800fb90:	a804      	add	r0, sp, #16
 800fb92:	f7ff f92a 	bl	800edea <mbedtls_mpi_shift_r>
 800fb96:	4604      	mov	r4, r0
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d13f      	bne.n	800fc1c <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800fb9c:	4631      	mov	r1, r6
 800fb9e:	a807      	add	r0, sp, #28
 800fba0:	f7ff f923 	bl	800edea <mbedtls_mpi_shift_r>
 800fba4:	4604      	mov	r4, r0
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d138      	bne.n	800fc1c <mbedtls_mpi_gcd+0xda>

    TA.s = TB.s = 1;
 800fbaa:	9707      	str	r7, [sp, #28]
 800fbac:	9704      	str	r7, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800fbae:	2100      	movs	r1, #0
 800fbb0:	a804      	add	r0, sp, #16
 800fbb2:	f7ff fa31 	bl	800f018 <mbedtls_mpi_cmp_int>
 800fbb6:	b958      	cbnz	r0, 800fbd0 <mbedtls_mpi_gcd+0x8e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800fbb8:	4631      	mov	r1, r6
 800fbba:	a807      	add	r0, sp, #28
 800fbbc:	f7ff f8c7 	bl	800ed4e <mbedtls_mpi_shift_l>
 800fbc0:	4604      	mov	r4, r0
 800fbc2:	bb58      	cbnz	r0, 800fc1c <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800fbc4:	a907      	add	r1, sp, #28
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	f7fe ffa4 	bl	800eb14 <mbedtls_mpi_copy>
 800fbcc:	4604      	mov	r4, r0

cleanup:
 800fbce:	e025      	b.n	800fc1c <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800fbd0:	a804      	add	r0, sp, #16
 800fbd2:	f7ff f829 	bl	800ec28 <mbedtls_mpi_lsb>
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	a804      	add	r0, sp, #16
 800fbda:	f7ff f906 	bl	800edea <mbedtls_mpi_shift_r>
 800fbde:	4604      	mov	r4, r0
 800fbe0:	b9e0      	cbnz	r0, 800fc1c <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800fbe2:	a807      	add	r0, sp, #28
 800fbe4:	f7ff f820 	bl	800ec28 <mbedtls_mpi_lsb>
 800fbe8:	4601      	mov	r1, r0
 800fbea:	a807      	add	r0, sp, #28
 800fbec:	f7ff f8fd 	bl	800edea <mbedtls_mpi_shift_r>
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	b998      	cbnz	r0, 800fc1c <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800fbf4:	a907      	add	r1, sp, #28
 800fbf6:	a804      	add	r0, sp, #16
 800fbf8:	f7ff f9cb 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	db19      	blt.n	800fc34 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800fc00:	a904      	add	r1, sp, #16
 800fc02:	aa07      	add	r2, sp, #28
 800fc04:	4608      	mov	r0, r1
 800fc06:	f7ff fa76 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	b930      	cbnz	r0, 800fc1c <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800fc0e:	2101      	movs	r1, #1
 800fc10:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800fc12:	f7ff f8ea 	bl	800edea <mbedtls_mpi_shift_r>
 800fc16:	4604      	mov	r4, r0
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	d0c8      	beq.n	800fbae <mbedtls_mpi_gcd+0x6c>

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800fc1c:	a801      	add	r0, sp, #4
 800fc1e:	f7fe fef9 	bl	800ea14 <mbedtls_mpi_free>
 800fc22:	a804      	add	r0, sp, #16
 800fc24:	f7fe fef6 	bl	800ea14 <mbedtls_mpi_free>
 800fc28:	a807      	add	r0, sp, #28
 800fc2a:	f7fe fef3 	bl	800ea14 <mbedtls_mpi_free>

    return( ret );
}
 800fc2e:	4620      	mov	r0, r4
 800fc30:	b00b      	add	sp, #44	; 0x2c
 800fc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800fc34:	a907      	add	r1, sp, #28
 800fc36:	aa04      	add	r2, sp, #16
 800fc38:	4608      	mov	r0, r1
 800fc3a:	f7ff fa5c 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 800fc3e:	4604      	mov	r4, r0
 800fc40:	2800      	cmp	r0, #0
 800fc42:	d1eb      	bne.n	800fc1c <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800fc44:	2101      	movs	r1, #1
 800fc46:	a807      	add	r0, sp, #28
 800fc48:	e7e3      	b.n	800fc12 <mbedtls_mpi_gcd+0xd0>

0800fc4a <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800fc4a:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 800fc4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
{
 800fc50:	4605      	mov	r5, r0
 800fc52:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800fc56:	460c      	mov	r4, r1
 800fc58:	4616      	mov	r6, r2
 800fc5a:	4618      	mov	r0, r3
    if( size > MBEDTLS_MPI_MAX_SIZE )
 800fc5c:	d80b      	bhi.n	800fc76 <mbedtls_mpi_fill_random+0x2c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800fc5e:	460a      	mov	r2, r1
 800fc60:	4669      	mov	r1, sp
 800fc62:	47b0      	blx	r6
 800fc64:	b920      	cbnz	r0, 800fc70 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 800fc66:	4622      	mov	r2, r4
 800fc68:	4669      	mov	r1, sp
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	f7ff f819 	bl	800eca2 <mbedtls_mpi_read_binary>

cleanup:
    return( ret );
}
 800fc70:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 800fc74:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800fc76:	f06f 0003 	mvn.w	r0, #3
 800fc7a:	e7f9      	b.n	800fc70 <mbedtls_mpi_fill_random+0x26>

0800fc7c <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800fc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc80:	4606      	mov	r6, r0
 800fc82:	b09c      	sub	sp, #112	; 0x70
 800fc84:	4688      	mov	r8, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800fc86:	4610      	mov	r0, r2
 800fc88:	2101      	movs	r1, #1
{
 800fc8a:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800fc8c:	f7ff f9c4 	bl	800f018 <mbedtls_mpi_cmp_int>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	f340 814c 	ble.w	800ff2e <mbedtls_mpi_inv_mod+0x2b2>
    X->n = 0;
 800fc96:	2300      	movs	r3, #0
 800fc98:	2701      	movs	r7, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800fc9a:	462a      	mov	r2, r5
 800fc9c:	4641      	mov	r1, r8
 800fc9e:	a801      	add	r0, sp, #4
    X->n = 0;
 800fca0:	e9cd 7304 	strd	r7, r3, [sp, #16]
    X->s = 1;
 800fca4:	e9cd 3706 	strd	r3, r7, [sp, #24]
    X->p = NULL;
 800fca8:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
 800fcac:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
    X->s = 1;
 800fcb0:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    X->p = NULL;
 800fcb4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
 800fcb8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800fcbc:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
    X->s = 1;
 800fcc0:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
    X->p = NULL;
 800fcc4:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
 800fcc8:	e9cd 7316 	strd	r7, r3, [sp, #88]	; 0x58
    X->s = 1;
 800fccc:	e9cd 3718 	strd	r3, r7, [sp, #96]	; 0x60
    X->p = NULL;
 800fcd0:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800fcd4:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800fcd6:	f7ff ff34 	bl	800fb42 <mbedtls_mpi_gcd>
 800fcda:	4604      	mov	r4, r0
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	f040 8097 	bne.w	800fe10 <mbedtls_mpi_inv_mod+0x194>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800fce2:	4639      	mov	r1, r7
 800fce4:	a801      	add	r0, sp, #4
 800fce6:	f7ff f997 	bl	800f018 <mbedtls_mpi_cmp_int>
 800fcea:	2800      	cmp	r0, #0
 800fcec:	f040 811c 	bne.w	800ff28 <mbedtls_mpi_inv_mod+0x2ac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800fcf0:	462a      	mov	r2, r5
 800fcf2:	4641      	mov	r1, r8
 800fcf4:	a804      	add	r0, sp, #16
 800fcf6:	f7ff fcc4 	bl	800f682 <mbedtls_mpi_mod_mpi>
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	f040 8087 	bne.w	800fe10 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800fd02:	a904      	add	r1, sp, #16
 800fd04:	a807      	add	r0, sp, #28
 800fd06:	f7fe ff05 	bl	800eb14 <mbedtls_mpi_copy>
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d17f      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800fd10:	4629      	mov	r1, r5
 800fd12:	a810      	add	r0, sp, #64	; 0x40
 800fd14:	f7fe fefe 	bl	800eb14 <mbedtls_mpi_copy>
 800fd18:	4604      	mov	r4, r0
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	d178      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800fd1e:	4629      	mov	r1, r5
 800fd20:	a813      	add	r0, sp, #76	; 0x4c
 800fd22:	f7fe fef7 	bl	800eb14 <mbedtls_mpi_copy>
 800fd26:	4604      	mov	r4, r0
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	d171      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800fd2c:	4639      	mov	r1, r7
 800fd2e:	a80a      	add	r0, sp, #40	; 0x28
 800fd30:	f7fe ff4d 	bl	800ebce <mbedtls_mpi_lset>
 800fd34:	4604      	mov	r4, r0
 800fd36:	2800      	cmp	r0, #0
 800fd38:	d16a      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800fd3a:	4601      	mov	r1, r0
 800fd3c:	a80d      	add	r0, sp, #52	; 0x34
 800fd3e:	f7fe ff46 	bl	800ebce <mbedtls_mpi_lset>
 800fd42:	4604      	mov	r4, r0
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d163      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800fd48:	4601      	mov	r1, r0
 800fd4a:	a816      	add	r0, sp, #88	; 0x58
 800fd4c:	f7fe ff3f 	bl	800ebce <mbedtls_mpi_lset>
 800fd50:	4604      	mov	r4, r0
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d15c      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800fd56:	4639      	mov	r1, r7
 800fd58:	a819      	add	r0, sp, #100	; 0x64
 800fd5a:	f7fe ff38 	bl	800ebce <mbedtls_mpi_lset>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800fd5e:	4604      	mov	r4, r0
 800fd60:	2800      	cmp	r0, #0
 800fd62:	d155      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
        while( ( TU.p[0] & 1 ) == 0 )
 800fd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	07d8      	lsls	r0, r3, #31
 800fd6a:	d53c      	bpl.n	800fde6 <mbedtls_mpi_inv_mod+0x16a>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 800fd6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	07db      	lsls	r3, r3, #31
 800fd72:	f140 8082 	bpl.w	800fe7a <mbedtls_mpi_inv_mod+0x1fe>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800fd76:	a913      	add	r1, sp, #76	; 0x4c
 800fd78:	a807      	add	r0, sp, #28
 800fd7a:	f7ff f90a 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	f2c0 80ab 	blt.w	800feda <mbedtls_mpi_inv_mod+0x25e>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800fd84:	a907      	add	r1, sp, #28
 800fd86:	aa13      	add	r2, sp, #76	; 0x4c
 800fd88:	4608      	mov	r0, r1
 800fd8a:	f7ff fa13 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800fd8e:	4604      	mov	r4, r0
 800fd90:	2800      	cmp	r0, #0
 800fd92:	d13d      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800fd94:	a90a      	add	r1, sp, #40	; 0x28
 800fd96:	aa16      	add	r2, sp, #88	; 0x58
 800fd98:	4608      	mov	r0, r1
 800fd9a:	f7ff fa0b 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800fd9e:	4604      	mov	r4, r0
 800fda0:	2800      	cmp	r0, #0
 800fda2:	d135      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800fda4:	aa19      	add	r2, sp, #100	; 0x64
 800fda6:	a90d      	add	r1, sp, #52	; 0x34
 800fda8:	4608      	mov	r0, r1
 800fdaa:	f7ff fa03 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800fdae:	4604      	mov	r4, r0
 800fdb0:	bb70      	cbnz	r0, 800fe10 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800fdb2:	2100      	movs	r1, #0
 800fdb4:	a807      	add	r0, sp, #28
 800fdb6:	f7ff f92f 	bl	800f018 <mbedtls_mpi_cmp_int>
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	d1d2      	bne.n	800fd64 <mbedtls_mpi_inv_mod+0xe8>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800fdbe:	2100      	movs	r1, #0
 800fdc0:	a816      	add	r0, sp, #88	; 0x58
 800fdc2:	f7ff f929 	bl	800f018 <mbedtls_mpi_cmp_int>
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	f2c0 809a 	blt.w	800ff00 <mbedtls_mpi_inv_mod+0x284>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800fdcc:	4629      	mov	r1, r5
 800fdce:	a816      	add	r0, sp, #88	; 0x58
 800fdd0:	f7ff f8df 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	f280 809d 	bge.w	800ff14 <mbedtls_mpi_inv_mod+0x298>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800fdda:	a916      	add	r1, sp, #88	; 0x58
 800fddc:	4630      	mov	r0, r6
 800fdde:	f7fe fe99 	bl	800eb14 <mbedtls_mpi_copy>
 800fde2:	4604      	mov	r4, r0

cleanup:
 800fde4:	e014      	b.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800fde6:	2101      	movs	r1, #1
 800fde8:	a807      	add	r0, sp, #28
 800fdea:	f7fe fffe 	bl	800edea <mbedtls_mpi_shift_r>
 800fdee:	4604      	mov	r4, r0
 800fdf0:	b970      	cbnz	r0, 800fe10 <mbedtls_mpi_inv_mod+0x194>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800fdf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	07df      	lsls	r7, r3, #31
 800fdf8:	d429      	bmi.n	800fe4e <mbedtls_mpi_inv_mod+0x1d2>
 800fdfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	07dc      	lsls	r4, r3, #31
 800fe00:	d425      	bmi.n	800fe4e <mbedtls_mpi_inv_mod+0x1d2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800fe02:	2101      	movs	r1, #1
 800fe04:	a80a      	add	r0, sp, #40	; 0x28
 800fe06:	f7fe fff0 	bl	800edea <mbedtls_mpi_shift_r>
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d02f      	beq.n	800fe70 <mbedtls_mpi_inv_mod+0x1f4>

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800fe10:	a804      	add	r0, sp, #16
 800fe12:	f7fe fdff 	bl	800ea14 <mbedtls_mpi_free>
 800fe16:	a807      	add	r0, sp, #28
 800fe18:	f7fe fdfc 	bl	800ea14 <mbedtls_mpi_free>
 800fe1c:	a80a      	add	r0, sp, #40	; 0x28
 800fe1e:	f7fe fdf9 	bl	800ea14 <mbedtls_mpi_free>
 800fe22:	a80d      	add	r0, sp, #52	; 0x34
 800fe24:	f7fe fdf6 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800fe28:	a801      	add	r0, sp, #4
 800fe2a:	f7fe fdf3 	bl	800ea14 <mbedtls_mpi_free>
 800fe2e:	a810      	add	r0, sp, #64	; 0x40
 800fe30:	f7fe fdf0 	bl	800ea14 <mbedtls_mpi_free>
 800fe34:	a813      	add	r0, sp, #76	; 0x4c
 800fe36:	f7fe fded 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800fe3a:	a816      	add	r0, sp, #88	; 0x58
 800fe3c:	f7fe fdea 	bl	800ea14 <mbedtls_mpi_free>
 800fe40:	a819      	add	r0, sp, #100	; 0x64
 800fe42:	f7fe fde7 	bl	800ea14 <mbedtls_mpi_free>

    return( ret );
}
 800fe46:	4620      	mov	r0, r4
 800fe48:	b01c      	add	sp, #112	; 0x70
 800fe4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800fe4e:	a90a      	add	r1, sp, #40	; 0x28
 800fe50:	aa10      	add	r2, sp, #64	; 0x40
 800fe52:	4608      	mov	r0, r1
 800fe54:	f7ff f98c 	bl	800f170 <mbedtls_mpi_add_mpi>
 800fe58:	4604      	mov	r4, r0
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d1d8      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800fe5e:	a90d      	add	r1, sp, #52	; 0x34
 800fe60:	aa04      	add	r2, sp, #16
 800fe62:	4608      	mov	r0, r1
 800fe64:	f7ff f9a6 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800fe68:	4604      	mov	r4, r0
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	d0c9      	beq.n	800fe02 <mbedtls_mpi_inv_mod+0x186>
 800fe6e:	e7cf      	b.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800fe70:	2101      	movs	r1, #1
 800fe72:	a80d      	add	r0, sp, #52	; 0x34
 800fe74:	f7fe ffb9 	bl	800edea <mbedtls_mpi_shift_r>
 800fe78:	e771      	b.n	800fd5e <mbedtls_mpi_inv_mod+0xe2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800fe7a:	2101      	movs	r1, #1
 800fe7c:	a813      	add	r0, sp, #76	; 0x4c
 800fe7e:	f7fe ffb4 	bl	800edea <mbedtls_mpi_shift_r>
 800fe82:	4604      	mov	r4, r0
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d1c3      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800fe88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	07d9      	lsls	r1, r3, #31
 800fe8e:	d413      	bmi.n	800feb8 <mbedtls_mpi_inv_mod+0x23c>
 800fe90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	07da      	lsls	r2, r3, #31
 800fe96:	d40f      	bmi.n	800feb8 <mbedtls_mpi_inv_mod+0x23c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800fe98:	2101      	movs	r1, #1
 800fe9a:	a816      	add	r0, sp, #88	; 0x58
 800fe9c:	f7fe ffa5 	bl	800edea <mbedtls_mpi_shift_r>
 800fea0:	4604      	mov	r4, r0
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d1b4      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800fea6:	2101      	movs	r1, #1
 800fea8:	a819      	add	r0, sp, #100	; 0x64
 800feaa:	f7fe ff9e 	bl	800edea <mbedtls_mpi_shift_r>
 800feae:	4604      	mov	r4, r0
 800feb0:	2800      	cmp	r0, #0
 800feb2:	f43f af5b 	beq.w	800fd6c <mbedtls_mpi_inv_mod+0xf0>
 800feb6:	e7ab      	b.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800feb8:	a916      	add	r1, sp, #88	; 0x58
 800feba:	aa10      	add	r2, sp, #64	; 0x40
 800febc:	4608      	mov	r0, r1
 800febe:	f7ff f957 	bl	800f170 <mbedtls_mpi_add_mpi>
 800fec2:	4604      	mov	r4, r0
 800fec4:	2800      	cmp	r0, #0
 800fec6:	d1a3      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800fec8:	a919      	add	r1, sp, #100	; 0x64
 800feca:	aa04      	add	r2, sp, #16
 800fecc:	4608      	mov	r0, r1
 800fece:	f7ff f971 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800fed2:	4604      	mov	r4, r0
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d0df      	beq.n	800fe98 <mbedtls_mpi_inv_mod+0x21c>
 800fed8:	e79a      	b.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800feda:	a913      	add	r1, sp, #76	; 0x4c
 800fedc:	aa07      	add	r2, sp, #28
 800fede:	4608      	mov	r0, r1
 800fee0:	f7ff f968 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800fee4:	4604      	mov	r4, r0
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d192      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800feea:	a916      	add	r1, sp, #88	; 0x58
 800feec:	aa0a      	add	r2, sp, #40	; 0x28
 800feee:	4608      	mov	r0, r1
 800fef0:	f7ff f960 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800fef4:	4604      	mov	r4, r0
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d18a      	bne.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800fefa:	aa0d      	add	r2, sp, #52	; 0x34
 800fefc:	a919      	add	r1, sp, #100	; 0x64
 800fefe:	e753      	b.n	800fda8 <mbedtls_mpi_inv_mod+0x12c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800ff00:	a916      	add	r1, sp, #88	; 0x58
 800ff02:	462a      	mov	r2, r5
 800ff04:	4608      	mov	r0, r1
 800ff06:	f7ff f933 	bl	800f170 <mbedtls_mpi_add_mpi>
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	f43f af56 	beq.w	800fdbe <mbedtls_mpi_inv_mod+0x142>
 800ff12:	e77d      	b.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800ff14:	a916      	add	r1, sp, #88	; 0x58
 800ff16:	462a      	mov	r2, r5
 800ff18:	4608      	mov	r0, r1
 800ff1a:	f7ff f94b 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 800ff1e:	4604      	mov	r4, r0
 800ff20:	2800      	cmp	r0, #0
 800ff22:	f43f af53 	beq.w	800fdcc <mbedtls_mpi_inv_mod+0x150>
 800ff26:	e773      	b.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800ff28:	f06f 040d 	mvn.w	r4, #13
 800ff2c:	e770      	b.n	800fe10 <mbedtls_mpi_inv_mod+0x194>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800ff2e:	f06f 0403 	mvn.w	r4, #3
 800ff32:	e788      	b.n	800fe46 <mbedtls_mpi_inv_mod+0x1ca>

0800ff34 <mbedtls_cipher_get_block_size>:
 * \return              size of the cipher's blocks, or 0 if ctx has not been
 *                      initialised.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 800ff34:	b110      	cbz	r0, 800ff3c <mbedtls_cipher_get_block_size+0x8>
 800ff36:	6800      	ldr	r0, [r0, #0]
 800ff38:	b100      	cbz	r0, 800ff3c <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 800ff3a:	6940      	ldr	r0, [r0, #20]
}
 800ff3c:	4770      	bx	lr

0800ff3e <add_pkcs_padding>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 800ff3e:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 800ff40:	1a89      	subs	r1, r1, r2
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 800ff42:	2400      	movs	r4, #0
 800ff44:	b2e3      	uxtb	r3, r4
 800ff46:	428b      	cmp	r3, r1
 800ff48:	f104 0401 	add.w	r4, r4, #1
 800ff4c:	d300      	bcc.n	800ff50 <add_pkcs_padding+0x12>
        output[data_len + i] = (unsigned char) padding_len;
}
 800ff4e:	bd10      	pop	{r4, pc}
        output[data_len + i] = (unsigned char) padding_len;
 800ff50:	4403      	add	r3, r0
 800ff52:	5499      	strb	r1, [r3, r2]
    for( i = 0; i < padding_len; i++ )
 800ff54:	e7f6      	b.n	800ff44 <add_pkcs_padding+0x6>
	...

0800ff58 <get_pkcs_padding>:

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 800ff58:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 800ff5a:	b308      	cbz	r0, 800ffa0 <get_pkcs_padding+0x48>
 800ff5c:	b302      	cbz	r2, 800ffa0 <get_pkcs_padding+0x48>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 800ff5e:	1843      	adds	r3, r0, r1
 800ff60:	f813 5c01 	ldrb.w	r5, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 800ff64:	fab5 f385 	clz	r3, r5
    *data_len = input_len - padding_len;
 800ff68:	1b4e      	subs	r6, r1, r5
    bad |= padding_len == 0;
 800ff6a:	095b      	lsrs	r3, r3, #5
    *data_len = input_len - padding_len;
 800ff6c:	6016      	str	r6, [r2, #0]
    bad |= padding_len == 0;
 800ff6e:	428d      	cmp	r5, r1
 800ff70:	bf88      	it	hi
 800ff72:	f043 0301 	orrhi.w	r3, r3, #1

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 800ff76:	2200      	movs	r2, #0
 800ff78:	428a      	cmp	r2, r1
 800ff7a:	d104      	bne.n	800ff86 <get_pkcs_padding+0x2e>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	4809      	ldr	r0, [pc, #36]	; (800ffa4 <get_pkcs_padding+0x4c>)
 800ff80:	bf08      	it	eq
 800ff82:	2000      	moveq	r0, #0
}
 800ff84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 800ff86:	5c84      	ldrb	r4, [r0, r2]
 800ff88:	4296      	cmp	r6, r2
 800ff8a:	ea84 0405 	eor.w	r4, r4, r5
 800ff8e:	bf8c      	ite	hi
 800ff90:	2700      	movhi	r7, #0
 800ff92:	2701      	movls	r7, #1
 800ff94:	fb14 f407 	smulbb	r4, r4, r7
 800ff98:	4323      	orrs	r3, r4
 800ff9a:	b2db      	uxtb	r3, r3
    for( i = 0; i < input_len; i++ )
 800ff9c:	3201      	adds	r2, #1
 800ff9e:	e7eb      	b.n	800ff78 <get_pkcs_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ffa0:	4801      	ldr	r0, [pc, #4]	; (800ffa8 <get_pkcs_padding+0x50>)
 800ffa2:	e7ef      	b.n	800ff84 <get_pkcs_padding+0x2c>
 800ffa4:	ffff9e00 	.word	0xffff9e00
 800ffa8:	ffff9f00 	.word	0xffff9f00

0800ffac <add_one_and_zeros_padding>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 800ffac:	2380      	movs	r3, #128	; 0x80
{
 800ffae:	b530      	push	{r4, r5, lr}
    output[data_len] = 0x80;
 800ffb0:	5483      	strb	r3, [r0, r2]
    size_t padding_len = output_len - data_len;
 800ffb2:	1a89      	subs	r1, r1, r2
    for( i = 1; i < padding_len; i++ )
 800ffb4:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 800ffb6:	2400      	movs	r4, #0
    for( i = 1; i < padding_len; i++ )
 800ffb8:	428b      	cmp	r3, r1
 800ffba:	d300      	bcc.n	800ffbe <add_one_and_zeros_padding+0x12>
}
 800ffbc:	bd30      	pop	{r4, r5, pc}
        output[data_len + i] = 0x00;
 800ffbe:	18c5      	adds	r5, r0, r3
    for( i = 1; i < padding_len; i++ )
 800ffc0:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 800ffc2:	54ac      	strb	r4, [r5, r2]
    for( i = 1; i < padding_len; i++ )
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	e7f7      	b.n	800ffb8 <add_one_and_zeros_padding+0xc>

0800ffc8 <add_zeros_and_len_padding>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 800ffc8:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 800ffca:	2301      	movs	r3, #1
    size_t padding_len = output_len - data_len;
 800ffcc:	1a8d      	subs	r5, r1, r2
        output[data_len + i - 1] = 0x00;
 800ffce:	2600      	movs	r6, #0
    for( i = 1; i < padding_len; i++ )
 800ffd0:	42ab      	cmp	r3, r5
 800ffd2:	d303      	bcc.n	800ffdc <add_zeros_and_len_padding+0x14>
    output[output_len - 1] = (unsigned char) padding_len;
 800ffd4:	4401      	add	r1, r0
 800ffd6:	f801 5c01 	strb.w	r5, [r1, #-1]
}
 800ffda:	bd70      	pop	{r4, r5, r6, pc}
        output[data_len + i - 1] = 0x00;
 800ffdc:	18c4      	adds	r4, r0, r3
 800ffde:	4414      	add	r4, r2
    for( i = 1; i < padding_len; i++ )
 800ffe0:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 800ffe2:	f804 6c01 	strb.w	r6, [r4, #-1]
    for( i = 1; i < padding_len; i++ )
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	e7f2      	b.n	800ffd0 <add_zeros_and_len_padding+0x8>
	...

0800ffec <get_zeros_and_len_padding>:

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 800ffec:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 800ffee:	b1f8      	cbz	r0, 8010030 <get_zeros_and_len_padding+0x44>
 800fff0:	b1f2      	cbz	r2, 8010030 <get_zeros_and_len_padding+0x44>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 800fff2:	1e4d      	subs	r5, r1, #1
 800fff4:	5d44      	ldrb	r4, [r0, r5]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 800fff6:	fab4 f384 	clz	r3, r4
    *data_len = input_len - padding_len;
 800fffa:	1b0e      	subs	r6, r1, r4
    bad |= padding_len == 0;
 800fffc:	095b      	lsrs	r3, r3, #5
 800fffe:	428c      	cmp	r4, r1
 8010000:	bf94      	ite	ls
 8010002:	4619      	movls	r1, r3
 8010004:	f043 0101 	orrhi.w	r1, r3, #1
    *data_len = input_len - padding_len;
 8010008:	6016      	str	r6, [r2, #0]

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 801000a:	2300      	movs	r3, #0
 801000c:	429d      	cmp	r5, r3
 801000e:	d804      	bhi.n	801001a <get_zeros_and_len_padding+0x2e>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8010010:	2900      	cmp	r1, #0
 8010012:	4808      	ldr	r0, [pc, #32]	; (8010034 <get_zeros_and_len_padding+0x48>)
 8010014:	bf08      	it	eq
 8010016:	2000      	moveq	r0, #0
}
 8010018:	bd70      	pop	{r4, r5, r6, pc}
        bad |= input[i] * ( i >= pad_idx );
 801001a:	429e      	cmp	r6, r3
 801001c:	5cc2      	ldrb	r2, [r0, r3]
 801001e:	bf8c      	ite	hi
 8010020:	2400      	movhi	r4, #0
 8010022:	2401      	movls	r4, #1
 8010024:	fb12 f204 	smulbb	r2, r2, r4
 8010028:	4311      	orrs	r1, r2
 801002a:	b2c9      	uxtb	r1, r1
    for( i = 0; i < input_len - 1; i++ )
 801002c:	3301      	adds	r3, #1
 801002e:	e7ed      	b.n	801000c <get_zeros_and_len_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010030:	4801      	ldr	r0, [pc, #4]	; (8010038 <get_zeros_and_len_padding+0x4c>)
 8010032:	e7f1      	b.n	8010018 <get_zeros_and_len_padding+0x2c>
 8010034:	ffff9e00 	.word	0xffff9e00
 8010038:	ffff9f00 	.word	0xffff9f00

0801003c <add_zeros_padding>:
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 801003c:	2300      	movs	r3, #0
    for( i = data_len; i < output_len; i++ )
 801003e:	428a      	cmp	r2, r1
 8010040:	d300      	bcc.n	8010044 <add_zeros_padding+0x8>
}
 8010042:	4770      	bx	lr
        output[i] = 0x00;
 8010044:	5483      	strb	r3, [r0, r2]
    for( i = data_len; i < output_len; i++ )
 8010046:	3201      	adds	r2, #1
 8010048:	e7f9      	b.n	801003e <add_zeros_padding+0x2>
	...

0801004c <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 801004c:	b118      	cbz	r0, 8010056 <get_no_padding+0xa>
 801004e:	b112      	cbz	r2, 8010056 <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 8010050:	6011      	str	r1, [r2, #0]

    return( 0 );
 8010052:	2000      	movs	r0, #0
 8010054:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010056:	4801      	ldr	r0, [pc, #4]	; (801005c <get_no_padding+0x10>)
}
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop
 801005c:	ffff9f00 	.word	0xffff9f00

08010060 <get_one_and_zeros_padding>:
{
 8010060:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( NULL == input || NULL == data_len )
 8010062:	b320      	cbz	r0, 80100ae <get_one_and_zeros_padding+0x4e>
 8010064:	b31a      	cbz	r2, 80100ae <get_one_and_zeros_padding+0x4e>
    *data_len = 0;
 8010066:	2300      	movs	r3, #0
 8010068:	6013      	str	r3, [r2, #0]
static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
 801006a:	4408      	add	r0, r1
    bad = 0xFF;
 801006c:	26ff      	movs	r6, #255	; 0xff
    for( i = input_len; i > 0; i-- )
 801006e:	b921      	cbnz	r1, 801007a <get_one_and_zeros_padding+0x1a>
    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8010070:	2e00      	cmp	r6, #0
 8010072:	4810      	ldr	r0, [pc, #64]	; (80100b4 <get_one_and_zeros_padding+0x54>)
 8010074:	bf08      	it	eq
 8010076:	2000      	moveq	r0, #0
}
 8010078:	bdf0      	pop	{r4, r5, r6, r7, pc}
        done |= ( input[i-1] != 0 );
 801007a:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
 801007e:	2c00      	cmp	r4, #0
 8010080:	bf0c      	ite	eq
 8010082:	461c      	moveq	r4, r3
 8010084:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= ( i - 1 ) * ( done != prev_done );
 8010088:	ea83 0504 	eor.w	r5, r3, r4
        done |= ( input[i-1] != 0 );
 801008c:	3901      	subs	r1, #1
        *data_len |= ( i - 1 ) * ( done != prev_done );
 801008e:	fb01 f705 	mul.w	r7, r1, r5
 8010092:	6815      	ldr	r5, [r2, #0]
 8010094:	433d      	orrs	r5, r7
 8010096:	6015      	str	r5, [r2, #0]
        bad &= ( input[i-1] ^ 0x80 ) | ( done == prev_done );
 8010098:	7805      	ldrb	r5, [r0, #0]
 801009a:	f085 0580 	eor.w	r5, r5, #128	; 0x80
 801009e:	42a3      	cmp	r3, r4
 80100a0:	bf14      	ite	ne
 80100a2:	462b      	movne	r3, r5
 80100a4:	f045 0301 	orreq.w	r3, r5, #1
 80100a8:	401e      	ands	r6, r3
        done |= ( input[i-1] != 0 );
 80100aa:	4623      	mov	r3, r4
 80100ac:	e7df      	b.n	801006e <get_one_and_zeros_padding+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80100ae:	4802      	ldr	r0, [pc, #8]	; (80100b8 <get_one_and_zeros_padding+0x58>)
 80100b0:	e7e2      	b.n	8010078 <get_one_and_zeros_padding+0x18>
 80100b2:	bf00      	nop
 80100b4:	ffff9e00 	.word	0xffff9e00
 80100b8:	ffff9f00 	.word	0xffff9f00

080100bc <get_zeros_padding>:
{
 80100bc:	b530      	push	{r4, r5, lr}
    if( NULL == input || NULL == data_len )
 80100be:	b1a0      	cbz	r0, 80100ea <get_zeros_padding+0x2e>
 80100c0:	b19a      	cbz	r2, 80100ea <get_zeros_padding+0x2e>
    *data_len = 0;
 80100c2:	2300      	movs	r3, #0
 80100c4:	6013      	str	r3, [r2, #0]
    for( i = input_len; i > 0; i-- )
 80100c6:	b909      	cbnz	r1, 80100cc <get_zeros_padding+0x10>
 80100c8:	4608      	mov	r0, r1
}
 80100ca:	bd30      	pop	{r4, r5, pc}
        done |= ( input[i-1] != 0 );
 80100cc:	1e4d      	subs	r5, r1, #1
 80100ce:	5d44      	ldrb	r4, [r0, r5]
 80100d0:	2c00      	cmp	r4, #0
 80100d2:	bf0c      	ite	eq
 80100d4:	461c      	moveq	r4, r3
 80100d6:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= i * ( done != prev_done );
 80100da:	4063      	eors	r3, r4
 80100dc:	4359      	muls	r1, r3
 80100de:	6813      	ldr	r3, [r2, #0]
 80100e0:	4319      	orrs	r1, r3
 80100e2:	6011      	str	r1, [r2, #0]
        done |= ( input[i-1] != 0 );
 80100e4:	4623      	mov	r3, r4
    for( i = input_len; i > 0; i-- )
 80100e6:	4629      	mov	r1, r5
 80100e8:	e7ed      	b.n	80100c6 <get_zeros_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80100ea:	4801      	ldr	r0, [pc, #4]	; (80100f0 <get_zeros_padding+0x34>)
 80100ec:	e7ed      	b.n	80100ca <get_zeros_padding+0xe>
 80100ee:	bf00      	nop
 80100f0:	ffff9f00 	.word	0xffff9f00

080100f4 <mbedtls_cipher_info_from_type>:
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80100f4:	4b04      	ldr	r3, [pc, #16]	; (8010108 <mbedtls_cipher_info_from_type+0x14>)
 80100f6:	685a      	ldr	r2, [r3, #4]
 80100f8:	b90a      	cbnz	r2, 80100fe <mbedtls_cipher_info_from_type+0xa>
}
 80100fa:	4610      	mov	r0, r2
 80100fc:	4770      	bx	lr
        if( def->type == cipher_type )
 80100fe:	7819      	ldrb	r1, [r3, #0]
 8010100:	4281      	cmp	r1, r0
 8010102:	d0fa      	beq.n	80100fa <mbedtls_cipher_info_from_type+0x6>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8010104:	3308      	adds	r3, #8
 8010106:	e7f6      	b.n	80100f6 <mbedtls_cipher_info_from_type+0x2>
 8010108:	0802ab4c 	.word	0x0802ab4c

0801010c <mbedtls_cipher_info_from_values>:
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 801010c:	4b08      	ldr	r3, [pc, #32]	; (8010130 <mbedtls_cipher_info_from_values+0x24>)
{
 801010e:	b530      	push	{r4, r5, lr}
 8010110:	4604      	mov	r4, r0
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8010112:	6858      	ldr	r0, [r3, #4]
 8010114:	b900      	cbnz	r0, 8010118 <mbedtls_cipher_info_from_values+0xc>
}
 8010116:	bd30      	pop	{r4, r5, pc}
        if( def->info->base->cipher == cipher_id &&
 8010118:	6985      	ldr	r5, [r0, #24]
 801011a:	782d      	ldrb	r5, [r5, #0]
 801011c:	42a5      	cmp	r5, r4
 801011e:	d105      	bne.n	801012c <mbedtls_cipher_info_from_values+0x20>
 8010120:	6845      	ldr	r5, [r0, #4]
 8010122:	428d      	cmp	r5, r1
 8010124:	d102      	bne.n	801012c <mbedtls_cipher_info_from_values+0x20>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8010126:	7845      	ldrb	r5, [r0, #1]
 8010128:	4295      	cmp	r5, r2
 801012a:	d0f4      	beq.n	8010116 <mbedtls_cipher_info_from_values+0xa>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 801012c:	3308      	adds	r3, #8
 801012e:	e7f0      	b.n	8010112 <mbedtls_cipher_info_from_values+0x6>
 8010130:	0802ab4c 	.word	0x0802ab4c

08010134 <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8010134:	2240      	movs	r2, #64	; 0x40
 8010136:	2100      	movs	r1, #0
 8010138:	f012 b9ca 	b.w	80224d0 <memset>

0801013c <mbedtls_cipher_free>:
{
 801013c:	b510      	push	{r4, lr}
    if( ctx == NULL )
 801013e:	4604      	mov	r4, r0
 8010140:	b150      	cbz	r0, 8010158 <mbedtls_cipher_free+0x1c>
    if( ctx->cipher_ctx )
 8010142:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8010144:	b118      	cbz	r0, 801014e <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8010146:	6823      	ldr	r3, [r4, #0]
 8010148:	699b      	ldr	r3, [r3, #24]
 801014a:	699b      	ldr	r3, [r3, #24]
 801014c:	4798      	blx	r3
 801014e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8010152:	2200      	movs	r2, #0
 8010154:	429c      	cmp	r4, r3
 8010156:	d100      	bne.n	801015a <mbedtls_cipher_free+0x1e>
}
 8010158:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 801015a:	f804 2b01 	strb.w	r2, [r4], #1
 801015e:	e7f9      	b.n	8010154 <mbedtls_cipher_free+0x18>

08010160 <mbedtls_cipher_setkey>:
{
 8010160:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 8010162:	b1c8      	cbz	r0, 8010198 <mbedtls_cipher_setkey+0x38>
 8010164:	6804      	ldr	r4, [r0, #0]
 8010166:	b1bc      	cbz	r4, 8010198 <mbedtls_cipher_setkey+0x38>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8010168:	6925      	ldr	r5, [r4, #16]
 801016a:	07ad      	lsls	r5, r5, #30
 801016c:	d402      	bmi.n	8010174 <mbedtls_cipher_setkey+0x14>
 801016e:	6865      	ldr	r5, [r4, #4]
 8010170:	4295      	cmp	r5, r2
 8010172:	d111      	bne.n	8010198 <mbedtls_cipher_setkey+0x38>
    if( MBEDTLS_ENCRYPT == operation ||
 8010174:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 8010176:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8010178:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 801017a:	d004      	beq.n	8010186 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 801017c:	7865      	ldrb	r5, [r4, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 801017e:	2d03      	cmp	r5, #3
 8010180:	d001      	beq.n	8010186 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8010182:	2d05      	cmp	r5, #5
 8010184:	d104      	bne.n	8010190 <mbedtls_cipher_setkey+0x30>
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8010186:	69a3      	ldr	r3, [r4, #24]
 8010188:	68db      	ldr	r3, [r3, #12]
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 801018a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 801018c:	bc30      	pop	{r4, r5}
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 801018e:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 8010190:	b913      	cbnz	r3, 8010198 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8010192:	69a3      	ldr	r3, [r4, #24]
 8010194:	691b      	ldr	r3, [r3, #16]
 8010196:	e7f8      	b.n	801018a <mbedtls_cipher_setkey+0x2a>
}
 8010198:	4801      	ldr	r0, [pc, #4]	; (80101a0 <mbedtls_cipher_setkey+0x40>)
 801019a:	bc30      	pop	{r4, r5}
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop
 80101a0:	ffff9f00 	.word	0xffff9f00

080101a4 <mbedtls_cipher_set_iv>:
{
 80101a4:	b538      	push	{r3, r4, r5, lr}
 80101a6:	4614      	mov	r4, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 80101a8:	4605      	mov	r5, r0
 80101aa:	b1a8      	cbz	r0, 80101d8 <mbedtls_cipher_set_iv+0x34>
 80101ac:	6803      	ldr	r3, [r0, #0]
 80101ae:	b19b      	cbz	r3, 80101d8 <mbedtls_cipher_set_iv+0x34>
 80101b0:	b191      	cbz	r1, 80101d8 <mbedtls_cipher_set_iv+0x34>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 80101b2:	2a10      	cmp	r2, #16
 80101b4:	d80e      	bhi.n	80101d4 <mbedtls_cipher_set_iv+0x30>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 80101b6:	691a      	ldr	r2, [r3, #16]
 80101b8:	07d2      	lsls	r2, r2, #31
 80101ba:	d403      	bmi.n	80101c4 <mbedtls_cipher_set_iv+0x20>
        actual_iv_size = ctx->cipher_info->iv_size;
 80101bc:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 80101be:	429c      	cmp	r4, r3
 80101c0:	d30a      	bcc.n	80101d8 <mbedtls_cipher_set_iv+0x34>
 80101c2:	461c      	mov	r4, r3
    memcpy( ctx->iv, iv, actual_iv_size );
 80101c4:	4622      	mov	r2, r4
 80101c6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80101ca:	f012 f959 	bl	8022480 <memcpy>
    ctx->iv_size = actual_iv_size;
 80101ce:	63ac      	str	r4, [r5, #56]	; 0x38
    return( 0 );
 80101d0:	2000      	movs	r0, #0
}
 80101d2:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80101d4:	4801      	ldr	r0, [pc, #4]	; (80101dc <mbedtls_cipher_set_iv+0x38>)
 80101d6:	e7fc      	b.n	80101d2 <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80101d8:	4801      	ldr	r0, [pc, #4]	; (80101e0 <mbedtls_cipher_set_iv+0x3c>)
 80101da:	e7fa      	b.n	80101d2 <mbedtls_cipher_set_iv+0x2e>
 80101dc:	ffff9f80 	.word	0xffff9f80
 80101e0:	ffff9f00 	.word	0xffff9f00

080101e4 <mbedtls_cipher_reset>:
    if( NULL == ctx || NULL == ctx->cipher_info )
 80101e4:	b128      	cbz	r0, 80101f2 <mbedtls_cipher_reset+0xe>
 80101e6:	6803      	ldr	r3, [r0, #0]
 80101e8:	b11b      	cbz	r3, 80101f2 <mbedtls_cipher_reset+0xe>
    ctx->unprocessed_len = 0;
 80101ea:	2300      	movs	r3, #0
 80101ec:	6243      	str	r3, [r0, #36]	; 0x24
    return( 0 );
 80101ee:	4618      	mov	r0, r3
 80101f0:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80101f2:	4801      	ldr	r0, [pc, #4]	; (80101f8 <mbedtls_cipher_reset+0x14>)
}
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop
 80101f8:	ffff9f00 	.word	0xffff9f00

080101fc <mbedtls_cipher_update>:
{
 80101fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010200:	b085      	sub	sp, #20
 8010202:	4615      	mov	r5, r2
 8010204:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8010208:	9103      	str	r1, [sp, #12]
 801020a:	4699      	mov	r9, r3
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 801020c:	4604      	mov	r4, r0
 801020e:	b918      	cbnz	r0, 8010218 <mbedtls_cipher_update+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010210:	485f      	ldr	r0, [pc, #380]	; (8010390 <mbedtls_cipher_update+0x194>)
}
 8010212:	b005      	add	sp, #20
 8010214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8010218:	6802      	ldr	r2, [r0, #0]
 801021a:	2a00      	cmp	r2, #0
 801021c:	d0f8      	beq.n	8010210 <mbedtls_cipher_update+0x14>
 801021e:	f1ba 0f00 	cmp.w	sl, #0
 8010222:	d0f5      	beq.n	8010210 <mbedtls_cipher_update+0x14>
    *olen = 0;
 8010224:	2300      	movs	r3, #0
 8010226:	f8ca 3000 	str.w	r3, [sl]
    block_size = mbedtls_cipher_get_block_size( ctx );
 801022a:	f7ff fe83 	bl	800ff34 <mbedtls_cipher_get_block_size>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 801022e:	7853      	ldrb	r3, [r2, #1]
 8010230:	2b01      	cmp	r3, #1
    block_size = mbedtls_cipher_get_block_size( ctx );
 8010232:	4606      	mov	r6, r0
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8010234:	d110      	bne.n	8010258 <mbedtls_cipher_update+0x5c>
        if( ilen != block_size )
 8010236:	42a8      	cmp	r0, r5
 8010238:	f040 80a3 	bne.w	8010382 <mbedtls_cipher_update+0x186>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 801023c:	6993      	ldr	r3, [r2, #24]
        *olen = ilen;
 801023e:	f8ca 0000 	str.w	r0, [sl]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8010242:	685d      	ldr	r5, [r3, #4]
 8010244:	9a03      	ldr	r2, [sp, #12]
 8010246:	f994 1008 	ldrsb.w	r1, [r4, #8]
 801024a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801024c:	464b      	mov	r3, r9
 801024e:	46ac      	mov	ip, r5
}
 8010250:	b005      	add	sp, #20
 8010252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8010256:	4760      	bx	ip
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8010258:	2b06      	cmp	r3, #6
 801025a:	d10a      	bne.n	8010272 <mbedtls_cipher_update+0x76>
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 801025c:	9a03      	ldr	r2, [sp, #12]
 801025e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        *olen = ilen;
 8010260:	f8ca 5000 	str.w	r5, [sl]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 8010264:	464b      	mov	r3, r9
 8010266:	4629      	mov	r1, r5
}
 8010268:	b005      	add	sp, #20
 801026a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 801026e:	f004 b90d 	b.w	801448c <mbedtls_gcm_update>
    if ( 0 == block_size )
 8010272:	2800      	cmp	r0, #0
 8010274:	f000 8087 	beq.w	8010386 <mbedtls_cipher_update+0x18a>
    if( input == output &&
 8010278:	9a03      	ldr	r2, [sp, #12]
 801027a:	454a      	cmp	r2, r9
 801027c:	d108      	bne.n	8010290 <mbedtls_cipher_update+0x94>
 801027e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010280:	2a00      	cmp	r2, #0
 8010282:	d1c5      	bne.n	8010210 <mbedtls_cipher_update+0x14>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8010284:	fbb5 f2f0 	udiv	r2, r5, r0
 8010288:	fb00 5212 	mls	r2, r0, r2, r5
 801028c:	2a00      	cmp	r2, #0
 801028e:	d1bf      	bne.n	8010210 <mbedtls_cipher_update+0x14>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8010290:	2b02      	cmp	r3, #2
 8010292:	d17a      	bne.n	801038a <mbedtls_cipher_update+0x18e>
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 8010294:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8010298:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 801029c:	b97b      	cbnz	r3, 80102be <mbedtls_cipher_update+0xc2>
                ilen <= block_size - ctx->unprocessed_len ) ||
 801029e:	eba6 0308 	sub.w	r3, r6, r8
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 80102a2:	42ab      	cmp	r3, r5
 80102a4:	d311      	bcc.n	80102ca <mbedtls_cipher_update+0xce>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 80102a6:	f108 0014 	add.w	r0, r8, #20
 80102aa:	462a      	mov	r2, r5
 80102ac:	9903      	ldr	r1, [sp, #12]
 80102ae:	4420      	add	r0, r4
 80102b0:	f012 f8e6 	bl	8022480 <memcpy>
            ctx->unprocessed_len += ilen;
 80102b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80102b6:	442a      	add	r2, r5
 80102b8:	6262      	str	r2, [r4, #36]	; 0x24
        return( 0 );
 80102ba:	2000      	movs	r0, #0
 80102bc:	e7a9      	b.n	8010212 <mbedtls_cipher_update+0x16>
                ilen <= block_size - ctx->unprocessed_len ) ||
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d103      	bne.n	80102ca <mbedtls_cipher_update+0xce>
                ilen < block_size - ctx->unprocessed_len ) )
 80102c2:	eba6 0308 	sub.w	r3, r6, r8
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 80102c6:	42ab      	cmp	r3, r5
 80102c8:	d8ed      	bhi.n	80102a6 <mbedtls_cipher_update+0xaa>
        if( 0 != ctx->unprocessed_len )
 80102ca:	f1b8 0f00 	cmp.w	r8, #0
 80102ce:	d025      	beq.n	801031c <mbedtls_cipher_update+0x120>
            copy_len = block_size - ctx->unprocessed_len;
 80102d0:	eba6 0b08 	sub.w	fp, r6, r8
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 80102d4:	f108 0014 	add.w	r0, r8, #20
 80102d8:	9903      	ldr	r1, [sp, #12]
 80102da:	465a      	mov	r2, fp
 80102dc:	4420      	add	r0, r4
 80102de:	f012 f8cf 	bl	8022480 <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80102e2:	4623      	mov	r3, r4
 80102e4:	f853 2b14 	ldr.w	r2, [r3], #20
 80102e8:	6992      	ldr	r2, [r2, #24]
 80102ea:	e9cd 3900 	strd	r3, r9, [sp]
 80102ee:	6893      	ldr	r3, [r2, #8]
 80102f0:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80102f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80102f6:	461f      	mov	r7, r3
 80102f8:	4632      	mov	r2, r6
 80102fa:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80102fe:	47b8      	blx	r7
 8010300:	2800      	cmp	r0, #0
 8010302:	d186      	bne.n	8010212 <mbedtls_cipher_update+0x16>
            *olen += block_size;
 8010304:	f8da 3000 	ldr.w	r3, [sl]
 8010308:	4433      	add	r3, r6
 801030a:	f8ca 3000 	str.w	r3, [sl]
            input += copy_len;
 801030e:	9b03      	ldr	r3, [sp, #12]
            ctx->unprocessed_len = 0;
 8010310:	6260      	str	r0, [r4, #36]	; 0x24
            input += copy_len;
 8010312:	445b      	add	r3, fp
 8010314:	4445      	add	r5, r8
            output += block_size;
 8010316:	44b1      	add	r9, r6
            input += copy_len;
 8010318:	9303      	str	r3, [sp, #12]
            ilen -= copy_len;
 801031a:	1bad      	subs	r5, r5, r6
        if( 0 != ilen )
 801031c:	2d00      	cmp	r5, #0
 801031e:	d0cc      	beq.n	80102ba <mbedtls_cipher_update+0xbe>
            copy_len = ilen % block_size;
 8010320:	fbb5 f8f6 	udiv	r8, r5, r6
 8010324:	fb06 5818 	mls	r8, r6, r8, r5
            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )
 8010328:	f1b8 0f00 	cmp.w	r8, #0
 801032c:	d104      	bne.n	8010338 <mbedtls_cipher_update+0x13c>
 801032e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8010332:	2b00      	cmp	r3, #0
 8010334:	bf08      	it	eq
 8010336:	46b0      	moveq	r8, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8010338:	9b03      	ldr	r3, [sp, #12]
 801033a:	eba5 0508 	sub.w	r5, r5, r8
 801033e:	4642      	mov	r2, r8
 8010340:	1959      	adds	r1, r3, r5
 8010342:	f104 0014 	add.w	r0, r4, #20
 8010346:	f012 f89b 	bl	8022480 <memcpy>
            ctx->unprocessed_len += copy_len;
 801034a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801034c:	4442      	add	r2, r8
 801034e:	6262      	str	r2, [r4, #36]	; 0x24
        if( ilen )
 8010350:	2d00      	cmp	r5, #0
 8010352:	d0b2      	beq.n	80102ba <mbedtls_cipher_update+0xbe>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8010354:	6823      	ldr	r3, [r4, #0]
 8010356:	9a03      	ldr	r2, [sp, #12]
 8010358:	699b      	ldr	r3, [r3, #24]
 801035a:	9200      	str	r2, [sp, #0]
 801035c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010360:	689e      	ldr	r6, [r3, #8]
 8010362:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8010366:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010368:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801036c:	462a      	mov	r2, r5
 801036e:	47b0      	blx	r6
 8010370:	2800      	cmp	r0, #0
 8010372:	f47f af4e 	bne.w	8010212 <mbedtls_cipher_update+0x16>
            *olen += ilen;
 8010376:	f8da 2000 	ldr.w	r2, [sl]
 801037a:	4415      	add	r5, r2
 801037c:	f8ca 5000 	str.w	r5, [sl]
 8010380:	e747      	b.n	8010212 <mbedtls_cipher_update+0x16>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8010382:	4804      	ldr	r0, [pc, #16]	; (8010394 <mbedtls_cipher_update+0x198>)
 8010384:	e745      	b.n	8010212 <mbedtls_cipher_update+0x16>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 8010386:	4804      	ldr	r0, [pc, #16]	; (8010398 <mbedtls_cipher_update+0x19c>)
 8010388:	e743      	b.n	8010212 <mbedtls_cipher_update+0x16>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 801038a:	4804      	ldr	r0, [pc, #16]	; (801039c <mbedtls_cipher_update+0x1a0>)
 801038c:	e741      	b.n	8010212 <mbedtls_cipher_update+0x16>
 801038e:	bf00      	nop
 8010390:	ffff9f00 	.word	0xffff9f00
 8010394:	ffff9d80 	.word	0xffff9d80
 8010398:	ffff9c80 	.word	0xffff9c80
 801039c:	ffff9f80 	.word	0xffff9f80

080103a0 <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 80103a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103a2:	460e      	mov	r6, r1
 80103a4:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80103a6:	4604      	mov	r4, r0
 80103a8:	2800      	cmp	r0, #0
 80103aa:	d055      	beq.n	8010458 <mbedtls_cipher_finish+0xb8>
 80103ac:	6801      	ldr	r1, [r0, #0]
 80103ae:	2900      	cmp	r1, #0
 80103b0:	d052      	beq.n	8010458 <mbedtls_cipher_finish+0xb8>
 80103b2:	2a00      	cmp	r2, #0
 80103b4:	d050      	beq.n	8010458 <mbedtls_cipher_finish+0xb8>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 80103b6:	2300      	movs	r3, #0
 80103b8:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80103ba:	784a      	ldrb	r2, [r1, #1]
 80103bc:	2a03      	cmp	r2, #3
 80103be:	d009      	beq.n	80103d4 <mbedtls_cipher_finish+0x34>
 80103c0:	1f57      	subs	r7, r2, #5
 80103c2:	2f02      	cmp	r7, #2
 80103c4:	d906      	bls.n	80103d4 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 80103c6:	2a01      	cmp	r2, #1
 80103c8:	d107      	bne.n	80103da <mbedtls_cipher_finish+0x3a>
    {
        if( ctx->unprocessed_len != 0 )
 80103ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80103cc:	2b00      	cmp	r3, #0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80103ce:	4b24      	ldr	r3, [pc, #144]	; (8010460 <mbedtls_cipher_finish+0xc0>)
 80103d0:	bf08      	it	eq
 80103d2:	2300      	moveq	r3, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	b003      	add	sp, #12
 80103d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 80103da:	2a02      	cmp	r2, #2
 80103dc:	d13e      	bne.n	801045c <mbedtls_cipher_finish+0xbc>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 80103de:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80103e2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d12c      	bne.n	8010442 <mbedtls_cipher_finish+0xa2>
            if( NULL == ctx->add_padding )
 80103e8:	68c7      	ldr	r7, [r0, #12]
 80103ea:	b90f      	cbnz	r7, 80103f0 <mbedtls_cipher_finish+0x50>
                if( 0 != ctx->unprocessed_len )
 80103ec:	2a00      	cmp	r2, #0
 80103ee:	e7ee      	b.n	80103ce <mbedtls_cipher_finish+0x2e>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 80103f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 80103f2:	3014      	adds	r0, #20
 80103f4:	b31b      	cbz	r3, 801043e <mbedtls_cipher_finish+0x9e>
        return (int) ctx->iv_size;
 80103f6:	4619      	mov	r1, r3
 80103f8:	47b8      	blx	r7
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80103fa:	4620      	mov	r0, r4
 80103fc:	f7ff fd9a 	bl	800ff34 <mbedtls_cipher_get_block_size>
 8010400:	4623      	mov	r3, r4
 8010402:	4602      	mov	r2, r0
 8010404:	f853 1b14 	ldr.w	r1, [r3], #20
 8010408:	6989      	ldr	r1, [r1, #24]
 801040a:	e9cd 3600 	strd	r3, r6, [sp]
 801040e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8010412:	688f      	ldr	r7, [r1, #8]
 8010414:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010416:	f994 1008 	ldrsb.w	r1, [r4, #8]
 801041a:	47b8      	blx	r7
 801041c:	4603      	mov	r3, r0
 801041e:	2800      	cmp	r0, #0
 8010420:	d1d8      	bne.n	80103d4 <mbedtls_cipher_finish+0x34>
        if( MBEDTLS_DECRYPT == ctx->operation )
 8010422:	4620      	mov	r0, r4
 8010424:	f7ff fd86 	bl	800ff34 <mbedtls_cipher_get_block_size>
 8010428:	f994 2008 	ldrsb.w	r2, [r4, #8]
 801042c:	4601      	mov	r1, r0
 801042e:	b98a      	cbnz	r2, 8010454 <mbedtls_cipher_finish+0xb4>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8010430:	6923      	ldr	r3, [r4, #16]
 8010432:	462a      	mov	r2, r5
 8010434:	4630      	mov	r0, r6
}
 8010436:	b003      	add	sp, #12
 8010438:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 801043c:	4718      	bx	r3

    return (int) ctx->cipher_info->iv_size;
 801043e:	68c9      	ldr	r1, [r1, #12]
 8010440:	e7da      	b.n	80103f8 <mbedtls_cipher_finish+0x58>
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 8010442:	f7ff fd77 	bl	800ff34 <mbedtls_cipher_get_block_size>
 8010446:	4290      	cmp	r0, r2
 8010448:	d0d7      	beq.n	80103fa <mbedtls_cipher_finish+0x5a>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 801044a:	68e3      	ldr	r3, [r4, #12]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d0cd      	beq.n	80103ec <mbedtls_cipher_finish+0x4c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8010450:	4b03      	ldr	r3, [pc, #12]	; (8010460 <mbedtls_cipher_finish+0xc0>)
 8010452:	e7bf      	b.n	80103d4 <mbedtls_cipher_finish+0x34>
        *olen = mbedtls_cipher_get_block_size( ctx );
 8010454:	6028      	str	r0, [r5, #0]
        return( 0 );
 8010456:	e7bd      	b.n	80103d4 <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010458:	4b02      	ldr	r3, [pc, #8]	; (8010464 <mbedtls_cipher_finish+0xc4>)
 801045a:	e7bb      	b.n	80103d4 <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 801045c:	4b02      	ldr	r3, [pc, #8]	; (8010468 <mbedtls_cipher_finish+0xc8>)
 801045e:	e7b9      	b.n	80103d4 <mbedtls_cipher_finish+0x34>
 8010460:	ffff9d80 	.word	0xffff9d80
 8010464:	ffff9f00 	.word	0xffff9f00
 8010468:	ffff9f80 	.word	0xffff9f80

0801046c <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 801046c:	b308      	cbz	r0, 80104b2 <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 801046e:	6803      	ldr	r3, [r0, #0]
    if( NULL == ctx ||
 8010470:	785b      	ldrb	r3, [r3, #1]
 8010472:	2b02      	cmp	r3, #2
 8010474:	d11d      	bne.n	80104b2 <mbedtls_cipher_set_padding_mode+0x46>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 8010476:	2904      	cmp	r1, #4
 8010478:	d81d      	bhi.n	80104b6 <mbedtls_cipher_set_padding_mode+0x4a>
 801047a:	e8df f001 	tbb	[pc, r1]
 801047e:	0903      	.short	0x0903
 8010480:	110d      	.short	0x110d
 8010482:	15          	.byte	0x15
 8010483:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 8010484:	4b0d      	ldr	r3, [pc, #52]	; (80104bc <mbedtls_cipher_set_padding_mode+0x50>)
 8010486:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 8010488:	4b0d      	ldr	r3, [pc, #52]	; (80104c0 <mbedtls_cipher_set_padding_mode+0x54>)
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
 801048a:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 801048c:	2000      	movs	r0, #0
        break;
 801048e:	4770      	bx	lr
        ctx->add_padding = add_one_and_zeros_padding;
 8010490:	4b0c      	ldr	r3, [pc, #48]	; (80104c4 <mbedtls_cipher_set_padding_mode+0x58>)
 8010492:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 8010494:	4b0c      	ldr	r3, [pc, #48]	; (80104c8 <mbedtls_cipher_set_padding_mode+0x5c>)
 8010496:	e7f8      	b.n	801048a <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_and_len_padding;
 8010498:	4b0c      	ldr	r3, [pc, #48]	; (80104cc <mbedtls_cipher_set_padding_mode+0x60>)
 801049a:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 801049c:	4b0c      	ldr	r3, [pc, #48]	; (80104d0 <mbedtls_cipher_set_padding_mode+0x64>)
 801049e:	e7f4      	b.n	801048a <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
 80104a0:	4b0c      	ldr	r3, [pc, #48]	; (80104d4 <mbedtls_cipher_set_padding_mode+0x68>)
 80104a2:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 80104a4:	4b0c      	ldr	r3, [pc, #48]	; (80104d8 <mbedtls_cipher_set_padding_mode+0x6c>)
 80104a6:	e7f0      	b.n	801048a <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->get_padding = get_no_padding;
 80104a8:	4a0c      	ldr	r2, [pc, #48]	; (80104dc <mbedtls_cipher_set_padding_mode+0x70>)
 80104aa:	6102      	str	r2, [r0, #16]
        ctx->add_padding = NULL;
 80104ac:	2300      	movs	r3, #0
 80104ae:	60c3      	str	r3, [r0, #12]
        break;
 80104b0:	e7ec      	b.n	801048c <mbedtls_cipher_set_padding_mode+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80104b2:	480b      	ldr	r0, [pc, #44]	; (80104e0 <mbedtls_cipher_set_padding_mode+0x74>)
 80104b4:	4770      	bx	lr
    if( NULL == ctx ||
 80104b6:	480b      	ldr	r0, [pc, #44]	; (80104e4 <mbedtls_cipher_set_padding_mode+0x78>)
}
 80104b8:	4770      	bx	lr
 80104ba:	bf00      	nop
 80104bc:	0800ff3f 	.word	0x0800ff3f
 80104c0:	0800ff59 	.word	0x0800ff59
 80104c4:	0800ffad 	.word	0x0800ffad
 80104c8:	08010061 	.word	0x08010061
 80104cc:	0800ffc9 	.word	0x0800ffc9
 80104d0:	0800ffed 	.word	0x0800ffed
 80104d4:	0801003d 	.word	0x0801003d
 80104d8:	080100bd 	.word	0x080100bd
 80104dc:	0801004d 	.word	0x0801004d
 80104e0:	ffff9f00 	.word	0xffff9f00
 80104e4:	ffff9f80 	.word	0xffff9f80

080104e8 <mbedtls_cipher_setup>:
{
 80104e8:	b538      	push	{r3, r4, r5, lr}
 80104ea:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 80104ec:	460d      	mov	r5, r1
 80104ee:	b181      	cbz	r1, 8010512 <mbedtls_cipher_setup+0x2a>
 80104f0:	b178      	cbz	r0, 8010512 <mbedtls_cipher_setup+0x2a>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80104f2:	2240      	movs	r2, #64	; 0x40
 80104f4:	2100      	movs	r1, #0
 80104f6:	f011 ffeb 	bl	80224d0 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 80104fa:	69ab      	ldr	r3, [r5, #24]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	4798      	blx	r3
 8010500:	63e0      	str	r0, [r4, #60]	; 0x3c
 8010502:	b140      	cbz	r0, 8010516 <mbedtls_cipher_setup+0x2e>
    ctx->cipher_info = cipher_info;
 8010504:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 8010506:	2100      	movs	r1, #0
 8010508:	4620      	mov	r0, r4
 801050a:	f7ff ffaf 	bl	801046c <mbedtls_cipher_set_padding_mode>
    return( 0 );
 801050e:	2000      	movs	r0, #0
}
 8010510:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010512:	4802      	ldr	r0, [pc, #8]	; (801051c <mbedtls_cipher_setup+0x34>)
 8010514:	e7fc      	b.n	8010510 <mbedtls_cipher_setup+0x28>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8010516:	4802      	ldr	r0, [pc, #8]	; (8010520 <mbedtls_cipher_setup+0x38>)
 8010518:	e7fa      	b.n	8010510 <mbedtls_cipher_setup+0x28>
 801051a:	bf00      	nop
 801051c:	ffff9f00 	.word	0xffff9f00
 8010520:	ffff9e80 	.word	0xffff9e80

08010524 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 8010524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010526:	b085      	sub	sp, #20
 8010528:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801052c:	4604      	mov	r4, r0
 801052e:	461e      	mov	r6, r3
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8010530:	f7ff fe38 	bl	80101a4 <mbedtls_cipher_set_iv>
 8010534:	b9b0      	cbnz	r0, 8010564 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 8010536:	4620      	mov	r0, r4
 8010538:	f7ff fe54 	bl	80101e4 <mbedtls_cipher_reset>
 801053c:	b990      	cbnz	r0, 8010564 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 801053e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010540:	9500      	str	r5, [sp, #0]
 8010542:	463b      	mov	r3, r7
 8010544:	4631      	mov	r1, r6
 8010546:	4620      	mov	r0, r4
 8010548:	f7ff fe58 	bl	80101fc <mbedtls_cipher_update>
 801054c:	b950      	cbnz	r0, 8010564 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 801054e:	6829      	ldr	r1, [r5, #0]
 8010550:	aa03      	add	r2, sp, #12
 8010552:	4439      	add	r1, r7
 8010554:	4620      	mov	r0, r4
 8010556:	f7ff ff23 	bl	80103a0 <mbedtls_cipher_finish>
 801055a:	b918      	cbnz	r0, 8010564 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	9a03      	ldr	r2, [sp, #12]
 8010560:	4413      	add	r3, r2
 8010562:	602b      	str	r3, [r5, #0]

    return( 0 );
}
 8010564:	b005      	add	sp, #20
 8010566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010568 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8010568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 801056c:	6807      	ldr	r7, [r0, #0]
{
 801056e:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8010572:	787f      	ldrb	r7, [r7, #1]
 8010574:	2f06      	cmp	r7, #6
{
 8010576:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 801057a:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 801057e:	e9dd 980b 	ldrd	r9, r8, [sp, #44]	; 0x2c
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8010582:	d110      	bne.n	80105a6 <mbedtls_cipher_auth_encrypt+0x3e>
    {
        *olen = ilen;
 8010584:	f8c9 4000 	str.w	r4, [r9]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 8010588:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801058c:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 8010590:	e9cd 6c0a 	strd	r6, ip, [sp, #40]	; 0x28
 8010594:	9207      	str	r2, [sp, #28]
 8010596:	460b      	mov	r3, r1
 8010598:	4622      	mov	r2, r4
 801059a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 801059c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 80105a0:	2101      	movs	r1, #1
 80105a2:	f004 b850 	b.w	8014646 <mbedtls_gcm_crypt_and_tag>
}
 80105a6:	4801      	ldr	r0, [pc, #4]	; (80105ac <mbedtls_cipher_auth_encrypt+0x44>)
 80105a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105ac:	ffff9f80 	.word	0xffff9f80

080105b0 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80105b0:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80105b2:	6805      	ldr	r5, [r0, #0]
 80105b4:	786d      	ldrb	r5, [r5, #1]
{
 80105b6:	b087      	sub	sp, #28
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80105b8:	2d06      	cmp	r5, #6
{
 80105ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80105bc:	d119      	bne.n	80105f2 <mbedtls_cipher_auth_decrypt+0x42>
    {
        int ret;

        *olen = ilen;
 80105be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80105c0:	602c      	str	r4, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 80105c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80105c4:	9505      	str	r5, [sp, #20]
 80105c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80105c8:	9504      	str	r5, [sp, #16]
 80105ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80105cc:	9503      	str	r5, [sp, #12]
 80105ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80105d0:	9502      	str	r5, [sp, #8]
 80105d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80105d4:	e9cd 3500 	strd	r3, r5, [sp]
 80105d8:	4613      	mov	r3, r2
 80105da:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80105dc:	460a      	mov	r2, r1
 80105de:	4621      	mov	r1, r4
 80105e0:	f004 f854 	bl	801468c <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80105e4:	4b04      	ldr	r3, [pc, #16]	; (80105f8 <mbedtls_cipher_auth_decrypt+0x48>)
 80105e6:	f110 0f12 	cmn.w	r0, #18
 80105ea:	bf08      	it	eq
 80105ec:	4618      	moveq	r0, r3
        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80105ee:	b007      	add	sp, #28
 80105f0:	bd30      	pop	{r4, r5, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80105f2:	4802      	ldr	r0, [pc, #8]	; (80105fc <mbedtls_cipher_auth_decrypt+0x4c>)
 80105f4:	e7fb      	b.n	80105ee <mbedtls_cipher_auth_decrypt+0x3e>
 80105f6:	bf00      	nop
 80105f8:	ffff9d00 	.word	0xffff9d00
 80105fc:	ffff9f80 	.word	0xffff9f80

08010600 <gcm_ctx_free>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 8010600:	b510      	push	{r4, lr}
 8010602:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 8010604:	f004 f86e 	bl	80146e4 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8010608:	4b02      	ldr	r3, [pc, #8]	; (8010614 <gcm_ctx_free+0x14>)
 801060a:	4620      	mov	r0, r4
 801060c:	681b      	ldr	r3, [r3, #0]
}
 801060e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8010612:	4718      	bx	r3
 8010614:	200005a4 	.word	0x200005a4

08010618 <gcm_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8010618:	4b06      	ldr	r3, [pc, #24]	; (8010634 <gcm_ctx_alloc+0x1c>)
{
 801061a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8010622:	2001      	movs	r0, #1
 8010624:	4798      	blx	r3
    if( ctx != NULL )
 8010626:	4604      	mov	r4, r0
 8010628:	b108      	cbz	r0, 801062e <gcm_ctx_alloc+0x16>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 801062a:	f003 fddd 	bl	80141e8 <mbedtls_gcm_init>
}
 801062e:	4620      	mov	r0, r4
 8010630:	bd10      	pop	{r4, pc}
 8010632:	bf00      	nop
 8010634:	200005a0 	.word	0x200005a0

08010638 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 8010638:	4613      	mov	r3, r2
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 801063a:	460a      	mov	r2, r1
 801063c:	2102      	movs	r1, #2
 801063e:	f003 bdd8 	b.w	80141f2 <mbedtls_gcm_setkey>
	...

08010644 <aes_ctx_free>:
{
 8010644:	b510      	push	{r4, lr}
 8010646:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8010648:	f7fc ffff 	bl	800d64a <mbedtls_aes_free>
    mbedtls_free( ctx );
 801064c:	4b02      	ldr	r3, [pc, #8]	; (8010658 <aes_ctx_free+0x14>)
 801064e:	4620      	mov	r0, r4
 8010650:	681b      	ldr	r3, [r3, #0]
}
 8010652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8010656:	4718      	bx	r3
 8010658:	200005a4 	.word	0x200005a4

0801065c <aes_ctx_alloc>:
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 801065c:	4b06      	ldr	r3, [pc, #24]	; (8010678 <aes_ctx_alloc+0x1c>)
{
 801065e:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	f44f 718c 	mov.w	r1, #280	; 0x118
 8010666:	2001      	movs	r0, #1
 8010668:	4798      	blx	r3
    if( aes == NULL )
 801066a:	4604      	mov	r4, r0
 801066c:	b108      	cbz	r0, 8010672 <aes_ctx_alloc+0x16>
    mbedtls_aes_init( aes );
 801066e:	f7fc ffe7 	bl	800d640 <mbedtls_aes_init>
}
 8010672:	4620      	mov	r0, r4
 8010674:	bd10      	pop	{r4, pc}
 8010676:	bf00      	nop
 8010678:	200005a0 	.word	0x200005a0

0801067c <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 801067c:	f7fd b8e4 	b.w	800d848 <mbedtls_aes_setkey_dec>

08010680 <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8010680:	f7fc bfee 	b.w	800d660 <mbedtls_aes_setkey_enc>

08010684 <aes_crypt_cbc_wrap>:
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 8010684:	f7fd bd01 	b.w	800e08a <mbedtls_aes_crypt_cbc>

08010688 <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8010688:	f7fd bcf1 	b.w	800e06e <mbedtls_aes_crypt_ecb>

0801068c <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 801068c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_aes_context aes_ctx;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 8010690:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
{
 8010694:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8010698:	4604      	mov	r4, r0
 801069a:	460f      	mov	r7, r1
 801069c:	4616      	mov	r6, r2
    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 801069e:	d87b      	bhi.n	8010798 <block_cipher_df+0x10c>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 80106a0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80106a4:	2100      	movs	r1, #0
 80106a6:	a85e      	add	r0, sp, #376	; 0x178
 80106a8:	f011 ff12 	bl	80224d0 <memset>
    mbedtls_aes_init( &aes_ctx );
 80106ac:	a818      	add	r0, sp, #96	; 0x60
 80106ae:	f7fc ffc7 	bl	800d640 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 80106b2:	ba73      	rev16	r3, r6
 80106b4:	f8ad 318a 	strh.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 80106b8:	2330      	movs	r3, #48	; 0x30
 80106ba:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 80106be:	ab64      	add	r3, sp, #400	; 0x190
 80106c0:	4632      	mov	r2, r6
    *p++ = ( data_len >> 24 ) & 0xff;
 80106c2:	2500      	movs	r5, #0
    memcpy( p, data, data_len );
 80106c4:	4639      	mov	r1, r7
 80106c6:	4618      	mov	r0, r3
    *p++ = ( data_len >> 24 ) & 0xff;
 80106c8:	f8ad 5188 	strh.w	r5, [sp, #392]	; 0x188
    memcpy( p, data, data_len );
 80106cc:	f011 fed8 	bl	8022480 <memcpy>
    p[data_len] = 0x80;
 80106d0:	2280      	movs	r2, #128	; 0x80
 80106d2:	5582      	strb	r2, [r0, r6]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 80106d4:	aa04      	add	r2, sp, #16
 80106d6:	3619      	adds	r6, #25

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 80106d8:	462b      	mov	r3, r5
 80106da:	4611      	mov	r1, r2
        key[i] = i;
 80106dc:	f802 3b01 	strb.w	r3, [r2], #1
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 80106e0:	3301      	adds	r3, #1
 80106e2:	2b20      	cmp	r3, #32
 80106e4:	d1fa      	bne.n	80106dc <block_cipher_df+0x50>

    mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 80106e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80106ea:	a818      	add	r0, sp, #96	; 0x60
 80106ec:	f7fc ffb8 	bl	800d660 <mbedtls_aes_setkey_enc>

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80106f0:	2700      	movs	r7, #0
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80106f2:	466d      	mov	r5, sp
 80106f4:	2210      	movs	r2, #16
 80106f6:	2100      	movs	r1, #0
 80106f8:	4628      	mov	r0, r5
 80106fa:	f011 fee9 	bl	80224d0 <memset>
        use_len = buf_len;
 80106fe:	46b1      	mov	r9, r6
 8010700:	f20d 1387 	addw	r3, sp, #391	; 0x187

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8010704:	462a      	mov	r2, r5
 8010706:	f1a3 0810 	sub.w	r8, r3, #16
                chain[i] ^= p[i];
 801070a:	7811      	ldrb	r1, [r2, #0]
 801070c:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 8010710:	4041      	eors	r1, r0
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8010712:	4598      	cmp	r8, r3
                chain[i] ^= p[i];
 8010714:	f802 1b01 	strb.w	r1, [r2], #1
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8010718:	d1f7      	bne.n	801070a <block_cipher_df+0x7e>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 801071a:	f1b9 0f10 	cmp.w	r9, #16
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;

            mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain );
 801071e:	462b      	mov	r3, r5
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8010720:	bf94      	ite	ls
 8010722:	eba9 0909 	subls.w	r9, r9, r9
 8010726:	f1a9 0910 	subhi.w	r9, r9, #16
            mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain );
 801072a:	462a      	mov	r2, r5
 801072c:	2101      	movs	r1, #1
 801072e:	a818      	add	r0, sp, #96	; 0x60
 8010730:	f7fd fc9d 	bl	800e06e <mbedtls_aes_crypt_ecb>
        while( use_len > 0 )
 8010734:	f108 0310 	add.w	r3, r8, #16
 8010738:	f1b9 0f00 	cmp.w	r9, #0
 801073c:	d1e2      	bne.n	8010704 <block_cipher_df+0x78>
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 801073e:	ab0c      	add	r3, sp, #48	; 0x30
 8010740:	eb07 0c03 	add.w	ip, r7, r3
 8010744:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010748:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

        /*
         * Update IV
         */
        buf[3]++;
 801074c:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010750:	3710      	adds	r7, #16
        buf[3]++;
 8010752:	3301      	adds	r3, #1
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010754:	2f30      	cmp	r7, #48	; 0x30
        buf[3]++;
 8010756:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 801075a:	d1cb      	bne.n	80106f4 <block_cipher_df+0x68>
    }

    /*
     * Do final encryption with reduced data
     */
    mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS );
 801075c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010760:	a90c      	add	r1, sp, #48	; 0x30
 8010762:	a818      	add	r0, sp, #96	; 0x60
 8010764:	f7fc ff7c 	bl	800d660 <mbedtls_aes_setkey_enc>
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010768:	f104 0630 	add.w	r6, r4, #48	; 0x30
    {
        mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 801076c:	ad14      	add	r5, sp, #80	; 0x50
 801076e:	462b      	mov	r3, r5
 8010770:	462a      	mov	r2, r5
 8010772:	2101      	movs	r1, #1
 8010774:	a818      	add	r0, sp, #96	; 0x60
 8010776:	f7fd fc7a 	bl	800e06e <mbedtls_aes_crypt_ecb>
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 801077a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801077e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8010782:	3410      	adds	r4, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010784:	42a6      	cmp	r6, r4
 8010786:	d1f2      	bne.n	801076e <block_cipher_df+0xe2>
    }

    mbedtls_aes_free( &aes_ctx );
 8010788:	a818      	add	r0, sp, #96	; 0x60
 801078a:	f7fc ff5e 	bl	800d64a <mbedtls_aes_free>

    return( 0 );
 801078e:	2000      	movs	r0, #0
}
 8010790:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
 8010794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8010798:	f06f 0037 	mvn.w	r0, #55	; 0x37
 801079c:	e7f8      	b.n	8010790 <block_cipher_df+0x104>

0801079e <ctr_drbg_update_internal>:

static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 801079e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a2:	b08c      	sub	sp, #48	; 0x30
 80107a4:	4604      	mov	r4, r0
 80107a6:	460d      	mov	r5, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 80107a8:	2230      	movs	r2, #48	; 0x30
 80107aa:	2100      	movs	r1, #0
 80107ac:	4668      	mov	r0, sp
 80107ae:	f011 fe8f 	bl	80224d0 <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80107b2:	f04f 0800 	mov.w	r8, #0
                break;

        /*
         * Crypt counter block
         */
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 80107b6:	f104 0720 	add.w	r7, r4, #32
 80107ba:	466e      	mov	r6, sp
 80107bc:	eb0d 0308 	add.w	r3, sp, r8
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80107c0:	f104 010f 	add.w	r1, r4, #15
            if( ++ctx->counter[i - 1] != 0 )
 80107c4:	780a      	ldrb	r2, [r1, #0]
 80107c6:	3201      	adds	r2, #1
 80107c8:	b2d2      	uxtb	r2, r2
 80107ca:	4608      	mov	r0, r1
 80107cc:	f801 2901 	strb.w	r2, [r1], #-1
 80107d0:	b90a      	cbnz	r2, 80107d6 <ctr_drbg_update_internal+0x38>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80107d2:	42a0      	cmp	r0, r4
 80107d4:	d1f6      	bne.n	80107c4 <ctr_drbg_update_internal+0x26>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 80107d6:	4622      	mov	r2, r4
 80107d8:	2101      	movs	r1, #1
 80107da:	4638      	mov	r0, r7
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80107dc:	f108 0810 	add.w	r8, r8, #16
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 80107e0:	f7fd fc45 	bl	800e06e <mbedtls_aes_crypt_ecb>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80107e4:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 80107e8:	d1e7      	bne.n	80107ba <ctr_drbg_update_internal+0x1c>
 80107ea:	1e6b      	subs	r3, r5, #1
 80107ec:	352f      	adds	r5, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 80107ee:	7832      	ldrb	r2, [r6, #0]
 80107f0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80107f4:	404a      	eors	r2, r1
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 80107f6:	42ab      	cmp	r3, r5
        tmp[i] ^= data[i];
 80107f8:	f806 2b01 	strb.w	r2, [r6], #1
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 80107fc:	d1f7      	bne.n	80107ee <ctr_drbg_update_internal+0x50>

    /*
     * Update key and counter
     */
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS );
 80107fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010802:	4669      	mov	r1, sp
 8010804:	4638      	mov	r0, r7
 8010806:	f7fc ff2b 	bl	800d660 <mbedtls_aes_setkey_enc>
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 801080a:	ad0c      	add	r5, sp, #48	; 0x30
 801080c:	aa08      	add	r2, sp, #32
 801080e:	4613      	mov	r3, r2
 8010810:	cb03      	ldmia	r3!, {r0, r1}
 8010812:	42ab      	cmp	r3, r5
 8010814:	6020      	str	r0, [r4, #0]
 8010816:	6061      	str	r1, [r4, #4]
 8010818:	461a      	mov	r2, r3
 801081a:	f104 0408 	add.w	r4, r4, #8
 801081e:	d1f6      	bne.n	801080e <ctr_drbg_update_internal+0x70>

    return( 0 );
}
 8010820:	2000      	movs	r0, #0
 8010822:	b00c      	add	sp, #48	; 0x30
 8010824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010828 <mbedtls_ctr_drbg_free.part.0>:
void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
 8010828:	b510      	push	{r4, lr}
 801082a:	4604      	mov	r4, r0
    mbedtls_aes_free( &ctx->aes_ctx );
 801082c:	3020      	adds	r0, #32
 801082e:	f7fc ff0c 	bl	800d64a <mbedtls_aes_free>
static void mbedtls_zeroize( void *v, size_t n ) {
 8010832:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8010836:	2200      	movs	r2, #0
 8010838:	429c      	cmp	r4, r3
 801083a:	d100      	bne.n	801083e <mbedtls_ctr_drbg_free.part.0+0x16>
}
 801083c:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801083e:	f804 2b01 	strb.w	r2, [r4], #1
 8010842:	e7f9      	b.n	8010838 <mbedtls_ctr_drbg_free.part.0+0x10>

08010844 <mbedtls_ctr_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 8010844:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010848:	2100      	movs	r1, #0
 801084a:	f011 be41 	b.w	80224d0 <memset>

0801084e <mbedtls_ctr_drbg_free>:
    if( ctx == NULL )
 801084e:	b108      	cbz	r0, 8010854 <mbedtls_ctr_drbg_free+0x6>
 8010850:	f7ff bfea 	b.w	8010828 <mbedtls_ctr_drbg_free.part.0>
}
 8010854:	4770      	bx	lr

08010856 <mbedtls_ctr_drbg_reseed>:
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 8010856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 801085a:	6985      	ldr	r5, [r0, #24]
 801085c:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
{
 8010860:	b0e0      	sub	sp, #384	; 0x180
 8010862:	4604      	mov	r4, r0
 8010864:	4688      	mov	r8, r1
 8010866:	4616      	mov	r6, r2
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8010868:	d82d      	bhi.n	80108c6 <mbedtls_ctr_drbg_reseed+0x70>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 801086a:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 801086e:	4293      	cmp	r3, r2
 8010870:	d329      	bcc.n	80108c6 <mbedtls_ctr_drbg_reseed+0x70>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 8010872:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8010876:	2100      	movs	r1, #0
 8010878:	4668      	mov	r0, sp
 801087a:	f011 fe29 	bl	80224d0 <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 801087e:	462a      	mov	r2, r5
 8010880:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8010884:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8010888:	4669      	mov	r1, sp
 801088a:	4798      	blx	r3
 801088c:	4605      	mov	r5, r0
 801088e:	b9e8      	cbnz	r0, 80108cc <mbedtls_ctr_drbg_reseed+0x76>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 8010890:	69a7      	ldr	r7, [r4, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 8010892:	f1b8 0f00 	cmp.w	r8, #0
 8010896:	d007      	beq.n	80108a8 <mbedtls_ctr_drbg_reseed+0x52>
 8010898:	b136      	cbz	r6, 80108a8 <mbedtls_ctr_drbg_reseed+0x52>
    {
        memcpy( seed + seedlen, additional, len );
 801089a:	eb0d 0007 	add.w	r0, sp, r7
 801089e:	4632      	mov	r2, r6
 80108a0:	4641      	mov	r1, r8
 80108a2:	f011 fded 	bl	8022480 <memcpy>
        seedlen += len;
 80108a6:	4437      	add	r7, r6
    }

    /*
     * Reduce to 384 bits
     */
    block_cipher_df( seed, seed, seedlen );
 80108a8:	463a      	mov	r2, r7
 80108aa:	4669      	mov	r1, sp
 80108ac:	4668      	mov	r0, sp
 80108ae:	f7ff feed 	bl	801068c <block_cipher_df>

    /*
     * Update state
     */
    ctr_drbg_update_internal( ctx, seed );
 80108b2:	4669      	mov	r1, sp
 80108b4:	4620      	mov	r0, r4
 80108b6:	f7ff ff72 	bl	801079e <ctr_drbg_update_internal>
    ctx->reseed_counter = 1;
 80108ba:	2301      	movs	r3, #1
 80108bc:	6123      	str	r3, [r4, #16]

    return( 0 );
}
 80108be:	4628      	mov	r0, r5
 80108c0:	b060      	add	sp, #384	; 0x180
 80108c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80108c6:	f06f 0537 	mvn.w	r5, #55	; 0x37
 80108ca:	e7f8      	b.n	80108be <mbedtls_ctr_drbg_reseed+0x68>
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 80108cc:	f06f 0533 	mvn.w	r5, #51	; 0x33
 80108d0:	e7f5      	b.n	80108be <mbedtls_ctr_drbg_reseed+0x68>

080108d2 <mbedtls_ctr_drbg_seed_entropy_len>:
{
 80108d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108d4:	b08b      	sub	sp, #44	; 0x2c
 80108d6:	4604      	mov	r4, r0
 80108d8:	460f      	mov	r7, r1
 80108da:	4616      	mov	r6, r2
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80108dc:	2100      	movs	r1, #0
 80108de:	2220      	movs	r2, #32
 80108e0:	a802      	add	r0, sp, #8
{
 80108e2:	461d      	mov	r5, r3
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80108e4:	f011 fdf4 	bl	80224d0 <memset>
    mbedtls_aes_init( &ctx->aes_ctx );
 80108e8:	f104 0020 	add.w	r0, r4, #32
 80108ec:	9001      	str	r0, [sp, #4]
 80108ee:	f7fc fea7 	bl	800d640 <mbedtls_aes_init>
    ctx->entropy_len = entropy_len;
 80108f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80108f4:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 80108f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80108fa:	61e3      	str	r3, [r4, #28]
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 80108fc:	a902      	add	r1, sp, #8
    ctx->p_entropy = p_entropy;
 80108fe:	e9c4 764e 	strd	r7, r6, [r4, #312]	; 0x138
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 8010902:	9801      	ldr	r0, [sp, #4]
 8010904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010908:	f7fc feaa 	bl	800d660 <mbedtls_aes_setkey_enc>
    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 801090c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801090e:	4629      	mov	r1, r5
 8010910:	4620      	mov	r0, r4
 8010912:	f7ff ffa0 	bl	8010856 <mbedtls_ctr_drbg_reseed>
}
 8010916:	b00b      	add	sp, #44	; 0x2c
 8010918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801091a <mbedtls_ctr_drbg_seed>:
{
 801091a:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 801091c:	2430      	movs	r4, #48	; 0x30
 801091e:	9401      	str	r4, [sp, #4]
 8010920:	9c04      	ldr	r4, [sp, #16]
 8010922:	9400      	str	r4, [sp, #0]
 8010924:	f7ff ffd5 	bl	80108d2 <mbedtls_ctr_drbg_seed_entropy_len>
}
 8010928:	b002      	add	sp, #8
 801092a:	bd10      	pop	{r4, pc}

0801092c <mbedtls_ctr_drbg_random_with_add>:

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 801092c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010930:	b090      	sub	sp, #64	; 0x40
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8010932:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 8010936:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801093a:	4604      	mov	r4, r0
 801093c:	460e      	mov	r6, r1
 801093e:	4615      	mov	r5, r2
 8010940:	461f      	mov	r7, r3
    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8010942:	d84d      	bhi.n	80109e0 <mbedtls_ctr_drbg_random_with_add+0xb4>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 8010944:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8010948:	d84d      	bhi.n	80109e6 <mbedtls_ctr_drbg_random_with_add+0xba>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 801094a:	2230      	movs	r2, #48	; 0x30
 801094c:	2100      	movs	r1, #0
 801094e:	a804      	add	r0, sp, #16
 8010950:	f011 fdbe 	bl	80224d0 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 8010954:	6922      	ldr	r2, [r4, #16]
 8010956:	69e3      	ldr	r3, [r4, #28]
 8010958:	429a      	cmp	r2, r3
 801095a:	dc01      	bgt.n	8010960 <mbedtls_ctr_drbg_random_with_add+0x34>
 801095c:	6963      	ldr	r3, [r4, #20]
 801095e:	b143      	cbz	r3, 8010972 <mbedtls_ctr_drbg_random_with_add+0x46>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 8010960:	4642      	mov	r2, r8
 8010962:	4639      	mov	r1, r7
 8010964:	4620      	mov	r0, r4
 8010966:	f7ff ff76 	bl	8010856 <mbedtls_ctr_drbg_reseed>
 801096a:	b170      	cbz	r0, 801098a <mbedtls_ctr_drbg_random_with_add+0x5e>
    ctr_drbg_update_internal( ctx, add_input );

    ctx->reseed_counter++;

    return( 0 );
}
 801096c:	b010      	add	sp, #64	; 0x40
 801096e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( add_len > 0 )
 8010972:	f1b8 0f00 	cmp.w	r8, #0
 8010976:	d008      	beq.n	801098a <mbedtls_ctr_drbg_random_with_add+0x5e>
        block_cipher_df( add_input, additional, add_len );
 8010978:	4639      	mov	r1, r7
 801097a:	4642      	mov	r2, r8
 801097c:	a804      	add	r0, sp, #16
 801097e:	f7ff fe85 	bl	801068c <block_cipher_df>
        ctr_drbg_update_internal( ctx, add_input );
 8010982:	a904      	add	r1, sp, #16
 8010984:	4620      	mov	r0, r4
 8010986:	f7ff ff0a 	bl	801079e <ctr_drbg_update_internal>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp );
 801098a:	f104 0720 	add.w	r7, r4, #32
    while( output_len > 0 )
 801098e:	b945      	cbnz	r5, 80109a2 <mbedtls_ctr_drbg_random_with_add+0x76>
    ctr_drbg_update_internal( ctx, add_input );
 8010990:	a904      	add	r1, sp, #16
 8010992:	4620      	mov	r0, r4
 8010994:	f7ff ff03 	bl	801079e <ctr_drbg_update_internal>
    ctx->reseed_counter++;
 8010998:	6923      	ldr	r3, [r4, #16]
 801099a:	3301      	adds	r3, #1
 801099c:	6123      	str	r3, [r4, #16]
    return( 0 );
 801099e:	4628      	mov	r0, r5
 80109a0:	e7e4      	b.n	801096c <mbedtls_ctr_drbg_random_with_add+0x40>
 80109a2:	f104 020f 	add.w	r2, r4, #15
            if( ++ctx->counter[i - 1] != 0 )
 80109a6:	7813      	ldrb	r3, [r2, #0]
 80109a8:	3301      	adds	r3, #1
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	4611      	mov	r1, r2
 80109ae:	f802 3901 	strb.w	r3, [r2], #-1
 80109b2:	b90b      	cbnz	r3, 80109b8 <mbedtls_ctr_drbg_random_with_add+0x8c>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80109b4:	42a1      	cmp	r1, r4
 80109b6:	d1f6      	bne.n	80109a6 <mbedtls_ctr_drbg_random_with_add+0x7a>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp );
 80109b8:	466b      	mov	r3, sp
 80109ba:	4622      	mov	r2, r4
 80109bc:	2101      	movs	r1, #1
 80109be:	4638      	mov	r0, r7
 80109c0:	f7fd fb55 	bl	800e06e <mbedtls_aes_crypt_ecb>
        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 80109c4:	2d10      	cmp	r5, #16
 80109c6:	46a8      	mov	r8, r5
 80109c8:	bf28      	it	cs
 80109ca:	f04f 0810 	movcs.w	r8, #16
        memcpy( p, tmp, use_len );
 80109ce:	4630      	mov	r0, r6
 80109d0:	4642      	mov	r2, r8
 80109d2:	4669      	mov	r1, sp
 80109d4:	f011 fd54 	bl	8022480 <memcpy>
        p += use_len;
 80109d8:	4446      	add	r6, r8
        output_len -= use_len;
 80109da:	eba5 0508 	sub.w	r5, r5, r8
 80109de:	e7d6      	b.n	801098e <mbedtls_ctr_drbg_random_with_add+0x62>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 80109e0:	f06f 0035 	mvn.w	r0, #53	; 0x35
 80109e4:	e7c2      	b.n	801096c <mbedtls_ctr_drbg_random_with_add+0x40>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80109e6:	f06f 0037 	mvn.w	r0, #55	; 0x37
 80109ea:	e7bf      	b.n	801096c <mbedtls_ctr_drbg_random_with_add+0x40>

080109ec <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 80109ec:	b507      	push	{r0, r1, r2, lr}
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 80109ee:	2300      	movs	r3, #0
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	f7ff ff9b 	bl	801092c <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 80109f6:	b003      	add	sp, #12
 80109f8:	f85d fb04 	ldr.w	pc, [sp], #4

080109fc <debug_send_line.isra.0>:
}

/*
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
 80109fc:	b410      	push	{r4}
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 80109fe:	e9d0 4004 	ldrd	r4, r0, [r0, #16]
 8010a02:	46a4      	mov	ip, r4
#endif
}
 8010a04:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8010a08:	4760      	bx	ip
	...

08010a0c <mbedtls_debug_print_mpi.part.0>:
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 8010a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a10:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8010a14:	4698      	mov	r8, r3
 8010a16:	f8dd 9244 	ldr.w	r9, [sp, #580]	; 0x244
 8010a1a:	9003      	str	r0, [sp, #12]
    size_t i, n, idx = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
        return;

    for( n = X->n - 1; n > 0; n-- )
 8010a1c:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8010a20:	f8d9 3008 	ldr.w	r3, [r9, #8]
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 8010a24:	460e      	mov	r6, r1
 8010a26:	4617      	mov	r7, r2
    for( n = X->n - 1; n > 0; n-- )
 8010a28:	3d01      	subs	r5, #1
 8010a2a:	2d00      	cmp	r5, #0
 8010a2c:	d13e      	bne.n	8010aac <mbedtls_debug_print_mpi.part.0+0xa0>
        if( X->p[n] != 0 )
            break;

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 8010a2e:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8010a32:	231f      	movs	r3, #31
 8010a34:	fa22 f103 	lsr.w	r1, r2, r3
 8010a38:	07c9      	lsls	r1, r1, #31
 8010a3a:	d401      	bmi.n	8010a40 <mbedtls_debug_print_mpi.part.0+0x34>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	d2f9      	bcs.n	8010a34 <mbedtls_debug_print_mpi.part.0+0x28>
            break;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 8010a40:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 8010a44:	f10d 0a18 	add.w	sl, sp, #24
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 8010a48:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 8010a4a:	4a3f      	ldr	r2, [pc, #252]	; (8010b48 <mbedtls_debug_print_mpi.part.0+0x13c>)
 8010a4c:	9300      	str	r3, [sp, #0]
 8010a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a52:	9b90      	ldr	r3, [sp, #576]	; 0x240
 8010a54:	4650      	mov	r0, sl
 8010a56:	f012 ff29 	bl	80238ac <sniprintf>

    debug_send_line( ssl, level, file, line, str );
 8010a5a:	9803      	ldr	r0, [sp, #12]
 8010a5c:	f8cd a000 	str.w	sl, [sp]
 8010a60:	4643      	mov	r3, r8
 8010a62:	6800      	ldr	r0, [r0, #0]
 8010a64:	463a      	mov	r2, r7
 8010a66:	4631      	mov	r1, r6

    idx = 0;
 8010a68:	2400      	movs	r4, #0
    debug_send_line( ssl, level, file, line, str );
 8010a6a:	f7ff ffc7 	bl	80109fc <debug_send_line.isra.0>
    int j, k, zeros = 1;
 8010a6e:	2301      	movs	r3, #1
    for( i = n + 1, j = 0; i > 0; i-- )
 8010a70:	9402      	str	r4, [sp, #8]
 8010a72:	1c6a      	adds	r2, r5, #1
 8010a74:	d120      	bne.n	8010ab8 <mbedtls_debug_print_mpi.part.0+0xac>
            j++;
        }

    }

    if( zeros == 1 )
 8010a76:	ad06      	add	r5, sp, #24
 8010a78:	b133      	cbz	r3, 8010a88 <mbedtls_debug_print_mpi.part.0+0x7c>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 8010a7a:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010a7e:	1928      	adds	r0, r5, r4
 8010a80:	4a32      	ldr	r2, [pc, #200]	; (8010b4c <mbedtls_debug_print_mpi.part.0+0x140>)
 8010a82:	f012 ff13 	bl	80238ac <sniprintf>
 8010a86:	3403      	adds	r4, #3

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 8010a88:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010a8c:	4a30      	ldr	r2, [pc, #192]	; (8010b50 <mbedtls_debug_print_mpi.part.0+0x144>)
 8010a8e:	1928      	adds	r0, r5, r4
 8010a90:	f012 ff0c 	bl	80238ac <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8010a94:	9803      	ldr	r0, [sp, #12]
 8010a96:	9500      	str	r5, [sp, #0]
 8010a98:	6800      	ldr	r0, [r0, #0]
 8010a9a:	4643      	mov	r3, r8
 8010a9c:	463a      	mov	r2, r7
 8010a9e:	4631      	mov	r1, r6
 8010aa0:	f7ff ffac 	bl	80109fc <debug_send_line.isra.0>
}
 8010aa4:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8010aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( X->p[n] != 0 )
 8010aac:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8010ab0:	2a00      	cmp	r2, #0
 8010ab2:	d1bc      	bne.n	8010a2e <mbedtls_debug_print_mpi.part.0+0x22>
    for( n = X->n - 1; n > 0; n-- )
 8010ab4:	3d01      	subs	r5, #1
 8010ab6:	e7b8      	b.n	8010a2a <mbedtls_debug_print_mpi.part.0+0x1e>
        if( zeros && X->p[i - 1] == 0 )
 8010ab8:	00aa      	lsls	r2, r5, #2
 8010aba:	9204      	str	r2, [sp, #16]
 8010abc:	b12b      	cbz	r3, 8010aca <mbedtls_debug_print_mpi.part.0+0xbe>
 8010abe:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8010ac2:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8010ac6:	2a00      	cmp	r2, #0
 8010ac8:	d03b      	beq.n	8010b42 <mbedtls_debug_print_mpi.part.0+0x136>
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 8010aca:	f04f 0b18 	mov.w	fp, #24
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 8010ace:	b143      	cbz	r3, 8010ae2 <mbedtls_debug_print_mpi.part.0+0xd6>
 8010ad0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8010ad4:	9904      	ldr	r1, [sp, #16]
 8010ad6:	5852      	ldr	r2, [r2, r1]
 8010ad8:	fa22 f20b 	lsr.w	r2, r2, fp
 8010adc:	f012 0fff 	tst.w	r2, #255	; 0xff
 8010ae0:	d02a      	beq.n	8010b38 <mbedtls_debug_print_mpi.part.0+0x12c>
            if( j % 16 == 0 )
 8010ae2:	9b02      	ldr	r3, [sp, #8]
 8010ae4:	f013 030f 	ands.w	r3, r3, #15
 8010ae8:	9305      	str	r3, [sp, #20]
 8010aea:	d112      	bne.n	8010b12 <mbedtls_debug_print_mpi.part.0+0x106>
                if( j > 0 )
 8010aec:	9b02      	ldr	r3, [sp, #8]
 8010aee:	b183      	cbz	r3, 8010b12 <mbedtls_debug_print_mpi.part.0+0x106>
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 8010af0:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010af4:	4a16      	ldr	r2, [pc, #88]	; (8010b50 <mbedtls_debug_print_mpi.part.0+0x144>)
 8010af6:	eb0a 0004 	add.w	r0, sl, r4
 8010afa:	f012 fed7 	bl	80238ac <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 8010afe:	9803      	ldr	r0, [sp, #12]
 8010b00:	f8cd a000 	str.w	sl, [sp]
 8010b04:	6800      	ldr	r0, [r0, #0]
 8010b06:	4643      	mov	r3, r8
 8010b08:	463a      	mov	r2, r7
 8010b0a:	4631      	mov	r1, r6
 8010b0c:	f7ff ff76 	bl	80109fc <debug_send_line.isra.0>
                    idx = 0;
 8010b10:	9c05      	ldr	r4, [sp, #20]
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 8010b12:	9a04      	ldr	r2, [sp, #16]
 8010b14:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010b18:	589b      	ldr	r3, [r3, r2]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8010b1a:	4a0e      	ldr	r2, [pc, #56]	; (8010b54 <mbedtls_debug_print_mpi.part.0+0x148>)
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 8010b1c:	fa23 f30b 	lsr.w	r3, r3, fp
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8010b20:	a806      	add	r0, sp, #24
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010b28:	4420      	add	r0, r4
 8010b2a:	f012 febf 	bl	80238ac <sniprintf>
            j++;
 8010b2e:	9b02      	ldr	r3, [sp, #8]
 8010b30:	3301      	adds	r3, #1
 8010b32:	9302      	str	r3, [sp, #8]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8010b34:	4404      	add	r4, r0
                zeros = 0;
 8010b36:	2300      	movs	r3, #0
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 8010b38:	f1ab 0b08 	sub.w	fp, fp, #8
 8010b3c:	f11b 0f08 	cmn.w	fp, #8
 8010b40:	d1c5      	bne.n	8010ace <mbedtls_debug_print_mpi.part.0+0xc2>
    for( i = n + 1, j = 0; i > 0; i-- )
 8010b42:	3d01      	subs	r5, #1
 8010b44:	e795      	b.n	8010a72 <mbedtls_debug_print_mpi.part.0+0x66>
 8010b46:	bf00      	nop
 8010b48:	080300bf 	.word	0x080300bf
 8010b4c:	080300e2 	.word	0x080300e2
 8010b50:	080306ce 	.word	0x080306ce
 8010b54:	080300dc 	.word	0x080300dc

08010b58 <mbedtls_debug_set_threshold>:
    debug_threshold = threshold;
 8010b58:	4b01      	ldr	r3, [pc, #4]	; (8010b60 <mbedtls_debug_set_threshold+0x8>)
 8010b5a:	6018      	str	r0, [r3, #0]
}
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop
 8010b60:	200010c4 	.word	0x200010c4

08010b64 <mbedtls_debug_print_msg>:
{
 8010b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b68:	460f      	mov	r7, r1
 8010b6a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8010b6e:	4690      	mov	r8, r2
 8010b70:	4699      	mov	r9, r3
    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 8010b72:	4606      	mov	r6, r0
 8010b74:	b1f8      	cbz	r0, 8010bb6 <mbedtls_debug_print_msg+0x52>
 8010b76:	6803      	ldr	r3, [r0, #0]
 8010b78:	b1eb      	cbz	r3, 8010bb6 <mbedtls_debug_print_msg+0x52>
 8010b7a:	691b      	ldr	r3, [r3, #16]
 8010b7c:	b1db      	cbz	r3, 8010bb6 <mbedtls_debug_print_msg+0x52>
 8010b7e:	4b10      	ldr	r3, [pc, #64]	; (8010bc0 <mbedtls_debug_print_msg+0x5c>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	428b      	cmp	r3, r1
 8010b84:	db17      	blt.n	8010bb6 <mbedtls_debug_print_msg+0x52>
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8010b86:	ad04      	add	r5, sp, #16
    va_start( argp, format );
 8010b88:	ab8d      	add	r3, sp, #564	; 0x234
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8010b8a:	9a8c      	ldr	r2, [sp, #560]	; 0x230
    va_start( argp, format );
 8010b8c:	9303      	str	r3, [sp, #12]
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8010b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010b92:	4628      	mov	r0, r5
 8010b94:	f014 f920 	bl	8024dd8 <vsniprintf>
    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 8010b98:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 8010b9c:	d804      	bhi.n	8010ba8 <mbedtls_debug_print_msg+0x44>
        str[ret]     = '\n';
 8010b9e:	230a      	movs	r3, #10
        str[ret + 1] = '\0';
 8010ba0:	182c      	adds	r4, r5, r0
        str[ret]     = '\n';
 8010ba2:	542b      	strb	r3, [r5, r0]
        str[ret + 1] = '\0';
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	7063      	strb	r3, [r4, #1]
    debug_send_line( ssl, level, file, line, str );
 8010ba8:	9500      	str	r5, [sp, #0]
 8010baa:	6830      	ldr	r0, [r6, #0]
 8010bac:	464b      	mov	r3, r9
 8010bae:	4642      	mov	r2, r8
 8010bb0:	4639      	mov	r1, r7
 8010bb2:	f7ff ff23 	bl	80109fc <debug_send_line.isra.0>
}
 8010bb6:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8010bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bbe:	bf00      	nop
 8010bc0:	200010c4 	.word	0x200010c4

08010bc4 <mbedtls_debug_print_ret>:
{
 8010bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc8:	4616      	mov	r6, r2
 8010bca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010bce:	6802      	ldr	r2, [r0, #0]
{
 8010bd0:	461f      	mov	r7, r3
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	9b89      	ldr	r3, [sp, #548]	; 0x224
 8010bd6:	460d      	mov	r5, r1
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010bd8:	b1e2      	cbz	r2, 8010c14 <mbedtls_debug_print_ret+0x50>
 8010bda:	6912      	ldr	r2, [r2, #16]
 8010bdc:	b1d2      	cbz	r2, 8010c14 <mbedtls_debug_print_ret+0x50>
 8010bde:	4a0f      	ldr	r2, [pc, #60]	; (8010c1c <mbedtls_debug_print_ret+0x58>)
 8010be0:	6812      	ldr	r2, [r2, #0]
 8010be2:	428a      	cmp	r2, r1
 8010be4:	db16      	blt.n	8010c14 <mbedtls_debug_print_ret+0x50>
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 8010be6:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8010bea:	d013      	beq.n	8010c14 <mbedtls_debug_print_ret+0x50>
    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 8010bec:	425a      	negs	r2, r3
 8010bee:	f10d 0808 	add.w	r8, sp, #8
 8010bf2:	e9cd 3200 	strd	r3, r2, [sp]
 8010bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010bfa:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8010bfc:	4a08      	ldr	r2, [pc, #32]	; (8010c20 <mbedtls_debug_print_ret+0x5c>)
 8010bfe:	4640      	mov	r0, r8
 8010c00:	f012 fe54 	bl	80238ac <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8010c04:	6820      	ldr	r0, [r4, #0]
 8010c06:	f8cd 8000 	str.w	r8, [sp]
 8010c0a:	463b      	mov	r3, r7
 8010c0c:	4632      	mov	r2, r6
 8010c0e:	4629      	mov	r1, r5
 8010c10:	f7ff fef4 	bl	80109fc <debug_send_line.isra.0>
}
 8010c14:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8010c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c1c:	200010c4 	.word	0x200010c4
 8010c20:	080300e6 	.word	0x080300e6

08010c24 <mbedtls_debug_print_buf>:
{
 8010c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c28:	469a      	mov	sl, r3
 8010c2a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010c2e:	6803      	ldr	r3, [r0, #0]
{
 8010c30:	f8dd 8258 	ldr.w	r8, [sp, #600]	; 0x258
 8010c34:	4606      	mov	r6, r0
 8010c36:	460f      	mov	r7, r1
 8010c38:	4691      	mov	r9, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d03e      	beq.n	8010cbc <mbedtls_debug_print_buf+0x98>
 8010c3e:	691b      	ldr	r3, [r3, #16]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d03b      	beq.n	8010cbc <mbedtls_debug_print_buf+0x98>
 8010c44:	4b42      	ldr	r3, [pc, #264]	; (8010d50 <mbedtls_debug_print_buf+0x12c>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	428b      	cmp	r3, r1
 8010c4a:	db37      	blt.n	8010cbc <mbedtls_debug_print_buf+0x98>
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 8010c4c:	ac0a      	add	r4, sp, #40	; 0x28
 8010c4e:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8010c50:	4a40      	ldr	r2, [pc, #256]	; (8010d54 <mbedtls_debug_print_buf+0x130>)
 8010c52:	f8cd 8000 	str.w	r8, [sp]
 8010c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	f012 fe26 	bl	80238ac <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8010c60:	4653      	mov	r3, sl
 8010c62:	6830      	ldr	r0, [r6, #0]
 8010c64:	9400      	str	r4, [sp, #0]
 8010c66:	464a      	mov	r2, r9
 8010c68:	4639      	mov	r1, r7
 8010c6a:	f7ff fec7 	bl	80109fc <debug_send_line.isra.0>
    memset( txt, 0, sizeof( txt ) );
 8010c6e:	2211      	movs	r2, #17
 8010c70:	2100      	movs	r1, #0
 8010c72:	a805      	add	r0, sp, #20
 8010c74:	f011 fc2c 	bl	80224d0 <memset>
    for( i = 0; i < len; i++ )
 8010c78:	9b95      	ldr	r3, [sp, #596]	; 0x254
    idx = 0;
 8010c7a:	2400      	movs	r4, #0
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	9303      	str	r3, [sp, #12]
    for( i = 0; i < len; i++ )
 8010c80:	4625      	mov	r5, r4
 8010c82:	4545      	cmp	r5, r8
 8010c84:	d11e      	bne.n	8010cc4 <mbedtls_debug_print_buf+0xa0>
    if( len > 0 )
 8010c86:	f1b8 0f00 	cmp.w	r8, #0
 8010c8a:	d017      	beq.n	8010cbc <mbedtls_debug_print_buf+0x98>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8010c8c:	4d32      	ldr	r5, [pc, #200]	; (8010d58 <mbedtls_debug_print_buf+0x134>)
        for( /* i = i */; i % 16 != 0; i++ )
 8010c8e:	ab0a      	add	r3, sp, #40	; 0x28
 8010c90:	f018 0f0f 	tst.w	r8, #15
 8010c94:	eb03 0004 	add.w	r0, r3, r4
 8010c98:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010c9c:	d150      	bne.n	8010d40 <mbedtls_debug_print_buf+0x11c>
        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8010c9e:	ad0a      	add	r5, sp, #40	; 0x28
 8010ca0:	4a2e      	ldr	r2, [pc, #184]	; (8010d5c <mbedtls_debug_print_buf+0x138>)
 8010ca2:	ab05      	add	r3, sp, #20
 8010ca4:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010ca8:	1928      	adds	r0, r5, r4
 8010caa:	f012 fdff 	bl	80238ac <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8010cae:	6830      	ldr	r0, [r6, #0]
 8010cb0:	9500      	str	r5, [sp, #0]
 8010cb2:	4653      	mov	r3, sl
 8010cb4:	464a      	mov	r2, r9
 8010cb6:	4639      	mov	r1, r7
 8010cb8:	f7ff fea0 	bl	80109fc <debug_send_line.isra.0>
}
 8010cbc:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 8010cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( i >= 4096 )
 8010cc4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8010cc8:	d0e9      	beq.n	8010c9e <mbedtls_debug_print_buf+0x7a>
        if( i % 16 == 0 )
 8010cca:	f015 0b0f 	ands.w	fp, r5, #15
 8010cce:	d11f      	bne.n	8010d10 <mbedtls_debug_print_buf+0xec>
            if( i > 0 )
 8010cd0:	b1ad      	cbz	r5, 8010cfe <mbedtls_debug_print_buf+0xda>
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8010cd2:	a80a      	add	r0, sp, #40	; 0x28
 8010cd4:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010cd8:	4a20      	ldr	r2, [pc, #128]	; (8010d5c <mbedtls_debug_print_buf+0x138>)
 8010cda:	ab05      	add	r3, sp, #20
 8010cdc:	4420      	add	r0, r4
 8010cde:	f012 fde5 	bl	80238ac <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 8010ce2:	ab0a      	add	r3, sp, #40	; 0x28
 8010ce4:	6830      	ldr	r0, [r6, #0]
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	464a      	mov	r2, r9
 8010cea:	4653      	mov	r3, sl
 8010cec:	4639      	mov	r1, r7
 8010cee:	f7ff fe85 	bl	80109fc <debug_send_line.isra.0>
                memset( txt, 0, sizeof( txt ) );
 8010cf2:	2211      	movs	r2, #17
 8010cf4:	4659      	mov	r1, fp
 8010cf6:	a805      	add	r0, sp, #20
 8010cf8:	f011 fbea 	bl	80224d0 <memset>
                idx = 0;
 8010cfc:	465c      	mov	r4, fp
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 8010cfe:	a80a      	add	r0, sp, #40	; 0x28
 8010d00:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010d04:	4420      	add	r0, r4
 8010d06:	4a16      	ldr	r2, [pc, #88]	; (8010d60 <mbedtls_debug_print_buf+0x13c>)
 8010d08:	462b      	mov	r3, r5
 8010d0a:	f012 fdcf 	bl	80238ac <sniprintf>
 8010d0e:	4404      	add	r4, r0
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8010d10:	9a03      	ldr	r2, [sp, #12]
 8010d12:	a80a      	add	r0, sp, #40	; 0x28
 8010d14:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010d18:	9203      	str	r2, [sp, #12]
 8010d1a:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010d1e:	4a11      	ldr	r2, [pc, #68]	; (8010d64 <mbedtls_debug_print_buf+0x140>)
 8010d20:	4420      	add	r0, r4
 8010d22:	f012 fdc3 	bl	80238ac <sniprintf>
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 8010d26:	9b03      	ldr	r3, [sp, #12]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	f1a3 0220 	sub.w	r2, r3, #32
 8010d2e:	2a5e      	cmp	r2, #94	; 0x5e
 8010d30:	aa05      	add	r2, sp, #20
 8010d32:	bf88      	it	hi
 8010d34:	232e      	movhi	r3, #46	; 0x2e
 8010d36:	f802 300b 	strb.w	r3, [r2, fp]
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8010d3a:	4404      	add	r4, r0
    for( i = 0; i < len; i++ )
 8010d3c:	3501      	adds	r5, #1
 8010d3e:	e7a0      	b.n	8010c82 <mbedtls_debug_print_buf+0x5e>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8010d40:	462a      	mov	r2, r5
 8010d42:	f012 fdb3 	bl	80238ac <sniprintf>
        for( /* i = i */; i % 16 != 0; i++ )
 8010d46:	f108 0801 	add.w	r8, r8, #1
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8010d4a:	4404      	add	r4, r0
        for( /* i = i */; i % 16 != 0; i++ )
 8010d4c:	e79f      	b.n	8010c8e <mbedtls_debug_print_buf+0x6a>
 8010d4e:	bf00      	nop
 8010d50:	200010c4 	.word	0x200010c4
 8010d54:	08030102 	.word	0x08030102
 8010d58:	0802d862 	.word	0x0802d862
 8010d5c:	0803011b 	.word	0x0803011b
 8010d60:	08030121 	.word	0x08030121
 8010d64:	080300dc 	.word	0x080300dc

08010d68 <mbedtls_debug_print_mpi>:
{
 8010d68:	b470      	push	{r4, r5, r6}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 8010d6a:	6805      	ldr	r5, [r0, #0]
{
 8010d6c:	9e04      	ldr	r6, [sp, #16]
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 8010d6e:	b14d      	cbz	r5, 8010d84 <mbedtls_debug_print_mpi+0x1c>
 8010d70:	692d      	ldr	r5, [r5, #16]
 8010d72:	b13d      	cbz	r5, 8010d84 <mbedtls_debug_print_mpi+0x1c>
 8010d74:	b136      	cbz	r6, 8010d84 <mbedtls_debug_print_mpi+0x1c>
 8010d76:	4d04      	ldr	r5, [pc, #16]	; (8010d88 <mbedtls_debug_print_mpi+0x20>)
 8010d78:	682d      	ldr	r5, [r5, #0]
 8010d7a:	428d      	cmp	r5, r1
 8010d7c:	db02      	blt.n	8010d84 <mbedtls_debug_print_mpi+0x1c>
}
 8010d7e:	bc70      	pop	{r4, r5, r6}
 8010d80:	f7ff be44 	b.w	8010a0c <mbedtls_debug_print_mpi.part.0>
 8010d84:	bc70      	pop	{r4, r5, r6}
 8010d86:	4770      	bx	lr
 8010d88:	200010c4 	.word	0x200010c4

08010d8c <mbedtls_debug_print_ecp.part.0>:
void mbedtls_debug_print_ecp( const mbedtls_ssl_context *ssl, int level,
 8010d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d90:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8010d94:	e9dd 988a 	ldrd	r9, r8, [sp, #552]	; 0x228
 8010d98:	4604      	mov	r4, r0
 8010d9a:	460d      	mov	r5, r1
 8010d9c:	4616      	mov	r6, r2
 8010d9e:	461f      	mov	r7, r3
    mbedtls_snprintf( str, sizeof( str ), "%s(X)", text );
 8010da0:	4a13      	ldr	r2, [pc, #76]	; (8010df0 <mbedtls_debug_print_ecp.part.0+0x64>)
 8010da2:	464b      	mov	r3, r9
 8010da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010da8:	a802      	add	r0, sp, #8
 8010daa:	f012 fd7f 	bl	80238ac <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->X );
 8010dae:	ab02      	add	r3, sp, #8
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	4632      	mov	r2, r6
 8010db4:	463b      	mov	r3, r7
 8010db6:	4629      	mov	r1, r5
 8010db8:	4620      	mov	r0, r4
 8010dba:	f8cd 8004 	str.w	r8, [sp, #4]
 8010dbe:	f7ff ffd3 	bl	8010d68 <mbedtls_debug_print_mpi>
    mbedtls_snprintf( str, sizeof( str ), "%s(Y)", text );
 8010dc2:	464b      	mov	r3, r9
 8010dc4:	4a0b      	ldr	r2, [pc, #44]	; (8010df4 <mbedtls_debug_print_ecp.part.0+0x68>)
 8010dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010dca:	a802      	add	r0, sp, #8
 8010dcc:	f012 fd6e 	bl	80238ac <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
 8010dd0:	f108 030c 	add.w	r3, r8, #12
 8010dd4:	9301      	str	r3, [sp, #4]
 8010dd6:	ab02      	add	r3, sp, #8
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	4632      	mov	r2, r6
 8010ddc:	463b      	mov	r3, r7
 8010dde:	4629      	mov	r1, r5
 8010de0:	4620      	mov	r0, r4
 8010de2:	f7ff ffc1 	bl	8010d68 <mbedtls_debug_print_mpi>
}
 8010de6:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8010dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dee:	bf00      	nop
 8010df0:	08030128 	.word	0x08030128
 8010df4:	0803012e 	.word	0x0803012e

08010df8 <mbedtls_debug_print_ecp>:
{
 8010df8:	b430      	push	{r4, r5}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010dfa:	6805      	ldr	r5, [r0, #0]
 8010dfc:	b145      	cbz	r5, 8010e10 <mbedtls_debug_print_ecp+0x18>
 8010dfe:	692d      	ldr	r5, [r5, #16]
 8010e00:	b135      	cbz	r5, 8010e10 <mbedtls_debug_print_ecp+0x18>
 8010e02:	4d04      	ldr	r5, [pc, #16]	; (8010e14 <mbedtls_debug_print_ecp+0x1c>)
 8010e04:	682d      	ldr	r5, [r5, #0]
 8010e06:	428d      	cmp	r5, r1
 8010e08:	db02      	blt.n	8010e10 <mbedtls_debug_print_ecp+0x18>
}
 8010e0a:	bc30      	pop	{r4, r5}
 8010e0c:	f7ff bfbe 	b.w	8010d8c <mbedtls_debug_print_ecp.part.0>
 8010e10:	bc30      	pop	{r4, r5}
 8010e12:	4770      	bx	lr
 8010e14:	200010c4 	.word	0x200010c4

08010e18 <mbedtls_debug_print_crt>:
}

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 8010e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	4698      	mov	r8, r3
 8010e1e:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
    char str[DEBUG_BUF_SIZE];
    int i = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 8010e22:	6803      	ldr	r3, [r0, #0]
{
 8010e24:	f8dd a84c 	ldr.w	sl, [sp, #2124]	; 0x84c
 8010e28:	4604      	mov	r4, r0
 8010e2a:	460d      	mov	r5, r1
 8010e2c:	4616      	mov	r6, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d049      	beq.n	8010ec6 <mbedtls_debug_print_crt+0xae>
 8010e32:	691b      	ldr	r3, [r3, #16]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d046      	beq.n	8010ec6 <mbedtls_debug_print_crt+0xae>
 8010e38:	f1ba 0f00 	cmp.w	sl, #0
 8010e3c:	d043      	beq.n	8010ec6 <mbedtls_debug_print_crt+0xae>
 8010e3e:	4b50      	ldr	r3, [pc, #320]	; (8010f80 <mbedtls_debug_print_crt+0x168>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	428b      	cmp	r3, r1
 8010e44:	db3f      	blt.n	8010ec6 <mbedtls_debug_print_crt+0xae>
    int i = 0;
 8010e46:	2300      	movs	r3, #0
 8010e48:	9302      	str	r3, [sp, #8]

    while( crt != NULL )
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 8010e4a:	9b02      	ldr	r3, [sp, #8]
 8010e4c:	4a4d      	ldr	r2, [pc, #308]	; (8010f84 <mbedtls_debug_print_crt+0x16c>)
 8010e4e:	3301      	adds	r3, #1
 8010e50:	af08      	add	r7, sp, #32
 8010e52:	9302      	str	r3, [sp, #8]
 8010e54:	9300      	str	r3, [sp, #0]
 8010e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010e5a:	f8dd 3848 	ldr.w	r3, [sp, #2120]	; 0x848
 8010e5e:	4638      	mov	r0, r7
 8010e60:	f012 fd24 	bl	80238ac <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8010e64:	6820      	ldr	r0, [r4, #0]
 8010e66:	9700      	str	r7, [sp, #0]
 8010e68:	4643      	mov	r3, r8
 8010e6a:	4632      	mov	r2, r6
 8010e6c:	4629      	mov	r1, r5
 8010e6e:	f7ff fdc5 	bl	80109fc <debug_send_line.isra.0>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 8010e72:	f50d 6784 	add.w	r7, sp, #1056	; 0x420
 8010e76:	4653      	mov	r3, sl
 8010e78:	4a43      	ldr	r2, [pc, #268]	; (8010f88 <mbedtls_debug_print_crt+0x170>)
 8010e7a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8010e7e:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 8010e82:	f00f fa95 	bl	80203b0 <mbedtls_x509_crt_info>
    for( cur = text; *cur != '\0'; cur++ )
 8010e86:	f240 19ff 	movw	r9, #511	; 0x1ff
    start = text;
 8010e8a:	463b      	mov	r3, r7
            str[len] = '\0';
 8010e8c:	f04f 0b00 	mov.w	fp, #0
 8010e90:	463a      	mov	r2, r7
    for( cur = text; *cur != '\0'; cur++ )
 8010e92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010e96:	b9d1      	cbnz	r1, 8010ece <mbedtls_debug_print_crt+0xb6>
    memset( items, 0, sizeof( items ) );
 8010e98:	2224      	movs	r2, #36	; 0x24
 8010e9a:	a888      	add	r0, sp, #544	; 0x220
 8010e9c:	f011 fb18 	bl	80224d0 <memset>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 8010ea0:	a988      	add	r1, sp, #544	; 0x220
 8010ea2:	f10a 00bc 	add.w	r0, sl, #188	; 0xbc
 8010ea6:	f004 ff3f 	bl	8015d28 <mbedtls_pk_debug>
 8010eaa:	b348      	cbz	r0, 8010f00 <mbedtls_debug_print_crt+0xe8>
        debug_send_line( ssl, level, file, line,
 8010eac:	4b37      	ldr	r3, [pc, #220]	; (8010f8c <mbedtls_debug_print_crt+0x174>)
 8010eae:	9300      	str	r3, [sp, #0]
 8010eb0:	6820      	ldr	r0, [r4, #0]
 8010eb2:	4643      	mov	r3, r8
 8010eb4:	4632      	mov	r2, r6
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	f7ff fda0 	bl	80109fc <debug_send_line.isra.0>
        debug_print_line_by_line( ssl, level, file, line, buf );

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );

        crt = crt->next;
 8010ebc:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
    while( crt != NULL )
 8010ec0:	f1ba 0f00 	cmp.w	sl, #0
 8010ec4:	d1c1      	bne.n	8010e4a <mbedtls_debug_print_crt+0x32>
    }
}
 8010ec6:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
 8010eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *cur == '\n' )
 8010ece:	290a      	cmp	r1, #10
 8010ed0:	d1de      	bne.n	8010e90 <mbedtls_debug_print_crt+0x78>
            size_t len = cur - start + 1;
 8010ed2:	1ad2      	subs	r2, r2, r3
 8010ed4:	3201      	adds	r2, #1
            if( len > DEBUG_BUF_SIZE - 1 )
 8010ed6:	454a      	cmp	r2, r9
 8010ed8:	bf28      	it	cs
 8010eda:	464a      	movcs	r2, r9
            memcpy( str, start, len );
 8010edc:	4619      	mov	r1, r3
 8010ede:	a888      	add	r0, sp, #544	; 0x220
 8010ee0:	9203      	str	r2, [sp, #12]
 8010ee2:	f011 facd 	bl	8022480 <memcpy>
            str[len] = '\0';
 8010ee6:	9a03      	ldr	r2, [sp, #12]
            debug_send_line( ssl, level, file, line, str );
 8010ee8:	6820      	ldr	r0, [r4, #0]
            str[len] = '\0';
 8010eea:	ab88      	add	r3, sp, #544	; 0x220
            debug_send_line( ssl, level, file, line, str );
 8010eec:	4629      	mov	r1, r5
            str[len] = '\0';
 8010eee:	f803 b002 	strb.w	fp, [r3, r2]
            debug_send_line( ssl, level, file, line, str );
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	4632      	mov	r2, r6
 8010ef6:	4643      	mov	r3, r8
 8010ef8:	f7ff fd80 	bl	80109fc <debug_send_line.isra.0>
            start = cur + 1;
 8010efc:	463b      	mov	r3, r7
    for( cur = text; *cur != '\0'; cur++ )
 8010efe:	e7c7      	b.n	8010e90 <mbedtls_debug_print_crt+0x78>
 8010f00:	f50d 7b08 	add.w	fp, sp, #544	; 0x220
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 8010f04:	4681      	mov	r9, r0
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 8010f06:	f89b 3000 	ldrb.w	r3, [fp]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d0d6      	beq.n	8010ebc <mbedtls_debug_print_crt+0xa4>
        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 8010f0e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010f12:	9300      	str	r3, [sp, #0]
 8010f14:	af04      	add	r7, sp, #16
 8010f16:	4b1e      	ldr	r3, [pc, #120]	; (8010f90 <mbedtls_debug_print_crt+0x178>)
 8010f18:	4a1e      	ldr	r2, [pc, #120]	; (8010f94 <mbedtls_debug_print_crt+0x17c>)
 8010f1a:	2110      	movs	r1, #16
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	f012 fcc5 	bl	80238ac <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 8010f22:	2300      	movs	r3, #0
 8010f24:	73fb      	strb	r3, [r7, #15]
        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 8010f26:	f89b 3000 	ldrb.w	r3, [fp]
 8010f2a:	2b01      	cmp	r3, #1
 8010f2c:	d111      	bne.n	8010f52 <mbedtls_debug_print_crt+0x13a>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 8010f2e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8010f32:	4632      	mov	r2, r6
 8010f34:	e9cd 7300 	strd	r7, r3, [sp]
 8010f38:	4629      	mov	r1, r5
 8010f3a:	4643      	mov	r3, r8
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	f7ff ff13 	bl	8010d68 <mbedtls_debug_print_mpi>
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 8010f42:	f109 0901 	add.w	r9, r9, #1
 8010f46:	f1b9 0f03 	cmp.w	r9, #3
 8010f4a:	f10b 0b0c 	add.w	fp, fp, #12
 8010f4e:	d1da      	bne.n	8010f06 <mbedtls_debug_print_crt+0xee>
 8010f50:	e7b4      	b.n	8010ebc <mbedtls_debug_print_crt+0xa4>
        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )
 8010f52:	2b02      	cmp	r3, #2
 8010f54:	d10a      	bne.n	8010f6c <mbedtls_debug_print_crt+0x154>
            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );
 8010f56:	f8db 3008 	ldr.w	r3, [fp, #8]
 8010f5a:	4632      	mov	r2, r6
 8010f5c:	e9cd 7300 	strd	r7, r3, [sp]
 8010f60:	4629      	mov	r1, r5
 8010f62:	4643      	mov	r3, r8
 8010f64:	4620      	mov	r0, r4
 8010f66:	f7ff ff47 	bl	8010df8 <mbedtls_debug_print_ecp>
 8010f6a:	e7ea      	b.n	8010f42 <mbedtls_debug_print_crt+0x12a>
            debug_send_line( ssl, level, file, line,
 8010f6c:	4b0a      	ldr	r3, [pc, #40]	; (8010f98 <mbedtls_debug_print_crt+0x180>)
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	6820      	ldr	r0, [r4, #0]
 8010f72:	4643      	mov	r3, r8
 8010f74:	4632      	mov	r2, r6
 8010f76:	4629      	mov	r1, r5
 8010f78:	f7ff fd40 	bl	80109fc <debug_send_line.isra.0>
 8010f7c:	e7e1      	b.n	8010f42 <mbedtls_debug_print_crt+0x12a>
 8010f7e:	bf00      	nop
 8010f80:	200010c4 	.word	0x200010c4
 8010f84:	08030134 	.word	0x08030134
 8010f88:	08030466 	.word	0x08030466
 8010f8c:	0803013d 	.word	0x0803013d
 8010f90:	08030151 	.word	0x08030151
 8010f94:	08030157 	.word	0x08030157
 8010f98:	0803015c 	.word	0x0803015c

08010f9c <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 8010f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f9e:	b08f      	sub	sp, #60	; 0x3c
 8010fa0:	4616      	mov	r6, r2
 8010fa2:	4605      	mov	r5, r0
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
 8010fa4:	a805      	add	r0, sp, #20
{
 8010fa6:	460f      	mov	r7, r1
 8010fa8:	9303      	str	r3, [sp, #12]
    mbedtls_ecp_point_init( &P );
 8010faa:	f001 f88b 	bl	80120c4 <mbedtls_ecp_point_init>

    /*
     * Make sure Q is a valid pubkey before using it
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
 8010fae:	4631      	mov	r1, r6
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	f001 fea7 	bl	8012d04 <mbedtls_ecp_check_pubkey>
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	b9a0      	cbnz	r0, 8010fe4 <mbedtls_ecdh_compute_shared+0x48>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, &P, d, Q, f_rng, p_rng ) );
 8010fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010fbc:	9301      	str	r3, [sp, #4]
 8010fbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	9a03      	ldr	r2, [sp, #12]
 8010fc4:	4633      	mov	r3, r6
 8010fc6:	a905      	add	r1, sp, #20
 8010fc8:	4628      	mov	r0, r5
 8010fca:	f001 ff7f 	bl	8012ecc <mbedtls_ecp_mul>
 8010fce:	4604      	mov	r4, r0
 8010fd0:	b940      	cbnz	r0, 8010fe4 <mbedtls_ecdh_compute_shared+0x48>

    if( mbedtls_ecp_is_zero( &P ) )
 8010fd2:	a805      	add	r0, sp, #20
 8010fd4:	f001 fdb0 	bl	8012b38 <mbedtls_ecp_is_zero>
 8010fd8:	b950      	cbnz	r0, 8010ff0 <mbedtls_ecdh_compute_shared+0x54>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
 8010fda:	a905      	add	r1, sp, #20
 8010fdc:	4638      	mov	r0, r7
 8010fde:	f7fd fd99 	bl	800eb14 <mbedtls_mpi_copy>
 8010fe2:	4604      	mov	r4, r0

cleanup:
    mbedtls_ecp_point_free( &P );
 8010fe4:	a805      	add	r0, sp, #20
 8010fe6:	f001 f887 	bl	80120f8 <mbedtls_ecp_point_free>

    return( ret );
}
 8010fea:	4620      	mov	r0, r4
 8010fec:	b00f      	add	sp, #60	; 0x3c
 8010fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010ff0:	4c00      	ldr	r4, [pc, #0]	; (8010ff4 <mbedtls_ecdh_compute_shared+0x58>)
 8010ff2:	e7f7      	b.n	8010fe4 <mbedtls_ecdh_compute_shared+0x48>
 8010ff4:	ffffb080 	.word	0xffffb080

08010ff8 <mbedtls_ecdh_init>:
/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
 8010ff8:	f44f 729a 	mov.w	r2, #308	; 0x134
 8010ffc:	2100      	movs	r1, #0
 8010ffe:	f011 ba67 	b.w	80224d0 <memset>

08011002 <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
 8011002:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8011004:	4604      	mov	r4, r0
 8011006:	b1f8      	cbz	r0, 8011048 <mbedtls_ecdh_free+0x46>
        return;

    mbedtls_ecp_group_free( &ctx->grp );
 8011008:	f001 f87a 	bl	8012100 <mbedtls_ecp_group_free>
    mbedtls_ecp_point_free( &ctx->Q   );
 801100c:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8011010:	f001 f872 	bl	80120f8 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
 8011014:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8011018:	f001 f86e 	bl	80120f8 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vi  );
 801101c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8011020:	f001 f86a 	bl	80120f8 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf  );
 8011024:	f504 7082 	add.w	r0, r4, #260	; 0x104
 8011028:	f001 f866 	bl	80120f8 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->d  );
 801102c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8011030:	f7fd fcf0 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->z  );
 8011034:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011038:	f7fd fcec 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->_d );
 801103c:	f504 7094 	add.w	r0, r4, #296	; 0x128
}
 8011040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->_d );
 8011044:	f7fd bce6 	b.w	800ea14 <mbedtls_mpi_free>
}
 8011048:	bd10      	pop	{r4, pc}

0801104a <mbedtls_ecdh_read_params>:
 *          ECPoint         public;
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                      const unsigned char **buf, const unsigned char *end )
{
 801104a:	b570      	push	{r4, r5, r6, lr}
 801104c:	4616      	mov	r6, r2
    int ret;

    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
 801104e:	680a      	ldr	r2, [r1, #0]
 8011050:	1ab2      	subs	r2, r6, r2
{
 8011052:	4605      	mov	r5, r0
 8011054:	460c      	mov	r4, r1
    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
 8011056:	f001 fe31 	bl	8012cbc <mbedtls_ecp_tls_read_group>
 801105a:	b948      	cbnz	r0, 8011070 <mbedtls_ecdh_read_params+0x26>
        return( ret );

    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
 801105c:	6823      	ldr	r3, [r4, #0]
 801105e:	4622      	mov	r2, r4
 8011060:	1af3      	subs	r3, r6, r3
 8011062:	f105 01ac 	add.w	r1, r5, #172	; 0xac
 8011066:	4628      	mov	r0, r5
                != 0 )
        return( ret );

    return( 0 );
}
 8011068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
 801106c:	f001 bdf6 	b.w	8012c5c <mbedtls_ecp_tls_read_point>
}
 8011070:	bd70      	pop	{r4, r5, r6, pc}
	...

08011074 <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng )
{
 8011074:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011078:	4616      	mov	r6, r2
 801107a:	461f      	mov	r7, r3
 801107c:	460d      	mov	r5, r1
 801107e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    int ret;

    if( ctx == NULL || ctx->grp.pbits == 0 )
 8011082:	4604      	mov	r4, r0
 8011084:	b1b0      	cbz	r0, 80110b4 <mbedtls_ecdh_make_public+0x40>
 8011086:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8011088:	b1a1      	cbz	r1, 80110b4 <mbedtls_ecdh_make_public+0x40>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
 801108a:	f100 0888 	add.w	r8, r0, #136	; 0x88
    return mbedtls_ecp_gen_keypair( grp, d, Q, f_rng, p_rng );
 801108e:	9200      	str	r2, [sp, #0]
 8011090:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 8011094:	4642      	mov	r2, r8
 8011096:	f002 f803 	bl	80130a0 <mbedtls_ecp_gen_keypair>
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
 801109a:	b960      	cbnz	r0, 80110b6 <mbedtls_ecdh_make_public+0x42>
                != 0 )
        return( ret );

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
 801109c:	e9cd 6708 	strd	r6, r7, [sp, #32]
 80110a0:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 80110a4:	462b      	mov	r3, r5
 80110a6:	4641      	mov	r1, r8
 80110a8:	4620      	mov	r0, r4
                                olen, buf, blen );
}
 80110aa:	b002      	add	sp, #8
 80110ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
 80110b0:	f001 bdec 	b.w	8012c8c <mbedtls_ecp_tls_write_point>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80110b4:	4801      	ldr	r0, [pc, #4]	; (80110bc <mbedtls_ecdh_make_public+0x48>)
}
 80110b6:	b002      	add	sp, #8
 80110b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110bc:	ffffb080 	.word	0xffffb080

080110c0 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng )
{
 80110c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80110c4:	4616      	mov	r6, r2
 80110c6:	4698      	mov	r8, r3
 80110c8:	460f      	mov	r7, r1
 80110ca:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    int ret;

    if( ctx == NULL )
 80110ce:	4604      	mov	r4, r0
 80110d0:	b918      	cbnz	r0, 80110da <mbedtls_ecdh_calc_secret+0x1a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80110d2:	4812      	ldr	r0, [pc, #72]	; (801111c <mbedtls_ecdh_calc_secret+0x5c>)
    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
}
 80110d4:	b002      	add	sp, #8
 80110d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp, &ctx->d,
 80110da:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
 80110de:	e9cd 3200 	strd	r3, r2, [sp]
 80110e2:	4629      	mov	r1, r5
 80110e4:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 80110e8:	f100 02ac 	add.w	r2, r0, #172	; 0xac
 80110ec:	f7ff ff56 	bl	8010f9c <mbedtls_ecdh_compute_shared>
 80110f0:	2800      	cmp	r0, #0
 80110f2:	d1ef      	bne.n	80110d4 <mbedtls_ecdh_calc_secret+0x14>
    if( mbedtls_mpi_size( &ctx->z ) > blen )
 80110f4:	4628      	mov	r0, r5
 80110f6:	f7fd fdce 	bl	800ec96 <mbedtls_mpi_size>
 80110fa:	4540      	cmp	r0, r8
 80110fc:	d8e9      	bhi.n	80110d2 <mbedtls_ecdh_calc_secret+0x12>
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 80110fe:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8011100:	f012 0307 	ands.w	r3, r2, #7
 8011104:	bf18      	it	ne
 8011106:	2301      	movne	r3, #1
 8011108:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 801110c:	4631      	mov	r1, r6
 801110e:	4628      	mov	r0, r5
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 8011110:	603a      	str	r2, [r7, #0]
}
 8011112:	b002      	add	sp, #8
 8011114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 8011118:	f7fd bdf6 	b.w	800ed08 <mbedtls_mpi_write_binary>
 801111c:	ffffb080 	.word	0xffffb080

08011120 <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 8011120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8011122:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8011124:	3507      	adds	r5, #7
 8011126:	08ed      	lsrs	r5, r5, #3
    size_t use_size = blen > n_size ? n_size : blen;
 8011128:	429d      	cmp	r5, r3
 801112a:	462c      	mov	r4, r5
{
 801112c:	460f      	mov	r7, r1
    size_t use_size = blen > n_size ? n_size : blen;
 801112e:	bf28      	it	cs
 8011130:	461c      	movcs	r4, r3
{
 8011132:	4611      	mov	r1, r2
 8011134:	4606      	mov	r6, r0

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 8011136:	4622      	mov	r2, r4
 8011138:	4638      	mov	r0, r7
 801113a:	f7fd fdb2 	bl	800eca2 <mbedtls_mpi_read_binary>
 801113e:	4605      	mov	r5, r0
 8011140:	b9e8      	cbnz	r0, 801117e <derive_mpi+0x5e>
    if( use_size * 8 > grp->nbits )
 8011142:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8011144:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 8011148:	ea4f 01c4 	mov.w	r1, r4, lsl #3
 801114c:	d310      	bcc.n	8011170 <derive_mpi+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 801114e:	f106 024c 	add.w	r2, r6, #76	; 0x4c
 8011152:	4611      	mov	r1, r2
 8011154:	4638      	mov	r0, r7
 8011156:	9201      	str	r2, [sp, #4]
 8011158:	f7fd ff1b 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 801115c:	2800      	cmp	r0, #0
 801115e:	db0e      	blt.n	801117e <derive_mpi+0x5e>
 8011160:	9a01      	ldr	r2, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 8011162:	4639      	mov	r1, r7
 8011164:	4638      	mov	r0, r7

cleanup:
    return( ret );
}
 8011166:	b003      	add	sp, #12
 8011168:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 801116c:	f7fe b822 	b.w	800f1b4 <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 8011170:	1ac9      	subs	r1, r1, r3
 8011172:	4638      	mov	r0, r7
 8011174:	f7fd fe39 	bl	800edea <mbedtls_mpi_shift_r>
 8011178:	2800      	cmp	r0, #0
 801117a:	d0e8      	beq.n	801114e <derive_mpi+0x2e>
 801117c:	4605      	mov	r5, r0
}
 801117e:	4628      	mov	r0, r5
 8011180:	b003      	add	sp, #12
 8011182:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011184 <mbedtls_ecdsa_sign>:
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8011184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011188:	ed2d 8b02 	vpush	{d8}
 801118c:	ee08 3a10 	vmov	s16, r3
    int ret, key_tries, sign_tries, blind_tries;
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8011190:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 8011192:	b097      	sub	sp, #92	; 0x5c
 8011194:	4605      	mov	r5, r0
 8011196:	4688      	mov	r8, r1
 8011198:	4614      	mov	r4, r2
    if( grp->N.p == NULL )
 801119a:	2b00      	cmp	r3, #0
 801119c:	f000 80af 	beq.w	80112fe <mbedtls_ecdsa_sign+0x17a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_ecp_point_init( &R );
 80111a0:	a80d      	add	r0, sp, #52	; 0x34
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 80111a2:	ae04      	add	r6, sp, #16
    mbedtls_ecp_point_init( &R );
 80111a4:	f000 ff8e 	bl	80120c4 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 80111a8:	4630      	mov	r0, r6
 80111aa:	f7fd fc2c 	bl	800ea06 <mbedtls_mpi_init>
 80111ae:	a807      	add	r0, sp, #28
 80111b0:	f7fd fc29 	bl	800ea06 <mbedtls_mpi_init>
 80111b4:	a80a      	add	r0, sp, #40	; 0x28
 80111b6:	f7fd fc26 	bl	800ea06 <mbedtls_mpi_init>
 80111ba:	f04f 0a0c 	mov.w	sl, #12
         */
        key_tries = 0;
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
 80111be:	f105 094c 	add.w	r9, r5, #76	; 0x4c
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 80111c2:	270c      	movs	r7, #12
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
 80111c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80111c6:	9300      	str	r3, [sp, #0]
 80111c8:	4631      	mov	r1, r6
 80111ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80111cc:	aa0d      	add	r2, sp, #52	; 0x34
 80111ce:	4628      	mov	r0, r5
 80111d0:	f001 ff66 	bl	80130a0 <mbedtls_ecp_gen_keypair>
 80111d4:	4601      	mov	r1, r0
 80111d6:	2800      	cmp	r0, #0
 80111d8:	d17b      	bne.n	80112d2 <mbedtls_ecdsa_sign+0x14e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
 80111da:	a90d      	add	r1, sp, #52	; 0x34
 80111dc:	464a      	mov	r2, r9
 80111de:	4640      	mov	r0, r8
 80111e0:	f7fe fa4f 	bl	800f682 <mbedtls_mpi_mod_mpi>
 80111e4:	4601      	mov	r1, r0
 80111e6:	2800      	cmp	r0, #0
 80111e8:	d173      	bne.n	80112d2 <mbedtls_ecdsa_sign+0x14e>

            if( key_tries++ > 10 )
 80111ea:	3f01      	subs	r7, #1
 80111ec:	f000 8085 	beq.w	80112fa <mbedtls_ecdsa_sign+0x176>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
                goto cleanup;
            }
        }
        while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );
 80111f0:	4640      	mov	r0, r8
 80111f2:	f7fd ff11 	bl	800f018 <mbedtls_mpi_cmp_int>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d0e4      	beq.n	80111c4 <mbedtls_ecdsa_sign+0x40>

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 80111fa:	a907      	add	r1, sp, #28
 80111fc:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8011200:	4628      	mov	r0, r5
 8011202:	f7ff ff8d 	bl	8011120 <derive_mpi>
 8011206:	4601      	mov	r1, r0
 8011208:	2800      	cmp	r0, #0
 801120a:	d162      	bne.n	80112d2 <mbedtls_ecdsa_sign+0x14e>
 801120c:	f04f 0b1f 	mov.w	fp, #31
         * avoiding a potential timing leak.
         */
        blind_tries = 0;
        do
        {
            size_t n_size = ( grp->nbits + 7 ) / 8;
 8011210:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8011212:	3707      	adds	r7, #7
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );
 8011214:	08f9      	lsrs	r1, r7, #3
 8011216:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 801121a:	a80a      	add	r0, sp, #40	; 0x28
 801121c:	f7fe fd15 	bl	800fc4a <mbedtls_mpi_fill_random>
 8011220:	4601      	mov	r1, r0
 8011222:	2800      	cmp	r0, #0
 8011224:	d155      	bne.n	80112d2 <mbedtls_ecdsa_sign+0x14e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );
 8011226:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8011228:	f027 0707 	bic.w	r7, r7, #7
 801122c:	1a79      	subs	r1, r7, r1
 801122e:	a80a      	add	r0, sp, #40	; 0x28
 8011230:	f7fd fddb 	bl	800edea <mbedtls_mpi_shift_r>
 8011234:	4601      	mov	r1, r0
 8011236:	2800      	cmp	r0, #0
 8011238:	d14b      	bne.n	80112d2 <mbedtls_ecdsa_sign+0x14e>

            /* See mbedtls_ecp_gen_keypair() */
            if( ++blind_tries > 30 )
 801123a:	f1bb 0b01 	subs.w	fp, fp, #1
 801123e:	d060      	beq.n	8011302 <mbedtls_ecdsa_sign+0x17e>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
 8011240:	2101      	movs	r1, #1
 8011242:	a80a      	add	r0, sp, #40	; 0x28
 8011244:	f7fd fee8 	bl	800f018 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );
 8011248:	2800      	cmp	r0, #0
 801124a:	dbe1      	blt.n	8011210 <mbedtls_ecdsa_sign+0x8c>
 801124c:	4649      	mov	r1, r9
 801124e:	a80a      	add	r0, sp, #40	; 0x28
 8011250:	f7fd fe9f 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
 8011254:	2800      	cmp	r0, #0
 8011256:	dadb      	bge.n	8011210 <mbedtls_ecdsa_sign+0x8c>

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );
 8011258:	4641      	mov	r1, r8
 801125a:	ee18 2a10 	vmov	r2, s16
 801125e:	4620      	mov	r0, r4
 8011260:	f7fd ffe1 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011264:	4601      	mov	r1, r0
 8011266:	bba0      	cbnz	r0, 80112d2 <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 8011268:	a907      	add	r1, sp, #28
 801126a:	4608      	mov	r0, r1
 801126c:	4622      	mov	r2, r4
 801126e:	f7fd ff7f 	bl	800f170 <mbedtls_mpi_add_mpi>
 8011272:	4601      	mov	r1, r0
 8011274:	bb68      	cbnz	r0, 80112d2 <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 8011276:	a907      	add	r1, sp, #28
 8011278:	4608      	mov	r0, r1
 801127a:	aa0a      	add	r2, sp, #40	; 0x28
 801127c:	f7fd ffd3 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011280:	4601      	mov	r1, r0
 8011282:	bb30      	cbnz	r0, 80112d2 <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );
 8011284:	4631      	mov	r1, r6
 8011286:	aa0a      	add	r2, sp, #40	; 0x28
 8011288:	4630      	mov	r0, r6
 801128a:	f7fd ffcc 	bl	800f226 <mbedtls_mpi_mul_mpi>
 801128e:	4601      	mov	r1, r0
 8011290:	b9f8      	cbnz	r0, 80112d2 <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );
 8011292:	4631      	mov	r1, r6
 8011294:	464a      	mov	r2, r9
 8011296:	4620      	mov	r0, r4
 8011298:	f7fe fcf0 	bl	800fc7c <mbedtls_mpi_inv_mod>
 801129c:	4601      	mov	r1, r0
 801129e:	b9c0      	cbnz	r0, 80112d2 <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 80112a0:	4621      	mov	r1, r4
 80112a2:	aa07      	add	r2, sp, #28
 80112a4:	4620      	mov	r0, r4
 80112a6:	f7fd ffbe 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80112aa:	4601      	mov	r1, r0
 80112ac:	b988      	cbnz	r0, 80112d2 <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 80112ae:	4621      	mov	r1, r4
 80112b0:	464a      	mov	r2, r9
 80112b2:	4620      	mov	r0, r4
 80112b4:	f7fe f9e5 	bl	800f682 <mbedtls_mpi_mod_mpi>
 80112b8:	4601      	mov	r1, r0
 80112ba:	b950      	cbnz	r0, 80112d2 <mbedtls_ecdsa_sign+0x14e>

        if( sign_tries++ > 10 )
 80112bc:	f1ba 0a01 	subs.w	sl, sl, #1
 80112c0:	d01b      	beq.n	80112fa <mbedtls_ecdsa_sign+0x176>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
            goto cleanup;
        }
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 80112c2:	9003      	str	r0, [sp, #12]
 80112c4:	4620      	mov	r0, r4
 80112c6:	f7fd fea7 	bl	800f018 <mbedtls_mpi_cmp_int>
 80112ca:	9903      	ldr	r1, [sp, #12]
 80112cc:	2800      	cmp	r0, #0
 80112ce:	f43f af78 	beq.w	80111c2 <mbedtls_ecdsa_sign+0x3e>

cleanup:
    mbedtls_ecp_point_free( &R );
 80112d2:	a80d      	add	r0, sp, #52	; 0x34
 80112d4:	9103      	str	r1, [sp, #12]
 80112d6:	f000 ff0f 	bl	80120f8 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 80112da:	a804      	add	r0, sp, #16
 80112dc:	f7fd fb9a 	bl	800ea14 <mbedtls_mpi_free>
 80112e0:	a807      	add	r0, sp, #28
 80112e2:	f7fd fb97 	bl	800ea14 <mbedtls_mpi_free>
 80112e6:	a80a      	add	r0, sp, #40	; 0x28
 80112e8:	f7fd fb94 	bl	800ea14 <mbedtls_mpi_free>

    return( ret );
 80112ec:	9903      	ldr	r1, [sp, #12]
}
 80112ee:	4608      	mov	r0, r1
 80112f0:	b017      	add	sp, #92	; 0x5c
 80112f2:	ecbd 8b02 	vpop	{d8}
 80112f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 80112fa:	4903      	ldr	r1, [pc, #12]	; (8011308 <mbedtls_ecdsa_sign+0x184>)
 80112fc:	e7e9      	b.n	80112d2 <mbedtls_ecdsa_sign+0x14e>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80112fe:	4903      	ldr	r1, [pc, #12]	; (801130c <mbedtls_ecdsa_sign+0x188>)
 8011300:	e7f5      	b.n	80112ee <mbedtls_ecdsa_sign+0x16a>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8011302:	4901      	ldr	r1, [pc, #4]	; (8011308 <mbedtls_ecdsa_sign+0x184>)
 8011304:	e7f3      	b.n	80112ee <mbedtls_ecdsa_sign+0x16a>
 8011306:	bf00      	nop
 8011308:	ffffb300 	.word	0xffffb300
 801130c:	ffffb080 	.word	0xffffb080

08011310 <mbedtls_ecdsa_sign_det>:
 * Deterministic signature wrapper
 */
int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                    mbedtls_md_type_t md_alg )
{
 8011310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011314:	b0c5      	sub	sp, #276	; 0x114
    int ret;
    mbedtls_hmac_drbg_context rng_ctx;
    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 8011316:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
{
 8011318:	f8dd b13c 	ldr.w	fp, [sp, #316]	; 0x13c
 801131c:	4605      	mov	r5, r0
    const mbedtls_md_info_t *md_info;
    mbedtls_mpi h;

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 801131e:	f89d 0140 	ldrb.w	r0, [sp, #320]	; 0x140
{
 8011322:	4689      	mov	r9, r1
 8011324:	4692      	mov	sl, r2
 8011326:	461f      	mov	r7, r3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8011328:	f003 fb08 	bl	801493c <mbedtls_md_info_from_type>
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 801132c:	3407      	adds	r4, #7
 801132e:	08e4      	lsrs	r4, r4, #3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8011330:	4680      	mov	r8, r0
 8011332:	2800      	cmp	r0, #0
 8011334:	d03c      	beq.n	80113b0 <mbedtls_ecdsa_sign_det+0xa0>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &h );
 8011336:	a807      	add	r0, sp, #28
    mbedtls_hmac_drbg_init( &rng_ctx );
 8011338:	ae0a      	add	r6, sp, #40	; 0x28
    mbedtls_mpi_init( &h );
 801133a:	f7fd fb64 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_hmac_drbg_init( &rng_ctx );
 801133e:	4630      	mov	r0, r6
 8011340:	f003 f9ea 	bl	8014718 <mbedtls_hmac_drbg_init>

    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );
 8011344:	4622      	mov	r2, r4
 8011346:	a923      	add	r1, sp, #140	; 0x8c
 8011348:	4638      	mov	r0, r7
 801134a:	f7fd fcdd 	bl	800ed08 <mbedtls_mpi_write_binary>
 801134e:	4603      	mov	r3, r0
 8011350:	bb10      	cbnz	r0, 8011398 <mbedtls_ecdsa_sign_det+0x88>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
 8011352:	465b      	mov	r3, fp
 8011354:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 8011356:	a907      	add	r1, sp, #28
 8011358:	4628      	mov	r0, r5
 801135a:	f7ff fee1 	bl	8011120 <derive_mpi>
 801135e:	4603      	mov	r3, r0
 8011360:	b9d0      	cbnz	r0, 8011398 <mbedtls_ecdsa_sign_det+0x88>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );
 8011362:	ab23      	add	r3, sp, #140	; 0x8c
 8011364:	1919      	adds	r1, r3, r4
 8011366:	4622      	mov	r2, r4
 8011368:	a807      	add	r0, sp, #28
 801136a:	f7fd fccd 	bl	800ed08 <mbedtls_mpi_write_binary>
 801136e:	4603      	mov	r3, r0
 8011370:	b990      	cbnz	r0, 8011398 <mbedtls_ecdsa_sign_det+0x88>
    mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );
 8011372:	0063      	lsls	r3, r4, #1
 8011374:	aa23      	add	r2, sp, #140	; 0x8c
 8011376:	4641      	mov	r1, r8
 8011378:	4630      	mov	r0, r6
 801137a:	f003 fa1d 	bl	80147b8 <mbedtls_hmac_drbg_seed_buf>

    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,
 801137e:	4b0d      	ldr	r3, [pc, #52]	; (80113b4 <mbedtls_ecdsa_sign_det+0xa4>)
 8011380:	9603      	str	r6, [sp, #12]
 8011382:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011386:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8011388:	9300      	str	r3, [sp, #0]
 801138a:	4652      	mov	r2, sl
 801138c:	463b      	mov	r3, r7
 801138e:	4649      	mov	r1, r9
 8011390:	4628      	mov	r0, r5
 8011392:	f7ff fef7 	bl	8011184 <mbedtls_ecdsa_sign>
 8011396:	4603      	mov	r3, r0
                      mbedtls_hmac_drbg_random, &rng_ctx );

cleanup:
    mbedtls_hmac_drbg_free( &rng_ctx );
 8011398:	4630      	mov	r0, r6
 801139a:	9305      	str	r3, [sp, #20]
 801139c:	f003 fac9 	bl	8014932 <mbedtls_hmac_drbg_free>
    mbedtls_mpi_free( &h );
 80113a0:	a807      	add	r0, sp, #28
 80113a2:	f7fd fb37 	bl	800ea14 <mbedtls_mpi_free>

    return( ret );
 80113a6:	9b05      	ldr	r3, [sp, #20]
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	b045      	add	sp, #276	; 0x114
 80113ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80113b0:	4b01      	ldr	r3, [pc, #4]	; (80113b8 <mbedtls_ecdsa_sign_det+0xa8>)
 80113b2:	e7f9      	b.n	80113a8 <mbedtls_ecdsa_sign_det+0x98>
 80113b4:	08014923 	.word	0x08014923
 80113b8:	ffffb080 	.word	0xffffb080

080113bc <mbedtls_ecdsa_verify>:
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
                  const unsigned char *buf, size_t blen,
                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)
{
 80113bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c0:	b099      	sub	sp, #100	; 0x64
 80113c2:	4605      	mov	r5, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;

    mbedtls_ecp_point_init( &R );
 80113c4:	a80f      	add	r0, sp, #60	; 0x3c
{
 80113c6:	4698      	mov	r8, r3
 80113c8:	468a      	mov	sl, r1
 80113ca:	4693      	mov	fp, r2
 80113cc:	e9dd 6922 	ldrd	r6, r9, [sp, #136]	; 0x88
    mbedtls_ecp_point_init( &R );
 80113d0:	f000 fe78 	bl	80120c4 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 80113d4:	a803      	add	r0, sp, #12
 80113d6:	f7fd fb16 	bl	800ea06 <mbedtls_mpi_init>
 80113da:	a806      	add	r0, sp, #24
 80113dc:	f7fd fb13 	bl	800ea06 <mbedtls_mpi_init>
 80113e0:	a809      	add	r0, sp, #36	; 0x24
 80113e2:	f7fd fb10 	bl	800ea06 <mbedtls_mpi_init>
 80113e6:	a80c      	add	r0, sp, #48	; 0x30
 80113e8:	f7fd fb0d 	bl	800ea06 <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 80113ec:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d07f      	beq.n	80114f2 <mbedtls_ecdsa_verify+0x136>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 80113f2:	2101      	movs	r1, #1
 80113f4:	4630      	mov	r0, r6
 80113f6:	f7fd fe0f 	bl	800f018 <mbedtls_mpi_cmp_int>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	db65      	blt.n	80114ca <mbedtls_ecdsa_verify+0x10e>
 80113fe:	f105 074c 	add.w	r7, r5, #76	; 0x4c
 8011402:	4639      	mov	r1, r7
 8011404:	4630      	mov	r0, r6
 8011406:	f7fd fdc4 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 801140a:	2800      	cmp	r0, #0
 801140c:	da5d      	bge.n	80114ca <mbedtls_ecdsa_verify+0x10e>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 801140e:	2101      	movs	r1, #1
 8011410:	4648      	mov	r0, r9
 8011412:	f7fd fe01 	bl	800f018 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 8011416:	2800      	cmp	r0, #0
 8011418:	db57      	blt.n	80114ca <mbedtls_ecdsa_verify+0x10e>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 801141a:	4639      	mov	r1, r7
 801141c:	4648      	mov	r0, r9
 801141e:	f7fd fdb8 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8011422:	2800      	cmp	r0, #0
 8011424:	da51      	bge.n	80114ca <mbedtls_ecdsa_verify+0x10e>
    }

    /*
     * Additional precaution: make sure Q is valid
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
 8011426:	4641      	mov	r1, r8
 8011428:	4628      	mov	r0, r5
 801142a:	f001 fc6b 	bl	8012d04 <mbedtls_ecp_check_pubkey>
 801142e:	4604      	mov	r4, r0
 8011430:	2800      	cmp	r0, #0
 8011432:	d14b      	bne.n	80114cc <mbedtls_ecdsa_verify+0x110>

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8011434:	465b      	mov	r3, fp
 8011436:	4652      	mov	r2, sl
 8011438:	a903      	add	r1, sp, #12
 801143a:	4628      	mov	r0, r5
 801143c:	f7ff fe70 	bl	8011120 <derive_mpi>
 8011440:	4604      	mov	r4, r0
 8011442:	2800      	cmp	r0, #0
 8011444:	d142      	bne.n	80114cc <mbedtls_ecdsa_verify+0x110>

    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 8011446:	463a      	mov	r2, r7
 8011448:	4649      	mov	r1, r9
 801144a:	a806      	add	r0, sp, #24
 801144c:	f7fe fc16 	bl	800fc7c <mbedtls_mpi_inv_mod>
 8011450:	4604      	mov	r4, r0
 8011452:	2800      	cmp	r0, #0
 8011454:	d13a      	bne.n	80114cc <mbedtls_ecdsa_verify+0x110>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );
 8011456:	aa06      	add	r2, sp, #24
 8011458:	a903      	add	r1, sp, #12
 801145a:	a809      	add	r0, sp, #36	; 0x24
 801145c:	f7fd fee3 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011460:	4604      	mov	r4, r0
 8011462:	bb98      	cbnz	r0, 80114cc <mbedtls_ecdsa_verify+0x110>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );
 8011464:	a909      	add	r1, sp, #36	; 0x24
 8011466:	463a      	mov	r2, r7
 8011468:	4608      	mov	r0, r1
 801146a:	f7fe f90a 	bl	800f682 <mbedtls_mpi_mod_mpi>
 801146e:	4604      	mov	r4, r0
 8011470:	bb60      	cbnz	r0, 80114cc <mbedtls_ecdsa_verify+0x110>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );
 8011472:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011476:	aa06      	add	r2, sp, #24
 8011478:	4631      	mov	r1, r6
 801147a:	4648      	mov	r0, r9
 801147c:	f7fd fed3 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011480:	4604      	mov	r4, r0
 8011482:	bb18      	cbnz	r0, 80114cc <mbedtls_ecdsa_verify+0x110>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );
 8011484:	463a      	mov	r2, r7
 8011486:	4649      	mov	r1, r9
 8011488:	4648      	mov	r0, r9
 801148a:	f7fe f8fa 	bl	800f682 <mbedtls_mpi_mod_mpi>
 801148e:	4604      	mov	r4, r0
 8011490:	b9e0      	cbnz	r0, 80114cc <mbedtls_ecdsa_verify+0x110>
     * Step 5: R = u1 G + u2 Q
     *
     * Since we're not using any secret data, no need to pass a RNG to
     * mbedtls_ecp_mul() for countermesures.
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );
 8011492:	e9cd 9800 	strd	r9, r8, [sp]
 8011496:	f105 0328 	add.w	r3, r5, #40	; 0x28
 801149a:	aa09      	add	r2, sp, #36	; 0x24
 801149c:	a90f      	add	r1, sp, #60	; 0x3c
 801149e:	4628      	mov	r0, r5
 80114a0:	f001 fd7c 	bl	8012f9c <mbedtls_ecp_muladd>
 80114a4:	4604      	mov	r4, r0
 80114a6:	b988      	cbnz	r0, 80114cc <mbedtls_ecdsa_verify+0x110>

    if( mbedtls_ecp_is_zero( &R ) )
 80114a8:	a80f      	add	r0, sp, #60	; 0x3c
 80114aa:	f001 fb45 	bl	8012b38 <mbedtls_ecp_is_zero>
 80114ae:	b960      	cbnz	r0, 80114ca <mbedtls_ecdsa_verify+0x10e>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 80114b0:	a90f      	add	r1, sp, #60	; 0x3c
 80114b2:	463a      	mov	r2, r7
 80114b4:	4608      	mov	r0, r1
 80114b6:	f7fe f8e4 	bl	800f682 <mbedtls_mpi_mod_mpi>
 80114ba:	4604      	mov	r4, r0
 80114bc:	b930      	cbnz	r0, 80114cc <mbedtls_ecdsa_verify+0x110>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 80114be:	4631      	mov	r1, r6
 80114c0:	a80f      	add	r0, sp, #60	; 0x3c
 80114c2:	f7fd fd66 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 80114c6:	4604      	mov	r4, r0
 80114c8:	b100      	cbz	r0, 80114cc <mbedtls_ecdsa_verify+0x110>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 80114ca:	4c0b      	ldr	r4, [pc, #44]	; (80114f8 <mbedtls_ecdsa_verify+0x13c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
 80114cc:	a80f      	add	r0, sp, #60	; 0x3c
 80114ce:	f000 fe13 	bl	80120f8 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 80114d2:	a803      	add	r0, sp, #12
 80114d4:	f7fd fa9e 	bl	800ea14 <mbedtls_mpi_free>
 80114d8:	a806      	add	r0, sp, #24
 80114da:	f7fd fa9b 	bl	800ea14 <mbedtls_mpi_free>
 80114de:	a809      	add	r0, sp, #36	; 0x24
 80114e0:	f7fd fa98 	bl	800ea14 <mbedtls_mpi_free>
 80114e4:	a80c      	add	r0, sp, #48	; 0x30
 80114e6:	f7fd fa95 	bl	800ea14 <mbedtls_mpi_free>

    return( ret );
}
 80114ea:	4620      	mov	r0, r4
 80114ec:	b019      	add	sp, #100	; 0x64
 80114ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80114f2:	4c02      	ldr	r4, [pc, #8]	; (80114fc <mbedtls_ecdsa_verify+0x140>)
 80114f4:	e7f9      	b.n	80114ea <mbedtls_ecdsa_verify+0x12e>
 80114f6:	bf00      	nop
 80114f8:	ffffb200 	.word	0xffffb200
 80114fc:	ffffb080 	.word	0xffffb080

08011500 <mbedtls_ecdsa_write_signature>:
int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng )
{
 8011500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011502:	b0b1      	sub	sp, #196	; 0xc4
 8011504:	4604      	mov	r4, r0
    int ret;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 8011506:	a806      	add	r0, sp, #24
{
 8011508:	4615      	mov	r5, r2
 801150a:	460f      	mov	r7, r1
 801150c:	461e      	mov	r6, r3
    mbedtls_mpi_init( &r );
 801150e:	f7fd fa7a 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 8011512:	a809      	add	r0, sp, #36	; 0x24
 8011514:	f7fd fa77 	bl	800ea06 <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    (void) f_rng;
    (void) p_rng;

    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,
 8011518:	9500      	str	r5, [sp, #0]
 801151a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 801151e:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 8011522:	aa09      	add	r2, sp, #36	; 0x24
 8011524:	a906      	add	r1, sp, #24
 8011526:	4620      	mov	r0, r4
 8011528:	f7ff fef2 	bl	8011310 <mbedtls_ecdsa_sign_det>
 801152c:	4605      	mov	r5, r0
 801152e:	bb58      	cbnz	r0, 8011588 <mbedtls_ecdsa_write_signature+0x88>
    unsigned char *p = buf + sizeof( buf );
 8011530:	f10d 03bd 	add.w	r3, sp, #189	; 0xbd
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 8011534:	aa09      	add	r2, sp, #36	; 0x24
 8011536:	a90c      	add	r1, sp, #48	; 0x30
 8011538:	a805      	add	r0, sp, #20
    unsigned char *p = buf + sizeof( buf );
 801153a:	9305      	str	r3, [sp, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 801153c:	f7fc ffe8 	bl	800e510 <mbedtls_asn1_write_mpi>
 8011540:	1e04      	subs	r4, r0, #0
 8011542:	db20      	blt.n	8011586 <mbedtls_ecdsa_write_signature+0x86>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 8011544:	aa06      	add	r2, sp, #24
 8011546:	a90c      	add	r1, sp, #48	; 0x30
 8011548:	a805      	add	r0, sp, #20
 801154a:	f7fc ffe1 	bl	800e510 <mbedtls_asn1_write_mpi>
 801154e:	2800      	cmp	r0, #0
 8011550:	db23      	blt.n	801159a <mbedtls_ecdsa_write_signature+0x9a>
 8011552:	1826      	adds	r6, r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 8011554:	4632      	mov	r2, r6
 8011556:	a90c      	add	r1, sp, #48	; 0x30
 8011558:	a805      	add	r0, sp, #20
 801155a:	f7fc ff57 	bl	800e40c <mbedtls_asn1_write_len>
 801155e:	1e04      	subs	r4, r0, #0
 8011560:	db11      	blt.n	8011586 <mbedtls_ecdsa_write_signature+0x86>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8011562:	2230      	movs	r2, #48	; 0x30
 8011564:	eb0d 0102 	add.w	r1, sp, r2
 8011568:	a805      	add	r0, sp, #20
 801156a:	f7fc ffc3 	bl	800e4f4 <mbedtls_asn1_write_tag>
 801156e:	1e02      	subs	r2, r0, #0
 8011570:	db15      	blt.n	801159e <mbedtls_ecdsa_write_signature+0x9e>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 8011572:	4434      	add	r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8011574:	4414      	add	r4, r2
    memcpy( sig, p, len );
 8011576:	4622      	mov	r2, r4
 8011578:	9905      	ldr	r1, [sp, #20]
 801157a:	9836      	ldr	r0, [sp, #216]	; 0xd8
 801157c:	f010 ff80 	bl	8022480 <memcpy>
    *slen = len;
 8011580:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8011582:	601c      	str	r4, [r3, #0]
    return( 0 );
 8011584:	462c      	mov	r4, r5

    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#endif

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 8011586:	4625      	mov	r5, r4

cleanup:
    mbedtls_mpi_free( &r );
 8011588:	a806      	add	r0, sp, #24
 801158a:	f7fd fa43 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 801158e:	a809      	add	r0, sp, #36	; 0x24
 8011590:	f7fd fa40 	bl	800ea14 <mbedtls_mpi_free>

    return( ret );
}
 8011594:	4628      	mov	r0, r5
 8011596:	b031      	add	sp, #196	; 0xc4
 8011598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801159a:	4604      	mov	r4, r0
 801159c:	e7f3      	b.n	8011586 <mbedtls_ecdsa_write_signature+0x86>
 801159e:	4614      	mov	r4, r2
 80115a0:	e7f1      	b.n	8011586 <mbedtls_ecdsa_write_signature+0x86>
	...

080115a4 <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
 80115a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115a8:	b08a      	sub	sp, #40	; 0x28
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
    size_t len;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 80115aa:	af04      	add	r7, sp, #16
    const unsigned char *end = sig + slen;
 80115ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
    unsigned char *p = (unsigned char *) sig;
 80115ae:	9302      	str	r3, [sp, #8]
{
 80115b0:	4680      	mov	r8, r0
    mbedtls_mpi_init( &s );
 80115b2:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
 80115b4:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
 80115b6:	441d      	add	r5, r3
{
 80115b8:	4689      	mov	r9, r1
 80115ba:	4692      	mov	sl, r2
    mbedtls_mpi_init( &r );
 80115bc:	f7fd fa23 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80115c0:	4630      	mov	r0, r6
 80115c2:	f7fd fa20 	bl	800ea06 <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80115c6:	2330      	movs	r3, #48	; 0x30
 80115c8:	aa03      	add	r2, sp, #12
 80115ca:	4629      	mov	r1, r5
 80115cc:	a802      	add	r0, sp, #8
 80115ce:	f7fc fddf 	bl	800e190 <mbedtls_asn1_get_tag>
 80115d2:	b158      	cbz	r0, 80115ec <mbedtls_ecdsa_read_signature+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80115d4:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80

    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
 80115d8:	4638      	mov	r0, r7
 80115da:	f7fd fa1b 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 80115de:	4630      	mov	r0, r6
 80115e0:	f7fd fa18 	bl	800ea14 <mbedtls_mpi_free>

    return( ret );
}
 80115e4:	4620      	mov	r0, r4
 80115e6:	b00a      	add	sp, #40	; 0x28
 80115e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( p + len != end )
 80115ec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80115f0:	4413      	add	r3, r2
 80115f2:	429d      	cmp	r5, r3
 80115f4:	d11f      	bne.n	8011636 <mbedtls_ecdsa_read_signature+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 80115f6:	463a      	mov	r2, r7
 80115f8:	4629      	mov	r1, r5
 80115fa:	a802      	add	r0, sp, #8
 80115fc:	f7fc fe18 	bl	800e230 <mbedtls_asn1_get_mpi>
 8011600:	2800      	cmp	r0, #0
 8011602:	d1e7      	bne.n	80115d4 <mbedtls_ecdsa_read_signature+0x30>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
 8011604:	4632      	mov	r2, r6
 8011606:	4629      	mov	r1, r5
 8011608:	a802      	add	r0, sp, #8
 801160a:	f7fc fe11 	bl	800e230 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 801160e:	2800      	cmp	r0, #0
 8011610:	d1e0      	bne.n	80115d4 <mbedtls_ecdsa_read_signature+0x30>
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
 8011612:	e9cd 7600 	strd	r7, r6, [sp]
 8011616:	f108 0388 	add.w	r3, r8, #136	; 0x88
 801161a:	4652      	mov	r2, sl
 801161c:	4649      	mov	r1, r9
 801161e:	4640      	mov	r0, r8
 8011620:	f7ff fecc 	bl	80113bc <mbedtls_ecdsa_verify>
 8011624:	4604      	mov	r4, r0
 8011626:	2800      	cmp	r0, #0
 8011628:	d1d6      	bne.n	80115d8 <mbedtls_ecdsa_read_signature+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 801162a:	9a02      	ldr	r2, [sp, #8]
 801162c:	4b03      	ldr	r3, [pc, #12]	; (801163c <mbedtls_ecdsa_read_signature+0x98>)
 801162e:	42aa      	cmp	r2, r5
 8011630:	bf18      	it	ne
 8011632:	461c      	movne	r4, r3
 8011634:	e7d0      	b.n	80115d8 <mbedtls_ecdsa_read_signature+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 8011636:	4c02      	ldr	r4, [pc, #8]	; (8011640 <mbedtls_ecdsa_read_signature+0x9c>)
 8011638:	e7ce      	b.n	80115d8 <mbedtls_ecdsa_read_signature+0x34>
 801163a:	bf00      	nop
 801163c:	ffffb400 	.word	0xffffb400
 8011640:	ffffb01a 	.word	0xffffb01a

08011644 <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
 8011644:	b570      	push	{r4, r5, r6, lr}
 8011646:	4605      	mov	r5, r0
 8011648:	460e      	mov	r6, r1
    int ret;

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 801164a:	f000 fdb5 	bl	80121b8 <mbedtls_ecp_group_copy>
 801164e:	4604      	mov	r4, r0
 8011650:	b978      	cbnz	r0, 8011672 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 8011652:	f106 017c 	add.w	r1, r6, #124	; 0x7c
 8011656:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 801165a:	f7fd fa5b 	bl	800eb14 <mbedtls_mpi_copy>
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 801165e:	4604      	mov	r4, r0
 8011660:	b938      	cbnz	r0, 8011672 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
 8011662:	f106 0188 	add.w	r1, r6, #136	; 0x88
 8011666:	f105 0088 	add.w	r0, r5, #136	; 0x88
 801166a:	f000 fd8f 	bl	801218c <mbedtls_ecp_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 801166e:	4604      	mov	r4, r0
 8011670:	b110      	cbz	r0, 8011678 <mbedtls_ecdsa_from_keypair+0x34>
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    mbedtls_ecp_keypair_free( ctx );
 8011672:	4628      	mov	r0, r5
 8011674:	f000 fd7a 	bl	801216c <mbedtls_ecp_keypair_free>
}
 8011678:	4620      	mov	r0, r4
 801167a:	bd70      	pop	{r4, r5, r6, pc}

0801167c <mbedtls_ecdsa_init>:
    mbedtls_ecp_keypair_init( ctx );
 801167c:	f000 bd2c 	b.w	80120d8 <mbedtls_ecp_keypair_init>

08011680 <mbedtls_ecdsa_free>:
    mbedtls_ecp_keypair_free( ctx );
 8011680:	f000 bd74 	b.w	801216c <mbedtls_ecp_keypair_free>

08011684 <ecp_get_type>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
 8011684:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011686:	b12b      	cbz	r3, 8011694 <ecp_get_type+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
 8011688:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801168a:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 801168c:	bf0c      	ite	eq
 801168e:	2002      	moveq	r0, #2
 8011690:	2001      	movne	r0, #1
 8011692:	4770      	bx	lr
        return( ECP_TYPE_NONE );
 8011694:	4618      	mov	r0, r3
}
 8011696:	4770      	bx	lr

08011698 <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 8011698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801169a:	460d      	mov	r5, r1
 801169c:	4604      	mov	r4, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 801169e:	350c      	adds	r5, #12
    mbedtls_mpi_init( &mQY );
 80116a0:	a801      	add	r0, sp, #4
{
 80116a2:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
 80116a4:	f7fd f9af 	bl	800ea06 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 80116a8:	1d21      	adds	r1, r4, #4
 80116aa:	462a      	mov	r2, r5
 80116ac:	a801      	add	r0, sp, #4
 80116ae:	f7fd fd81 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 80116b2:	4604      	mov	r4, r0
 80116b4:	b968      	cbnz	r0, 80116d2 <ecp_safe_invert_jac+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 80116b6:	4601      	mov	r1, r0
 80116b8:	4628      	mov	r0, r5
 80116ba:	f7fd fcad 	bl	800f018 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 80116be:	a901      	add	r1, sp, #4
 80116c0:	2800      	cmp	r0, #0
 80116c2:	bf0c      	ite	eq
 80116c4:	2200      	moveq	r2, #0
 80116c6:	f006 0201 	andne.w	r2, r6, #1
 80116ca:	4628      	mov	r0, r5
 80116cc:	f7fd fa4c 	bl	800eb68 <mbedtls_mpi_safe_cond_assign>
 80116d0:	4604      	mov	r4, r0

cleanup:
    mbedtls_mpi_free( &mQY );
 80116d2:	a801      	add	r0, sp, #4
 80116d4:	f7fd f99e 	bl	800ea14 <mbedtls_mpi_free>

    return( ret );
}
 80116d8:	4620      	mov	r0, r4
 80116da:	b004      	add	sp, #16
 80116dc:	bd70      	pop	{r4, r5, r6, pc}

080116de <ecp_select_comb>:
 * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char t_len,
                            unsigned char i )
{
 80116de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e2:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 80116e6:	4606      	mov	r6, r0
 80116e8:	460d      	mov	r5, r1
 80116ea:	461f      	mov	r7, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 80116ec:	f3c8 0945 	ubfx	r9, r8, #1, #6

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < t_len; j++ )
 80116f0:	4614      	mov	r4, r2
    ii =  ( i & 0x7Fu ) >> 1;
 80116f2:	f04f 0b00 	mov.w	fp, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 80116f6:	f101 0a0c 	add.w	sl, r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 80116fa:	fa5f f28b 	uxtb.w	r2, fp
 80116fe:	eba2 0309 	sub.w	r3, r2, r9
 8011702:	425a      	negs	r2, r3
 8011704:	415a      	adcs	r2, r3
 8011706:	4621      	mov	r1, r4
 8011708:	4628      	mov	r0, r5
 801170a:	9201      	str	r2, [sp, #4]
 801170c:	f7fd fa2c 	bl	800eb68 <mbedtls_mpi_safe_cond_assign>
 8011710:	b9a8      	cbnz	r0, 801173e <ecp_select_comb+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 8011712:	9a01      	ldr	r2, [sp, #4]
 8011714:	f104 010c 	add.w	r1, r4, #12
 8011718:	4650      	mov	r0, sl
 801171a:	f7fd fa25 	bl	800eb68 <mbedtls_mpi_safe_cond_assign>
 801171e:	b970      	cbnz	r0, 801173e <ecp_select_comb+0x60>
    for( j = 0; j < t_len; j++ )
 8011720:	f10b 0b01 	add.w	fp, fp, #1
 8011724:	45bb      	cmp	fp, r7
 8011726:	f104 0424 	add.w	r4, r4, #36	; 0x24
 801172a:	d1e6      	bne.n	80116fa <ecp_select_comb+0x1c>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 801172c:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 8011730:	4629      	mov	r1, r5
 8011732:	4630      	mov	r0, r6

cleanup:
    return( ret );
}
 8011734:	b003      	add	sp, #12
 8011736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 801173a:	f7ff bfad 	b.w	8011698 <ecp_safe_invert_jac>
}
 801173e:	b003      	add	sp, #12
 8011740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011744 <ecp_modp>:
    if( grp->modp == NULL )
 8011744:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
 8011746:	b570      	push	{r4, r5, r6, lr}
 8011748:	4604      	mov	r4, r0
 801174a:	460d      	mov	r5, r1
    if( grp->modp == NULL )
 801174c:	b92b      	cbnz	r3, 801175a <ecp_modp+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 801174e:	1d0a      	adds	r2, r1, #4
}
 8011750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 8011754:	4601      	mov	r1, r0
 8011756:	f7fd bf94 	b.w	800f682 <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 801175a:	6803      	ldr	r3, [r0, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	db09      	blt.n	8011774 <ecp_modp+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 8011760:	4620      	mov	r0, r4
 8011762:	f7fd fa7c 	bl	800ec5e <mbedtls_mpi_bitlen>
 8011766:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8011768:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 801176c:	d908      	bls.n	8011780 <ecp_modp+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801176e:	4e17      	ldr	r6, [pc, #92]	; (80117cc <ecp_modp+0x88>)
}
 8011770:	4630      	mov	r0, r6
 8011772:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8011774:	2100      	movs	r1, #0
 8011776:	f7fd fc4f 	bl	800f018 <mbedtls_mpi_cmp_int>
 801177a:	2800      	cmp	r0, #0
 801177c:	d0f0      	beq.n	8011760 <ecp_modp+0x1c>
 801177e:	e7f6      	b.n	801176e <ecp_modp+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 8011780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011782:	4620      	mov	r0, r4
 8011784:	4798      	blx	r3
 8011786:	4606      	mov	r6, r0
 8011788:	2800      	cmp	r0, #0
 801178a:	d1f1      	bne.n	8011770 <ecp_modp+0x2c>
 801178c:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 801178e:	6823      	ldr	r3, [r4, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	da04      	bge.n	801179e <ecp_modp+0x5a>
 8011794:	2100      	movs	r1, #0
 8011796:	4620      	mov	r0, r4
 8011798:	f7fd fc3e 	bl	800f018 <mbedtls_mpi_cmp_int>
 801179c:	b968      	cbnz	r0, 80117ba <ecp_modp+0x76>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 801179e:	4629      	mov	r1, r5
 80117a0:	4620      	mov	r0, r4
 80117a2:	f7fd fbf6 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	dbe2      	blt.n	8011770 <ecp_modp+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 80117aa:	462a      	mov	r2, r5
 80117ac:	4621      	mov	r1, r4
 80117ae:	4620      	mov	r0, r4
 80117b0:	f7fd fca1 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	d0f2      	beq.n	801179e <ecp_modp+0x5a>
 80117b8:	e006      	b.n	80117c8 <ecp_modp+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 80117ba:	462a      	mov	r2, r5
 80117bc:	4621      	mov	r1, r4
 80117be:	4620      	mov	r0, r4
 80117c0:	f7fd fcd6 	bl	800f170 <mbedtls_mpi_add_mpi>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	d0e2      	beq.n	801178e <ecp_modp+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 80117c8:	4606      	mov	r6, r0
 80117ca:	e7d1      	b.n	8011770 <ecp_modp+0x2c>
 80117cc:	ffffb080 	.word	0xffffb080

080117d0 <ecp_double_jac>:
{
 80117d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbl_count++;
 80117d4:	4cb9      	ldr	r4, [pc, #740]	; (8011abc <ecp_double_jac+0x2ec>)
 80117d6:	6823      	ldr	r3, [r4, #0]
{
 80117d8:	b08c      	sub	sp, #48	; 0x30
    dbl_count++;
 80117da:	3301      	adds	r3, #1
{
 80117dc:	4607      	mov	r7, r0
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 80117de:	4668      	mov	r0, sp
    dbl_count++;
 80117e0:	6023      	str	r3, [r4, #0]
{
 80117e2:	460d      	mov	r5, r1
 80117e4:	4690      	mov	r8, r2
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 80117e6:	f7fd f90e 	bl	800ea06 <mbedtls_mpi_init>
 80117ea:	a803      	add	r0, sp, #12
 80117ec:	f7fd f90b 	bl	800ea06 <mbedtls_mpi_init>
 80117f0:	a806      	add	r0, sp, #24
 80117f2:	f7fd f908 	bl	800ea06 <mbedtls_mpi_init>
 80117f6:	a809      	add	r0, sp, #36	; 0x24
 80117f8:	f7fd f905 	bl	800ea06 <mbedtls_mpi_init>
    if( grp->A.p == NULL )
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	46a2      	mov	sl, r4
 8011800:	2b00      	cmp	r3, #0
 8011802:	f040 8189 	bne.w	8011b18 <ecp_double_jac+0x348>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011806:	f108 0218 	add.w	r2, r8, #24
 801180a:	4611      	mov	r1, r2
 801180c:	a803      	add	r0, sp, #12
 801180e:	f7fd fd0a 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011812:	4604      	mov	r4, r0
 8011814:	2800      	cmp	r0, #0
 8011816:	f040 815c 	bne.w	8011ad2 <ecp_double_jac+0x302>
 801181a:	4639      	mov	r1, r7
 801181c:	a803      	add	r0, sp, #12
 801181e:	f7ff ff91 	bl	8011744 <ecp_modp>
 8011822:	4604      	mov	r4, r0
 8011824:	2800      	cmp	r0, #0
 8011826:	f040 8154 	bne.w	8011ad2 <ecp_double_jac+0x302>
 801182a:	f8da 3004 	ldr.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 801182e:	aa03      	add	r2, sp, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011830:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 8011832:	4641      	mov	r1, r8
 8011834:	a806      	add	r0, sp, #24
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011836:	f8ca 3004 	str.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 801183a:	f7fd fc99 	bl	800f170 <mbedtls_mpi_add_mpi>
 801183e:	4604      	mov	r4, r0
 8011840:	2800      	cmp	r0, #0
 8011842:	f040 8146 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011846:	1d3e      	adds	r6, r7, #4
 8011848:	4631      	mov	r1, r6
 801184a:	a806      	add	r0, sp, #24
 801184c:	f7fd fba1 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8011850:	2800      	cmp	r0, #0
 8011852:	f280 8135 	bge.w	8011ac0 <ecp_double_jac+0x2f0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 8011856:	aa03      	add	r2, sp, #12
 8011858:	4641      	mov	r1, r8
 801185a:	a809      	add	r0, sp, #36	; 0x24
 801185c:	f7fd fcaa 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 8011860:	4604      	mov	r4, r0
 8011862:	2800      	cmp	r0, #0
 8011864:	f040 8135 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801186a:	2b00      	cmp	r3, #0
 801186c:	f2c0 8141 	blt.w	8011af2 <ecp_double_jac+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 8011870:	aa09      	add	r2, sp, #36	; 0x24
 8011872:	a906      	add	r1, sp, #24
 8011874:	a803      	add	r0, sp, #12
 8011876:	f7fd fcd6 	bl	800f226 <mbedtls_mpi_mul_mpi>
 801187a:	4604      	mov	r4, r0
 801187c:	2800      	cmp	r0, #0
 801187e:	f040 8128 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011882:	4639      	mov	r1, r7
 8011884:	a803      	add	r0, sp, #12
 8011886:	f7ff ff5d 	bl	8011744 <ecp_modp>
 801188a:	4604      	mov	r4, r0
 801188c:	2800      	cmp	r0, #0
 801188e:	f040 8120 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011892:	f8da 3004 	ldr.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011896:	2203      	movs	r2, #3
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 8011898:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 801189a:	a903      	add	r1, sp, #12
 801189c:	4668      	mov	r0, sp
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 801189e:	f8ca 3004 	str.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80118a2:	f7fd fd24 	bl	800f2ee <mbedtls_mpi_mul_int>
 80118a6:	4604      	mov	r4, r0
 80118a8:	2800      	cmp	r0, #0
 80118aa:	f040 8112 	bne.w	8011ad2 <ecp_double_jac+0x302>
 80118ae:	4631      	mov	r1, r6
 80118b0:	4668      	mov	r0, sp
 80118b2:	f7fd fb6e 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 80118b6:	2800      	cmp	r0, #0
 80118b8:	f280 8128 	bge.w	8011b0c <ecp_double_jac+0x33c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 80118bc:	f108 090c 	add.w	r9, r8, #12
 80118c0:	464a      	mov	r2, r9
 80118c2:	4649      	mov	r1, r9
 80118c4:	a806      	add	r0, sp, #24
 80118c6:	f7fd fcae 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80118ca:	4604      	mov	r4, r0
 80118cc:	2800      	cmp	r0, #0
 80118ce:	f040 8100 	bne.w	8011ad2 <ecp_double_jac+0x302>
 80118d2:	4639      	mov	r1, r7
 80118d4:	a806      	add	r0, sp, #24
 80118d6:	f7ff ff35 	bl	8011744 <ecp_modp>
 80118da:	4604      	mov	r4, r0
 80118dc:	2800      	cmp	r0, #0
 80118de:	f040 80f8 	bne.w	8011ad2 <ecp_double_jac+0x302>
 80118e2:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 80118e6:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 80118e8:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 80118ea:	a806      	add	r0, sp, #24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 80118ec:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 80118f0:	f7fd fa2d 	bl	800ed4e <mbedtls_mpi_shift_l>
 80118f4:	4604      	mov	r4, r0
 80118f6:	2800      	cmp	r0, #0
 80118f8:	f040 80eb 	bne.w	8011ad2 <ecp_double_jac+0x302>
 80118fc:	1d3e      	adds	r6, r7, #4
 80118fe:	4631      	mov	r1, r6
 8011900:	a806      	add	r0, sp, #24
 8011902:	f7fd fb46 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8011906:	2800      	cmp	r0, #0
 8011908:	f280 8190 	bge.w	8011c2c <ecp_double_jac+0x45c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 801190c:	aa06      	add	r2, sp, #24
 801190e:	4641      	mov	r1, r8
 8011910:	a803      	add	r0, sp, #12
 8011912:	f7fd fc88 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011916:	4604      	mov	r4, r0
 8011918:	2800      	cmp	r0, #0
 801191a:	f040 80da 	bne.w	8011ad2 <ecp_double_jac+0x302>
 801191e:	4639      	mov	r1, r7
 8011920:	a803      	add	r0, sp, #12
 8011922:	f7ff ff0f 	bl	8011744 <ecp_modp>
 8011926:	4604      	mov	r4, r0
 8011928:	2800      	cmp	r0, #0
 801192a:	f040 80d2 	bne.w	8011ad2 <ecp_double_jac+0x302>
 801192e:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 8011932:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 8011934:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 8011936:	a803      	add	r0, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 8011938:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 801193c:	f7fd fa07 	bl	800ed4e <mbedtls_mpi_shift_l>
 8011940:	4604      	mov	r4, r0
 8011942:	2800      	cmp	r0, #0
 8011944:	f040 80c5 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011948:	4631      	mov	r1, r6
 801194a:	a803      	add	r0, sp, #12
 801194c:	f7fd fb21 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8011950:	2800      	cmp	r0, #0
 8011952:	f280 8175 	bge.w	8011c40 <ecp_double_jac+0x470>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 8011956:	aa06      	add	r2, sp, #24
 8011958:	4611      	mov	r1, r2
 801195a:	a809      	add	r0, sp, #36	; 0x24
 801195c:	f7fd fc63 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011960:	4604      	mov	r4, r0
 8011962:	2800      	cmp	r0, #0
 8011964:	f040 80b5 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011968:	4639      	mov	r1, r7
 801196a:	a809      	add	r0, sp, #36	; 0x24
 801196c:	f7ff feea 	bl	8011744 <ecp_modp>
 8011970:	4604      	mov	r4, r0
 8011972:	2800      	cmp	r0, #0
 8011974:	f040 80ad 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011978:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 801197c:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 801197e:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011980:	a809      	add	r0, sp, #36	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 8011982:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011986:	f7fd f9e2 	bl	800ed4e <mbedtls_mpi_shift_l>
 801198a:	4604      	mov	r4, r0
 801198c:	2800      	cmp	r0, #0
 801198e:	f040 80a0 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011992:	4631      	mov	r1, r6
 8011994:	a809      	add	r0, sp, #36	; 0x24
 8011996:	f7fd fafc 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 801199a:	2800      	cmp	r0, #0
 801199c:	f280 8156 	bge.w	8011c4c <ecp_double_jac+0x47c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 80119a0:	466a      	mov	r2, sp
 80119a2:	4669      	mov	r1, sp
 80119a4:	a806      	add	r0, sp, #24
 80119a6:	f7fd fc3e 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80119aa:	4604      	mov	r4, r0
 80119ac:	2800      	cmp	r0, #0
 80119ae:	f040 8090 	bne.w	8011ad2 <ecp_double_jac+0x302>
 80119b2:	4639      	mov	r1, r7
 80119b4:	a806      	add	r0, sp, #24
 80119b6:	f7ff fec5 	bl	8011744 <ecp_modp>
 80119ba:	4604      	mov	r4, r0
 80119bc:	2800      	cmp	r0, #0
 80119be:	f040 8088 	bne.w	8011ad2 <ecp_double_jac+0x302>
 80119c2:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80119c6:	a906      	add	r1, sp, #24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 80119c8:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80119ca:	aa03      	add	r2, sp, #12
 80119cc:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 80119ce:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80119d2:	f7fd fbef 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 80119d6:	4604      	mov	r4, r0
 80119d8:	2800      	cmp	r0, #0
 80119da:	d17a      	bne.n	8011ad2 <ecp_double_jac+0x302>
 80119dc:	9b06      	ldr	r3, [sp, #24]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	f2c0 813a 	blt.w	8011c58 <ecp_double_jac+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80119e4:	a906      	add	r1, sp, #24
 80119e6:	aa03      	add	r2, sp, #12
 80119e8:	4608      	mov	r0, r1
 80119ea:	f7fd fbe3 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 80119ee:	4604      	mov	r4, r0
 80119f0:	2800      	cmp	r0, #0
 80119f2:	d16e      	bne.n	8011ad2 <ecp_double_jac+0x302>
 80119f4:	9b06      	ldr	r3, [sp, #24]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	f2c0 813b 	blt.w	8011c72 <ecp_double_jac+0x4a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 80119fc:	a903      	add	r1, sp, #12
 80119fe:	aa06      	add	r2, sp, #24
 8011a00:	4608      	mov	r0, r1
 8011a02:	f7fd fbd7 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 8011a06:	4604      	mov	r4, r0
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	d162      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011a0c:	9b03      	ldr	r3, [sp, #12]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f2c0 813c 	blt.w	8011c8c <ecp_double_jac+0x4bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 8011a14:	a903      	add	r1, sp, #12
 8011a16:	466a      	mov	r2, sp
 8011a18:	4608      	mov	r0, r1
 8011a1a:	f7fd fc04 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011a1e:	4604      	mov	r4, r0
 8011a20:	2800      	cmp	r0, #0
 8011a22:	d156      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011a24:	4639      	mov	r1, r7
 8011a26:	a803      	add	r0, sp, #12
 8011a28:	f7ff fe8c 	bl	8011744 <ecp_modp>
 8011a2c:	4604      	mov	r4, r0
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d14f      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011a32:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 8011a36:	a903      	add	r1, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 8011a38:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 8011a3a:	aa09      	add	r2, sp, #36	; 0x24
 8011a3c:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 8011a3e:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 8011a42:	f7fd fbb7 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 8011a46:	4604      	mov	r4, r0
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d142      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011a4c:	9b03      	ldr	r3, [sp, #12]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f2c0 8129 	blt.w	8011ca6 <ecp_double_jac+0x4d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 8011a54:	f108 0218 	add.w	r2, r8, #24
 8011a58:	4649      	mov	r1, r9
 8011a5a:	a809      	add	r0, sp, #36	; 0x24
 8011a5c:	f7fd fbe3 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011a60:	4604      	mov	r4, r0
 8011a62:	2800      	cmp	r0, #0
 8011a64:	d135      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011a66:	4639      	mov	r1, r7
 8011a68:	a809      	add	r0, sp, #36	; 0x24
 8011a6a:	f7ff fe6b 	bl	8011744 <ecp_modp>
 8011a6e:	4604      	mov	r4, r0
 8011a70:	bb78      	cbnz	r0, 8011ad2 <ecp_double_jac+0x302>
 8011a72:	4a12      	ldr	r2, [pc, #72]	; (8011abc <ecp_double_jac+0x2ec>)
 8011a74:	6853      	ldr	r3, [r2, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011a76:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 8011a78:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011a7a:	a809      	add	r0, sp, #36	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 8011a7c:	6053      	str	r3, [r2, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011a7e:	f7fd f966 	bl	800ed4e <mbedtls_mpi_shift_l>
 8011a82:	4604      	mov	r4, r0
 8011a84:	bb28      	cbnz	r0, 8011ad2 <ecp_double_jac+0x302>
 8011a86:	4631      	mov	r1, r6
 8011a88:	a809      	add	r0, sp, #36	; 0x24
 8011a8a:	f7fd fa82 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	f280 8116 	bge.w	8011cc0 <ecp_double_jac+0x4f0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 8011a94:	a906      	add	r1, sp, #24
 8011a96:	4628      	mov	r0, r5
 8011a98:	f7fd f83c 	bl	800eb14 <mbedtls_mpi_copy>
 8011a9c:	4604      	mov	r4, r0
 8011a9e:	b9c0      	cbnz	r0, 8011ad2 <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 8011aa0:	a903      	add	r1, sp, #12
 8011aa2:	f105 000c 	add.w	r0, r5, #12
 8011aa6:	f7fd f835 	bl	800eb14 <mbedtls_mpi_copy>
 8011aaa:	4604      	mov	r4, r0
 8011aac:	b988      	cbnz	r0, 8011ad2 <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 8011aae:	a909      	add	r1, sp, #36	; 0x24
 8011ab0:	f105 0018 	add.w	r0, r5, #24
 8011ab4:	f7fd f82e 	bl	800eb14 <mbedtls_mpi_copy>
 8011ab8:	4604      	mov	r4, r0
cleanup:
 8011aba:	e00a      	b.n	8011ad2 <ecp_double_jac+0x302>
 8011abc:	200010c8 	.word	0x200010c8
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 8011ac0:	a906      	add	r1, sp, #24
 8011ac2:	4632      	mov	r2, r6
 8011ac4:	4608      	mov	r0, r1
 8011ac6:	f7fd fb16 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8011aca:	4604      	mov	r4, r0
 8011acc:	2800      	cmp	r0, #0
 8011ace:	f43f aebb 	beq.w	8011848 <ecp_double_jac+0x78>
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 8011ad2:	4668      	mov	r0, sp
 8011ad4:	f7fc ff9e 	bl	800ea14 <mbedtls_mpi_free>
 8011ad8:	a803      	add	r0, sp, #12
 8011ada:	f7fc ff9b 	bl	800ea14 <mbedtls_mpi_free>
 8011ade:	a806      	add	r0, sp, #24
 8011ae0:	f7fc ff98 	bl	800ea14 <mbedtls_mpi_free>
 8011ae4:	a809      	add	r0, sp, #36	; 0x24
 8011ae6:	f7fc ff95 	bl	800ea14 <mbedtls_mpi_free>
}
 8011aea:	4620      	mov	r0, r4
 8011aec:	b00c      	add	sp, #48	; 0x30
 8011aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 8011af2:	2100      	movs	r1, #0
 8011af4:	a809      	add	r0, sp, #36	; 0x24
 8011af6:	f7fd fa8f 	bl	800f018 <mbedtls_mpi_cmp_int>
 8011afa:	2800      	cmp	r0, #0
 8011afc:	f43f aeb8 	beq.w	8011870 <ecp_double_jac+0xa0>
 8011b00:	a909      	add	r1, sp, #36	; 0x24
 8011b02:	4632      	mov	r2, r6
 8011b04:	4608      	mov	r0, r1
 8011b06:	f7fd fb33 	bl	800f170 <mbedtls_mpi_add_mpi>
 8011b0a:	e6a9      	b.n	8011860 <ecp_double_jac+0x90>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011b0c:	4632      	mov	r2, r6
 8011b0e:	4669      	mov	r1, sp
 8011b10:	4668      	mov	r0, sp
 8011b12:	f7fd faf0 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8011b16:	e6c6      	b.n	80118a6 <ecp_double_jac+0xd6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8011b18:	4642      	mov	r2, r8
 8011b1a:	4641      	mov	r1, r8
 8011b1c:	a803      	add	r0, sp, #12
 8011b1e:	f7fd fb82 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011b22:	4604      	mov	r4, r0
 8011b24:	2800      	cmp	r0, #0
 8011b26:	d1d4      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011b28:	4639      	mov	r1, r7
 8011b2a:	a803      	add	r0, sp, #12
 8011b2c:	f7ff fe0a 	bl	8011744 <ecp_modp>
 8011b30:	4604      	mov	r4, r0
 8011b32:	2800      	cmp	r0, #0
 8011b34:	d1cd      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011b36:	f8da 3004 	ldr.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011b3a:	2203      	movs	r2, #3
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8011b3c:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011b3e:	a903      	add	r1, sp, #12
 8011b40:	4668      	mov	r0, sp
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8011b42:	f8ca 3004 	str.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011b46:	f7fd fbd2 	bl	800f2ee <mbedtls_mpi_mul_int>
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	d1c0      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011b50:	1d3e      	adds	r6, r7, #4
 8011b52:	4631      	mov	r1, r6
 8011b54:	4668      	mov	r0, sp
 8011b56:	f7fd fa1c 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	da5d      	bge.n	8011c1a <ecp_double_jac+0x44a>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 8011b5e:	f107 0910 	add.w	r9, r7, #16
 8011b62:	2100      	movs	r1, #0
 8011b64:	4648      	mov	r0, r9
 8011b66:	f7fd fa57 	bl	800f018 <mbedtls_mpi_cmp_int>
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	f43f aea6 	beq.w	80118bc <ecp_double_jac+0xec>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011b70:	f108 0218 	add.w	r2, r8, #24
 8011b74:	4611      	mov	r1, r2
 8011b76:	a803      	add	r0, sp, #12
 8011b78:	f7fd fb55 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011b7c:	4604      	mov	r4, r0
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d1a7      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011b82:	4639      	mov	r1, r7
 8011b84:	a803      	add	r0, sp, #12
 8011b86:	f7ff fddd 	bl	8011744 <ecp_modp>
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	d1a0      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011b90:	f8da 3004 	ldr.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011b94:	aa03      	add	r2, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011b96:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011b98:	4611      	mov	r1, r2
 8011b9a:	a806      	add	r0, sp, #24
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011b9c:	f8ca 3004 	str.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011ba0:	f7fd fb41 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	d193      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011baa:	4639      	mov	r1, r7
 8011bac:	a806      	add	r0, sp, #24
 8011bae:	f7ff fdc9 	bl	8011744 <ecp_modp>
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	d18c      	bne.n	8011ad2 <ecp_double_jac+0x302>
 8011bb8:	f8da 3004 	ldr.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011bbc:	464a      	mov	r2, r9
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011bbe:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011bc0:	a906      	add	r1, sp, #24
 8011bc2:	a803      	add	r0, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011bc4:	f8ca 3004 	str.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011bc8:	f7fd fb2d 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011bcc:	4604      	mov	r4, r0
 8011bce:	2800      	cmp	r0, #0
 8011bd0:	f47f af7f 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011bd4:	4639      	mov	r1, r7
 8011bd6:	a803      	add	r0, sp, #12
 8011bd8:	f7ff fdb4 	bl	8011744 <ecp_modp>
 8011bdc:	4604      	mov	r4, r0
 8011bde:	2800      	cmp	r0, #0
 8011be0:	f47f af77 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011be4:	f8da 3004 	ldr.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011be8:	aa03      	add	r2, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011bea:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011bec:	4669      	mov	r1, sp
 8011bee:	4668      	mov	r0, sp
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011bf0:	f8ca 3004 	str.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011bf4:	f7fd fabc 	bl	800f170 <mbedtls_mpi_add_mpi>
 8011bf8:	4604      	mov	r4, r0
 8011bfa:	2800      	cmp	r0, #0
 8011bfc:	f47f af69 	bne.w	8011ad2 <ecp_double_jac+0x302>
 8011c00:	4631      	mov	r1, r6
 8011c02:	4668      	mov	r0, sp
 8011c04:	f7fd f9c5 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	f6ff ae57 	blt.w	80118bc <ecp_double_jac+0xec>
 8011c0e:	4632      	mov	r2, r6
 8011c10:	4669      	mov	r1, sp
 8011c12:	4668      	mov	r0, sp
 8011c14:	f7fd fa6f 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8011c18:	e7ee      	b.n	8011bf8 <ecp_double_jac+0x428>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011c1a:	4632      	mov	r2, r6
 8011c1c:	4669      	mov	r1, sp
 8011c1e:	4668      	mov	r0, sp
 8011c20:	f7fd fa69 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8011c24:	4604      	mov	r4, r0
 8011c26:	2800      	cmp	r0, #0
 8011c28:	d093      	beq.n	8011b52 <ecp_double_jac+0x382>
 8011c2a:	e752      	b.n	8011ad2 <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011c2c:	a906      	add	r1, sp, #24
 8011c2e:	4632      	mov	r2, r6
 8011c30:	4608      	mov	r0, r1
 8011c32:	f7fd fa60 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8011c36:	4604      	mov	r4, r0
 8011c38:	2800      	cmp	r0, #0
 8011c3a:	f43f ae60 	beq.w	80118fe <ecp_double_jac+0x12e>
 8011c3e:	e748      	b.n	8011ad2 <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 8011c40:	a903      	add	r1, sp, #12
 8011c42:	4632      	mov	r2, r6
 8011c44:	4608      	mov	r0, r1
 8011c46:	f7fd fa56 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8011c4a:	e679      	b.n	8011940 <ecp_double_jac+0x170>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011c4c:	a909      	add	r1, sp, #36	; 0x24
 8011c4e:	4632      	mov	r2, r6
 8011c50:	4608      	mov	r0, r1
 8011c52:	f7fd fa50 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8011c56:	e698      	b.n	801198a <ecp_double_jac+0x1ba>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8011c58:	2100      	movs	r1, #0
 8011c5a:	a806      	add	r0, sp, #24
 8011c5c:	f7fd f9dc 	bl	800f018 <mbedtls_mpi_cmp_int>
 8011c60:	2800      	cmp	r0, #0
 8011c62:	f43f aebf 	beq.w	80119e4 <ecp_double_jac+0x214>
 8011c66:	a906      	add	r1, sp, #24
 8011c68:	4632      	mov	r2, r6
 8011c6a:	4608      	mov	r0, r1
 8011c6c:	f7fd fa80 	bl	800f170 <mbedtls_mpi_add_mpi>
 8011c70:	e6b1      	b.n	80119d6 <ecp_double_jac+0x206>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8011c72:	2100      	movs	r1, #0
 8011c74:	a806      	add	r0, sp, #24
 8011c76:	f7fd f9cf 	bl	800f018 <mbedtls_mpi_cmp_int>
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	f43f aebe 	beq.w	80119fc <ecp_double_jac+0x22c>
 8011c80:	a906      	add	r1, sp, #24
 8011c82:	4632      	mov	r2, r6
 8011c84:	4608      	mov	r0, r1
 8011c86:	f7fd fa73 	bl	800f170 <mbedtls_mpi_add_mpi>
 8011c8a:	e6b0      	b.n	80119ee <ecp_double_jac+0x21e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 8011c8c:	2100      	movs	r1, #0
 8011c8e:	a803      	add	r0, sp, #12
 8011c90:	f7fd f9c2 	bl	800f018 <mbedtls_mpi_cmp_int>
 8011c94:	2800      	cmp	r0, #0
 8011c96:	f43f aebd 	beq.w	8011a14 <ecp_double_jac+0x244>
 8011c9a:	a903      	add	r1, sp, #12
 8011c9c:	4632      	mov	r2, r6
 8011c9e:	4608      	mov	r0, r1
 8011ca0:	f7fd fa66 	bl	800f170 <mbedtls_mpi_add_mpi>
 8011ca4:	e6af      	b.n	8011a06 <ecp_double_jac+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	a803      	add	r0, sp, #12
 8011caa:	f7fd f9b5 	bl	800f018 <mbedtls_mpi_cmp_int>
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	f43f aed0 	beq.w	8011a54 <ecp_double_jac+0x284>
 8011cb4:	a903      	add	r1, sp, #12
 8011cb6:	4632      	mov	r2, r6
 8011cb8:	4608      	mov	r0, r1
 8011cba:	f7fd fa59 	bl	800f170 <mbedtls_mpi_add_mpi>
 8011cbe:	e6c2      	b.n	8011a46 <ecp_double_jac+0x276>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011cc0:	a909      	add	r1, sp, #36	; 0x24
 8011cc2:	4632      	mov	r2, r6
 8011cc4:	4608      	mov	r0, r1
 8011cc6:	f7fd fa16 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8011cca:	e6da      	b.n	8011a82 <ecp_double_jac+0x2b2>

08011ccc <ecp_normalize_jac>:
{
 8011ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8011cd0:	f101 0518 	add.w	r5, r1, #24
{
 8011cd4:	b086      	sub	sp, #24
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	4688      	mov	r8, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8011cda:	4628      	mov	r0, r5
 8011cdc:	2100      	movs	r1, #0
 8011cde:	f7fd f99b 	bl	800f018 <mbedtls_mpi_cmp_int>
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	d05d      	beq.n	8011da4 <ecp_normalize_jac+0xd8>
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8011ce8:	4668      	mov	r0, sp
 8011cea:	f7fc fe8c 	bl	800ea06 <mbedtls_mpi_init>
 8011cee:	a803      	add	r0, sp, #12
 8011cf0:	f7fc fe89 	bl	800ea06 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 8011cf4:	1d32      	adds	r2, r6, #4
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	4668      	mov	r0, sp
 8011cfa:	f7fd ffbf 	bl	800fc7c <mbedtls_mpi_inv_mod>
 8011cfe:	4604      	mov	r4, r0
 8011d00:	2800      	cmp	r0, #0
 8011d02:	d149      	bne.n	8011d98 <ecp_normalize_jac+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011d04:	466a      	mov	r2, sp
 8011d06:	4669      	mov	r1, sp
 8011d08:	a803      	add	r0, sp, #12
 8011d0a:	f7fd fa8c 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011d0e:	4604      	mov	r4, r0
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d141      	bne.n	8011d98 <ecp_normalize_jac+0xcc>
 8011d14:	4631      	mov	r1, r6
 8011d16:	a803      	add	r0, sp, #12
 8011d18:	f7ff fd14 	bl	8011744 <ecp_modp>
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d13a      	bne.n	8011d98 <ecp_normalize_jac+0xcc>
 8011d22:	4f22      	ldr	r7, [pc, #136]	; (8011dac <ecp_normalize_jac+0xe0>)
 8011d24:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011d26:	aa03      	add	r2, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011d28:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011d2a:	4641      	mov	r1, r8
 8011d2c:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011d2e:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011d30:	f7fd fa79 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011d34:	4604      	mov	r4, r0
 8011d36:	bb78      	cbnz	r0, 8011d98 <ecp_normalize_jac+0xcc>
 8011d38:	4631      	mov	r1, r6
 8011d3a:	4640      	mov	r0, r8
 8011d3c:	f7ff fd02 	bl	8011744 <ecp_modp>
 8011d40:	4604      	mov	r4, r0
 8011d42:	bb48      	cbnz	r0, 8011d98 <ecp_normalize_jac+0xcc>
 8011d44:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011d46:	f108 080c 	add.w	r8, r8, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011d4a:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011d4c:	aa03      	add	r2, sp, #12
 8011d4e:	4641      	mov	r1, r8
 8011d50:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011d52:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011d54:	f7fd fa67 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011d58:	4604      	mov	r4, r0
 8011d5a:	b9e8      	cbnz	r0, 8011d98 <ecp_normalize_jac+0xcc>
 8011d5c:	4631      	mov	r1, r6
 8011d5e:	4640      	mov	r0, r8
 8011d60:	f7ff fcf0 	bl	8011744 <ecp_modp>
 8011d64:	4604      	mov	r4, r0
 8011d66:	b9b8      	cbnz	r0, 8011d98 <ecp_normalize_jac+0xcc>
 8011d68:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011d6a:	466a      	mov	r2, sp
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011d6c:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011d6e:	4641      	mov	r1, r8
 8011d70:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011d72:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011d74:	f7fd fa57 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011d78:	4604      	mov	r4, r0
 8011d7a:	b968      	cbnz	r0, 8011d98 <ecp_normalize_jac+0xcc>
 8011d7c:	4631      	mov	r1, r6
 8011d7e:	4640      	mov	r0, r8
 8011d80:	f7ff fce0 	bl	8011744 <ecp_modp>
 8011d84:	4604      	mov	r4, r0
 8011d86:	b938      	cbnz	r0, 8011d98 <ecp_normalize_jac+0xcc>
 8011d88:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8011d8a:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011d8c:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8011d8e:	4628      	mov	r0, r5
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011d90:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8011d92:	f7fc ff1c 	bl	800ebce <mbedtls_mpi_lset>
 8011d96:	4604      	mov	r4, r0
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8011d98:	4668      	mov	r0, sp
 8011d9a:	f7fc fe3b 	bl	800ea14 <mbedtls_mpi_free>
 8011d9e:	a803      	add	r0, sp, #12
 8011da0:	f7fc fe38 	bl	800ea14 <mbedtls_mpi_free>
}
 8011da4:	4620      	mov	r0, r4
 8011da6:	b006      	add	sp, #24
 8011da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dac:	200010c8 	.word	0x200010c8

08011db0 <ecp_normalize_jac_many>:
{
 8011db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( t_len < 2 )
 8011db4:	2a01      	cmp	r2, #1
{
 8011db6:	b08d      	sub	sp, #52	; 0x34
 8011db8:	4605      	mov	r5, r0
 8011dba:	4688      	mov	r8, r1
 8011dbc:	4617      	mov	r7, r2
    if( t_len < 2 )
 8011dbe:	d807      	bhi.n	8011dd0 <ecp_normalize_jac_many+0x20>
        return( ecp_normalize_jac( grp, *T ) );
 8011dc0:	6809      	ldr	r1, [r1, #0]
 8011dc2:	f7ff ff83 	bl	8011ccc <ecp_normalize_jac>
 8011dc6:	4683      	mov	fp, r0
}
 8011dc8:	4658      	mov	r0, fp
 8011dca:	b00d      	add	sp, #52	; 0x34
 8011dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )
 8011dd0:	4b8f      	ldr	r3, [pc, #572]	; (8012010 <ecp_normalize_jac_many+0x260>)
 8011dd2:	210c      	movs	r1, #12
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	4610      	mov	r0, r2
 8011dd8:	4798      	blx	r3
 8011dda:	4606      	mov	r6, r0
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	f000 8114 	beq.w	801200a <ecp_normalize_jac_many+0x25a>
    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8011de2:	a803      	add	r0, sp, #12
 8011de4:	f7fc fe0f 	bl	800ea06 <mbedtls_mpi_init>
 8011de8:	a806      	add	r0, sp, #24
 8011dea:	f7fc fe0c 	bl	800ea06 <mbedtls_mpi_init>
 8011dee:	a809      	add	r0, sp, #36	; 0x24
 8011df0:	f7fc fe09 	bl	800ea06 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 8011df4:	f8d8 1000 	ldr.w	r1, [r8]
 8011df8:	4630      	mov	r0, r6
 8011dfa:	3118      	adds	r1, #24
 8011dfc:	f7fc fe8a 	bl	800eb14 <mbedtls_mpi_copy>
 8011e00:	4683      	mov	fp, r0
 8011e02:	2800      	cmp	r0, #0
 8011e04:	d140      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
        MOD_MUL( c[i] );
 8011e06:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8012018 <ecp_normalize_jac_many+0x268>
 8011e0a:	f108 0404 	add.w	r4, r8, #4
 8011e0e:	f106 0a0c 	add.w	sl, r6, #12
 8011e12:	eb08 0887 	add.w	r8, r8, r7, lsl #2
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 8011e16:	f854 2b04 	ldr.w	r2, [r4], #4
 8011e1a:	f1aa 010c 	sub.w	r1, sl, #12
 8011e1e:	3218      	adds	r2, #24
 8011e20:	4650      	mov	r0, sl
 8011e22:	f7fd fa00 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011e26:	4683      	mov	fp, r0
 8011e28:	bb70      	cbnz	r0, 8011e88 <ecp_normalize_jac_many+0xd8>
        MOD_MUL( c[i] );
 8011e2a:	4629      	mov	r1, r5
 8011e2c:	4650      	mov	r0, sl
 8011e2e:	f7ff fc89 	bl	8011744 <ecp_modp>
 8011e32:	4683      	mov	fp, r0
 8011e34:	bb40      	cbnz	r0, 8011e88 <ecp_normalize_jac_many+0xd8>
 8011e36:	f8d9 3004 	ldr.w	r3, [r9, #4]
    for( i = 1; i < t_len; i++ )
 8011e3a:	4544      	cmp	r4, r8
        MOD_MUL( c[i] );
 8011e3c:	f103 0301 	add.w	r3, r3, #1
 8011e40:	f8c9 3004 	str.w	r3, [r9, #4]
    for( i = 1; i < t_len; i++ )
 8011e44:	f10a 0a0c 	add.w	sl, sl, #12
 8011e48:	d1e5      	bne.n	8011e16 <ecp_normalize_jac_many+0x66>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );
 8011e4a:	f04f 080c 	mov.w	r8, #12
 8011e4e:	fb08 6107 	mla	r1, r8, r7, r6
 8011e52:	1d2a      	adds	r2, r5, #4
 8011e54:	390c      	subs	r1, #12
 8011e56:	eb0d 0008 	add.w	r0, sp, r8
 8011e5a:	f7fd ff0f 	bl	800fc7c <mbedtls_mpi_inv_mod>
 8011e5e:	4683      	mov	fp, r0
 8011e60:	b990      	cbnz	r0, 8011e88 <ecp_normalize_jac_many+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011e62:	f8cd 8000 	str.w	r8, [sp]
 8011e66:	f1a6 030c 	sub.w	r3, r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011e6a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8012018 <ecp_normalize_jac_many+0x268>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011e6e:	9301      	str	r3, [sp, #4]
    for( i = t_len - 1; ; i-- )
 8011e70:	f107 3aff 	add.w	sl, r7, #4294967295
        if( i == 0 ) {
 8011e74:	f1ba 0f00 	cmp.w	sl, #0
 8011e78:	d11e      	bne.n	8011eb8 <ecp_normalize_jac_many+0x108>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 8011e7a:	a903      	add	r1, sp, #12
 8011e7c:	a806      	add	r0, sp, #24
 8011e7e:	f7fc fe49 	bl	800eb14 <mbedtls_mpi_copy>
 8011e82:	4683      	mov	fp, r0
 8011e84:	2800      	cmp	r0, #0
 8011e86:	d044      	beq.n	8011f12 <ecp_normalize_jac_many+0x162>
    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8011e88:	a803      	add	r0, sp, #12
 8011e8a:	f7fc fdc3 	bl	800ea14 <mbedtls_mpi_free>
 8011e8e:	a806      	add	r0, sp, #24
 8011e90:	f7fc fdc0 	bl	800ea14 <mbedtls_mpi_free>
 8011e94:	a809      	add	r0, sp, #36	; 0x24
 8011e96:	f7fc fdbd 	bl	800ea14 <mbedtls_mpi_free>
    for( i = 0; i < t_len; i++ )
 8011e9a:	220c      	movs	r2, #12
 8011e9c:	4634      	mov	r4, r6
 8011e9e:	fb02 6707 	mla	r7, r2, r7, r6
        mbedtls_mpi_free( &c[i] );
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	340c      	adds	r4, #12
 8011ea6:	f7fc fdb5 	bl	800ea14 <mbedtls_mpi_free>
    for( i = 0; i < t_len; i++ )
 8011eaa:	42a7      	cmp	r7, r4
 8011eac:	d1f9      	bne.n	8011ea2 <ecp_normalize_jac_many+0xf2>
    mbedtls_free( c );
 8011eae:	4a59      	ldr	r2, [pc, #356]	; (8012014 <ecp_normalize_jac_many+0x264>)
 8011eb0:	4630      	mov	r0, r6
 8011eb2:	6812      	ldr	r2, [r2, #0]
 8011eb4:	4790      	blx	r2
    return( ret );
 8011eb6:	e787      	b.n	8011dc8 <ecp_normalize_jac_many+0x18>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011eb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011ebc:	a903      	add	r1, sp, #12
 8011ebe:	fb03 220a 	mla	r2, r3, sl, r2
 8011ec2:	a806      	add	r0, sp, #24
 8011ec4:	f7fd f9af 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011ec8:	4683      	mov	fp, r0
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	d1dc      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
 8011ece:	4629      	mov	r1, r5
 8011ed0:	a806      	add	r0, sp, #24
 8011ed2:	f7ff fc37 	bl	8011744 <ecp_modp>
 8011ed6:	4683      	mov	fp, r0
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d1d5      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
 8011edc:	f8d9 3004 	ldr.w	r3, [r9, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011ee0:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8011ee4:	a903      	add	r1, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011ee6:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011ee8:	3218      	adds	r2, #24
 8011eea:	4608      	mov	r0, r1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011eec:	f8c9 3004 	str.w	r3, [r9, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011ef0:	f7fd f999 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011ef4:	4683      	mov	fp, r0
 8011ef6:	2800      	cmp	r0, #0
 8011ef8:	d1c6      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
 8011efa:	4629      	mov	r1, r5
 8011efc:	a803      	add	r0, sp, #12
 8011efe:	f7ff fc21 	bl	8011744 <ecp_modp>
 8011f02:	4683      	mov	fp, r0
 8011f04:	2800      	cmp	r0, #0
 8011f06:	d1bf      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
 8011f08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	f8c9 3004 	str.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011f12:	aa06      	add	r2, sp, #24
 8011f14:	4611      	mov	r1, r2
 8011f16:	a809      	add	r0, sp, #36	; 0x24
 8011f18:	f7fd f985 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011f1c:	4683      	mov	fp, r0
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d1b2      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
 8011f22:	4629      	mov	r1, r5
 8011f24:	a809      	add	r0, sp, #36	; 0x24
 8011f26:	f7ff fc0d 	bl	8011744 <ecp_modp>
 8011f2a:	4683      	mov	fp, r0
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d1ab      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
 8011f30:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011f34:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011f38:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011f3a:	aa09      	add	r2, sp, #36	; 0x24
 8011f3c:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011f3e:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011f42:	f7fd f970 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011f46:	4683      	mov	fp, r0
 8011f48:	2800      	cmp	r0, #0
 8011f4a:	d19d      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
 8011f4c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011f50:	4629      	mov	r1, r5
 8011f52:	f7ff fbf7 	bl	8011744 <ecp_modp>
 8011f56:	4683      	mov	fp, r0
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d195      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011f5c:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011f60:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011f64:	310c      	adds	r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011f66:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011f68:	aa09      	add	r2, sp, #36	; 0x24
 8011f6a:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011f6c:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011f70:	f7fd f959 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011f74:	4683      	mov	fp, r0
 8011f76:	2800      	cmp	r0, #0
 8011f78:	d186      	bne.n	8011e88 <ecp_normalize_jac_many+0xd8>
 8011f7a:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011f7e:	4629      	mov	r1, r5
 8011f80:	300c      	adds	r0, #12
 8011f82:	f7ff fbdf 	bl	8011744 <ecp_modp>
 8011f86:	4683      	mov	fp, r0
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	f47f af7d 	bne.w	8011e88 <ecp_normalize_jac_many+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011f8e:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011f92:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011f96:	310c      	adds	r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011f98:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011f9a:	aa06      	add	r2, sp, #24
 8011f9c:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011f9e:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011fa2:	f7fd f940 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8011fa6:	4683      	mov	fp, r0
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	f47f af6d 	bne.w	8011e88 <ecp_normalize_jac_many+0xd8>
 8011fae:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011fb2:	4629      	mov	r1, r5
 8011fb4:	300c      	adds	r0, #12
 8011fb6:	f7ff fbc5 	bl	8011744 <ecp_modp>
 8011fba:	4683      	mov	fp, r0
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	f47f af63 	bne.w	8011e88 <ecp_normalize_jac_many+0xd8>
 8011fc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8011fc6:	68a9      	ldr	r1, [r5, #8]
 8011fc8:	f854 0c04 	ldr.w	r0, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011fcc:	3301      	adds	r3, #1
 8011fce:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8011fd2:	f7fc fd67 	bl	800eaa4 <mbedtls_mpi_shrink>
 8011fd6:	4683      	mov	fp, r0
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	f47f af55 	bne.w	8011e88 <ecp_normalize_jac_many+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 8011fde:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011fe2:	68a9      	ldr	r1, [r5, #8]
 8011fe4:	300c      	adds	r0, #12
 8011fe6:	f7fc fd5d 	bl	800eaa4 <mbedtls_mpi_shrink>
 8011fea:	4683      	mov	fp, r0
 8011fec:	2800      	cmp	r0, #0
 8011fee:	f47f af4b 	bne.w	8011e88 <ecp_normalize_jac_many+0xd8>
        mbedtls_mpi_free( &T[i]->Z );
 8011ff2:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8011ff6:	3018      	adds	r0, #24
 8011ff8:	f7fc fd0c 	bl	800ea14 <mbedtls_mpi_free>
        if( i == 0 )
 8011ffc:	f1ba 0f00 	cmp.w	sl, #0
 8012000:	f43f af42 	beq.w	8011e88 <ecp_normalize_jac_many+0xd8>
    for( i = t_len - 1; ; i-- )
 8012004:	f10a 3aff 	add.w	sl, sl, #4294967295
        if( i == 0 ) {
 8012008:	e734      	b.n	8011e74 <ecp_normalize_jac_many+0xc4>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 801200a:	f8df b010 	ldr.w	fp, [pc, #16]	; 801201c <ecp_normalize_jac_many+0x26c>
 801200e:	e6db      	b.n	8011dc8 <ecp_normalize_jac_many+0x18>
 8012010:	200005a0 	.word	0x200005a0
 8012014:	200005a4 	.word	0x200005a4
 8012018:	200010c8 	.word	0x200010c8
 801201c:	ffffb280 	.word	0xffffb280

08012020 <mbedtls_ecp_point_init.part.0>:
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
 8012020:	b510      	push	{r4, lr}
 8012022:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
 8012024:	f7fc fcef 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 8012028:	f104 000c 	add.w	r0, r4, #12
 801202c:	f7fc fceb 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 8012030:	f104 0018 	add.w	r0, r4, #24
}
 8012034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
 8012038:	f7fc bce5 	b.w	800ea06 <mbedtls_mpi_init>

0801203c <mbedtls_ecp_point_free.part.0>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
 801203c:	b510      	push	{r4, lr}
 801203e:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
 8012040:	f7fc fce8 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 8012044:	f104 000c 	add.w	r0, r4, #12
 8012048:	f7fc fce4 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 801204c:	f104 0018 	add.w	r0, r4, #24
}
 8012050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
 8012054:	f7fc bcde 	b.w	800ea14 <mbedtls_mpi_free>

08012058 <mbedtls_ecp_grp_id_list>:
    if( ! init_done )
 8012058:	4a0a      	ldr	r2, [pc, #40]	; (8012084 <mbedtls_ecp_grp_id_list+0x2c>)
 801205a:	6893      	ldr	r3, [r2, #8]
{
 801205c:	b530      	push	{r4, r5, lr}
    if( ! init_done )
 801205e:	b95b      	cbnz	r3, 8012078 <mbedtls_ecp_grp_id_list+0x20>
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8012060:	4c09      	ldr	r4, [pc, #36]	; (8012088 <mbedtls_ecp_grp_id_list+0x30>)
 8012062:	f102 000c 	add.w	r0, r2, #12
 8012066:	250c      	movs	r5, #12
 8012068:	fb05 f103 	mul.w	r1, r5, r3
 801206c:	5d09      	ldrb	r1, [r1, r4]
        for( curve_info = mbedtls_ecp_curve_list();
 801206e:	b929      	cbnz	r1, 801207c <mbedtls_ecp_grp_id_list+0x24>
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
 8012070:	4413      	add	r3, r2
 8012072:	7319      	strb	r1, [r3, #12]
        init_done = 1;
 8012074:	2301      	movs	r3, #1
 8012076:	6093      	str	r3, [r2, #8]
}
 8012078:	4804      	ldr	r0, [pc, #16]	; (801208c <mbedtls_ecp_grp_id_list+0x34>)
 801207a:	bd30      	pop	{r4, r5, pc}
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 801207c:	f800 1b01 	strb.w	r1, [r0], #1
 8012080:	3301      	adds	r3, #1
             curve_info++ )
 8012082:	e7f1      	b.n	8012068 <mbedtls_ecp_grp_id_list+0x10>
 8012084:	200010c8 	.word	0x200010c8
 8012088:	0802acd0 	.word	0x0802acd0
 801208c:	200010d4 	.word	0x200010d4

08012090 <mbedtls_ecp_curve_info_from_grp_id>:
{
 8012090:	4602      	mov	r2, r0
    for( curve_info = mbedtls_ecp_curve_list();
 8012092:	4804      	ldr	r0, [pc, #16]	; (80120a4 <mbedtls_ecp_curve_info_from_grp_id+0x14>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8012094:	7803      	ldrb	r3, [r0, #0]
    for( curve_info = mbedtls_ecp_curve_list();
 8012096:	b90b      	cbnz	r3, 801209c <mbedtls_ecp_curve_info_from_grp_id+0xc>
    return( NULL );
 8012098:	4618      	mov	r0, r3
}
 801209a:	4770      	bx	lr
        if( curve_info->grp_id == grp_id )
 801209c:	4293      	cmp	r3, r2
 801209e:	d0fc      	beq.n	801209a <mbedtls_ecp_curve_info_from_grp_id+0xa>
         curve_info++ )
 80120a0:	300c      	adds	r0, #12
 80120a2:	e7f7      	b.n	8012094 <mbedtls_ecp_curve_info_from_grp_id+0x4>
 80120a4:	0802acd0 	.word	0x0802acd0

080120a8 <mbedtls_ecp_curve_info_from_tls_id>:
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 80120a8:	4905      	ldr	r1, [pc, #20]	; (80120c0 <mbedtls_ecp_curve_info_from_tls_id+0x18>)
{
 80120aa:	4602      	mov	r2, r0
        if( curve_info->tls_id == tls_id )
 80120ac:	884b      	ldrh	r3, [r1, #2]
 80120ae:	4293      	cmp	r3, r2
 80120b0:	4608      	mov	r0, r1
 80120b2:	d003      	beq.n	80120bc <mbedtls_ecp_curve_info_from_tls_id+0x14>
    for( curve_info = mbedtls_ecp_curve_list();
 80120b4:	7b00      	ldrb	r0, [r0, #12]
 80120b6:	310c      	adds	r1, #12
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d1f7      	bne.n	80120ac <mbedtls_ecp_curve_info_from_tls_id+0x4>
}
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop
 80120c0:	0802acd0 	.word	0x0802acd0

080120c4 <mbedtls_ecp_point_init>:
    if( pt == NULL )
 80120c4:	b108      	cbz	r0, 80120ca <mbedtls_ecp_point_init+0x6>
 80120c6:	f7ff bfab 	b.w	8012020 <mbedtls_ecp_point_init.part.0>
}
 80120ca:	4770      	bx	lr

080120cc <mbedtls_ecp_group_init>:
    if( grp == NULL )
 80120cc:	b118      	cbz	r0, 80120d6 <mbedtls_ecp_group_init+0xa>
    memset( grp, 0, sizeof( mbedtls_ecp_group ) );
 80120ce:	227c      	movs	r2, #124	; 0x7c
 80120d0:	2100      	movs	r1, #0
 80120d2:	f010 b9fd 	b.w	80224d0 <memset>
}
 80120d6:	4770      	bx	lr

080120d8 <mbedtls_ecp_keypair_init>:
{
 80120d8:	b510      	push	{r4, lr}
    if( key == NULL )
 80120da:	4604      	mov	r4, r0
 80120dc:	b158      	cbz	r0, 80120f6 <mbedtls_ecp_keypair_init+0x1e>
    mbedtls_ecp_group_init( &key->grp );
 80120de:	f7ff fff5 	bl	80120cc <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 80120e2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80120e6:	f7fc fc8e 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 80120ea:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 80120ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
 80120f2:	f7ff bfe7 	b.w	80120c4 <mbedtls_ecp_point_init>
}
 80120f6:	bd10      	pop	{r4, pc}

080120f8 <mbedtls_ecp_point_free>:
    if( pt == NULL )
 80120f8:	b108      	cbz	r0, 80120fe <mbedtls_ecp_point_free+0x6>
 80120fa:	f7ff bf9f 	b.w	801203c <mbedtls_ecp_point_free.part.0>
}
 80120fe:	4770      	bx	lr

08012100 <mbedtls_ecp_group_free>:
{
 8012100:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
 8012102:	4604      	mov	r4, r0
 8012104:	b1e0      	cbz	r0, 8012140 <mbedtls_ecp_group_free+0x40>
    if( grp->h != 1 )
 8012106:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8012108:	2b01      	cmp	r3, #1
 801210a:	d012      	beq.n	8012132 <mbedtls_ecp_group_free+0x32>
        mbedtls_mpi_free( &grp->P );
 801210c:	3004      	adds	r0, #4
 801210e:	f7fc fc81 	bl	800ea14 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 8012112:	f104 0010 	add.w	r0, r4, #16
 8012116:	f7fc fc7d 	bl	800ea14 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 801211a:	f104 001c 	add.w	r0, r4, #28
 801211e:	f7fc fc79 	bl	800ea14 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 8012122:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012126:	f7ff ffe7 	bl	80120f8 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 801212a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801212e:	f7fc fc71 	bl	800ea14 <mbedtls_mpi_free>
    if( grp->T != NULL )
 8012132:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8012134:	b993      	cbnz	r3, 801215c <mbedtls_ecp_group_free+0x5c>
 8012136:	f104 037c 	add.w	r3, r4, #124	; 0x7c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801213a:	2200      	movs	r2, #0
 801213c:	429c      	cmp	r4, r3
 801213e:	d110      	bne.n	8012162 <mbedtls_ecp_group_free+0x62>
}
 8012140:	bd70      	pop	{r4, r5, r6, pc}
            mbedtls_ecp_point_free( &grp->T[i] );
 8012142:	fb06 0005 	mla	r0, r6, r5, r0
 8012146:	f7ff ffd7 	bl	80120f8 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 801214a:	3501      	adds	r5, #1
 801214c:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
 8012150:	42ab      	cmp	r3, r5
 8012152:	d8f6      	bhi.n	8012142 <mbedtls_ecp_group_free+0x42>
        mbedtls_free( grp->T );
 8012154:	4b04      	ldr	r3, [pc, #16]	; (8012168 <mbedtls_ecp_group_free+0x68>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	4798      	blx	r3
 801215a:	e7ec      	b.n	8012136 <mbedtls_ecp_group_free+0x36>
        for( i = 0; i < grp->T_size; i++ )
 801215c:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
 801215e:	2624      	movs	r6, #36	; 0x24
 8012160:	e7f4      	b.n	801214c <mbedtls_ecp_group_free+0x4c>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8012162:	f804 2b01 	strb.w	r2, [r4], #1
 8012166:	e7e9      	b.n	801213c <mbedtls_ecp_group_free+0x3c>
 8012168:	200005a4 	.word	0x200005a4

0801216c <mbedtls_ecp_keypair_free>:
{
 801216c:	b510      	push	{r4, lr}
    if( key == NULL )
 801216e:	4604      	mov	r4, r0
 8012170:	b158      	cbz	r0, 801218a <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
 8012172:	f7ff ffc5 	bl	8012100 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 8012176:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801217a:	f7fc fc4b 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 801217e:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 8012182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
 8012186:	f7ff bfb7 	b.w	80120f8 <mbedtls_ecp_point_free>
}
 801218a:	bd10      	pop	{r4, pc}

0801218c <mbedtls_ecp_copy>:
{
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	4604      	mov	r4, r0
 8012190:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 8012192:	f7fc fcbf 	bl	800eb14 <mbedtls_mpi_copy>
 8012196:	b970      	cbnz	r0, 80121b6 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8012198:	f105 010c 	add.w	r1, r5, #12
 801219c:	f104 000c 	add.w	r0, r4, #12
 80121a0:	f7fc fcb8 	bl	800eb14 <mbedtls_mpi_copy>
 80121a4:	b938      	cbnz	r0, 80121b6 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 80121a6:	f105 0118 	add.w	r1, r5, #24
 80121aa:	f104 0018 	add.w	r0, r4, #24
}
 80121ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 80121b2:	f7fc bcaf 	b.w	800eb14 <mbedtls_mpi_copy>
}
 80121b6:	bd38      	pop	{r3, r4, r5, pc}

080121b8 <mbedtls_ecp_group_copy>:
    return mbedtls_ecp_group_load( dst, src->id );
 80121b8:	7809      	ldrb	r1, [r1, #0]
 80121ba:	f001 bdc9 	b.w	8013d50 <mbedtls_ecp_group_load>

080121be <mbedtls_ecp_set_zero>:
{
 80121be:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 80121c0:	2101      	movs	r1, #1
{
 80121c2:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 80121c4:	f7fc fd03 	bl	800ebce <mbedtls_mpi_lset>
 80121c8:	b960      	cbnz	r0, 80121e4 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 80121ca:	2101      	movs	r1, #1
 80121cc:	f104 000c 	add.w	r0, r4, #12
 80121d0:	f7fc fcfd 	bl	800ebce <mbedtls_mpi_lset>
 80121d4:	b930      	cbnz	r0, 80121e4 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 80121d6:	4601      	mov	r1, r0
 80121d8:	f104 0018 	add.w	r0, r4, #24
}
 80121dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 80121e0:	f7fc bcf5 	b.w	800ebce <mbedtls_mpi_lset>
}
 80121e4:	bd10      	pop	{r4, pc}
	...

080121e8 <ecp_add_mixed>:
{
 80121e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    add_count++;
 80121ec:	4e0c      	ldr	r6, [pc, #48]	; (8012220 <ecp_add_mixed+0x38>)
{
 80121ee:	469a      	mov	sl, r3
    add_count++;
 80121f0:	6973      	ldr	r3, [r6, #20]
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80121f2:	f102 0918 	add.w	r9, r2, #24
{
 80121f6:	b097      	sub	sp, #92	; 0x5c
 80121f8:	4607      	mov	r7, r0
 80121fa:	460d      	mov	r5, r1
    add_count++;
 80121fc:	3301      	adds	r3, #1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80121fe:	2100      	movs	r1, #0
 8012200:	4648      	mov	r0, r9
{
 8012202:	4690      	mov	r8, r2
    add_count++;
 8012204:	6173      	str	r3, [r6, #20]
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8012206:	f7fc ff07 	bl	800f018 <mbedtls_mpi_cmp_int>
 801220a:	b958      	cbnz	r0, 8012224 <ecp_add_mixed+0x3c>
        return( mbedtls_ecp_copy( R, Q ) );
 801220c:	4651      	mov	r1, sl
        return( mbedtls_ecp_copy( R, P ) );
 801220e:	4628      	mov	r0, r5
 8012210:	f7ff ffbc 	bl	801218c <mbedtls_ecp_copy>
 8012214:	4604      	mov	r4, r0
}
 8012216:	4620      	mov	r0, r4
 8012218:	b017      	add	sp, #92	; 0x5c
 801221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221e:	bf00      	nop
 8012220:	200010c8 	.word	0x200010c8
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 8012224:	f8da 3020 	ldr.w	r3, [sl, #32]
 8012228:	2b00      	cmp	r3, #0
 801222a:	f040 8170 	bne.w	801250e <ecp_add_mixed+0x326>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 801222e:	a801      	add	r0, sp, #4
 8012230:	f7fc fbe9 	bl	800ea06 <mbedtls_mpi_init>
 8012234:	a804      	add	r0, sp, #16
 8012236:	f7fc fbe6 	bl	800ea06 <mbedtls_mpi_init>
 801223a:	a807      	add	r0, sp, #28
 801223c:	f7fc fbe3 	bl	800ea06 <mbedtls_mpi_init>
 8012240:	a80a      	add	r0, sp, #40	; 0x28
 8012242:	f7fc fbe0 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8012246:	a80d      	add	r0, sp, #52	; 0x34
 8012248:	f7fc fbdd 	bl	800ea06 <mbedtls_mpi_init>
 801224c:	a810      	add	r0, sp, #64	; 0x40
 801224e:	f7fc fbda 	bl	800ea06 <mbedtls_mpi_init>
 8012252:	a813      	add	r0, sp, #76	; 0x4c
 8012254:	f7fc fbd7 	bl	800ea06 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 8012258:	464a      	mov	r2, r9
 801225a:	4649      	mov	r1, r9
 801225c:	a801      	add	r0, sp, #4
 801225e:	f7fc ffe2 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8012262:	4604      	mov	r4, r0
 8012264:	2800      	cmp	r0, #0
 8012266:	f040 8179 	bne.w	801255c <ecp_add_mixed+0x374>
 801226a:	4639      	mov	r1, r7
 801226c:	a801      	add	r0, sp, #4
 801226e:	f7ff fa69 	bl	8011744 <ecp_modp>
 8012272:	4604      	mov	r4, r0
 8012274:	2800      	cmp	r0, #0
 8012276:	f040 8171 	bne.w	801255c <ecp_add_mixed+0x374>
 801227a:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 801227c:	464a      	mov	r2, r9
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 801227e:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8012280:	a901      	add	r1, sp, #4
 8012282:	a804      	add	r0, sp, #16
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 8012284:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8012286:	f7fc ffce 	bl	800f226 <mbedtls_mpi_mul_mpi>
 801228a:	4604      	mov	r4, r0
 801228c:	2800      	cmp	r0, #0
 801228e:	f040 8165 	bne.w	801255c <ecp_add_mixed+0x374>
 8012292:	4639      	mov	r1, r7
 8012294:	a804      	add	r0, sp, #16
 8012296:	f7ff fa55 	bl	8011744 <ecp_modp>
 801229a:	4604      	mov	r4, r0
 801229c:	2800      	cmp	r0, #0
 801229e:	f040 815d 	bne.w	801255c <ecp_add_mixed+0x374>
 80122a2:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 80122a4:	a901      	add	r1, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 80122a6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 80122a8:	4652      	mov	r2, sl
 80122aa:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 80122ac:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 80122ae:	f7fc ffba 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80122b2:	4604      	mov	r4, r0
 80122b4:	2800      	cmp	r0, #0
 80122b6:	f040 8151 	bne.w	801255c <ecp_add_mixed+0x374>
 80122ba:	4639      	mov	r1, r7
 80122bc:	a801      	add	r0, sp, #4
 80122be:	f7ff fa41 	bl	8011744 <ecp_modp>
 80122c2:	4604      	mov	r4, r0
 80122c4:	2800      	cmp	r0, #0
 80122c6:	f040 8149 	bne.w	801255c <ecp_add_mixed+0x374>
 80122ca:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 80122cc:	a904      	add	r1, sp, #16
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 80122ce:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 80122d0:	f10a 020c 	add.w	r2, sl, #12
 80122d4:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 80122d6:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 80122d8:	f7fc ffa5 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80122dc:	4604      	mov	r4, r0
 80122de:	2800      	cmp	r0, #0
 80122e0:	f040 813c 	bne.w	801255c <ecp_add_mixed+0x374>
 80122e4:	4639      	mov	r1, r7
 80122e6:	a804      	add	r0, sp, #16
 80122e8:	f7ff fa2c 	bl	8011744 <ecp_modp>
 80122ec:	4604      	mov	r4, r0
 80122ee:	2800      	cmp	r0, #0
 80122f0:	f040 8134 	bne.w	801255c <ecp_add_mixed+0x374>
 80122f4:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 80122f6:	a901      	add	r1, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 80122f8:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 80122fa:	4642      	mov	r2, r8
 80122fc:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 80122fe:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8012300:	f7fc ff58 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 8012304:	4604      	mov	r4, r0
 8012306:	2800      	cmp	r0, #0
 8012308:	f040 8128 	bne.w	801255c <ecp_add_mixed+0x374>
 801230c:	f107 0a04 	add.w	sl, r7, #4
 8012310:	9b01      	ldr	r3, [sp, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	f2c0 8112 	blt.w	801253c <ecp_add_mixed+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 8012318:	a904      	add	r1, sp, #16
 801231a:	f108 0a0c 	add.w	sl, r8, #12
 801231e:	4652      	mov	r2, sl
 8012320:	4608      	mov	r0, r1
 8012322:	f7fc ff47 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 8012326:	4604      	mov	r4, r0
 8012328:	2800      	cmp	r0, #0
 801232a:	f040 8117 	bne.w	801255c <ecp_add_mixed+0x374>
 801232e:	f107 0b04 	add.w	fp, r7, #4
 8012332:	9b04      	ldr	r3, [sp, #16]
 8012334:	2b00      	cmp	r3, #0
 8012336:	f2c0 8127 	blt.w	8012588 <ecp_add_mixed+0x3a0>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 801233a:	2100      	movs	r1, #0
 801233c:	a801      	add	r0, sp, #4
 801233e:	f7fc fe6b 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012342:	4601      	mov	r1, r0
 8012344:	2800      	cmp	r0, #0
 8012346:	f000 8130 	beq.w	80125aa <ecp_add_mixed+0x3c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 801234a:	aa01      	add	r2, sp, #4
 801234c:	4649      	mov	r1, r9
 801234e:	a813      	add	r0, sp, #76	; 0x4c
 8012350:	f7fc ff69 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8012354:	4604      	mov	r4, r0
 8012356:	2800      	cmp	r0, #0
 8012358:	f040 8100 	bne.w	801255c <ecp_add_mixed+0x374>
 801235c:	4639      	mov	r1, r7
 801235e:	a813      	add	r0, sp, #76	; 0x4c
 8012360:	f7ff f9f0 	bl	8011744 <ecp_modp>
 8012364:	4604      	mov	r4, r0
 8012366:	2800      	cmp	r0, #0
 8012368:	f040 80f8 	bne.w	801255c <ecp_add_mixed+0x374>
 801236c:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 801236e:	aa01      	add	r2, sp, #4
 8012370:	f10d 091c 	add.w	r9, sp, #28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 8012374:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 8012376:	4611      	mov	r1, r2
 8012378:	4648      	mov	r0, r9
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 801237a:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 801237c:	f7fc ff53 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8012380:	4604      	mov	r4, r0
 8012382:	2800      	cmp	r0, #0
 8012384:	f040 80ea 	bne.w	801255c <ecp_add_mixed+0x374>
 8012388:	4639      	mov	r1, r7
 801238a:	4648      	mov	r0, r9
 801238c:	f7ff f9da 	bl	8011744 <ecp_modp>
 8012390:	4604      	mov	r4, r0
 8012392:	2800      	cmp	r0, #0
 8012394:	f040 80e2 	bne.w	801255c <ecp_add_mixed+0x374>
 8012398:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 801239a:	aa01      	add	r2, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 801239c:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 801239e:	4649      	mov	r1, r9
 80123a0:	a80a      	add	r0, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 80123a2:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 80123a4:	f7fc ff3f 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80123a8:	4604      	mov	r4, r0
 80123aa:	2800      	cmp	r0, #0
 80123ac:	f040 80d6 	bne.w	801255c <ecp_add_mixed+0x374>
 80123b0:	4639      	mov	r1, r7
 80123b2:	a80a      	add	r0, sp, #40	; 0x28
 80123b4:	f7ff f9c6 	bl	8011744 <ecp_modp>
 80123b8:	4604      	mov	r4, r0
 80123ba:	2800      	cmp	r0, #0
 80123bc:	f040 80ce 	bne.w	801255c <ecp_add_mixed+0x374>
 80123c0:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 80123c2:	4642      	mov	r2, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 80123c4:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 80123c6:	4649      	mov	r1, r9
 80123c8:	4648      	mov	r0, r9
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 80123ca:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 80123cc:	f7fc ff2b 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80123d0:	4604      	mov	r4, r0
 80123d2:	2800      	cmp	r0, #0
 80123d4:	f040 80c2 	bne.w	801255c <ecp_add_mixed+0x374>
 80123d8:	4639      	mov	r1, r7
 80123da:	4648      	mov	r0, r9
 80123dc:	f7ff f9b2 	bl	8011744 <ecp_modp>
 80123e0:	4604      	mov	r4, r0
 80123e2:	2800      	cmp	r0, #0
 80123e4:	f040 80ba 	bne.w	801255c <ecp_add_mixed+0x374>
 80123e8:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 80123ea:	2202      	movs	r2, #2
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 80123ec:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 80123ee:	4649      	mov	r1, r9
 80123f0:	a801      	add	r0, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 80123f2:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 80123f4:	f7fc ff7b 	bl	800f2ee <mbedtls_mpi_mul_int>
 80123f8:	4604      	mov	r4, r0
 80123fa:	2800      	cmp	r0, #0
 80123fc:	f040 80ae 	bne.w	801255c <ecp_add_mixed+0x374>
 8012400:	f107 0804 	add.w	r8, r7, #4
 8012404:	4641      	mov	r1, r8
 8012406:	a801      	add	r0, sp, #4
 8012408:	f7fc fdc3 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 801240c:	2800      	cmp	r0, #0
 801240e:	f280 80db 	bge.w	80125c8 <ecp_add_mixed+0x3e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 8012412:	aa04      	add	r2, sp, #16
 8012414:	4611      	mov	r1, r2
 8012416:	a80d      	add	r0, sp, #52	; 0x34
 8012418:	f7fc ff05 	bl	800f226 <mbedtls_mpi_mul_mpi>
 801241c:	4604      	mov	r4, r0
 801241e:	2800      	cmp	r0, #0
 8012420:	f040 809c 	bne.w	801255c <ecp_add_mixed+0x374>
 8012424:	4639      	mov	r1, r7
 8012426:	a80d      	add	r0, sp, #52	; 0x34
 8012428:	f7ff f98c 	bl	8011744 <ecp_modp>
 801242c:	4604      	mov	r4, r0
 801242e:	2800      	cmp	r0, #0
 8012430:	f040 8094 	bne.w	801255c <ecp_add_mixed+0x374>
 8012434:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8012436:	a90d      	add	r1, sp, #52	; 0x34
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 8012438:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 801243a:	aa01      	add	r2, sp, #4
 801243c:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 801243e:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8012440:	f7fc feb8 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 8012444:	4604      	mov	r4, r0
 8012446:	2800      	cmp	r0, #0
 8012448:	f040 8088 	bne.w	801255c <ecp_add_mixed+0x374>
 801244c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801244e:	2b00      	cmp	r3, #0
 8012450:	f2c0 80c4 	blt.w	80125dc <ecp_add_mixed+0x3f4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 8012454:	a90d      	add	r1, sp, #52	; 0x34
 8012456:	aa0a      	add	r2, sp, #40	; 0x28
 8012458:	4608      	mov	r0, r1
 801245a:	f7fc feab 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 801245e:	4604      	mov	r4, r0
 8012460:	2800      	cmp	r0, #0
 8012462:	d17b      	bne.n	801255c <ecp_add_mixed+0x374>
 8012464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012466:	2b00      	cmp	r3, #0
 8012468:	f2c0 80c5 	blt.w	80125f6 <ecp_add_mixed+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 801246c:	aa0d      	add	r2, sp, #52	; 0x34
 801246e:	4649      	mov	r1, r9
 8012470:	4648      	mov	r0, r9
 8012472:	f7fc fe9f 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 8012476:	4604      	mov	r4, r0
 8012478:	2800      	cmp	r0, #0
 801247a:	d16f      	bne.n	801255c <ecp_add_mixed+0x374>
 801247c:	464e      	mov	r6, r9
 801247e:	9b07      	ldr	r3, [sp, #28]
 8012480:	2b00      	cmp	r3, #0
 8012482:	f2c0 80c5 	blt.w	8012610 <ecp_add_mixed+0x428>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 8012486:	aa04      	add	r2, sp, #16
 8012488:	4649      	mov	r1, r9
 801248a:	4648      	mov	r0, r9
 801248c:	f7fc fecb 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8012490:	4604      	mov	r4, r0
 8012492:	2800      	cmp	r0, #0
 8012494:	d162      	bne.n	801255c <ecp_add_mixed+0x374>
 8012496:	4639      	mov	r1, r7
 8012498:	4648      	mov	r0, r9
 801249a:	f7ff f953 	bl	8011744 <ecp_modp>
 801249e:	4604      	mov	r4, r0
 80124a0:	2800      	cmp	r0, #0
 80124a2:	d15b      	bne.n	801255c <ecp_add_mixed+0x374>
 80124a4:	4e69      	ldr	r6, [pc, #420]	; (801264c <ecp_add_mixed+0x464>)
 80124a6:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80124a8:	a90a      	add	r1, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 80124aa:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80124ac:	4652      	mov	r2, sl
 80124ae:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 80124b0:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80124b2:	f7fc feb8 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80124b6:	4604      	mov	r4, r0
 80124b8:	2800      	cmp	r0, #0
 80124ba:	d14f      	bne.n	801255c <ecp_add_mixed+0x374>
 80124bc:	4639      	mov	r1, r7
 80124be:	a80a      	add	r0, sp, #40	; 0x28
 80124c0:	f7ff f940 	bl	8011744 <ecp_modp>
 80124c4:	4604      	mov	r4, r0
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d148      	bne.n	801255c <ecp_add_mixed+0x374>
 80124ca:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 80124cc:	aa0a      	add	r2, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80124ce:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 80124d0:	4649      	mov	r1, r9
 80124d2:	a810      	add	r0, sp, #64	; 0x40
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80124d4:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 80124d6:	f7fc fe6d 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 80124da:	4604      	mov	r4, r0
 80124dc:	2800      	cmp	r0, #0
 80124de:	d13d      	bne.n	801255c <ecp_add_mixed+0x374>
 80124e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	f2c0 80a5 	blt.w	8012632 <ecp_add_mixed+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 80124e8:	a90d      	add	r1, sp, #52	; 0x34
 80124ea:	4628      	mov	r0, r5
 80124ec:	f7fc fb12 	bl	800eb14 <mbedtls_mpi_copy>
 80124f0:	4604      	mov	r4, r0
 80124f2:	bb98      	cbnz	r0, 801255c <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 80124f4:	a910      	add	r1, sp, #64	; 0x40
 80124f6:	f105 000c 	add.w	r0, r5, #12
 80124fa:	f7fc fb0b 	bl	800eb14 <mbedtls_mpi_copy>
 80124fe:	4604      	mov	r4, r0
 8012500:	bb60      	cbnz	r0, 801255c <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 8012502:	a913      	add	r1, sp, #76	; 0x4c
 8012504:	f105 0018 	add.w	r0, r5, #24
 8012508:	f7fc fb04 	bl	800eb14 <mbedtls_mpi_copy>
 801250c:	e056      	b.n	80125bc <ecp_add_mixed+0x3d4>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 801250e:	f10a 0418 	add.w	r4, sl, #24
 8012512:	2100      	movs	r1, #0
 8012514:	4620      	mov	r0, r4
 8012516:	f7fc fd7f 	bl	800f018 <mbedtls_mpi_cmp_int>
 801251a:	b908      	cbnz	r0, 8012520 <ecp_add_mixed+0x338>
        return( mbedtls_ecp_copy( R, P ) );
 801251c:	4641      	mov	r1, r8
 801251e:	e676      	b.n	801220e <ecp_add_mixed+0x26>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 8012520:	f8da 3020 	ldr.w	r3, [sl, #32]
 8012524:	2b00      	cmp	r3, #0
 8012526:	f43f ae82 	beq.w	801222e <ecp_add_mixed+0x46>
 801252a:	2101      	movs	r1, #1
 801252c:	4620      	mov	r0, r4
 801252e:	f7fc fd73 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012532:	2800      	cmp	r0, #0
 8012534:	f43f ae7b 	beq.w	801222e <ecp_add_mixed+0x46>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012538:	4c45      	ldr	r4, [pc, #276]	; (8012650 <ecp_add_mixed+0x468>)
 801253a:	e66c      	b.n	8012216 <ecp_add_mixed+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 801253c:	2100      	movs	r1, #0
 801253e:	a801      	add	r0, sp, #4
 8012540:	f7fc fd6a 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012544:	2800      	cmp	r0, #0
 8012546:	f43f aee7 	beq.w	8012318 <ecp_add_mixed+0x130>
 801254a:	a901      	add	r1, sp, #4
 801254c:	4652      	mov	r2, sl
 801254e:	4608      	mov	r0, r1
 8012550:	f7fc fe0e 	bl	800f170 <mbedtls_mpi_add_mpi>
 8012554:	4604      	mov	r4, r0
 8012556:	2800      	cmp	r0, #0
 8012558:	f43f aeda 	beq.w	8012310 <ecp_add_mixed+0x128>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 801255c:	a801      	add	r0, sp, #4
 801255e:	f7fc fa59 	bl	800ea14 <mbedtls_mpi_free>
 8012562:	a804      	add	r0, sp, #16
 8012564:	f7fc fa56 	bl	800ea14 <mbedtls_mpi_free>
 8012568:	a807      	add	r0, sp, #28
 801256a:	f7fc fa53 	bl	800ea14 <mbedtls_mpi_free>
 801256e:	a80a      	add	r0, sp, #40	; 0x28
 8012570:	f7fc fa50 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8012574:	a80d      	add	r0, sp, #52	; 0x34
 8012576:	f7fc fa4d 	bl	800ea14 <mbedtls_mpi_free>
 801257a:	a810      	add	r0, sp, #64	; 0x40
 801257c:	f7fc fa4a 	bl	800ea14 <mbedtls_mpi_free>
 8012580:	a813      	add	r0, sp, #76	; 0x4c
 8012582:	f7fc fa47 	bl	800ea14 <mbedtls_mpi_free>
    return( ret );
 8012586:	e646      	b.n	8012216 <ecp_add_mixed+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 8012588:	2100      	movs	r1, #0
 801258a:	a804      	add	r0, sp, #16
 801258c:	f7fc fd44 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012590:	2800      	cmp	r0, #0
 8012592:	f43f aed2 	beq.w	801233a <ecp_add_mixed+0x152>
 8012596:	a904      	add	r1, sp, #16
 8012598:	465a      	mov	r2, fp
 801259a:	4608      	mov	r0, r1
 801259c:	f7fc fde8 	bl	800f170 <mbedtls_mpi_add_mpi>
 80125a0:	4604      	mov	r4, r0
 80125a2:	2800      	cmp	r0, #0
 80125a4:	f43f aec5 	beq.w	8012332 <ecp_add_mixed+0x14a>
 80125a8:	e7d8      	b.n	801255c <ecp_add_mixed+0x374>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 80125aa:	a804      	add	r0, sp, #16
 80125ac:	f7fc fd34 	bl	800f018 <mbedtls_mpi_cmp_int>
 80125b0:	b930      	cbnz	r0, 80125c0 <ecp_add_mixed+0x3d8>
            ret = ecp_double_jac( grp, R, P );
 80125b2:	4642      	mov	r2, r8
 80125b4:	4629      	mov	r1, r5
 80125b6:	4638      	mov	r0, r7
 80125b8:	f7ff f90a 	bl	80117d0 <ecp_double_jac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 80125bc:	4604      	mov	r4, r0
cleanup:
 80125be:	e7cd      	b.n	801255c <ecp_add_mixed+0x374>
            ret = mbedtls_ecp_set_zero( R );
 80125c0:	4628      	mov	r0, r5
 80125c2:	f7ff fdfc 	bl	80121be <mbedtls_ecp_set_zero>
 80125c6:	e7f9      	b.n	80125bc <ecp_add_mixed+0x3d4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 80125c8:	a901      	add	r1, sp, #4
 80125ca:	4642      	mov	r2, r8
 80125cc:	4608      	mov	r0, r1
 80125ce:	f7fc fd92 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 80125d2:	4604      	mov	r4, r0
 80125d4:	2800      	cmp	r0, #0
 80125d6:	f43f af15 	beq.w	8012404 <ecp_add_mixed+0x21c>
 80125da:	e7bf      	b.n	801255c <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 80125dc:	2100      	movs	r1, #0
 80125de:	a80d      	add	r0, sp, #52	; 0x34
 80125e0:	f7fc fd1a 	bl	800f018 <mbedtls_mpi_cmp_int>
 80125e4:	2800      	cmp	r0, #0
 80125e6:	f43f af35 	beq.w	8012454 <ecp_add_mixed+0x26c>
 80125ea:	a90d      	add	r1, sp, #52	; 0x34
 80125ec:	4642      	mov	r2, r8
 80125ee:	4608      	mov	r0, r1
 80125f0:	f7fc fdbe 	bl	800f170 <mbedtls_mpi_add_mpi>
 80125f4:	e726      	b.n	8012444 <ecp_add_mixed+0x25c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 80125f6:	2100      	movs	r1, #0
 80125f8:	a80d      	add	r0, sp, #52	; 0x34
 80125fa:	f7fc fd0d 	bl	800f018 <mbedtls_mpi_cmp_int>
 80125fe:	2800      	cmp	r0, #0
 8012600:	f43f af34 	beq.w	801246c <ecp_add_mixed+0x284>
 8012604:	a90d      	add	r1, sp, #52	; 0x34
 8012606:	4642      	mov	r2, r8
 8012608:	4608      	mov	r0, r1
 801260a:	f7fc fdb1 	bl	800f170 <mbedtls_mpi_add_mpi>
 801260e:	e726      	b.n	801245e <ecp_add_mixed+0x276>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 8012610:	2100      	movs	r1, #0
 8012612:	4630      	mov	r0, r6
 8012614:	f7fc fd00 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012618:	2800      	cmp	r0, #0
 801261a:	f43f af34 	beq.w	8012486 <ecp_add_mixed+0x29e>
 801261e:	4642      	mov	r2, r8
 8012620:	4631      	mov	r1, r6
 8012622:	4630      	mov	r0, r6
 8012624:	f7fc fda4 	bl	800f170 <mbedtls_mpi_add_mpi>
 8012628:	4604      	mov	r4, r0
 801262a:	2800      	cmp	r0, #0
 801262c:	f43f af27 	beq.w	801247e <ecp_add_mixed+0x296>
 8012630:	e794      	b.n	801255c <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8012632:	2100      	movs	r1, #0
 8012634:	a810      	add	r0, sp, #64	; 0x40
 8012636:	f7fc fcef 	bl	800f018 <mbedtls_mpi_cmp_int>
 801263a:	2800      	cmp	r0, #0
 801263c:	f43f af54 	beq.w	80124e8 <ecp_add_mixed+0x300>
 8012640:	a910      	add	r1, sp, #64	; 0x40
 8012642:	4642      	mov	r2, r8
 8012644:	4608      	mov	r0, r1
 8012646:	f7fc fd93 	bl	800f170 <mbedtls_mpi_add_mpi>
 801264a:	e746      	b.n	80124da <ecp_add_mixed+0x2f2>
 801264c:	200010c8 	.word	0x200010c8
 8012650:	ffffb080 	.word	0xffffb080

08012654 <ecp_mul_comb>:
 */
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 8012654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012658:	ed2d 8b04 	vpush	{d8-d9}
 801265c:	b0e5      	sub	sp, #404	; 0x194
 801265e:	4605      	mov	r5, r0
    size_t d;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *T;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 8012660:	a80d      	add	r0, sp, #52	; 0x34
{
 8012662:	460e      	mov	r6, r1
 8012664:	4692      	mov	sl, r2
 8012666:	461c      	mov	r4, r3
    mbedtls_mpi_init( &M );
 8012668:	f7fc f9cd 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 801266c:	a810      	add	r0, sp, #64	; 0x40
 801266e:	f7fc f9ca 	bl	800ea06 <mbedtls_mpi_init>

    /* we need N to be odd to trnaform m in an odd number, check now */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 8012672:	f105 034c 	add.w	r3, r5, #76	; 0x4c
 8012676:	2100      	movs	r1, #0
 8012678:	4618      	mov	r0, r3
 801267a:	ee08 3a90 	vmov	s17, r3
 801267e:	f7fc fac2 	bl	800ec06 <mbedtls_mpi_get_bit>
 8012682:	2801      	cmp	r0, #1
 8012684:	4607      	mov	r7, r0
 8012686:	f040 824a 	bne.w	8012b1e <ecp_mul_comb+0x4ca>
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 801268a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 801268c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8012690:	bf2c      	ite	cs
 8012692:	2305      	movcs	r3, #5
 8012694:	2304      	movcc	r3, #4
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 8012696:	f105 0134 	add.w	r1, r5, #52	; 0x34
 801269a:	f104 000c 	add.w	r0, r4, #12
    w = grp->nbits >= 384 ? 5 : 4;
 801269e:	9303      	str	r3, [sp, #12]
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80126a0:	f7fc fc77 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 80126a4:	9004      	str	r0, [sp, #16]
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d158      	bne.n	801275c <ecp_mul_comb+0x108>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 80126aa:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80126ae:	4620      	mov	r0, r4
 80126b0:	f7fc fc6f 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
    if( p_eq_g )
 80126b4:	b918      	cbnz	r0, 80126be <ecp_mul_comb+0x6a>
        w++;
 80126b6:	9b03      	ldr	r3, [sp, #12]
 80126b8:	3301      	adds	r3, #1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80126ba:	e9cd 3703 	strd	r3, r7, [sp, #12]
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
        w = MBEDTLS_ECP_WINDOW_SIZE;
    if( w >= grp->nbits )
 80126be:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        w = 2;
 80126c0:	9a03      	ldr	r2, [sp, #12]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	bf28      	it	cs
 80126c6:	2202      	movcs	r2, #2
 80126c8:	9203      	str	r2, [sp, #12]

    /* Other sizes that depend on w */
    pre_len = 1U << ( w - 1 );
 80126ca:	3a01      	subs	r2, #1
 80126cc:	9206      	str	r2, [sp, #24]
 80126ce:	9906      	ldr	r1, [sp, #24]
 80126d0:	2201      	movs	r2, #1
 80126d2:	408a      	lsls	r2, r1
 80126d4:	9207      	str	r2, [sp, #28]
 80126d6:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80126da:	ee08 2a10 	vmov	s16, r2
    d = ( grp->nbits + w - 1 ) / w;
 80126de:	9a03      	ldr	r2, [sp, #12]
 80126e0:	3b01      	subs	r3, #1
 80126e2:	4413      	add	r3, r2
 80126e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80126e8:	9305      	str	r3, [sp, #20]

    /*
     * Prepare precomputed points: if P == G we want to
     * use grp->T if already initialized, or initialize it.
     */
    T = p_eq_g ? grp->T : NULL;
 80126ea:	9b04      	ldr	r3, [sp, #16]
 80126ec:	b12b      	cbz	r3, 80126fa <ecp_mul_comb+0xa6>
 80126ee:	f8d5 b074 	ldr.w	fp, [r5, #116]	; 0x74

    if( T == NULL )
 80126f2:	f1bb 0f00 	cmp.w	fp, #0
 80126f6:	f040 80b0 	bne.w	801285a <ecp_mul_comb+0x206>
    {
        T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );
 80126fa:	4b4f      	ldr	r3, [pc, #316]	; (8012838 <ecp_mul_comb+0x1e4>)
 80126fc:	9807      	ldr	r0, [sp, #28]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	2124      	movs	r1, #36	; 0x24
 8012702:	4798      	blx	r3
        if( T == NULL )
 8012704:	4683      	mov	fp, r0
 8012706:	2800      	cmp	r0, #0
 8012708:	f000 8207 	beq.w	8012b1a <ecp_mul_comb+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 801270c:	4621      	mov	r1, r4
 801270e:	f7ff fd3d 	bl	801218c <mbedtls_ecp_copy>
 8012712:	4604      	mov	r4, r0
 8012714:	bba8      	cbnz	r0, 8012782 <ecp_mul_comb+0x12e>
 8012716:	4680      	mov	r8, r0
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012718:	2701      	movs	r7, #1
 801271a:	9b06      	ldr	r3, [sp, #24]
 801271c:	fa37 f903 	lsrs.w	r9, r7, r3
 8012720:	d01f      	beq.n	8012762 <ecp_mul_comb+0x10e>
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
 8012722:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 8012726:	fa5f f288 	uxtb.w	r2, r8
 801272a:	4649      	mov	r1, r9
 801272c:	4628      	mov	r0, r5
 801272e:	f7ff fb3f 	bl	8011db0 <ecp_normalize_jac_many>
 8012732:	4604      	mov	r4, r0
 8012734:	bb28      	cbnz	r0, 8012782 <ecp_mul_comb+0x12e>
    k = 0;
 8012736:	4602      	mov	r2, r0
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012738:	f04f 0801 	mov.w	r8, #1
            TT[k++] = &T[i + j];
 801273c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012740:	9b06      	ldr	r3, [sp, #24]
 8012742:	fa38 f303 	lsrs.w	r3, r8, r3
 8012746:	4641      	mov	r1, r8
 8012748:	d17a      	bne.n	8012840 <ecp_mul_comb+0x1ec>
 801274a:	eb08 0002 	add.w	r0, r8, r2
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 801274e:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
 8012752:	b2c2      	uxtb	r2, r0
 8012754:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8012758:	9208      	str	r2, [sp, #32]
 801275a:	e05f      	b.n	801281c <ecp_mul_comb+0x1c8>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 801275c:	2300      	movs	r3, #0
 801275e:	9304      	str	r3, [sp, #16]
 8012760:	e7ad      	b.n	80126be <ecp_mul_comb+0x6a>
        cur = T + i;
 8012762:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 8012766:	0879      	lsrs	r1, r7, #1
        cur = T + i;
 8012768:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 801276c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012770:	4610      	mov	r0, r2
 8012772:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 8012776:	9208      	str	r2, [sp, #32]
 8012778:	f7ff fd08 	bl	801218c <mbedtls_ecp_copy>
 801277c:	9a08      	ldr	r2, [sp, #32]
 801277e:	4604      	mov	r4, r0
 8012780:	b360      	cbz	r0, 80127dc <ecp_mul_comb+0x188>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );

cleanup:

    if( T != NULL && ! p_eq_g )
 8012782:	9b04      	ldr	r3, [sp, #16]
 8012784:	b97b      	cbnz	r3, 80127a6 <ecp_mul_comb+0x152>
 8012786:	9d04      	ldr	r5, [sp, #16]
    {
        for( i = 0; i < pre_len; i++ )
            mbedtls_ecp_point_free( &T[i] );
 8012788:	2724      	movs	r7, #36	; 0x24
 801278a:	fb07 b005 	mla	r0, r7, r5, fp
 801278e:	f7ff fcb3 	bl	80120f8 <mbedtls_ecp_point_free>
        for( i = 0; i < pre_len; i++ )
 8012792:	3501      	adds	r5, #1
 8012794:	ee18 2a10 	vmov	r2, s16
 8012798:	b2eb      	uxtb	r3, r5
 801279a:	4293      	cmp	r3, r2
 801279c:	d3f5      	bcc.n	801278a <ecp_mul_comb+0x136>
        mbedtls_free( T );
 801279e:	4b27      	ldr	r3, [pc, #156]	; (801283c <ecp_mul_comb+0x1e8>)
 80127a0:	4658      	mov	r0, fp
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4798      	blx	r3
    }

    mbedtls_mpi_free( &M );
 80127a6:	a80d      	add	r0, sp, #52	; 0x34
 80127a8:	f7fc f934 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &mm );
 80127ac:	a810      	add	r0, sp, #64	; 0x40
 80127ae:	f7fc f931 	bl	800ea14 <mbedtls_mpi_free>

    if( ret != 0 )
 80127b2:	b114      	cbz	r4, 80127ba <ecp_mul_comb+0x166>
        mbedtls_ecp_point_free( R );
 80127b4:	4630      	mov	r0, r6
 80127b6:	f7ff fc9f 	bl	80120f8 <mbedtls_ecp_point_free>

    return( ret );
}
 80127ba:	4620      	mov	r0, r4
 80127bc:	b065      	add	sp, #404	; 0x194
 80127be:	ecbd 8b04 	vpop	{d8-d9}
 80127c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 80127c6:	4611      	mov	r1, r2
 80127c8:	4628      	mov	r0, r5
 80127ca:	9208      	str	r2, [sp, #32]
 80127cc:	f7ff f800 	bl	80117d0 <ecp_double_jac>
 80127d0:	4604      	mov	r4, r0
 80127d2:	2800      	cmp	r0, #0
 80127d4:	d1d5      	bne.n	8012782 <ecp_mul_comb+0x12e>
        for( j = 0; j < d; j++ )
 80127d6:	9a08      	ldr	r2, [sp, #32]
 80127d8:	f109 0901 	add.w	r9, r9, #1
 80127dc:	9b05      	ldr	r3, [sp, #20]
 80127de:	454b      	cmp	r3, r9
 80127e0:	d1f1      	bne.n	80127c6 <ecp_mul_comb+0x172>
        TT[k++] = cur;
 80127e2:	fa5f f388 	uxtb.w	r3, r8
 80127e6:	a922      	add	r1, sp, #136	; 0x88
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 80127e8:	007f      	lsls	r7, r7, #1
        TT[k++] = cur;
 80127ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 80127ee:	b2ff      	uxtb	r7, r7
 80127f0:	f108 0801 	add.w	r8, r8, #1
 80127f4:	e791      	b.n	801271a <ecp_mul_comb+0xc6>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 80127f6:	2224      	movs	r2, #36	; 0x24
 80127f8:	fb02 f209 	mul.w	r2, r2, r9
 80127fc:	1899      	adds	r1, r3, r2
 80127fe:	4628      	mov	r0, r5
 8012800:	445a      	add	r2, fp
 8012802:	930b      	str	r3, [sp, #44]	; 0x2c
 8012804:	910a      	str	r1, [sp, #40]	; 0x28
 8012806:	f7ff fcef 	bl	80121e8 <ecp_add_mixed>
 801280a:	4604      	mov	r4, r0
 801280c:	2800      	cmp	r0, #0
 801280e:	d1b8      	bne.n	8012782 <ecp_mul_comb+0x12e>
            TT[k++] = &T[i + j];
 8012810:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	; 0x24
 8012814:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
 8012818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801281a:	4649      	mov	r1, r9
 801281c:	9a08      	ldr	r2, [sp, #32]
 801281e:	1a57      	subs	r7, r2, r1
 8012820:	b2ff      	uxtb	r7, r7
        while( j-- )
 8012822:	f101 39ff 	add.w	r9, r1, #4294967295
 8012826:	2900      	cmp	r1, #0
 8012828:	d1e5      	bne.n	80127f6 <ecp_mul_comb+0x1a2>
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 801282a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801282e:	fa5f f888 	uxtb.w	r8, r8
 8012832:	463a      	mov	r2, r7
 8012834:	e784      	b.n	8012740 <ecp_mul_comb+0xec>
 8012836:	bf00      	nop
 8012838:	200005a0 	.word	0x200005a0
 801283c:	200005a4 	.word	0x200005a4
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
 8012840:	a922      	add	r1, sp, #136	; 0x88
 8012842:	4628      	mov	r0, r5
 8012844:	f7ff fab4 	bl	8011db0 <ecp_normalize_jac_many>
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );
 8012848:	4604      	mov	r4, r0
 801284a:	2800      	cmp	r0, #0
 801284c:	d199      	bne.n	8012782 <ecp_mul_comb+0x12e>
        if( p_eq_g )
 801284e:	9b04      	ldr	r3, [sp, #16]
 8012850:	b11b      	cbz	r3, 801285a <ecp_mul_comb+0x206>
            grp->T_size = pre_len;
 8012852:	9b07      	ldr	r3, [sp, #28]
            grp->T = T;
 8012854:	f8c5 b074 	str.w	fp, [r5, #116]	; 0x74
            grp->T_size = pre_len;
 8012858:	67ab      	str	r3, [r5, #120]	; 0x78
    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
 801285a:	2100      	movs	r1, #0
 801285c:	4650      	mov	r0, sl
 801285e:	f7fc f9d2 	bl	800ec06 <mbedtls_mpi_get_bit>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 8012862:	af0d      	add	r7, sp, #52	; 0x34
    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
 8012864:	4681      	mov	r9, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 8012866:	4651      	mov	r1, sl
 8012868:	4638      	mov	r0, r7
 801286a:	f7fc f953 	bl	800eb14 <mbedtls_mpi_copy>
 801286e:	4604      	mov	r4, r0
 8012870:	2800      	cmp	r0, #0
 8012872:	d186      	bne.n	8012782 <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 8012874:	ee18 1a90 	vmov	r1, s17
 8012878:	4652      	mov	r2, sl
 801287a:	a810      	add	r0, sp, #64	; 0x40
 801287c:	f7fc fc9a 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 8012880:	4604      	mov	r4, r0
 8012882:	2800      	cmp	r0, #0
 8012884:	f47f af7d 	bne.w	8012782 <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );
 8012888:	f1b9 0901 	subs.w	r9, r9, #1
 801288c:	bf18      	it	ne
 801288e:	f04f 0901 	movne.w	r9, #1
 8012892:	464a      	mov	r2, r9
 8012894:	a910      	add	r1, sp, #64	; 0x40
 8012896:	4638      	mov	r0, r7
 8012898:	f7fc f966 	bl	800eb68 <mbedtls_mpi_safe_cond_assign>
 801289c:	4604      	mov	r4, r0
 801289e:	2800      	cmp	r0, #0
 80128a0:	f47f af6f 	bne.w	8012782 <ecp_mul_comb+0x12e>
    memset( x, 0, d+1 );
 80128a4:	9b05      	ldr	r3, [sp, #20]
 80128a6:	4601      	mov	r1, r0
 80128a8:	1c5a      	adds	r2, r3, #1
 80128aa:	a822      	add	r0, sp, #136	; 0x88
 80128ac:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 80128b0:	f00f fe0e 	bl	80224d0 <memset>
    for( i = 0; i < d; i++ )
 80128b4:	46a0      	mov	r8, r4
 80128b6:	4653      	mov	r3, sl
 80128b8:	9a05      	ldr	r2, [sp, #20]
 80128ba:	4542      	cmp	r2, r8
 80128bc:	f040 80c0 	bne.w	8012a40 <ecp_mul_comb+0x3ec>
    c = 0;
 80128c0:	2700      	movs	r7, #0
    for( i = 1; i <= d; i++ )
 80128c2:	2401      	movs	r4, #1
 80128c4:	45a0      	cmp	r8, r4
 80128c6:	f080 80d2 	bcs.w	8012a6e <ecp_mul_comb+0x41a>
    if( pt == NULL )
 80128ca:	a819      	add	r0, sp, #100	; 0x64
 80128cc:	f7ff fba8 	bl	8012020 <mbedtls_ecp_point_init.part.0>
    MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );
 80128d0:	ab22      	add	r3, sp, #136	; 0x88
 80128d2:	465a      	mov	r2, fp
 80128d4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80128d8:	9300      	str	r3, [sp, #0]
 80128da:	4631      	mov	r1, r6
 80128dc:	ee18 3a10 	vmov	r3, s16
 80128e0:	4628      	mov	r0, r5
 80128e2:	f7fe fefc 	bl	80116de <ecp_select_comb>
 80128e6:	4604      	mov	r4, r0
 80128e8:	2800      	cmp	r0, #0
 80128ea:	f040 8101 	bne.w	8012af0 <ecp_mul_comb+0x49c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 80128ee:	f106 0a18 	add.w	sl, r6, #24
 80128f2:	2101      	movs	r1, #1
 80128f4:	4650      	mov	r0, sl
 80128f6:	f7fc f96a 	bl	800ebce <mbedtls_mpi_lset>
 80128fa:	4604      	mov	r4, r0
 80128fc:	2800      	cmp	r0, #0
 80128fe:	f040 80f7 	bne.w	8012af0 <ecp_mul_comb+0x49c>
    if( f_rng != 0 )
 8012902:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 8012904:	2b00      	cmp	r3, #0
 8012906:	f000 80ef 	beq.w	8012ae8 <ecp_mul_comb+0x494>
    p_size = ( grp->pbits + 7 ) / 8;
 801290a:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 801290c:	af13      	add	r7, sp, #76	; 0x4c
    p_size = ( grp->pbits + 7 ) / 8;
 801290e:	3307      	adds	r3, #7
 8012910:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 8012912:	4638      	mov	r0, r7
    p_size = ( grp->pbits + 7 ) / 8;
 8012914:	ee08 3a90 	vmov	s17, r3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 8012918:	f7fc f875 	bl	800ea06 <mbedtls_mpi_init>
 801291c:	a816      	add	r0, sp, #88	; 0x58
 801291e:	f7fc f872 	bl	800ea06 <mbedtls_mpi_init>
 8012922:	230c      	movs	r3, #12
 8012924:	9303      	str	r3, [sp, #12]
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 8012926:	1d2b      	adds	r3, r5, #4
 8012928:	ee09 3a10 	vmov	s18, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 801292c:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 8012930:	ee18 1a90 	vmov	r1, s17
 8012934:	4638      	mov	r0, r7
 8012936:	f7fd f988 	bl	800fc4a <mbedtls_mpi_fill_random>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 801293a:	4603      	mov	r3, r0
 801293c:	2800      	cmp	r0, #0
 801293e:	d173      	bne.n	8012a28 <ecp_mul_comb+0x3d4>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 8012940:	ee19 1a10 	vmov	r1, s18
 8012944:	4638      	mov	r0, r7
 8012946:	f7fc fb24 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 801294a:	2800      	cmp	r0, #0
 801294c:	f280 80ad 	bge.w	8012aaa <ecp_mul_comb+0x456>
        if( count++ > 10 )
 8012950:	9b03      	ldr	r3, [sp, #12]
 8012952:	3b01      	subs	r3, #1
 8012954:	9303      	str	r3, [sp, #12]
 8012956:	f000 80e4 	beq.w	8012b22 <ecp_mul_comb+0x4ce>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 801295a:	2101      	movs	r1, #1
 801295c:	4638      	mov	r0, r7
 801295e:	f7fc fb5b 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012962:	2800      	cmp	r0, #0
 8012964:	dde2      	ble.n	801292c <ecp_mul_comb+0x2d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 8012966:	463a      	mov	r2, r7
 8012968:	4651      	mov	r1, sl
 801296a:	4650      	mov	r0, sl
 801296c:	f7fc fc5b 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8012970:	4603      	mov	r3, r0
 8012972:	2800      	cmp	r0, #0
 8012974:	d158      	bne.n	8012a28 <ecp_mul_comb+0x3d4>
 8012976:	4629      	mov	r1, r5
 8012978:	4650      	mov	r0, sl
 801297a:	f7fe fee3 	bl	8011744 <ecp_modp>
 801297e:	4603      	mov	r3, r0
 8012980:	2800      	cmp	r0, #0
 8012982:	d151      	bne.n	8012a28 <ecp_mul_comb+0x3d4>
 8012984:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8012b34 <ecp_mul_comb+0x4e0>
 8012988:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 801298c:	463a      	mov	r2, r7
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 801298e:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 8012990:	4639      	mov	r1, r7
 8012992:	a816      	add	r0, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 8012994:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 8012998:	f7fc fc45 	bl	800f226 <mbedtls_mpi_mul_mpi>
 801299c:	4603      	mov	r3, r0
 801299e:	2800      	cmp	r0, #0
 80129a0:	d142      	bne.n	8012a28 <ecp_mul_comb+0x3d4>
 80129a2:	4629      	mov	r1, r5
 80129a4:	a816      	add	r0, sp, #88	; 0x58
 80129a6:	f7fe fecd 	bl	8011744 <ecp_modp>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d13b      	bne.n	8012a28 <ecp_mul_comb+0x3d4>
 80129b0:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80129b4:	aa16      	add	r2, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80129b6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80129b8:	4631      	mov	r1, r6
 80129ba:	4630      	mov	r0, r6
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80129bc:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80129c0:	f7fc fc31 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80129c4:	4603      	mov	r3, r0
 80129c6:	bb78      	cbnz	r0, 8012a28 <ecp_mul_comb+0x3d4>
 80129c8:	4629      	mov	r1, r5
 80129ca:	4630      	mov	r0, r6
 80129cc:	f7fe feba 	bl	8011744 <ecp_modp>
 80129d0:	4603      	mov	r3, r0
 80129d2:	bb48      	cbnz	r0, 8012a28 <ecp_mul_comb+0x3d4>
 80129d4:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 80129d8:	a916      	add	r1, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80129da:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 80129dc:	463a      	mov	r2, r7
 80129de:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80129e0:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 80129e4:	f7fc fc1f 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80129e8:	4603      	mov	r3, r0
 80129ea:	b9e8      	cbnz	r0, 8012a28 <ecp_mul_comb+0x3d4>
 80129ec:	4629      	mov	r1, r5
 80129ee:	a816      	add	r0, sp, #88	; 0x58
 80129f0:	f7fe fea8 	bl	8011744 <ecp_modp>
 80129f4:	4603      	mov	r3, r0
 80129f6:	b9b8      	cbnz	r0, 8012a28 <ecp_mul_comb+0x3d4>
 80129f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80129fc:	3301      	adds	r3, #1
 80129fe:	f8ca 3004 	str.w	r3, [sl, #4]
 8012a02:	4657      	mov	r7, sl
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 8012a04:	f106 0a0c 	add.w	sl, r6, #12
 8012a08:	aa16      	add	r2, sp, #88	; 0x58
 8012a0a:	4651      	mov	r1, sl
 8012a0c:	4650      	mov	r0, sl
 8012a0e:	f7fc fc0a 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8012a12:	4603      	mov	r3, r0
 8012a14:	b940      	cbnz	r0, 8012a28 <ecp_mul_comb+0x3d4>
 8012a16:	4629      	mov	r1, r5
 8012a18:	4650      	mov	r0, sl
 8012a1a:	f7fe fe93 	bl	8011744 <ecp_modp>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	b910      	cbnz	r0, 8012a28 <ecp_mul_comb+0x3d4>
 8012a22:	687a      	ldr	r2, [r7, #4]
 8012a24:	3201      	adds	r2, #1
 8012a26:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 8012a28:	a813      	add	r0, sp, #76	; 0x4c
 8012a2a:	9303      	str	r3, [sp, #12]
 8012a2c:	f7fb fff2 	bl	800ea14 <mbedtls_mpi_free>
 8012a30:	a816      	add	r0, sp, #88	; 0x58
 8012a32:	f7fb ffef 	bl	800ea14 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 8012a36:	9b03      	ldr	r3, [sp, #12]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d055      	beq.n	8012ae8 <ecp_mul_comb+0x494>
 8012a3c:	461c      	mov	r4, r3
 8012a3e:	e057      	b.n	8012af0 <ecp_mul_comb+0x49c>
 8012a40:	4641      	mov	r1, r8
        for( j = 0; j < w; j++ )
 8012a42:	2400      	movs	r4, #0
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 8012a44:	4638      	mov	r0, r7
 8012a46:	e9cd 1306 	strd	r1, r3, [sp, #24]
 8012a4a:	f7fc f8dc 	bl	800ec06 <mbedtls_mpi_get_bit>
 8012a4e:	9b07      	ldr	r3, [sp, #28]
 8012a50:	781a      	ldrb	r2, [r3, #0]
 8012a52:	40a0      	lsls	r0, r4
 8012a54:	4310      	orrs	r0, r2
 8012a56:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 8012a5a:	4411      	add	r1, r2
        for( j = 0; j < w; j++ )
 8012a5c:	9a03      	ldr	r2, [sp, #12]
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 8012a5e:	7018      	strb	r0, [r3, #0]
        for( j = 0; j < w; j++ )
 8012a60:	3401      	adds	r4, #1
 8012a62:	42a2      	cmp	r2, r4
 8012a64:	d8ee      	bhi.n	8012a44 <ecp_mul_comb+0x3f0>
    for( i = 0; i < d; i++ )
 8012a66:	f108 0801 	add.w	r8, r8, #1
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	e724      	b.n	80128b8 <ecp_mul_comb+0x264>
        cc   = x[i] & c;
 8012a6e:	f89a 0001 	ldrb.w	r0, [sl, #1]
        c   |= x[i] & ( x[i-1] * adjust );
 8012a72:	f89a 2000 	ldrb.w	r2, [sl]
        x[i] = x[i] ^ c;
 8012a76:	ea80 0307 	eor.w	r3, r0, r7
        adjust = 1 - ( x[i] & 0x01 );
 8012a7a:	43d9      	mvns	r1, r3
 8012a7c:	f001 0101 	and.w	r1, r1, #1
        c   |= x[i] & ( x[i-1] * adjust );
 8012a80:	fb12 f201 	smulbb	r2, r2, r1
 8012a84:	b25b      	sxtb	r3, r3
 8012a86:	b252      	sxtb	r2, r2
 8012a88:	ea03 0c02 	and.w	ip, r3, r2
        x[i] = x[i] ^ ( x[i-1] * adjust );
 8012a8c:	4053      	eors	r3, r2
 8012a8e:	f80a 3f01 	strb.w	r3, [sl, #1]!
        x[i-1] |= adjust << 7;
 8012a92:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
        cc   = x[i] & c;
 8012a96:	4038      	ands	r0, r7
        c   |= x[i] & ( x[i-1] * adjust );
 8012a98:	ea4c 0700 	orr.w	r7, ip, r0
        x[i-1] |= adjust << 7;
 8012a9c:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
        c   |= x[i] & ( x[i-1] * adjust );
 8012aa0:	b2ff      	uxtb	r7, r7
        x[i-1] |= adjust << 7;
 8012aa2:	f80a 1c01 	strb.w	r1, [sl, #-1]
    for( i = 1; i <= d; i++ )
 8012aa6:	3401      	adds	r4, #1
 8012aa8:	e70c      	b.n	80128c4 <ecp_mul_comb+0x270>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 8012aaa:	2101      	movs	r1, #1
 8012aac:	4638      	mov	r0, r7
 8012aae:	f7fc f99c 	bl	800edea <mbedtls_mpi_shift_r>
 8012ab2:	e742      	b.n	801293a <ecp_mul_comb+0x2e6>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 8012ab4:	4632      	mov	r2, r6
 8012ab6:	4631      	mov	r1, r6
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f7fe fe89 	bl	80117d0 <ecp_double_jac>
 8012abe:	b988      	cbnz	r0, 8012ae4 <ecp_mul_comb+0x490>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
 8012ac0:	f818 3007 	ldrb.w	r3, [r8, r7]
 8012ac4:	9300      	str	r3, [sp, #0]
 8012ac6:	465a      	mov	r2, fp
 8012ac8:	ee18 3a10 	vmov	r3, s16
 8012acc:	a919      	add	r1, sp, #100	; 0x64
 8012ace:	4628      	mov	r0, r5
 8012ad0:	f7fe fe05 	bl	80116de <ecp_select_comb>
 8012ad4:	b930      	cbnz	r0, 8012ae4 <ecp_mul_comb+0x490>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 8012ad6:	ab19      	add	r3, sp, #100	; 0x64
 8012ad8:	4632      	mov	r2, r6
 8012ada:	4631      	mov	r1, r6
 8012adc:	4628      	mov	r0, r5
 8012ade:	f7ff fb83 	bl	80121e8 <ecp_add_mixed>
 8012ae2:	b110      	cbz	r0, 8012aea <ecp_mul_comb+0x496>
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	e003      	b.n	8012af0 <ecp_mul_comb+0x49c>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
 8012ae8:	af22      	add	r7, sp, #136	; 0x88
    while( i-- != 0 )
 8012aea:	f1b8 0801 	subs.w	r8, r8, #1
 8012aee:	d2e1      	bcs.n	8012ab4 <ecp_mul_comb+0x460>
    if( pt == NULL )
 8012af0:	a819      	add	r0, sp, #100	; 0x64
 8012af2:	f7ff faa3 	bl	801203c <mbedtls_ecp_point_free.part.0>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );
 8012af6:	2c00      	cmp	r4, #0
 8012af8:	f47f ae43 	bne.w	8012782 <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );
 8012afc:	464a      	mov	r2, r9
 8012afe:	4631      	mov	r1, r6
 8012b00:	4628      	mov	r0, r5
 8012b02:	f7fe fdc9 	bl	8011698 <ecp_safe_invert_jac>
 8012b06:	4604      	mov	r4, r0
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	f47f ae3a 	bne.w	8012782 <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
 8012b0e:	4631      	mov	r1, r6
 8012b10:	4628      	mov	r0, r5
 8012b12:	f7ff f8db 	bl	8011ccc <ecp_normalize_jac>
 8012b16:	4604      	mov	r4, r0
cleanup:
 8012b18:	e633      	b.n	8012782 <ecp_mul_comb+0x12e>
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 8012b1a:	4c03      	ldr	r4, [pc, #12]	; (8012b28 <ecp_mul_comb+0x4d4>)
 8012b1c:	e643      	b.n	80127a6 <ecp_mul_comb+0x152>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012b1e:	4c03      	ldr	r4, [pc, #12]	; (8012b2c <ecp_mul_comb+0x4d8>)
 8012b20:	e64b      	b.n	80127ba <ecp_mul_comb+0x166>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8012b22:	4c03      	ldr	r4, [pc, #12]	; (8012b30 <ecp_mul_comb+0x4dc>)
 8012b24:	e7e4      	b.n	8012af0 <ecp_mul_comb+0x49c>
 8012b26:	bf00      	nop
 8012b28:	ffffb280 	.word	0xffffb280
 8012b2c:	ffffb080 	.word	0xffffb080
 8012b30:	ffffb300 	.word	0xffffb300
 8012b34:	200010c8 	.word	0x200010c8

08012b38 <mbedtls_ecp_is_zero>:
{
 8012b38:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 8012b3a:	2100      	movs	r1, #0
 8012b3c:	3018      	adds	r0, #24
 8012b3e:	f7fc fa6b 	bl	800f018 <mbedtls_mpi_cmp_int>
}
 8012b42:	fab0 f080 	clz	r0, r0
 8012b46:	0940      	lsrs	r0, r0, #5
 8012b48:	bd08      	pop	{r3, pc}
	...

08012b4c <mbedtls_ecp_point_write_binary>:
{
 8012b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
 8012b50:	2a01      	cmp	r2, #1
{
 8012b52:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
 8012b56:	4605      	mov	r5, r0
 8012b58:	460e      	mov	r6, r1
 8012b5a:	4690      	mov	r8, r2
 8012b5c:	461f      	mov	r7, r3
    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
 8012b5e:	d83e      	bhi.n	8012bde <mbedtls_ecp_point_write_binary+0x92>
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8012b60:	2100      	movs	r1, #0
 8012b62:	f106 0018 	add.w	r0, r6, #24
 8012b66:	f7fc fa57 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012b6a:	b948      	cbnz	r0, 8012b80 <mbedtls_ecp_point_write_binary+0x34>
        if( buflen < 1 )
 8012b6c:	f1b9 0f00 	cmp.w	r9, #0
 8012b70:	d102      	bne.n	8012b78 <mbedtls_ecp_point_write_binary+0x2c>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 8012b72:	481c      	ldr	r0, [pc, #112]	; (8012be4 <mbedtls_ecp_point_write_binary+0x98>)
}
 8012b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *olen = 1;
 8012b78:	2301      	movs	r3, #1
        buf[0] = 0x00;
 8012b7a:	7020      	strb	r0, [r4, #0]
        *olen = 1;
 8012b7c:	603b      	str	r3, [r7, #0]
        return( 0 );
 8012b7e:	e7f9      	b.n	8012b74 <mbedtls_ecp_point_write_binary+0x28>
    plen = mbedtls_mpi_size( &grp->P );
 8012b80:	1d28      	adds	r0, r5, #4
 8012b82:	f7fc f888 	bl	800ec96 <mbedtls_mpi_size>
 8012b86:	4605      	mov	r5, r0
    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 8012b88:	f1b8 0f00 	cmp.w	r8, #0
 8012b8c:	d117      	bne.n	8012bbe <mbedtls_ecp_point_write_binary+0x72>
        *olen = 2 * plen + 1;
 8012b8e:	0043      	lsls	r3, r0, #1
 8012b90:	3301      	adds	r3, #1
        if( buflen < *olen )
 8012b92:	4599      	cmp	r9, r3
        *olen = 2 * plen + 1;
 8012b94:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
 8012b96:	d3ec      	bcc.n	8012b72 <mbedtls_ecp_point_write_binary+0x26>
        buf[0] = 0x04;
 8012b98:	4621      	mov	r1, r4
 8012b9a:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012b9c:	4602      	mov	r2, r0
        buf[0] = 0x04;
 8012b9e:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	f7fc f8b0 	bl	800ed08 <mbedtls_mpi_write_binary>
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	d1e3      	bne.n	8012b74 <mbedtls_ecp_point_write_binary+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 8012bac:	1c69      	adds	r1, r5, #1
 8012bae:	462a      	mov	r2, r5
 8012bb0:	4421      	add	r1, r4
 8012bb2:	f106 000c 	add.w	r0, r6, #12
}
 8012bb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012bba:	f7fc b8a5 	b.w	800ed08 <mbedtls_mpi_write_binary>
        *olen = plen + 1;
 8012bbe:	1c43      	adds	r3, r0, #1
        if( buflen < *olen )
 8012bc0:	4599      	cmp	r9, r3
        *olen = plen + 1;
 8012bc2:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
 8012bc4:	d3d5      	bcc.n	8012b72 <mbedtls_ecp_point_write_binary+0x26>
        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	f106 000c 	add.w	r0, r6, #12
 8012bcc:	f7fc f81b 	bl	800ec06 <mbedtls_mpi_get_bit>
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	3002      	adds	r0, #2
 8012bd4:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012bd8:	462a      	mov	r2, r5
 8012bda:	4630      	mov	r0, r6
 8012bdc:	e7eb      	b.n	8012bb6 <mbedtls_ecp_point_write_binary+0x6a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012bde:	4802      	ldr	r0, [pc, #8]	; (8012be8 <mbedtls_ecp_point_write_binary+0x9c>)
 8012be0:	e7c8      	b.n	8012b74 <mbedtls_ecp_point_write_binary+0x28>
 8012be2:	bf00      	nop
 8012be4:	ffffb100 	.word	0xffffb100
 8012be8:	ffffb080 	.word	0xffffb080

08012bec <mbedtls_ecp_point_read_binary>:
{
 8012bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bee:	460c      	mov	r4, r1
 8012bf0:	4615      	mov	r5, r2
    if( ilen < 1 )
 8012bf2:	461f      	mov	r7, r3
 8012bf4:	b90b      	cbnz	r3, 8012bfa <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012bf6:	4817      	ldr	r0, [pc, #92]	; (8012c54 <mbedtls_ecp_point_read_binary+0x68>)
}
 8012bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( buf[0] == 0x00 )
 8012bfa:	7813      	ldrb	r3, [r2, #0]
 8012bfc:	b933      	cbnz	r3, 8012c0c <mbedtls_ecp_point_read_binary+0x20>
        if( ilen == 1 )
 8012bfe:	2f01      	cmp	r7, #1
 8012c00:	d1f9      	bne.n	8012bf6 <mbedtls_ecp_point_read_binary+0xa>
}
 8012c02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            return( mbedtls_ecp_set_zero( pt ) );
 8012c06:	4608      	mov	r0, r1
 8012c08:	f7ff bad9 	b.w	80121be <mbedtls_ecp_set_zero>
    plen = mbedtls_mpi_size( &grp->P );
 8012c0c:	3004      	adds	r0, #4
 8012c0e:	f7fc f842 	bl	800ec96 <mbedtls_mpi_size>
    if( buf[0] != 0x04 )
 8012c12:	782b      	ldrb	r3, [r5, #0]
 8012c14:	2b04      	cmp	r3, #4
    plen = mbedtls_mpi_size( &grp->P );
 8012c16:	4606      	mov	r6, r0
    if( buf[0] != 0x04 )
 8012c18:	d11a      	bne.n	8012c50 <mbedtls_ecp_point_read_binary+0x64>
    if( ilen != 2 * plen + 1 )
 8012c1a:	0043      	lsls	r3, r0, #1
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	429f      	cmp	r7, r3
 8012c20:	d1e9      	bne.n	8012bf6 <mbedtls_ecp_point_read_binary+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 8012c22:	4602      	mov	r2, r0
 8012c24:	1c69      	adds	r1, r5, #1
 8012c26:	4620      	mov	r0, r4
 8012c28:	f7fc f83b 	bl	800eca2 <mbedtls_mpi_read_binary>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	d1e3      	bne.n	8012bf8 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
 8012c30:	1c71      	adds	r1, r6, #1
 8012c32:	4632      	mov	r2, r6
 8012c34:	4429      	add	r1, r5
 8012c36:	f104 000c 	add.w	r0, r4, #12
 8012c3a:	f7fc f832 	bl	800eca2 <mbedtls_mpi_read_binary>
 8012c3e:	2800      	cmp	r0, #0
 8012c40:	d1da      	bne.n	8012bf8 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8012c42:	f104 0018 	add.w	r0, r4, #24
 8012c46:	2101      	movs	r1, #1
}
 8012c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8012c4c:	f7fb bfbf 	b.w	800ebce <mbedtls_mpi_lset>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012c50:	4801      	ldr	r0, [pc, #4]	; (8012c58 <mbedtls_ecp_point_read_binary+0x6c>)
 8012c52:	e7d1      	b.n	8012bf8 <mbedtls_ecp_point_read_binary+0xc>
 8012c54:	ffffb080 	.word	0xffffb080
 8012c58:	ffffb180 	.word	0xffffb180

08012c5c <mbedtls_ecp_tls_read_point>:
    if( buf_len < 2 )
 8012c5c:	2b01      	cmp	r3, #1
{
 8012c5e:	b470      	push	{r4, r5, r6}
    if( buf_len < 2 )
 8012c60:	d90e      	bls.n	8012c80 <mbedtls_ecp_tls_read_point+0x24>
    data_len = *(*buf)++;
 8012c62:	6814      	ldr	r4, [r2, #0]
 8012c64:	1c66      	adds	r6, r4, #1
 8012c66:	6016      	str	r6, [r2, #0]
 8012c68:	7825      	ldrb	r5, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
 8012c6a:	b14d      	cbz	r5, 8012c80 <mbedtls_ecp_tls_read_point+0x24>
 8012c6c:	1e5c      	subs	r4, r3, #1
 8012c6e:	42a5      	cmp	r5, r4
 8012c70:	d806      	bhi.n	8012c80 <mbedtls_ecp_tls_read_point+0x24>
    *buf += data_len;
 8012c72:	1973      	adds	r3, r6, r5
 8012c74:	6013      	str	r3, [r2, #0]
    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
 8012c76:	462b      	mov	r3, r5
 8012c78:	4632      	mov	r2, r6
}
 8012c7a:	bc70      	pop	{r4, r5, r6}
    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
 8012c7c:	f7ff bfb6 	b.w	8012bec <mbedtls_ecp_point_read_binary>
}
 8012c80:	4801      	ldr	r0, [pc, #4]	; (8012c88 <mbedtls_ecp_tls_read_point+0x2c>)
 8012c82:	bc70      	pop	{r4, r5, r6}
 8012c84:	4770      	bx	lr
 8012c86:	bf00      	nop
 8012c88:	ffffb080 	.word	0xffffb080

08012c8c <mbedtls_ecp_tls_write_point>:
{
 8012c8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c8e:	e9dd 6506 	ldrd	r6, r5, [sp, #24]
 8012c92:	461c      	mov	r4, r3
    if( blen < 1 )
 8012c94:	b16d      	cbz	r5, 8012cb2 <mbedtls_ecp_tls_write_point+0x26>
    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
 8012c96:	3d01      	subs	r5, #1
 8012c98:	9501      	str	r5, [sp, #4]
 8012c9a:	1c75      	adds	r5, r6, #1
 8012c9c:	9500      	str	r5, [sp, #0]
 8012c9e:	f7ff ff55 	bl	8012b4c <mbedtls_ecp_point_write_binary>
 8012ca2:	b920      	cbnz	r0, 8012cae <mbedtls_ecp_tls_write_point+0x22>
    buf[0] = (unsigned char) *olen;
 8012ca4:	6823      	ldr	r3, [r4, #0]
 8012ca6:	7033      	strb	r3, [r6, #0]
    ++*olen;
 8012ca8:	6823      	ldr	r3, [r4, #0]
 8012caa:	3301      	adds	r3, #1
 8012cac:	6023      	str	r3, [r4, #0]
}
 8012cae:	b002      	add	sp, #8
 8012cb0:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012cb2:	4801      	ldr	r0, [pc, #4]	; (8012cb8 <mbedtls_ecp_tls_write_point+0x2c>)
 8012cb4:	e7fb      	b.n	8012cae <mbedtls_ecp_tls_write_point+0x22>
 8012cb6:	bf00      	nop
 8012cb8:	ffffb080 	.word	0xffffb080

08012cbc <mbedtls_ecp_tls_read_group>:
    if( len < 3 )
 8012cbc:	2a02      	cmp	r2, #2
{
 8012cbe:	b510      	push	{r4, lr}
 8012cc0:	4604      	mov	r4, r0
    if( len < 3 )
 8012cc2:	d801      	bhi.n	8012cc8 <mbedtls_ecp_tls_read_group+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012cc4:	480d      	ldr	r0, [pc, #52]	; (8012cfc <mbedtls_ecp_tls_read_group+0x40>)
}
 8012cc6:	bd10      	pop	{r4, pc}
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
 8012cc8:	680b      	ldr	r3, [r1, #0]
 8012cca:	1c5a      	adds	r2, r3, #1
 8012ccc:	600a      	str	r2, [r1, #0]
 8012cce:	781a      	ldrb	r2, [r3, #0]
 8012cd0:	2a03      	cmp	r2, #3
 8012cd2:	d1f7      	bne.n	8012cc4 <mbedtls_ecp_tls_read_group+0x8>
    tls_id = *(*buf)++;
 8012cd4:	1c9a      	adds	r2, r3, #2
 8012cd6:	600a      	str	r2, [r1, #0]
    tls_id |= *(*buf)++;
 8012cd8:	1cda      	adds	r2, r3, #3
    tls_id = *(*buf)++;
 8012cda:	7858      	ldrb	r0, [r3, #1]
    tls_id |= *(*buf)++;
 8012cdc:	600a      	str	r2, [r1, #0]
 8012cde:	789b      	ldrb	r3, [r3, #2]
    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
 8012ce0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8012ce4:	f7ff f9e0 	bl	80120a8 <mbedtls_ecp_curve_info_from_tls_id>
 8012ce8:	b128      	cbz	r0, 8012cf6 <mbedtls_ecp_tls_read_group+0x3a>
    return mbedtls_ecp_group_load( grp, curve_info->grp_id );
 8012cea:	7801      	ldrb	r1, [r0, #0]
 8012cec:	4620      	mov	r0, r4
}
 8012cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return mbedtls_ecp_group_load( grp, curve_info->grp_id );
 8012cf2:	f001 b82d 	b.w	8013d50 <mbedtls_ecp_group_load>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012cf6:	4802      	ldr	r0, [pc, #8]	; (8012d00 <mbedtls_ecp_tls_read_group+0x44>)
 8012cf8:	e7e5      	b.n	8012cc6 <mbedtls_ecp_tls_read_group+0xa>
 8012cfa:	bf00      	nop
 8012cfc:	ffffb080 	.word	0xffffb080
 8012d00:	ffffb180 	.word	0xffffb180

08012d04 <mbedtls_ecp_check_pubkey>:

/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8012d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d08:	4688      	mov	r8, r1
 8012d0a:	b088      	sub	sp, #32
 8012d0c:	4606      	mov	r6, r0
    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 8012d0e:	2101      	movs	r1, #1
 8012d10:	f108 0018 	add.w	r0, r8, #24
 8012d14:	f7fc f980 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012d18:	9001      	str	r0, [sp, #4]
 8012d1a:	b960      	cbnz	r0, 8012d36 <mbedtls_ecp_check_pubkey+0x32>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	f7fe fcb1 	bl	8011684 <ecp_get_type>
 8012d22:	2801      	cmp	r0, #1
 8012d24:	f040 80ac 	bne.w	8012e80 <mbedtls_ecp_check_pubkey+0x17c>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8012d28:	9901      	ldr	r1, [sp, #4]
 8012d2a:	4640      	mov	r0, r8
 8012d2c:	f7fc f974 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012d30:	2800      	cmp	r0, #0
 8012d32:	9901      	ldr	r1, [sp, #4]
 8012d34:	da01      	bge.n	8012d3a <mbedtls_ecp_check_pubkey+0x36>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8012d36:	4c53      	ldr	r4, [pc, #332]	; (8012e84 <mbedtls_ecp_check_pubkey+0x180>)
 8012d38:	e077      	b.n	8012e2a <mbedtls_ecp_check_pubkey+0x126>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8012d3a:	f108 040c 	add.w	r4, r8, #12
 8012d3e:	4620      	mov	r0, r4
 8012d40:	f7fc f96a 	bl	800f018 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8012d44:	2800      	cmp	r0, #0
 8012d46:	dbf6      	blt.n	8012d36 <mbedtls_ecp_check_pubkey+0x32>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8012d48:	1d35      	adds	r5, r6, #4
 8012d4a:	4629      	mov	r1, r5
 8012d4c:	4640      	mov	r0, r8
 8012d4e:	f7fc f920 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8012d52:	2800      	cmp	r0, #0
 8012d54:	daef      	bge.n	8012d36 <mbedtls_ecp_check_pubkey+0x32>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 8012d56:	4629      	mov	r1, r5
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f7fc f91a 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	dae9      	bge.n	8012d36 <mbedtls_ecp_check_pubkey+0x32>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 8012d62:	a802      	add	r0, sp, #8
 8012d64:	f7fb fe4f 	bl	800ea06 <mbedtls_mpi_init>
 8012d68:	a805      	add	r0, sp, #20
 8012d6a:	f7fb fe4c 	bl	800ea06 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8012d6e:	4622      	mov	r2, r4
 8012d70:	4621      	mov	r1, r4
 8012d72:	a802      	add	r0, sp, #8
 8012d74:	f7fc fa57 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8012d78:	4604      	mov	r4, r0
 8012d7a:	2800      	cmp	r0, #0
 8012d7c:	d14f      	bne.n	8012e1e <mbedtls_ecp_check_pubkey+0x11a>
 8012d7e:	4631      	mov	r1, r6
 8012d80:	a802      	add	r0, sp, #8
 8012d82:	f7fe fcdf 	bl	8011744 <ecp_modp>
 8012d86:	4604      	mov	r4, r0
 8012d88:	2800      	cmp	r0, #0
 8012d8a:	d148      	bne.n	8012e1e <mbedtls_ecp_check_pubkey+0x11a>
 8012d8c:	4f3e      	ldr	r7, [pc, #248]	; (8012e88 <mbedtls_ecp_check_pubkey+0x184>)
 8012d8e:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8012d90:	4642      	mov	r2, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8012d92:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8012d94:	4641      	mov	r1, r8
 8012d96:	a805      	add	r0, sp, #20
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8012d98:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8012d9a:	f7fc fa44 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8012d9e:	4604      	mov	r4, r0
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d13c      	bne.n	8012e1e <mbedtls_ecp_check_pubkey+0x11a>
 8012da4:	4631      	mov	r1, r6
 8012da6:	a805      	add	r0, sp, #20
 8012da8:	f7fe fccc 	bl	8011744 <ecp_modp>
 8012dac:	4604      	mov	r4, r0
 8012dae:	2800      	cmp	r0, #0
 8012db0:	d135      	bne.n	8012e1e <mbedtls_ecp_check_pubkey+0x11a>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	3301      	adds	r3, #1
 8012db6:	607b      	str	r3, [r7, #4]
    if( grp->A.p == NULL )
 8012db8:	69b3      	ldr	r3, [r6, #24]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d145      	bne.n	8012e4a <mbedtls_ecp_check_pubkey+0x146>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8012dbe:	a905      	add	r1, sp, #20
 8012dc0:	2203      	movs	r2, #3
 8012dc2:	4608      	mov	r0, r1
 8012dc4:	f7fc fa19 	bl	800f1fa <mbedtls_mpi_sub_int>
 8012dc8:	4604      	mov	r4, r0
 8012dca:	bb40      	cbnz	r0, 8012e1e <mbedtls_ecp_check_pubkey+0x11a>
 8012dcc:	9b05      	ldr	r3, [sp, #20]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	db2f      	blt.n	8012e32 <mbedtls_ecp_check_pubkey+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012dd2:	a905      	add	r1, sp, #20
 8012dd4:	4642      	mov	r2, r8
 8012dd6:	4608      	mov	r0, r1
 8012dd8:	f7fc fa25 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8012ddc:	4604      	mov	r4, r0
 8012dde:	b9f0      	cbnz	r0, 8012e1e <mbedtls_ecp_check_pubkey+0x11a>
 8012de0:	4631      	mov	r1, r6
 8012de2:	a805      	add	r0, sp, #20
 8012de4:	f7fe fcae 	bl	8011744 <ecp_modp>
 8012de8:	4604      	mov	r4, r0
 8012dea:	b9c0      	cbnz	r0, 8012e1e <mbedtls_ecp_check_pubkey+0x11a>
 8012dec:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012dee:	a905      	add	r1, sp, #20
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012df0:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012df2:	f106 021c 	add.w	r2, r6, #28
 8012df6:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012df8:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012dfa:	f7fc f9b9 	bl	800f170 <mbedtls_mpi_add_mpi>
 8012dfe:	4604      	mov	r4, r0
 8012e00:	b968      	cbnz	r0, 8012e1e <mbedtls_ecp_check_pubkey+0x11a>
 8012e02:	4629      	mov	r1, r5
 8012e04:	a805      	add	r0, sp, #20
 8012e06:	f7fc f8c4 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	da32      	bge.n	8012e74 <mbedtls_ecp_check_pubkey+0x170>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 8012e0e:	a905      	add	r1, sp, #20
 8012e10:	a802      	add	r0, sp, #8
 8012e12:	f7fc f8be 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8012e16:	4b1b      	ldr	r3, [pc, #108]	; (8012e84 <mbedtls_ecp_check_pubkey+0x180>)
 8012e18:	1e04      	subs	r4, r0, #0
 8012e1a:	bf18      	it	ne
 8012e1c:	461c      	movne	r4, r3
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 8012e1e:	a802      	add	r0, sp, #8
 8012e20:	f7fb fdf8 	bl	800ea14 <mbedtls_mpi_free>
 8012e24:	a805      	add	r0, sp, #20
 8012e26:	f7fb fdf5 	bl	800ea14 <mbedtls_mpi_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	b008      	add	sp, #32
 8012e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8012e32:	2100      	movs	r1, #0
 8012e34:	a805      	add	r0, sp, #20
 8012e36:	f7fc f8ef 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	d0c9      	beq.n	8012dd2 <mbedtls_ecp_check_pubkey+0xce>
 8012e3e:	a905      	add	r1, sp, #20
 8012e40:	462a      	mov	r2, r5
 8012e42:	4608      	mov	r0, r1
 8012e44:	f7fc f994 	bl	800f170 <mbedtls_mpi_add_mpi>
 8012e48:	e7be      	b.n	8012dc8 <mbedtls_ecp_check_pubkey+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 8012e4a:	a905      	add	r1, sp, #20
 8012e4c:	f106 0210 	add.w	r2, r6, #16
 8012e50:	4608      	mov	r0, r1
 8012e52:	f7fc f98d 	bl	800f170 <mbedtls_mpi_add_mpi>
 8012e56:	4604      	mov	r4, r0
 8012e58:	2800      	cmp	r0, #0
 8012e5a:	d1e0      	bne.n	8012e1e <mbedtls_ecp_check_pubkey+0x11a>
 8012e5c:	4629      	mov	r1, r5
 8012e5e:	a805      	add	r0, sp, #20
 8012e60:	f7fc f897 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	dbb4      	blt.n	8012dd2 <mbedtls_ecp_check_pubkey+0xce>
 8012e68:	a905      	add	r1, sp, #20
 8012e6a:	462a      	mov	r2, r5
 8012e6c:	4608      	mov	r0, r1
 8012e6e:	f7fc f942 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8012e72:	e7f0      	b.n	8012e56 <mbedtls_ecp_check_pubkey+0x152>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012e74:	a905      	add	r1, sp, #20
 8012e76:	462a      	mov	r2, r5
 8012e78:	4608      	mov	r0, r1
 8012e7a:	f7fc f93c 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 8012e7e:	e7be      	b.n	8012dfe <mbedtls_ecp_check_pubkey+0xfa>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012e80:	4c02      	ldr	r4, [pc, #8]	; (8012e8c <mbedtls_ecp_check_pubkey+0x188>)
 8012e82:	e7d2      	b.n	8012e2a <mbedtls_ecp_check_pubkey+0x126>
 8012e84:	ffffb380 	.word	0xffffb380
 8012e88:	200010c8 	.word	0x200010c8
 8012e8c:	ffffb080 	.word	0xffffb080

08012e90 <mbedtls_ecp_check_privkey>:

/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )
{
 8012e90:	b538      	push	{r3, r4, r5, lr}
 8012e92:	460c      	mov	r4, r1
 8012e94:	4605      	mov	r5, r0
        else
            return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012e96:	f7fe fbf5 	bl	8011684 <ecp_get_type>
 8012e9a:	2801      	cmp	r0, #1
 8012e9c:	4601      	mov	r1, r0
 8012e9e:	d10d      	bne.n	8012ebc <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f7fc f8b9 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012ea6:	2800      	cmp	r0, #0
 8012ea8:	db06      	blt.n	8012eb8 <mbedtls_ecp_check_privkey+0x28>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8012eaa:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8012eae:	4620      	mov	r0, r4
 8012eb0:	f7fc f86f 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	db03      	blt.n	8012ec0 <mbedtls_ecp_check_privkey+0x30>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8012eb8:	4802      	ldr	r0, [pc, #8]	; (8012ec4 <mbedtls_ecp_check_privkey+0x34>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 8012eba:	bd38      	pop	{r3, r4, r5, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012ebc:	4802      	ldr	r0, [pc, #8]	; (8012ec8 <mbedtls_ecp_check_privkey+0x38>)
 8012ebe:	e7fc      	b.n	8012eba <mbedtls_ecp_check_privkey+0x2a>
            return( 0 );
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	e7fa      	b.n	8012eba <mbedtls_ecp_check_privkey+0x2a>
 8012ec4:	ffffb380 	.word	0xffffb380
 8012ec8:	ffffb080 	.word	0xffffb080

08012ecc <mbedtls_ecp_mul>:
{
 8012ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed0:	4605      	mov	r5, r0
 8012ed2:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
 8012ed4:	f103 0018 	add.w	r0, r3, #24
 8012ed8:	2101      	movs	r1, #1
{
 8012eda:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8012ede:	4616      	mov	r6, r2
 8012ee0:	469a      	mov	sl, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
 8012ee2:	f7fc f899 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012ee6:	b9d0      	cbnz	r0, 8012f1e <mbedtls_ecp_mul+0x52>
    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||
 8012ee8:	4631      	mov	r1, r6
 8012eea:	4628      	mov	r0, r5
 8012eec:	f7ff ffd0 	bl	8012e90 <mbedtls_ecp_check_privkey>
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	b9a8      	cbnz	r0, 8012f20 <mbedtls_ecp_mul+0x54>
        ( ret = mbedtls_ecp_check_pubkey( grp, P ) ) != 0 )
 8012ef4:	4651      	mov	r1, sl
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	f7ff ff04 	bl	8012d04 <mbedtls_ecp_check_pubkey>
    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||
 8012efc:	4604      	mov	r4, r0
 8012efe:	b978      	cbnz	r0, 8012f20 <mbedtls_ecp_mul+0x54>
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012f00:	4628      	mov	r0, r5
 8012f02:	f7fe fbbf 	bl	8011684 <ecp_get_type>
 8012f06:	2801      	cmp	r0, #1
 8012f08:	d10a      	bne.n	8012f20 <mbedtls_ecp_mul+0x54>
        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
 8012f0a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8012f0e:	4653      	mov	r3, sl
 8012f10:	4632      	mov	r2, r6
 8012f12:	4639      	mov	r1, r7
 8012f14:	4628      	mov	r0, r5
}
 8012f16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
 8012f1a:	f7ff bb9b 	b.w	8012654 <ecp_mul_comb>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012f1e:	4c02      	ldr	r4, [pc, #8]	; (8012f28 <mbedtls_ecp_mul+0x5c>)
}
 8012f20:	4620      	mov	r0, r4
 8012f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f26:	bf00      	nop
 8012f28:	ffffb080 	.word	0xffffb080

08012f2c <mbedtls_ecp_mul_shortcuts>:
{
 8012f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f2e:	4607      	mov	r7, r0
 8012f30:	b085      	sub	sp, #20
 8012f32:	460c      	mov	r4, r1
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8012f34:	4610      	mov	r0, r2
 8012f36:	2101      	movs	r1, #1
{
 8012f38:	4615      	mov	r5, r2
 8012f3a:	461e      	mov	r6, r3
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8012f3c:	f7fc f86c 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012f40:	b930      	cbnz	r0, 8012f50 <mbedtls_ecp_mul_shortcuts+0x24>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8012f42:	4631      	mov	r1, r6
 8012f44:	4620      	mov	r0, r4
}
 8012f46:	b005      	add	sp, #20
 8012f48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8012f4c:	f7ff b91e 	b.w	801218c <mbedtls_ecp_copy>
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 8012f50:	f04f 31ff 	mov.w	r1, #4294967295
 8012f54:	4628      	mov	r0, r5
 8012f56:	f7fc f85f 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012f5a:	b9a0      	cbnz	r0, 8012f86 <mbedtls_ecp_mul_shortcuts+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	4620      	mov	r0, r4
 8012f60:	f7ff f914 	bl	801218c <mbedtls_ecp_copy>
 8012f64:	b9c0      	cbnz	r0, 8012f98 <mbedtls_ecp_mul_shortcuts+0x6c>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 8012f66:	f104 020c 	add.w	r2, r4, #12
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	4610      	mov	r0, r2
 8012f6e:	9203      	str	r2, [sp, #12]
 8012f70:	f7fc f852 	bl	800f018 <mbedtls_mpi_cmp_int>
 8012f74:	9a03      	ldr	r2, [sp, #12]
 8012f76:	b178      	cbz	r0, 8012f98 <mbedtls_ecp_mul_shortcuts+0x6c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8012f78:	1d39      	adds	r1, r7, #4
 8012f7a:	4610      	mov	r0, r2
}
 8012f7c:	b005      	add	sp, #20
 8012f7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8012f82:	f7fc b917 	b.w	800f1b4 <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );
 8012f86:	2300      	movs	r3, #0
 8012f88:	e9cd 3300 	strd	r3, r3, [sp]
 8012f8c:	462a      	mov	r2, r5
 8012f8e:	4633      	mov	r3, r6
 8012f90:	4621      	mov	r1, r4
 8012f92:	4638      	mov	r0, r7
 8012f94:	f7ff ff9a 	bl	8012ecc <mbedtls_ecp_mul>
}
 8012f98:	b005      	add	sp, #20
 8012f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012f9c <mbedtls_ecp_muladd>:
{
 8012f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f9e:	b08b      	sub	sp, #44	; 0x2c
 8012fa0:	4605      	mov	r5, r0
 8012fa2:	460e      	mov	r6, r1
 8012fa4:	4614      	mov	r4, r2
 8012fa6:	461f      	mov	r7, r3
    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 8012fa8:	f7fe fb6c 	bl	8011684 <ecp_get_type>
 8012fac:	2801      	cmp	r0, #1
 8012fae:	d125      	bne.n	8012ffc <mbedtls_ecp_muladd+0x60>
    if( pt == NULL )
 8012fb0:	a801      	add	r0, sp, #4
 8012fb2:	f7ff f835 	bl	8012020 <mbedtls_ecp_point_init.part.0>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );
 8012fb6:	4622      	mov	r2, r4
 8012fb8:	463b      	mov	r3, r7
 8012fba:	a901      	add	r1, sp, #4
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	f7ff ffb5 	bl	8012f2c <mbedtls_ecp_mul_shortcuts>
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	b9a0      	cbnz	r0, 8012ff0 <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );
 8012fc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012fca:	4631      	mov	r1, r6
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f7ff ffad 	bl	8012f2c <mbedtls_ecp_mul_shortcuts>
 8012fd2:	4604      	mov	r4, r0
 8012fd4:	b960      	cbnz	r0, 8012ff0 <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, &mP, R ) );
 8012fd6:	4633      	mov	r3, r6
 8012fd8:	aa01      	add	r2, sp, #4
 8012fda:	4631      	mov	r1, r6
 8012fdc:	4628      	mov	r0, r5
 8012fde:	f7ff f903 	bl	80121e8 <ecp_add_mixed>
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	b920      	cbnz	r0, 8012ff0 <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
 8012fe6:	4631      	mov	r1, r6
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f7fe fe6f 	bl	8011ccc <ecp_normalize_jac>
 8012fee:	4604      	mov	r4, r0
    if( pt == NULL )
 8012ff0:	a801      	add	r0, sp, #4
 8012ff2:	f7ff f823 	bl	801203c <mbedtls_ecp_point_free.part.0>
}
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	b00b      	add	sp, #44	; 0x2c
 8012ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012ffc:	4c00      	ldr	r4, [pc, #0]	; (8013000 <mbedtls_ecp_muladd+0x64>)
 8012ffe:	e7fa      	b.n	8012ff6 <mbedtls_ecp_muladd+0x5a>
 8013000:	ffffb180 	.word	0xffffb180

08013004 <mbedtls_ecp_gen_keypair_base>:
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8013004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013008:	b095      	sub	sp, #84	; 0x54
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 801300a:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
{
 801300c:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8013010:	4605      	mov	r5, r0
 8013012:	4688      	mov	r8, r1
 8013014:	4614      	mov	r4, r2
 8013016:	461f      	mov	r7, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
    }
    else
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8013018:	f7fe fb34 	bl	8011684 <ecp_get_type>
    size_t n_size = ( grp->nbits + 7 ) / 8;
 801301c:	3607      	adds	r6, #7
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 801301e:	2801      	cmp	r0, #1
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8013020:	ea4f 0bd6 	mov.w	fp, r6, lsr #3
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8013024:	d003      	beq.n	801302e <mbedtls_ecp_gen_keypair_base+0x2a>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
    }
    else
#endif /* ECP_SHORTWEIERSTRASS */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8013026:	481d      	ldr	r0, [pc, #116]	; (801309c <mbedtls_ecp_gen_keypair_base+0x98>)
cleanup:
    if( ret != 0 )
        return( ret );

    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
}
 8013028:	b015      	add	sp, #84	; 0x54
 801302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801302e:	f04f 091f 	mov.w	r9, #31
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8013032:	f026 0607 	bic.w	r6, r6, #7
            MBEDTLS_MPI_CHK( f_rng( p_rng, rnd, n_size ) );
 8013036:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013038:	465a      	mov	r2, fp
 801303a:	a903      	add	r1, sp, #12
 801303c:	4650      	mov	r0, sl
 801303e:	4798      	blx	r3
 8013040:	2800      	cmp	r0, #0
 8013042:	d1f1      	bne.n	8013028 <mbedtls_ecp_gen_keypair_base+0x24>
            MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( d, rnd, n_size ) );
 8013044:	465a      	mov	r2, fp
 8013046:	a903      	add	r1, sp, #12
 8013048:	4620      	mov	r0, r4
 801304a:	f7fb fe2a 	bl	800eca2 <mbedtls_mpi_read_binary>
 801304e:	2800      	cmp	r0, #0
 8013050:	d1ea      	bne.n	8013028 <mbedtls_ecp_gen_keypair_base+0x24>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8013052:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8013054:	4620      	mov	r0, r4
 8013056:	1a71      	subs	r1, r6, r1
 8013058:	f7fb fec7 	bl	800edea <mbedtls_mpi_shift_r>
 801305c:	2800      	cmp	r0, #0
 801305e:	d1e3      	bne.n	8013028 <mbedtls_ecp_gen_keypair_base+0x24>
            if( ++count > 30 )
 8013060:	f1b9 0901 	subs.w	r9, r9, #1
 8013064:	d102      	bne.n	801306c <mbedtls_ecp_gen_keypair_base+0x68>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8013066:	f5a0 409a 	sub.w	r0, r0, #19712	; 0x4d00
 801306a:	e7dd      	b.n	8013028 <mbedtls_ecp_gen_keypair_base+0x24>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 801306c:	2101      	movs	r1, #1
 801306e:	4620      	mov	r0, r4
 8013070:	f7fb ffd2 	bl	800f018 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 8013074:	2800      	cmp	r0, #0
 8013076:	dbde      	blt.n	8013036 <mbedtls_ecp_gen_keypair_base+0x32>
 8013078:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 801307c:	4620      	mov	r0, r4
 801307e:	f7fb ff88 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8013082:	2800      	cmp	r0, #0
 8013084:	dad7      	bge.n	8013036 <mbedtls_ecp_gen_keypair_base+0x32>
    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 8013086:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013088:	9300      	str	r3, [sp, #0]
 801308a:	f8cd a004 	str.w	sl, [sp, #4]
 801308e:	4643      	mov	r3, r8
 8013090:	4622      	mov	r2, r4
 8013092:	4639      	mov	r1, r7
 8013094:	4628      	mov	r0, r5
 8013096:	f7ff ff19 	bl	8012ecc <mbedtls_ecp_mul>
 801309a:	e7c5      	b.n	8013028 <mbedtls_ecp_gen_keypair_base+0x24>
 801309c:	ffffb080 	.word	0xffffb080

080130a0 <mbedtls_ecp_gen_keypair>:
 */
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
                             mbedtls_mpi *d, mbedtls_ecp_point *Q,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 80130a0:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
 80130a2:	9c04      	ldr	r4, [sp, #16]
 80130a4:	e9cd 3400 	strd	r3, r4, [sp]
 80130a8:	4613      	mov	r3, r2
 80130aa:	460a      	mov	r2, r1
 80130ac:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80130b0:	f7ff ffa8 	bl	8013004 <mbedtls_ecp_gen_keypair_base>
}
 80130b4:	b002      	add	sp, #8
 80130b6:	bd10      	pop	{r4, pc}

080130b8 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 80130b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 80130bc:	7803      	ldrb	r3, [r0, #0]
{
 80130be:	b0aa      	sub	sp, #168	; 0xa8
 80130c0:	4605      	mov	r5, r0
 80130c2:	460c      	mov	r4, r1
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 80130c4:	b923      	cbnz	r3, 80130d0 <mbedtls_ecp_check_pub_priv+0x18>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80130c6:	4c29      	ldr	r4, [pc, #164]	; (801316c <mbedtls_ecp_check_pub_priv+0xb4>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
 80130c8:	4620      	mov	r0, r4
 80130ca:	b02a      	add	sp, #168	; 0xa8
 80130cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 80130d0:	780a      	ldrb	r2, [r1, #0]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d1f7      	bne.n	80130c6 <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 80130d6:	f101 0888 	add.w	r8, r1, #136	; 0x88
 80130da:	4641      	mov	r1, r8
 80130dc:	3088      	adds	r0, #136	; 0x88
 80130de:	f7fb ff58 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
 80130e2:	2800      	cmp	r0, #0
 80130e4:	d1ef      	bne.n	80130c6 <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 80130e6:	f104 0794 	add.w	r7, r4, #148	; 0x94
 80130ea:	4639      	mov	r1, r7
 80130ec:	f105 0094 	add.w	r0, r5, #148	; 0x94
 80130f0:	f7fb ff4f 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 80130f4:	2800      	cmp	r0, #0
 80130f6:	d1e6      	bne.n	80130c6 <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 80130f8:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 80130fc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8013100:	4631      	mov	r1, r6
 8013102:	f7fb ff46 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 8013106:	4605      	mov	r5, r0
 8013108:	2800      	cmp	r0, #0
 801310a:	d1dc      	bne.n	80130c6 <mbedtls_ecp_check_pub_priv+0xe>
    if( pt == NULL )
 801310c:	a802      	add	r0, sp, #8
 801310e:	f7fe ff87 	bl	8012020 <mbedtls_ecp_point_init.part.0>
    memset( grp, 0, sizeof( mbedtls_ecp_group ) );
 8013112:	227c      	movs	r2, #124	; 0x7c
 8013114:	4629      	mov	r1, r5
 8013116:	a80b      	add	r0, sp, #44	; 0x2c
 8013118:	f00f f9da 	bl	80224d0 <memset>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 801311c:	4621      	mov	r1, r4
 801311e:	a80b      	add	r0, sp, #44	; 0x2c
 8013120:	f7ff f84a 	bl	80121b8 <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 8013124:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8013128:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 801312c:	e9cd 5500 	strd	r5, r5, [sp]
 8013130:	a902      	add	r1, sp, #8
 8013132:	a80b      	add	r0, sp, #44	; 0x2c
 8013134:	f7ff feca 	bl	8012ecc <mbedtls_ecp_mul>
 8013138:	4604      	mov	r4, r0
 801313a:	b980      	cbnz	r0, 801315e <mbedtls_ecp_check_pub_priv+0xa6>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 801313c:	4641      	mov	r1, r8
 801313e:	a802      	add	r0, sp, #8
 8013140:	f7fb ff27 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8013144:	b950      	cbnz	r0, 801315c <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 8013146:	4639      	mov	r1, r7
 8013148:	a805      	add	r0, sp, #20
 801314a:	f7fb ff22 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 801314e:	b928      	cbnz	r0, 801315c <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 8013150:	4631      	mov	r1, r6
 8013152:	a808      	add	r0, sp, #32
 8013154:	f7fb ff1d 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 8013158:	4604      	mov	r4, r0
 801315a:	b100      	cbz	r0, 801315e <mbedtls_ecp_check_pub_priv+0xa6>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 801315c:	4c03      	ldr	r4, [pc, #12]	; (801316c <mbedtls_ecp_check_pub_priv+0xb4>)
    if( pt == NULL )
 801315e:	a802      	add	r0, sp, #8
 8013160:	f7fe ff6c 	bl	801203c <mbedtls_ecp_point_free.part.0>
    mbedtls_ecp_group_free( &grp );
 8013164:	a80b      	add	r0, sp, #44	; 0x2c
 8013166:	f7fe ffcb 	bl	8012100 <mbedtls_ecp_group_free>
    return( ret );
 801316a:	e7ad      	b.n	80130c8 <mbedtls_ecp_check_pub_priv+0x10>
 801316c:	ffffb080 	.word	0xffffb080

08013170 <add32>:
/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *dst += src;
 8013170:	6803      	ldr	r3, [r0, #0]
 8013172:	1859      	adds	r1, r3, r1
 8013174:	6001      	str	r1, [r0, #0]
    *carry += ( *dst < src );
 8013176:	7811      	ldrb	r1, [r2, #0]
 8013178:	bf2c      	ite	cs
 801317a:	2301      	movcs	r3, #1
 801317c:	2300      	movcc	r3, #0
 801317e:	440b      	add	r3, r1
 8013180:	7013      	strb	r3, [r2, #0]
}
 8013182:	4770      	bx	lr

08013184 <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
 8013184:	7813      	ldrb	r3, [r2, #0]
{
 8013186:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
 8013188:	6804      	ldr	r4, [r0, #0]
 801318a:	428c      	cmp	r4, r1
 801318c:	bf38      	it	cc
 801318e:	3b01      	subcc	r3, #1
 8013190:	7013      	strb	r3, [r2, #0]
    *dst -= src;
 8013192:	6803      	ldr	r3, [r0, #0]
 8013194:	1a59      	subs	r1, r3, r1
 8013196:	6001      	str	r1, [r0, #0]
}
 8013198:	bd10      	pop	{r4, pc}

0801319a <fix_negative.isra.0>:

/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
 801319a:	b538      	push	{r3, r4, r5, lr}
 801319c:	4613      	mov	r3, r2
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 801319e:	6852      	ldr	r2, [r2, #4]
 80131a0:	689d      	ldr	r5, [r3, #8]
 80131a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80131a6:	3a01      	subs	r2, #1
 80131a8:	4249      	negs	r1, r1
 80131aa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 80131ae:	4602      	mov	r2, r0
 80131b0:	4619      	mov	r1, r3
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
 80131b2:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 80131b4:	f7fb ff9f 	bl	800f0f6 <mbedtls_mpi_sub_abs>
 80131b8:	b910      	cbnz	r0, 80131c0 <fix_negative.isra.0+0x26>
    N->s = -1;
 80131ba:	f04f 33ff 	mov.w	r3, #4294967295
 80131be:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 80131c0:	bd38      	pop	{r3, r4, r5, pc}

080131c2 <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 80131c2:	b570      	push	{r4, r5, r6, lr}
    INIT( 384 );
 80131c4:	230d      	movs	r3, #13
{
 80131c6:	b092      	sub	sp, #72	; 0x48
    INIT( 384 );
 80131c8:	2201      	movs	r2, #1
 80131ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131ce:	2100      	movs	r1, #0
{
 80131d0:	4604      	mov	r4, r0
    INIT( 384 );
 80131d2:	2234      	movs	r2, #52	; 0x34
 80131d4:	a805      	add	r0, sp, #20
 80131d6:	f88d 1003 	strb.w	r1, [sp, #3]
 80131da:	9004      	str	r0, [sp, #16]
 80131dc:	f00f f978 	bl	80224d0 <memset>
 80131e0:	2118      	movs	r1, #24
 80131e2:	4620      	mov	r0, r4
 80131e4:	f7fb fc2e 	bl	800ea44 <mbedtls_mpi_grow>
 80131e8:	4605      	mov	r5, r0
 80131ea:	2800      	cmp	r0, #0
 80131ec:	f040 82b4 	bne.w	8013758 <ecp_mod_p384+0x596>
 80131f0:	68a3      	ldr	r3, [r4, #8]
 80131f2:	681a      	ldr	r2, [r3, #0]

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 80131f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
    INIT( 384 );
 80131f6:	9201      	str	r2, [sp, #4]
    ADD( 12 ); ADD( 21 ); ADD( 20 );
 80131f8:	a801      	add	r0, sp, #4
 80131fa:	f10d 0203 	add.w	r2, sp, #3
 80131fe:	f7ff ffb7 	bl	8013170 <add32>
 8013202:	68a3      	ldr	r3, [r4, #8]
 8013204:	f10d 0203 	add.w	r2, sp, #3
 8013208:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801320a:	a801      	add	r0, sp, #4
 801320c:	f7ff ffb0 	bl	8013170 <add32>
 8013210:	68a3      	ldr	r3, [r4, #8]
 8013212:	f10d 0203 	add.w	r2, sp, #3
 8013216:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013218:	a801      	add	r0, sp, #4
 801321a:	f7ff ffa9 	bl	8013170 <add32>
    SUB( 23 );                                              NEXT; // A0
 801321e:	68a3      	ldr	r3, [r4, #8]
 8013220:	f10d 0203 	add.w	r2, sp, #3
 8013224:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013226:	a801      	add	r0, sp, #4
 8013228:	f7ff ffac 	bl	8013184 <sub32>
 801322c:	68a3      	ldr	r3, [r4, #8]
 801322e:	9a01      	ldr	r2, [sp, #4]
 8013230:	601a      	str	r2, [r3, #0]
 8013232:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013236:	685b      	ldr	r3, [r3, #4]
 8013238:	9301      	str	r3, [sp, #4]
 801323a:	2900      	cmp	r1, #0
 801323c:	f88d 5003 	strb.w	r5, [sp, #3]
 8013240:	f10d 0203 	add.w	r2, sp, #3
 8013244:	f280 828b 	bge.w	801375e <ecp_mod_p384+0x59c>
 8013248:	4249      	negs	r1, r1
 801324a:	a801      	add	r0, sp, #4
 801324c:	f7ff ff9a 	bl	8013184 <sub32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 8013250:	68a3      	ldr	r3, [r4, #8]
 8013252:	f10d 0203 	add.w	r2, sp, #3
 8013256:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013258:	a801      	add	r0, sp, #4
 801325a:	f7ff ff89 	bl	8013170 <add32>
 801325e:	68a3      	ldr	r3, [r4, #8]
 8013260:	f10d 0203 	add.w	r2, sp, #3
 8013264:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013266:	a801      	add	r0, sp, #4
 8013268:	f7ff ff82 	bl	8013170 <add32>
 801326c:	68a3      	ldr	r3, [r4, #8]
 801326e:	f10d 0203 	add.w	r2, sp, #3
 8013272:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013274:	a801      	add	r0, sp, #4
 8013276:	f7ff ff7b 	bl	8013170 <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 801327a:	68a3      	ldr	r3, [r4, #8]
 801327c:	f10d 0203 	add.w	r2, sp, #3
 8013280:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013282:	a801      	add	r0, sp, #4
 8013284:	f7ff ff7e 	bl	8013184 <sub32>
 8013288:	68a3      	ldr	r3, [r4, #8]
 801328a:	f10d 0203 	add.w	r2, sp, #3
 801328e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013290:	a801      	add	r0, sp, #4
 8013292:	f7ff ff77 	bl	8013184 <sub32>
 8013296:	68a3      	ldr	r3, [r4, #8]
 8013298:	9a01      	ldr	r2, [sp, #4]
 801329a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801329e:	605a      	str	r2, [r3, #4]
 80132a0:	689b      	ldr	r3, [r3, #8]
 80132a2:	9301      	str	r3, [sp, #4]
 80132a4:	2300      	movs	r3, #0
 80132a6:	4299      	cmp	r1, r3
 80132a8:	f88d 3003 	strb.w	r3, [sp, #3]
 80132ac:	f10d 0203 	add.w	r2, sp, #3
 80132b0:	f280 8259 	bge.w	8013766 <ecp_mod_p384+0x5a4>
 80132b4:	4249      	negs	r1, r1
 80132b6:	a801      	add	r0, sp, #4
 80132b8:	f7ff ff64 	bl	8013184 <sub32>

    ADD( 14 ); ADD( 23 );
 80132bc:	68a3      	ldr	r3, [r4, #8]
 80132be:	f10d 0203 	add.w	r2, sp, #3
 80132c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80132c4:	a801      	add	r0, sp, #4
 80132c6:	f7ff ff53 	bl	8013170 <add32>
 80132ca:	68a3      	ldr	r3, [r4, #8]
 80132cc:	f10d 0203 	add.w	r2, sp, #3
 80132d0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80132d2:	a801      	add	r0, sp, #4
 80132d4:	f7ff ff4c 	bl	8013170 <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 80132d8:	68a3      	ldr	r3, [r4, #8]
 80132da:	f10d 0203 	add.w	r2, sp, #3
 80132de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80132e0:	a801      	add	r0, sp, #4
 80132e2:	f7ff ff4f 	bl	8013184 <sub32>
 80132e6:	68a3      	ldr	r3, [r4, #8]
 80132e8:	f10d 0203 	add.w	r2, sp, #3
 80132ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80132ee:	a801      	add	r0, sp, #4
 80132f0:	f7ff ff48 	bl	8013184 <sub32>
 80132f4:	68a3      	ldr	r3, [r4, #8]
 80132f6:	9a01      	ldr	r2, [sp, #4]
 80132f8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80132fc:	609a      	str	r2, [r3, #8]
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	9301      	str	r3, [sp, #4]
 8013302:	2300      	movs	r3, #0
 8013304:	4299      	cmp	r1, r3
 8013306:	f88d 3003 	strb.w	r3, [sp, #3]
 801330a:	f10d 0203 	add.w	r2, sp, #3
 801330e:	f280 822e 	bge.w	801376e <ecp_mod_p384+0x5ac>
 8013312:	4249      	negs	r1, r1
 8013314:	a801      	add	r0, sp, #4
 8013316:	f7ff ff35 	bl	8013184 <sub32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 801331a:	68a3      	ldr	r3, [r4, #8]
 801331c:	f10d 0203 	add.w	r2, sp, #3
 8013320:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013322:	a801      	add	r0, sp, #4
 8013324:	f7ff ff24 	bl	8013170 <add32>
 8013328:	68a3      	ldr	r3, [r4, #8]
 801332a:	f10d 0203 	add.w	r2, sp, #3
 801332e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013330:	a801      	add	r0, sp, #4
 8013332:	f7ff ff1d 	bl	8013170 <add32>
 8013336:	68a3      	ldr	r3, [r4, #8]
 8013338:	f10d 0203 	add.w	r2, sp, #3
 801333c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801333e:	a801      	add	r0, sp, #4
 8013340:	f7ff ff16 	bl	8013170 <add32>
 8013344:	68a3      	ldr	r3, [r4, #8]
 8013346:	f10d 0203 	add.w	r2, sp, #3
 801334a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801334c:	a801      	add	r0, sp, #4
 801334e:	f7ff ff0f 	bl	8013170 <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 8013352:	68a3      	ldr	r3, [r4, #8]
 8013354:	f10d 0203 	add.w	r2, sp, #3
 8013358:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801335a:	a801      	add	r0, sp, #4
 801335c:	f7ff ff12 	bl	8013184 <sub32>
 8013360:	68a3      	ldr	r3, [r4, #8]
 8013362:	f10d 0203 	add.w	r2, sp, #3
 8013366:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013368:	a801      	add	r0, sp, #4
 801336a:	f7ff ff0b 	bl	8013184 <sub32>
 801336e:	68a3      	ldr	r3, [r4, #8]
 8013370:	f10d 0203 	add.w	r2, sp, #3
 8013374:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013376:	a801      	add	r0, sp, #4
 8013378:	f7ff ff04 	bl	8013184 <sub32>
 801337c:	68a3      	ldr	r3, [r4, #8]
 801337e:	9a01      	ldr	r2, [sp, #4]
 8013380:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013384:	60da      	str	r2, [r3, #12]
 8013386:	691b      	ldr	r3, [r3, #16]
 8013388:	9301      	str	r3, [sp, #4]
 801338a:	2300      	movs	r3, #0
 801338c:	4299      	cmp	r1, r3
 801338e:	f88d 3003 	strb.w	r3, [sp, #3]
 8013392:	f10d 0203 	add.w	r2, sp, #3
 8013396:	f280 81ee 	bge.w	8013776 <ecp_mod_p384+0x5b4>
 801339a:	4249      	negs	r1, r1
 801339c:	a801      	add	r0, sp, #4
 801339e:	f7ff fef1 	bl	8013184 <sub32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 80133a2:	68a3      	ldr	r3, [r4, #8]
 80133a4:	f10d 0203 	add.w	r2, sp, #3
 80133a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80133aa:	a801      	add	r0, sp, #4
 80133ac:	f7ff fee0 	bl	8013170 <add32>
 80133b0:	68a3      	ldr	r3, [r4, #8]
 80133b2:	f10d 0203 	add.w	r2, sp, #3
 80133b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80133b8:	a801      	add	r0, sp, #4
 80133ba:	f7ff fed9 	bl	8013170 <add32>
 80133be:	68a3      	ldr	r3, [r4, #8]
 80133c0:	f10d 0203 	add.w	r2, sp, #3
 80133c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80133c6:	a801      	add	r0, sp, #4
 80133c8:	f7ff fed2 	bl	8013170 <add32>
 80133cc:	68a3      	ldr	r3, [r4, #8]
 80133ce:	f10d 0203 	add.w	r2, sp, #3
 80133d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80133d4:	a801      	add	r0, sp, #4
 80133d6:	f7ff fecb 	bl	8013170 <add32>
 80133da:	68a3      	ldr	r3, [r4, #8]
 80133dc:	f10d 0203 	add.w	r2, sp, #3
 80133e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80133e2:	a801      	add	r0, sp, #4
 80133e4:	f7ff fec4 	bl	8013170 <add32>
 80133e8:	68a3      	ldr	r3, [r4, #8]
 80133ea:	f10d 0203 	add.w	r2, sp, #3
 80133ee:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80133f0:	a801      	add	r0, sp, #4
 80133f2:	f7ff febd 	bl	8013170 <add32>
 80133f6:	68a3      	ldr	r3, [r4, #8]
 80133f8:	f10d 0203 	add.w	r2, sp, #3
 80133fc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80133fe:	a801      	add	r0, sp, #4
 8013400:	f7ff feb6 	bl	8013170 <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 8013404:	68a3      	ldr	r3, [r4, #8]
 8013406:	f10d 0203 	add.w	r2, sp, #3
 801340a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801340c:	a801      	add	r0, sp, #4
 801340e:	f7ff feb9 	bl	8013184 <sub32>
 8013412:	68a3      	ldr	r3, [r4, #8]
 8013414:	f10d 0203 	add.w	r2, sp, #3
 8013418:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801341a:	a801      	add	r0, sp, #4
 801341c:	f7ff feb2 	bl	8013184 <sub32>
 8013420:	68a3      	ldr	r3, [r4, #8]
 8013422:	f10d 0203 	add.w	r2, sp, #3
 8013426:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013428:	a801      	add	r0, sp, #4
 801342a:	f7ff feab 	bl	8013184 <sub32>
 801342e:	68a3      	ldr	r3, [r4, #8]
 8013430:	9a01      	ldr	r2, [sp, #4]
 8013432:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013436:	611a      	str	r2, [r3, #16]
 8013438:	695b      	ldr	r3, [r3, #20]
 801343a:	9301      	str	r3, [sp, #4]
 801343c:	2300      	movs	r3, #0
 801343e:	4299      	cmp	r1, r3
 8013440:	f88d 3003 	strb.w	r3, [sp, #3]
 8013444:	f10d 0203 	add.w	r2, sp, #3
 8013448:	f280 8199 	bge.w	801377e <ecp_mod_p384+0x5bc>
 801344c:	4249      	negs	r1, r1
 801344e:	a801      	add	r0, sp, #4
 8013450:	f7ff fe98 	bl	8013184 <sub32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 8013454:	68a3      	ldr	r3, [r4, #8]
 8013456:	f10d 0203 	add.w	r2, sp, #3
 801345a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801345c:	a801      	add	r0, sp, #4
 801345e:	f7ff fe87 	bl	8013170 <add32>
 8013462:	68a3      	ldr	r3, [r4, #8]
 8013464:	f10d 0203 	add.w	r2, sp, #3
 8013468:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801346a:	a801      	add	r0, sp, #4
 801346c:	f7ff fe80 	bl	8013170 <add32>
 8013470:	68a3      	ldr	r3, [r4, #8]
 8013472:	f10d 0203 	add.w	r2, sp, #3
 8013476:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8013478:	a801      	add	r0, sp, #4
 801347a:	f7ff fe79 	bl	8013170 <add32>
 801347e:	68a3      	ldr	r3, [r4, #8]
 8013480:	f10d 0203 	add.w	r2, sp, #3
 8013484:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013486:	a801      	add	r0, sp, #4
 8013488:	f7ff fe72 	bl	8013170 <add32>
 801348c:	68a3      	ldr	r3, [r4, #8]
 801348e:	f10d 0203 	add.w	r2, sp, #3
 8013492:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013494:	a801      	add	r0, sp, #4
 8013496:	f7ff fe6b 	bl	8013170 <add32>
 801349a:	68a3      	ldr	r3, [r4, #8]
 801349c:	f10d 0203 	add.w	r2, sp, #3
 80134a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80134a2:	a801      	add	r0, sp, #4
 80134a4:	f7ff fe64 	bl	8013170 <add32>
 80134a8:	68a3      	ldr	r3, [r4, #8]
 80134aa:	f10d 0203 	add.w	r2, sp, #3
 80134ae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80134b0:	a801      	add	r0, sp, #4
 80134b2:	f7ff fe5d 	bl	8013170 <add32>
    SUB( 16 );                                              NEXT; // A5
 80134b6:	68a3      	ldr	r3, [r4, #8]
 80134b8:	f10d 0203 	add.w	r2, sp, #3
 80134bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80134be:	a801      	add	r0, sp, #4
 80134c0:	f7ff fe60 	bl	8013184 <sub32>
 80134c4:	68a3      	ldr	r3, [r4, #8]
 80134c6:	9a01      	ldr	r2, [sp, #4]
 80134c8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80134cc:	615a      	str	r2, [r3, #20]
 80134ce:	699b      	ldr	r3, [r3, #24]
 80134d0:	9301      	str	r3, [sp, #4]
 80134d2:	2300      	movs	r3, #0
 80134d4:	4299      	cmp	r1, r3
 80134d6:	f88d 3003 	strb.w	r3, [sp, #3]
 80134da:	f10d 0203 	add.w	r2, sp, #3
 80134de:	f280 8152 	bge.w	8013786 <ecp_mod_p384+0x5c4>
 80134e2:	4249      	negs	r1, r1
 80134e4:	a801      	add	r0, sp, #4
 80134e6:	f7ff fe4d 	bl	8013184 <sub32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 80134ea:	68a3      	ldr	r3, [r4, #8]
 80134ec:	f10d 0203 	add.w	r2, sp, #3
 80134f0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80134f2:	a801      	add	r0, sp, #4
 80134f4:	f7ff fe3c 	bl	8013170 <add32>
 80134f8:	68a3      	ldr	r3, [r4, #8]
 80134fa:	f10d 0203 	add.w	r2, sp, #3
 80134fe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013500:	a801      	add	r0, sp, #4
 8013502:	f7ff fe35 	bl	8013170 <add32>
 8013506:	68a3      	ldr	r3, [r4, #8]
 8013508:	f10d 0203 	add.w	r2, sp, #3
 801350c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801350e:	a801      	add	r0, sp, #4
 8013510:	f7ff fe2e 	bl	8013170 <add32>
 8013514:	68a3      	ldr	r3, [r4, #8]
 8013516:	f10d 0203 	add.w	r2, sp, #3
 801351a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801351c:	a801      	add	r0, sp, #4
 801351e:	f7ff fe27 	bl	8013170 <add32>
 8013522:	68a3      	ldr	r3, [r4, #8]
 8013524:	f10d 0203 	add.w	r2, sp, #3
 8013528:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801352a:	a801      	add	r0, sp, #4
 801352c:	f7ff fe20 	bl	8013170 <add32>
 8013530:	68a3      	ldr	r3, [r4, #8]
 8013532:	f10d 0203 	add.w	r2, sp, #3
 8013536:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013538:	a801      	add	r0, sp, #4
 801353a:	f7ff fe19 	bl	8013170 <add32>
    SUB( 17 );                                              NEXT; // A6
 801353e:	68a3      	ldr	r3, [r4, #8]
 8013540:	f10d 0203 	add.w	r2, sp, #3
 8013544:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8013546:	a801      	add	r0, sp, #4
 8013548:	f7ff fe1c 	bl	8013184 <sub32>
 801354c:	68a3      	ldr	r3, [r4, #8]
 801354e:	9a01      	ldr	r2, [sp, #4]
 8013550:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013554:	619a      	str	r2, [r3, #24]
 8013556:	69db      	ldr	r3, [r3, #28]
 8013558:	9301      	str	r3, [sp, #4]
 801355a:	2300      	movs	r3, #0
 801355c:	4299      	cmp	r1, r3
 801355e:	f88d 3003 	strb.w	r3, [sp, #3]
 8013562:	f10d 0203 	add.w	r2, sp, #3
 8013566:	f280 8112 	bge.w	801378e <ecp_mod_p384+0x5cc>
 801356a:	4249      	negs	r1, r1
 801356c:	a801      	add	r0, sp, #4
 801356e:	f7ff fe09 	bl	8013184 <sub32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 8013572:	68a3      	ldr	r3, [r4, #8]
 8013574:	f10d 0203 	add.w	r2, sp, #3
 8013578:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801357a:	a801      	add	r0, sp, #4
 801357c:	f7ff fdf8 	bl	8013170 <add32>
 8013580:	68a3      	ldr	r3, [r4, #8]
 8013582:	f10d 0203 	add.w	r2, sp, #3
 8013586:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8013588:	a801      	add	r0, sp, #4
 801358a:	f7ff fdf1 	bl	8013170 <add32>
 801358e:	68a3      	ldr	r3, [r4, #8]
 8013590:	f10d 0203 	add.w	r2, sp, #3
 8013594:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013596:	a801      	add	r0, sp, #4
 8013598:	f7ff fdea 	bl	8013170 <add32>
 801359c:	68a3      	ldr	r3, [r4, #8]
 801359e:	f10d 0203 	add.w	r2, sp, #3
 80135a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80135a4:	a801      	add	r0, sp, #4
 80135a6:	f7ff fde3 	bl	8013170 <add32>
    SUB( 18 );                                              NEXT; // A7
 80135aa:	68a3      	ldr	r3, [r4, #8]
 80135ac:	f10d 0203 	add.w	r2, sp, #3
 80135b0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80135b2:	a801      	add	r0, sp, #4
 80135b4:	f7ff fde6 	bl	8013184 <sub32>
 80135b8:	68a3      	ldr	r3, [r4, #8]
 80135ba:	9a01      	ldr	r2, [sp, #4]
 80135bc:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80135c0:	61da      	str	r2, [r3, #28]
 80135c2:	6a1b      	ldr	r3, [r3, #32]
 80135c4:	9301      	str	r3, [sp, #4]
 80135c6:	2300      	movs	r3, #0
 80135c8:	4299      	cmp	r1, r3
 80135ca:	f88d 3003 	strb.w	r3, [sp, #3]
 80135ce:	f10d 0203 	add.w	r2, sp, #3
 80135d2:	f280 80e0 	bge.w	8013796 <ecp_mod_p384+0x5d4>
 80135d6:	4249      	negs	r1, r1
 80135d8:	a801      	add	r0, sp, #4
 80135da:	f7ff fdd3 	bl	8013184 <sub32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 80135de:	68a3      	ldr	r3, [r4, #8]
 80135e0:	f10d 0203 	add.w	r2, sp, #3
 80135e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80135e6:	a801      	add	r0, sp, #4
 80135e8:	f7ff fdc2 	bl	8013170 <add32>
 80135ec:	68a3      	ldr	r3, [r4, #8]
 80135ee:	f10d 0203 	add.w	r2, sp, #3
 80135f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80135f4:	a801      	add	r0, sp, #4
 80135f6:	f7ff fdbb 	bl	8013170 <add32>
 80135fa:	68a3      	ldr	r3, [r4, #8]
 80135fc:	f10d 0203 	add.w	r2, sp, #3
 8013600:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8013602:	a801      	add	r0, sp, #4
 8013604:	f7ff fdb4 	bl	8013170 <add32>
    SUB( 19 );                                              NEXT; // A8
 8013608:	68a3      	ldr	r3, [r4, #8]
 801360a:	f10d 0203 	add.w	r2, sp, #3
 801360e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013610:	a801      	add	r0, sp, #4
 8013612:	f7ff fdb7 	bl	8013184 <sub32>
 8013616:	68a3      	ldr	r3, [r4, #8]
 8013618:	9a01      	ldr	r2, [sp, #4]
 801361a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801361e:	621a      	str	r2, [r3, #32]
 8013620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013622:	9301      	str	r3, [sp, #4]
 8013624:	2300      	movs	r3, #0
 8013626:	4299      	cmp	r1, r3
 8013628:	f88d 3003 	strb.w	r3, [sp, #3]
 801362c:	f10d 0203 	add.w	r2, sp, #3
 8013630:	f280 80b5 	bge.w	801379e <ecp_mod_p384+0x5dc>
 8013634:	4249      	negs	r1, r1
 8013636:	a801      	add	r0, sp, #4
 8013638:	f7ff fda4 	bl	8013184 <sub32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 801363c:	68a3      	ldr	r3, [r4, #8]
 801363e:	f10d 0203 	add.w	r2, sp, #3
 8013642:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013644:	a801      	add	r0, sp, #4
 8013646:	f7ff fd93 	bl	8013170 <add32>
 801364a:	68a3      	ldr	r3, [r4, #8]
 801364c:	f10d 0203 	add.w	r2, sp, #3
 8013650:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8013652:	a801      	add	r0, sp, #4
 8013654:	f7ff fd8c 	bl	8013170 <add32>
 8013658:	68a3      	ldr	r3, [r4, #8]
 801365a:	f10d 0203 	add.w	r2, sp, #3
 801365e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8013660:	a801      	add	r0, sp, #4
 8013662:	f7ff fd85 	bl	8013170 <add32>
    SUB( 20 );                                              NEXT; // A9
 8013666:	68a3      	ldr	r3, [r4, #8]
 8013668:	f10d 0203 	add.w	r2, sp, #3
 801366c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801366e:	a801      	add	r0, sp, #4
 8013670:	f7ff fd88 	bl	8013184 <sub32>
 8013674:	68a3      	ldr	r3, [r4, #8]
 8013676:	9a01      	ldr	r2, [sp, #4]
 8013678:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801367c:	625a      	str	r2, [r3, #36]	; 0x24
 801367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	2300      	movs	r3, #0
 8013684:	4299      	cmp	r1, r3
 8013686:	f88d 3003 	strb.w	r3, [sp, #3]
 801368a:	f10d 0203 	add.w	r2, sp, #3
 801368e:	f280 808a 	bge.w	80137a6 <ecp_mod_p384+0x5e4>
 8013692:	4249      	negs	r1, r1
 8013694:	a801      	add	r0, sp, #4
 8013696:	f7ff fd75 	bl	8013184 <sub32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 801369a:	68a3      	ldr	r3, [r4, #8]
 801369c:	f10d 0203 	add.w	r2, sp, #3
 80136a0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80136a2:	a801      	add	r0, sp, #4
 80136a4:	f7ff fd64 	bl	8013170 <add32>
 80136a8:	68a3      	ldr	r3, [r4, #8]
 80136aa:	f10d 0203 	add.w	r2, sp, #3
 80136ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80136b0:	a801      	add	r0, sp, #4
 80136b2:	f7ff fd5d 	bl	8013170 <add32>
 80136b6:	68a3      	ldr	r3, [r4, #8]
 80136b8:	f10d 0203 	add.w	r2, sp, #3
 80136bc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80136be:	a801      	add	r0, sp, #4
 80136c0:	f7ff fd56 	bl	8013170 <add32>
    SUB( 21 );                                              NEXT; // A10
 80136c4:	68a3      	ldr	r3, [r4, #8]
 80136c6:	f10d 0203 	add.w	r2, sp, #3
 80136ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80136cc:	a801      	add	r0, sp, #4
 80136ce:	f7ff fd59 	bl	8013184 <sub32>
 80136d2:	68a3      	ldr	r3, [r4, #8]
 80136d4:	9a01      	ldr	r2, [sp, #4]
 80136d6:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80136da:	629a      	str	r2, [r3, #40]	; 0x28
 80136dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136de:	9301      	str	r3, [sp, #4]
 80136e0:	2300      	movs	r3, #0
 80136e2:	4299      	cmp	r1, r3
 80136e4:	f88d 3003 	strb.w	r3, [sp, #3]
 80136e8:	f10d 0203 	add.w	r2, sp, #3
 80136ec:	da5f      	bge.n	80137ae <ecp_mod_p384+0x5ec>
 80136ee:	4249      	negs	r1, r1
 80136f0:	a801      	add	r0, sp, #4
 80136f2:	f7ff fd47 	bl	8013184 <sub32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 80136f6:	68a3      	ldr	r3, [r4, #8]
 80136f8:	f10d 0203 	add.w	r2, sp, #3
 80136fc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80136fe:	a801      	add	r0, sp, #4
 8013700:	f7ff fd36 	bl	8013170 <add32>
 8013704:	68a3      	ldr	r3, [r4, #8]
 8013706:	f10d 0203 	add.w	r2, sp, #3
 801370a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801370c:	a801      	add	r0, sp, #4
 801370e:	f7ff fd2f 	bl	8013170 <add32>
 8013712:	68a3      	ldr	r3, [r4, #8]
 8013714:	f10d 0203 	add.w	r2, sp, #3
 8013718:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801371a:	a801      	add	r0, sp, #4
 801371c:	f7ff fd28 	bl	8013170 <add32>
    SUB( 22 );                                              LAST; // A11
 8013720:	68a3      	ldr	r3, [r4, #8]
 8013722:	f10d 0203 	add.w	r2, sp, #3
 8013726:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013728:	a801      	add	r0, sp, #4
 801372a:	f7ff fd2b 	bl	8013184 <sub32>
 801372e:	68a2      	ldr	r2, [r4, #8]
 8013730:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013734:	9b01      	ldr	r3, [sp, #4]
 8013736:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013738:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 801373c:	6313      	str	r3, [r2, #48]	; 0x30
 801373e:	6860      	ldr	r0, [r4, #4]
 8013740:	2300      	movs	r3, #0
 8013742:	9301      	str	r3, [sp, #4]
 8013744:	230c      	movs	r3, #12
 8013746:	3301      	adds	r3, #1
 8013748:	4298      	cmp	r0, r3
 801374a:	d834      	bhi.n	80137b6 <ecp_mod_p384+0x5f4>
 801374c:	2900      	cmp	r1, #0
 801374e:	da03      	bge.n	8013758 <ecp_mod_p384+0x596>
 8013750:	aa02      	add	r2, sp, #8
 8013752:	4620      	mov	r0, r4
 8013754:	f7ff fd21 	bl	801319a <fix_negative.isra.0>

cleanup:
    return( ret );
}
 8013758:	4628      	mov	r0, r5
 801375a:	b012      	add	sp, #72	; 0x48
 801375c:	bd70      	pop	{r4, r5, r6, pc}
    SUB( 23 );                                              NEXT; // A0
 801375e:	a801      	add	r0, sp, #4
 8013760:	f7ff fd06 	bl	8013170 <add32>
 8013764:	e574      	b.n	8013250 <ecp_mod_p384+0x8e>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 8013766:	a801      	add	r0, sp, #4
 8013768:	f7ff fd02 	bl	8013170 <add32>
 801376c:	e5a6      	b.n	80132bc <ecp_mod_p384+0xfa>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 801376e:	a801      	add	r0, sp, #4
 8013770:	f7ff fcfe 	bl	8013170 <add32>
 8013774:	e5d1      	b.n	801331a <ecp_mod_p384+0x158>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 8013776:	a801      	add	r0, sp, #4
 8013778:	f7ff fcfa 	bl	8013170 <add32>
 801377c:	e611      	b.n	80133a2 <ecp_mod_p384+0x1e0>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 801377e:	a801      	add	r0, sp, #4
 8013780:	f7ff fcf6 	bl	8013170 <add32>
 8013784:	e666      	b.n	8013454 <ecp_mod_p384+0x292>
    SUB( 16 );                                              NEXT; // A5
 8013786:	a801      	add	r0, sp, #4
 8013788:	f7ff fcf2 	bl	8013170 <add32>
 801378c:	e6ad      	b.n	80134ea <ecp_mod_p384+0x328>
    SUB( 17 );                                              NEXT; // A6
 801378e:	a801      	add	r0, sp, #4
 8013790:	f7ff fcee 	bl	8013170 <add32>
 8013794:	e6ed      	b.n	8013572 <ecp_mod_p384+0x3b0>
    SUB( 18 );                                              NEXT; // A7
 8013796:	a801      	add	r0, sp, #4
 8013798:	f7ff fcea 	bl	8013170 <add32>
 801379c:	e71f      	b.n	80135de <ecp_mod_p384+0x41c>
    SUB( 19 );                                              NEXT; // A8
 801379e:	a801      	add	r0, sp, #4
 80137a0:	f7ff fce6 	bl	8013170 <add32>
 80137a4:	e74a      	b.n	801363c <ecp_mod_p384+0x47a>
    SUB( 20 );                                              NEXT; // A9
 80137a6:	a801      	add	r0, sp, #4
 80137a8:	f7ff fce2 	bl	8013170 <add32>
 80137ac:	e775      	b.n	801369a <ecp_mod_p384+0x4d8>
    SUB( 21 );                                              NEXT; // A10
 80137ae:	a801      	add	r0, sp, #4
 80137b0:	f7ff fcde 	bl	8013170 <add32>
 80137b4:	e79f      	b.n	80136f6 <ecp_mod_p384+0x534>
    SUB( 22 );                                              LAST; // A11
 80137b6:	9e01      	ldr	r6, [sp, #4]
 80137b8:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 80137bc:	e7c3      	b.n	8013746 <ecp_mod_p384+0x584>

080137be <ecp_mod_p256>:
{
 80137be:	b570      	push	{r4, r5, r6, lr}
    INIT( 256 );
 80137c0:	2309      	movs	r3, #9
{
 80137c2:	b08e      	sub	sp, #56	; 0x38
    INIT( 256 );
 80137c4:	2201      	movs	r2, #1
 80137c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80137ca:	2100      	movs	r1, #0
{
 80137cc:	4604      	mov	r4, r0
    INIT( 256 );
 80137ce:	2224      	movs	r2, #36	; 0x24
 80137d0:	a805      	add	r0, sp, #20
 80137d2:	f88d 1003 	strb.w	r1, [sp, #3]
 80137d6:	9004      	str	r0, [sp, #16]
 80137d8:	f00e fe7a 	bl	80224d0 <memset>
 80137dc:	2110      	movs	r1, #16
 80137de:	4620      	mov	r0, r4
 80137e0:	f7fb f930 	bl	800ea44 <mbedtls_mpi_grow>
 80137e4:	4605      	mov	r5, r0
 80137e6:	2800      	cmp	r0, #0
 80137e8:	f040 821b 	bne.w	8013c22 <ecp_mod_p256+0x464>
 80137ec:	68a3      	ldr	r3, [r4, #8]
 80137ee:	681a      	ldr	r2, [r3, #0]
    ADD(  8 ); ADD(  9 );
 80137f0:	6a19      	ldr	r1, [r3, #32]
    INIT( 256 );
 80137f2:	9201      	str	r2, [sp, #4]
    ADD(  8 ); ADD(  9 );
 80137f4:	a801      	add	r0, sp, #4
 80137f6:	f10d 0203 	add.w	r2, sp, #3
 80137fa:	f7ff fcb9 	bl	8013170 <add32>
 80137fe:	68a3      	ldr	r3, [r4, #8]
 8013800:	f10d 0203 	add.w	r2, sp, #3
 8013804:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013806:	a801      	add	r0, sp, #4
 8013808:	f7ff fcb2 	bl	8013170 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 801380c:	68a3      	ldr	r3, [r4, #8]
 801380e:	f10d 0203 	add.w	r2, sp, #3
 8013812:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013814:	a801      	add	r0, sp, #4
 8013816:	f7ff fcb5 	bl	8013184 <sub32>
 801381a:	68a3      	ldr	r3, [r4, #8]
 801381c:	f10d 0203 	add.w	r2, sp, #3
 8013820:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013822:	a801      	add	r0, sp, #4
 8013824:	f7ff fcae 	bl	8013184 <sub32>
 8013828:	68a3      	ldr	r3, [r4, #8]
 801382a:	f10d 0203 	add.w	r2, sp, #3
 801382e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013830:	a801      	add	r0, sp, #4
 8013832:	f7ff fca7 	bl	8013184 <sub32>
 8013836:	68a3      	ldr	r3, [r4, #8]
 8013838:	f10d 0203 	add.w	r2, sp, #3
 801383c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801383e:	a801      	add	r0, sp, #4
 8013840:	f7ff fca0 	bl	8013184 <sub32>
 8013844:	68a3      	ldr	r3, [r4, #8]
 8013846:	9a01      	ldr	r2, [sp, #4]
 8013848:	601a      	str	r2, [r3, #0]
 801384a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	9301      	str	r3, [sp, #4]
 8013852:	2900      	cmp	r1, #0
 8013854:	f88d 5003 	strb.w	r5, [sp, #3]
 8013858:	f10d 0203 	add.w	r2, sp, #3
 801385c:	f280 81e4 	bge.w	8013c28 <ecp_mod_p256+0x46a>
 8013860:	4249      	negs	r1, r1
 8013862:	a801      	add	r0, sp, #4
 8013864:	f7ff fc8e 	bl	8013184 <sub32>
    ADD(  9 ); ADD( 10 );
 8013868:	68a3      	ldr	r3, [r4, #8]
 801386a:	f10d 0203 	add.w	r2, sp, #3
 801386e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013870:	a801      	add	r0, sp, #4
 8013872:	f7ff fc7d 	bl	8013170 <add32>
 8013876:	68a3      	ldr	r3, [r4, #8]
 8013878:	f10d 0203 	add.w	r2, sp, #3
 801387c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801387e:	a801      	add	r0, sp, #4
 8013880:	f7ff fc76 	bl	8013170 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8013884:	68a3      	ldr	r3, [r4, #8]
 8013886:	f10d 0203 	add.w	r2, sp, #3
 801388a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801388c:	a801      	add	r0, sp, #4
 801388e:	f7ff fc79 	bl	8013184 <sub32>
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	f10d 0203 	add.w	r2, sp, #3
 8013898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801389a:	a801      	add	r0, sp, #4
 801389c:	f7ff fc72 	bl	8013184 <sub32>
 80138a0:	68a3      	ldr	r3, [r4, #8]
 80138a2:	f10d 0203 	add.w	r2, sp, #3
 80138a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80138a8:	a801      	add	r0, sp, #4
 80138aa:	f7ff fc6b 	bl	8013184 <sub32>
 80138ae:	68a3      	ldr	r3, [r4, #8]
 80138b0:	f10d 0203 	add.w	r2, sp, #3
 80138b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80138b6:	a801      	add	r0, sp, #4
 80138b8:	f7ff fc64 	bl	8013184 <sub32>
 80138bc:	68a3      	ldr	r3, [r4, #8]
 80138be:	9a01      	ldr	r2, [sp, #4]
 80138c0:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80138c4:	605a      	str	r2, [r3, #4]
 80138c6:	689b      	ldr	r3, [r3, #8]
 80138c8:	9301      	str	r3, [sp, #4]
 80138ca:	2300      	movs	r3, #0
 80138cc:	4299      	cmp	r1, r3
 80138ce:	f88d 3003 	strb.w	r3, [sp, #3]
 80138d2:	f10d 0203 	add.w	r2, sp, #3
 80138d6:	f280 81ab 	bge.w	8013c30 <ecp_mod_p256+0x472>
 80138da:	4249      	negs	r1, r1
 80138dc:	a801      	add	r0, sp, #4
 80138de:	f7ff fc51 	bl	8013184 <sub32>
    ADD( 10 ); ADD( 11 );
 80138e2:	68a3      	ldr	r3, [r4, #8]
 80138e4:	f10d 0203 	add.w	r2, sp, #3
 80138e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80138ea:	a801      	add	r0, sp, #4
 80138ec:	f7ff fc40 	bl	8013170 <add32>
 80138f0:	68a3      	ldr	r3, [r4, #8]
 80138f2:	f10d 0203 	add.w	r2, sp, #3
 80138f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80138f8:	a801      	add	r0, sp, #4
 80138fa:	f7ff fc39 	bl	8013170 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 80138fe:	68a3      	ldr	r3, [r4, #8]
 8013900:	f10d 0203 	add.w	r2, sp, #3
 8013904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013906:	a801      	add	r0, sp, #4
 8013908:	f7ff fc3c 	bl	8013184 <sub32>
 801390c:	68a3      	ldr	r3, [r4, #8]
 801390e:	f10d 0203 	add.w	r2, sp, #3
 8013912:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013914:	a801      	add	r0, sp, #4
 8013916:	f7ff fc35 	bl	8013184 <sub32>
 801391a:	68a3      	ldr	r3, [r4, #8]
 801391c:	f10d 0203 	add.w	r2, sp, #3
 8013920:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013922:	a801      	add	r0, sp, #4
 8013924:	f7ff fc2e 	bl	8013184 <sub32>
 8013928:	68a3      	ldr	r3, [r4, #8]
 801392a:	9a01      	ldr	r2, [sp, #4]
 801392c:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013930:	609a      	str	r2, [r3, #8]
 8013932:	68db      	ldr	r3, [r3, #12]
 8013934:	9301      	str	r3, [sp, #4]
 8013936:	2300      	movs	r3, #0
 8013938:	4299      	cmp	r1, r3
 801393a:	f88d 3003 	strb.w	r3, [sp, #3]
 801393e:	f10d 0203 	add.w	r2, sp, #3
 8013942:	f280 8179 	bge.w	8013c38 <ecp_mod_p256+0x47a>
 8013946:	4249      	negs	r1, r1
 8013948:	a801      	add	r0, sp, #4
 801394a:	f7ff fc1b 	bl	8013184 <sub32>
    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 801394e:	68a3      	ldr	r3, [r4, #8]
 8013950:	f10d 0203 	add.w	r2, sp, #3
 8013954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013956:	a801      	add	r0, sp, #4
 8013958:	f7ff fc0a 	bl	8013170 <add32>
 801395c:	68a3      	ldr	r3, [r4, #8]
 801395e:	f10d 0203 	add.w	r2, sp, #3
 8013962:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013964:	a801      	add	r0, sp, #4
 8013966:	f7ff fc03 	bl	8013170 <add32>
 801396a:	68a3      	ldr	r3, [r4, #8]
 801396c:	f10d 0203 	add.w	r2, sp, #3
 8013970:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013972:	a801      	add	r0, sp, #4
 8013974:	f7ff fbfc 	bl	8013170 <add32>
 8013978:	68a3      	ldr	r3, [r4, #8]
 801397a:	f10d 0203 	add.w	r2, sp, #3
 801397e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013980:	a801      	add	r0, sp, #4
 8013982:	f7ff fbf5 	bl	8013170 <add32>
 8013986:	68a3      	ldr	r3, [r4, #8]
 8013988:	f10d 0203 	add.w	r2, sp, #3
 801398c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801398e:	a801      	add	r0, sp, #4
 8013990:	f7ff fbee 	bl	8013170 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 8013994:	68a3      	ldr	r3, [r4, #8]
 8013996:	f10d 0203 	add.w	r2, sp, #3
 801399a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801399c:	a801      	add	r0, sp, #4
 801399e:	f7ff fbf1 	bl	8013184 <sub32>
 80139a2:	68a3      	ldr	r3, [r4, #8]
 80139a4:	f10d 0203 	add.w	r2, sp, #3
 80139a8:	6a19      	ldr	r1, [r3, #32]
 80139aa:	a801      	add	r0, sp, #4
 80139ac:	f7ff fbea 	bl	8013184 <sub32>
 80139b0:	68a3      	ldr	r3, [r4, #8]
 80139b2:	f10d 0203 	add.w	r2, sp, #3
 80139b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80139b8:	a801      	add	r0, sp, #4
 80139ba:	f7ff fbe3 	bl	8013184 <sub32>
 80139be:	68a3      	ldr	r3, [r4, #8]
 80139c0:	9a01      	ldr	r2, [sp, #4]
 80139c2:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80139c6:	60da      	str	r2, [r3, #12]
 80139c8:	691b      	ldr	r3, [r3, #16]
 80139ca:	9301      	str	r3, [sp, #4]
 80139cc:	2300      	movs	r3, #0
 80139ce:	4299      	cmp	r1, r3
 80139d0:	f88d 3003 	strb.w	r3, [sp, #3]
 80139d4:	f10d 0203 	add.w	r2, sp, #3
 80139d8:	f280 8132 	bge.w	8013c40 <ecp_mod_p256+0x482>
 80139dc:	4249      	negs	r1, r1
 80139de:	a801      	add	r0, sp, #4
 80139e0:	f7ff fbd0 	bl	8013184 <sub32>
    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 80139e4:	68a3      	ldr	r3, [r4, #8]
 80139e6:	f10d 0203 	add.w	r2, sp, #3
 80139ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80139ec:	a801      	add	r0, sp, #4
 80139ee:	f7ff fbbf 	bl	8013170 <add32>
 80139f2:	68a3      	ldr	r3, [r4, #8]
 80139f4:	f10d 0203 	add.w	r2, sp, #3
 80139f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80139fa:	a801      	add	r0, sp, #4
 80139fc:	f7ff fbb8 	bl	8013170 <add32>
 8013a00:	68a3      	ldr	r3, [r4, #8]
 8013a02:	f10d 0203 	add.w	r2, sp, #3
 8013a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013a08:	a801      	add	r0, sp, #4
 8013a0a:	f7ff fbb1 	bl	8013170 <add32>
 8013a0e:	68a3      	ldr	r3, [r4, #8]
 8013a10:	f10d 0203 	add.w	r2, sp, #3
 8013a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013a16:	a801      	add	r0, sp, #4
 8013a18:	f7ff fbaa 	bl	8013170 <add32>
 8013a1c:	68a3      	ldr	r3, [r4, #8]
 8013a1e:	f10d 0203 	add.w	r2, sp, #3
 8013a22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013a24:	a801      	add	r0, sp, #4
 8013a26:	f7ff fba3 	bl	8013170 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8013a2a:	68a3      	ldr	r3, [r4, #8]
 8013a2c:	f10d 0203 	add.w	r2, sp, #3
 8013a30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013a32:	a801      	add	r0, sp, #4
 8013a34:	f7ff fba6 	bl	8013184 <sub32>
 8013a38:	68a3      	ldr	r3, [r4, #8]
 8013a3a:	f10d 0203 	add.w	r2, sp, #3
 8013a3e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013a40:	a801      	add	r0, sp, #4
 8013a42:	f7ff fb9f 	bl	8013184 <sub32>
 8013a46:	68a3      	ldr	r3, [r4, #8]
 8013a48:	9a01      	ldr	r2, [sp, #4]
 8013a4a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013a4e:	611a      	str	r2, [r3, #16]
 8013a50:	695b      	ldr	r3, [r3, #20]
 8013a52:	9301      	str	r3, [sp, #4]
 8013a54:	2300      	movs	r3, #0
 8013a56:	4299      	cmp	r1, r3
 8013a58:	f88d 3003 	strb.w	r3, [sp, #3]
 8013a5c:	f10d 0203 	add.w	r2, sp, #3
 8013a60:	f280 80f2 	bge.w	8013c48 <ecp_mod_p256+0x48a>
 8013a64:	4249      	negs	r1, r1
 8013a66:	a801      	add	r0, sp, #4
 8013a68:	f7ff fb8c 	bl	8013184 <sub32>
    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 8013a6c:	68a3      	ldr	r3, [r4, #8]
 8013a6e:	f10d 0203 	add.w	r2, sp, #3
 8013a72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013a74:	a801      	add	r0, sp, #4
 8013a76:	f7ff fb7b 	bl	8013170 <add32>
 8013a7a:	68a3      	ldr	r3, [r4, #8]
 8013a7c:	f10d 0203 	add.w	r2, sp, #3
 8013a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013a82:	a801      	add	r0, sp, #4
 8013a84:	f7ff fb74 	bl	8013170 <add32>
 8013a88:	68a3      	ldr	r3, [r4, #8]
 8013a8a:	f10d 0203 	add.w	r2, sp, #3
 8013a8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013a90:	a801      	add	r0, sp, #4
 8013a92:	f7ff fb6d 	bl	8013170 <add32>
 8013a96:	68a3      	ldr	r3, [r4, #8]
 8013a98:	f10d 0203 	add.w	r2, sp, #3
 8013a9c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013a9e:	a801      	add	r0, sp, #4
 8013aa0:	f7ff fb66 	bl	8013170 <add32>
 8013aa4:	68a3      	ldr	r3, [r4, #8]
 8013aa6:	f10d 0203 	add.w	r2, sp, #3
 8013aaa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013aac:	a801      	add	r0, sp, #4
 8013aae:	f7ff fb5f 	bl	8013170 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 8013ab2:	68a3      	ldr	r3, [r4, #8]
 8013ab4:	f10d 0203 	add.w	r2, sp, #3
 8013ab8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013aba:	a801      	add	r0, sp, #4
 8013abc:	f7ff fb62 	bl	8013184 <sub32>
 8013ac0:	68a3      	ldr	r3, [r4, #8]
 8013ac2:	f10d 0203 	add.w	r2, sp, #3
 8013ac6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013ac8:	a801      	add	r0, sp, #4
 8013aca:	f7ff fb5b 	bl	8013184 <sub32>
 8013ace:	68a3      	ldr	r3, [r4, #8]
 8013ad0:	9a01      	ldr	r2, [sp, #4]
 8013ad2:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013ad6:	615a      	str	r2, [r3, #20]
 8013ad8:	699b      	ldr	r3, [r3, #24]
 8013ada:	9301      	str	r3, [sp, #4]
 8013adc:	2300      	movs	r3, #0
 8013ade:	4299      	cmp	r1, r3
 8013ae0:	f88d 3003 	strb.w	r3, [sp, #3]
 8013ae4:	f10d 0203 	add.w	r2, sp, #3
 8013ae8:	f280 80b2 	bge.w	8013c50 <ecp_mod_p256+0x492>
 8013aec:	4249      	negs	r1, r1
 8013aee:	a801      	add	r0, sp, #4
 8013af0:	f7ff fb48 	bl	8013184 <sub32>
    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 8013af4:	68a3      	ldr	r3, [r4, #8]
 8013af6:	f10d 0203 	add.w	r2, sp, #3
 8013afa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013afc:	a801      	add	r0, sp, #4
 8013afe:	f7ff fb37 	bl	8013170 <add32>
 8013b02:	68a3      	ldr	r3, [r4, #8]
 8013b04:	f10d 0203 	add.w	r2, sp, #3
 8013b08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013b0a:	a801      	add	r0, sp, #4
 8013b0c:	f7ff fb30 	bl	8013170 <add32>
 8013b10:	68a3      	ldr	r3, [r4, #8]
 8013b12:	f10d 0203 	add.w	r2, sp, #3
 8013b16:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013b18:	a801      	add	r0, sp, #4
 8013b1a:	f7ff fb29 	bl	8013170 <add32>
 8013b1e:	68a3      	ldr	r3, [r4, #8]
 8013b20:	f10d 0203 	add.w	r2, sp, #3
 8013b24:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013b26:	a801      	add	r0, sp, #4
 8013b28:	f7ff fb22 	bl	8013170 <add32>
 8013b2c:	68a3      	ldr	r3, [r4, #8]
 8013b2e:	f10d 0203 	add.w	r2, sp, #3
 8013b32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013b34:	a801      	add	r0, sp, #4
 8013b36:	f7ff fb1b 	bl	8013170 <add32>
 8013b3a:	68a3      	ldr	r3, [r4, #8]
 8013b3c:	f10d 0203 	add.w	r2, sp, #3
 8013b40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013b42:	a801      	add	r0, sp, #4
 8013b44:	f7ff fb14 	bl	8013170 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 8013b48:	68a3      	ldr	r3, [r4, #8]
 8013b4a:	f10d 0203 	add.w	r2, sp, #3
 8013b4e:	6a19      	ldr	r1, [r3, #32]
 8013b50:	a801      	add	r0, sp, #4
 8013b52:	f7ff fb17 	bl	8013184 <sub32>
 8013b56:	68a3      	ldr	r3, [r4, #8]
 8013b58:	f10d 0203 	add.w	r2, sp, #3
 8013b5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013b5e:	a801      	add	r0, sp, #4
 8013b60:	f7ff fb10 	bl	8013184 <sub32>
 8013b64:	68a3      	ldr	r3, [r4, #8]
 8013b66:	9a01      	ldr	r2, [sp, #4]
 8013b68:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013b6c:	619a      	str	r2, [r3, #24]
 8013b6e:	69db      	ldr	r3, [r3, #28]
 8013b70:	9301      	str	r3, [sp, #4]
 8013b72:	2300      	movs	r3, #0
 8013b74:	4299      	cmp	r1, r3
 8013b76:	f88d 3003 	strb.w	r3, [sp, #3]
 8013b7a:	f10d 0203 	add.w	r2, sp, #3
 8013b7e:	da6b      	bge.n	8013c58 <ecp_mod_p256+0x49a>
 8013b80:	4249      	negs	r1, r1
 8013b82:	a801      	add	r0, sp, #4
 8013b84:	f7ff fafe 	bl	8013184 <sub32>
    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 8013b88:	68a3      	ldr	r3, [r4, #8]
 8013b8a:	f10d 0203 	add.w	r2, sp, #3
 8013b8e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013b90:	a801      	add	r0, sp, #4
 8013b92:	f7ff faed 	bl	8013170 <add32>
 8013b96:	68a3      	ldr	r3, [r4, #8]
 8013b98:	f10d 0203 	add.w	r2, sp, #3
 8013b9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013b9e:	a801      	add	r0, sp, #4
 8013ba0:	f7ff fae6 	bl	8013170 <add32>
 8013ba4:	68a3      	ldr	r3, [r4, #8]
 8013ba6:	f10d 0203 	add.w	r2, sp, #3
 8013baa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013bac:	a801      	add	r0, sp, #4
 8013bae:	f7ff fadf 	bl	8013170 <add32>
 8013bb2:	68a3      	ldr	r3, [r4, #8]
 8013bb4:	f10d 0203 	add.w	r2, sp, #3
 8013bb8:	6a19      	ldr	r1, [r3, #32]
 8013bba:	a801      	add	r0, sp, #4
 8013bbc:	f7ff fad8 	bl	8013170 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8013bc0:	68a3      	ldr	r3, [r4, #8]
 8013bc2:	f10d 0203 	add.w	r2, sp, #3
 8013bc6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013bc8:	a801      	add	r0, sp, #4
 8013bca:	f7ff fadb 	bl	8013184 <sub32>
 8013bce:	68a3      	ldr	r3, [r4, #8]
 8013bd0:	f10d 0203 	add.w	r2, sp, #3
 8013bd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013bd6:	a801      	add	r0, sp, #4
 8013bd8:	f7ff fad4 	bl	8013184 <sub32>
 8013bdc:	68a3      	ldr	r3, [r4, #8]
 8013bde:	f10d 0203 	add.w	r2, sp, #3
 8013be2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013be4:	a801      	add	r0, sp, #4
 8013be6:	f7ff facd 	bl	8013184 <sub32>
 8013bea:	68a3      	ldr	r3, [r4, #8]
 8013bec:	f10d 0203 	add.w	r2, sp, #3
 8013bf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013bf2:	a801      	add	r0, sp, #4
 8013bf4:	f7ff fac6 	bl	8013184 <sub32>
 8013bf8:	68a2      	ldr	r2, [r4, #8]
 8013bfa:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013bfe:	9b01      	ldr	r3, [sp, #4]
 8013c00:	61d3      	str	r3, [r2, #28]
 8013c02:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8013c06:	6213      	str	r3, [r2, #32]
 8013c08:	6860      	ldr	r0, [r4, #4]
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	9301      	str	r3, [sp, #4]
 8013c0e:	2308      	movs	r3, #8
 8013c10:	3301      	adds	r3, #1
 8013c12:	4298      	cmp	r0, r3
 8013c14:	d824      	bhi.n	8013c60 <ecp_mod_p256+0x4a2>
 8013c16:	2900      	cmp	r1, #0
 8013c18:	da03      	bge.n	8013c22 <ecp_mod_p256+0x464>
 8013c1a:	aa02      	add	r2, sp, #8
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	f7ff fabc 	bl	801319a <fix_negative.isra.0>
}
 8013c22:	4628      	mov	r0, r5
 8013c24:	b00e      	add	sp, #56	; 0x38
 8013c26:	bd70      	pop	{r4, r5, r6, pc}
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8013c28:	a801      	add	r0, sp, #4
 8013c2a:	f7ff faa1 	bl	8013170 <add32>
 8013c2e:	e61b      	b.n	8013868 <ecp_mod_p256+0xaa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8013c30:	a801      	add	r0, sp, #4
 8013c32:	f7ff fa9d 	bl	8013170 <add32>
 8013c36:	e654      	b.n	80138e2 <ecp_mod_p256+0x124>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8013c38:	a801      	add	r0, sp, #4
 8013c3a:	f7ff fa99 	bl	8013170 <add32>
 8013c3e:	e686      	b.n	801394e <ecp_mod_p256+0x190>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 8013c40:	a801      	add	r0, sp, #4
 8013c42:	f7ff fa95 	bl	8013170 <add32>
 8013c46:	e6cd      	b.n	80139e4 <ecp_mod_p256+0x226>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8013c48:	a801      	add	r0, sp, #4
 8013c4a:	f7ff fa91 	bl	8013170 <add32>
 8013c4e:	e70d      	b.n	8013a6c <ecp_mod_p256+0x2ae>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 8013c50:	a801      	add	r0, sp, #4
 8013c52:	f7ff fa8d 	bl	8013170 <add32>
 8013c56:	e74d      	b.n	8013af4 <ecp_mod_p256+0x336>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 8013c58:	a801      	add	r0, sp, #4
 8013c5a:	f7ff fa89 	bl	8013170 <add32>
 8013c5e:	e793      	b.n	8013b88 <ecp_mod_p256+0x3ca>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8013c60:	9e01      	ldr	r6, [sp, #4]
 8013c62:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8013c66:	e7d3      	b.n	8013c10 <ecp_mod_p256+0x452>

08013c68 <ecp_mod_p256k1>:
/*
 * Fast quasi-reduction modulo p256k1 = 2^256 - R,
 * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
 8013c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( N->n < p_limbs )
 8013c6c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013c70:	f1b9 0f07 	cmp.w	r9, #7
{
 8013c74:	b093      	sub	sp, #76	; 0x4c
 8013c76:	4604      	mov	r4, r0
    if( N->n < p_limbs )
 8013c78:	d966      	bls.n	8013d48 <ecp_mod_p256k1+0xe0>
    R.s = 1;
 8013c7a:	2301      	movs	r3, #1
    R.p = Rp;
 8013c7c:	4a33      	ldr	r2, [pc, #204]	; (8013d4c <ecp_mod_p256k1+0xe4>)
    R.s = 1;
 8013c7e:	9304      	str	r3, [sp, #16]
    M.s = 1;
 8013c80:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( p_limbs - adjust );
 8013c82:	f1a9 0308 	sub.w	r3, r9, #8
    if( M.n > p_limbs + adjust )
 8013c86:	2b08      	cmp	r3, #8
    M.p = Mp;
 8013c88:	ae07      	add	r6, sp, #28
    R.p = Rp;
 8013c8a:	9206      	str	r2, [sp, #24]
    R.n = P_KOBLITZ_R;
 8013c8c:	f04f 0202 	mov.w	r2, #2
        M.n = p_limbs + adjust;
 8013c90:	bf88      	it	hi
 8013c92:	2308      	movhi	r3, #8
    R.n = P_KOBLITZ_R;
 8013c94:	9205      	str	r2, [sp, #20]
    memset( Mp, 0, sizeof Mp );
 8013c96:	2100      	movs	r1, #0
 8013c98:	222c      	movs	r2, #44	; 0x2c
 8013c9a:	4630      	mov	r0, r6
        M.n = p_limbs + adjust;
 8013c9c:	9302      	str	r3, [sp, #8]
    M.p = Mp;
 8013c9e:	9603      	str	r6, [sp, #12]
    memset( Mp, 0, sizeof Mp );
 8013ca0:	f00e fc16 	bl	80224d0 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8013ca4:	68a7      	ldr	r7, [r4, #8]
 8013ca6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013caa:	f107 0520 	add.w	r5, r7, #32
 8013cae:	4629      	mov	r1, r5
 8013cb0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f00e fbe3 	bl	8022480 <memcpy>
    M.n += R.n; /* Make room for multiplication by R */
 8013cba:	f108 0302 	add.w	r3, r8, #2
 8013cbe:	9302      	str	r3, [sp, #8]
    if( mask != 0 )
 8013cc0:	4629      	mov	r1, r5
 8013cc2:	eb07 0789 	add.w	r7, r7, r9, lsl #2
        N->p[i] = 0;
 8013cc6:	2300      	movs	r3, #0
    for( i = p_limbs; i < N->n; i++ )
 8013cc8:	42b9      	cmp	r1, r7
 8013cca:	d136      	bne.n	8013d3a <ecp_mod_p256k1+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013ccc:	a901      	add	r1, sp, #4
 8013cce:	aa04      	add	r2, sp, #16
 8013cd0:	4608      	mov	r0, r1
 8013cd2:	f7fb faa8 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8013cd6:	bb68      	cbnz	r0, 8013d34 <ecp_mod_p256k1+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013cd8:	aa01      	add	r2, sp, #4
 8013cda:	4621      	mov	r1, r4
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f7fb f9b1 	bl	800f044 <mbedtls_mpi_add_abs>
 8013ce2:	bb38      	cbnz	r0, 8013d34 <ecp_mod_p256k1+0xcc>
    M.n = N->n - ( p_limbs - adjust );
 8013ce4:	6865      	ldr	r5, [r4, #4]
 8013ce6:	f1a5 0308 	sub.w	r3, r5, #8
    if( M.n > p_limbs + adjust )
 8013cea:	2b08      	cmp	r3, #8
        M.n = p_limbs + adjust;
 8013cec:	bf88      	it	hi
 8013cee:	2308      	movhi	r3, #8
    memset( Mp, 0, sizeof Mp );
 8013cf0:	222c      	movs	r2, #44	; 0x2c
 8013cf2:	2100      	movs	r1, #0
 8013cf4:	4630      	mov	r0, r6
        M.n = p_limbs + adjust;
 8013cf6:	9302      	str	r3, [sp, #8]
    memset( Mp, 0, sizeof Mp );
 8013cf8:	f00e fbea 	bl	80224d0 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8013cfc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013d00:	68a7      	ldr	r7, [r4, #8]
 8013d02:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8013d06:	f107 0120 	add.w	r1, r7, #32
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	f00e fbb8 	bl	8022480 <memcpy>
    M.n += R.n; /* Make room for multiplication by R */
 8013d10:	9b05      	ldr	r3, [sp, #20]
 8013d12:	4443      	add	r3, r8
 8013d14:	9302      	str	r3, [sp, #8]
        N->p[i] = 0;
 8013d16:	2200      	movs	r2, #0
    M.n += R.n; /* Make room for multiplication by R */
 8013d18:	2308      	movs	r3, #8
    for( i = p_limbs; i < N->n; i++ )
 8013d1a:	429d      	cmp	r5, r3
 8013d1c:	d810      	bhi.n	8013d40 <ecp_mod_p256k1+0xd8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013d1e:	a901      	add	r1, sp, #4
 8013d20:	aa04      	add	r2, sp, #16
 8013d22:	4608      	mov	r0, r1
 8013d24:	f7fb fa7f 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8013d28:	b920      	cbnz	r0, 8013d34 <ecp_mod_p256k1+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013d2a:	aa01      	add	r2, sp, #4
 8013d2c:	4621      	mov	r1, r4
 8013d2e:	4620      	mov	r0, r4
 8013d30:	f7fb f988 	bl	800f044 <mbedtls_mpi_add_abs>
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
}
 8013d34:	b013      	add	sp, #76	; 0x4c
 8013d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        N->p[i] = 0;
 8013d3a:	f841 3b04 	str.w	r3, [r1], #4
    for( i = p_limbs; i < N->n; i++ )
 8013d3e:	e7c3      	b.n	8013cc8 <ecp_mod_p256k1+0x60>
        N->p[i] = 0;
 8013d40:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    for( i = p_limbs; i < N->n; i++ )
 8013d44:	3301      	adds	r3, #1
 8013d46:	e7e8      	b.n	8013d1a <ecp_mod_p256k1+0xb2>
        return( 0 );
 8013d48:	2000      	movs	r0, #0
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 8013d4a:	e7f3      	b.n	8013d34 <ecp_mod_p256k1+0xcc>
 8013d4c:	20000594 	.word	0x20000594

08013d50 <mbedtls_ecp_group_load>:
{
 8013d50:	b538      	push	{r3, r4, r5, lr}
 8013d52:	4604      	mov	r4, r0
 8013d54:	460d      	mov	r5, r1
    mbedtls_ecp_group_free( grp );
 8013d56:	f7fe f9d3 	bl	8012100 <mbedtls_ecp_group_free>
    grp->id = id;
 8013d5a:	7025      	strb	r5, [r4, #0]
    switch( id )
 8013d5c:	3d03      	subs	r5, #3
 8013d5e:	2d09      	cmp	r5, #9
 8013d60:	f200 80a9 	bhi.w	8013eb6 <mbedtls_ecp_group_load+0x166>
 8013d64:	e8df f005 	tbb	[pc, r5]
 8013d68:	6ba73005 	.word	0x6ba73005
 8013d6c:	a7a7a789 	.word	0xa7a7a789
 8013d70:	4ba7      	.short	0x4ba7
            NIST_MODP( p256 );
 8013d72:	4b53      	ldr	r3, [pc, #332]	; (8013ec0 <mbedtls_ecp_group_load+0x170>)
 8013d74:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013d76:	4b53      	ldr	r3, [pc, #332]	; (8013ec4 <mbedtls_ecp_group_load+0x174>)
 8013d78:	60e3      	str	r3, [r4, #12]
 8013d7a:	f103 0120 	add.w	r1, r3, #32
 8013d7e:	6261      	str	r1, [r4, #36]	; 0x24
 8013d80:	f103 0140 	add.w	r1, r3, #64	; 0x40
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d84:	2501      	movs	r5, #1
 8013d86:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013d88:	6561      	str	r1, [r4, #84]	; 0x54
 8013d8a:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d8e:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013d92:	e9c4 5207 	strd	r5, r2, [r4, #28]
 8013d96:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013d9a:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013d9e:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013da2:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013da4:	3380      	adds	r3, #128	; 0x80
    X->s = 1;
 8013da6:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
 8013daa:	4b47      	ldr	r3, [pc, #284]	; (8013ec8 <mbedtls_ecp_group_load+0x178>)
 8013dac:	64a3      	str	r3, [r4, #72]	; 0x48
    X->n = 1;
 8013dae:	6465      	str	r5, [r4, #68]	; 0x44
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8013db0:	1d20      	adds	r0, r4, #4
 8013db2:	f7fa ff54 	bl	800ec5e <mbedtls_mpi_bitlen>
 8013db6:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 8013db8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8013dbc:	f7fa ff4f 	bl	800ec5e <mbedtls_mpi_bitlen>
    grp->h = 1;
 8013dc0:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
            return( LOAD_GROUP_A( brainpoolP384r1 ) );
 8013dc4:	2000      	movs	r0, #0
}
 8013dc6:	bd38      	pop	{r3, r4, r5, pc}
            NIST_MODP( p384 );
 8013dc8:	4b40      	ldr	r3, [pc, #256]	; (8013ecc <mbedtls_ecp_group_load+0x17c>)
 8013dca:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013dcc:	4b40      	ldr	r3, [pc, #256]	; (8013ed0 <mbedtls_ecp_group_load+0x180>)
 8013dce:	60e3      	str	r3, [r4, #12]
 8013dd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013dd4:	6261      	str	r1, [r4, #36]	; 0x24
 8013dd6:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013dda:	2501      	movs	r5, #1
 8013ddc:	220c      	movs	r2, #12
    X->p = (mbedtls_mpi_uint *) p;
 8013dde:	6561      	str	r1, [r4, #84]	; 0x54
 8013de0:	f103 0190 	add.w	r1, r3, #144	; 0x90
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013de4:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013de8:	e9c4 5207 	strd	r5, r2, [r4, #28]
 8013dec:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013df0:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013df4:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013df8:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013dfa:	33c0      	adds	r3, #192	; 0xc0
 8013dfc:	e7d3      	b.n	8013da6 <mbedtls_ecp_group_load+0x56>
            grp->modp = ecp_mod_p256k1;
 8013dfe:	4b35      	ldr	r3, [pc, #212]	; (8013ed4 <mbedtls_ecp_group_load+0x184>)
 8013e00:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013e02:	4b35      	ldr	r3, [pc, #212]	; (8013ed8 <mbedtls_ecp_group_load+0x188>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e04:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013e06:	f103 0120 	add.w	r1, r3, #32
    X->s = 1;
 8013e0a:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 8013e0e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8013e12:	6261      	str	r1, [r4, #36]	; 0x24
 8013e14:	f103 0128 	add.w	r1, r3, #40	; 0x28
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e18:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013e1a:	6561      	str	r1, [r4, #84]	; 0x54
 8013e1c:	f103 0148 	add.w	r1, r3, #72	; 0x48
    X->s = 1;
 8013e20:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e24:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013e28:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013e2c:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013e30:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e34:	6165      	str	r5, [r4, #20]
 8013e36:	6225      	str	r5, [r4, #32]
 8013e38:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013e3a:	3368      	adds	r3, #104	; 0x68
 8013e3c:	e7b3      	b.n	8013da6 <mbedtls_ecp_group_load+0x56>
 8013e3e:	4b27      	ldr	r3, [pc, #156]	; (8013edc <mbedtls_ecp_group_load+0x18c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e40:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013e42:	f103 0120 	add.w	r1, r3, #32
    X->s = 1;
 8013e46:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 8013e4a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8013e4e:	6261      	str	r1, [r4, #36]	; 0x24
 8013e50:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e54:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013e56:	6561      	str	r1, [r4, #84]	; 0x54
 8013e58:	f103 0180 	add.w	r1, r3, #128	; 0x80
    X->s = 1;
 8013e5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e60:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013e64:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013e68:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013e6c:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e70:	6162      	str	r2, [r4, #20]
 8013e72:	6222      	str	r2, [r4, #32]
 8013e74:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013e76:	33a0      	adds	r3, #160	; 0xa0
 8013e78:	e795      	b.n	8013da6 <mbedtls_ecp_group_load+0x56>
 8013e7a:	4b19      	ldr	r3, [pc, #100]	; (8013ee0 <mbedtls_ecp_group_load+0x190>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e7c:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013e7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
    X->s = 1;
 8013e82:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 8013e86:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8013e8a:	6261      	str	r1, [r4, #36]	; 0x24
 8013e8c:	f103 0190 	add.w	r1, r3, #144	; 0x90
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e90:	220c      	movs	r2, #12
    X->p = (mbedtls_mpi_uint *) p;
 8013e92:	6561      	str	r1, [r4, #84]	; 0x54
 8013e94:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
    X->s = 1;
 8013e98:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e9c:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013ea0:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013ea4:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013ea8:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013eac:	6162      	str	r2, [r4, #20]
 8013eae:	6222      	str	r2, [r4, #32]
 8013eb0:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013eb2:	33f0      	adds	r3, #240	; 0xf0
 8013eb4:	e777      	b.n	8013da6 <mbedtls_ecp_group_load+0x56>
            mbedtls_ecp_group_free( grp );
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f7fe f922 	bl	8012100 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8013ebc:	4809      	ldr	r0, [pc, #36]	; (8013ee4 <mbedtls_ecp_group_load+0x194>)
 8013ebe:	e782      	b.n	8013dc6 <mbedtls_ecp_group_load+0x76>
 8013ec0:	080137bf 	.word	0x080137bf
 8013ec4:	0802ad30 	.word	0x0802ad30
 8013ec8:	2000059c 	.word	0x2000059c
 8013ecc:	080131c3 	.word	0x080131c3
 8013ed0:	0802add0 	.word	0x0802add0
 8013ed4:	08013c69 	.word	0x08013c69
 8013ed8:	0802aec0 	.word	0x0802aec0
 8013edc:	0802af48 	.word	0x0802af48
 8013ee0:	0802b008 	.word	0x0802b008
 8013ee4:	ffffb180 	.word	0xffffb180

08013ee8 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 8013ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013eea:	2b40      	cmp	r3, #64	; 0x40
{
 8013eec:	b093      	sub	sp, #76	; 0x4c
 8013eee:	4606      	mov	r6, r0
 8013ef0:	460f      	mov	r7, r1
 8013ef2:	4615      	mov	r5, r2
 8013ef4:	461c      	mov	r4, r3
    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013ef6:	d907      	bls.n	8013f08 <entropy_update+0x20>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        mbedtls_sha512( data, len, tmp, 0 );
 8013ef8:	4621      	mov	r1, r4
 8013efa:	4628      	mov	r0, r5
 8013efc:	2300      	movs	r3, #0
 8013efe:	aa02      	add	r2, sp, #8
 8013f00:	f006 f986 	bl	801a210 <mbedtls_sha512>
#else
        mbedtls_sha256( data, len, tmp, 0 );
#endif
        p = tmp;
 8013f04:	ad02      	add	r5, sp, #8
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 8013f06:	2440      	movs	r4, #64	; 0x40

    header[0] = source_id;
    header[1] = use_len & 0xFF;

#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_update( &ctx->accumulator, header, 2 );
 8013f08:	a901      	add	r1, sp, #4
 8013f0a:	4630      	mov	r0, r6
 8013f0c:	2202      	movs	r2, #2
    header[0] = source_id;
 8013f0e:	f88d 7004 	strb.w	r7, [sp, #4]
    header[1] = use_len & 0xFF;
 8013f12:	f88d 4005 	strb.w	r4, [sp, #5]
    mbedtls_sha512_update( &ctx->accumulator, header, 2 );
 8013f16:	f006 f870 	bl	8019ffa <mbedtls_sha512_update>
    mbedtls_sha512_update( &ctx->accumulator, p, use_len );
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	4622      	mov	r2, r4
 8013f1e:	4629      	mov	r1, r5
 8013f20:	f006 f86b 	bl	8019ffa <mbedtls_sha512_update>
    mbedtls_sha256_update( &ctx->accumulator, header, 2 );
    mbedtls_sha256_update( &ctx->accumulator, p, use_len );
#endif

    return( 0 );
}
 8013f24:	2000      	movs	r0, #0
 8013f26:	b013      	add	sp, #76	; 0x4c
 8013f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f2a <entropy_gather_internal.part.0>:
}

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 8013f2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{
    int ret, i, have_one_strong = 0;
 8013f2e:	2500      	movs	r5, #0
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 8013f30:	b0a3      	sub	sp, #140	; 0x8c
 8013f32:	4606      	mov	r6, r0
 8013f34:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 8013f36:	46a8      	mov	r8, r5
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 8013f38:	46a9      	mov	r9, r5
    for( i = 0; i < ctx->source_count; i++ )
 8013f3a:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
 8013f3e:	4598      	cmp	r8, r3
 8013f40:	db07      	blt.n	8013f52 <entropy_gather_internal.part.0+0x28>
            ctx->source[i].size += olen;
        }
    }

    if( have_one_strong == 0 )
        return( MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE );
 8013f42:	2d00      	cmp	r5, #0
 8013f44:	bf14      	ite	ne
 8013f46:	2000      	movne	r0, #0
 8013f48:	f06f 003c 	mvneq.w	r0, #60	; 0x3c

    return( 0 );
}
 8013f4c:	b023      	add	sp, #140	; 0x8c
 8013f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 8013f52:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
        olen = 0;
 8013f56:	f8cd 9004 	str.w	r9, [sp, #4]
            have_one_strong = 1;
 8013f5a:	2b01      	cmp	r3, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8013f5c:	e9d4 7037 	ldrd	r7, r0, [r4, #220]	; 0xdc
 8013f60:	ab01      	add	r3, sp, #4
 8013f62:	f04f 0280 	mov.w	r2, #128	; 0x80
 8013f66:	a902      	add	r1, sp, #8
            have_one_strong = 1;
 8013f68:	bf08      	it	eq
 8013f6a:	2501      	moveq	r5, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8013f6c:	47b8      	blx	r7
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	d1ec      	bne.n	8013f4c <entropy_gather_internal.part.0+0x22>
        if( olen > 0 )
 8013f72:	9b01      	ldr	r3, [sp, #4]
 8013f74:	b15b      	cbz	r3, 8013f8e <entropy_gather_internal.part.0+0x64>
            entropy_update( ctx, (unsigned char) i, buf, olen );
 8013f76:	aa02      	add	r2, sp, #8
 8013f78:	fa5f f188 	uxtb.w	r1, r8
 8013f7c:	4630      	mov	r0, r6
 8013f7e:	f7ff ffb3 	bl	8013ee8 <entropy_update>
            ctx->source[i].size += olen;
 8013f82:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8013f86:	9a01      	ldr	r2, [sp, #4]
 8013f88:	4413      	add	r3, r2
 8013f8a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    for( i = 0; i < ctx->source_count; i++ )
 8013f8e:	f108 0801 	add.w	r8, r8, #1
 8013f92:	3414      	adds	r4, #20
 8013f94:	e7d1      	b.n	8013f3a <entropy_gather_internal.part.0+0x10>
	...

08013f98 <mbedtls_entropy_init>:
{
 8013f98:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof(mbedtls_entropy_context) );
 8013f9a:	f44f 7284 	mov.w	r2, #264	; 0x108
{
 8013f9e:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof(mbedtls_entropy_context) );
 8013fa0:	2100      	movs	r1, #0
 8013fa2:	f00e fa95 	bl	80224d0 <memset>
    mbedtls_sha512_starts( &ctx->accumulator, 0 );
 8013fa6:	2100      	movs	r1, #0
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f005 f9cd 	bl	8019348 <mbedtls_sha512_starts>
    idx = ctx->source_count;
 8013fae:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8013fb2:	2a01      	cmp	r2, #1
 8013fb4:	dc10      	bgt.n	8013fd8 <mbedtls_entropy_init+0x40>
    ctx->source[idx].f_source  = f_source;
 8013fb6:	2314      	movs	r3, #20
 8013fb8:	fb03 4302 	mla	r3, r3, r2, r4
 8013fbc:	4907      	ldr	r1, [pc, #28]	; (8013fdc <mbedtls_entropy_init+0x44>)
 8013fbe:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
    ctx->source[idx].p_source  = p_source;
 8013fc2:	2100      	movs	r1, #0
 8013fc4:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
    ctx->source[idx].strong    = strong;
 8013fc8:	2101      	movs	r1, #1
 8013fca:	f04f 0c20 	mov.w	ip, #32
    ctx->source_count++;
 8013fce:	440a      	add	r2, r1
    ctx->source[idx].strong    = strong;
 8013fd0:	e9c3 c13a 	strd	ip, r1, [r3, #232]	; 0xe8
    ctx->source_count++;
 8013fd4:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
}
 8013fd8:	bd10      	pop	{r4, pc}
 8013fda:	bf00      	nop
 8013fdc:	08001305 	.word	0x08001305

08013fe0 <mbedtls_entropy_free>:
static void mbedtls_zeroize( void *v, size_t n ) {
 8013fe0:	f500 7384 	add.w	r3, r0, #264	; 0x108
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	4298      	cmp	r0, r3
 8013fe8:	d100      	bne.n	8013fec <mbedtls_entropy_free+0xc>
}
 8013fea:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8013fec:	f800 2b01 	strb.w	r2, [r0], #1
 8013ff0:	e7f9      	b.n	8013fe6 <mbedtls_entropy_free+0x6>

08013ff2 <mbedtls_entropy_add_source>:
{
 8013ff2:	b530      	push	{r4, r5, lr}
    idx = ctx->source_count;
 8013ff4:	f8d0 50d8 	ldr.w	r5, [r0, #216]	; 0xd8
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8013ff8:	2d01      	cmp	r5, #1
 8013ffa:	dc0e      	bgt.n	801401a <mbedtls_entropy_add_source+0x28>
    ctx->source[idx].f_source  = f_source;
 8013ffc:	2414      	movs	r4, #20
 8013ffe:	fb04 0405 	mla	r4, r4, r5, r0
    ctx->source_count++;
 8014002:	3501      	adds	r5, #1
    ctx->source[idx].threshold = threshold;
 8014004:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ctx->source[idx].strong    = strong;
 8014008:	9b03      	ldr	r3, [sp, #12]
 801400a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    ctx->source[idx].p_source  = p_source;
 801400e:	e9c4 1237 	strd	r1, r2, [r4, #220]	; 0xdc
    ctx->source_count++;
 8014012:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
    int idx, ret = 0;
 8014016:	2000      	movs	r0, #0
}
 8014018:	bd30      	pop	{r4, r5, pc}
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
 801401a:	f06f 003d 	mvn.w	r0, #61	; 0x3d
    return( ret );
 801401e:	e7fb      	b.n	8014018 <mbedtls_entropy_add_source+0x26>

08014020 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 8014020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8014024:	2a40      	cmp	r2, #64	; 0x40
{
 8014026:	b090      	sub	sp, #64	; 0x40
 8014028:	4604      	mov	r4, r0
 801402a:	460f      	mov	r7, r1
 801402c:	4616      	mov	r6, r2
    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 801402e:	d905      	bls.n	801403c <mbedtls_entropy_func+0x1c>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 8014030:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 8014034:	4628      	mov	r0, r5
 8014036:	b010      	add	sp, #64	; 0x40
 8014038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801403c:	f44f 7881 	mov.w	r8, #258	; 0x102
        if( count++ > ENTROPY_MAX_LOOP )
 8014040:	f1b8 0801 	subs.w	r8, r8, #1
 8014044:	d0f4      	beq.n	8014030 <mbedtls_entropy_func+0x10>
    if( ctx->source_count == 0 )
 8014046:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 801404a:	2b00      	cmp	r3, #0
 801404c:	d048      	beq.n	80140e0 <mbedtls_entropy_func+0xc0>
 801404e:	4620      	mov	r0, r4
 8014050:	f7ff ff6b 	bl	8013f2a <entropy_gather_internal.part.0>
        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 8014054:	4605      	mov	r5, r0
 8014056:	2800      	cmp	r0, #0
 8014058:	d1ec      	bne.n	8014034 <mbedtls_entropy_func+0x14>
        for( i = 0; i < ctx->source_count; i++ )
 801405a:	f8d4 e0d8 	ldr.w	lr, [r4, #216]	; 0xd8
 801405e:	4623      	mov	r3, r4
 8014060:	4684      	mov	ip, r0
        done = 1;
 8014062:	2201      	movs	r2, #1
        for( i = 0; i < ctx->source_count; i++ )
 8014064:	45e6      	cmp	lr, ip
 8014066:	dc2c      	bgt.n	80140c2 <mbedtls_entropy_func+0xa2>
    while( ! done );
 8014068:	2a00      	cmp	r2, #0
 801406a:	d0e9      	beq.n	8014040 <mbedtls_entropy_func+0x20>
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 801406c:	2240      	movs	r2, #64	; 0x40
 801406e:	2100      	movs	r1, #0
 8014070:	4668      	mov	r0, sp
 8014072:	f00e fa2d 	bl	80224d0 <memset>
    mbedtls_sha512_finish( &ctx->accumulator, buf );
 8014076:	4620      	mov	r0, r4
 8014078:	4669      	mov	r1, sp
 801407a:	f005 ffc3 	bl	801a004 <mbedtls_sha512_finish>
    memset( &ctx->accumulator, 0, sizeof( mbedtls_sha512_context ) );
 801407e:	22d8      	movs	r2, #216	; 0xd8
 8014080:	2100      	movs	r1, #0
 8014082:	4620      	mov	r0, r4
 8014084:	f00e fa24 	bl	80224d0 <memset>
    mbedtls_sha512_starts( &ctx->accumulator, 0 );
 8014088:	4620      	mov	r0, r4
 801408a:	2100      	movs	r1, #0
 801408c:	f005 f95c 	bl	8019348 <mbedtls_sha512_starts>
    mbedtls_sha512_update( &ctx->accumulator, buf, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8014090:	4620      	mov	r0, r4
 8014092:	2240      	movs	r2, #64	; 0x40
 8014094:	4669      	mov	r1, sp
 8014096:	f005 ffb0 	bl	8019ffa <mbedtls_sha512_update>
    mbedtls_sha512( buf, MBEDTLS_ENTROPY_BLOCK_SIZE, buf, 0 );
 801409a:	2300      	movs	r3, #0
 801409c:	466a      	mov	r2, sp
 801409e:	2140      	movs	r1, #64	; 0x40
 80140a0:	4668      	mov	r0, sp
 80140a2:	f006 f8b5 	bl	801a210 <mbedtls_sha512>
    for( i = 0; i < ctx->source_count; i++ )
 80140a6:	2300      	movs	r3, #0
 80140a8:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
        ctx->source[i].size = 0;
 80140ac:	2114      	movs	r1, #20
 80140ae:	34e4      	adds	r4, #228	; 0xe4
 80140b0:	4618      	mov	r0, r3
    for( i = 0; i < ctx->source_count; i++ )
 80140b2:	4293      	cmp	r3, r2
 80140b4:	db0e      	blt.n	80140d4 <mbedtls_entropy_func+0xb4>
    memcpy( output, buf, len );
 80140b6:	4632      	mov	r2, r6
 80140b8:	4669      	mov	r1, sp
 80140ba:	4638      	mov	r0, r7
 80140bc:	f00e f9e0 	bl	8022480 <memcpy>
    ret = 0;
 80140c0:	e7b8      	b.n	8014034 <mbedtls_entropy_func+0x14>
                done = 0;
 80140c2:	e9d3 1039 	ldrd	r1, r0, [r3, #228]	; 0xe4
        for( i = 0; i < ctx->source_count; i++ )
 80140c6:	f10c 0c01 	add.w	ip, ip, #1
                done = 0;
 80140ca:	4281      	cmp	r1, r0
 80140cc:	bf38      	it	cc
 80140ce:	2200      	movcc	r2, #0
        for( i = 0; i < ctx->source_count; i++ )
 80140d0:	3314      	adds	r3, #20
 80140d2:	e7c7      	b.n	8014064 <mbedtls_entropy_func+0x44>
        ctx->source[i].size = 0;
 80140d4:	fb01 fc03 	mul.w	ip, r1, r3
    for( i = 0; i < ctx->source_count; i++ )
 80140d8:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 80140da:	f844 000c 	str.w	r0, [r4, ip]
    for( i = 0; i < ctx->source_count; i++ )
 80140de:	e7e8      	b.n	80140b2 <mbedtls_entropy_func+0x92>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 80140e0:	f06f 053f 	mvn.w	r5, #63	; 0x3f
 80140e4:	e7a6      	b.n	8014034 <mbedtls_entropy_func+0x14>
	...

080140e8 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 80140e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 80140ec:	7bcc      	ldrb	r4, [r1, #15]
 80140ee:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80141e4 <gcm_mult+0xfc>
{
 80140f2:	9100      	str	r1, [sp, #0]
 80140f4:	f004 040f 	and.w	r4, r4, #15
 80140f8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3

    zh = ctx->HH[lo];
 80140fc:	e9d4 a530 	ldrd	sl, r5, [r4, #192]	; 0xc0
    zl = ctx->HL[lo];
 8014100:	e9d4 3410 	ldrd	r3, r4, [r4, #64]	; 0x40

    for( i = 15; i >= 0; i-- )
 8014104:	260f      	movs	r6, #15
    {
        lo = x[i] & 0xf;
 8014106:	9900      	ldr	r1, [sp, #0]
 8014108:	5d8f      	ldrb	r7, [r1, r6]
        hi = x[i] >> 4;
 801410a:	0939      	lsrs	r1, r7, #4
        lo = x[i] & 0xf;
 801410c:	f007 0b0f 	and.w	fp, r7, #15
        hi = x[i] >> 4;
 8014110:	f003 070f 	and.w	r7, r3, #15
 8014114:	9101      	str	r1, [sp, #4]

        if( i != 15 )
 8014116:	f85e 7037 	ldr.w	r7, [lr, r7, lsl #3]
 801411a:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 801411e:	0439      	lsls	r1, r7, #16
 8014120:	ea4f 181a 	mov.w	r8, sl, lsr #4
 8014124:	0927      	lsrs	r7, r4, #4
 8014126:	2e0f      	cmp	r6, #15
 8014128:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
 801412c:	ea47 770a 	orr.w	r7, r7, sl, lsl #28
 8014130:	ea48 7805 	orr.w	r8, r8, r5, lsl #28
 8014134:	ea4f 1915 	mov.w	r9, r5, lsr #4
 8014138:	d00d      	beq.n	8014156 <gcm_mult+0x6e>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
 801413a:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 801413e:	e9d4 3530 	ldrd	r3, r5, [r4, #192]	; 0xc0
 8014142:	ea83 0a08 	eor.w	sl, r3, r8
            zl ^= ctx->HL[lo];
 8014146:	e9d4 3410 	ldrd	r3, r4, [r4, #64]	; 0x40
            zh ^= ctx->HH[lo];
 801414a:	4069      	eors	r1, r5
 801414c:	ea81 0509 	eor.w	r5, r1, r9
            zl ^= ctx->HL[lo];
 8014150:	ea8c 0303 	eor.w	r3, ip, r3
 8014154:	407c      	eors	r4, r7

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 8014156:	9901      	ldr	r1, [sp, #4]
 8014158:	ea4f 770a 	mov.w	r7, sl, lsl #28
 801415c:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 8014160:	eb00 08c1 	add.w	r8, r0, r1, lsl #3
 8014164:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
 8014168:	ea47 1414 	orr.w	r4, r7, r4, lsr #4
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 801416c:	e9d8 7130 	ldrd	r7, r1, [r8, #192]	; 0xc0
        zh = ( zh >> 4 );
 8014170:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 8014174:	ea4a 7a05 	orr.w	sl, sl, r5, lsl #28
        zh ^= (uint64_t) last4[rem] << 48;
 8014178:	f003 030f 	and.w	r3, r3, #15
 801417c:	ea81 1515 	eor.w	r5, r1, r5, lsr #4
 8014180:	4918      	ldr	r1, [pc, #96]	; (80141e4 <gcm_mult+0xfc>)
 8014182:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
        zh ^= ctx->HH[hi];
 8014186:	ea8a 0a07 	eor.w	sl, sl, r7
 801418a:	ea85 4503 	eor.w	r5, r5, r3, lsl #16
        zl ^= ctx->HL[hi];
 801418e:	e9d8 3710 	ldrd	r3, r7, [r8, #64]	; 0x40
    for( i = 15; i >= 0; i-- )
 8014192:	3e01      	subs	r6, #1
        zl ^= ctx->HL[hi];
 8014194:	ea8c 0303 	eor.w	r3, ip, r3
 8014198:	ea84 0407 	eor.w	r4, r4, r7
    for( i = 15; i >= 0; i-- )
 801419c:	d2b3      	bcs.n	8014106 <gcm_mult+0x1e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 801419e:	0e29      	lsrs	r1, r5, #24
 80141a0:	7011      	strb	r1, [r2, #0]
 80141a2:	0c29      	lsrs	r1, r5, #16
 80141a4:	7051      	strb	r1, [r2, #1]
 80141a6:	0a29      	lsrs	r1, r5, #8
 80141a8:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 80141aa:	ea4f 611a 	mov.w	r1, sl, lsr #24
 80141ae:	7111      	strb	r1, [r2, #4]
 80141b0:	ea4f 411a 	mov.w	r1, sl, lsr #16
 80141b4:	7151      	strb	r1, [r2, #5]
 80141b6:	ea4f 211a 	mov.w	r1, sl, lsr #8
 80141ba:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80141bc:	0e21      	lsrs	r1, r4, #24
 80141be:	7211      	strb	r1, [r2, #8]
 80141c0:	0c21      	lsrs	r1, r4, #16
 80141c2:	7251      	strb	r1, [r2, #9]
 80141c4:	0a21      	lsrs	r1, r4, #8
 80141c6:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 80141c8:	0e19      	lsrs	r1, r3, #24
 80141ca:	7311      	strb	r1, [r2, #12]
 80141cc:	0c19      	lsrs	r1, r3, #16
 80141ce:	7351      	strb	r1, [r2, #13]
 80141d0:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_BE( zh >> 32, output, 0 );
 80141d2:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 80141d4:	f882 a007 	strb.w	sl, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80141d8:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 80141da:	7391      	strb	r1, [r2, #14]
 80141dc:	73d3      	strb	r3, [r2, #15]
}
 80141de:	b003      	add	sp, #12
 80141e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e4:	0802b128 	.word	0x0802b128

080141e8 <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 80141e8:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80141ec:	2100      	movs	r1, #0
 80141ee:	f00e b96f 	b.w	80224d0 <memset>

080141f2 <mbedtls_gcm_setkey>:
{
 80141f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f6:	4604      	mov	r4, r0
 80141f8:	b08d      	sub	sp, #52	; 0x34
 80141fa:	4608      	mov	r0, r1
 80141fc:	4690      	mov	r8, r2
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80141fe:	4619      	mov	r1, r3
 8014200:	2201      	movs	r2, #1
{
 8014202:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8014204:	f7fb ff82 	bl	801010c <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8014208:	4605      	mov	r5, r0
 801420a:	2800      	cmp	r0, #0
 801420c:	f000 8096 	beq.w	801433c <mbedtls_gcm_setkey+0x14a>
    if( cipher_info->block_size != 16 )
 8014210:	6947      	ldr	r7, [r0, #20]
 8014212:	2f10      	cmp	r7, #16
 8014214:	f040 8092 	bne.w	801433c <mbedtls_gcm_setkey+0x14a>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8014218:	4620      	mov	r0, r4
 801421a:	f7fb ff8f 	bl	801013c <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 801421e:	4629      	mov	r1, r5
 8014220:	4620      	mov	r0, r4
 8014222:	f7fc f961 	bl	80104e8 <mbedtls_cipher_setup>
 8014226:	2800      	cmp	r0, #0
 8014228:	f040 8085 	bne.w	8014336 <mbedtls_gcm_setkey+0x144>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 801422c:	2301      	movs	r3, #1
 801422e:	4632      	mov	r2, r6
 8014230:	4641      	mov	r1, r8
 8014232:	4620      	mov	r0, r4
 8014234:	f7fb ff94 	bl	8010160 <mbedtls_cipher_setkey>
 8014238:	2800      	cmp	r0, #0
 801423a:	d17c      	bne.n	8014336 <mbedtls_gcm_setkey+0x144>
    memset( h, 0, 16 );
 801423c:	4601      	mov	r1, r0
    size_t olen = 0;
 801423e:	9007      	str	r0, [sp, #28]
    memset( h, 0, 16 );
 8014240:	463a      	mov	r2, r7
 8014242:	a808      	add	r0, sp, #32
 8014244:	f00e f944 	bl	80224d0 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8014248:	ab07      	add	r3, sp, #28
 801424a:	9300      	str	r3, [sp, #0]
 801424c:	ab08      	add	r3, sp, #32
 801424e:	463a      	mov	r2, r7
 8014250:	4619      	mov	r1, r3
 8014252:	4620      	mov	r0, r4
 8014254:	f7fb ffd2 	bl	80101fc <mbedtls_cipher_update>
 8014258:	2800      	cmp	r0, #0
 801425a:	d16c      	bne.n	8014336 <mbedtls_gcm_setkey+0x144>
    GET_UINT32_BE( lo, h,  4  );
 801425c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801425e:	9f08      	ldr	r7, [sp, #32]
 8014260:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014264:	ba1b      	rev	r3, r3
 8014266:	ba3f      	rev	r7, r7
    GET_UINT32_BE( lo, h,  12 );
 8014268:	ba36      	rev	r6, r6
 801426a:	fa92 fc82 	rev.w	ip, r2
    ctx->HL[8] = vl;
 801426e:	e9c4 6c20 	strd	r6, ip, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 8014272:	e9c4 3740 	strd	r3, r7, [r4, #256]	; 0x100
    ctx->HH[0] = 0;
 8014276:	f04f 0800 	mov.w	r8, #0
 801427a:	f04f 0900 	mov.w	r9, #0
 801427e:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 8014282:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 8014286:	2103      	movs	r1, #3
    for( i = 4; i > 0; i >>= 1 )
 8014288:	2504      	movs	r5, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 801428a:	f04f 4861 	mov.w	r8, #3774873600	; 0xe1000000
 801428e:	f006 0201 	and.w	r2, r6, #1
 8014292:	fb08 f202 	mul.w	r2, r8, r2
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8014296:	ea4f 7ec3 	mov.w	lr, r3, lsl #31
 801429a:	0876      	lsrs	r6, r6, #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 801429c:	085b      	lsrs	r3, r3, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 801429e:	ea46 76cc 	orr.w	r6, r6, ip, lsl #31
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80142a2:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
        vl  = ( vh << 63 ) | ( vl >> 1 );
 80142a6:	ea4e 0c5c 	orr.w	ip, lr, ip, lsr #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80142aa:	ea82 0757 	eor.w	r7, r2, r7, lsr #1
    for( i = 4; i > 0; i >>= 1 )
 80142ae:	3901      	subs	r1, #1
 80142b0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
        ctx->HL[i] = vl;
 80142b4:	e9c2 6c10 	strd	r6, ip, [r2, #64]	; 0x40
        ctx->HH[i] = vh;
 80142b8:	e9c2 3730 	strd	r3, r7, [r2, #192]	; 0xc0
    for( i = 4; i > 0; i >>= 1 )
 80142bc:	ea4f 0565 	mov.w	r5, r5, asr #1
 80142c0:	d1e5      	bne.n	801428e <mbedtls_gcm_setkey+0x9c>
 80142c2:	f04f 0e03 	mov.w	lr, #3
    for( i = 2; i <= 8; i *= 2 )
 80142c6:	2202      	movs	r2, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 80142c8:	f104 0840 	add.w	r8, r4, #64	; 0x40
 80142cc:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
 80142d0:	eb09 06c2 	add.w	r6, r9, r2, lsl #3
 80142d4:	eb08 03c2 	add.w	r3, r8, r2, lsl #3
        vh = *HiH;
 80142d8:	6871      	ldr	r1, [r6, #4]
 80142da:	9103      	str	r1, [sp, #12]
        vl = *HiL;
 80142dc:	f858 1032 	ldr.w	r1, [r8, r2, lsl #3]
 80142e0:	9104      	str	r1, [sp, #16]
        vh = *HiH;
 80142e2:	f859 b032 	ldr.w	fp, [r9, r2, lsl #3]
        vl = *HiL;
 80142e6:	6859      	ldr	r1, [r3, #4]
 80142e8:	9105      	str	r1, [sp, #20]
        for( j = 1; j < i; j++ )
 80142ea:	f104 0548 	add.w	r5, r4, #72	; 0x48
 80142ee:	f106 0108 	add.w	r1, r6, #8
 80142f2:	9302      	str	r3, [sp, #8]
 80142f4:	eb06 0ac2 	add.w	sl, r6, r2, lsl #3
            HiH[j] = vh ^ ctx->HH[j];
 80142f8:	e9d5 7620 	ldrd	r7, r6, [r5, #128]	; 0x80
 80142fc:	9b03      	ldr	r3, [sp, #12]
 80142fe:	ea87 070b 	eor.w	r7, r7, fp
 8014302:	405e      	eors	r6, r3
 8014304:	e9c1 7600 	strd	r7, r6, [r1]
            HiL[j] = vl ^ ctx->HL[j];
 8014308:	9b04      	ldr	r3, [sp, #16]
 801430a:	682e      	ldr	r6, [r5, #0]
 801430c:	46ac      	mov	ip, r5
 801430e:	405e      	eors	r6, r3
 8014310:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8014314:	9b05      	ldr	r3, [sp, #20]
 8014316:	405f      	eors	r7, r3
 8014318:	9b02      	ldr	r3, [sp, #8]
 801431a:	3108      	adds	r1, #8
 801431c:	f843 6f08 	str.w	r6, [r3, #8]!
        for( j = 1; j < i; j++ )
 8014320:	4551      	cmp	r1, sl
            HiL[j] = vl ^ ctx->HL[j];
 8014322:	f105 0508 	add.w	r5, r5, #8
 8014326:	9302      	str	r3, [sp, #8]
 8014328:	605f      	str	r7, [r3, #4]
        for( j = 1; j < i; j++ )
 801432a:	d1e5      	bne.n	80142f8 <mbedtls_gcm_setkey+0x106>
    for( i = 2; i <= 8; i *= 2 )
 801432c:	f1be 0e01 	subs.w	lr, lr, #1
 8014330:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014334:	d1cc      	bne.n	80142d0 <mbedtls_gcm_setkey+0xde>
}
 8014336:	b00d      	add	sp, #52	; 0x34
 8014338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 801433c:	f06f 0013 	mvn.w	r0, #19
 8014340:	e7f9      	b.n	8014336 <mbedtls_gcm_setkey+0x144>

08014342 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8014342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014346:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8014348:	f04f 0800 	mov.w	r8, #0
{
 801434c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    size_t use_len, olen = 0;
 8014350:	f8cd 800c 	str.w	r8, [sp, #12]
{
 8014354:	4604      	mov	r4, r0
 8014356:	468b      	mov	fp, r1
 8014358:	4616      	mov	r6, r2

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 801435a:	461d      	mov	r5, r3
 801435c:	2b00      	cmp	r3, #0
 801435e:	f000 8092 	beq.w	8014486 <mbedtls_gcm_starts+0x144>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8014362:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 8014366:	2210      	movs	r2, #16
 8014368:	4641      	mov	r1, r8
 801436a:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 801436c:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8014370:	f00e f8ae 	bl	80224d0 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8014374:	2210      	movs	r2, #16
 8014376:	4641      	mov	r1, r8
 8014378:	4650      	mov	r0, sl
 801437a:	f00e f8a9 	bl	80224d0 <memset>

    ctx->mode = mode;
    ctx->len = 0;
 801437e:	2200      	movs	r2, #0
 8014380:	2300      	movs	r3, #0
    ctx->add_len = 0;

    if( iv_len == 12 )
 8014382:	2d0c      	cmp	r5, #12
    ctx->len = 0;
 8014384:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
    ctx->add_len = 0;
 8014388:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
    ctx->mode = mode;
 801438c:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    if( iv_len == 12 )
 8014390:	d11d      	bne.n	80143ce <mbedtls_gcm_starts+0x8c>
    {
        memcpy( ctx->y, iv, iv_len );
 8014392:	6833      	ldr	r3, [r6, #0]
 8014394:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8014398:	6873      	ldr	r3, [r6, #4]
 801439a:	607b      	str	r3, [r7, #4]
 801439c:	68b3      	ldr	r3, [r6, #8]
 801439e:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 80143a0:	2301      	movs	r3, #1
 80143a2:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 80143a6:	ab03      	add	r3, sp, #12
 80143a8:	9300      	str	r3, [sp, #0]
 80143aa:	2210      	movs	r2, #16
 80143ac:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 80143b0:	4639      	mov	r1, r7
 80143b2:	4620      	mov	r0, r4
 80143b4:	f7fb ff22 	bl	80101fc <mbedtls_cipher_update>
 80143b8:	4605      	mov	r5, r0
 80143ba:	b920      	cbnz	r0, 80143c6 <mbedtls_gcm_starts+0x84>
      ( (uint64_t) add_len ) >> 61 != 0 )
 80143bc:	e9c4 9052 	strd	r9, r0, [r4, #328]	; 0x148
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 80143c0:	f1b9 0f00 	cmp.w	r9, #0
 80143c4:	d145      	bne.n	8014452 <mbedtls_gcm_starts+0x110>
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
 80143c6:	4628      	mov	r0, r5
 80143c8:	b009      	add	sp, #36	; 0x24
 80143ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 80143ce:	f3c5 5247 	ubfx	r2, r5, #21, #8
 80143d2:	f88d 201c 	strb.w	r2, [sp, #28]
        memset( work_buf, 0x00, 16 );
 80143d6:	e9cd 8804 	strd	r8, r8, [sp, #16]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 80143da:	f3c5 324f 	ubfx	r2, r5, #13, #16
 80143de:	00eb      	lsls	r3, r5, #3
 80143e0:	f88d 201d 	strb.w	r2, [sp, #29]
 80143e4:	f3c5 1257 	ubfx	r2, r5, #5, #24
        memset( work_buf, 0x00, 16 );
 80143e8:	f8cd 8018 	str.w	r8, [sp, #24]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 80143ec:	f88d 201e 	strb.w	r2, [sp, #30]
 80143f0:	f88d 301f 	strb.w	r3, [sp, #31]
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 80143f4:	2d10      	cmp	r5, #16
 80143f6:	46ab      	mov	fp, r5
 80143f8:	f504 78b0 	add.w	r8, r4, #352	; 0x160
 80143fc:	bf28      	it	cs
 80143fe:	f04f 0b10 	movcs.w	fp, #16
            for( i = 0; i < use_len; i++ )
 8014402:	4633      	mov	r3, r6
 8014404:	eb0b 0006 	add.w	r0, fp, r6
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8014408:	4642      	mov	r2, r8
                ctx->y[i] ^= p[i];
 801440a:	f813 cb01 	ldrb.w	ip, [r3], #1
 801440e:	7811      	ldrb	r1, [r2, #0]
            for( i = 0; i < use_len; i++ )
 8014410:	4283      	cmp	r3, r0
                ctx->y[i] ^= p[i];
 8014412:	ea81 010c 	eor.w	r1, r1, ip
 8014416:	f802 1b01 	strb.w	r1, [r2], #1
            for( i = 0; i < use_len; i++ )
 801441a:	d1f6      	bne.n	801440a <mbedtls_gcm_starts+0xc8>
            gcm_mult( ctx, ctx->y, ctx->y );
 801441c:	463a      	mov	r2, r7
 801441e:	4639      	mov	r1, r7
 8014420:	4620      	mov	r0, r4
 8014422:	f7ff fe61 	bl	80140e8 <gcm_mult>
        while( iv_len > 0 )
 8014426:	ebb5 050b 	subs.w	r5, r5, fp
            p += use_len;
 801442a:	445e      	add	r6, fp
        while( iv_len > 0 )
 801442c:	d1e2      	bne.n	80143f4 <mbedtls_gcm_starts+0xb2>
 801442e:	aa04      	add	r2, sp, #16
 8014430:	f504 71b8 	add.w	r1, r4, #368	; 0x170
            ctx->y[i] ^= work_buf[i];
 8014434:	f898 3000 	ldrb.w	r3, [r8]
 8014438:	f812 0b01 	ldrb.w	r0, [r2], #1
 801443c:	4043      	eors	r3, r0
 801443e:	f808 3b01 	strb.w	r3, [r8], #1
        for( i = 0; i < 16; i++ )
 8014442:	4588      	cmp	r8, r1
 8014444:	d1f6      	bne.n	8014434 <mbedtls_gcm_starts+0xf2>
        gcm_mult( ctx, ctx->y, ctx->y );
 8014446:	463a      	mov	r2, r7
 8014448:	4639      	mov	r1, r7
 801444a:	4620      	mov	r0, r4
 801444c:	f7ff fe4c 	bl	80140e8 <gcm_mult>
 8014450:	e7a9      	b.n	80143a6 <mbedtls_gcm_starts+0x64>
        use_len = ( add_len < 16 ) ? add_len : 16;
 8014452:	464f      	mov	r7, r9
 8014454:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014456:	2f10      	cmp	r7, #16
 8014458:	bf28      	it	cs
 801445a:	2710      	movcs	r7, #16
        for( i = 0; i < use_len; i++ )
 801445c:	f504 72b8 	add.w	r2, r4, #368	; 0x170
 8014460:	19de      	adds	r6, r3, r7
            ctx->buf[i] ^= p[i];
 8014462:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014466:	7811      	ldrb	r1, [r2, #0]
        for( i = 0; i < use_len; i++ )
 8014468:	429e      	cmp	r6, r3
            ctx->buf[i] ^= p[i];
 801446a:	ea81 0100 	eor.w	r1, r1, r0
 801446e:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < use_len; i++ )
 8014472:	d1f6      	bne.n	8014462 <mbedtls_gcm_starts+0x120>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8014474:	4652      	mov	r2, sl
 8014476:	4651      	mov	r1, sl
 8014478:	4620      	mov	r0, r4
 801447a:	f7ff fe35 	bl	80140e8 <gcm_mult>
        add_len -= use_len;
 801447e:	eba9 0907 	sub.w	r9, r9, r7
        p += use_len;
 8014482:	9612      	str	r6, [sp, #72]	; 0x48
 8014484:	e79c      	b.n	80143c0 <mbedtls_gcm_starts+0x7e>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8014486:	f06f 0513 	mvn.w	r5, #19
 801448a:	e79c      	b.n	80143c6 <mbedtls_gcm_starts+0x84>

0801448c <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 801448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014490:	461f      	mov	r7, r3
 8014492:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8014494:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 8014496:	4297      	cmp	r7, r2
{
 8014498:	4604      	mov	r4, r0
 801449a:	460d      	mov	r5, r1
 801449c:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
 801449e:	9303      	str	r3, [sp, #12]
    if( output > input && (size_t) ( output - input ) < length )
 80144a0:	d902      	bls.n	80144a8 <mbedtls_gcm_update+0x1c>
 80144a2:	1abb      	subs	r3, r7, r2
 80144a4:	428b      	cmp	r3, r1
 80144a6:	d36a      	bcc.n	801457e <mbedtls_gcm_update+0xf2>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 80144a8:	e9d4 ab50 	ldrd	sl, fp, [r4, #320]	; 0x140
 80144ac:	2300      	movs	r3, #0
 80144ae:	eb1a 0805 	adds.w	r8, sl, r5
 80144b2:	eb5b 0903 	adcs.w	r9, fp, r3
 80144b6:	f04f 0000 	mov.w	r0, #0
 80144ba:	f04f 0100 	mov.w	r1, #0
 80144be:	bf24      	itt	cs
 80144c0:	2001      	movcs	r0, #1
 80144c2:	2100      	movcs	r1, #0
 80144c4:	ea50 0301 	orrs.w	r3, r0, r1
 80144c8:	d159      	bne.n	801457e <mbedtls_gcm_update+0xf2>
 80144ca:	230f      	movs	r3, #15
 80144cc:	f06f 021f 	mvn.w	r2, #31
 80144d0:	454b      	cmp	r3, r9
 80144d2:	bf08      	it	eq
 80144d4:	4542      	cmpeq	r2, r8
 80144d6:	d352      	bcc.n	801457e <mbedtls_gcm_update+0xf2>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 80144d8:	e9c4 8950 	strd	r8, r9, [r4, #320]	; 0x140

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80144dc:	f504 7ab0 	add.w	sl, r4, #352	; 0x160
 80144e0:	f204 196b 	addw	r9, r4, #363	; 0x16b
    while( length > 0 )
 80144e4:	b91d      	cbnz	r5, 80144ee <mbedtls_gcm_update+0x62>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 80144e6:	4628      	mov	r0, r5
}
 80144e8:	b009      	add	sp, #36	; 0x24
 80144ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        use_len = ( length < 16 ) ? length : 16;
 80144ee:	2d10      	cmp	r5, #16
 80144f0:	46a8      	mov	r8, r5
 80144f2:	f204 126f 	addw	r2, r4, #367	; 0x16f
 80144f6:	bf28      	it	cs
 80144f8:	f04f 0810 	movcs.w	r8, #16
            if( ++ctx->y[i - 1] != 0 )
 80144fc:	7813      	ldrb	r3, [r2, #0]
 80144fe:	3301      	adds	r3, #1
 8014500:	b2db      	uxtb	r3, r3
 8014502:	f802 3901 	strb.w	r3, [r2], #-1
 8014506:	b90b      	cbnz	r3, 801450c <mbedtls_gcm_update+0x80>
        for( i = 16; i > 12; i-- )
 8014508:	454a      	cmp	r2, r9
 801450a:	d1f7      	bne.n	80144fc <mbedtls_gcm_update+0x70>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 801450c:	ab03      	add	r3, sp, #12
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	2210      	movs	r2, #16
 8014512:	ab04      	add	r3, sp, #16
 8014514:	4651      	mov	r1, sl
 8014516:	4620      	mov	r0, r4
 8014518:	f7fb fe70 	bl	80101fc <mbedtls_cipher_update>
 801451c:	2800      	cmp	r0, #0
 801451e:	d1e3      	bne.n	80144e8 <mbedtls_gcm_update+0x5c>
 8014520:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8014524:	4631      	mov	r1, r6
 8014526:	f10d 0c10 	add.w	ip, sp, #16
 801452a:	f107 3eff 	add.w	lr, r7, #4294967295
 801452e:	4446      	add	r6, r8
 8014530:	461a      	mov	r2, r3
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8014532:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 8014536:	b928      	cbnz	r0, 8014544 <mbedtls_gcm_update+0xb8>
                ctx->buf[i] ^= p[i];
 8014538:	7818      	ldrb	r0, [r3, #0]
 801453a:	f891 b000 	ldrb.w	fp, [r1]
 801453e:	ea80 000b 	eor.w	r0, r0, fp
 8014542:	7018      	strb	r0, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 8014544:	f811 0b01 	ldrb.w	r0, [r1], #1
 8014548:	f81c bb01 	ldrb.w	fp, [ip], #1
 801454c:	ea8b 0b00 	eor.w	fp, fp, r0
 8014550:	f80e bf01 	strb.w	fp, [lr, #1]!
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8014554:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 8014558:	2801      	cmp	r0, #1
                ctx->buf[i] ^= out_p[i];
 801455a:	bf02      	ittt	eq
 801455c:	7818      	ldrbeq	r0, [r3, #0]
 801455e:	ea8b 0b00 	eoreq.w	fp, fp, r0
 8014562:	f883 b000 	strbeq.w	fp, [r3]
        for( i = 0; i < use_len; i++ )
 8014566:	428e      	cmp	r6, r1
 8014568:	f103 0301 	add.w	r3, r3, #1
 801456c:	d1e1      	bne.n	8014532 <mbedtls_gcm_update+0xa6>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 801456e:	4611      	mov	r1, r2
 8014570:	4620      	mov	r0, r4
 8014572:	f7ff fdb9 	bl	80140e8 <gcm_mult>
        length -= use_len;
 8014576:	eba5 0508 	sub.w	r5, r5, r8
        out_p += use_len;
 801457a:	4447      	add	r7, r8
 801457c:	e7b2      	b.n	80144e4 <mbedtls_gcm_update+0x58>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 801457e:	f06f 0013 	mvn.w	r0, #19
 8014582:	e7b1      	b.n	80144e8 <mbedtls_gcm_update+0x5c>

08014584 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8014584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 8014588:	e9d0 3550 	ldrd	r3, r5, [r0, #320]	; 0x140
 801458c:	00ed      	lsls	r5, r5, #3
 801458e:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8014592:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8014596:	e9d0 3652 	ldrd	r3, r6, [r0, #328]	; 0x148
 801459a:	00f6      	lsls	r6, r6, #3
 801459c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80145a0:	ea4f 09c3 	mov.w	r9, r3, lsl #3

    if( tag_len > 16 || tag_len < 4 )
 80145a4:	1f13      	subs	r3, r2, #4
 80145a6:	2b0c      	cmp	r3, #12
{
 80145a8:	4604      	mov	r4, r0
 80145aa:	460f      	mov	r7, r1
 80145ac:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
 80145ae:	d847      	bhi.n	8014640 <mbedtls_gcm_finish+0xbc>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 80145b0:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 80145b4:	4638      	mov	r0, r7
 80145b6:	f00d ff63 	bl	8022480 <memcpy>

    if( orig_len || orig_add_len )
 80145ba:	ea48 0209 	orr.w	r2, r8, r9
 80145be:	ea45 0306 	orr.w	r3, r5, r6
 80145c2:	4313      	orrs	r3, r2
 80145c4:	d103      	bne.n	80145ce <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 80145c6:	2000      	movs	r0, #0
}
 80145c8:	b004      	add	sp, #16
 80145ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80145ce:	0e33      	lsrs	r3, r6, #24
 80145d0:	f88d 3000 	strb.w	r3, [sp]
 80145d4:	0c33      	lsrs	r3, r6, #16
 80145d6:	f88d 3001 	strb.w	r3, [sp, #1]
 80145da:	0a33      	lsrs	r3, r6, #8
 80145dc:	f88d 3002 	strb.w	r3, [sp, #2]
 80145e0:	fa99 f389 	rev.w	r3, r9
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80145e4:	9301      	str	r3, [sp, #4]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80145e6:	0e2b      	lsrs	r3, r5, #24
 80145e8:	f88d 3008 	strb.w	r3, [sp, #8]
 80145ec:	0c2b      	lsrs	r3, r5, #16
 80145ee:	f88d 3009 	strb.w	r3, [sp, #9]
 80145f2:	0a2b      	lsrs	r3, r5, #8
 80145f4:	f88d 300a 	strb.w	r3, [sp, #10]
 80145f8:	f504 72b8 	add.w	r2, r4, #368	; 0x170
 80145fc:	fa98 f388 	rev.w	r3, r8
 8014600:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8014604:	9303      	str	r3, [sp, #12]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8014606:	f88d 6003 	strb.w	r6, [sp, #3]
        for( i = 0; i < 16; i++ )
 801460a:	4668      	mov	r0, sp
 801460c:	f504 75c0 	add.w	r5, r4, #384	; 0x180
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8014610:	4613      	mov	r3, r2
            ctx->buf[i] ^= work_buf[i];
 8014612:	7819      	ldrb	r1, [r3, #0]
 8014614:	f810 6b01 	ldrb.w	r6, [r0], #1
 8014618:	4071      	eors	r1, r6
 801461a:	f803 1b01 	strb.w	r1, [r3], #1
        for( i = 0; i < 16; i++ )
 801461e:	42ab      	cmp	r3, r5
 8014620:	d1f7      	bne.n	8014612 <mbedtls_gcm_finish+0x8e>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8014622:	4620      	mov	r0, r4
 8014624:	4611      	mov	r1, r2
 8014626:	f7ff fd5f 	bl	80140e8 <gcm_mult>
        for( i = 0; i < tag_len; i++ )
 801462a:	44ba      	add	sl, r7
 801462c:	4638      	mov	r0, r7
            tag[i] ^= ctx->buf[i];
 801462e:	7803      	ldrb	r3, [r0, #0]
 8014630:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014634:	404b      	eors	r3, r1
 8014636:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < tag_len; i++ )
 801463a:	4582      	cmp	sl, r0
 801463c:	d1f7      	bne.n	801462e <mbedtls_gcm_finish+0xaa>
 801463e:	e7c2      	b.n	80145c6 <mbedtls_gcm_finish+0x42>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8014640:	f06f 0013 	mvn.w	r0, #19
 8014644:	e7c0      	b.n	80145c8 <mbedtls_gcm_finish+0x44>

08014646 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8014646:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801464a:	4615      	mov	r5, r2
 801464c:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 801464e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014650:	9301      	str	r3, [sp, #4]
 8014652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014654:	9300      	str	r3, [sp, #0]
 8014656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8014658:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
 801465c:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8014660:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8014662:	f7ff fe6e 	bl	8014342 <mbedtls_gcm_starts>
 8014666:	b970      	cbnz	r0, 8014686 <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8014668:	464b      	mov	r3, r9
 801466a:	4642      	mov	r2, r8
 801466c:	4629      	mov	r1, r5
 801466e:	4620      	mov	r0, r4
 8014670:	f7ff ff0c 	bl	801448c <mbedtls_gcm_update>
 8014674:	b938      	cbnz	r0, 8014686 <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8014676:	463a      	mov	r2, r7
 8014678:	4631      	mov	r1, r6
 801467a:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 801467c:	b003      	add	sp, #12
 801467e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8014682:	f7ff bf7f 	b.w	8014584 <mbedtls_gcm_finish>
}
 8014686:	b003      	add	sp, #12
 8014688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801468c <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 801468c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801468e:	b08d      	sub	sp, #52	; 0x34
 8014690:	460e      	mov	r6, r1
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8014692:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014694:	9103      	str	r1, [sp, #12]
 8014696:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
 8014698:	9f15      	ldr	r7, [sp, #84]	; 0x54
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 801469a:	9102      	str	r1, [sp, #8]
 801469c:	9912      	ldr	r1, [sp, #72]	; 0x48
{
 801469e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80146a0:	9404      	str	r4, [sp, #16]
 80146a2:	ad08      	add	r5, sp, #32
 80146a4:	e9cd 3100 	strd	r3, r1, [sp]
 80146a8:	e9cd 7505 	strd	r7, r5, [sp, #20]
 80146ac:	4613      	mov	r3, r2
 80146ae:	2100      	movs	r1, #0
 80146b0:	4632      	mov	r2, r6
 80146b2:	f7ff ffc8 	bl	8014646 <mbedtls_gcm_crypt_and_tag>
 80146b6:	b948      	cbnz	r0, 80146cc <mbedtls_gcm_auth_decrypt+0x40>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80146b8:	4603      	mov	r3, r0
 80146ba:	42bb      	cmp	r3, r7
 80146bc:	d108      	bne.n	80146d0 <mbedtls_gcm_auth_decrypt+0x44>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 80146be:	b128      	cbz	r0, 80146cc <mbedtls_gcm_auth_decrypt+0x40>
 80146c0:	4426      	add	r6, r4
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80146c2:	2300      	movs	r3, #0
 80146c4:	42b4      	cmp	r4, r6
 80146c6:	d10a      	bne.n	80146de <mbedtls_gcm_auth_decrypt+0x52>
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 80146c8:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 80146cc:	b00d      	add	sp, #52	; 0x34
 80146ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 80146d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80146d2:	5ce9      	ldrb	r1, [r5, r3]
 80146d4:	5cd2      	ldrb	r2, [r2, r3]
 80146d6:	404a      	eors	r2, r1
 80146d8:	4310      	orrs	r0, r2
    for( diff = 0, i = 0; i < tag_len; i++ )
 80146da:	3301      	adds	r3, #1
 80146dc:	e7ed      	b.n	80146ba <mbedtls_gcm_auth_decrypt+0x2e>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80146de:	f804 3b01 	strb.w	r3, [r4], #1
 80146e2:	e7ef      	b.n	80146c4 <mbedtls_gcm_auth_decrypt+0x38>

080146e4 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 80146e4:	b510      	push	{r4, lr}
 80146e6:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 80146e8:	f7fb fd28 	bl	801013c <mbedtls_cipher_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80146ec:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 80146f0:	2200      	movs	r2, #0
 80146f2:	429c      	cmp	r4, r3
 80146f4:	d100      	bne.n	80146f8 <mbedtls_gcm_free+0x14>
    mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
}
 80146f6:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80146f8:	f804 2b01 	strb.w	r2, [r4], #1
 80146fc:	e7f9      	b.n	80146f2 <mbedtls_gcm_free+0xe>

080146fe <mbedtls_hmac_drbg_free.part.0>:
}

/*
 * Free an HMAC_DRBG context
 */
void mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )
 80146fe:	b510      	push	{r4, lr}
 8014700:	4604      	mov	r4, r0
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_md_free( &ctx->md_ctx );
 8014702:	f000 f92d 	bl	8014960 <mbedtls_md_free>
static void mbedtls_zeroize( void *v, size_t n ) {
 8014706:	f104 0364 	add.w	r3, r4, #100	; 0x64
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801470a:	2200      	movs	r2, #0
 801470c:	429c      	cmp	r4, r3
 801470e:	d100      	bne.n	8014712 <mbedtls_hmac_drbg_free.part.0+0x14>
    mbedtls_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
}
 8014710:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014712:	f804 2b01 	strb.w	r2, [r4], #1
 8014716:	e7f9      	b.n	801470c <mbedtls_hmac_drbg_free.part.0+0xe>

08014718 <mbedtls_hmac_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );
 8014718:	2264      	movs	r2, #100	; 0x64
 801471a:	2100      	movs	r1, #0
 801471c:	f00d bed8 	b.w	80224d0 <memset>

08014720 <mbedtls_hmac_drbg_update>:
{
 8014720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014724:	4604      	mov	r4, r0
 8014726:	b093      	sub	sp, #76	; 0x4c
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8014728:	6800      	ldr	r0, [r0, #0]
{
 801472a:	460e      	mov	r6, r1
 801472c:	4617      	mov	r7, r2
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 801472e:	f000 fa55 	bl	8014bdc <mbedtls_md_get_size>
 8014732:	4605      	mov	r5, r0
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 8014734:	2e00      	cmp	r6, #0
 8014736:	d03c      	beq.n	80147b2 <mbedtls_hmac_drbg_update+0x92>
 8014738:	2f00      	cmp	r7, #0
 801473a:	bf14      	ite	ne
 801473c:	f04f 0802 	movne.w	r8, #2
 8014740:	f04f 0801 	moveq.w	r8, #1
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 8014744:	2300      	movs	r3, #0
 8014746:	f88d 3004 	strb.w	r3, [sp, #4]
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 801474a:	f104 090c 	add.w	r9, r4, #12
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 801474e:	4620      	mov	r0, r4
 8014750:	f000 fa20 	bl	8014b94 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 8014754:	462a      	mov	r2, r5
 8014756:	4649      	mov	r1, r9
 8014758:	4620      	mov	r0, r4
 801475a:	f000 f9df 	bl	8014b1c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_update( &ctx->md_ctx, sep, 1 );
 801475e:	2201      	movs	r2, #1
 8014760:	a901      	add	r1, sp, #4
 8014762:	4620      	mov	r0, r4
 8014764:	f000 f9da 	bl	8014b1c <mbedtls_md_hmac_update>
        if( rounds == 2 )
 8014768:	f1b8 0f02 	cmp.w	r8, #2
 801476c:	d104      	bne.n	8014778 <mbedtls_hmac_drbg_update+0x58>
            mbedtls_md_hmac_update( &ctx->md_ctx, additional, add_len );
 801476e:	463a      	mov	r2, r7
 8014770:	4631      	mov	r1, r6
 8014772:	4620      	mov	r0, r4
 8014774:	f000 f9d2 	bl	8014b1c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, K );
 8014778:	a902      	add	r1, sp, #8
 801477a:	4620      	mov	r0, r4
 801477c:	f000 f9de 	bl	8014b3c <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len );
 8014780:	462a      	mov	r2, r5
 8014782:	a902      	add	r1, sp, #8
 8014784:	4620      	mov	r0, r4
 8014786:	f000 f969 	bl	8014a5c <mbedtls_md_hmac_starts>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 801478a:	462a      	mov	r2, r5
 801478c:	4649      	mov	r1, r9
 801478e:	4620      	mov	r0, r4
 8014790:	f000 f9c4 	bl	8014b1c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
 8014794:	4649      	mov	r1, r9
 8014796:	4620      	mov	r0, r4
 8014798:	f000 f9d0 	bl	8014b3c <mbedtls_md_hmac_finish>
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 801479c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80147a0:	3301      	adds	r3, #1
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	4543      	cmp	r3, r8
 80147a6:	f88d 3004 	strb.w	r3, [sp, #4]
 80147aa:	d3d0      	bcc.n	801474e <mbedtls_hmac_drbg_update+0x2e>
}
 80147ac:	b013      	add	sp, #76	; 0x4c
 80147ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 80147b2:	f04f 0801 	mov.w	r8, #1
 80147b6:	e7c5      	b.n	8014744 <mbedtls_hmac_drbg_update+0x24>

080147b8 <mbedtls_hmac_drbg_seed_buf>:
{
 80147b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147bc:	4617      	mov	r7, r2
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 80147be:	2201      	movs	r2, #1
{
 80147c0:	4604      	mov	r4, r0
 80147c2:	460e      	mov	r6, r1
 80147c4:	4698      	mov	r8, r3
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 80147c6:	f000 f8ef 	bl	80149a8 <mbedtls_md_setup>
 80147ca:	4605      	mov	r5, r0
 80147cc:	b9b0      	cbnz	r0, 80147fc <mbedtls_hmac_drbg_seed_buf+0x44>
    mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, mbedtls_md_get_size( md_info ) );
 80147ce:	4630      	mov	r0, r6
 80147d0:	f000 fa04 	bl	8014bdc <mbedtls_md_get_size>
 80147d4:	f104 090c 	add.w	r9, r4, #12
 80147d8:	4602      	mov	r2, r0
 80147da:	4649      	mov	r1, r9
 80147dc:	4620      	mov	r0, r4
 80147de:	f000 f93d 	bl	8014a5c <mbedtls_md_hmac_starts>
    memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );
 80147e2:	4630      	mov	r0, r6
 80147e4:	f000 f9fa 	bl	8014bdc <mbedtls_md_get_size>
 80147e8:	2101      	movs	r1, #1
 80147ea:	4602      	mov	r2, r0
 80147ec:	4648      	mov	r0, r9
 80147ee:	f00d fe6f 	bl	80224d0 <memset>
    mbedtls_hmac_drbg_update( ctx, data, data_len );
 80147f2:	4642      	mov	r2, r8
 80147f4:	4639      	mov	r1, r7
 80147f6:	4620      	mov	r0, r4
 80147f8:	f7ff ff92 	bl	8014720 <mbedtls_hmac_drbg_update>
}
 80147fc:	4628      	mov	r0, r5
 80147fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014802 <mbedtls_hmac_drbg_reseed>:
{
 8014802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 8014806:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 801480a:	b0e0      	sub	sp, #384	; 0x180
 801480c:	4604      	mov	r4, r0
 801480e:	4688      	mov	r8, r1
 8014810:	4616      	mov	r6, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 8014812:	d828      	bhi.n	8014866 <mbedtls_hmac_drbg_reseed+0x64>
        ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )
 8014814:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8014816:	18ab      	adds	r3, r5, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 8014818:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 801481c:	d823      	bhi.n	8014866 <mbedtls_hmac_drbg_reseed+0x64>
    memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );
 801481e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8014822:	2100      	movs	r1, #0
 8014824:	4668      	mov	r0, sp
 8014826:	f00d fe53 	bl	80224d0 <memset>
    if( ctx->f_entropy( ctx->p_entropy, seed, ctx->entropy_len ) != 0 )
 801482a:	462a      	mov	r2, r5
 801482c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801482e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014830:	4669      	mov	r1, sp
 8014832:	4798      	blx	r3
 8014834:	4605      	mov	r5, r0
 8014836:	b9c8      	cbnz	r0, 801486c <mbedtls_hmac_drbg_reseed+0x6a>
    seedlen = ctx->entropy_len;
 8014838:	6d27      	ldr	r7, [r4, #80]	; 0x50
    if( additional != NULL && len != 0 )
 801483a:	f1b8 0f00 	cmp.w	r8, #0
 801483e:	d007      	beq.n	8014850 <mbedtls_hmac_drbg_reseed+0x4e>
 8014840:	b136      	cbz	r6, 8014850 <mbedtls_hmac_drbg_reseed+0x4e>
        memcpy( seed + seedlen, additional, len );
 8014842:	eb0d 0007 	add.w	r0, sp, r7
 8014846:	4632      	mov	r2, r6
 8014848:	4641      	mov	r1, r8
 801484a:	f00d fe19 	bl	8022480 <memcpy>
        seedlen += len;
 801484e:	4437      	add	r7, r6
    mbedtls_hmac_drbg_update( ctx, seed, seedlen );
 8014850:	463a      	mov	r2, r7
 8014852:	4669      	mov	r1, sp
 8014854:	4620      	mov	r0, r4
 8014856:	f7ff ff63 	bl	8014720 <mbedtls_hmac_drbg_update>
    ctx->reseed_counter = 1;
 801485a:	2301      	movs	r3, #1
 801485c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 801485e:	4628      	mov	r0, r5
 8014860:	b060      	add	sp, #384	; 0x180
 8014862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 8014866:	f06f 0504 	mvn.w	r5, #4
 801486a:	e7f8      	b.n	801485e <mbedtls_hmac_drbg_reseed+0x5c>
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );
 801486c:	f06f 0508 	mvn.w	r5, #8
 8014870:	e7f5      	b.n	801485e <mbedtls_hmac_drbg_reseed+0x5c>

08014872 <mbedtls_hmac_drbg_random_with_add>:
{
 8014872:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014876:	4604      	mov	r4, r0
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8014878:	6800      	ldr	r0, [r0, #0]
{
 801487a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801487c:	4616      	mov	r6, r2
 801487e:	4688      	mov	r8, r1
 8014880:	461f      	mov	r7, r3
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8014882:	f000 f9ab 	bl	8014bdc <mbedtls_md_get_size>
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 8014886:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 801488a:	4681      	mov	r9, r0
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 801488c:	d843      	bhi.n	8014916 <mbedtls_hmac_drbg_random_with_add+0xa4>
    if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )
 801488e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8014892:	d843      	bhi.n	801491c <mbedtls_hmac_drbg_random_with_add+0xaa>
    if( ctx->f_entropy != NULL && /* For no-reseeding instances */
 8014894:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8014896:	b1db      	cbz	r3, 80148d0 <mbedtls_hmac_drbg_random_with_add+0x5e>
 8014898:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801489a:	2b01      	cmp	r3, #1
 801489c:	d003      	beq.n	80148a6 <mbedtls_hmac_drbg_random_with_add+0x34>
        ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||
 801489e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80148a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80148a2:	429a      	cmp	r2, r3
 80148a4:	dd14      	ble.n	80148d0 <mbedtls_hmac_drbg_random_with_add+0x5e>
        if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 80148a6:	462a      	mov	r2, r5
 80148a8:	4639      	mov	r1, r7
 80148aa:	4620      	mov	r0, r4
 80148ac:	f7ff ffa9 	bl	8014802 <mbedtls_hmac_drbg_reseed>
 80148b0:	b960      	cbnz	r0, 80148cc <mbedtls_hmac_drbg_random_with_add+0x5a>
        add_len = 0; /* VII.4 */
 80148b2:	4605      	mov	r5, r0
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80148b4:	f104 0a0c 	add.w	sl, r4, #12
    while( left != 0 )
 80148b8:	b9a6      	cbnz	r6, 80148e4 <mbedtls_hmac_drbg_random_with_add+0x72>
    mbedtls_hmac_drbg_update( ctx, additional, add_len );
 80148ba:	4620      	mov	r0, r4
 80148bc:	462a      	mov	r2, r5
 80148be:	4639      	mov	r1, r7
 80148c0:	f7ff ff2e 	bl	8014720 <mbedtls_hmac_drbg_update>
    ctx->reseed_counter++;
 80148c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80148c6:	3301      	adds	r3, #1
 80148c8:	64e3      	str	r3, [r4, #76]	; 0x4c
    return( 0 );
 80148ca:	4630      	mov	r0, r6
}
 80148cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( additional != NULL && add_len != 0 )
 80148d0:	2f00      	cmp	r7, #0
 80148d2:	d0ef      	beq.n	80148b4 <mbedtls_hmac_drbg_random_with_add+0x42>
 80148d4:	2d00      	cmp	r5, #0
 80148d6:	d0ed      	beq.n	80148b4 <mbedtls_hmac_drbg_random_with_add+0x42>
        mbedtls_hmac_drbg_update( ctx, additional, add_len );
 80148d8:	462a      	mov	r2, r5
 80148da:	4639      	mov	r1, r7
 80148dc:	4620      	mov	r0, r4
 80148de:	f7ff ff1f 	bl	8014720 <mbedtls_hmac_drbg_update>
 80148e2:	e7e7      	b.n	80148b4 <mbedtls_hmac_drbg_random_with_add+0x42>
        size_t use_len = left > md_len ? md_len : left;
 80148e4:	454e      	cmp	r6, r9
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 80148e6:	4620      	mov	r0, r4
        size_t use_len = left > md_len ? md_len : left;
 80148e8:	46b3      	mov	fp, r6
 80148ea:	bf28      	it	cs
 80148ec:	46cb      	movcs	fp, r9
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 80148ee:	f000 f951 	bl	8014b94 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80148f2:	464a      	mov	r2, r9
 80148f4:	4651      	mov	r1, sl
 80148f6:	4620      	mov	r0, r4
 80148f8:	f000 f910 	bl	8014b1c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
 80148fc:	4651      	mov	r1, sl
 80148fe:	4620      	mov	r0, r4
 8014900:	f000 f91c 	bl	8014b3c <mbedtls_md_hmac_finish>
        memcpy( out, ctx->V, use_len );
 8014904:	4640      	mov	r0, r8
 8014906:	465a      	mov	r2, fp
 8014908:	4651      	mov	r1, sl
 801490a:	f00d fdb9 	bl	8022480 <memcpy>
        out += use_len;
 801490e:	44d8      	add	r8, fp
        left -= use_len;
 8014910:	eba6 060b 	sub.w	r6, r6, fp
 8014914:	e7d0      	b.n	80148b8 <mbedtls_hmac_drbg_random_with_add+0x46>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );
 8014916:	f06f 0002 	mvn.w	r0, #2
 801491a:	e7d7      	b.n	80148cc <mbedtls_hmac_drbg_random_with_add+0x5a>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 801491c:	f06f 0004 	mvn.w	r0, #4
 8014920:	e7d4      	b.n	80148cc <mbedtls_hmac_drbg_random_with_add+0x5a>

08014922 <mbedtls_hmac_drbg_random>:
{
 8014922:	b507      	push	{r0, r1, r2, lr}
    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
 8014924:	2300      	movs	r3, #0
 8014926:	9300      	str	r3, [sp, #0]
 8014928:	f7ff ffa3 	bl	8014872 <mbedtls_hmac_drbg_random_with_add>
}
 801492c:	b003      	add	sp, #12
 801492e:	f85d fb04 	ldr.w	pc, [sp], #4

08014932 <mbedtls_hmac_drbg_free>:
    if( ctx == NULL )
 8014932:	b108      	cbz	r0, 8014938 <mbedtls_hmac_drbg_free+0x6>
 8014934:	f7ff bee3 	b.w	80146fe <mbedtls_hmac_drbg_free.part.0>
}
 8014938:	4770      	bx	lr
	...

0801493c <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 801493c:	3803      	subs	r0, #3
 801493e:	b2c0      	uxtb	r0, r0
 8014940:	2805      	cmp	r0, #5
 8014942:	bf9d      	ittte	ls
 8014944:	4b02      	ldrls	r3, [pc, #8]	; (8014950 <mbedtls_md_info_from_type+0x14>)
 8014946:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 801494a:	69c0      	ldrls	r0, [r0, #28]
{
 801494c:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 801494e:	4770      	bx	lr
 8014950:	0802bd18 	.word	0x0802bd18

08014954 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8014954:	2300      	movs	r3, #0
 8014956:	6003      	str	r3, [r0, #0]
 8014958:	6043      	str	r3, [r0, #4]
 801495a:	6083      	str	r3, [r0, #8]
}
 801495c:	4770      	bx	lr
	...

08014960 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 8014960:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014962:	4604      	mov	r4, r0
 8014964:	b1b8      	cbz	r0, 8014996 <mbedtls_md_free+0x36>
 8014966:	6803      	ldr	r3, [r0, #0]
 8014968:	b1ab      	cbz	r3, 8014996 <mbedtls_md_free+0x36>
        return;

    if( ctx->md_ctx != NULL )
 801496a:	6840      	ldr	r0, [r0, #4]
 801496c:	b108      	cbz	r0, 8014972 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 801496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014970:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 8014972:	68a3      	ldr	r3, [r4, #8]
 8014974:	b153      	cbz	r3, 801498c <mbedtls_md_free+0x2c>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 8014976:	6822      	ldr	r2, [r4, #0]
 8014978:	68d2      	ldr	r2, [r2, #12]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801497a:	2100      	movs	r1, #0
 801497c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014980:	4293      	cmp	r3, r2
 8014982:	d109      	bne.n	8014998 <mbedtls_md_free+0x38>
        mbedtls_free( ctx->hmac_ctx );
 8014984:	4b07      	ldr	r3, [pc, #28]	; (80149a4 <mbedtls_md_free+0x44>)
 8014986:	68a0      	ldr	r0, [r4, #8]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	4798      	blx	r3
 801498c:	f104 030c 	add.w	r3, r4, #12
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014990:	2200      	movs	r2, #0
 8014992:	429c      	cmp	r4, r3
 8014994:	d103      	bne.n	801499e <mbedtls_md_free+0x3e>
    }

    mbedtls_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
}
 8014996:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014998:	f803 1b01 	strb.w	r1, [r3], #1
 801499c:	e7f0      	b.n	8014980 <mbedtls_md_free+0x20>
 801499e:	f804 2b01 	strb.w	r2, [r4], #1
 80149a2:	e7f6      	b.n	8014992 <mbedtls_md_free+0x32>
 80149a4:	200005a4 	.word	0x200005a4

080149a8 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 80149a8:	b570      	push	{r4, r5, r6, lr}
 80149aa:	4604      	mov	r4, r0
 80149ac:	4616      	mov	r6, r2
    if( md_info == NULL || ctx == NULL )
 80149ae:	460d      	mov	r5, r1
 80149b0:	b1a1      	cbz	r1, 80149dc <mbedtls_md_setup+0x34>
 80149b2:	b198      	cbz	r0, 80149dc <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 80149b4:	6a0b      	ldr	r3, [r1, #32]
 80149b6:	4798      	blx	r3
 80149b8:	6060      	str	r0, [r4, #4]
 80149ba:	b150      	cbz	r0, 80149d2 <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 80149bc:	b15e      	cbz	r6, 80149d6 <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 80149be:	4b08      	ldr	r3, [pc, #32]	; (80149e0 <mbedtls_md_setup+0x38>)
 80149c0:	68e9      	ldr	r1, [r5, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	2002      	movs	r0, #2
 80149c6:	4798      	blx	r3
 80149c8:	60a0      	str	r0, [r4, #8]
        if( ctx->hmac_ctx == NULL )
 80149ca:	b920      	cbnz	r0, 80149d6 <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 80149cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80149ce:	6860      	ldr	r0, [r4, #4]
 80149d0:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 80149d2:	4804      	ldr	r0, [pc, #16]	; (80149e4 <mbedtls_md_setup+0x3c>)
 80149d4:	e001      	b.n	80149da <mbedtls_md_setup+0x32>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 80149d6:	6025      	str	r5, [r4, #0]

    return( 0 );
 80149d8:	2000      	movs	r0, #0
}
 80149da:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80149dc:	4802      	ldr	r0, [pc, #8]	; (80149e8 <mbedtls_md_setup+0x40>)
 80149de:	e7fc      	b.n	80149da <mbedtls_md_setup+0x32>
 80149e0:	200005a0 	.word	0x200005a0
 80149e4:	ffffae80 	.word	0xffffae80
 80149e8:	ffffaf00 	.word	0xffffaf00

080149ec <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
 80149ec:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80149ee:	b130      	cbz	r0, 80149fe <mbedtls_md_starts+0x12>
 80149f0:	6803      	ldr	r3, [r0, #0]
 80149f2:	b123      	cbz	r3, 80149fe <mbedtls_md_starts+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->starts_func( ctx->md_ctx );
 80149f4:	6840      	ldr	r0, [r0, #4]
 80149f6:	691b      	ldr	r3, [r3, #16]
 80149f8:	4798      	blx	r3

    return( 0 );
 80149fa:	2000      	movs	r0, #0
}
 80149fc:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80149fe:	4801      	ldr	r0, [pc, #4]	; (8014a04 <mbedtls_md_starts+0x18>)
 8014a00:	e7fc      	b.n	80149fc <mbedtls_md_starts+0x10>
 8014a02:	bf00      	nop
 8014a04:	ffffaf00 	.word	0xffffaf00

08014a08 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8014a08:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014a0a:	b130      	cbz	r0, 8014a1a <mbedtls_md_update+0x12>
 8014a0c:	6803      	ldr	r3, [r0, #0]
 8014a0e:	b123      	cbz	r3, 8014a1a <mbedtls_md_update+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->update_func( ctx->md_ctx, input, ilen );
 8014a10:	6840      	ldr	r0, [r0, #4]
 8014a12:	695b      	ldr	r3, [r3, #20]
 8014a14:	4798      	blx	r3

    return( 0 );
 8014a16:	2000      	movs	r0, #0
}
 8014a18:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014a1a:	4801      	ldr	r0, [pc, #4]	; (8014a20 <mbedtls_md_update+0x18>)
 8014a1c:	e7fc      	b.n	8014a18 <mbedtls_md_update+0x10>
 8014a1e:	bf00      	nop
 8014a20:	ffffaf00 	.word	0xffffaf00

08014a24 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8014a24:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014a26:	b130      	cbz	r0, 8014a36 <mbedtls_md_finish+0x12>
 8014a28:	6803      	ldr	r3, [r0, #0]
 8014a2a:	b123      	cbz	r3, 8014a36 <mbedtls_md_finish+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->finish_func( ctx->md_ctx, output );
 8014a2c:	6840      	ldr	r0, [r0, #4]
 8014a2e:	699b      	ldr	r3, [r3, #24]
 8014a30:	4798      	blx	r3

    return( 0 );
 8014a32:	2000      	movs	r0, #0
}
 8014a34:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014a36:	4801      	ldr	r0, [pc, #4]	; (8014a3c <mbedtls_md_finish+0x18>)
 8014a38:	e7fc      	b.n	8014a34 <mbedtls_md_finish+0x10>
 8014a3a:	bf00      	nop
 8014a3c:	ffffaf00 	.word	0xffffaf00

08014a40 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 8014a40:	b510      	push	{r4, lr}
 8014a42:	4604      	mov	r4, r0
 8014a44:	4608      	mov	r0, r1
 8014a46:	4611      	mov	r1, r2
 8014a48:	461a      	mov	r2, r3
    if( md_info == NULL )
 8014a4a:	b11c      	cbz	r4, 8014a54 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    md_info->digest_func( input, ilen, output );
 8014a4c:	69e3      	ldr	r3, [r4, #28]
 8014a4e:	4798      	blx	r3

    return( 0 );
 8014a50:	2000      	movs	r0, #0
}
 8014a52:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014a54:	4800      	ldr	r0, [pc, #0]	; (8014a58 <mbedtls_md+0x18>)
 8014a56:	e7fc      	b.n	8014a52 <mbedtls_md+0x12>
 8014a58:	ffffaf00 	.word	0xffffaf00

08014a5c <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8014a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a60:	460d      	mov	r5, r1
 8014a62:	b090      	sub	sp, #64	; 0x40
 8014a64:	4616      	mov	r6, r2
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8014a66:	4604      	mov	r4, r0
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d052      	beq.n	8014b12 <mbedtls_md_hmac_starts+0xb6>
 8014a6c:	6803      	ldr	r3, [r0, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d04f      	beq.n	8014b12 <mbedtls_md_hmac_starts+0xb6>
 8014a72:	6882      	ldr	r2, [r0, #8]
 8014a74:	2a00      	cmp	r2, #0
 8014a76:	d04c      	beq.n	8014b12 <mbedtls_md_hmac_starts+0xb6>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8014a78:	68da      	ldr	r2, [r3, #12]
 8014a7a:	42b2      	cmp	r2, r6
 8014a7c:	d210      	bcs.n	8014aa0 <mbedtls_md_hmac_starts+0x44>
    {
        ctx->md_info->starts_func( ctx->md_ctx );
 8014a7e:	691b      	ldr	r3, [r3, #16]
 8014a80:	6840      	ldr	r0, [r0, #4]
 8014a82:	4798      	blx	r3
        ctx->md_info->update_func( ctx->md_ctx, key, keylen );
 8014a84:	6823      	ldr	r3, [r4, #0]
 8014a86:	6860      	ldr	r0, [r4, #4]
 8014a88:	695b      	ldr	r3, [r3, #20]
 8014a8a:	4632      	mov	r2, r6
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	4798      	blx	r3
        ctx->md_info->finish_func( ctx->md_ctx, sum );
 8014a90:	6823      	ldr	r3, [r4, #0]
 8014a92:	6860      	ldr	r0, [r4, #4]
 8014a94:	699b      	ldr	r3, [r3, #24]
 8014a96:	4669      	mov	r1, sp
 8014a98:	4798      	blx	r3

        keylen = ctx->md_info->size;
 8014a9a:	6823      	ldr	r3, [r4, #0]
 8014a9c:	689e      	ldr	r6, [r3, #8]
        key = sum;
 8014a9e:	466d      	mov	r5, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014aa0:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 8014aa2:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014aa6:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8014aa8:	2136      	movs	r1, #54	; 0x36
 8014aaa:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014aac:	eb08 0702 	add.w	r7, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 8014ab0:	f00d fd0e 	bl	80224d0 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 8014ab4:	6823      	ldr	r3, [r4, #0]
 8014ab6:	215c      	movs	r1, #92	; 0x5c
 8014ab8:	68da      	ldr	r2, [r3, #12]
 8014aba:	4638      	mov	r0, r7
 8014abc:	f00d fd08 	bl	80224d0 <memset>

    for( i = 0; i < keylen; i++ )
 8014ac0:	3d01      	subs	r5, #1
 8014ac2:	4643      	mov	r3, r8
 8014ac4:	1e78      	subs	r0, r7, #1
 8014ac6:	4446      	add	r6, r8
 8014ac8:	42b3      	cmp	r3, r6
 8014aca:	d114      	bne.n	8014af6 <mbedtls_md_hmac_starts+0x9a>
 8014acc:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014ace:	4619      	mov	r1, r3
 8014ad0:	eb0d 0203 	add.w	r2, sp, r3
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	2b41      	cmp	r3, #65	; 0x41
 8014ad8:	d119      	bne.n	8014b0e <mbedtls_md_hmac_starts+0xb2>
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    mbedtls_zeroize( sum, sizeof( sum ) );

    ctx->md_info->starts_func( ctx->md_ctx );
 8014ada:	6823      	ldr	r3, [r4, #0]
 8014adc:	6860      	ldr	r0, [r4, #4]
 8014ade:	691b      	ldr	r3, [r3, #16]
 8014ae0:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
 8014ae2:	6823      	ldr	r3, [r4, #0]
 8014ae4:	6860      	ldr	r0, [r4, #4]
 8014ae6:	695d      	ldr	r5, [r3, #20]
 8014ae8:	68da      	ldr	r2, [r3, #12]
 8014aea:	4641      	mov	r1, r8
 8014aec:	47a8      	blx	r5

    return( 0 );
 8014aee:	2000      	movs	r0, #0
}
 8014af0:	b010      	add	sp, #64	; 0x40
 8014af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8014af6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8014afa:	781a      	ldrb	r2, [r3, #0]
 8014afc:	404a      	eors	r2, r1
 8014afe:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8014b02:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8014b06:	7829      	ldrb	r1, [r5, #0]
 8014b08:	404a      	eors	r2, r1
 8014b0a:	7002      	strb	r2, [r0, #0]
    for( i = 0; i < keylen; i++ )
 8014b0c:	e7dc      	b.n	8014ac8 <mbedtls_md_hmac_starts+0x6c>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014b0e:	7011      	strb	r1, [r2, #0]
 8014b10:	e7de      	b.n	8014ad0 <mbedtls_md_hmac_starts+0x74>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014b12:	4801      	ldr	r0, [pc, #4]	; (8014b18 <mbedtls_md_hmac_starts+0xbc>)
 8014b14:	e7ec      	b.n	8014af0 <mbedtls_md_hmac_starts+0x94>
 8014b16:	bf00      	nop
 8014b18:	ffffaf00 	.word	0xffffaf00

08014b1c <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8014b1c:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8014b1e:	b140      	cbz	r0, 8014b32 <mbedtls_md_hmac_update+0x16>
 8014b20:	6803      	ldr	r3, [r0, #0]
 8014b22:	b133      	cbz	r3, 8014b32 <mbedtls_md_hmac_update+0x16>
 8014b24:	6884      	ldr	r4, [r0, #8]
 8014b26:	b124      	cbz	r4, 8014b32 <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->update_func( ctx->md_ctx, input, ilen );
 8014b28:	6840      	ldr	r0, [r0, #4]
 8014b2a:	695b      	ldr	r3, [r3, #20]
 8014b2c:	4798      	blx	r3

    return( 0 );
 8014b2e:	2000      	movs	r0, #0
}
 8014b30:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014b32:	4801      	ldr	r0, [pc, #4]	; (8014b38 <mbedtls_md_hmac_update+0x1c>)
 8014b34:	e7fc      	b.n	8014b30 <mbedtls_md_hmac_update+0x14>
 8014b36:	bf00      	nop
 8014b38:	ffffaf00 	.word	0xffffaf00

08014b3c <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8014b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b3e:	460e      	mov	r6, r1
 8014b40:	b091      	sub	sp, #68	; 0x44
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8014b42:	4604      	mov	r4, r0
 8014b44:	b308      	cbz	r0, 8014b8a <mbedtls_md_hmac_finish+0x4e>
 8014b46:	6802      	ldr	r2, [r0, #0]
 8014b48:	b1fa      	cbz	r2, 8014b8a <mbedtls_md_hmac_finish+0x4e>
 8014b4a:	6883      	ldr	r3, [r0, #8]
 8014b4c:	b1eb      	cbz	r3, 8014b8a <mbedtls_md_hmac_finish+0x4e>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014b4e:	68d5      	ldr	r5, [r2, #12]

    ctx->md_info->finish_func( ctx->md_ctx, tmp );
 8014b50:	6840      	ldr	r0, [r0, #4]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014b52:	441d      	add	r5, r3
    ctx->md_info->finish_func( ctx->md_ctx, tmp );
 8014b54:	4669      	mov	r1, sp
 8014b56:	6993      	ldr	r3, [r2, #24]
 8014b58:	4798      	blx	r3
    ctx->md_info->starts_func( ctx->md_ctx );
 8014b5a:	6823      	ldr	r3, [r4, #0]
 8014b5c:	6860      	ldr	r0, [r4, #4]
 8014b5e:	691b      	ldr	r3, [r3, #16]
 8014b60:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, opad, ctx->md_info->block_size );
 8014b62:	6823      	ldr	r3, [r4, #0]
 8014b64:	6860      	ldr	r0, [r4, #4]
 8014b66:	68da      	ldr	r2, [r3, #12]
 8014b68:	695f      	ldr	r7, [r3, #20]
 8014b6a:	4629      	mov	r1, r5
 8014b6c:	47b8      	blx	r7
    ctx->md_info->update_func( ctx->md_ctx, tmp, ctx->md_info->size );
 8014b6e:	6823      	ldr	r3, [r4, #0]
 8014b70:	6860      	ldr	r0, [r4, #4]
 8014b72:	689a      	ldr	r2, [r3, #8]
 8014b74:	695d      	ldr	r5, [r3, #20]
 8014b76:	4669      	mov	r1, sp
 8014b78:	47a8      	blx	r5
    ctx->md_info->finish_func( ctx->md_ctx, output );
 8014b7a:	6823      	ldr	r3, [r4, #0]
 8014b7c:	6860      	ldr	r0, [r4, #4]
 8014b7e:	699b      	ldr	r3, [r3, #24]
 8014b80:	4631      	mov	r1, r6
 8014b82:	4798      	blx	r3

    return( 0 );
 8014b84:	2000      	movs	r0, #0
}
 8014b86:	b011      	add	sp, #68	; 0x44
 8014b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014b8a:	4801      	ldr	r0, [pc, #4]	; (8014b90 <mbedtls_md_hmac_finish+0x54>)
 8014b8c:	e7fb      	b.n	8014b86 <mbedtls_md_hmac_finish+0x4a>
 8014b8e:	bf00      	nop
 8014b90:	ffffaf00 	.word	0xffffaf00

08014b94 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 8014b94:	b570      	push	{r4, r5, r6, lr}
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8014b96:	4604      	mov	r4, r0
 8014b98:	b170      	cbz	r0, 8014bb8 <mbedtls_md_hmac_reset+0x24>
 8014b9a:	6803      	ldr	r3, [r0, #0]
 8014b9c:	b163      	cbz	r3, 8014bb8 <mbedtls_md_hmac_reset+0x24>
 8014b9e:	6885      	ldr	r5, [r0, #8]
 8014ba0:	b155      	cbz	r5, 8014bb8 <mbedtls_md_hmac_reset+0x24>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    ctx->md_info->starts_func( ctx->md_ctx );
 8014ba2:	691b      	ldr	r3, [r3, #16]
 8014ba4:	6840      	ldr	r0, [r0, #4]
 8014ba6:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
 8014ba8:	6823      	ldr	r3, [r4, #0]
 8014baa:	6860      	ldr	r0, [r4, #4]
 8014bac:	695e      	ldr	r6, [r3, #20]
 8014bae:	68da      	ldr	r2, [r3, #12]
 8014bb0:	4629      	mov	r1, r5
 8014bb2:	47b0      	blx	r6

    return( 0 );
 8014bb4:	2000      	movs	r0, #0
}
 8014bb6:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014bb8:	4800      	ldr	r0, [pc, #0]	; (8014bbc <mbedtls_md_hmac_reset+0x28>)
 8014bba:	e7fc      	b.n	8014bb6 <mbedtls_md_hmac_reset+0x22>
 8014bbc:	ffffaf00 	.word	0xffffaf00

08014bc0 <mbedtls_md_process>:

    return( 0 );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
 8014bc0:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014bc2:	b130      	cbz	r0, 8014bd2 <mbedtls_md_process+0x12>
 8014bc4:	6803      	ldr	r3, [r0, #0]
 8014bc6:	b123      	cbz	r3, 8014bd2 <mbedtls_md_process+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->process_func( ctx->md_ctx, data );
 8014bc8:	6840      	ldr	r0, [r0, #4]
 8014bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bcc:	4798      	blx	r3

    return( 0 );
 8014bce:	2000      	movs	r0, #0
}
 8014bd0:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014bd2:	4801      	ldr	r0, [pc, #4]	; (8014bd8 <mbedtls_md_process+0x18>)
 8014bd4:	e7fc      	b.n	8014bd0 <mbedtls_md_process+0x10>
 8014bd6:	bf00      	nop
 8014bd8:	ffffaf00 	.word	0xffffaf00

08014bdc <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8014bdc:	b100      	cbz	r0, 8014be0 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 8014bde:	7a00      	ldrb	r0, [r0, #8]
}
 8014be0:	4770      	bx	lr

08014be2 <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8014be2:	b100      	cbz	r0, 8014be6 <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
 8014be4:	6840      	ldr	r0, [r0, #4]
}
 8014be6:	4770      	bx	lr

08014be8 <mbedtls_md5_init>:
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 8014be8:	2258      	movs	r2, #88	; 0x58
 8014bea:	2100      	movs	r1, #0
 8014bec:	f00d bc70 	b.w	80224d0 <memset>

08014bf0 <mbedtls_md5_free>:
}

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
    if( ctx == NULL )
 8014bf0:	b120      	cbz	r0, 8014bfc <mbedtls_md5_free+0xc>
 8014bf2:	f100 0358 	add.w	r3, r0, #88	; 0x58
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	4298      	cmp	r0, r3
 8014bfa:	d100      	bne.n	8014bfe <mbedtls_md5_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_md5_context ) );
}
 8014bfc:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014bfe:	f800 2b01 	strb.w	r2, [r0], #1
 8014c02:	e7f9      	b.n	8014bf8 <mbedtls_md5_free+0x8>

08014c04 <mbedtls_md5_clone>:

void mbedtls_md5_clone( mbedtls_md5_context *dst,
                        const mbedtls_md5_context *src )
{
 8014c04:	b508      	push	{r3, lr}
    *dst = *src;
 8014c06:	2258      	movs	r2, #88	; 0x58
 8014c08:	f00d fc3a 	bl	8022480 <memcpy>
}
 8014c0c:	bd08      	pop	{r3, pc}
	...

08014c10 <mbedtls_md5_starts>:
/*
 * MD5 context setup
 */
void mbedtls_md5_starts( mbedtls_md5_context *ctx )
{
    ctx->total[0] = 0;
 8014c10:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 8014c12:	e9c0 3300 	strd	r3, r3, [r0]

    ctx->state[0] = 0x67452301;
 8014c16:	4b08      	ldr	r3, [pc, #32]	; (8014c38 <mbedtls_md5_starts+0x28>)
 8014c18:	6083      	str	r3, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
 8014c1a:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8014c1e:	60c3      	str	r3, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
 8014c20:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 8014c24:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 8014c28:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 8014c2c:	6103      	str	r3, [r0, #16]
    ctx->state[3] = 0x10325476;
 8014c2e:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 8014c32:	6143      	str	r3, [r0, #20]
}
 8014c34:	4770      	bx	lr
 8014c36:	bf00      	nop
 8014c38:	67452301 	.word	0x67452301

08014c3c <mbedtls_md5_process>:

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
void mbedtls_md5_process( mbedtls_md5_context *ctx, const unsigned char data[64] )
{
 8014c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c40:	b08d      	sub	sp, #52	; 0x34
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
    GET_UINT32_LE( X[ 1], data,  4 );
 8014c42:	684b      	ldr	r3, [r1, #4]
 8014c44:	9301      	str	r3, [sp, #4]
    GET_UINT32_LE( X[ 2], data,  8 );
 8014c46:	688b      	ldr	r3, [r1, #8]
 8014c48:	9302      	str	r3, [sp, #8]
    GET_UINT32_LE( X[ 3], data, 12 );
 8014c4a:	68cb      	ldr	r3, [r1, #12]
 8014c4c:	9303      	str	r3, [sp, #12]
    GET_UINT32_LE( X[ 4], data, 16 );
 8014c4e:	690b      	ldr	r3, [r1, #16]
 8014c50:	9304      	str	r3, [sp, #16]
    GET_UINT32_LE( X[ 5], data, 20 );
    GET_UINT32_LE( X[ 6], data, 24 );
 8014c52:	698b      	ldr	r3, [r1, #24]
 8014c54:	9305      	str	r3, [sp, #20]
    GET_UINT32_LE( X[ 7], data, 28 );
    GET_UINT32_LE( X[ 8], data, 32 );
 8014c56:	6a0b      	ldr	r3, [r1, #32]
 8014c58:	9306      	str	r3, [sp, #24]
    GET_UINT32_LE( X[ 9], data, 36 );
 8014c5a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8014c5c:	9307      	str	r3, [sp, #28]
    GET_UINT32_LE( X[10], data, 40 );
 8014c5e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014c60:	9308      	str	r3, [sp, #32]
    GET_UINT32_LE( X[11], data, 44 );
 8014c62:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014c64:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_LE( X[12], data, 48 );
    GET_UINT32_LE( X[13], data, 52 );
 8014c66:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014c68:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_LE( X[14], data, 56 );
    GET_UINT32_LE( X[15], data, 60 );
 8014c6a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8014c6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c6e:	4adb      	ldr	r2, [pc, #876]	; (8014fdc <mbedtls_md5_process+0x3a0>)
 8014c70:	6883      	ldr	r3, [r0, #8]
    GET_UINT32_LE( X[ 0], data,  0 );
 8014c72:	f8d1 a000 	ldr.w	sl, [r1]
    GET_UINT32_LE( X[ 5], data, 20 );
 8014c76:	f8d1 e014 	ldr.w	lr, [r1, #20]
    GET_UINT32_LE( X[ 7], data, 28 );
 8014c7a:	f8d1 901c 	ldr.w	r9, [r1, #28]
    GET_UINT32_LE( X[12], data, 48 );
 8014c7e:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
    GET_UINT32_LE( X[14], data, 56 );
 8014c82:	f8d1 8038 	ldr.w	r8, [r1, #56]	; 0x38
{                                                       \
    a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
}

    A = ctx->state[0];
    B = ctx->state[1];
 8014c86:	68c6      	ldr	r6, [r0, #12]
    C = ctx->state[2];
    D = ctx->state[3];

#define F(x,y,z) (z ^ (x & (y ^ z)))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 8014c88:	4dd5      	ldr	r5, [pc, #852]	; (8014fe0 <mbedtls_md5_process+0x3a4>)
 8014c8a:	f8df b3e8 	ldr.w	fp, [pc, #1000]	; 8015074 <mbedtls_md5_process+0x438>
 8014c8e:	441a      	add	r2, r3
 8014c90:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 8014c94:	404b      	eors	r3, r1
 8014c96:	4033      	ands	r3, r6
 8014c98:	4452      	add	r2, sl
 8014c9a:	404b      	eors	r3, r1
 8014c9c:	4413      	add	r3, r2
 8014c9e:	4ad1      	ldr	r2, [pc, #836]	; (8014fe4 <mbedtls_md5_process+0x3a8>)
 8014ca0:	440a      	add	r2, r1
 8014ca2:	9901      	ldr	r1, [sp, #4]
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 8014ca4:	6904      	ldr	r4, [r0, #16]
 8014ca6:	9f04      	ldr	r7, [sp, #16]
 8014ca8:	440a      	add	r2, r1
 8014caa:	6901      	ldr	r1, [r0, #16]
    P( A, B, C, D,  0,  7, 0xD76AA478 );
 8014cac:	eb06 6373 	add.w	r3, r6, r3, ror #25
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 8014cb0:	4071      	eors	r1, r6
 8014cb2:	4019      	ands	r1, r3
 8014cb4:	4061      	eors	r1, r4
 8014cb6:	4411      	add	r1, r2
 8014cb8:	4acb      	ldr	r2, [pc, #812]	; (8014fe8 <mbedtls_md5_process+0x3ac>)
 8014cba:	4422      	add	r2, r4
 8014cbc:	9c02      	ldr	r4, [sp, #8]
 8014cbe:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B,  2, 17, 0x242070DB );
 8014cc2:	4422      	add	r2, r4
 8014cc4:	ea86 0403 	eor.w	r4, r6, r3
 8014cc8:	400c      	ands	r4, r1
 8014cca:	4074      	eors	r4, r6
 8014ccc:	4414      	add	r4, r2
 8014cce:	9a03      	ldr	r2, [sp, #12]
 8014cd0:	4435      	add	r5, r6
 8014cd2:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 8014cd6:	4415      	add	r5, r2
 8014cd8:	ea83 0201 	eor.w	r2, r3, r1
 8014cdc:	4022      	ands	r2, r4
 8014cde:	405a      	eors	r2, r3
 8014ce0:	442a      	add	r2, r5
 8014ce2:	4dc2      	ldr	r5, [pc, #776]	; (8014fec <mbedtls_md5_process+0x3b0>)
 8014ce4:	443d      	add	r5, r7
 8014ce6:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 8014cea:	441d      	add	r5, r3
 8014cec:	ea81 0304 	eor.w	r3, r1, r4
 8014cf0:	4013      	ands	r3, r2
 8014cf2:	404b      	eors	r3, r1
 8014cf4:	442b      	add	r3, r5
 8014cf6:	4dbe      	ldr	r5, [pc, #760]	; (8014ff0 <mbedtls_md5_process+0x3b4>)
 8014cf8:	9f05      	ldr	r7, [sp, #20]
 8014cfa:	4475      	add	r5, lr
 8014cfc:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C,  5, 12, 0x4787C62A );
 8014d00:	440d      	add	r5, r1
 8014d02:	ea84 0102 	eor.w	r1, r4, r2
 8014d06:	4019      	ands	r1, r3
 8014d08:	4061      	eors	r1, r4
 8014d0a:	4429      	add	r1, r5
 8014d0c:	4db9      	ldr	r5, [pc, #740]	; (8014ff4 <mbedtls_md5_process+0x3b8>)
 8014d0e:	443d      	add	r5, r7
 8014d10:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B,  6, 17, 0xA8304613 );
 8014d14:	4425      	add	r5, r4
 8014d16:	ea82 0403 	eor.w	r4, r2, r3
 8014d1a:	400c      	ands	r4, r1
 8014d1c:	4054      	eors	r4, r2
 8014d1e:	442c      	add	r4, r5
 8014d20:	4db5      	ldr	r5, [pc, #724]	; (8014ff8 <mbedtls_md5_process+0x3bc>)
 8014d22:	9f06      	ldr	r7, [sp, #24]
 8014d24:	444d      	add	r5, r9
 8014d26:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A,  7, 22, 0xFD469501 );
 8014d2a:	4415      	add	r5, r2
 8014d2c:	ea83 0201 	eor.w	r2, r3, r1
 8014d30:	4022      	ands	r2, r4
 8014d32:	405a      	eors	r2, r3
 8014d34:	442a      	add	r2, r5
 8014d36:	4db1      	ldr	r5, [pc, #708]	; (8014ffc <mbedtls_md5_process+0x3c0>)
 8014d38:	443d      	add	r5, r7
 8014d3a:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D,  8,  7, 0x698098D8 );
 8014d3e:	441d      	add	r5, r3
 8014d40:	ea81 0304 	eor.w	r3, r1, r4
 8014d44:	4013      	ands	r3, r2
 8014d46:	404b      	eors	r3, r1
 8014d48:	9f07      	ldr	r7, [sp, #28]
 8014d4a:	442b      	add	r3, r5
 8014d4c:	4dac      	ldr	r5, [pc, #688]	; (8015000 <mbedtls_md5_process+0x3c4>)
 8014d4e:	443d      	add	r5, r7
 8014d50:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 8014d54:	440d      	add	r5, r1
 8014d56:	ea84 0102 	eor.w	r1, r4, r2
 8014d5a:	4019      	ands	r1, r3
 8014d5c:	4061      	eors	r1, r4
 8014d5e:	4429      	add	r1, r5
 8014d60:	9d08      	ldr	r5, [sp, #32]
 8014d62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014d64:	f5a5 4524 	sub.w	r5, r5, #41984	; 0xa400
 8014d68:	3d4f      	subs	r5, #79	; 0x4f
 8014d6a:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 8014d6e:	4425      	add	r5, r4
 8014d70:	ea82 0403 	eor.w	r4, r2, r3
 8014d74:	400c      	ands	r4, r1
 8014d76:	4054      	eors	r4, r2
 8014d78:	442c      	add	r4, r5
 8014d7a:	4da2      	ldr	r5, [pc, #648]	; (8015004 <mbedtls_md5_process+0x3c8>)
 8014d7c:	443d      	add	r5, r7
 8014d7e:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 8014d82:	4415      	add	r5, r2
 8014d84:	ea83 0201 	eor.w	r2, r3, r1
 8014d88:	4022      	ands	r2, r4
 8014d8a:	405a      	eors	r2, r3
 8014d8c:	442a      	add	r2, r5
 8014d8e:	4d9e      	ldr	r5, [pc, #632]	; (8015008 <mbedtls_md5_process+0x3cc>)
 8014d90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014d92:	4465      	add	r5, ip
 8014d94:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D, 12,  7, 0x6B901122 );
 8014d98:	441d      	add	r5, r3
 8014d9a:	ea81 0304 	eor.w	r3, r1, r4
 8014d9e:	4013      	ands	r3, r2
 8014da0:	404b      	eors	r3, r1
 8014da2:	442b      	add	r3, r5
 8014da4:	4d99      	ldr	r5, [pc, #612]	; (801500c <mbedtls_md5_process+0x3d0>)
 8014da6:	443d      	add	r5, r7
 8014da8:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C, 13, 12, 0xFD987193 );
 8014dac:	440d      	add	r5, r1
 8014dae:	ea84 0102 	eor.w	r1, r4, r2
 8014db2:	4019      	ands	r1, r3
 8014db4:	4061      	eors	r1, r4
 8014db6:	4429      	add	r1, r5
 8014db8:	4d95      	ldr	r5, [pc, #596]	; (8015010 <mbedtls_md5_process+0x3d4>)
 8014dba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014dbc:	4445      	add	r5, r8
 8014dbe:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B, 14, 17, 0xA679438E );
 8014dc2:	4425      	add	r5, r4
 8014dc4:	ea82 0403 	eor.w	r4, r2, r3
 8014dc8:	400c      	ands	r4, r1
 8014dca:	4054      	eors	r4, r2
 8014dcc:	442c      	add	r4, r5
 8014dce:	4d91      	ldr	r5, [pc, #580]	; (8015014 <mbedtls_md5_process+0x3d8>)
 8014dd0:	443d      	add	r5, r7
 8014dd2:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A, 15, 22, 0x49B40821 );
 8014dd6:	4415      	add	r5, r2
 8014dd8:	ea83 0201 	eor.w	r2, r3, r1
 8014ddc:	4022      	ands	r2, r4
 8014dde:	405a      	eors	r2, r3
 8014de0:	9f01      	ldr	r7, [sp, #4]
 8014de2:	442a      	add	r2, r5
 8014de4:	4d8c      	ldr	r5, [pc, #560]	; (8015018 <mbedtls_md5_process+0x3dc>)
 8014de6:	eb04 22b2 	add.w	r2, r4, r2, ror #10

#undef F

#define F(x,y,z) (y ^ (z & (x ^ y)))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 8014dea:	443d      	add	r5, r7
 8014dec:	441d      	add	r5, r3
 8014dee:	ea84 0302 	eor.w	r3, r4, r2
 8014df2:	400b      	ands	r3, r1
 8014df4:	4063      	eors	r3, r4
 8014df6:	9f05      	ldr	r7, [sp, #20]
 8014df8:	442b      	add	r3, r5
 8014dfa:	4d88      	ldr	r5, [pc, #544]	; (801501c <mbedtls_md5_process+0x3e0>)
 8014dfc:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C,  6,  9, 0xC040B340 );
 8014e00:	443d      	add	r5, r7
 8014e02:	440d      	add	r5, r1
 8014e04:	ea82 0103 	eor.w	r1, r2, r3
 8014e08:	4021      	ands	r1, r4
 8014e0a:	4051      	eors	r1, r2
 8014e0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014e0e:	4429      	add	r1, r5
 8014e10:	4d83      	ldr	r5, [pc, #524]	; (8015020 <mbedtls_md5_process+0x3e4>)
 8014e12:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 8014e16:	443d      	add	r5, r7
 8014e18:	4425      	add	r5, r4
 8014e1a:	ea83 0401 	eor.w	r4, r3, r1
 8014e1e:	4014      	ands	r4, r2
 8014e20:	405c      	eors	r4, r3
 8014e22:	442c      	add	r4, r5
 8014e24:	4d7f      	ldr	r5, [pc, #508]	; (8015024 <mbedtls_md5_process+0x3e8>)
 8014e26:	9f08      	ldr	r7, [sp, #32]
 8014e28:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 8014e2c:	4455      	add	r5, sl
 8014e2e:	4415      	add	r5, r2
 8014e30:	ea81 0204 	eor.w	r2, r1, r4
 8014e34:	401a      	ands	r2, r3
 8014e36:	404a      	eors	r2, r1
 8014e38:	442a      	add	r2, r5
 8014e3a:	4d7b      	ldr	r5, [pc, #492]	; (8015028 <mbedtls_md5_process+0x3ec>)
 8014e3c:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D,  5,  5, 0xD62F105D );
 8014e40:	4475      	add	r5, lr
 8014e42:	441d      	add	r5, r3
 8014e44:	ea84 0302 	eor.w	r3, r4, r2
 8014e48:	400b      	ands	r3, r1
 8014e4a:	4063      	eors	r3, r4
 8014e4c:	442b      	add	r3, r5
 8014e4e:	4d77      	ldr	r5, [pc, #476]	; (801502c <mbedtls_md5_process+0x3f0>)
 8014e50:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C, 10,  9, 0x02441453 );
 8014e54:	443d      	add	r5, r7
 8014e56:	440d      	add	r5, r1
 8014e58:	ea82 0103 	eor.w	r1, r2, r3
 8014e5c:	4021      	ands	r1, r4
 8014e5e:	4051      	eors	r1, r2
 8014e60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014e62:	4429      	add	r1, r5
 8014e64:	4d72      	ldr	r5, [pc, #456]	; (8015030 <mbedtls_md5_process+0x3f4>)
 8014e66:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 8014e6a:	443d      	add	r5, r7
 8014e6c:	4425      	add	r5, r4
 8014e6e:	ea83 0401 	eor.w	r4, r3, r1
 8014e72:	4014      	ands	r4, r2
 8014e74:	405c      	eors	r4, r3
 8014e76:	9f04      	ldr	r7, [sp, #16]
 8014e78:	442c      	add	r4, r5
 8014e7a:	4d6e      	ldr	r5, [pc, #440]	; (8015034 <mbedtls_md5_process+0x3f8>)
 8014e7c:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 8014e80:	443d      	add	r5, r7
 8014e82:	4415      	add	r5, r2
 8014e84:	ea81 0204 	eor.w	r2, r1, r4
 8014e88:	401a      	ands	r2, r3
 8014e8a:	404a      	eors	r2, r1
 8014e8c:	9f07      	ldr	r7, [sp, #28]
 8014e8e:	442a      	add	r2, r5
 8014e90:	4d69      	ldr	r5, [pc, #420]	; (8015038 <mbedtls_md5_process+0x3fc>)
 8014e92:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 8014e96:	443d      	add	r5, r7
 8014e98:	441d      	add	r5, r3
 8014e9a:	ea84 0302 	eor.w	r3, r4, r2
 8014e9e:	400b      	ands	r3, r1
 8014ea0:	4063      	eors	r3, r4
 8014ea2:	442b      	add	r3, r5
 8014ea4:	4d65      	ldr	r5, [pc, #404]	; (801503c <mbedtls_md5_process+0x400>)
 8014ea6:	9f03      	ldr	r7, [sp, #12]
 8014ea8:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 8014eac:	4445      	add	r5, r8
 8014eae:	440d      	add	r5, r1
 8014eb0:	ea82 0103 	eor.w	r1, r2, r3
 8014eb4:	4021      	ands	r1, r4
 8014eb6:	4051      	eors	r1, r2
 8014eb8:	4429      	add	r1, r5
 8014eba:	4d61      	ldr	r5, [pc, #388]	; (8015040 <mbedtls_md5_process+0x404>)
 8014ebc:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 8014ec0:	443d      	add	r5, r7
 8014ec2:	442c      	add	r4, r5
 8014ec4:	ea83 0501 	eor.w	r5, r3, r1
 8014ec8:	4015      	ands	r5, r2
 8014eca:	405d      	eors	r5, r3
 8014ecc:	9f06      	ldr	r7, [sp, #24]
 8014ece:	442c      	add	r4, r5
 8014ed0:	4d5c      	ldr	r5, [pc, #368]	; (8015044 <mbedtls_md5_process+0x408>)
 8014ed2:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( B, C, D, A,  8, 20, 0x455A14ED );
 8014ed6:	443d      	add	r5, r7
 8014ed8:	442a      	add	r2, r5
 8014eda:	ea81 0504 	eor.w	r5, r1, r4
 8014ede:	401d      	ands	r5, r3
 8014ee0:	404d      	eors	r5, r1
 8014ee2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014ee4:	442a      	add	r2, r5
 8014ee6:	4d58      	ldr	r5, [pc, #352]	; (8015048 <mbedtls_md5_process+0x40c>)
 8014ee8:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 8014eec:	443d      	add	r5, r7
 8014eee:	442b      	add	r3, r5
 8014ef0:	ea84 0502 	eor.w	r5, r4, r2
 8014ef4:	400d      	ands	r5, r1
 8014ef6:	4065      	eors	r5, r4
 8014ef8:	9f02      	ldr	r7, [sp, #8]
 8014efa:	442b      	add	r3, r5
 8014efc:	4d53      	ldr	r5, [pc, #332]	; (801504c <mbedtls_md5_process+0x410>)
 8014efe:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 8014f02:	443d      	add	r5, r7
 8014f04:	4429      	add	r1, r5
 8014f06:	ea82 0503 	eor.w	r5, r2, r3
 8014f0a:	4025      	ands	r5, r4
 8014f0c:	4055      	eors	r5, r2
 8014f0e:	4429      	add	r1, r5
 8014f10:	4d4f      	ldr	r5, [pc, #316]	; (8015050 <mbedtls_md5_process+0x414>)
 8014f12:	9f06      	ldr	r7, [sp, #24]
 8014f14:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 8014f18:	444d      	add	r5, r9
 8014f1a:	442c      	add	r4, r5
 8014f1c:	ea83 0501 	eor.w	r5, r3, r1
 8014f20:	4015      	ands	r5, r2
 8014f22:	405d      	eors	r5, r3
 8014f24:	4425      	add	r5, r4
 8014f26:	eb01 45b5 	add.w	r5, r1, r5, ror #18
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 8014f2a:	ea81 0405 	eor.w	r4, r1, r5
 8014f2e:	44e3      	add	fp, ip
 8014f30:	4493      	add	fp, r2
 8014f32:	ea04 0203 	and.w	r2, r4, r3
 8014f36:	404a      	eors	r2, r1
 8014f38:	445a      	add	r2, fp
 8014f3a:	f5ae 2bb8 	sub.w	fp, lr, #376832	; 0x5c000
 8014f3e:	eb05 3232 	add.w	r2, r5, r2, ror #12

#undef F

#define F(x,y,z) (x ^ y ^ z)

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 8014f42:	f2ab 6bbe 	subw	fp, fp, #1726	; 0x6be
 8014f46:	4054      	eors	r4, r2
 8014f48:	445b      	add	r3, fp
 8014f4a:	4423      	add	r3, r4
 8014f4c:	4c41      	ldr	r4, [pc, #260]	; (8015054 <mbedtls_md5_process+0x418>)
 8014f4e:	443c      	add	r4, r7
 8014f50:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  8, 11, 0x8771F681 );
 8014f54:	440c      	add	r4, r1
 8014f56:	ea85 0102 	eor.w	r1, r5, r2
 8014f5a:	4059      	eors	r1, r3
 8014f5c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014f5e:	4421      	add	r1, r4
 8014f60:	4c3d      	ldr	r4, [pc, #244]	; (8015058 <mbedtls_md5_process+0x41c>)
 8014f62:	443c      	add	r4, r7
 8014f64:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 8014f68:	4425      	add	r5, r4
 8014f6a:	ea82 0403 	eor.w	r4, r2, r3
 8014f6e:	404c      	eors	r4, r1
 8014f70:	4425      	add	r5, r4
 8014f72:	4c3a      	ldr	r4, [pc, #232]	; (801505c <mbedtls_md5_process+0x420>)
 8014f74:	9f01      	ldr	r7, [sp, #4]
 8014f76:	4444      	add	r4, r8
 8014f78:	eb01 4535 	add.w	r5, r1, r5, ror #16
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 8014f7c:	4414      	add	r4, r2
 8014f7e:	ea83 0201 	eor.w	r2, r3, r1
 8014f82:	406a      	eors	r2, r5
 8014f84:	4422      	add	r2, r4
 8014f86:	4c36      	ldr	r4, [pc, #216]	; (8015060 <mbedtls_md5_process+0x424>)
 8014f88:	443c      	add	r4, r7
 8014f8a:	eb05 2272 	add.w	r2, r5, r2, ror #9
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 8014f8e:	441c      	add	r4, r3
 8014f90:	ea81 0305 	eor.w	r3, r1, r5
 8014f94:	4053      	eors	r3, r2
 8014f96:	9f04      	ldr	r7, [sp, #16]
 8014f98:	4423      	add	r3, r4
 8014f9a:	4c32      	ldr	r4, [pc, #200]	; (8015064 <mbedtls_md5_process+0x428>)
 8014f9c:	443c      	add	r4, r7
 8014f9e:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 8014fa2:	440c      	add	r4, r1
 8014fa4:	ea85 0102 	eor.w	r1, r5, r2
 8014fa8:	4059      	eors	r1, r3
 8014faa:	4421      	add	r1, r4
 8014fac:	4c2e      	ldr	r4, [pc, #184]	; (8015068 <mbedtls_md5_process+0x42c>)
 8014fae:	9f08      	ldr	r7, [sp, #32]
 8014fb0:	444c      	add	r4, r9
 8014fb2:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 8014fb6:	4425      	add	r5, r4
 8014fb8:	ea82 0403 	eor.w	r4, r2, r3
 8014fbc:	404c      	eors	r4, r1
 8014fbe:	442c      	add	r4, r5
 8014fc0:	4d2a      	ldr	r5, [pc, #168]	; (801506c <mbedtls_md5_process+0x430>)
 8014fc2:	443d      	add	r5, r7
 8014fc4:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 8014fc8:	4415      	add	r5, r2
 8014fca:	ea83 0201 	eor.w	r2, r3, r1
 8014fce:	4062      	eors	r2, r4
 8014fd0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014fd2:	442a      	add	r2, r5
 8014fd4:	4d26      	ldr	r5, [pc, #152]	; (8015070 <mbedtls_md5_process+0x434>)
 8014fd6:	443d      	add	r5, r7
 8014fd8:	e04e      	b.n	8015078 <mbedtls_md5_process+0x43c>
 8014fda:	bf00      	nop
 8014fdc:	d76aa478 	.word	0xd76aa478
 8014fe0:	c1bdceee 	.word	0xc1bdceee
 8014fe4:	e8c7b756 	.word	0xe8c7b756
 8014fe8:	242070db 	.word	0x242070db
 8014fec:	f57c0faf 	.word	0xf57c0faf
 8014ff0:	4787c62a 	.word	0x4787c62a
 8014ff4:	a8304613 	.word	0xa8304613
 8014ff8:	fd469501 	.word	0xfd469501
 8014ffc:	698098d8 	.word	0x698098d8
 8015000:	8b44f7af 	.word	0x8b44f7af
 8015004:	895cd7be 	.word	0x895cd7be
 8015008:	6b901122 	.word	0x6b901122
 801500c:	fd987193 	.word	0xfd987193
 8015010:	a679438e 	.word	0xa679438e
 8015014:	49b40821 	.word	0x49b40821
 8015018:	f61e2562 	.word	0xf61e2562
 801501c:	c040b340 	.word	0xc040b340
 8015020:	265e5a51 	.word	0x265e5a51
 8015024:	e9b6c7aa 	.word	0xe9b6c7aa
 8015028:	d62f105d 	.word	0xd62f105d
 801502c:	02441453 	.word	0x02441453
 8015030:	d8a1e681 	.word	0xd8a1e681
 8015034:	e7d3fbc8 	.word	0xe7d3fbc8
 8015038:	21e1cde6 	.word	0x21e1cde6
 801503c:	c33707d6 	.word	0xc33707d6
 8015040:	f4d50d87 	.word	0xf4d50d87
 8015044:	455a14ed 	.word	0x455a14ed
 8015048:	a9e3e905 	.word	0xa9e3e905
 801504c:	fcefa3f8 	.word	0xfcefa3f8
 8015050:	676f02d9 	.word	0x676f02d9
 8015054:	8771f681 	.word	0x8771f681
 8015058:	6d9d6122 	.word	0x6d9d6122
 801505c:	fde5380c 	.word	0xfde5380c
 8015060:	a4beea44 	.word	0xa4beea44
 8015064:	4bdecfa9 	.word	0x4bdecfa9
 8015068:	f6bb4b60 	.word	0xf6bb4b60
 801506c:	bebfbc70 	.word	0xbebfbc70
 8015070:	289b7ec6 	.word	0x289b7ec6
 8015074:	8d2a4c8a 	.word	0x8d2a4c8a
 8015078:	eb04 2272 	add.w	r2, r4, r2, ror #9
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 801507c:	441d      	add	r5, r3
 801507e:	ea81 0304 	eor.w	r3, r1, r4
 8015082:	4053      	eors	r3, r2
 8015084:	442b      	add	r3, r5
 8015086:	4d7b      	ldr	r5, [pc, #492]	; (8015274 <mbedtls_md5_process+0x638>)
 8015088:	9f03      	ldr	r7, [sp, #12]
 801508a:	4455      	add	r5, sl
 801508c:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 8015090:	4429      	add	r1, r5
 8015092:	ea84 0502 	eor.w	r5, r4, r2
 8015096:	405d      	eors	r5, r3
 8015098:	4429      	add	r1, r5
 801509a:	4d77      	ldr	r5, [pc, #476]	; (8015278 <mbedtls_md5_process+0x63c>)
 801509c:	443d      	add	r5, r7
 801509e:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 80150a2:	4425      	add	r5, r4
 80150a4:	ea82 0403 	eor.w	r4, r2, r3
 80150a8:	404c      	eors	r4, r1
 80150aa:	9f05      	ldr	r7, [sp, #20]
 80150ac:	442c      	add	r4, r5
 80150ae:	4d73      	ldr	r5, [pc, #460]	; (801527c <mbedtls_md5_process+0x640>)
 80150b0:	443d      	add	r5, r7
 80150b2:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( B, C, D, A,  6, 23, 0x04881D05 );
 80150b6:	442a      	add	r2, r5
 80150b8:	ea83 0501 	eor.w	r5, r3, r1
 80150bc:	4065      	eors	r5, r4
 80150be:	9f07      	ldr	r7, [sp, #28]
 80150c0:	4415      	add	r5, r2
 80150c2:	4a6f      	ldr	r2, [pc, #444]	; (8015280 <mbedtls_md5_process+0x644>)
 80150c4:	443a      	add	r2, r7
 80150c6:	eb04 2575 	add.w	r5, r4, r5, ror #9
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 80150ca:	4413      	add	r3, r2
 80150cc:	ea81 0204 	eor.w	r2, r1, r4
 80150d0:	406a      	eors	r2, r5
 80150d2:	441a      	add	r2, r3
 80150d4:	4b6b      	ldr	r3, [pc, #428]	; (8015284 <mbedtls_md5_process+0x648>)
 80150d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80150d8:	4463      	add	r3, ip
 80150da:	eb05 7232 	add.w	r2, r5, r2, ror #28
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 80150de:	440b      	add	r3, r1
 80150e0:	ea84 0105 	eor.w	r1, r4, r5
 80150e4:	4051      	eors	r1, r2
 80150e6:	4419      	add	r1, r3
 80150e8:	4b67      	ldr	r3, [pc, #412]	; (8015288 <mbedtls_md5_process+0x64c>)
 80150ea:	443b      	add	r3, r7
 80150ec:	eb02 5171 	add.w	r1, r2, r1, ror #21
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 80150f0:	441c      	add	r4, r3
 80150f2:	ea85 0302 	eor.w	r3, r5, r2
 80150f6:	404b      	eors	r3, r1
 80150f8:	9f02      	ldr	r7, [sp, #8]
 80150fa:	441c      	add	r4, r3
 80150fc:	4b63      	ldr	r3, [pc, #396]	; (801528c <mbedtls_md5_process+0x650>)
 80150fe:	443b      	add	r3, r7
 8015100:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 8015104:	441d      	add	r5, r3
 8015106:	ea82 0301 	eor.w	r3, r2, r1
 801510a:	4063      	eors	r3, r4
 801510c:	442b      	add	r3, r5
 801510e:	4d60      	ldr	r5, [pc, #384]	; (8015290 <mbedtls_md5_process+0x654>)
 8015110:	9f03      	ldr	r7, [sp, #12]
 8015112:	eb04 2373 	add.w	r3, r4, r3, ror #9

#undef F

#define F(x,y,z) (y ^ (x | ~z))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 8015116:	4455      	add	r5, sl
 8015118:	ea63 0a01 	orn	sl, r3, r1
 801511c:	ea8a 0a04 	eor.w	sl, sl, r4
 8015120:	442a      	add	r2, r5
 8015122:	4452      	add	r2, sl
 8015124:	4d5b      	ldr	r5, [pc, #364]	; (8015294 <mbedtls_md5_process+0x658>)
 8015126:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 801512a:	444d      	add	r5, r9
 801512c:	ea62 0904 	orn	r9, r2, r4
 8015130:	ea89 0903 	eor.w	r9, r9, r3
 8015134:	4429      	add	r1, r5
 8015136:	4449      	add	r1, r9
 8015138:	4d57      	ldr	r5, [pc, #348]	; (8015298 <mbedtls_md5_process+0x65c>)
 801513a:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 801513e:	4445      	add	r5, r8
 8015140:	ea61 0803 	orn	r8, r1, r3
 8015144:	ea88 0802 	eor.w	r8, r8, r2
 8015148:	442c      	add	r4, r5
 801514a:	4444      	add	r4, r8
 801514c:	4d53      	ldr	r5, [pc, #332]	; (801529c <mbedtls_md5_process+0x660>)
 801514e:	eb01 4474 	add.w	r4, r1, r4, ror #17
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 8015152:	4475      	add	r5, lr
 8015154:	ea64 0e02 	orn	lr, r4, r2
 8015158:	ea8e 0e01 	eor.w	lr, lr, r1
 801515c:	442b      	add	r3, r5
 801515e:	4473      	add	r3, lr
 8015160:	4d4f      	ldr	r5, [pc, #316]	; (80152a0 <mbedtls_md5_process+0x664>)
 8015162:	eb04 23f3 	add.w	r3, r4, r3, ror #11
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 8015166:	4465      	add	r5, ip
 8015168:	ea63 0c01 	orn	ip, r3, r1
 801516c:	ea8c 0c04 	eor.w	ip, ip, r4
 8015170:	442a      	add	r2, r5
 8015172:	4d4c      	ldr	r5, [pc, #304]	; (80152a4 <mbedtls_md5_process+0x668>)
 8015174:	4462      	add	r2, ip
 8015176:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 801517a:	443d      	add	r5, r7
 801517c:	4429      	add	r1, r5
 801517e:	ea62 0704 	orn	r7, r2, r4
 8015182:	9d08      	ldr	r5, [sp, #32]
 8015184:	405f      	eors	r7, r3
 8015186:	4439      	add	r1, r7
 8015188:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801518c:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 8015190:	f6a5 3583 	subw	r5, r5, #2947	; 0xb83
 8015194:	4425      	add	r5, r4
 8015196:	ea61 0403 	orn	r4, r1, r3
 801519a:	4054      	eors	r4, r2
 801519c:	9f01      	ldr	r7, [sp, #4]
 801519e:	442c      	add	r4, r5
 80151a0:	4d41      	ldr	r5, [pc, #260]	; (80152a8 <mbedtls_md5_process+0x66c>)
 80151a2:	eb01 4474 	add.w	r4, r1, r4, ror #17
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 80151a6:	443d      	add	r5, r7
 80151a8:	ea64 0702 	orn	r7, r4, r2
 80151ac:	404f      	eors	r7, r1
 80151ae:	442b      	add	r3, r5
 80151b0:	443b      	add	r3, r7
 80151b2:	4d3e      	ldr	r5, [pc, #248]	; (80152ac <mbedtls_md5_process+0x670>)
 80151b4:	9f06      	ldr	r7, [sp, #24]
 80151b6:	eb04 23f3 	add.w	r3, r4, r3, ror #11
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 80151ba:	443d      	add	r5, r7
 80151bc:	ea63 0701 	orn	r7, r3, r1
 80151c0:	4067      	eors	r7, r4
 80151c2:	442a      	add	r2, r5
 80151c4:	443a      	add	r2, r7
 80151c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80151c8:	4f39      	ldr	r7, [pc, #228]	; (80152b0 <mbedtls_md5_process+0x674>)
 80151ca:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 80151ce:	442f      	add	r7, r5
 80151d0:	ea62 0c04 	orn	ip, r2, r4
 80151d4:	ea8c 0c03 	eor.w	ip, ip, r3
 80151d8:	4439      	add	r1, r7
 80151da:	4461      	add	r1, ip
 80151dc:	9f05      	ldr	r7, [sp, #20]
 80151de:	4d35      	ldr	r5, [pc, #212]	; (80152b4 <mbedtls_md5_process+0x678>)
 80151e0:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B,  6, 15, 0xA3014314 );
 80151e4:	443d      	add	r5, r7
 80151e6:	ea61 0703 	orn	r7, r1, r3
 80151ea:	4057      	eors	r7, r2
 80151ec:	442c      	add	r4, r5
 80151ee:	443c      	add	r4, r7
 80151f0:	4d31      	ldr	r5, [pc, #196]	; (80152b8 <mbedtls_md5_process+0x67c>)
 80151f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80151f4:	eb01 4474 	add.w	r4, r1, r4, ror #17
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 80151f8:	443d      	add	r5, r7
 80151fa:	441d      	add	r5, r3
 80151fc:	ea64 0302 	orn	r3, r4, r2
 8015200:	404b      	eors	r3, r1
 8015202:	9f04      	ldr	r7, [sp, #16]
 8015204:	442b      	add	r3, r5
 8015206:	4d2d      	ldr	r5, [pc, #180]	; (80152bc <mbedtls_md5_process+0x680>)
 8015208:	eb04 23f3 	add.w	r3, r4, r3, ror #11
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 801520c:	443d      	add	r5, r7
 801520e:	4415      	add	r5, r2
 8015210:	ea63 0201 	orn	r2, r3, r1
 8015214:	4062      	eors	r2, r4
 8015216:	442a      	add	r2, r5
 8015218:	4f29      	ldr	r7, [pc, #164]	; (80152c0 <mbedtls_md5_process+0x684>)
 801521a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801521c:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 8015220:	442f      	add	r7, r5
 8015222:	440f      	add	r7, r1
 8015224:	ea62 0104 	orn	r1, r2, r4
 8015228:	4059      	eors	r1, r3
 801522a:	4439      	add	r1, r7
 801522c:	4d25      	ldr	r5, [pc, #148]	; (80152c4 <mbedtls_md5_process+0x688>)
 801522e:	9f02      	ldr	r7, [sp, #8]
 8015230:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 8015234:	443d      	add	r5, r7
 8015236:	4425      	add	r5, r4
 8015238:	ea61 0403 	orn	r4, r1, r3
 801523c:	4054      	eors	r4, r2
 801523e:	9f07      	ldr	r7, [sp, #28]
 8015240:	442c      	add	r4, r5
 8015242:	4d21      	ldr	r5, [pc, #132]	; (80152c8 <mbedtls_md5_process+0x68c>)
 8015244:	443d      	add	r5, r7
 8015246:	442b      	add	r3, r5
    P( B, C, D, A,  9, 21, 0xEB86D391 );

#undef F

    ctx->state[0] += A;
 8015248:	6885      	ldr	r5, [r0, #8]
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 801524a:	eb01 4474 	add.w	r4, r1, r4, ror #17
    ctx->state[0] += A;
 801524e:	4415      	add	r5, r2
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 8015250:	ea64 0202 	orn	r2, r4, r2
 8015254:	404a      	eors	r2, r1
 8015256:	441a      	add	r2, r3
    ctx->state[1] += B;
    ctx->state[2] += C;
 8015258:	6903      	ldr	r3, [r0, #16]
    ctx->state[0] += A;
 801525a:	6085      	str	r5, [r0, #8]
    ctx->state[1] += B;
 801525c:	4426      	add	r6, r4
    ctx->state[2] += C;
 801525e:	441c      	add	r4, r3
    ctx->state[3] += D;
 8015260:	6943      	ldr	r3, [r0, #20]
    ctx->state[2] += C;
 8015262:	6104      	str	r4, [r0, #16]
    ctx->state[1] += B;
 8015264:	eb06 26f2 	add.w	r6, r6, r2, ror #11
    ctx->state[3] += D;
 8015268:	4419      	add	r1, r3
    ctx->state[1] += B;
 801526a:	60c6      	str	r6, [r0, #12]
    ctx->state[3] += D;
 801526c:	6141      	str	r1, [r0, #20]
}
 801526e:	b00d      	add	sp, #52	; 0x34
 8015270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015274:	eaa127fa 	.word	0xeaa127fa
 8015278:	d4ef3085 	.word	0xd4ef3085
 801527c:	04881d05 	.word	0x04881d05
 8015280:	d9d4d039 	.word	0xd9d4d039
 8015284:	e6db99e5 	.word	0xe6db99e5
 8015288:	1fa27cf8 	.word	0x1fa27cf8
 801528c:	c4ac5665 	.word	0xc4ac5665
 8015290:	f4292244 	.word	0xf4292244
 8015294:	432aff97 	.word	0x432aff97
 8015298:	ab9423a7 	.word	0xab9423a7
 801529c:	fc93a039 	.word	0xfc93a039
 80152a0:	655b59c3 	.word	0x655b59c3
 80152a4:	8f0ccc92 	.word	0x8f0ccc92
 80152a8:	85845dd1 	.word	0x85845dd1
 80152ac:	6fa87e4f 	.word	0x6fa87e4f
 80152b0:	fe2ce6e0 	.word	0xfe2ce6e0
 80152b4:	a3014314 	.word	0xa3014314
 80152b8:	4e0811a1 	.word	0x4e0811a1
 80152bc:	f7537e82 	.word	0xf7537e82
 80152c0:	bd3af235 	.word	0xbd3af235
 80152c4:	2ad7d2bb 	.word	0x2ad7d2bb
 80152c8:	eb86d391 	.word	0xeb86d391

080152cc <mbedtls_md5_update.part.0>:
#endif /* !MBEDTLS_MD5_PROCESS_ALT */

/*
 * MD5 process buffer
 */
void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
 80152cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 80152d0:	6803      	ldr	r3, [r0, #0]
 80152d2:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80152d6:	189b      	adds	r3, r3, r2
 80152d8:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80152da:	bf24      	itt	cs
 80152dc:	6843      	ldrcs	r3, [r0, #4]
 80152de:	3301      	addcs	r3, #1
void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
 80152e0:	4605      	mov	r5, r0
 80152e2:	460e      	mov	r6, r1
 80152e4:	4614      	mov	r4, r2
        ctx->total[1]++;
 80152e6:	bf28      	it	cs
 80152e8:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 80152ea:	b197      	cbz	r7, 8015312 <mbedtls_md5_update.part.0+0x46>
    fill = 64 - left;
 80152ec:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 80152f0:	4591      	cmp	r9, r2
 80152f2:	d80e      	bhi.n	8015312 <mbedtls_md5_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80152f4:	f100 0818 	add.w	r8, r0, #24
 80152f8:	464a      	mov	r2, r9
 80152fa:	eb08 0007 	add.w	r0, r8, r7
 80152fe:	f00d f8bf 	bl	8022480 <memcpy>
        mbedtls_md5_process( ctx, ctx->buffer );
 8015302:	4641      	mov	r1, r8
 8015304:	4628      	mov	r0, r5
 8015306:	f7ff fc99 	bl	8014c3c <mbedtls_md5_process>
        input += fill;
 801530a:	3c40      	subs	r4, #64	; 0x40
        ilen  -= fill;
 801530c:	443c      	add	r4, r7
        input += fill;
 801530e:	444e      	add	r6, r9
        left = 0;
 8015310:	2700      	movs	r7, #0
 8015312:	46a0      	mov	r8, r4
 8015314:	eb06 0904 	add.w	r9, r6, r4
 8015318:	e004      	b.n	8015324 <mbedtls_md5_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_md5_process( ctx, input );
 801531a:	4628      	mov	r0, r5
 801531c:	f7ff fc8e 	bl	8014c3c <mbedtls_md5_process>
        input += 64;
        ilen  -= 64;
 8015320:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 8015324:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8015328:	eba9 0108 	sub.w	r1, r9, r8
 801532c:	d8f5      	bhi.n	801531a <mbedtls_md5_update.part.0+0x4e>
 801532e:	09a2      	lsrs	r2, r4, #6
 8015330:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8015334:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 8015338:	fb03 4202 	mla	r2, r3, r2, r4
    }

    if( ilen > 0 )
 801533c:	4431      	add	r1, r6
 801533e:	b132      	cbz	r2, 801534e <mbedtls_md5_update.part.0+0x82>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8015340:	f105 0018 	add.w	r0, r5, #24
 8015344:	4438      	add	r0, r7
    }
}
 8015346:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801534a:	f00d b899 	b.w	8022480 <memcpy>
}
 801534e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015352 <mbedtls_md5_update>:
    if( ilen == 0 )
 8015352:	b10a      	cbz	r2, 8015358 <mbedtls_md5_update+0x6>
 8015354:	f7ff bfba 	b.w	80152cc <mbedtls_md5_update.part.0>
}
 8015358:	4770      	bx	lr
	...

0801535c <mbedtls_md5_finish>:

/*
 * MD5 final digest
 */
void mbedtls_md5_finish( mbedtls_md5_context *ctx, unsigned char output[16] )
{
 801535c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801535e:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8015360:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 8015364:	0f53      	lsrs	r3, r2, #29
 8015366:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 801536a:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_LE( low,  msglen, 0 );
    PUT_UINT32_LE( high, msglen, 4 );

    last = ctx->total[0] & 0x3F;
 801536c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8015370:	2a37      	cmp	r2, #55	; 0x37
{
 8015372:	4604      	mov	r4, r0
    PUT_UINT32_LE( high, msglen, 4 );
 8015374:	e9cd 1300 	strd	r1, r3, [sp]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8015378:	bf94      	ite	ls
 801537a:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 801537e:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    mbedtls_md5_update( ctx, md5_padding, padn );
 8015382:	4917      	ldr	r1, [pc, #92]	; (80153e0 <mbedtls_md5_finish+0x84>)
 8015384:	f7ff ffe5 	bl	8015352 <mbedtls_md5_update>
    if( ilen == 0 )
 8015388:	2208      	movs	r2, #8
 801538a:	4669      	mov	r1, sp
 801538c:	4620      	mov	r0, r4
 801538e:	f7ff ff9d 	bl	80152cc <mbedtls_md5_update.part.0>
    mbedtls_md5_update( ctx, msglen, 8 );

    PUT_UINT32_LE( ctx->state[0], output,  0 );
 8015392:	68a3      	ldr	r3, [r4, #8]
 8015394:	702b      	strb	r3, [r5, #0]
 8015396:	68a3      	ldr	r3, [r4, #8]
 8015398:	0a1b      	lsrs	r3, r3, #8
 801539a:	706b      	strb	r3, [r5, #1]
 801539c:	8963      	ldrh	r3, [r4, #10]
 801539e:	70ab      	strb	r3, [r5, #2]
 80153a0:	7ae3      	ldrb	r3, [r4, #11]
 80153a2:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 80153a4:	68e3      	ldr	r3, [r4, #12]
 80153a6:	712b      	strb	r3, [r5, #4]
 80153a8:	68e3      	ldr	r3, [r4, #12]
 80153aa:	0a1b      	lsrs	r3, r3, #8
 80153ac:	716b      	strb	r3, [r5, #5]
 80153ae:	89e3      	ldrh	r3, [r4, #14]
 80153b0:	71ab      	strb	r3, [r5, #6]
 80153b2:	7be3      	ldrb	r3, [r4, #15]
 80153b4:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 80153b6:	6923      	ldr	r3, [r4, #16]
 80153b8:	722b      	strb	r3, [r5, #8]
 80153ba:	6923      	ldr	r3, [r4, #16]
 80153bc:	0a1b      	lsrs	r3, r3, #8
 80153be:	726b      	strb	r3, [r5, #9]
 80153c0:	8a63      	ldrh	r3, [r4, #18]
 80153c2:	72ab      	strb	r3, [r5, #10]
 80153c4:	7ce3      	ldrb	r3, [r4, #19]
 80153c6:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 80153c8:	6963      	ldr	r3, [r4, #20]
 80153ca:	732b      	strb	r3, [r5, #12]
 80153cc:	6963      	ldr	r3, [r4, #20]
 80153ce:	0a1b      	lsrs	r3, r3, #8
 80153d0:	736b      	strb	r3, [r5, #13]
 80153d2:	8ae3      	ldrh	r3, [r4, #22]
 80153d4:	73ab      	strb	r3, [r5, #14]
 80153d6:	7de3      	ldrb	r3, [r4, #23]
 80153d8:	73eb      	strb	r3, [r5, #15]
}
 80153da:	b003      	add	sp, #12
 80153dc:	bd30      	pop	{r4, r5, pc}
 80153de:	bf00      	nop
 80153e0:	0802bd4c 	.word	0x0802bd4c

080153e4 <mbedtls_md5>:

/*
 * output = MD5( input buffer )
 */
void mbedtls_md5( const unsigned char *input, size_t ilen, unsigned char output[16] )
{
 80153e4:	b570      	push	{r4, r5, r6, lr}
 80153e6:	b096      	sub	sp, #88	; 0x58
 80153e8:	4605      	mov	r5, r0
    mbedtls_md5_context ctx;

    mbedtls_md5_init( &ctx );
 80153ea:	4668      	mov	r0, sp
{
 80153ec:	460e      	mov	r6, r1
 80153ee:	4614      	mov	r4, r2
    mbedtls_md5_init( &ctx );
 80153f0:	f7ff fbfa 	bl	8014be8 <mbedtls_md5_init>
    mbedtls_md5_starts( &ctx );
 80153f4:	4668      	mov	r0, sp
 80153f6:	f7ff fc0b 	bl	8014c10 <mbedtls_md5_starts>
    mbedtls_md5_update( &ctx, input, ilen );
 80153fa:	4632      	mov	r2, r6
 80153fc:	4629      	mov	r1, r5
 80153fe:	4668      	mov	r0, sp
 8015400:	f7ff ffa7 	bl	8015352 <mbedtls_md5_update>
    mbedtls_md5_finish( &ctx, output );
 8015404:	4621      	mov	r1, r4
 8015406:	4668      	mov	r0, sp
 8015408:	f7ff ffa8 	bl	801535c <mbedtls_md5_finish>
    mbedtls_md5_free( &ctx );
 801540c:	4668      	mov	r0, sp
 801540e:	f7ff fbef 	bl	8014bf0 <mbedtls_md5_free>
}
 8015412:	b016      	add	sp, #88	; 0x58
 8015414:	bd70      	pop	{r4, r5, r6, pc}

08015416 <md5_process_wrap>:
                 (const mbedtls_md5_context *) src );
}

static void md5_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_md5_process( (mbedtls_md5_context *) ctx, data );
 8015416:	f7ff bc11 	b.w	8014c3c <mbedtls_md5_process>

0801541a <md5_clone_wrap>:
    mbedtls_md5_clone( (mbedtls_md5_context *) dst,
 801541a:	f7ff bbf3 	b.w	8014c04 <mbedtls_md5_clone>
	...

08015420 <md5_ctx_free>:
{
 8015420:	b510      	push	{r4, lr}
 8015422:	4604      	mov	r4, r0
    mbedtls_md5_free( (mbedtls_md5_context *) ctx );
 8015424:	f7ff fbe4 	bl	8014bf0 <mbedtls_md5_free>
    mbedtls_free( ctx );
 8015428:	4b02      	ldr	r3, [pc, #8]	; (8015434 <md5_ctx_free+0x14>)
 801542a:	4620      	mov	r0, r4
 801542c:	681b      	ldr	r3, [r3, #0]
}
 801542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015432:	4718      	bx	r3
 8015434:	200005a4 	.word	0x200005a4

08015438 <md5_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );
 8015438:	4b05      	ldr	r3, [pc, #20]	; (8015450 <md5_ctx_alloc+0x18>)
{
 801543a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	2158      	movs	r1, #88	; 0x58
 8015440:	2001      	movs	r0, #1
 8015442:	4798      	blx	r3
    if( ctx != NULL )
 8015444:	4604      	mov	r4, r0
 8015446:	b108      	cbz	r0, 801544c <md5_ctx_alloc+0x14>
        mbedtls_md5_init( (mbedtls_md5_context *) ctx );
 8015448:	f7ff fbce 	bl	8014be8 <mbedtls_md5_init>
}
 801544c:	4620      	mov	r0, r4
 801544e:	bd10      	pop	{r4, pc}
 8015450:	200005a0 	.word	0x200005a0

08015454 <md5_finish_wrap>:
    mbedtls_md5_finish( (mbedtls_md5_context *) ctx, output );
 8015454:	f7ff bf82 	b.w	801535c <mbedtls_md5_finish>

08015458 <md5_update_wrap>:
    mbedtls_md5_update( (mbedtls_md5_context *) ctx, input, ilen );
 8015458:	f7ff bf7b 	b.w	8015352 <mbedtls_md5_update>

0801545c <md5_starts_wrap>:
    mbedtls_md5_starts( (mbedtls_md5_context *) ctx );
 801545c:	f7ff bbd8 	b.w	8014c10 <mbedtls_md5_starts>

08015460 <sha1_process_wrap>:
    mbedtls_free( ctx );
}

static void sha1_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha1_process( (mbedtls_sha1_context *) ctx, data );
 8015460:	f002 bb1e 	b.w	8017aa0 <mbedtls_sha1_process>

08015464 <sha1_clone_wrap>:
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
 8015464:	f002 bafd 	b.w	8017a62 <mbedtls_sha1_clone>

08015468 <sha1_ctx_free>:
{
 8015468:	b510      	push	{r4, lr}
 801546a:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 801546c:	f002 faef 	bl	8017a4e <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8015470:	4b02      	ldr	r3, [pc, #8]	; (801547c <sha1_ctx_free+0x14>)
 8015472:	4620      	mov	r0, r4
 8015474:	681b      	ldr	r3, [r3, #0]
}
 8015476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801547a:	4718      	bx	r3
 801547c:	200005a4 	.word	0x200005a4

08015480 <sha1_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8015480:	4b05      	ldr	r3, [pc, #20]	; (8015498 <sha1_ctx_alloc+0x18>)
{
 8015482:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	215c      	movs	r1, #92	; 0x5c
 8015488:	2001      	movs	r0, #1
 801548a:	4798      	blx	r3
    if( ctx != NULL )
 801548c:	4604      	mov	r4, r0
 801548e:	b108      	cbz	r0, 8015494 <sha1_ctx_alloc+0x14>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 8015490:	f002 fad9 	bl	8017a46 <mbedtls_sha1_init>
}
 8015494:	4620      	mov	r0, r4
 8015496:	bd10      	pop	{r4, pc}
 8015498:	200005a0 	.word	0x200005a0

0801549c <sha1_finish_wrap>:
    mbedtls_sha1_finish( (mbedtls_sha1_context *) ctx, output );
 801549c:	f003 ba48 	b.w	8018930 <mbedtls_sha1_finish>

080154a0 <sha1_update_wrap>:
    mbedtls_sha1_update( (mbedtls_sha1_context *) ctx, input, ilen );
 80154a0:	f003 ba41 	b.w	8018926 <mbedtls_sha1_update>

080154a4 <sha1_starts_wrap>:
    mbedtls_sha1_starts( (mbedtls_sha1_context *) ctx );
 80154a4:	f002 bae2 	b.w	8017a6c <mbedtls_sha1_starts>

080154a8 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static void sha224_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha256_process( (mbedtls_sha256_context *) ctx, data );
 80154a8:	f003 bb0e 	b.w	8018ac8 <mbedtls_sha256_process>

080154ac <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 80154ac:	f003 bab5 	b.w	8018a1a <mbedtls_sha256_clone>

080154b0 <sha224_ctx_free>:
{
 80154b0:	b510      	push	{r4, lr}
 80154b2:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 80154b4:	f003 faa7 	bl	8018a06 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 80154b8:	4b02      	ldr	r3, [pc, #8]	; (80154c4 <sha224_ctx_free+0x14>)
 80154ba:	4620      	mov	r0, r4
 80154bc:	681b      	ldr	r3, [r3, #0]
}
 80154be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80154c2:	4718      	bx	r3
 80154c4:	200005a4 	.word	0x200005a4

080154c8 <sha224_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80154c8:	4b05      	ldr	r3, [pc, #20]	; (80154e0 <sha224_ctx_alloc+0x18>)
{
 80154ca:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	216c      	movs	r1, #108	; 0x6c
 80154d0:	2001      	movs	r0, #1
 80154d2:	4798      	blx	r3
    if( ctx != NULL )
 80154d4:	4604      	mov	r4, r0
 80154d6:	b108      	cbz	r0, 80154dc <sha224_ctx_alloc+0x14>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 80154d8:	f003 fa91 	bl	80189fe <mbedtls_sha256_init>
}
 80154dc:	4620      	mov	r0, r4
 80154de:	bd10      	pop	{r4, pc}
 80154e0:	200005a0 	.word	0x200005a0

080154e4 <sha224_wrap>:
    mbedtls_sha256( input, ilen, output, 1 );
 80154e4:	2301      	movs	r3, #1
 80154e6:	f003 bf01 	b.w	80192ec <mbedtls_sha256>

080154ea <sha256_wrap>:
}

static void sha256_wrap( const unsigned char *input, size_t ilen,
                    unsigned char *output )
{
    mbedtls_sha256( input, ilen, output, 0 );
 80154ea:	2300      	movs	r3, #0
 80154ec:	f003 befe 	b.w	80192ec <mbedtls_sha256>

080154f0 <sha224_finish_wrap>:
    mbedtls_sha256_finish( (mbedtls_sha256_context *) ctx, output );
 80154f0:	f003 be8e 	b.w	8019210 <mbedtls_sha256_finish>

080154f4 <sha224_update_wrap>:
    mbedtls_sha256_update( (mbedtls_sha256_context *) ctx, input, ilen );
 80154f4:	f003 be87 	b.w	8019206 <mbedtls_sha256_update>

080154f8 <sha224_starts_wrap>:
    mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx, 1 );
 80154f8:	2101      	movs	r1, #1
 80154fa:	f003 ba93 	b.w	8018a24 <mbedtls_sha256_starts>

080154fe <sha256_starts_wrap>:
    mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx, 0 );
 80154fe:	2100      	movs	r1, #0
 8015500:	f003 ba90 	b.w	8018a24 <mbedtls_sha256_starts>

08015504 <sha384_process_wrap>:
                    (const mbedtls_sha512_context *) src );
}

static void sha384_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha512_process( (mbedtls_sha512_context *) ctx, data );
 8015504:	f003 bfbc 	b.w	8019480 <mbedtls_sha512_process>

08015508 <sha384_clone_wrap>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 8015508:	f003 bf19 	b.w	801933e <mbedtls_sha512_clone>

0801550c <sha384_ctx_free>:
{
 801550c:	b510      	push	{r4, lr}
 801550e:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 8015510:	f003 ff0b 	bl	801932a <mbedtls_sha512_free>
    mbedtls_free( ctx );
 8015514:	4b02      	ldr	r3, [pc, #8]	; (8015520 <sha384_ctx_free+0x14>)
 8015516:	4620      	mov	r0, r4
 8015518:	681b      	ldr	r3, [r3, #0]
}
 801551a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801551e:	4718      	bx	r3
 8015520:	200005a4 	.word	0x200005a4

08015524 <sha384_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8015524:	4b05      	ldr	r3, [pc, #20]	; (801553c <sha384_ctx_alloc+0x18>)
{
 8015526:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	21d8      	movs	r1, #216	; 0xd8
 801552c:	2001      	movs	r0, #1
 801552e:	4798      	blx	r3
    if( ctx != NULL )
 8015530:	4604      	mov	r4, r0
 8015532:	b108      	cbz	r0, 8015538 <sha384_ctx_alloc+0x14>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 8015534:	f003 fef5 	bl	8019322 <mbedtls_sha512_init>
}
 8015538:	4620      	mov	r0, r4
 801553a:	bd10      	pop	{r4, pc}
 801553c:	200005a0 	.word	0x200005a0

08015540 <sha384_wrap>:
    mbedtls_sha512( input, ilen, output, 1 );
 8015540:	2301      	movs	r3, #1
 8015542:	f004 be65 	b.w	801a210 <mbedtls_sha512>

08015546 <sha512_wrap>:
}

static void sha512_wrap( const unsigned char *input, size_t ilen,
                    unsigned char *output )
{
    mbedtls_sha512( input, ilen, output, 0 );
 8015546:	2300      	movs	r3, #0
 8015548:	f004 be62 	b.w	801a210 <mbedtls_sha512>

0801554c <sha384_finish_wrap>:
    mbedtls_sha512_finish( (mbedtls_sha512_context *) ctx, output );
 801554c:	f004 bd5a 	b.w	801a004 <mbedtls_sha512_finish>

08015550 <sha384_update_wrap>:
    mbedtls_sha512_update( (mbedtls_sha512_context *) ctx, input, ilen );
 8015550:	f004 bd53 	b.w	8019ffa <mbedtls_sha512_update>

08015554 <sha384_starts_wrap>:
    mbedtls_sha512_starts( (mbedtls_sha512_context *) ctx, 1 );
 8015554:	2101      	movs	r1, #1
 8015556:	f003 bef7 	b.w	8019348 <mbedtls_sha512_starts>

0801555a <sha512_starts_wrap>:
    mbedtls_sha512_starts( (mbedtls_sha512_context *) ctx, 0 );
 801555a:	2100      	movs	r1, #0
 801555c:	f003 bef4 	b.w	8019348 <mbedtls_sha512_starts>

08015560 <oid_sig_alg_from_asn1.part.0>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8015560:	b538      	push	{r3, r4, r5, lr}
 8015562:	4c09      	ldr	r4, [pc, #36]	; (8015588 <oid_sig_alg_from_asn1.part.0+0x28>)
 8015564:	4605      	mov	r5, r0
 8015566:	6820      	ldr	r0, [r4, #0]
 8015568:	b910      	cbnz	r0, 8015570 <oid_sig_alg_from_asn1.part.0+0x10>
 801556a:	4604      	mov	r4, r0
 801556c:	4620      	mov	r0, r4
 801556e:	bd38      	pop	{r3, r4, r5, pc}
 8015570:	686b      	ldr	r3, [r5, #4]
 8015572:	6862      	ldr	r2, [r4, #4]
 8015574:	429a      	cmp	r2, r3
 8015576:	d104      	bne.n	8015582 <oid_sig_alg_from_asn1.part.0+0x22>
 8015578:	68a9      	ldr	r1, [r5, #8]
 801557a:	f00c ff73 	bl	8022464 <memcmp>
 801557e:	2800      	cmp	r0, #0
 8015580:	d0f4      	beq.n	801556c <oid_sig_alg_from_asn1.part.0+0xc>
 8015582:	3414      	adds	r4, #20
 8015584:	e7ef      	b.n	8015566 <oid_sig_alg_from_asn1.part.0+0x6>
 8015586:	bf00      	nop
 8015588:	0802c170 	.word	0x0802c170

0801558c <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 801558c:	b570      	push	{r4, r5, r6, lr}
 801558e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8015590:	4605      	mov	r5, r0
 8015592:	b110      	cbz	r0, 801559a <mbedtls_oid_get_attr_short_name+0xe>
 8015594:	4c09      	ldr	r4, [pc, #36]	; (80155bc <mbedtls_oid_get_attr_short_name+0x30>)
 8015596:	6820      	ldr	r0, [r4, #0]
 8015598:	b910      	cbnz	r0, 80155a0 <mbedtls_oid_get_attr_short_name+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 801559a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 801559e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 80155a0:	686b      	ldr	r3, [r5, #4]
 80155a2:	6862      	ldr	r2, [r4, #4]
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d103      	bne.n	80155b0 <mbedtls_oid_get_attr_short_name+0x24>
 80155a8:	68a9      	ldr	r1, [r5, #8]
 80155aa:	f00c ff5b 	bl	8022464 <memcmp>
 80155ae:	b108      	cbz	r0, 80155b4 <mbedtls_oid_get_attr_short_name+0x28>
 80155b0:	3414      	adds	r4, #20
 80155b2:	e7f0      	b.n	8015596 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80155b4:	6923      	ldr	r3, [r4, #16]
 80155b6:	6033      	str	r3, [r6, #0]
 80155b8:	e7f1      	b.n	801559e <mbedtls_oid_get_attr_short_name+0x12>
 80155ba:	bf00      	nop
 80155bc:	0802c288 	.word	0x0802c288

080155c0 <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80155c0:	b570      	push	{r4, r5, r6, lr}
 80155c2:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 80155c4:	4605      	mov	r5, r0
 80155c6:	b110      	cbz	r0, 80155ce <mbedtls_oid_get_x509_ext_type+0xe>
 80155c8:	4c09      	ldr	r4, [pc, #36]	; (80155f0 <mbedtls_oid_get_x509_ext_type+0x30>)
 80155ca:	6820      	ldr	r0, [r4, #0]
 80155cc:	b910      	cbnz	r0, 80155d4 <mbedtls_oid_get_x509_ext_type+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80155ce:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80155d2:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 80155d4:	686b      	ldr	r3, [r5, #4]
 80155d6:	6862      	ldr	r2, [r4, #4]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d103      	bne.n	80155e4 <mbedtls_oid_get_x509_ext_type+0x24>
 80155dc:	68a9      	ldr	r1, [r5, #8]
 80155de:	f00c ff41 	bl	8022464 <memcmp>
 80155e2:	b108      	cbz	r0, 80155e8 <mbedtls_oid_get_x509_ext_type+0x28>
 80155e4:	3414      	adds	r4, #20
 80155e6:	e7f0      	b.n	80155ca <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80155e8:	6923      	ldr	r3, [r4, #16]
 80155ea:	6033      	str	r3, [r6, #0]
 80155ec:	e7f1      	b.n	80155d2 <mbedtls_oid_get_x509_ext_type+0x12>
 80155ee:	bf00      	nop
 80155f0:	0802c418 	.word	0x0802c418

080155f4 <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 80155f4:	b570      	push	{r4, r5, r6, lr}
 80155f6:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 80155f8:	4605      	mov	r5, r0
 80155fa:	b110      	cbz	r0, 8015602 <mbedtls_oid_get_extended_key_usage+0xe>
 80155fc:	4c09      	ldr	r4, [pc, #36]	; (8015624 <mbedtls_oid_get_extended_key_usage+0x30>)
 80155fe:	6820      	ldr	r0, [r4, #0]
 8015600:	b910      	cbnz	r0, 8015608 <mbedtls_oid_get_extended_key_usage+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8015602:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015606:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8015608:	686b      	ldr	r3, [r5, #4]
 801560a:	6862      	ldr	r2, [r4, #4]
 801560c:	429a      	cmp	r2, r3
 801560e:	d103      	bne.n	8015618 <mbedtls_oid_get_extended_key_usage+0x24>
 8015610:	68a9      	ldr	r1, [r5, #8]
 8015612:	f00c ff27 	bl	8022464 <memcmp>
 8015616:	b108      	cbz	r0, 801561c <mbedtls_oid_get_extended_key_usage+0x28>
 8015618:	3410      	adds	r4, #16
 801561a:	e7f0      	b.n	80155fe <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 801561c:	68e3      	ldr	r3, [r4, #12]
 801561e:	6033      	str	r3, [r6, #0]
 8015620:	e7f1      	b.n	8015606 <mbedtls_oid_get_extended_key_usage+0x12>
 8015622:	bf00      	nop
 8015624:	0802c490 	.word	0x0802c490

08015628 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8015628:	b510      	push	{r4, lr}
 801562a:	460c      	mov	r4, r1
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 801562c:	b130      	cbz	r0, 801563c <mbedtls_oid_get_sig_alg_desc+0x14>
 801562e:	f7ff ff97 	bl	8015560 <oid_sig_alg_from_asn1.part.0>
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8015632:	b118      	cbz	r0, 801563c <mbedtls_oid_get_sig_alg_desc+0x14>
 8015634:	68c3      	ldr	r3, [r0, #12]
 8015636:	6023      	str	r3, [r4, #0]
 8015638:	2000      	movs	r0, #0
 801563a:	bd10      	pop	{r4, pc}
 801563c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015640:	e7fb      	b.n	801563a <mbedtls_oid_get_sig_alg_desc+0x12>

08015642 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8015642:	b538      	push	{r3, r4, r5, lr}
 8015644:	460d      	mov	r5, r1
 8015646:	4614      	mov	r4, r2
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8015648:	b140      	cbz	r0, 801565c <mbedtls_oid_get_sig_alg+0x1a>
 801564a:	f7ff ff89 	bl	8015560 <oid_sig_alg_from_asn1.part.0>
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 801564e:	b128      	cbz	r0, 801565c <mbedtls_oid_get_sig_alg+0x1a>
 8015650:	7c03      	ldrb	r3, [r0, #16]
 8015652:	702b      	strb	r3, [r5, #0]
 8015654:	7c43      	ldrb	r3, [r0, #17]
 8015656:	7023      	strb	r3, [r4, #0]
 8015658:	2000      	movs	r0, #0
 801565a:	bd38      	pop	{r3, r4, r5, pc}
 801565c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015660:	e7fb      	b.n	801565a <mbedtls_oid_get_sig_alg+0x18>
	...

08015664 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8015664:	b570      	push	{r4, r5, r6, lr}
 8015666:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8015668:	4605      	mov	r5, r0
 801566a:	b110      	cbz	r0, 8015672 <mbedtls_oid_get_pk_alg+0xe>
 801566c:	4c09      	ldr	r4, [pc, #36]	; (8015694 <mbedtls_oid_get_pk_alg+0x30>)
 801566e:	6820      	ldr	r0, [r4, #0]
 8015670:	b910      	cbnz	r0, 8015678 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8015672:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015676:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8015678:	686b      	ldr	r3, [r5, #4]
 801567a:	6862      	ldr	r2, [r4, #4]
 801567c:	429a      	cmp	r2, r3
 801567e:	d103      	bne.n	8015688 <mbedtls_oid_get_pk_alg+0x24>
 8015680:	68a9      	ldr	r1, [r5, #8]
 8015682:	f00c feef 	bl	8022464 <memcmp>
 8015686:	b108      	cbz	r0, 801568c <mbedtls_oid_get_pk_alg+0x28>
 8015688:	3414      	adds	r4, #20
 801568a:	e7f0      	b.n	801566e <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 801568c:	7c23      	ldrb	r3, [r4, #16]
 801568e:	7033      	strb	r3, [r6, #0]
 8015690:	e7f1      	b.n	8015676 <mbedtls_oid_get_pk_alg+0x12>
 8015692:	bf00      	nop
 8015694:	0802c500 	.word	0x0802c500

08015698 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 8015698:	b570      	push	{r4, r5, r6, lr}
 801569a:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 801569c:	4605      	mov	r5, r0
 801569e:	b110      	cbz	r0, 80156a6 <mbedtls_oid_get_ec_grp+0xe>
 80156a0:	4c09      	ldr	r4, [pc, #36]	; (80156c8 <mbedtls_oid_get_ec_grp+0x30>)
 80156a2:	6820      	ldr	r0, [r4, #0]
 80156a4:	b910      	cbnz	r0, 80156ac <mbedtls_oid_get_ec_grp+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80156a6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80156aa:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 80156ac:	686b      	ldr	r3, [r5, #4]
 80156ae:	6862      	ldr	r2, [r4, #4]
 80156b0:	429a      	cmp	r2, r3
 80156b2:	d103      	bne.n	80156bc <mbedtls_oid_get_ec_grp+0x24>
 80156b4:	68a9      	ldr	r1, [r5, #8]
 80156b6:	f00c fed5 	bl	8022464 <memcmp>
 80156ba:	b108      	cbz	r0, 80156c0 <mbedtls_oid_get_ec_grp+0x28>
 80156bc:	3414      	adds	r4, #20
 80156be:	e7f0      	b.n	80156a2 <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80156c0:	7c23      	ldrb	r3, [r4, #16]
 80156c2:	7033      	strb	r3, [r6, #0]
 80156c4:	e7f1      	b.n	80156aa <mbedtls_oid_get_ec_grp+0x12>
 80156c6:	bf00      	nop
 80156c8:	0802c550 	.word	0x0802c550

080156cc <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 80156cc:	b570      	push	{r4, r5, r6, lr}
 80156ce:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
 80156d0:	4605      	mov	r5, r0
 80156d2:	b110      	cbz	r0, 80156da <mbedtls_oid_get_md_alg+0xe>
 80156d4:	4c09      	ldr	r4, [pc, #36]	; (80156fc <mbedtls_oid_get_md_alg+0x30>)
 80156d6:	6820      	ldr	r0, [r4, #0]
 80156d8:	b910      	cbnz	r0, 80156e0 <mbedtls_oid_get_md_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 80156da:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80156de:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
 80156e0:	686b      	ldr	r3, [r5, #4]
 80156e2:	6862      	ldr	r2, [r4, #4]
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d103      	bne.n	80156f0 <mbedtls_oid_get_md_alg+0x24>
 80156e8:	68a9      	ldr	r1, [r5, #8]
 80156ea:	f00c febb 	bl	8022464 <memcmp>
 80156ee:	b108      	cbz	r0, 80156f4 <mbedtls_oid_get_md_alg+0x28>
 80156f0:	3414      	adds	r4, #20
 80156f2:	e7f0      	b.n	80156d6 <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 80156f4:	7c23      	ldrb	r3, [r4, #16]
 80156f6:	7033      	strb	r3, [r6, #0]
 80156f8:	e7f1      	b.n	80156de <mbedtls_oid_get_md_alg+0x12>
 80156fa:	bf00      	nop
 80156fc:	0802c604 	.word	0x0802c604

08015700 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8015700:	b530      	push	{r4, r5, lr}
 8015702:	4b08      	ldr	r3, [pc, #32]	; (8015724 <mbedtls_oid_get_oid_by_md+0x24>)
 8015704:	681c      	ldr	r4, [r3, #0]
 8015706:	b914      	cbnz	r4, 801570e <mbedtls_oid_get_oid_by_md+0xe>
 8015708:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 801570c:	e006      	b.n	801571c <mbedtls_oid_get_oid_by_md+0x1c>
 801570e:	7c1d      	ldrb	r5, [r3, #16]
 8015710:	4285      	cmp	r5, r0
 8015712:	d104      	bne.n	801571e <mbedtls_oid_get_oid_by_md+0x1e>
 8015714:	685b      	ldr	r3, [r3, #4]
 8015716:	600c      	str	r4, [r1, #0]
 8015718:	2000      	movs	r0, #0
 801571a:	6013      	str	r3, [r2, #0]
 801571c:	bd30      	pop	{r4, r5, pc}
 801571e:	3314      	adds	r3, #20
 8015720:	e7f0      	b.n	8015704 <mbedtls_oid_get_oid_by_md+0x4>
 8015722:	bf00      	nop
 8015724:	0802c604 	.word	0x0802c604

08015728 <pem_aes_decrypt>:
 * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
 */
static void pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,
                               unsigned char *buf, size_t buflen,
                               const unsigned char *pwd, size_t pwdlen )
{
 8015728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801572c:	b0eb      	sub	sp, #428	; 0x1ac
 801572e:	e9dd ab74 	ldrd	sl, fp, [sp, #464]	; 0x1d0
 8015732:	4607      	mov	r7, r0
    mbedtls_aes_context aes_ctx;
    unsigned char aes_key[32];

    mbedtls_aes_init( &aes_ctx );
 8015734:	a824      	add	r0, sp, #144	; 0x90
{
 8015736:	4699      	mov	r9, r3
 8015738:	460d      	mov	r5, r1
 801573a:	4690      	mov	r8, r2
    mbedtls_aes_init( &aes_ctx );
 801573c:	f7f7 ff80 	bl	800d640 <mbedtls_aes_init>
    mbedtls_md5_init( &md5_ctx );
 8015740:	a80e      	add	r0, sp, #56	; 0x38
 8015742:	f7ff fa51 	bl	8014be8 <mbedtls_md5_init>
    mbedtls_md5_starts( &md5_ctx );
 8015746:	a80e      	add	r0, sp, #56	; 0x38
 8015748:	f7ff fa62 	bl	8014c10 <mbedtls_md5_starts>
    mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
 801574c:	465a      	mov	r2, fp
 801574e:	4651      	mov	r1, sl
 8015750:	a80e      	add	r0, sp, #56	; 0x38
 8015752:	f7ff fdfe 	bl	8015352 <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 8015756:	ac02      	add	r4, sp, #8
    mbedtls_md5_update( &md5_ctx, iv,  8 );
 8015758:	2208      	movs	r2, #8
 801575a:	4639      	mov	r1, r7
 801575c:	a80e      	add	r0, sp, #56	; 0x38
 801575e:	f7ff fdf8 	bl	8015352 <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 8015762:	4621      	mov	r1, r4
 8015764:	a80e      	add	r0, sp, #56	; 0x38
 8015766:	f7ff fdf9 	bl	801535c <mbedtls_md5_finish>
        memcpy( key, md5sum, keylen );
 801576a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801576e:	ae06      	add	r6, sp, #24
    if( keylen <= 16 )
 8015770:	2d10      	cmp	r5, #16
        memcpy( key, md5sum, keylen );
 8015772:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
        mbedtls_md5_free( &md5_ctx );
 8015776:	a80e      	add	r0, sp, #56	; 0x38
    if( keylen <= 16 )
 8015778:	d120      	bne.n	80157bc <pem_aes_decrypt+0x94>
        mbedtls_md5_free( &md5_ctx );
 801577a:	f7ff fa39 	bl	8014bf0 <mbedtls_md5_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801577e:	2100      	movs	r1, #0
 8015780:	460a      	mov	r2, r1
 8015782:	1863      	adds	r3, r4, r1
 8015784:	3101      	adds	r1, #1
 8015786:	2911      	cmp	r1, #17
 8015788:	d116      	bne.n	80157b8 <pem_aes_decrypt+0x90>

    pem_pbkdf1( aes_key, keylen, aes_iv, pwd, pwdlen );

    mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 );
 801578a:	00ea      	lsls	r2, r5, #3
 801578c:	a906      	add	r1, sp, #24
 801578e:	a824      	add	r0, sp, #144	; 0x90
 8015790:	f7f8 f85a 	bl	800d848 <mbedtls_aes_setkey_dec>
    mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
 8015794:	463b      	mov	r3, r7
 8015796:	464a      	mov	r2, r9
 8015798:	2100      	movs	r1, #0
 801579a:	e9cd 8800 	strd	r8, r8, [sp]
 801579e:	a824      	add	r0, sp, #144	; 0x90
 80157a0:	f7f8 fc73 	bl	800e08a <mbedtls_aes_crypt_cbc>
                     aes_iv, buf, buf );

    mbedtls_aes_free( &aes_ctx );
 80157a4:	a824      	add	r0, sp, #144	; 0x90
 80157a6:	f7f7 ff50 	bl	800d64a <mbedtls_aes_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80157aa:	ab06      	add	r3, sp, #24
 80157ac:	2200      	movs	r2, #0
 80157ae:	3d01      	subs	r5, #1
 80157b0:	d22e      	bcs.n	8015810 <pem_aes_decrypt+0xe8>
    mbedtls_zeroize( aes_key, keylen );
}
 80157b2:	b06b      	add	sp, #428	; 0x1ac
 80157b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80157b8:	701a      	strb	r2, [r3, #0]
 80157ba:	e7e2      	b.n	8015782 <pem_aes_decrypt+0x5a>
    mbedtls_md5_starts( &md5_ctx );
 80157bc:	f7ff fa28 	bl	8014c10 <mbedtls_md5_starts>
    mbedtls_md5_update( &md5_ctx, md5sum,  16 );
 80157c0:	2210      	movs	r2, #16
 80157c2:	4621      	mov	r1, r4
 80157c4:	a80e      	add	r0, sp, #56	; 0x38
 80157c6:	f7ff fdc4 	bl	8015352 <mbedtls_md5_update>
    mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
 80157ca:	465a      	mov	r2, fp
 80157cc:	4651      	mov	r1, sl
 80157ce:	a80e      	add	r0, sp, #56	; 0x38
 80157d0:	f7ff fdbf 	bl	8015352 <mbedtls_md5_update>
    mbedtls_md5_update( &md5_ctx, iv,  8 );
 80157d4:	2208      	movs	r2, #8
 80157d6:	4639      	mov	r1, r7
 80157d8:	a80e      	add	r0, sp, #56	; 0x38
 80157da:	f7ff fdba 	bl	8015352 <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 80157de:	4621      	mov	r1, r4
 80157e0:	a80e      	add	r0, sp, #56	; 0x38
 80157e2:	f7ff fdbb 	bl	801535c <mbedtls_md5_finish>
    if( keylen < 32 )
 80157e6:	2d20      	cmp	r5, #32
        use_len = keylen - 16;
 80157e8:	bf14      	ite	ne
 80157ea:	f1a5 0210 	subne.w	r2, r5, #16
    use_len = 16;
 80157ee:	2210      	moveq	r2, #16
    memcpy( key + 16, md5sum, use_len );
 80157f0:	a902      	add	r1, sp, #8
 80157f2:	a80a      	add	r0, sp, #40	; 0x28
 80157f4:	f00c fe44 	bl	8022480 <memcpy>
    mbedtls_md5_free( &md5_ctx );
 80157f8:	a80e      	add	r0, sp, #56	; 0x38
 80157fa:	f7ff f9f9 	bl	8014bf0 <mbedtls_md5_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80157fe:	2100      	movs	r1, #0
 8015800:	460a      	mov	r2, r1
 8015802:	ab02      	add	r3, sp, #8
 8015804:	440b      	add	r3, r1
 8015806:	3101      	adds	r1, #1
 8015808:	2911      	cmp	r1, #17
 801580a:	d0be      	beq.n	801578a <pem_aes_decrypt+0x62>
 801580c:	701a      	strb	r2, [r3, #0]
 801580e:	e7f8      	b.n	8015802 <pem_aes_decrypt+0xda>
 8015810:	f803 2b01 	strb.w	r2, [r3], #1
 8015814:	e7cb      	b.n	80157ae <pem_aes_decrypt+0x86>

08015816 <mbedtls_pem_init>:
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 8015816:	2300      	movs	r3, #0
 8015818:	6003      	str	r3, [r0, #0]
 801581a:	6043      	str	r3, [r0, #4]
 801581c:	6083      	str	r3, [r0, #8]
}
 801581e:	4770      	bx	lr

08015820 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 8015820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015824:	b089      	sub	sp, #36	; 0x24
 8015826:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
 801582a:	460d      	mov	r5, r1
 801582c:	4693      	mov	fp, r2
 801582e:	469a      	mov	sl, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 8015830:	4606      	mov	r6, r0
 8015832:	2800      	cmp	r0, #0
 8015834:	f000 8126 	beq.w	8015a84 <mbedtls_pem_read_buffer+0x264>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 8015838:	4618      	mov	r0, r3
 801583a:	f00e f936 	bl	8023aaa <strstr>

    if( s1 == NULL )
 801583e:	4604      	mov	r4, r0
 8015840:	2800      	cmp	r0, #0
 8015842:	f000 8121 	beq.w	8015a88 <mbedtls_pem_read_buffer+0x268>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 8015846:	4659      	mov	r1, fp
 8015848:	4650      	mov	r0, sl
 801584a:	f00e f92e 	bl	8023aaa <strstr>

    if( s2 == NULL || s2 <= s1 )
 801584e:	4681      	mov	r9, r0
 8015850:	2800      	cmp	r0, #0
 8015852:	f000 8119 	beq.w	8015a88 <mbedtls_pem_read_buffer+0x268>
 8015856:	4284      	cmp	r4, r0
 8015858:	f080 8116 	bcs.w	8015a88 <mbedtls_pem_read_buffer+0x268>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 801585c:	4628      	mov	r0, r5
 801585e:	f7ea fcc1 	bl	80001e4 <strlen>
    if( *s1 == ' '  ) s1++;
 8015862:	5c23      	ldrb	r3, [r4, r0]
    s1 += strlen( header );
 8015864:	1825      	adds	r5, r4, r0
    if( *s1 == ' '  ) s1++;
 8015866:	2b20      	cmp	r3, #32
 8015868:	bf08      	it	eq
 801586a:	3501      	addeq	r5, #1
    if( *s1 == '\r' ) s1++;
 801586c:	782b      	ldrb	r3, [r5, #0]
 801586e:	2b0d      	cmp	r3, #13
 8015870:	bf08      	it	eq
 8015872:	3501      	addeq	r5, #1
    if( *s1 == '\n' ) s1++;
 8015874:	782b      	ldrb	r3, [r5, #0]
 8015876:	2b0a      	cmp	r3, #10
 8015878:	f040 8106 	bne.w	8015a88 <mbedtls_pem_read_buffer+0x268>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 801587c:	4658      	mov	r0, fp
 801587e:	f7ea fcb1 	bl	80001e4 <strlen>
    if( *end == ' '  ) end++;
 8015882:	f819 3000 	ldrb.w	r3, [r9, r0]
    end += strlen( footer );
 8015886:	eb09 0200 	add.w	r2, r9, r0
    if( *end == ' '  ) end++;
 801588a:	2b20      	cmp	r3, #32
 801588c:	bf08      	it	eq
 801588e:	3201      	addeq	r2, #1
    if( *s1 == '\n' ) s1++;
 8015890:	1c6c      	adds	r4, r5, #1
    if( *end == '\r' ) end++;
 8015892:	7813      	ldrb	r3, [r2, #0]
 8015894:	2b0d      	cmp	r3, #13
 8015896:	bf08      	it	eq
 8015898:	3201      	addeq	r2, #1
    if( *end == '\n' ) end++;
 801589a:	7813      	ldrb	r3, [r2, #0]
 801589c:	2b0a      	cmp	r3, #10
 801589e:	bf08      	it	eq
 80158a0:	3201      	addeq	r2, #1
    *use_len = end - data;
 80158a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80158a4:	eba2 020a 	sub.w	r2, r2, sl
 80158a8:	601a      	str	r2, [r3, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 80158aa:	eba9 0304 	sub.w	r3, r9, r4
 80158ae:	2b15      	cmp	r3, #21
 80158b0:	f340 80ab 	ble.w	8015a0a <mbedtls_pem_read_buffer+0x1ea>
 80158b4:	4978      	ldr	r1, [pc, #480]	; (8015a98 <mbedtls_pem_read_buffer+0x278>)
 80158b6:	2216      	movs	r2, #22
 80158b8:	4620      	mov	r0, r4
 80158ba:	f00c fdd3 	bl	8022464 <memcmp>
 80158be:	2800      	cmp	r0, #0
 80158c0:	f040 80a3 	bne.w	8015a0a <mbedtls_pem_read_buffer+0x1ea>
#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
        enc++;

        s1 += 22;
        if( *s1 == '\r' ) s1++;
 80158c4:	7deb      	ldrb	r3, [r5, #23]
 80158c6:	2b0d      	cmp	r3, #13
 80158c8:	bf0a      	itet	eq
 80158ca:	7e2b      	ldrbeq	r3, [r5, #24]
        s1 += 22;
 80158cc:	f105 0417 	addne.w	r4, r5, #23
        if( *s1 == '\r' ) s1++;
 80158d0:	f105 0418 	addeq.w	r4, r5, #24
        if( *s1 == '\n' ) s1++;
 80158d4:	2b0a      	cmp	r3, #10
 80158d6:	d004      	beq.n	80158e2 <mbedtls_pem_read_buffer+0xc2>
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
 80158d8:	4c70      	ldr	r4, [pc, #448]	; (8015a9c <mbedtls_pem_read_buffer+0x27c>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 80158da:	4620      	mov	r0, r4
 80158dc:	b009      	add	sp, #36	; 0x24
 80158de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *s1 == '\n' ) s1++;
 80158e2:	1c65      	adds	r5, r4, #1
        if( s2 - s1 >= 14 && memcmp( s1, "DEK-Info: AES-", 14 ) == 0 )
 80158e4:	eba9 0a05 	sub.w	sl, r9, r5
 80158e8:	f1ba 0f0d 	cmp.w	sl, #13
 80158ec:	f340 80ce 	ble.w	8015a8c <mbedtls_pem_read_buffer+0x26c>
 80158f0:	496b      	ldr	r1, [pc, #428]	; (8015aa0 <mbedtls_pem_read_buffer+0x280>)
 80158f2:	220e      	movs	r2, #14
 80158f4:	4628      	mov	r0, r5
 80158f6:	f00c fdb5 	bl	8022464 <memcmp>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	f040 80c6 	bne.w	8015a8c <mbedtls_pem_read_buffer+0x26c>
            if( s2 - s1 < 22 )
 8015900:	f1ba 0f15 	cmp.w	sl, #21
 8015904:	f340 80c2 	ble.w	8015a8c <mbedtls_pem_read_buffer+0x26c>
            else if( memcmp( s1, "DEK-Info: AES-128-CBC,", 22 ) == 0 )
 8015908:	4966      	ldr	r1, [pc, #408]	; (8015aa4 <mbedtls_pem_read_buffer+0x284>)
 801590a:	2216      	movs	r2, #22
 801590c:	4628      	mov	r0, r5
 801590e:	f00c fda9 	bl	8022464 <memcmp>
 8015912:	b1b0      	cbz	r0, 8015942 <mbedtls_pem_read_buffer+0x122>
            else if( memcmp( s1, "DEK-Info: AES-192-CBC,", 22 ) == 0 )
 8015914:	4964      	ldr	r1, [pc, #400]	; (8015aa8 <mbedtls_pem_read_buffer+0x288>)
 8015916:	2216      	movs	r2, #22
 8015918:	4628      	mov	r0, r5
 801591a:	f00c fda3 	bl	8022464 <memcmp>
 801591e:	b190      	cbz	r0, 8015946 <mbedtls_pem_read_buffer+0x126>
            else if( memcmp( s1, "DEK-Info: AES-256-CBC,", 22 ) == 0 )
 8015920:	4962      	ldr	r1, [pc, #392]	; (8015aac <mbedtls_pem_read_buffer+0x28c>)
 8015922:	2216      	movs	r2, #22
 8015924:	4628      	mov	r0, r5
 8015926:	f00c fd9d 	bl	8022464 <memcmp>
 801592a:	2800      	cmp	r0, #0
 801592c:	f040 80ae 	bne.w	8015a8c <mbedtls_pem_read_buffer+0x26c>
                enc_alg = MBEDTLS_CIPHER_AES_256_CBC;
 8015930:	2507      	movs	r5, #7
            s1 += 22;
 8015932:	f104 0317 	add.w	r3, r4, #23
            if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )
 8015936:	eba9 0303 	sub.w	r3, r9, r3
 801593a:	2b1f      	cmp	r3, #31
 801593c:	dc05      	bgt.n	801594a <mbedtls_pem_read_buffer+0x12a>
                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
 801593e:	4c5c      	ldr	r4, [pc, #368]	; (8015ab0 <mbedtls_pem_read_buffer+0x290>)
 8015940:	e7cb      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
                enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
 8015942:	2505      	movs	r5, #5
 8015944:	e7f5      	b.n	8015932 <mbedtls_pem_read_buffer+0x112>
                enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
 8015946:	2506      	movs	r5, #6
 8015948:	e7f3      	b.n	8015932 <mbedtls_pem_read_buffer+0x112>
    memset( iv, 0, iv_len );
 801594a:	f10d 0a10 	add.w	sl, sp, #16
 801594e:	2210      	movs	r2, #16
 8015950:	2100      	movs	r1, #0
 8015952:	4650      	mov	r0, sl
 8015954:	f00c fdbc 	bl	80224d0 <memset>
    for( i = 0; i < iv_len * 2; i++, s++ )
 8015958:	f104 0016 	add.w	r0, r4, #22
 801595c:	2200      	movs	r2, #0
        if( *s >= '0' && *s <= '9' ) j = *s - '0'; else
 801595e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8015962:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015966:	fa5f fc83 	uxtb.w	ip, r3
 801596a:	f1bc 0f09 	cmp.w	ip, #9
 801596e:	d905      	bls.n	801597c <mbedtls_pem_read_buffer+0x15c>
        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
 8015970:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8015974:	2b05      	cmp	r3, #5
 8015976:	d814      	bhi.n	80159a2 <mbedtls_pem_read_buffer+0x182>
 8015978:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 801597c:	ea4f 0c52 	mov.w	ip, r2, lsr #1
        k = ( ( i & 1 ) != 0 ) ? j : j << 4;
 8015980:	07d1      	lsls	r1, r2, #31
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 8015982:	f81a 100c 	ldrb.w	r1, [sl, ip]
        k = ( ( i & 1 ) != 0 ) ? j : j << 4;
 8015986:	bf58      	it	pl
 8015988:	011b      	lslpl	r3, r3, #4
    for( i = 0; i < iv_len * 2; i++, s++ )
 801598a:	3201      	adds	r2, #1
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 801598c:	430b      	orrs	r3, r1
    for( i = 0; i < iv_len * 2; i++, s++ )
 801598e:	2a20      	cmp	r2, #32
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 8015990:	f80a 300c 	strb.w	r3, [sl, ip]
    for( i = 0; i < iv_len * 2; i++, s++ )
 8015994:	d1e3      	bne.n	801595e <mbedtls_pem_read_buffer+0x13e>
        if( *s1 == '\r' ) s1++;
 8015996:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801599a:	2b0d      	cmp	r3, #13
 801599c:	d008      	beq.n	80159b0 <mbedtls_pem_read_buffer+0x190>
            s1 += 32;
 801599e:	3437      	adds	r4, #55	; 0x37
 80159a0:	e007      	b.n	80159b2 <mbedtls_pem_read_buffer+0x192>
        if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else
 80159a2:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80159a6:	2b05      	cmp	r3, #5
 80159a8:	d8c9      	bhi.n	801593e <mbedtls_pem_read_buffer+0x11e>
 80159aa:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
 80159ae:	e7e5      	b.n	801597c <mbedtls_pem_read_buffer+0x15c>
        if( *s1 == '\r' ) s1++;
 80159b0:	3438      	adds	r4, #56	; 0x38
        if( *s1 == '\n' ) s1++;
 80159b2:	7823      	ldrb	r3, [r4, #0]
 80159b4:	2b0a      	cmp	r3, #10
 80159b6:	d18f      	bne.n	80158d8 <mbedtls_pem_read_buffer+0xb8>
 80159b8:	3401      	adds	r4, #1
        enc++;
 80159ba:	f04f 0a01 	mov.w	sl, #1
    if( s1 >= s2 )
 80159be:	454c      	cmp	r4, r9
 80159c0:	d28a      	bcs.n	80158d8 <mbedtls_pem_read_buffer+0xb8>
    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 80159c2:	2100      	movs	r1, #0
 80159c4:	eba9 0904 	sub.w	r9, r9, r4
 80159c8:	f8cd 9000 	str.w	r9, [sp]
 80159cc:	4623      	mov	r3, r4
 80159ce:	aa03      	add	r2, sp, #12
 80159d0:	4608      	mov	r0, r1
 80159d2:	f7f8 fddf 	bl	800e594 <mbedtls_base64_decode>
    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 80159d6:	302c      	adds	r0, #44	; 0x2c
 80159d8:	d05a      	beq.n	8015a90 <mbedtls_pem_read_buffer+0x270>
    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 80159da:	4b36      	ldr	r3, [pc, #216]	; (8015ab4 <mbedtls_pem_read_buffer+0x294>)
 80159dc:	9903      	ldr	r1, [sp, #12]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	2001      	movs	r0, #1
 80159e2:	4798      	blx	r3
 80159e4:	4683      	mov	fp, r0
 80159e6:	2800      	cmp	r0, #0
 80159e8:	d054      	beq.n	8015a94 <mbedtls_pem_read_buffer+0x274>
    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 80159ea:	4623      	mov	r3, r4
 80159ec:	9903      	ldr	r1, [sp, #12]
 80159ee:	f8cd 9000 	str.w	r9, [sp]
 80159f2:	aa03      	add	r2, sp, #12
 80159f4:	f7f8 fdce 	bl	800e594 <mbedtls_base64_decode>
 80159f8:	4604      	mov	r4, r0
 80159fa:	b148      	cbz	r0, 8015a10 <mbedtls_pem_read_buffer+0x1f0>
        mbedtls_free( buf );
 80159fc:	4b2e      	ldr	r3, [pc, #184]	; (8015ab8 <mbedtls_pem_read_buffer+0x298>)
 80159fe:	4658      	mov	r0, fp
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	4798      	blx	r3
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 8015a04:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100
 8015a08:	e767      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
    mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;
 8015a0a:	2500      	movs	r5, #0
    enc = 0;
 8015a0c:	46aa      	mov	sl, r5
 8015a0e:	e7d6      	b.n	80159be <mbedtls_pem_read_buffer+0x19e>
    if( enc != 0 )
 8015a10:	f1ba 0f00 	cmp.w	sl, #0
 8015a14:	d031      	beq.n	8015a7a <mbedtls_pem_read_buffer+0x25a>
        if( pwd == NULL )
 8015a16:	b92f      	cbnz	r7, 8015a24 <mbedtls_pem_read_buffer+0x204>
            mbedtls_free( buf );
 8015a18:	4b27      	ldr	r3, [pc, #156]	; (8015ab8 <mbedtls_pem_read_buffer+0x298>)
            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
 8015a1a:	4c28      	ldr	r4, [pc, #160]	; (8015abc <mbedtls_pem_read_buffer+0x29c>)
            mbedtls_free( buf );
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	4658      	mov	r0, fp
 8015a20:	4798      	blx	r3
            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
 8015a22:	e75a      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
        if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )
 8015a24:	2d05      	cmp	r5, #5
 8015a26:	9b03      	ldr	r3, [sp, #12]
 8015a28:	d118      	bne.n	8015a5c <mbedtls_pem_read_buffer+0x23c>
            pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );
 8015a2a:	e9cd 7800 	strd	r7, r8, [sp]
 8015a2e:	2110      	movs	r1, #16
 8015a30:	465a      	mov	r2, fp
 8015a32:	eb0d 0001 	add.w	r0, sp, r1
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 8015a36:	f7ff fe77 	bl	8015728 <pem_aes_decrypt>
        if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )
 8015a3a:	9b03      	ldr	r3, [sp, #12]
 8015a3c:	2b02      	cmp	r3, #2
 8015a3e:	d907      	bls.n	8015a50 <mbedtls_pem_read_buffer+0x230>
 8015a40:	f89b 3000 	ldrb.w	r3, [fp]
 8015a44:	2b30      	cmp	r3, #48	; 0x30
 8015a46:	d103      	bne.n	8015a50 <mbedtls_pem_read_buffer+0x230>
 8015a48:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8015a4c:	2b83      	cmp	r3, #131	; 0x83
 8015a4e:	d914      	bls.n	8015a7a <mbedtls_pem_read_buffer+0x25a>
            mbedtls_free( buf );
 8015a50:	4b19      	ldr	r3, [pc, #100]	; (8015ab8 <mbedtls_pem_read_buffer+0x298>)
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
 8015a52:	4c1b      	ldr	r4, [pc, #108]	; (8015ac0 <mbedtls_pem_read_buffer+0x2a0>)
            mbedtls_free( buf );
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	4658      	mov	r0, fp
 8015a58:	4798      	blx	r3
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
 8015a5a:	e73e      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
        else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )
 8015a5c:	2d06      	cmp	r5, #6
 8015a5e:	d105      	bne.n	8015a6c <mbedtls_pem_read_buffer+0x24c>
            pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );
 8015a60:	e9cd 7800 	strd	r7, r8, [sp]
 8015a64:	465a      	mov	r2, fp
 8015a66:	2118      	movs	r1, #24
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 8015a68:	a804      	add	r0, sp, #16
 8015a6a:	e7e4      	b.n	8015a36 <mbedtls_pem_read_buffer+0x216>
        else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )
 8015a6c:	2d07      	cmp	r5, #7
 8015a6e:	d1e4      	bne.n	8015a3a <mbedtls_pem_read_buffer+0x21a>
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 8015a70:	e9cd 7800 	strd	r7, r8, [sp]
 8015a74:	465a      	mov	r2, fp
 8015a76:	2120      	movs	r1, #32
 8015a78:	e7f6      	b.n	8015a68 <mbedtls_pem_read_buffer+0x248>
    ctx->buflen = len;
 8015a7a:	9b03      	ldr	r3, [sp, #12]
    ctx->buf = buf;
 8015a7c:	f8c6 b000 	str.w	fp, [r6]
    ctx->buflen = len;
 8015a80:	6073      	str	r3, [r6, #4]
    return( 0 );
 8015a82:	e72a      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 8015a84:	4c0f      	ldr	r4, [pc, #60]	; (8015ac4 <mbedtls_pem_read_buffer+0x2a4>)
 8015a86:	e728      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 8015a88:	4c0f      	ldr	r4, [pc, #60]	; (8015ac8 <mbedtls_pem_read_buffer+0x2a8>)
 8015a8a:	e726      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
            return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
 8015a8c:	4c0f      	ldr	r4, [pc, #60]	; (8015acc <mbedtls_pem_read_buffer+0x2ac>)
 8015a8e:	e724      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 8015a90:	4c0f      	ldr	r4, [pc, #60]	; (8015ad0 <mbedtls_pem_read_buffer+0x2b0>)
 8015a92:	e722      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 8015a94:	4c0f      	ldr	r4, [pc, #60]	; (8015ad4 <mbedtls_pem_read_buffer+0x2b4>)
 8015a96:	e720      	b.n	80158da <mbedtls_pem_read_buffer+0xba>
 8015a98:	08030b6e 	.word	0x08030b6e
 8015a9c:	ffffef00 	.word	0xffffef00
 8015aa0:	08030b85 	.word	0x08030b85
 8015aa4:	08030b94 	.word	0x08030b94
 8015aa8:	08030bab 	.word	0x08030bab
 8015aac:	08030bc2 	.word	0x08030bc2
 8015ab0:	ffffee00 	.word	0xffffee00
 8015ab4:	200005a0 	.word	0x200005a0
 8015ab8:	200005a4 	.word	0x200005a4
 8015abc:	ffffed00 	.word	0xffffed00
 8015ac0:	ffffec80 	.word	0xffffec80
 8015ac4:	ffffeb80 	.word	0xffffeb80
 8015ac8:	ffffef80 	.word	0xffffef80
 8015acc:	ffffed80 	.word	0xffffed80
 8015ad0:	ffffeed4 	.word	0xffffeed4
 8015ad4:	ffffee80 	.word	0xffffee80

08015ad8 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 8015ad8:	b538      	push	{r3, r4, r5, lr}
    mbedtls_free( ctx->buf );
 8015ada:	4d08      	ldr	r5, [pc, #32]	; (8015afc <mbedtls_pem_free+0x24>)
{
 8015adc:	4604      	mov	r4, r0
    mbedtls_free( ctx->buf );
 8015ade:	682b      	ldr	r3, [r5, #0]
 8015ae0:	6800      	ldr	r0, [r0, #0]
 8015ae2:	4798      	blx	r3
    mbedtls_free( ctx->info );
 8015ae4:	682b      	ldr	r3, [r5, #0]
 8015ae6:	68a0      	ldr	r0, [r4, #8]
 8015ae8:	4798      	blx	r3
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015aea:	f104 030c 	add.w	r3, r4, #12
 8015aee:	2200      	movs	r2, #0
 8015af0:	429c      	cmp	r4, r3
 8015af2:	d100      	bne.n	8015af6 <mbedtls_pem_free+0x1e>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
}
 8015af4:	bd38      	pop	{r3, r4, r5, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015af6:	f804 2b01 	strb.w	r2, [r4], #1
 8015afa:	e7f9      	b.n	8015af0 <mbedtls_pem_free+0x18>
 8015afc:	200005a4 	.word	0x200005a4

08015b00 <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 8015b00:	b110      	cbz	r0, 8015b08 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 8015b02:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
 8015b04:	e9c0 3300 	strd	r3, r3, [r0]
}
 8015b08:	4770      	bx	lr

08015b0a <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 8015b0a:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	b148      	cbz	r0, 8015b24 <mbedtls_pk_free+0x1a>
 8015b10:	6803      	ldr	r3, [r0, #0]
 8015b12:	b13b      	cbz	r3, 8015b24 <mbedtls_pk_free+0x1a>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 8015b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b16:	6840      	ldr	r0, [r0, #4]
 8015b18:	4798      	blx	r3
static void mbedtls_zeroize( void *v, size_t n ) {
 8015b1a:	f104 0308 	add.w	r3, r4, #8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015b1e:	2200      	movs	r2, #0
 8015b20:	429c      	cmp	r4, r3
 8015b22:	d100      	bne.n	8015b26 <mbedtls_pk_free+0x1c>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pk_context ) );
}
 8015b24:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015b26:	f804 2b01 	strb.w	r2, [r4], #1
 8015b2a:	e7f9      	b.n	8015b20 <mbedtls_pk_free+0x16>

08015b2c <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 8015b2c:	3801      	subs	r0, #1
 8015b2e:	b2c0      	uxtb	r0, r0
 8015b30:	2803      	cmp	r0, #3
 8015b32:	bf9a      	itte	ls
 8015b34:	4b02      	ldrls	r3, [pc, #8]	; (8015b40 <mbedtls_pk_info_from_type+0x14>)
 8015b36:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 8015b3a:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 8015b3c:	4770      	bx	lr
 8015b3e:	bf00      	nop
 8015b40:	0802c69c 	.word	0x0802c69c

08015b44 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 8015b44:	b570      	push	{r4, r5, r6, lr}
 8015b46:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 8015b48:	4605      	mov	r5, r0
 8015b4a:	b148      	cbz	r0, 8015b60 <mbedtls_pk_setup+0x1c>
 8015b4c:	b141      	cbz	r1, 8015b60 <mbedtls_pk_setup+0x1c>
 8015b4e:	6804      	ldr	r4, [r0, #0]
 8015b50:	b934      	cbnz	r4, 8015b60 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 8015b52:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8015b54:	4798      	blx	r3
 8015b56:	6068      	str	r0, [r5, #4]
 8015b58:	b120      	cbz	r0, 8015b64 <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 8015b5a:	602e      	str	r6, [r5, #0]

    return( 0 );
 8015b5c:	4620      	mov	r0, r4
}
 8015b5e:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015b60:	4801      	ldr	r0, [pc, #4]	; (8015b68 <mbedtls_pk_setup+0x24>)
 8015b62:	e7fc      	b.n	8015b5e <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 8015b64:	4801      	ldr	r0, [pc, #4]	; (8015b6c <mbedtls_pk_setup+0x28>)
 8015b66:	e7fa      	b.n	8015b5e <mbedtls_pk_setup+0x1a>
 8015b68:	ffffc180 	.word	0xffffc180
 8015b6c:	ffffc080 	.word	0xffffc080

08015b70 <mbedtls_pk_can_do>:

/*
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
 8015b70:	4603      	mov	r3, r0
 8015b72:	4608      	mov	r0, r1
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 8015b74:	b11b      	cbz	r3, 8015b7e <mbedtls_pk_can_do+0xe>
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	b10b      	cbz	r3, 8015b7e <mbedtls_pk_can_do+0xe>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	4718      	bx	r3
}
 8015b7e:	2000      	movs	r0, #0
 8015b80:	4770      	bx	lr
	...

08015b84 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 8015b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b88:	460d      	mov	r5, r1
 8015b8a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8015b8e:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015b90:	4604      	mov	r4, r0
 8015b92:	b910      	cbnz	r0, 8015b9a <mbedtls_pk_verify+0x16>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015b94:	480e      	ldr	r0, [pc, #56]	; (8015bd0 <mbedtls_pk_verify+0x4c>)
    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
}
 8015b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015b9a:	6802      	ldr	r2, [r0, #0]
 8015b9c:	2a00      	cmp	r2, #0
 8015b9e:	d0f9      	beq.n	8015b94 <mbedtls_pk_verify+0x10>
    if( *hash_len != 0 )
 8015ba0:	b93b      	cbnz	r3, 8015bb2 <mbedtls_pk_verify+0x2e>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8015ba2:	4608      	mov	r0, r1
 8015ba4:	f7fe feca 	bl	801493c <mbedtls_md_info_from_type>
 8015ba8:	2800      	cmp	r0, #0
 8015baa:	d0f3      	beq.n	8015b94 <mbedtls_pk_verify+0x10>
    *hash_len = mbedtls_md_get_size( md_info );
 8015bac:	f7ff f816 	bl	8014bdc <mbedtls_md_get_size>
 8015bb0:	4603      	mov	r3, r0
    if( ctx->pk_info->verify_func == NULL )
 8015bb2:	6822      	ldr	r2, [r4, #0]
 8015bb4:	6917      	ldr	r7, [r2, #16]
 8015bb6:	b147      	cbz	r7, 8015bca <mbedtls_pk_verify+0x46>
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015bb8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8015bbc:	4632      	mov	r2, r6
 8015bbe:	6860      	ldr	r0, [r4, #4]
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	46bc      	mov	ip, r7
}
 8015bc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015bc8:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015bca:	4802      	ldr	r0, [pc, #8]	; (8015bd4 <mbedtls_pk_verify+0x50>)
 8015bcc:	e7e3      	b.n	8015b96 <mbedtls_pk_verify+0x12>
 8015bce:	bf00      	nop
 8015bd0:	ffffc180 	.word	0xffffc180
 8015bd4:	ffffc100 	.word	0xffffc100

08015bd8 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8015bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bdc:	460d      	mov	r5, r1
 8015bde:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 8015be2:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
 8015be6:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015be8:	4604      	mov	r4, r0
 8015bea:	b910      	cbnz	r0, 8015bf2 <mbedtls_pk_sign+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015bec:	4810      	ldr	r0, [pc, #64]	; (8015c30 <mbedtls_pk_sign+0x58>)
    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
}
 8015bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015bf2:	6802      	ldr	r2, [r0, #0]
 8015bf4:	2a00      	cmp	r2, #0
 8015bf6:	d0f9      	beq.n	8015bec <mbedtls_pk_sign+0x14>
    if( *hash_len != 0 )
 8015bf8:	b93b      	cbnz	r3, 8015c0a <mbedtls_pk_sign+0x32>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8015bfa:	4608      	mov	r0, r1
 8015bfc:	f7fe fe9e 	bl	801493c <mbedtls_md_info_from_type>
 8015c00:	2800      	cmp	r0, #0
 8015c02:	d0f3      	beq.n	8015bec <mbedtls_pk_sign+0x14>
    *hash_len = mbedtls_md_get_size( md_info );
 8015c04:	f7fe ffea 	bl	8014bdc <mbedtls_md_get_size>
 8015c08:	4603      	mov	r3, r0
    if( ctx->pk_info->sign_func == NULL )
 8015c0a:	6822      	ldr	r2, [r4, #0]
 8015c0c:	f8d2 e014 	ldr.w	lr, [r2, #20]
 8015c10:	f1be 0f00 	cmp.w	lr, #0
 8015c14:	d00a      	beq.n	8015c2c <mbedtls_pk_sign+0x54>
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015c16:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8015c1a:	e9cd 7808 	strd	r7, r8, [sp, #32]
 8015c1e:	4632      	mov	r2, r6
 8015c20:	6860      	ldr	r0, [r4, #4]
 8015c22:	4629      	mov	r1, r5
 8015c24:	46f4      	mov	ip, lr
}
 8015c26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015c2a:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015c2c:	4801      	ldr	r0, [pc, #4]	; (8015c34 <mbedtls_pk_sign+0x5c>)
 8015c2e:	e7de      	b.n	8015bee <mbedtls_pk_sign+0x16>
 8015c30:	ffffc180 	.word	0xffffc180
 8015c34:	ffffc100 	.word	0xffffc100

08015c38 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8015c38:	b410      	push	{r4}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015c3a:	b140      	cbz	r0, 8015c4e <mbedtls_pk_encrypt+0x16>
 8015c3c:	6804      	ldr	r4, [r0, #0]
 8015c3e:	b134      	cbz	r4, 8015c4e <mbedtls_pk_encrypt+0x16>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 8015c40:	69e4      	ldr	r4, [r4, #28]
 8015c42:	b144      	cbz	r4, 8015c56 <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8015c44:	46a4      	mov	ip, r4
 8015c46:	6840      	ldr	r0, [r0, #4]
                output, olen, osize, f_rng, p_rng ) );
}
 8015c48:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8015c4c:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015c4e:	4803      	ldr	r0, [pc, #12]	; (8015c5c <mbedtls_pk_encrypt+0x24>)
}
 8015c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c54:	4770      	bx	lr
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015c56:	4802      	ldr	r0, [pc, #8]	; (8015c60 <mbedtls_pk_encrypt+0x28>)
 8015c58:	e7fa      	b.n	8015c50 <mbedtls_pk_encrypt+0x18>
 8015c5a:	bf00      	nop
 8015c5c:	ffffc180 	.word	0xffffc180
 8015c60:	ffffc100 	.word	0xffffc100

08015c64 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8015c64:	b120      	cbz	r0, 8015c70 <mbedtls_pk_get_bitlen+0xc>
 8015c66:	6803      	ldr	r3, [r0, #0]
 8015c68:	b113      	cbz	r3, 8015c70 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 8015c6a:	689b      	ldr	r3, [r3, #8]
 8015c6c:	6840      	ldr	r0, [r0, #4]
 8015c6e:	4718      	bx	r3
}
 8015c70:	2000      	movs	r0, #0
 8015c72:	4770      	bx	lr

08015c74 <mbedtls_pk_verify_ext>:
{
 8015c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c78:	b087      	sub	sp, #28
 8015c7a:	e9dd 9b10 	ldrd	r9, fp, [sp, #64]	; 0x40
 8015c7e:	e9dd a812 	ldrd	sl, r8, [sp, #72]	; 0x48
 8015c82:	4607      	mov	r7, r0
 8015c84:	460c      	mov	r4, r1
 8015c86:	461e      	mov	r6, r3
    if( ctx == NULL || ctx->pk_info == NULL )
 8015c88:	4615      	mov	r5, r2
 8015c8a:	b922      	cbnz	r2, 8015c96 <mbedtls_pk_verify_ext+0x22>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015c8c:	4c22      	ldr	r4, [pc, #136]	; (8015d18 <mbedtls_pk_verify_ext+0xa4>)
}
 8015c8e:	4620      	mov	r0, r4
 8015c90:	b007      	add	sp, #28
 8015c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015c96:	6813      	ldr	r3, [r2, #0]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d0f7      	beq.n	8015c8c <mbedtls_pk_verify_ext+0x18>
    if( ! mbedtls_pk_can_do( ctx, type ) )
 8015c9c:	4601      	mov	r1, r0
 8015c9e:	4610      	mov	r0, r2
 8015ca0:	f7ff ff66 	bl	8015b70 <mbedtls_pk_can_do>
 8015ca4:	b398      	cbz	r0, 8015d0e <mbedtls_pk_verify_ext+0x9a>
    if( type == MBEDTLS_PK_RSASSA_PSS )
 8015ca6:	2f06      	cmp	r7, #6
 8015ca8:	d124      	bne.n	8015cf4 <mbedtls_pk_verify_ext+0x80>
        if( options == NULL )
 8015caa:	2c00      	cmp	r4, #0
 8015cac:	d0ee      	beq.n	8015c8c <mbedtls_pk_verify_ext+0x18>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 8015cae:	4628      	mov	r0, r5
 8015cb0:	f7ff ffd8 	bl	8015c64 <mbedtls_pk_get_bitlen>
 8015cb4:	3007      	adds	r0, #7
        if( sig_len < mbedtls_pk_get_len( ctx ) )
 8015cb6:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
 8015cba:	d32a      	bcc.n	8015d12 <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
 8015cbc:	f8cd a014 	str.w	sl, [sp, #20]
 8015cc0:	6863      	ldr	r3, [r4, #4]
 8015cc2:	9304      	str	r3, [sp, #16]
 8015cc4:	7823      	ldrb	r3, [r4, #0]
 8015cc6:	e9cd 6b00 	strd	r6, fp, [sp]
 8015cca:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8015cce:	2300      	movs	r3, #0
 8015cd0:	6868      	ldr	r0, [r5, #4]
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	4619      	mov	r1, r3
 8015cd6:	f001 fcb3 	bl	8017640 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 8015cda:	4604      	mov	r4, r0
 8015cdc:	2800      	cmp	r0, #0
 8015cde:	d1d6      	bne.n	8015c8e <mbedtls_pk_verify_ext+0x1a>
 8015ce0:	4628      	mov	r0, r5
 8015ce2:	f7ff ffbf 	bl	8015c64 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015ce6:	4b0d      	ldr	r3, [pc, #52]	; (8015d1c <mbedtls_pk_verify_ext+0xa8>)
 8015ce8:	3007      	adds	r0, #7
 8015cea:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
 8015cee:	bf88      	it	hi
 8015cf0:	461c      	movhi	r4, r3
 8015cf2:	e7cc      	b.n	8015c8e <mbedtls_pk_verify_ext+0x1a>
    if( options != NULL )
 8015cf4:	2c00      	cmp	r4, #0
 8015cf6:	d1c9      	bne.n	8015c8c <mbedtls_pk_verify_ext+0x18>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8015cf8:	465b      	mov	r3, fp
 8015cfa:	464a      	mov	r2, r9
 8015cfc:	4631      	mov	r1, r6
 8015cfe:	4628      	mov	r0, r5
 8015d00:	e9cd a810 	strd	sl, r8, [sp, #64]	; 0x40
}
 8015d04:	b007      	add	sp, #28
 8015d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8015d0a:	f7ff bf3b 	b.w	8015b84 <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015d0e:	4c04      	ldr	r4, [pc, #16]	; (8015d20 <mbedtls_pk_verify_ext+0xac>)
 8015d10:	e7bd      	b.n	8015c8e <mbedtls_pk_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8015d12:	4c04      	ldr	r4, [pc, #16]	; (8015d24 <mbedtls_pk_verify_ext+0xb0>)
 8015d14:	e7bb      	b.n	8015c8e <mbedtls_pk_verify_ext+0x1a>
 8015d16:	bf00      	nop
 8015d18:	ffffc180 	.word	0xffffc180
 8015d1c:	ffffc700 	.word	0xffffc700
 8015d20:	ffffc100 	.word	0xffffc100
 8015d24:	ffffbc80 	.word	0xffffbc80

08015d28 <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 8015d28:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015d2a:	b138      	cbz	r0, 8015d3c <mbedtls_pk_debug+0x14>
 8015d2c:	6803      	ldr	r3, [r0, #0]
 8015d2e:	b12b      	cbz	r3, 8015d3c <mbedtls_pk_debug+0x14>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->debug_func == NULL )
 8015d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d32:	b12b      	cbz	r3, 8015d40 <mbedtls_pk_debug+0x18>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 8015d34:	6840      	ldr	r0, [r0, #4]
 8015d36:	4798      	blx	r3
    return( 0 );
 8015d38:	2000      	movs	r0, #0
}
 8015d3a:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015d3c:	4801      	ldr	r0, [pc, #4]	; (8015d44 <mbedtls_pk_debug+0x1c>)
 8015d3e:	e7fc      	b.n	8015d3a <mbedtls_pk_debug+0x12>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015d40:	4801      	ldr	r0, [pc, #4]	; (8015d48 <mbedtls_pk_debug+0x20>)
 8015d42:	e7fa      	b.n	8015d3a <mbedtls_pk_debug+0x12>
 8015d44:	ffffc180 	.word	0xffffc180
 8015d48:	ffffc100 	.word	0xffffc100

08015d4c <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8015d4c:	b118      	cbz	r0, 8015d56 <mbedtls_pk_get_name+0xa>
 8015d4e:	6803      	ldr	r3, [r0, #0]
 8015d50:	b10b      	cbz	r3, 8015d56 <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 8015d52:	6858      	ldr	r0, [r3, #4]
 8015d54:	4770      	bx	lr
        return( "invalid PK" );
 8015d56:	4801      	ldr	r0, [pc, #4]	; (8015d5c <mbedtls_pk_get_name+0x10>)
}
 8015d58:	4770      	bx	lr
 8015d5a:	bf00      	nop
 8015d5c:	08030bd9 	.word	0x08030bd9

08015d60 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8015d60:	b110      	cbz	r0, 8015d68 <mbedtls_pk_get_type+0x8>
 8015d62:	6800      	ldr	r0, [r0, #0]
 8015d64:	b100      	cbz	r0, 8015d68 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 8015d66:	7800      	ldrb	r0, [r0, #0]
}
 8015d68:	4770      	bx	lr

08015d6a <rsa_can_do>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8015d6a:	2801      	cmp	r0, #1
 8015d6c:	d002      	beq.n	8015d74 <rsa_can_do+0xa>
 8015d6e:	1f83      	subs	r3, r0, #6
 8015d70:	4258      	negs	r0, r3
 8015d72:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 8015d74:	4770      	bx	lr

08015d76 <rsa_get_bitlen>:

static size_t rsa_get_bitlen( const void *ctx )
{
    return( 8 * ((const mbedtls_rsa_context *) ctx)->len );
 8015d76:	6840      	ldr	r0, [r0, #4]
}
 8015d78:	00c0      	lsls	r0, r0, #3
 8015d7a:	4770      	bx	lr

08015d7c <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8015d7c:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8015d7e:	4a06      	ldr	r2, [pc, #24]	; (8015d98 <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8015d80:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
 8015d82:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8015d84:	730b      	strb	r3, [r1, #12]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8015d86:	f100 0208 	add.w	r2, r0, #8
    items->name = "rsa.E";
 8015d8a:	4b04      	ldr	r3, [pc, #16]	; (8015d9c <rsa_debug+0x20>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8015d8c:	608a      	str	r2, [r1, #8]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8015d8e:	3014      	adds	r0, #20
    items->name = "rsa.E";
 8015d90:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8015d92:	6148      	str	r0, [r1, #20]
}
 8015d94:	4770      	bx	lr
 8015d96:	bf00      	nop
 8015d98:	08030be4 	.word	0x08030be4
 8015d9c:	08030bea 	.word	0x08030bea

08015da0 <eckey_can_do>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 8015da0:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
 8015da2:	2802      	cmp	r0, #2
 8015da4:	bf8c      	ite	hi
 8015da6:	2000      	movhi	r0, #0
 8015da8:	2001      	movls	r0, #1
 8015daa:	4770      	bx	lr

08015dac <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 8015dac:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8015dae:	4770      	bx	lr

08015db0 <eckey_debug>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 8015db0:	2302      	movs	r3, #2
 8015db2:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8015db4:	3088      	adds	r0, #136	; 0x88
    items->name = "eckey.Q";
 8015db6:	4b02      	ldr	r3, [pc, #8]	; (8015dc0 <eckey_debug+0x10>)
 8015db8:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8015dba:	6088      	str	r0, [r1, #8]
}
 8015dbc:	4770      	bx	lr
 8015dbe:	bf00      	nop
 8015dc0:	08030bf0 	.word	0x08030bf0

08015dc4 <eckeydh_can_do>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
 8015dc4:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
 8015dc6:	2801      	cmp	r0, #1
 8015dc8:	bf8c      	ite	hi
 8015dca:	2000      	movhi	r0, #0
 8015dcc:	2001      	movls	r0, #1
 8015dce:	4770      	bx	lr

08015dd0 <ecdsa_can_do>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 8015dd0:	1f03      	subs	r3, r0, #4
 8015dd2:	4258      	negs	r0, r3
 8015dd4:	4158      	adcs	r0, r3
 8015dd6:	4770      	bx	lr

08015dd8 <rsa_free_wrap>:
{
 8015dd8:	b510      	push	{r4, lr}
 8015dda:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8015ddc:	f001 fdfc 	bl	80179d8 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8015de0:	4b02      	ldr	r3, [pc, #8]	; (8015dec <rsa_free_wrap+0x14>)
 8015de2:	4620      	mov	r0, r4
 8015de4:	681b      	ldr	r3, [r3, #0]
}
 8015de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015dea:	4718      	bx	r3
 8015dec:	200005a4 	.word	0x200005a4

08015df0 <rsa_alloc_wrap>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8015df0:	4b06      	ldr	r3, [pc, #24]	; (8015e0c <rsa_alloc_wrap+0x1c>)
{
 8015df2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	21ac      	movs	r1, #172	; 0xac
 8015df8:	2001      	movs	r0, #1
 8015dfa:	4798      	blx	r3
    if( ctx != NULL )
 8015dfc:	4604      	mov	r4, r0
 8015dfe:	b118      	cbz	r0, 8015e08 <rsa_alloc_wrap+0x18>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 8015e00:	2200      	movs	r2, #0
 8015e02:	4611      	mov	r1, r2
 8015e04:	f000 fcc2 	bl	801678c <mbedtls_rsa_init>
}
 8015e08:	4620      	mov	r0, r4
 8015e0a:	bd10      	pop	{r4, pc}
 8015e0c:	200005a0 	.word	0x200005a0

08015e10 <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 8015e10:	f000 bdfc 	b.w	8016a0c <mbedtls_rsa_check_pub_priv>

08015e14 <rsa_encrypt_wrap>:
{
 8015e14:	b4f0      	push	{r4, r5, r6, r7}
    *olen = ((mbedtls_rsa_context *) ctx)->len;
 8015e16:	9f04      	ldr	r7, [sp, #16]
 8015e18:	6846      	ldr	r6, [r0, #4]
 8015e1a:	603e      	str	r6, [r7, #0]
    if( *olen > osize )
 8015e1c:	9f05      	ldr	r7, [sp, #20]
 8015e1e:	42be      	cmp	r6, r7
{
 8015e20:	460d      	mov	r5, r1
 8015e22:	4614      	mov	r4, r2
 8015e24:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    if( *olen > osize )
 8015e28:	d806      	bhi.n	8015e38 <rsa_encrypt_wrap+0x24>
    return( mbedtls_rsa_pkcs1_encrypt( (mbedtls_rsa_context *) ctx,
 8015e2a:	e9cd 5305 	strd	r5, r3, [sp, #20]
 8015e2e:	9404      	str	r4, [sp, #16]
 8015e30:	2300      	movs	r3, #0
}
 8015e32:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_encrypt( (mbedtls_rsa_context *) ctx,
 8015e34:	f001 b8d2 	b.w	8016fdc <mbedtls_rsa_pkcs1_encrypt>
}
 8015e38:	4801      	ldr	r0, [pc, #4]	; (8015e40 <rsa_encrypt_wrap+0x2c>)
 8015e3a:	bcf0      	pop	{r4, r5, r6, r7}
 8015e3c:	4770      	bx	lr
 8015e3e:	bf00      	nop
 8015e40:	ffffbc00 	.word	0xffffbc00

08015e44 <rsa_decrypt_wrap>:
{
 8015e44:	b4f0      	push	{r4, r5, r6, r7}
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 8015e46:	6847      	ldr	r7, [r0, #4]
{
 8015e48:	4616      	mov	r6, r2
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 8015e4a:	42b7      	cmp	r7, r6
{
 8015e4c:	460c      	mov	r4, r1
 8015e4e:	9a07      	ldr	r2, [sp, #28]
 8015e50:	e9dd 5105 	ldrd	r5, r1, [sp, #20]
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 8015e54:	d106      	bne.n	8015e64 <rsa_decrypt_wrap+0x20>
    return( mbedtls_rsa_pkcs1_decrypt( (mbedtls_rsa_context *) ctx, f_rng, p_rng,
 8015e56:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8015e5a:	9405      	str	r4, [sp, #20]
 8015e5c:	2301      	movs	r3, #1
}
 8015e5e:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_decrypt( (mbedtls_rsa_context *) ctx, f_rng, p_rng,
 8015e60:	f001 ba2a 	b.w	80172b8 <mbedtls_rsa_pkcs1_decrypt>
}
 8015e64:	4801      	ldr	r0, [pc, #4]	; (8015e6c <rsa_decrypt_wrap+0x28>)
 8015e66:	bcf0      	pop	{r4, r5, r6, r7}
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop
 8015e6c:	ffffbf80 	.word	0xffffbf80

08015e70 <rsa_sign_wrap>:
{
 8015e70:	b4f0      	push	{r4, r5, r6, r7}
    *sig_len = ((mbedtls_rsa_context *) ctx)->len;
 8015e72:	9e05      	ldr	r6, [sp, #20]
 8015e74:	6847      	ldr	r7, [r0, #4]
 8015e76:	6037      	str	r7, [r6, #0]
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015e78:	9e04      	ldr	r6, [sp, #16]
{
 8015e7a:	460c      	mov	r4, r1
 8015e7c:	4615      	mov	r5, r2
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015e7e:	e9cd 4304 	strd	r4, r3, [sp, #16]
{
 8015e82:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015e86:	2301      	movs	r3, #1
 8015e88:	e9cd 5606 	strd	r5, r6, [sp, #24]
}
 8015e8c:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015e8e:	f001 bbc1 	b.w	8017614 <mbedtls_rsa_pkcs1_sign>
	...

08015e94 <rsa_verify_wrap>:
{
 8015e94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015e96:	9d09      	ldr	r5, [sp, #36]	; 0x24
    if( sig_len < ((mbedtls_rsa_context *) ctx)->len )
 8015e98:	6846      	ldr	r6, [r0, #4]
 8015e9a:	42ae      	cmp	r6, r5
{
 8015e9c:	4604      	mov	r4, r0
    if( sig_len < ((mbedtls_rsa_context *) ctx)->len )
 8015e9e:	d811      	bhi.n	8015ec4 <rsa_verify_wrap+0x30>
    if( ( ret = mbedtls_rsa_pkcs1_verify( (mbedtls_rsa_context *) ctx, NULL, NULL,
 8015ea0:	9e08      	ldr	r6, [sp, #32]
 8015ea2:	e9cd 1300 	strd	r1, r3, [sp]
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	e9cd 2602 	strd	r2, r6, [sp, #8]
 8015eac:	4619      	mov	r1, r3
 8015eae:	461a      	mov	r2, r3
 8015eb0:	f001 fd7c 	bl	80179ac <mbedtls_rsa_pkcs1_verify>
 8015eb4:	b920      	cbnz	r0, 8015ec0 <rsa_verify_wrap+0x2c>
    if( sig_len > ((mbedtls_rsa_context *) ctx)->len )
 8015eb6:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015eb8:	4b03      	ldr	r3, [pc, #12]	; (8015ec8 <rsa_verify_wrap+0x34>)
 8015eba:	42aa      	cmp	r2, r5
 8015ebc:	bf38      	it	cc
 8015ebe:	4618      	movcc	r0, r3
}
 8015ec0:	b004      	add	sp, #16
 8015ec2:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8015ec4:	4801      	ldr	r0, [pc, #4]	; (8015ecc <rsa_verify_wrap+0x38>)
 8015ec6:	e7fb      	b.n	8015ec0 <rsa_verify_wrap+0x2c>
 8015ec8:	ffffc700 	.word	0xffffc700
 8015ecc:	ffffbc80 	.word	0xffffbc80

08015ed0 <eckey_free_wrap>:
{
 8015ed0:	b510      	push	{r4, lr}
 8015ed2:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 8015ed4:	f7fc f94a 	bl	801216c <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 8015ed8:	4b02      	ldr	r3, [pc, #8]	; (8015ee4 <eckey_free_wrap+0x14>)
 8015eda:	4620      	mov	r0, r4
 8015edc:	681b      	ldr	r3, [r3, #0]
}
 8015ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015ee2:	4718      	bx	r3
 8015ee4:	200005a4 	.word	0x200005a4

08015ee8 <eckey_alloc_wrap>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8015ee8:	4b05      	ldr	r3, [pc, #20]	; (8015f00 <eckey_alloc_wrap+0x18>)
{
 8015eea:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	21ac      	movs	r1, #172	; 0xac
 8015ef0:	2001      	movs	r0, #1
 8015ef2:	4798      	blx	r3
    if( ctx != NULL )
 8015ef4:	4604      	mov	r4, r0
 8015ef6:	b108      	cbz	r0, 8015efc <eckey_alloc_wrap+0x14>
        mbedtls_ecp_keypair_init( ctx );
 8015ef8:	f7fc f8ee 	bl	80120d8 <mbedtls_ecp_keypair_init>
}
 8015efc:	4620      	mov	r0, r4
 8015efe:	bd10      	pop	{r4, pc}
 8015f00:	200005a0 	.word	0x200005a0

08015f04 <eckey_check_pair>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 8015f04:	f7fd b8d8 	b.w	80130b8 <mbedtls_ecp_check_pub_priv>

08015f08 <ecdsa_alloc_wrap>:
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}

static void *ecdsa_alloc_wrap( void )
{
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 8015f08:	4b05      	ldr	r3, [pc, #20]	; (8015f20 <ecdsa_alloc_wrap+0x18>)
{
 8015f0a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	21ac      	movs	r1, #172	; 0xac
 8015f10:	2001      	movs	r0, #1
 8015f12:	4798      	blx	r3

    if( ctx != NULL )
 8015f14:	4604      	mov	r4, r0
 8015f16:	b108      	cbz	r0, 8015f1c <ecdsa_alloc_wrap+0x14>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 8015f18:	f7fb fbb0 	bl	801167c <mbedtls_ecdsa_init>

    return( ctx );
}
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	bd10      	pop	{r4, pc}
 8015f20:	200005a0 	.word	0x200005a0

08015f24 <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 8015f24:	b510      	push	{r4, lr}
 8015f26:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 8015f28:	f7fb fbaa 	bl	8011680 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 8015f2c:	4b02      	ldr	r3, [pc, #8]	; (8015f38 <ecdsa_free_wrap+0x14>)
 8015f2e:	4620      	mov	r0, r4
 8015f30:	681b      	ldr	r3, [r3, #0]
}
 8015f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015f36:	4718      	bx	r3
 8015f38:	200005a4 	.word	0x200005a4

08015f3c <ecdsa_sign_wrap>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 8015f3c:	f7fb bae0 	b.w	8011500 <mbedtls_ecdsa_write_signature>

08015f40 <eckey_sign_wrap>:
{
 8015f40:	b530      	push	{r4, r5, lr}
 8015f42:	b0b3      	sub	sp, #204	; 0xcc
 8015f44:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8015f46:	a807      	add	r0, sp, #28
{
 8015f48:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8015f4c:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
 8015f4e:	f7fb fb95 	bl	801167c <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 8015f52:	4621      	mov	r1, r4
 8015f54:	a807      	add	r0, sp, #28
 8015f56:	f7fb fb75 	bl	8011644 <mbedtls_ecdsa_from_keypair>
 8015f5a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015f5e:	4604      	mov	r4, r0
 8015f60:	b960      	cbnz	r0, 8015f7c <eckey_sign_wrap+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 8015f62:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8015f64:	9103      	str	r1, [sp, #12]
 8015f66:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8015f68:	9102      	str	r1, [sp, #8]
 8015f6a:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8015f6c:	9101      	str	r1, [sp, #4]
 8015f6e:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8015f70:	9100      	str	r1, [sp, #0]
 8015f72:	a807      	add	r0, sp, #28
 8015f74:	4629      	mov	r1, r5
 8015f76:	f7fb fac3 	bl	8011500 <mbedtls_ecdsa_write_signature>
 8015f7a:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8015f7c:	a807      	add	r0, sp, #28
 8015f7e:	f7fb fb7f 	bl	8011680 <mbedtls_ecdsa_free>
}
 8015f82:	4620      	mov	r0, r4
 8015f84:	b033      	add	sp, #204	; 0xcc
 8015f86:	bd30      	pop	{r4, r5, pc}

08015f88 <ecdsa_verify_wrap>:
{
 8015f88:	b507      	push	{r0, r1, r2, lr}
 8015f8a:	4611      	mov	r1, r2
 8015f8c:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 8015f8e:	9b05      	ldr	r3, [sp, #20]
 8015f90:	9300      	str	r3, [sp, #0]
 8015f92:	9b04      	ldr	r3, [sp, #16]
 8015f94:	f7fb fb06 	bl	80115a4 <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 8015f98:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015f9c:	bf08      	it	eq
 8015f9e:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
 8015fa2:	b003      	add	sp, #12
 8015fa4:	f85d fb04 	ldr.w	pc, [sp], #4

08015fa8 <eckey_verify_wrap>:
{
 8015fa8:	b530      	push	{r4, r5, lr}
 8015faa:	b0b1      	sub	sp, #196	; 0xc4
 8015fac:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8015fae:	a805      	add	r0, sp, #20
{
 8015fb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015fb4:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
 8015fb6:	f7fb fb61 	bl	801167c <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 8015fba:	4621      	mov	r1, r4
 8015fbc:	a805      	add	r0, sp, #20
 8015fbe:	f7fb fb41 	bl	8011644 <mbedtls_ecdsa_from_keypair>
 8015fc2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	b940      	cbnz	r0, 8015fdc <eckey_verify_wrap+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 8015fca:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8015fcc:	9101      	str	r1, [sp, #4]
 8015fce:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8015fd0:	9100      	str	r1, [sp, #0]
 8015fd2:	a805      	add	r0, sp, #20
 8015fd4:	4629      	mov	r1, r5
 8015fd6:	f7ff ffd7 	bl	8015f88 <ecdsa_verify_wrap>
 8015fda:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8015fdc:	a805      	add	r0, sp, #20
 8015fde:	f7fb fb4f 	bl	8011680 <mbedtls_ecdsa_free>
}
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	b031      	add	sp, #196	; 0xc4
 8015fe6:	bd30      	pop	{r4, r5, pc}

08015fe8 <pk_use_ecparams>:
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
 8015fe8:	6803      	ldr	r3, [r0, #0]
 8015fea:	2b06      	cmp	r3, #6
{
 8015fec:	b513      	push	{r0, r1, r4, lr}
 8015fee:	460c      	mov	r4, r1
    if( params->tag == MBEDTLS_ASN1_OID )
 8015ff0:	d002      	beq.n	8015ff8 <pk_use_ecparams+0x10>
    {
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
            return( ret );
#else
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8015ff2:	480a      	ldr	r0, [pc, #40]	; (801601c <pk_use_ecparams+0x34>)

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
        return( ret );

    return( 0 );
}
 8015ff4:	b002      	add	sp, #8
 8015ff6:	bd10      	pop	{r4, pc}
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 8015ff8:	f10d 0107 	add.w	r1, sp, #7
 8015ffc:	f7ff fb4c 	bl	8015698 <mbedtls_oid_get_ec_grp>
 8016000:	b948      	cbnz	r0, 8016016 <pk_use_ecparams+0x2e>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 8016002:	7823      	ldrb	r3, [r4, #0]
 8016004:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016008:	b10b      	cbz	r3, 801600e <pk_use_ecparams+0x26>
 801600a:	428b      	cmp	r3, r1
 801600c:	d1f1      	bne.n	8015ff2 <pk_use_ecparams+0xa>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 801600e:	4620      	mov	r0, r4
 8016010:	f7fd fe9e 	bl	8013d50 <mbedtls_ecp_group_load>
 8016014:	e7ee      	b.n	8015ff4 <pk_use_ecparams+0xc>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 8016016:	4802      	ldr	r0, [pc, #8]	; (8016020 <pk_use_ecparams+0x38>)
 8016018:	e7ec      	b.n	8015ff4 <pk_use_ecparams+0xc>
 801601a:	bf00      	nop
 801601c:	ffffc300 	.word	0xffffc300
 8016020:	ffffc600 	.word	0xffffc600

08016024 <pk_parse_key_pkcs1_der>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 8016024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016026:	4605      	mov	r5, r0
 8016028:	4610      	mov	r0, r2
    int ret;
    size_t len;
    unsigned char *p, *end;

    p = (unsigned char *) key;
 801602a:	9101      	str	r1, [sp, #4]
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801602c:	2330      	movs	r3, #48	; 0x30
 801602e:	4401      	add	r1, r0
 8016030:	466a      	mov	r2, sp
 8016032:	a801      	add	r0, sp, #4
 8016034:	f7f8 f8ac 	bl	800e190 <mbedtls_asn1_get_tag>
 8016038:	4604      	mov	r4, r0
 801603a:	b120      	cbz	r0, 8016046 <pk_parse_key_pkcs1_der+0x22>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->QP ) ) != 0 )
    {
        mbedtls_rsa_free( rsa );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801603c:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
        mbedtls_rsa_free( rsa );
        return( ret );
    }

    return( 0 );
}
 8016040:	4620      	mov	r0, r4
 8016042:	b003      	add	sp, #12
 8016044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 8016046:	e9dd 1600 	ldrd	r1, r6, [sp]
 801604a:	440e      	add	r6, r1
    if( ( ret = mbedtls_asn1_get_int( &p, end, &rsa->ver ) ) != 0 )
 801604c:	462a      	mov	r2, r5
 801604e:	4631      	mov	r1, r6
 8016050:	a801      	add	r0, sp, #4
 8016052:	f7f8 f8c9 	bl	800e1e8 <mbedtls_asn1_get_int>
 8016056:	4604      	mov	r4, r0
 8016058:	2800      	cmp	r0, #0
 801605a:	d1ef      	bne.n	801603c <pk_parse_key_pkcs1_der+0x18>
    if( rsa->ver != 0 )
 801605c:	682b      	ldr	r3, [r5, #0]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d159      	bne.n	8016116 <pk_parse_key_pkcs1_der+0xf2>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->N  ) ) != 0 ||
 8016062:	f105 0708 	add.w	r7, r5, #8
 8016066:	463a      	mov	r2, r7
 8016068:	4631      	mov	r1, r6
 801606a:	a801      	add	r0, sp, #4
 801606c:	f7f8 f8e0 	bl	800e230 <mbedtls_asn1_get_mpi>
 8016070:	4604      	mov	r4, r0
 8016072:	bbb8      	cbnz	r0, 80160e4 <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->E  ) ) != 0 ||
 8016074:	f105 0214 	add.w	r2, r5, #20
 8016078:	4631      	mov	r1, r6
 801607a:	a801      	add	r0, sp, #4
 801607c:	f7f8 f8d8 	bl	800e230 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->N  ) ) != 0 ||
 8016080:	4604      	mov	r4, r0
 8016082:	bb78      	cbnz	r0, 80160e4 <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->D  ) ) != 0 ||
 8016084:	f105 0220 	add.w	r2, r5, #32
 8016088:	4631      	mov	r1, r6
 801608a:	a801      	add	r0, sp, #4
 801608c:	f7f8 f8d0 	bl	800e230 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->E  ) ) != 0 ||
 8016090:	4604      	mov	r4, r0
 8016092:	bb38      	cbnz	r0, 80160e4 <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->P  ) ) != 0 ||
 8016094:	f105 022c 	add.w	r2, r5, #44	; 0x2c
 8016098:	4631      	mov	r1, r6
 801609a:	a801      	add	r0, sp, #4
 801609c:	f7f8 f8c8 	bl	800e230 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->D  ) ) != 0 ||
 80160a0:	4604      	mov	r4, r0
 80160a2:	b9f8      	cbnz	r0, 80160e4 <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->Q  ) ) != 0 ||
 80160a4:	f105 0238 	add.w	r2, r5, #56	; 0x38
 80160a8:	4631      	mov	r1, r6
 80160aa:	a801      	add	r0, sp, #4
 80160ac:	f7f8 f8c0 	bl	800e230 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->P  ) ) != 0 ||
 80160b0:	4604      	mov	r4, r0
 80160b2:	b9b8      	cbnz	r0, 80160e4 <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
 80160b4:	f105 0244 	add.w	r2, r5, #68	; 0x44
 80160b8:	4631      	mov	r1, r6
 80160ba:	a801      	add	r0, sp, #4
 80160bc:	f7f8 f8b8 	bl	800e230 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->Q  ) ) != 0 ||
 80160c0:	4604      	mov	r4, r0
 80160c2:	b978      	cbnz	r0, 80160e4 <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
 80160c4:	f105 0250 	add.w	r2, r5, #80	; 0x50
 80160c8:	4631      	mov	r1, r6
 80160ca:	a801      	add	r0, sp, #4
 80160cc:	f7f8 f8b0 	bl	800e230 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
 80160d0:	4604      	mov	r4, r0
 80160d2:	b938      	cbnz	r0, 80160e4 <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->QP ) ) != 0 )
 80160d4:	f105 025c 	add.w	r2, r5, #92	; 0x5c
 80160d8:	4631      	mov	r1, r6
 80160da:	a801      	add	r0, sp, #4
 80160dc:	f7f8 f8a8 	bl	800e230 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
 80160e0:	4604      	mov	r4, r0
 80160e2:	b118      	cbz	r0, 80160ec <pk_parse_key_pkcs1_der+0xc8>
        mbedtls_rsa_free( rsa );
 80160e4:	4628      	mov	r0, r5
 80160e6:	f001 fc77 	bl	80179d8 <mbedtls_rsa_free>
 80160ea:	e7a7      	b.n	801603c <pk_parse_key_pkcs1_der+0x18>
    rsa->len = mbedtls_mpi_size( &rsa->N );
 80160ec:	4638      	mov	r0, r7
 80160ee:	f7f8 fdd2 	bl	800ec96 <mbedtls_mpi_size>
    if( p != end )
 80160f2:	9b01      	ldr	r3, [sp, #4]
    rsa->len = mbedtls_mpi_size( &rsa->N );
 80160f4:	6068      	str	r0, [r5, #4]
    if( p != end )
 80160f6:	42b3      	cmp	r3, r6
        mbedtls_rsa_free( rsa );
 80160f8:	4628      	mov	r0, r5
    if( p != end )
 80160fa:	d003      	beq.n	8016104 <pk_parse_key_pkcs1_der+0xe0>
        mbedtls_rsa_free( rsa );
 80160fc:	f001 fc6c 	bl	80179d8 <mbedtls_rsa_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8016100:	4c06      	ldr	r4, [pc, #24]	; (801611c <pk_parse_key_pkcs1_der+0xf8>)
 8016102:	e79d      	b.n	8016040 <pk_parse_key_pkcs1_der+0x1c>
    if( ( ret = mbedtls_rsa_check_privkey( rsa ) ) != 0 )
 8016104:	f000 fb7a 	bl	80167fc <mbedtls_rsa_check_privkey>
 8016108:	4604      	mov	r4, r0
 801610a:	2800      	cmp	r0, #0
 801610c:	d098      	beq.n	8016040 <pk_parse_key_pkcs1_der+0x1c>
        mbedtls_rsa_free( rsa );
 801610e:	4628      	mov	r0, r5
 8016110:	f001 fc62 	bl	80179d8 <mbedtls_rsa_free>
        return( ret );
 8016114:	e794      	b.n	8016040 <pk_parse_key_pkcs1_der+0x1c>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8016116:	4c02      	ldr	r4, [pc, #8]	; (8016120 <pk_parse_key_pkcs1_der+0xfc>)
 8016118:	e792      	b.n	8016040 <pk_parse_key_pkcs1_der+0x1c>
 801611a:	bf00      	nop
 801611c:	ffffc29a 	.word	0xffffc29a
 8016120:	ffffc280 	.word	0xffffc280

08016124 <pk_parse_key_sec1_der>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 8016124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016126:	b08b      	sub	sp, #44	; 0x2c
 8016128:	4605      	mov	r5, r0
 801612a:	4610      	mov	r0, r2
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 801612c:	9106      	str	r1, [sp, #24]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801612e:	2330      	movs	r3, #48	; 0x30
 8016130:	4401      	add	r1, r0
 8016132:	aa05      	add	r2, sp, #20
 8016134:	a806      	add	r0, sp, #24
 8016136:	f7f8 f82b 	bl	800e190 <mbedtls_asn1_get_tag>
 801613a:	b120      	cbz	r0, 8016146 <pk_parse_key_sec1_der+0x22>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801613c:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
 8016140:	4620      	mov	r0, r4
 8016142:	b00b      	add	sp, #44	; 0x2c
 8016144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 8016146:	e9dd 3705 	ldrd	r3, r7, [sp, #20]
 801614a:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 801614c:	aa04      	add	r2, sp, #16
 801614e:	4639      	mov	r1, r7
 8016150:	a806      	add	r0, sp, #24
 8016152:	f7f8 f849 	bl	800e1e8 <mbedtls_asn1_get_int>
 8016156:	2800      	cmp	r0, #0
 8016158:	d1f0      	bne.n	801613c <pk_parse_key_sec1_der+0x18>
    if( version != 1 )
 801615a:	9b04      	ldr	r3, [sp, #16]
 801615c:	2b01      	cmp	r3, #1
 801615e:	f040 8091 	bne.w	8016284 <pk_parse_key_sec1_der+0x160>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8016162:	2304      	movs	r3, #4
 8016164:	aa05      	add	r2, sp, #20
 8016166:	4639      	mov	r1, r7
 8016168:	a806      	add	r0, sp, #24
 801616a:	f7f8 f811 	bl	800e190 <mbedtls_asn1_get_tag>
 801616e:	2800      	cmp	r0, #0
 8016170:	d1e4      	bne.n	801613c <pk_parse_key_sec1_der+0x18>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 8016172:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 8016176:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 801617a:	4630      	mov	r0, r6
 801617c:	f7f8 fd91 	bl	800eca2 <mbedtls_mpi_read_binary>
 8016180:	4604      	mov	r4, r0
 8016182:	b128      	cbz	r0, 8016190 <pk_parse_key_sec1_der+0x6c>
        mbedtls_ecp_keypair_free( eck );
 8016184:	4628      	mov	r0, r5
 8016186:	f7fb fff1 	bl	801216c <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801618a:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 801618e:	e7d7      	b.n	8016140 <pk_parse_key_sec1_der+0x1c>
    p += len;
 8016190:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8016194:	4413      	add	r3, r2
    if( p != end )
 8016196:	42bb      	cmp	r3, r7
    p += len;
 8016198:	9306      	str	r3, [sp, #24]
    if( p != end )
 801619a:	d05c      	beq.n	8016256 <pk_parse_key_sec1_der+0x132>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801619c:	23a0      	movs	r3, #160	; 0xa0
 801619e:	aa05      	add	r2, sp, #20
 80161a0:	4639      	mov	r1, r7
 80161a2:	a806      	add	r0, sp, #24
 80161a4:	f7f7 fff4 	bl	800e190 <mbedtls_asn1_get_tag>
 80161a8:	4604      	mov	r4, r0
 80161aa:	bb20      	cbnz	r0, 80161f6 <pk_parse_key_sec1_der+0xd2>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 80161ac:	e9dd 4305 	ldrd	r4, r3, [sp, #20]
 80161b0:	441c      	add	r4, r3
    params->tag = **p;
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	9307      	str	r3, [sp, #28]
    if( params->tag != MBEDTLS_ASN1_OID
 80161b6:	2b06      	cmp	r3, #6
 80161b8:	d11b      	bne.n	80161f2 <pk_parse_key_sec1_der+0xce>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 80161ba:	aa08      	add	r2, sp, #32
 80161bc:	4621      	mov	r1, r4
 80161be:	a806      	add	r0, sp, #24
 80161c0:	f7f7 ffe6 	bl	800e190 <mbedtls_asn1_get_tag>
 80161c4:	b160      	cbz	r0, 80161e0 <pk_parse_key_sec1_der+0xbc>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 80161c6:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
 80161ca:	d105      	bne.n	80161d8 <pk_parse_key_sec1_der+0xb4>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
 80161cc:	4629      	mov	r1, r5
 80161ce:	a807      	add	r0, sp, #28
 80161d0:	f7ff ff0a 	bl	8015fe8 <pk_use_ecparams>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 80161d4:	4604      	mov	r4, r0
 80161d6:	b188      	cbz	r0, 80161fc <pk_parse_key_sec1_der+0xd8>
        mbedtls_ecp_keypair_free( eck );
 80161d8:	4628      	mov	r0, r5
 80161da:	f7fb ffc7 	bl	801216c <mbedtls_ecp_keypair_free>
        return( ret );
 80161de:	e7af      	b.n	8016140 <pk_parse_key_sec1_der+0x1c>
    params->p = *p;
 80161e0:	9b06      	ldr	r3, [sp, #24]
    *p += params->len;
 80161e2:	9a08      	ldr	r2, [sp, #32]
    params->p = *p;
 80161e4:	9309      	str	r3, [sp, #36]	; 0x24
    *p += params->len;
 80161e6:	4413      	add	r3, r2
    if( *p != end )
 80161e8:	429c      	cmp	r4, r3
    *p += params->len;
 80161ea:	9306      	str	r3, [sp, #24]
    if( *p != end )
 80161ec:	d0ee      	beq.n	80161cc <pk_parse_key_sec1_der+0xa8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 80161ee:	4c27      	ldr	r4, [pc, #156]	; (801628c <pk_parse_key_sec1_der+0x168>)
 80161f0:	e7f2      	b.n	80161d8 <pk_parse_key_sec1_der+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 80161f2:	4c27      	ldr	r4, [pc, #156]	; (8016290 <pk_parse_key_sec1_der+0x16c>)
                mbedtls_ecp_keypair_free( eck );
 80161f4:	e7f0      	b.n	80161d8 <pk_parse_key_sec1_der+0xb4>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80161f6:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80161fa:	d1c3      	bne.n	8016184 <pk_parse_key_sec1_der+0x60>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80161fc:	23a1      	movs	r3, #161	; 0xa1
 80161fe:	aa05      	add	r2, sp, #20
 8016200:	4639      	mov	r1, r7
 8016202:	a806      	add	r0, sp, #24
 8016204:	f7f7 ffc4 	bl	800e190 <mbedtls_asn1_get_tag>
 8016208:	4604      	mov	r4, r0
 801620a:	bb08      	cbnz	r0, 8016250 <pk_parse_key_sec1_der+0x12c>
            end2 = p + len;
 801620c:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
 8016210:	441c      	add	r4, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 8016212:	aa05      	add	r2, sp, #20
 8016214:	4621      	mov	r1, r4
 8016216:	a806      	add	r0, sp, #24
 8016218:	f7f8 f83e 	bl	800e298 <mbedtls_asn1_get_bitstring_null>
 801621c:	2800      	cmp	r0, #0
 801621e:	d18d      	bne.n	801613c <pk_parse_key_sec1_der+0x18>
            if( p + len != end2 )
 8016220:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8016224:	4413      	add	r3, r2
 8016226:	429c      	cmp	r4, r3
 8016228:	d12e      	bne.n	8016288 <pk_parse_key_sec1_der+0x164>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 801622a:	f105 0188 	add.w	r1, r5, #136	; 0x88
 801622e:	1aa3      	subs	r3, r4, r2
 8016230:	4628      	mov	r0, r5
 8016232:	9103      	str	r1, [sp, #12]
 8016234:	f7fc fcda 	bl	8012bec <mbedtls_ecp_point_read_binary>
 8016238:	9903      	ldr	r1, [sp, #12]
 801623a:	b910      	cbnz	r0, 8016242 <pk_parse_key_sec1_der+0x11e>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 801623c:	4628      	mov	r0, r5
 801623e:	f7fc fd61 	bl	8012d04 <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
 8016242:	9406      	str	r4, [sp, #24]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 8016244:	b1a8      	cbz	r0, 8016272 <pk_parse_key_sec1_der+0x14e>
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 8016246:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 801624a:	d004      	beq.n	8016256 <pk_parse_key_sec1_der+0x132>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 801624c:	4c11      	ldr	r4, [pc, #68]	; (8016294 <pk_parse_key_sec1_der+0x170>)
 801624e:	e777      	b.n	8016140 <pk_parse_key_sec1_der+0x1c>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8016250:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8016254:	d196      	bne.n	8016184 <pk_parse_key_sec1_der+0x60>
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
 8016256:	2300      	movs	r3, #0
 8016258:	e9cd 3300 	strd	r3, r3, [sp]
 801625c:	4632      	mov	r2, r6
 801625e:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8016262:	f105 0188 	add.w	r1, r5, #136	; 0x88
 8016266:	4628      	mov	r0, r5
 8016268:	f7fc fe30 	bl	8012ecc <mbedtls_ecp_mul>
    if( ! pubkey_done &&
 801626c:	4604      	mov	r4, r0
 801626e:	2800      	cmp	r0, #0
 8016270:	d188      	bne.n	8016184 <pk_parse_key_sec1_der+0x60>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 8016272:	4631      	mov	r1, r6
 8016274:	4628      	mov	r0, r5
 8016276:	f7fc fe0b 	bl	8012e90 <mbedtls_ecp_check_privkey>
 801627a:	4604      	mov	r4, r0
 801627c:	2800      	cmp	r0, #0
 801627e:	f43f af5f 	beq.w	8016140 <pk_parse_key_sec1_der+0x1c>
 8016282:	e7a9      	b.n	80161d8 <pk_parse_key_sec1_der+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8016284:	4c04      	ldr	r4, [pc, #16]	; (8016298 <pk_parse_key_sec1_der+0x174>)
 8016286:	e75b      	b.n	8016140 <pk_parse_key_sec1_der+0x1c>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8016288:	4c00      	ldr	r4, [pc, #0]	; (801628c <pk_parse_key_sec1_der+0x168>)
 801628a:	e759      	b.n	8016140 <pk_parse_key_sec1_der+0x1c>
 801628c:	ffffc29a 	.word	0xffffc29a
 8016290:	ffffc29e 	.word	0xffffc29e
 8016294:	ffffc300 	.word	0xffffc300
 8016298:	ffffc280 	.word	0xffffc280

0801629c <pk_get_pk_alg>:
{
 801629c:	b530      	push	{r4, r5, lr}
 801629e:	4615      	mov	r5, r2
 80162a0:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 80162a2:	2200      	movs	r2, #0
 80162a4:	e9c3 2200 	strd	r2, r2, [r3]
 80162a8:	609a      	str	r2, [r3, #8]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80162aa:	aa01      	add	r2, sp, #4
{
 80162ac:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80162ae:	f7f8 f847 	bl	800e340 <mbedtls_asn1_get_alg>
 80162b2:	b118      	cbz	r0, 80162bc <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 80162b4:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
}
 80162b8:	b005      	add	sp, #20
 80162ba:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 80162bc:	4629      	mov	r1, r5
 80162be:	a801      	add	r0, sp, #4
 80162c0:	f7ff f9d0 	bl	8015664 <mbedtls_oid_get_pk_alg>
 80162c4:	b960      	cbnz	r0, 80162e0 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80162c6:	782b      	ldrb	r3, [r5, #0]
 80162c8:	2b01      	cmp	r3, #1
 80162ca:	d1f5      	bne.n	80162b8 <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80162cc:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80162ce:	2b05      	cmp	r3, #5
 80162d0:	d000      	beq.n	80162d4 <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80162d2:	b93b      	cbnz	r3, 80162e4 <pk_get_pk_alg+0x48>
 80162d4:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80162d6:	4b04      	ldr	r3, [pc, #16]	; (80162e8 <pk_get_pk_alg+0x4c>)
 80162d8:	2a00      	cmp	r2, #0
 80162da:	bf18      	it	ne
 80162dc:	4618      	movne	r0, r3
 80162de:	e7eb      	b.n	80162b8 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80162e0:	4802      	ldr	r0, [pc, #8]	; (80162ec <pk_get_pk_alg+0x50>)
 80162e2:	e7e9      	b.n	80162b8 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80162e4:	4800      	ldr	r0, [pc, #0]	; (80162e8 <pk_get_pk_alg+0x4c>)
 80162e6:	e7e7      	b.n	80162b8 <pk_get_pk_alg+0x1c>
 80162e8:	ffffc580 	.word	0xffffc580
 80162ec:	ffffc380 	.word	0xffffc380

080162f0 <pk_parse_key_pkcs8_unencrypted_der>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 80162f0:	b530      	push	{r4, r5, lr}
 80162f2:	b08b      	sub	sp, #44	; 0x2c
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80162f4:	2300      	movs	r3, #0
{
 80162f6:	4605      	mov	r5, r0
 80162f8:	4610      	mov	r0, r2
    unsigned char *p = (unsigned char *) key;
 80162fa:	9106      	str	r1, [sp, #24]
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80162fc:	f88d 300f 	strb.w	r3, [sp, #15]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8016300:	4401      	add	r1, r0
 8016302:	2330      	movs	r3, #48	; 0x30
 8016304:	aa05      	add	r2, sp, #20
 8016306:	a806      	add	r0, sp, #24
 8016308:	f7f7 ff42 	bl	800e190 <mbedtls_asn1_get_tag>
 801630c:	b120      	cbz	r0, 8016318 <pk_parse_key_pkcs8_unencrypted_der+0x28>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801630e:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
 8016312:	4620      	mov	r0, r4
 8016314:	b00b      	add	sp, #44	; 0x2c
 8016316:	bd30      	pop	{r4, r5, pc}
    end = p + len;
 8016318:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 801631c:	aa04      	add	r2, sp, #16
    end = p + len;
 801631e:	4419      	add	r1, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8016320:	a806      	add	r0, sp, #24
 8016322:	9101      	str	r1, [sp, #4]
 8016324:	f7f7 ff60 	bl	800e1e8 <mbedtls_asn1_get_int>
 8016328:	9901      	ldr	r1, [sp, #4]
 801632a:	2800      	cmp	r0, #0
 801632c:	d1ef      	bne.n	801630e <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( version != 0 )
 801632e:	9b04      	ldr	r3, [sp, #16]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d140      	bne.n	80163b6 <pk_parse_key_pkcs8_unencrypted_der+0xc6>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 8016334:	ab07      	add	r3, sp, #28
 8016336:	f10d 020f 	add.w	r2, sp, #15
 801633a:	a806      	add	r0, sp, #24
 801633c:	9101      	str	r1, [sp, #4]
 801633e:	f7ff ffad 	bl	801629c <pk_get_pk_alg>
 8016342:	9901      	ldr	r1, [sp, #4]
 8016344:	2800      	cmp	r0, #0
 8016346:	d1e2      	bne.n	801630e <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8016348:	2304      	movs	r3, #4
 801634a:	aa05      	add	r2, sp, #20
 801634c:	a806      	add	r0, sp, #24
 801634e:	f7f7 ff1f 	bl	800e190 <mbedtls_asn1_get_tag>
 8016352:	2800      	cmp	r0, #0
 8016354:	d1db      	bne.n	801630e <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( len < 1 )
 8016356:	9b05      	ldr	r3, [sp, #20]
 8016358:	b37b      	cbz	r3, 80163ba <pk_parse_key_pkcs8_unencrypted_der+0xca>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 801635a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801635e:	f7ff fbe5 	bl	8015b2c <mbedtls_pk_info_from_type>
 8016362:	4601      	mov	r1, r0
 8016364:	b908      	cbnz	r0, 801636a <pk_parse_key_pkcs8_unencrypted_der+0x7a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8016366:	4c16      	ldr	r4, [pc, #88]	; (80163c0 <pk_parse_key_pkcs8_unencrypted_der+0xd0>)
 8016368:	e7d3      	b.n	8016312 <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 801636a:	4628      	mov	r0, r5
 801636c:	f7ff fbea 	bl	8015b44 <mbedtls_pk_setup>
 8016370:	4604      	mov	r4, r0
 8016372:	2800      	cmp	r0, #0
 8016374:	d1cd      	bne.n	8016312 <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( pk_alg == MBEDTLS_PK_RSA )
 8016376:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801637a:	2b01      	cmp	r3, #1
 801637c:	d10b      	bne.n	8016396 <pk_parse_key_pkcs8_unencrypted_der+0xa6>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 801637e:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 8016382:	6868      	ldr	r0, [r5, #4]
 8016384:	f7ff fe4e 	bl	8016024 <pk_parse_key_pkcs1_der>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 8016388:	4604      	mov	r4, r0
 801638a:	2800      	cmp	r0, #0
 801638c:	d0c1      	beq.n	8016312 <pk_parse_key_pkcs8_unencrypted_der+0x22>
            mbedtls_pk_free( pk );
 801638e:	4628      	mov	r0, r5
 8016390:	f7ff fbbb 	bl	8015b0a <mbedtls_pk_free>
            return( ret );
 8016394:	e7bd      	b.n	8016312 <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 8016396:	3b02      	subs	r3, #2
 8016398:	2b01      	cmp	r3, #1
 801639a:	d8e4      	bhi.n	8016366 <pk_parse_key_pkcs8_unencrypted_der+0x76>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 801639c:	6869      	ldr	r1, [r5, #4]
 801639e:	a807      	add	r0, sp, #28
 80163a0:	f7ff fe22 	bl	8015fe8 <pk_use_ecparams>
 80163a4:	4604      	mov	r4, r0
 80163a6:	2800      	cmp	r0, #0
 80163a8:	d1f1      	bne.n	801638e <pk_parse_key_pkcs8_unencrypted_der+0x9e>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
 80163aa:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 80163ae:	6868      	ldr	r0, [r5, #4]
 80163b0:	f7ff feb8 	bl	8016124 <pk_parse_key_sec1_der>
 80163b4:	e7e8      	b.n	8016388 <pk_parse_key_pkcs8_unencrypted_der+0x98>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 80163b6:	4c03      	ldr	r4, [pc, #12]	; (80163c4 <pk_parse_key_pkcs8_unencrypted_der+0xd4>)
 80163b8:	e7ab      	b.n	8016312 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 80163ba:	4c03      	ldr	r4, [pc, #12]	; (80163c8 <pk_parse_key_pkcs8_unencrypted_der+0xd8>)
 80163bc:	e7a9      	b.n	8016312 <pk_parse_key_pkcs8_unencrypted_der+0x22>
 80163be:	bf00      	nop
 80163c0:	ffffc380 	.word	0xffffc380
 80163c4:	ffffc280 	.word	0xffffc280
 80163c8:	ffffc2a0 	.word	0xffffc2a0

080163cc <mbedtls_pk_parse_subpubkey>:
{
 80163cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163d0:	b088      	sub	sp, #32
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80163d2:	2300      	movs	r3, #0
{
 80163d4:	4690      	mov	r8, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80163d6:	f88d 300b 	strb.w	r3, [sp, #11]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80163da:	aa03      	add	r2, sp, #12
 80163dc:	2330      	movs	r3, #48	; 0x30
{
 80163de:	4606      	mov	r6, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80163e0:	f7f7 fed6 	bl	800e190 <mbedtls_asn1_get_tag>
 80163e4:	b128      	cbz	r0, 80163f2 <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80163e6:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
}
 80163ea:	4628      	mov	r0, r5
 80163ec:	b008      	add	sp, #32
 80163ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    end = *p + len;
 80163f2:	9b03      	ldr	r3, [sp, #12]
 80163f4:	6837      	ldr	r7, [r6, #0]
 80163f6:	441f      	add	r7, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 80163f8:	f10d 020b 	add.w	r2, sp, #11
 80163fc:	ab05      	add	r3, sp, #20
 80163fe:	4639      	mov	r1, r7
 8016400:	4630      	mov	r0, r6
 8016402:	f7ff ff4b 	bl	801629c <pk_get_pk_alg>
 8016406:	4605      	mov	r5, r0
 8016408:	2800      	cmp	r0, #0
 801640a:	d1ee      	bne.n	80163ea <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801640c:	aa03      	add	r2, sp, #12
 801640e:	4639      	mov	r1, r7
 8016410:	4630      	mov	r0, r6
 8016412:	f7f7 ff41 	bl	800e298 <mbedtls_asn1_get_bitstring_null>
 8016416:	b110      	cbz	r0, 801641e <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8016418:	f5a0 556c 	sub.w	r5, r0, #15104	; 0x3b00
 801641c:	e7e5      	b.n	80163ea <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 801641e:	6833      	ldr	r3, [r6, #0]
 8016420:	9a03      	ldr	r2, [sp, #12]
 8016422:	4413      	add	r3, r2
 8016424:	429f      	cmp	r7, r3
 8016426:	d16e      	bne.n	8016506 <mbedtls_pk_parse_subpubkey+0x13a>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8016428:	f89d 000b 	ldrb.w	r0, [sp, #11]
 801642c:	f7ff fb7e 	bl	8015b2c <mbedtls_pk_info_from_type>
 8016430:	4601      	mov	r1, r0
 8016432:	2800      	cmp	r0, #0
 8016434:	d069      	beq.n	801650a <mbedtls_pk_parse_subpubkey+0x13e>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8016436:	4640      	mov	r0, r8
 8016438:	f7ff fb84 	bl	8015b44 <mbedtls_pk_setup>
 801643c:	4605      	mov	r5, r0
 801643e:	2800      	cmp	r0, #0
 8016440:	d1d3      	bne.n	80163ea <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
 8016442:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8016446:	2b01      	cmp	r3, #1
 8016448:	d13a      	bne.n	80164c0 <mbedtls_pk_parse_subpubkey+0xf4>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801644a:	2330      	movs	r3, #48	; 0x30
 801644c:	aa04      	add	r2, sp, #16
 801644e:	4639      	mov	r1, r7
 8016450:	4630      	mov	r0, r6
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 8016452:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8016456:	f7f7 fe9b 	bl	800e190 <mbedtls_asn1_get_tag>
 801645a:	b138      	cbz	r0, 801646c <mbedtls_pk_parse_subpubkey+0xa0>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 801645c:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
    if( ret == 0 && *p != end )
 8016460:	b344      	cbz	r4, 80164b4 <mbedtls_pk_parse_subpubkey+0xe8>
        mbedtls_pk_free( pk );
 8016462:	4640      	mov	r0, r8
 8016464:	f7ff fb51 	bl	8015b0a <mbedtls_pk_free>
 8016468:	4625      	mov	r5, r4
 801646a:	e7be      	b.n	80163ea <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 801646c:	6833      	ldr	r3, [r6, #0]
 801646e:	9a04      	ldr	r2, [sp, #16]
 8016470:	4413      	add	r3, r2
 8016472:	429f      	cmp	r7, r3
 8016474:	d001      	beq.n	801647a <mbedtls_pk_parse_subpubkey+0xae>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 8016476:	4c26      	ldr	r4, [pc, #152]	; (8016510 <mbedtls_pk_parse_subpubkey+0x144>)
 8016478:	e7f3      	b.n	8016462 <mbedtls_pk_parse_subpubkey+0x96>
    if( ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->N ) ) != 0 ||
 801647a:	f109 0a08 	add.w	sl, r9, #8
 801647e:	4652      	mov	r2, sl
 8016480:	4639      	mov	r1, r7
 8016482:	4630      	mov	r0, r6
 8016484:	f7f7 fed4 	bl	800e230 <mbedtls_asn1_get_mpi>
 8016488:	2800      	cmp	r0, #0
 801648a:	d1e7      	bne.n	801645c <mbedtls_pk_parse_subpubkey+0x90>
        ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->E ) ) != 0 )
 801648c:	f109 0214 	add.w	r2, r9, #20
 8016490:	4639      	mov	r1, r7
 8016492:	4630      	mov	r0, r6
 8016494:	f7f7 fecc 	bl	800e230 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->N ) ) != 0 ||
 8016498:	2800      	cmp	r0, #0
 801649a:	d1df      	bne.n	801645c <mbedtls_pk_parse_subpubkey+0x90>
    if( *p != end )
 801649c:	6833      	ldr	r3, [r6, #0]
 801649e:	429f      	cmp	r7, r3
 80164a0:	d1e9      	bne.n	8016476 <mbedtls_pk_parse_subpubkey+0xaa>
    if( ( ret = mbedtls_rsa_check_pubkey( rsa ) ) != 0 )
 80164a2:	4648      	mov	r0, r9
 80164a4:	f000 f97e 	bl	80167a4 <mbedtls_rsa_check_pubkey>
 80164a8:	b940      	cbnz	r0, 80164bc <mbedtls_pk_parse_subpubkey+0xf0>
    rsa->len = mbedtls_mpi_size( &rsa->N );
 80164aa:	4650      	mov	r0, sl
 80164ac:	f7f8 fbf3 	bl	800ec96 <mbedtls_mpi_size>
 80164b0:	f8c9 0004 	str.w	r0, [r9, #4]
    if( ret == 0 && *p != end )
 80164b4:	6833      	ldr	r3, [r6, #0]
 80164b6:	42bb      	cmp	r3, r7
 80164b8:	d1dd      	bne.n	8016476 <mbedtls_pk_parse_subpubkey+0xaa>
 80164ba:	e796      	b.n	80163ea <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 80164bc:	4c15      	ldr	r4, [pc, #84]	; (8016514 <mbedtls_pk_parse_subpubkey+0x148>)
 80164be:	e7d0      	b.n	8016462 <mbedtls_pk_parse_subpubkey+0x96>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 80164c0:	3b02      	subs	r3, #2
 80164c2:	2b01      	cmp	r3, #1
 80164c4:	d81d      	bhi.n	8016502 <mbedtls_pk_parse_subpubkey+0x136>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 80164c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80164ca:	a805      	add	r0, sp, #20
 80164cc:	f7ff fd8c 	bl	8015fe8 <pk_use_ecparams>
        if( ret == 0 )
 80164d0:	4604      	mov	r4, r0
 80164d2:	2800      	cmp	r0, #0
 80164d4:	d1c5      	bne.n	8016462 <mbedtls_pk_parse_subpubkey+0x96>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
 80164d6:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 80164da:	6832      	ldr	r2, [r6, #0]
 80164dc:	f109 0188 	add.w	r1, r9, #136	; 0x88
 80164e0:	1abb      	subs	r3, r7, r2
 80164e2:	4648      	mov	r0, r9
 80164e4:	9101      	str	r1, [sp, #4]
 80164e6:	f7fc fb81 	bl	8012bec <mbedtls_ecp_point_read_binary>
 80164ea:	9901      	ldr	r1, [sp, #4]
 80164ec:	4604      	mov	r4, r0
 80164ee:	b918      	cbnz	r0, 80164f8 <mbedtls_pk_parse_subpubkey+0x12c>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 80164f0:	4648      	mov	r0, r9
 80164f2:	f7fc fc07 	bl	8012d04 <mbedtls_ecp_check_pubkey>
 80164f6:	4604      	mov	r4, r0
    *p = (unsigned char *) end;
 80164f8:	6037      	str	r7, [r6, #0]
    if( ret == 0 && *p != end )
 80164fa:	2c00      	cmp	r4, #0
 80164fc:	f43f af75 	beq.w	80163ea <mbedtls_pk_parse_subpubkey+0x1e>
 8016500:	e7af      	b.n	8016462 <mbedtls_pk_parse_subpubkey+0x96>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8016502:	4c05      	ldr	r4, [pc, #20]	; (8016518 <mbedtls_pk_parse_subpubkey+0x14c>)
 8016504:	e7ad      	b.n	8016462 <mbedtls_pk_parse_subpubkey+0x96>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8016506:	4d02      	ldr	r5, [pc, #8]	; (8016510 <mbedtls_pk_parse_subpubkey+0x144>)
 8016508:	e76f      	b.n	80163ea <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 801650a:	4d03      	ldr	r5, [pc, #12]	; (8016518 <mbedtls_pk_parse_subpubkey+0x14c>)
 801650c:	e76d      	b.n	80163ea <mbedtls_pk_parse_subpubkey+0x1e>
 801650e:	bf00      	nop
 8016510:	ffffc49a 	.word	0xffffc49a
 8016514:	ffffc500 	.word	0xffffc500
 8016518:	ffffc380 	.word	0xffffc380

0801651c <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 801651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016520:	b089      	sub	sp, #36	; 0x24
 8016522:	4605      	mov	r5, r0
 8016524:	4617      	mov	r7, r2

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8016526:	a805      	add	r0, sp, #20
{
 8016528:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801652c:	460e      	mov	r6, r1
 801652e:	4698      	mov	r8, r3
    mbedtls_pem_init( &pem );
 8016530:	f7ff f971 	bl	8015816 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8016534:	2f00      	cmp	r7, #0
 8016536:	d139      	bne.n	80165ac <mbedtls_pk_parse_key+0x90>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 8016538:	463a      	mov	r2, r7
 801653a:	4631      	mov	r1, r6
 801653c:	4628      	mov	r0, r5
 801653e:	f7ff fed7 	bl	80162f0 <pk_parse_key_pkcs8_unencrypted_der>
 8016542:	2800      	cmp	r0, #0
 8016544:	f000 80b5 	beq.w	80166b2 <mbedtls_pk_parse_key+0x196>
        return( 0 );

    mbedtls_pk_free( pk );
 8016548:	4628      	mov	r0, r5
 801654a:	f7ff fade 	bl	8015b0a <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 801654e:	2001      	movs	r0, #1
 8016550:	f7ff faec 	bl	8015b2c <mbedtls_pk_info_from_type>
 8016554:	4601      	mov	r1, r0
 8016556:	2800      	cmp	r0, #0
 8016558:	d041      	beq.n	80165de <mbedtls_pk_parse_key+0xc2>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info                           ) ) != 0 ||
 801655a:	4628      	mov	r0, r5
 801655c:	f7ff faf2 	bl	8015b44 <mbedtls_pk_setup>
 8016560:	2800      	cmp	r0, #0
 8016562:	f040 80a6 	bne.w	80166b2 <mbedtls_pk_parse_key+0x196>
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) ) == 0 )
 8016566:	6868      	ldr	r0, [r5, #4]
 8016568:	463a      	mov	r2, r7
 801656a:	4631      	mov	r1, r6
 801656c:	f7ff fd5a 	bl	8016024 <pk_parse_key_pkcs1_der>
    if( ( ret = mbedtls_pk_setup( pk, pk_info                           ) ) != 0 ||
 8016570:	2800      	cmp	r0, #0
 8016572:	f000 809e 	beq.w	80166b2 <mbedtls_pk_parse_key+0x196>
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 8016576:	4628      	mov	r0, r5
 8016578:	f7ff fac7 	bl	8015b0a <mbedtls_pk_free>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY ) ) == NULL )
 801657c:	2002      	movs	r0, #2
 801657e:	f7ff fad5 	bl	8015b2c <mbedtls_pk_info_from_type>
 8016582:	4601      	mov	r1, r0
 8016584:	b358      	cbz	r0, 80165de <mbedtls_pk_parse_key+0xc2>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info                         ) ) != 0 ||
 8016586:	4628      	mov	r0, r5
 8016588:	f7ff fadc 	bl	8015b44 <mbedtls_pk_setup>
 801658c:	2800      	cmp	r0, #0
 801658e:	f040 8090 	bne.w	80166b2 <mbedtls_pk_parse_key+0x196>
        ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), key, keylen ) ) == 0 )
 8016592:	6868      	ldr	r0, [r5, #4]
 8016594:	463a      	mov	r2, r7
 8016596:	4631      	mov	r1, r6
 8016598:	f7ff fdc4 	bl	8016124 <pk_parse_key_sec1_der>
    if( ( ret = mbedtls_pk_setup( pk, pk_info                         ) ) != 0 ||
 801659c:	2800      	cmp	r0, #0
 801659e:	f000 8088 	beq.w	80166b2 <mbedtls_pk_parse_key+0x196>
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 80165a2:	4628      	mov	r0, r5
 80165a4:	f7ff fab1 	bl	8015b0a <mbedtls_pk_free>
#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80165a8:	4c43      	ldr	r4, [pc, #268]	; (80166b8 <mbedtls_pk_parse_key+0x19c>)
 80165aa:	e019      	b.n	80165e0 <mbedtls_pk_parse_key+0xc4>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80165ac:	f107 39ff 	add.w	r9, r7, #4294967295
 80165b0:	f816 3009 	ldrb.w	r3, [r6, r9]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d1bf      	bne.n	8016538 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 80165b8:	f10d 0a10 	add.w	sl, sp, #16
 80165bc:	e9cd ba01 	strd	fp, sl, [sp, #4]
 80165c0:	4a3e      	ldr	r2, [pc, #248]	; (80166bc <mbedtls_pk_parse_key+0x1a0>)
 80165c2:	493f      	ldr	r1, [pc, #252]	; (80166c0 <mbedtls_pk_parse_key+0x1a4>)
 80165c4:	f8cd 8000 	str.w	r8, [sp]
 80165c8:	4633      	mov	r3, r6
 80165ca:	a805      	add	r0, sp, #20
 80165cc:	f7ff f928 	bl	8015820 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 80165d0:	4604      	mov	r4, r0
 80165d2:	b9e0      	cbnz	r0, 801660e <mbedtls_pk_parse_key+0xf2>
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 80165d4:	2001      	movs	r0, #1
 80165d6:	f7ff faa9 	bl	8015b2c <mbedtls_pk_info_from_type>
 80165da:	4601      	mov	r1, r0
 80165dc:	b920      	cbnz	r0, 80165e8 <mbedtls_pk_parse_key+0xcc>
            return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80165de:	4c39      	ldr	r4, [pc, #228]	; (80166c4 <mbedtls_pk_parse_key+0x1a8>)
}
 80165e0:	4620      	mov	r0, r4
 80165e2:	b009      	add	sp, #36	; 0x24
 80165e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( ret = mbedtls_pk_setup( pk, pk_info                    ) ) != 0 ||
 80165e8:	4628      	mov	r0, r5
 80165ea:	f7ff faab 	bl	8015b44 <mbedtls_pk_setup>
 80165ee:	4604      	mov	r4, r0
 80165f0:	b930      	cbnz	r0, 8016600 <mbedtls_pk_parse_key+0xe4>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
 80165f2:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80165f6:	6868      	ldr	r0, [r5, #4]
 80165f8:	f7ff fd14 	bl	8016024 <pk_parse_key_pkcs1_der>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 80165fc:	4604      	mov	r4, r0
 80165fe:	b110      	cbz	r0, 8016606 <mbedtls_pk_parse_key+0xea>
            mbedtls_pk_free( pk );
 8016600:	4628      	mov	r0, r5
 8016602:	f7ff fa82 	bl	8015b0a <mbedtls_pk_free>
        mbedtls_pem_free( &pem );
 8016606:	a805      	add	r0, sp, #20
 8016608:	f7ff fa66 	bl	8015ad8 <mbedtls_pem_free>
        return( ret );
 801660c:	e7e8      	b.n	80165e0 <mbedtls_pk_parse_key+0xc4>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 801660e:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 8016612:	d101      	bne.n	8016618 <mbedtls_pk_parse_key+0xfc>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 8016614:	4c2c      	ldr	r4, [pc, #176]	; (80166c8 <mbedtls_pk_parse_key+0x1ac>)
 8016616:	e7e3      	b.n	80165e0 <mbedtls_pk_parse_key+0xc4>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8016618:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 801661c:	d101      	bne.n	8016622 <mbedtls_pk_parse_key+0x106>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 801661e:	4c2b      	ldr	r4, [pc, #172]	; (80166cc <mbedtls_pk_parse_key+0x1b0>)
 8016620:	e7de      	b.n	80165e0 <mbedtls_pk_parse_key+0xc4>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8016622:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8016626:	d1db      	bne.n	80165e0 <mbedtls_pk_parse_key+0xc4>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8016628:	f816 3009 	ldrb.w	r3, [r6, r9]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d183      	bne.n	8016538 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 8016630:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8016634:	4a26      	ldr	r2, [pc, #152]	; (80166d0 <mbedtls_pk_parse_key+0x1b4>)
 8016636:	4927      	ldr	r1, [pc, #156]	; (80166d4 <mbedtls_pk_parse_key+0x1b8>)
 8016638:	f8cd 8000 	str.w	r8, [sp]
 801663c:	4633      	mov	r3, r6
 801663e:	a805      	add	r0, sp, #20
 8016640:	f7ff f8ee 	bl	8015820 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8016644:	4604      	mov	r4, r0
 8016646:	b988      	cbnz	r0, 801666c <mbedtls_pk_parse_key+0x150>
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY ) ) == NULL )
 8016648:	2002      	movs	r0, #2
 801664a:	f7ff fa6f 	bl	8015b2c <mbedtls_pk_info_from_type>
 801664e:	4601      	mov	r1, r0
 8016650:	2800      	cmp	r0, #0
 8016652:	d0c4      	beq.n	80165de <mbedtls_pk_parse_key+0xc2>
        if( ( ret = mbedtls_pk_setup( pk, pk_info                   ) ) != 0 ||
 8016654:	4628      	mov	r0, r5
 8016656:	f7ff fa75 	bl	8015b44 <mbedtls_pk_setup>
 801665a:	4604      	mov	r4, r0
 801665c:	2800      	cmp	r0, #0
 801665e:	d1cf      	bne.n	8016600 <mbedtls_pk_parse_key+0xe4>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 8016660:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8016664:	6868      	ldr	r0, [r5, #4]
 8016666:	f7ff fd5d 	bl	8016124 <pk_parse_key_sec1_der>
 801666a:	e7c7      	b.n	80165fc <mbedtls_pk_parse_key+0xe0>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 801666c:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 8016670:	d0d0      	beq.n	8016614 <mbedtls_pk_parse_key+0xf8>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8016672:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 8016676:	d0d2      	beq.n	801661e <mbedtls_pk_parse_key+0x102>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8016678:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 801667c:	d1b0      	bne.n	80165e0 <mbedtls_pk_parse_key+0xc4>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 801667e:	f816 3009 	ldrb.w	r3, [r6, r9]
 8016682:	2b00      	cmp	r3, #0
 8016684:	f47f af58 	bne.w	8016538 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 8016688:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 801668c:	9300      	str	r3, [sp, #0]
 801668e:	4a12      	ldr	r2, [pc, #72]	; (80166d8 <mbedtls_pk_parse_key+0x1bc>)
 8016690:	4912      	ldr	r1, [pc, #72]	; (80166dc <mbedtls_pk_parse_key+0x1c0>)
 8016692:	4633      	mov	r3, r6
 8016694:	a805      	add	r0, sp, #20
 8016696:	f7ff f8c3 	bl	8015820 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 801669a:	4604      	mov	r4, r0
 801669c:	b928      	cbnz	r0, 80166aa <mbedtls_pk_parse_key+0x18e>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 801669e:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80166a2:	4628      	mov	r0, r5
 80166a4:	f7ff fe24 	bl	80162f0 <pk_parse_key_pkcs8_unencrypted_der>
 80166a8:	e7a8      	b.n	80165fc <mbedtls_pk_parse_key+0xe0>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80166aa:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80166ae:	d197      	bne.n	80165e0 <mbedtls_pk_parse_key+0xc4>
 80166b0:	e742      	b.n	8016538 <mbedtls_pk_parse_key+0x1c>
        return( 0 );
 80166b2:	2400      	movs	r4, #0
 80166b4:	e794      	b.n	80165e0 <mbedtls_pk_parse_key+0xc4>
 80166b6:	bf00      	nop
 80166b8:	ffffc300 	.word	0xffffc300
 80166bc:	08030c07 	.word	0x08030c07
 80166c0:	08030c25 	.word	0x08030c25
 80166c4:	ffffc380 	.word	0xffffc380
 80166c8:	ffffc480 	.word	0xffffc480
 80166cc:	ffffc400 	.word	0xffffc400
 80166d0:	08030c45 	.word	0x08030c45
 80166d4:	08030c62 	.word	0x08030c62
 80166d8:	08030c81 	.word	0x08030c81
 80166dc:	08030c9b 	.word	0x08030c9b

080166e0 <mbedtls_platform_set_calloc_free>:
void (*mbedtls_free)( void * )     = MBEDTLS_PLATFORM_STD_FREE;

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc = calloc_func;
 80166e0:	4b02      	ldr	r3, [pc, #8]	; (80166ec <mbedtls_platform_set_calloc_free+0xc>)
    mbedtls_free = free_func;
 80166e2:	e9c3 0100 	strd	r0, r1, [r3]
    return( 0 );
}
 80166e6:	2000      	movs	r0, #0
 80166e8:	4770      	bx	lr
 80166ea:	bf00      	nop
 80166ec:	200005a0 	.word	0x200005a0

080166f0 <mbedtls_zeroize>:
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80166f0:	4401      	add	r1, r0
 80166f2:	2300      	movs	r3, #0
 80166f4:	4288      	cmp	r0, r1
 80166f6:	d100      	bne.n	80166fa <mbedtls_zeroize+0xa>
}
 80166f8:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80166fa:	f800 3b01 	strb.w	r3, [r0], #1
 80166fe:	e7f9      	b.n	80166f4 <mbedtls_zeroize+0x4>

08016700 <mgf_mask>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static void mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8016700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016704:	b092      	sub	sp, #72	; 0x48
 8016706:	4604      	mov	r4, r0
 8016708:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801670a:	460d      	mov	r5, r1
 801670c:	4617      	mov	r7, r2
    unsigned char counter[4];
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 801670e:	2100      	movs	r1, #0
 8016710:	2240      	movs	r2, #64	; 0x40
 8016712:	a802      	add	r0, sp, #8
{
 8016714:	4698      	mov	r8, r3
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8016716:	f00b fedb 	bl	80224d0 <memset>
    memset( counter, 0, 4 );
 801671a:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 801671c:	6830      	ldr	r0, [r6, #0]
    memset( counter, 0, 4 );
 801671e:	9301      	str	r3, [sp, #4]
    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8016720:	f7fe fa5c 	bl	8014bdc <mbedtls_md_get_size>
 8016724:	4681      	mov	r9, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8016726:	b935      	cbnz	r5, 8016736 <mgf_mask+0x36>
        counter[3]++;

        dlen -= use_len;
    }

    mbedtls_zeroize( mask, sizeof( mask ) );
 8016728:	2140      	movs	r1, #64	; 0x40
 801672a:	a802      	add	r0, sp, #8
 801672c:	f7ff ffe0 	bl	80166f0 <mbedtls_zeroize>
}
 8016730:	b012      	add	sp, #72	; 0x48
 8016732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( dlen < hlen )
 8016736:	454d      	cmp	r5, r9
        mbedtls_md_starts( md_ctx );
 8016738:	4630      	mov	r0, r6
 801673a:	46aa      	mov	sl, r5
 801673c:	bf28      	it	cs
 801673e:	46ca      	movcs	sl, r9
 8016740:	f7fe f954 	bl	80149ec <mbedtls_md_starts>
        mbedtls_md_update( md_ctx, src, slen );
 8016744:	4642      	mov	r2, r8
 8016746:	4639      	mov	r1, r7
 8016748:	4630      	mov	r0, r6
 801674a:	f7fe f95d 	bl	8014a08 <mbedtls_md_update>
        mbedtls_md_update( md_ctx, counter, 4 );
 801674e:	2204      	movs	r2, #4
 8016750:	eb0d 0102 	add.w	r1, sp, r2
 8016754:	4630      	mov	r0, r6
 8016756:	f7fe f957 	bl	8014a08 <mbedtls_md_update>
        mbedtls_md_finish( md_ctx, mask );
 801675a:	a902      	add	r1, sp, #8
 801675c:	4630      	mov	r0, r6
 801675e:	f7fe f961 	bl	8014a24 <mbedtls_md_finish>
        for( i = 0; i < use_len; ++i )
 8016762:	aa02      	add	r2, sp, #8
 8016764:	eb04 010a 	add.w	r1, r4, sl
 8016768:	428c      	cmp	r4, r1
 801676a:	d107      	bne.n	801677c <mgf_mask+0x7c>
        counter[3]++;
 801676c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016770:	3301      	adds	r3, #1
 8016772:	f88d 3007 	strb.w	r3, [sp, #7]
        dlen -= use_len;
 8016776:	eba5 050a 	sub.w	r5, r5, sl
 801677a:	e7d4      	b.n	8016726 <mgf_mask+0x26>
            *p++ ^= mask[i];
 801677c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016780:	f812 3b01 	ldrb.w	r3, [r2], #1
 8016784:	4043      	eors	r3, r0
 8016786:	f804 3c01 	strb.w	r3, [r4, #-1]
        for( i = 0; i < use_len; ++i )
 801678a:	e7ed      	b.n	8016768 <mgf_mask+0x68>

0801678c <mbedtls_rsa_init>:
{
 801678c:	b570      	push	{r4, r5, r6, lr}
 801678e:	4604      	mov	r4, r0
 8016790:	460e      	mov	r6, r1
 8016792:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 8016794:	2100      	movs	r1, #0
 8016796:	22ac      	movs	r2, #172	; 0xac
 8016798:	f00b fe9a 	bl	80224d0 <memset>
    ctx->hash_id = hash_id;
 801679c:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
 80167a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080167a4 <mbedtls_rsa_check_pubkey>:
    if( !ctx->N.p || !ctx->E.p )
 80167a4:	6902      	ldr	r2, [r0, #16]
{
 80167a6:	b538      	push	{r3, r4, r5, lr}
 80167a8:	4604      	mov	r4, r0
    if( !ctx->N.p || !ctx->E.p )
 80167aa:	b302      	cbz	r2, 80167ee <mbedtls_rsa_check_pubkey+0x4a>
 80167ac:	69c3      	ldr	r3, [r0, #28]
 80167ae:	b1f3      	cbz	r3, 80167ee <mbedtls_rsa_check_pubkey+0x4a>
    if( ( ctx->N.p[0] & 1 ) == 0 ||
 80167b0:	6812      	ldr	r2, [r2, #0]
 80167b2:	07d2      	lsls	r2, r2, #31
 80167b4:	d51b      	bpl.n	80167ee <mbedtls_rsa_check_pubkey+0x4a>
        ( ctx->E.p[0] & 1 ) == 0 )
 80167b6:	681b      	ldr	r3, [r3, #0]
    if( ( ctx->N.p[0] & 1 ) == 0 ||
 80167b8:	07db      	lsls	r3, r3, #31
 80167ba:	d518      	bpl.n	80167ee <mbedtls_rsa_check_pubkey+0x4a>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 ||
 80167bc:	f100 0508 	add.w	r5, r0, #8
 80167c0:	4628      	mov	r0, r5
 80167c2:	f7f8 fa4c 	bl	800ec5e <mbedtls_mpi_bitlen>
 80167c6:	287f      	cmp	r0, #127	; 0x7f
 80167c8:	d911      	bls.n	80167ee <mbedtls_rsa_check_pubkey+0x4a>
        mbedtls_mpi_bitlen( &ctx->N ) > MBEDTLS_MPI_MAX_BITS )
 80167ca:	4628      	mov	r0, r5
 80167cc:	f7f8 fa47 	bl	800ec5e <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 ||
 80167d0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80167d4:	d80b      	bhi.n	80167ee <mbedtls_rsa_check_pubkey+0x4a>
    if( mbedtls_mpi_bitlen( &ctx->E ) < 2 ||
 80167d6:	3414      	adds	r4, #20
 80167d8:	4620      	mov	r0, r4
 80167da:	f7f8 fa40 	bl	800ec5e <mbedtls_mpi_bitlen>
 80167de:	2801      	cmp	r0, #1
 80167e0:	d905      	bls.n	80167ee <mbedtls_rsa_check_pubkey+0x4a>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 80167e2:	4629      	mov	r1, r5
 80167e4:	4620      	mov	r0, r4
 80167e6:	f7f8 fbd4 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_bitlen( &ctx->E ) < 2 ||
 80167ea:	2800      	cmp	r0, #0
 80167ec:	db01      	blt.n	80167f2 <mbedtls_rsa_check_pubkey+0x4e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80167ee:	4802      	ldr	r0, [pc, #8]	; (80167f8 <mbedtls_rsa_check_pubkey+0x54>)
}
 80167f0:	bd38      	pop	{r3, r4, r5, pc}
    return( 0 );
 80167f2:	2000      	movs	r0, #0
 80167f4:	e7fc      	b.n	80167f0 <mbedtls_rsa_check_pubkey+0x4c>
 80167f6:	bf00      	nop
 80167f8:	ffffbe00 	.word	0xffffbe00

080167fc <mbedtls_rsa_check_privkey>:
{
 80167fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016800:	b0a9      	sub	sp, #164	; 0xa4
 8016802:	4605      	mov	r5, r0
    if( ( ret = mbedtls_rsa_check_pubkey( ctx ) ) != 0 )
 8016804:	f7ff ffce 	bl	80167a4 <mbedtls_rsa_check_pubkey>
 8016808:	4604      	mov	r4, r0
 801680a:	2800      	cmp	r0, #0
 801680c:	f040 80cb 	bne.w	80169a6 <mbedtls_rsa_check_privkey+0x1aa>
    if( !ctx->P.p || !ctx->Q.p || !ctx->D.p )
 8016810:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8016812:	2b00      	cmp	r3, #0
 8016814:	f000 80f5 	beq.w	8016a02 <mbedtls_rsa_check_privkey+0x206>
 8016818:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 801681a:	2b00      	cmp	r3, #0
 801681c:	f000 80f1 	beq.w	8016a02 <mbedtls_rsa_check_privkey+0x206>
 8016820:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016822:	2b00      	cmp	r3, #0
 8016824:	f000 80ed 	beq.w	8016a02 <mbedtls_rsa_check_privkey+0x206>
    mbedtls_mpi_init( &PQ ); mbedtls_mpi_init( &DE ); mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 );
 8016828:	a801      	add	r0, sp, #4
 801682a:	f7f8 f8ec 	bl	800ea06 <mbedtls_mpi_init>
 801682e:	a804      	add	r0, sp, #16
 8016830:	f7f8 f8e9 	bl	800ea06 <mbedtls_mpi_init>
 8016834:	a807      	add	r0, sp, #28
 8016836:	f7f8 f8e6 	bl	800ea06 <mbedtls_mpi_init>
 801683a:	a80a      	add	r0, sp, #40	; 0x28
 801683c:	f7f8 f8e3 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_mpi_init( &H  ); mbedtls_mpi_init( &I  ); mbedtls_mpi_init( &G  ); mbedtls_mpi_init( &G2 );
 8016840:	a80d      	add	r0, sp, #52	; 0x34
 8016842:	f7f8 f8e0 	bl	800ea06 <mbedtls_mpi_init>
 8016846:	a810      	add	r0, sp, #64	; 0x40
 8016848:	f7f8 f8dd 	bl	800ea06 <mbedtls_mpi_init>
 801684c:	a813      	add	r0, sp, #76	; 0x4c
 801684e:	f7f8 f8da 	bl	800ea06 <mbedtls_mpi_init>
 8016852:	a816      	add	r0, sp, #88	; 0x58
 8016854:	f7f8 f8d7 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L1 ); mbedtls_mpi_init( &L2 ); mbedtls_mpi_init( &DP ); mbedtls_mpi_init( &DQ );
 8016858:	a819      	add	r0, sp, #100	; 0x64
 801685a:	f7f8 f8d4 	bl	800ea06 <mbedtls_mpi_init>
 801685e:	a81c      	add	r0, sp, #112	; 0x70
 8016860:	f7f8 f8d1 	bl	800ea06 <mbedtls_mpi_init>
 8016864:	a81f      	add	r0, sp, #124	; 0x7c
 8016866:	f7f8 f8ce 	bl	800ea06 <mbedtls_mpi_init>
 801686a:	a822      	add	r0, sp, #136	; 0x88
 801686c:	f7f8 f8cb 	bl	800ea06 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 8016870:	f105 072c 	add.w	r7, r5, #44	; 0x2c
    mbedtls_mpi_init( &QP );
 8016874:	a825      	add	r0, sp, #148	; 0x94
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 8016876:	f105 0638 	add.w	r6, r5, #56	; 0x38
    mbedtls_mpi_init( &QP );
 801687a:	f7f8 f8c4 	bl	800ea06 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 801687e:	4632      	mov	r2, r6
 8016880:	4639      	mov	r1, r7
 8016882:	a801      	add	r0, sp, #4
 8016884:	f7f8 fccf 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8016888:	4604      	mov	r4, r0
 801688a:	2800      	cmp	r0, #0
 801688c:	d15e      	bne.n	801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DE, &ctx->D, &ctx->E ) );
 801688e:	f105 0820 	add.w	r8, r5, #32
 8016892:	f105 0914 	add.w	r9, r5, #20
 8016896:	464a      	mov	r2, r9
 8016898:	4641      	mov	r1, r8
 801689a:	a804      	add	r0, sp, #16
 801689c:	f7f8 fcc3 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80168a0:	4604      	mov	r4, r0
 80168a2:	2800      	cmp	r0, #0
 80168a4:	d152      	bne.n	801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80168a6:	2201      	movs	r2, #1
 80168a8:	4639      	mov	r1, r7
 80168aa:	a807      	add	r0, sp, #28
 80168ac:	f7f8 fca5 	bl	800f1fa <mbedtls_mpi_sub_int>
 80168b0:	4604      	mov	r4, r0
 80168b2:	2800      	cmp	r0, #0
 80168b4:	d14a      	bne.n	801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 80168b6:	2201      	movs	r2, #1
 80168b8:	4631      	mov	r1, r6
 80168ba:	a80a      	add	r0, sp, #40	; 0x28
 80168bc:	f7f8 fc9d 	bl	800f1fa <mbedtls_mpi_sub_int>
 80168c0:	4604      	mov	r4, r0
 80168c2:	2800      	cmp	r0, #0
 80168c4:	d142      	bne.n	801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &P1, &Q1 ) );
 80168c6:	aa0a      	add	r2, sp, #40	; 0x28
 80168c8:	a907      	add	r1, sp, #28
 80168ca:	a80d      	add	r0, sp, #52	; 0x34
 80168cc:	f7f8 fcab 	bl	800f226 <mbedtls_mpi_mul_mpi>
 80168d0:	4604      	mov	r4, r0
 80168d2:	2800      	cmp	r0, #0
 80168d4:	d13a      	bne.n	801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );
 80168d6:	aa0d      	add	r2, sp, #52	; 0x34
 80168d8:	4649      	mov	r1, r9
 80168da:	a813      	add	r0, sp, #76	; 0x4c
 80168dc:	f7f9 f931 	bl	800fb42 <mbedtls_mpi_gcd>
 80168e0:	4604      	mov	r4, r0
 80168e2:	2800      	cmp	r0, #0
 80168e4:	d132      	bne.n	801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G2, &P1, &Q1 ) );
 80168e6:	aa0a      	add	r2, sp, #40	; 0x28
 80168e8:	a907      	add	r1, sp, #28
 80168ea:	a816      	add	r0, sp, #88	; 0x58
 80168ec:	f7f9 f929 	bl	800fb42 <mbedtls_mpi_gcd>
 80168f0:	4604      	mov	r4, r0
 80168f2:	bb58      	cbnz	r0, 801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &L1, &L2, &H, &G2 ) );
 80168f4:	ab16      	add	r3, sp, #88	; 0x58
 80168f6:	aa0d      	add	r2, sp, #52	; 0x34
 80168f8:	a91c      	add	r1, sp, #112	; 0x70
 80168fa:	a819      	add	r0, sp, #100	; 0x64
 80168fc:	f7f8 fd04 	bl	800f308 <mbedtls_mpi_div_mpi>
 8016900:	4604      	mov	r4, r0
 8016902:	bb18      	cbnz	r0, 801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &I, &DE, &L1  ) );
 8016904:	aa19      	add	r2, sp, #100	; 0x64
 8016906:	a904      	add	r1, sp, #16
 8016908:	a810      	add	r0, sp, #64	; 0x40
 801690a:	f7f8 feba 	bl	800f682 <mbedtls_mpi_mod_mpi>
 801690e:	4604      	mov	r4, r0
 8016910:	b9e0      	cbnz	r0, 801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DP, &ctx->D, &P1 ) );
 8016912:	aa07      	add	r2, sp, #28
 8016914:	4641      	mov	r1, r8
 8016916:	a81f      	add	r0, sp, #124	; 0x7c
 8016918:	f7f8 feb3 	bl	800f682 <mbedtls_mpi_mod_mpi>
 801691c:	4604      	mov	r4, r0
 801691e:	b9a8      	cbnz	r0, 801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DQ, &ctx->D, &Q1 ) );
 8016920:	aa0a      	add	r2, sp, #40	; 0x28
 8016922:	4641      	mov	r1, r8
 8016924:	a822      	add	r0, sp, #136	; 0x88
 8016926:	f7f8 feac 	bl	800f682 <mbedtls_mpi_mod_mpi>
 801692a:	4604      	mov	r4, r0
 801692c:	b970      	cbnz	r0, 801694c <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &QP, &ctx->Q, &ctx->P ) );
 801692e:	463a      	mov	r2, r7
 8016930:	4631      	mov	r1, r6
 8016932:	a825      	add	r0, sp, #148	; 0x94
 8016934:	f7f9 f9a2 	bl	800fc7c <mbedtls_mpi_inv_mod>
 8016938:	4604      	mov	r4, r0
 801693a:	b938      	cbnz	r0, 801694c <mbedtls_rsa_check_privkey+0x150>
    if( mbedtls_mpi_cmp_mpi( &PQ, &ctx->N ) != 0 ||
 801693c:	f105 0108 	add.w	r1, r5, #8
 8016940:	a801      	add	r0, sp, #4
 8016942:	f7f8 fb26 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8016946:	2800      	cmp	r0, #0
 8016948:	d031      	beq.n	80169ae <mbedtls_rsa_check_privkey+0x1b2>
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801694a:	4c2f      	ldr	r4, [pc, #188]	; (8016a08 <mbedtls_rsa_check_privkey+0x20c>)
    mbedtls_mpi_free( &PQ ); mbedtls_mpi_free( &DE ); mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 );
 801694c:	a801      	add	r0, sp, #4
 801694e:	f7f8 f861 	bl	800ea14 <mbedtls_mpi_free>
 8016952:	a804      	add	r0, sp, #16
 8016954:	f7f8 f85e 	bl	800ea14 <mbedtls_mpi_free>
 8016958:	a807      	add	r0, sp, #28
 801695a:	f7f8 f85b 	bl	800ea14 <mbedtls_mpi_free>
 801695e:	a80a      	add	r0, sp, #40	; 0x28
 8016960:	f7f8 f858 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &H  ); mbedtls_mpi_free( &I  ); mbedtls_mpi_free( &G  ); mbedtls_mpi_free( &G2 );
 8016964:	a80d      	add	r0, sp, #52	; 0x34
 8016966:	f7f8 f855 	bl	800ea14 <mbedtls_mpi_free>
 801696a:	a810      	add	r0, sp, #64	; 0x40
 801696c:	f7f8 f852 	bl	800ea14 <mbedtls_mpi_free>
 8016970:	a813      	add	r0, sp, #76	; 0x4c
 8016972:	f7f8 f84f 	bl	800ea14 <mbedtls_mpi_free>
 8016976:	a816      	add	r0, sp, #88	; 0x58
 8016978:	f7f8 f84c 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L1 ); mbedtls_mpi_free( &L2 ); mbedtls_mpi_free( &DP ); mbedtls_mpi_free( &DQ );
 801697c:	a819      	add	r0, sp, #100	; 0x64
 801697e:	f7f8 f849 	bl	800ea14 <mbedtls_mpi_free>
 8016982:	a81c      	add	r0, sp, #112	; 0x70
 8016984:	f7f8 f846 	bl	800ea14 <mbedtls_mpi_free>
 8016988:	a81f      	add	r0, sp, #124	; 0x7c
 801698a:	f7f8 f843 	bl	800ea14 <mbedtls_mpi_free>
 801698e:	a822      	add	r0, sp, #136	; 0x88
 8016990:	f7f8 f840 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &QP );
 8016994:	a825      	add	r0, sp, #148	; 0x94
 8016996:	f7f8 f83d 	bl	800ea14 <mbedtls_mpi_free>
    if( ret == MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 801699a:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 801699e:	d002      	beq.n	80169a6 <mbedtls_rsa_check_privkey+0x1aa>
    if( ret != 0 )
 80169a0:	b10c      	cbz	r4, 80169a6 <mbedtls_rsa_check_privkey+0x1aa>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED + ret );
 80169a2:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
}
 80169a6:	4620      	mov	r0, r4
 80169a8:	b029      	add	sp, #164	; 0xa4
 80169aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        mbedtls_mpi_cmp_mpi( &DP, &ctx->DP ) != 0 ||
 80169ae:	f105 0144 	add.w	r1, r5, #68	; 0x44
 80169b2:	a81f      	add	r0, sp, #124	; 0x7c
 80169b4:	f7f8 faed 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &PQ, &ctx->N ) != 0 ||
 80169b8:	2800      	cmp	r0, #0
 80169ba:	d1c6      	bne.n	801694a <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_mpi( &DQ, &ctx->DQ ) != 0 ||
 80169bc:	f105 0150 	add.w	r1, r5, #80	; 0x50
 80169c0:	a822      	add	r0, sp, #136	; 0x88
 80169c2:	f7f8 fae6 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &DP, &ctx->DP ) != 0 ||
 80169c6:	2800      	cmp	r0, #0
 80169c8:	d1bf      	bne.n	801694a <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_mpi( &QP, &ctx->QP ) != 0 ||
 80169ca:	f105 015c 	add.w	r1, r5, #92	; 0x5c
 80169ce:	a825      	add	r0, sp, #148	; 0x94
 80169d0:	f7f8 fadf 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &DQ, &ctx->DQ ) != 0 ||
 80169d4:	2800      	cmp	r0, #0
 80169d6:	d1b8      	bne.n	801694a <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &L2, 0 ) != 0 ||
 80169d8:	2100      	movs	r1, #0
 80169da:	a81c      	add	r0, sp, #112	; 0x70
 80169dc:	f7f8 fb1c 	bl	800f018 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( &QP, &ctx->QP ) != 0 ||
 80169e0:	2800      	cmp	r0, #0
 80169e2:	d1b2      	bne.n	801694a <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &I, 1 ) != 0 ||
 80169e4:	2101      	movs	r1, #1
 80169e6:	a810      	add	r0, sp, #64	; 0x40
 80169e8:	f7f8 fb16 	bl	800f018 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &L2, 0 ) != 0 ||
 80169ec:	2800      	cmp	r0, #0
 80169ee:	d1ac      	bne.n	801694a <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 80169f0:	2101      	movs	r1, #1
 80169f2:	a813      	add	r0, sp, #76	; 0x4c
 80169f4:	f7f8 fb10 	bl	800f018 <mbedtls_mpi_cmp_int>
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80169f8:	4b03      	ldr	r3, [pc, #12]	; (8016a08 <mbedtls_rsa_check_privkey+0x20c>)
 80169fa:	1e04      	subs	r4, r0, #0
 80169fc:	bf18      	it	ne
 80169fe:	461c      	movne	r4, r3
 8016a00:	e7a4      	b.n	801694c <mbedtls_rsa_check_privkey+0x150>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8016a02:	4c01      	ldr	r4, [pc, #4]	; (8016a08 <mbedtls_rsa_check_privkey+0x20c>)
 8016a04:	e7cf      	b.n	80169a6 <mbedtls_rsa_check_privkey+0x1aa>
 8016a06:	bf00      	nop
 8016a08:	ffffbe00 	.word	0xffffbe00

08016a0c <mbedtls_rsa_check_pub_priv>:
{
 8016a0c:	b538      	push	{r3, r4, r5, lr}
 8016a0e:	4605      	mov	r5, r0
 8016a10:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub ) != 0 ||
 8016a12:	f7ff fec7 	bl	80167a4 <mbedtls_rsa_check_pubkey>
 8016a16:	b988      	cbnz	r0, 8016a3c <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8016a18:	4620      	mov	r0, r4
 8016a1a:	f7ff feef 	bl	80167fc <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub ) != 0 ||
 8016a1e:	b968      	cbnz	r0, 8016a3c <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8016a20:	f104 0108 	add.w	r1, r4, #8
 8016a24:	f105 0008 	add.w	r0, r5, #8
 8016a28:	f7f8 fab3 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8016a2c:	b930      	cbnz	r0, 8016a3c <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 8016a2e:	f104 0114 	add.w	r1, r4, #20
 8016a32:	f105 0014 	add.w	r0, r5, #20
 8016a36:	f7f8 faac 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8016a3a:	b100      	cbz	r0, 8016a3e <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8016a3c:	4800      	ldr	r0, [pc, #0]	; (8016a40 <mbedtls_rsa_check_pub_priv+0x34>)
}
 8016a3e:	bd38      	pop	{r3, r4, r5, pc}
 8016a40:	ffffbe00 	.word	0xffffbe00

08016a44 <mbedtls_rsa_public>:
{
 8016a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a46:	4605      	mov	r5, r0
 8016a48:	b089      	sub	sp, #36	; 0x24
    mbedtls_mpi_init( &T );
 8016a4a:	a805      	add	r0, sp, #20
{
 8016a4c:	9103      	str	r1, [sp, #12]
 8016a4e:	4616      	mov	r6, r2
    mbedtls_mpi_init( &T );
 8016a50:	f7f7 ffd9 	bl	800ea06 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8016a54:	686a      	ldr	r2, [r5, #4]
 8016a56:	9903      	ldr	r1, [sp, #12]
 8016a58:	a805      	add	r0, sp, #20
 8016a5a:	f7f8 f922 	bl	800eca2 <mbedtls_mpi_read_binary>
 8016a5e:	4604      	mov	r4, r0
 8016a60:	b9d8      	cbnz	r0, 8016a9a <mbedtls_rsa_public+0x56>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8016a62:	f105 0308 	add.w	r3, r5, #8
 8016a66:	4619      	mov	r1, r3
 8016a68:	a805      	add	r0, sp, #20
 8016a6a:	9303      	str	r3, [sp, #12]
 8016a6c:	f7f8 fa91 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8016a70:	2800      	cmp	r0, #0
 8016a72:	9b03      	ldr	r3, [sp, #12]
 8016a74:	da1a      	bge.n	8016aac <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8016a76:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016a7a:	a905      	add	r1, sp, #20
 8016a7c:	9200      	str	r2, [sp, #0]
 8016a7e:	4608      	mov	r0, r1
 8016a80:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
 8016a84:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8016a86:	f7f8 fe2e 	bl	800f6e6 <mbedtls_mpi_exp_mod>
 8016a8a:	4604      	mov	r4, r0
 8016a8c:	b928      	cbnz	r0, 8016a9a <mbedtls_rsa_public+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8016a8e:	463a      	mov	r2, r7
 8016a90:	4631      	mov	r1, r6
 8016a92:	a805      	add	r0, sp, #20
 8016a94:	f7f8 f938 	bl	800ed08 <mbedtls_mpi_write_binary>
 8016a98:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 8016a9a:	a805      	add	r0, sp, #20
 8016a9c:	f7f7 ffba 	bl	800ea14 <mbedtls_mpi_free>
    if( ret != 0 )
 8016aa0:	b10c      	cbz	r4, 8016aa6 <mbedtls_rsa_public+0x62>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 8016aa2:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 8016aa6:	4620      	mov	r0, r4
 8016aa8:	b009      	add	sp, #36	; 0x24
 8016aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8016aac:	f06f 0403 	mvn.w	r4, #3
 8016ab0:	e7f3      	b.n	8016a9a <mbedtls_rsa_public+0x56>
	...

08016ab4 <mbedtls_rsa_private>:
{
 8016ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab8:	461e      	mov	r6, r3
    if( ctx->P.p == NULL || ctx->Q.p == NULL || ctx->D.p == NULL )
 8016aba:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 8016abc:	b09d      	sub	sp, #116	; 0x74
 8016abe:	4604      	mov	r4, r0
 8016ac0:	460d      	mov	r5, r1
 8016ac2:	4617      	mov	r7, r2
    if( ctx->P.p == NULL || ctx->Q.p == NULL || ctx->D.p == NULL )
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	f000 8179 	beq.w	8016dbc <mbedtls_rsa_private+0x308>
 8016aca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	f000 8175 	beq.w	8016dbc <mbedtls_rsa_private+0x308>
 8016ad2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	f000 8171 	beq.w	8016dbc <mbedtls_rsa_private+0x308>
    mbedtls_mpi_init( &T ); mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 8016ada:	a804      	add	r0, sp, #16
 8016adc:	f7f7 ff93 	bl	800ea06 <mbedtls_mpi_init>
 8016ae0:	a807      	add	r0, sp, #28
 8016ae2:	f7f7 ff90 	bl	800ea06 <mbedtls_mpi_init>
 8016ae6:	a80a      	add	r0, sp, #40	; 0x28
 8016ae8:	f7f7 ff8d 	bl	800ea06 <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 ); mbedtls_mpi_init( &R );
 8016aec:	a80d      	add	r0, sp, #52	; 0x34
 8016aee:	f7f7 ff8a 	bl	800ea06 <mbedtls_mpi_init>
 8016af2:	a810      	add	r0, sp, #64	; 0x40
 8016af4:	f7f7 ff87 	bl	800ea06 <mbedtls_mpi_init>
 8016af8:	a813      	add	r0, sp, #76	; 0x4c
 8016afa:	f7f7 ff84 	bl	800ea06 <mbedtls_mpi_init>
    if( f_rng != NULL )
 8016afe:	b12d      	cbz	r5, 8016b0c <mbedtls_rsa_private+0x58>
        mbedtls_mpi_init( &DP_blind );
 8016b00:	a816      	add	r0, sp, #88	; 0x58
 8016b02:	f7f7 ff80 	bl	800ea06 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8016b06:	a819      	add	r0, sp, #100	; 0x64
 8016b08:	f7f7 ff7d 	bl	800ea06 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8016b0c:	6862      	ldr	r2, [r4, #4]
 8016b0e:	4631      	mov	r1, r6
 8016b10:	a804      	add	r0, sp, #16
 8016b12:	f7f8 f8c6 	bl	800eca2 <mbedtls_mpi_read_binary>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	f040 80e0 	bne.w	8016cde <mbedtls_rsa_private+0x22a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8016b1e:	f104 0608 	add.w	r6, r4, #8
 8016b22:	4631      	mov	r1, r6
 8016b24:	a804      	add	r0, sp, #16
 8016b26:	f7f8 fa34 	bl	800ef92 <mbedtls_mpi_cmp_mpi>
 8016b2a:	2800      	cmp	r0, #0
 8016b2c:	f280 8141 	bge.w	8016db2 <mbedtls_rsa_private+0x2fe>
    mbedtls_mpi *DP = &ctx->DP;
 8016b30:	f104 0a44 	add.w	sl, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8016b34:	f104 0950 	add.w	r9, r4, #80	; 0x50
    if( f_rng != NULL )
 8016b38:	2d00      	cmp	r5, #0
 8016b3a:	f000 8089 	beq.w	8016c50 <mbedtls_rsa_private+0x19c>
    if( ctx->Vf.p != NULL )
 8016b3e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	f000 80ee 	beq.w	8016d24 <mbedtls_rsa_private+0x270>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8016b48:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8016b4c:	460a      	mov	r2, r1
 8016b4e:	4608      	mov	r0, r1
 8016b50:	9103      	str	r1, [sp, #12]
 8016b52:	f7f8 fb68 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8016b56:	4603      	mov	r3, r0
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	f040 80c0 	bne.w	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8016b5e:	9903      	ldr	r1, [sp, #12]
 8016b60:	4632      	mov	r2, r6
 8016b62:	4608      	mov	r0, r1
 8016b64:	f7f8 fd8d 	bl	800f682 <mbedtls_mpi_mod_mpi>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	2800      	cmp	r0, #0
 8016b6c:	f040 80b7 	bne.w	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 8016b70:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8016b74:	460a      	mov	r2, r1
 8016b76:	4608      	mov	r0, r1
 8016b78:	9103      	str	r1, [sp, #12]
 8016b7a:	f7f8 fb54 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	2800      	cmp	r0, #0
 8016b82:	f040 80ac 	bne.w	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 8016b86:	9903      	ldr	r1, [sp, #12]
 8016b88:	4632      	mov	r2, r6
 8016b8a:	4608      	mov	r0, r1
 8016b8c:	f7f8 fd79 	bl	800f682 <mbedtls_mpi_mod_mpi>
 8016b90:	4603      	mov	r3, r0
 8016b92:	2800      	cmp	r0, #0
 8016b94:	f040 80a3 	bne.w	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8016b98:	a904      	add	r1, sp, #16
 8016b9a:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8016b9e:	4608      	mov	r0, r1
 8016ba0:	f7f8 fb41 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	f040 8099 	bne.w	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8016bac:	a904      	add	r1, sp, #16
 8016bae:	4632      	mov	r2, r6
 8016bb0:	4608      	mov	r0, r1
 8016bb2:	f7f8 fd66 	bl	800f682 <mbedtls_mpi_mod_mpi>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	2800      	cmp	r0, #0
 8016bba:	f040 8090 	bne.w	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8016bbe:	2201      	movs	r2, #1
 8016bc0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8016bc4:	a80d      	add	r0, sp, #52	; 0x34
 8016bc6:	f7f8 fb18 	bl	800f1fa <mbedtls_mpi_sub_int>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	2800      	cmp	r0, #0
 8016bce:	f040 8086 	bne.w	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8016bd2:	2201      	movs	r2, #1
 8016bd4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8016bd8:	a810      	add	r0, sp, #64	; 0x40
 8016bda:	f7f8 fb0e 	bl	800f1fa <mbedtls_mpi_sub_int>
 8016bde:	4603      	mov	r3, r0
 8016be0:	2800      	cmp	r0, #0
 8016be2:	d17c      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8016be4:	463b      	mov	r3, r7
 8016be6:	462a      	mov	r2, r5
 8016be8:	211c      	movs	r1, #28
 8016bea:	a813      	add	r0, sp, #76	; 0x4c
 8016bec:	f7f9 f82d 	bl	800fc4a <mbedtls_mpi_fill_random>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	d173      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8016bf6:	aa13      	add	r2, sp, #76	; 0x4c
 8016bf8:	a90d      	add	r1, sp, #52	; 0x34
 8016bfa:	a816      	add	r0, sp, #88	; 0x58
 8016bfc:	f7f8 fb13 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8016c00:	4603      	mov	r3, r0
 8016c02:	2800      	cmp	r0, #0
 8016c04:	d16b      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8016c06:	a916      	add	r1, sp, #88	; 0x58
 8016c08:	4652      	mov	r2, sl
 8016c0a:	4608      	mov	r0, r1
 8016c0c:	f7f8 fab0 	bl	800f170 <mbedtls_mpi_add_mpi>
 8016c10:	4603      	mov	r3, r0
 8016c12:	2800      	cmp	r0, #0
 8016c14:	d163      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8016c16:	463b      	mov	r3, r7
 8016c18:	462a      	mov	r2, r5
 8016c1a:	211c      	movs	r1, #28
 8016c1c:	a813      	add	r0, sp, #76	; 0x4c
 8016c1e:	f7f9 f814 	bl	800fc4a <mbedtls_mpi_fill_random>
 8016c22:	4603      	mov	r3, r0
 8016c24:	2800      	cmp	r0, #0
 8016c26:	d15a      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8016c28:	aa13      	add	r2, sp, #76	; 0x4c
 8016c2a:	a910      	add	r1, sp, #64	; 0x40
 8016c2c:	a819      	add	r0, sp, #100	; 0x64
 8016c2e:	f7f8 fafa 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8016c32:	4603      	mov	r3, r0
 8016c34:	2800      	cmp	r0, #0
 8016c36:	d152      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8016c38:	a919      	add	r1, sp, #100	; 0x64
 8016c3a:	464a      	mov	r2, r9
 8016c3c:	4608      	mov	r0, r1
 8016c3e:	f7f8 fa97 	bl	800f170 <mbedtls_mpi_add_mpi>
 8016c42:	4603      	mov	r3, r0
 8016c44:	2800      	cmp	r0, #0
 8016c46:	d14a      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
        DQ = &DQ_blind;
 8016c48:	f10d 0964 	add.w	r9, sp, #100	; 0x64
        DP = &DP_blind;
 8016c4c:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T1, &T, DP, &ctx->P, &ctx->RP ) );
 8016c50:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8016c54:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8016c58:	9300      	str	r3, [sp, #0]
 8016c5a:	4652      	mov	r2, sl
 8016c5c:	4643      	mov	r3, r8
 8016c5e:	a904      	add	r1, sp, #16
 8016c60:	a807      	add	r0, sp, #28
 8016c62:	f7f8 fd40 	bl	800f6e6 <mbedtls_mpi_exp_mod>
 8016c66:	4603      	mov	r3, r0
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	d138      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T2, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8016c6c:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8016c70:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8016c74:	9300      	str	r3, [sp, #0]
 8016c76:	464a      	mov	r2, r9
 8016c78:	463b      	mov	r3, r7
 8016c7a:	a904      	add	r1, sp, #16
 8016c7c:	a80a      	add	r0, sp, #40	; 0x28
 8016c7e:	f7f8 fd32 	bl	800f6e6 <mbedtls_mpi_exp_mod>
 8016c82:	4603      	mov	r3, r0
 8016c84:	bb58      	cbnz	r0, 8016cde <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &T1, &T2 ) );
 8016c86:	aa0a      	add	r2, sp, #40	; 0x28
 8016c88:	a907      	add	r1, sp, #28
 8016c8a:	a804      	add	r0, sp, #16
 8016c8c:	f7f8 fa92 	bl	800f1b4 <mbedtls_mpi_sub_mpi>
 8016c90:	4603      	mov	r3, r0
 8016c92:	bb20      	cbnz	r0, 8016cde <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->QP ) );
 8016c94:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8016c98:	a904      	add	r1, sp, #16
 8016c9a:	a807      	add	r0, sp, #28
 8016c9c:	f7f8 fac3 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	b9e0      	cbnz	r0, 8016cde <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T1, &ctx->P ) );
 8016ca4:	4642      	mov	r2, r8
 8016ca6:	a907      	add	r1, sp, #28
 8016ca8:	a804      	add	r0, sp, #16
 8016caa:	f7f8 fcea 	bl	800f682 <mbedtls_mpi_mod_mpi>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	b9a8      	cbnz	r0, 8016cde <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->Q ) );
 8016cb2:	463a      	mov	r2, r7
 8016cb4:	a904      	add	r1, sp, #16
 8016cb6:	a807      	add	r0, sp, #28
 8016cb8:	f7f8 fab5 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	b970      	cbnz	r0, 8016cde <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &T2, &T1 ) );
 8016cc0:	aa07      	add	r2, sp, #28
 8016cc2:	a90a      	add	r1, sp, #40	; 0x28
 8016cc4:	a804      	add	r0, sp, #16
 8016cc6:	f7f8 fa53 	bl	800f170 <mbedtls_mpi_add_mpi>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	b938      	cbnz	r0, 8016cde <mbedtls_rsa_private+0x22a>
    if( f_rng != NULL )
 8016cce:	2d00      	cmp	r5, #0
 8016cd0:	d15d      	bne.n	8016d8e <mbedtls_rsa_private+0x2da>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8016cd2:	6862      	ldr	r2, [r4, #4]
 8016cd4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016cd6:	a804      	add	r0, sp, #16
 8016cd8:	f7f8 f816 	bl	800ed08 <mbedtls_mpi_write_binary>
 8016cdc:	4603      	mov	r3, r0
    mbedtls_mpi_free( &T ); mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8016cde:	a804      	add	r0, sp, #16
 8016ce0:	9303      	str	r3, [sp, #12]
 8016ce2:	f7f7 fe97 	bl	800ea14 <mbedtls_mpi_free>
 8016ce6:	a807      	add	r0, sp, #28
 8016ce8:	f7f7 fe94 	bl	800ea14 <mbedtls_mpi_free>
 8016cec:	a80a      	add	r0, sp, #40	; 0x28
 8016cee:	f7f7 fe91 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 ); mbedtls_mpi_free( &R );
 8016cf2:	a80d      	add	r0, sp, #52	; 0x34
 8016cf4:	f7f7 fe8e 	bl	800ea14 <mbedtls_mpi_free>
 8016cf8:	a810      	add	r0, sp, #64	; 0x40
 8016cfa:	f7f7 fe8b 	bl	800ea14 <mbedtls_mpi_free>
 8016cfe:	a813      	add	r0, sp, #76	; 0x4c
 8016d00:	f7f7 fe88 	bl	800ea14 <mbedtls_mpi_free>
    if( f_rng != NULL )
 8016d04:	9b03      	ldr	r3, [sp, #12]
 8016d06:	b135      	cbz	r5, 8016d16 <mbedtls_rsa_private+0x262>
        mbedtls_mpi_free( &DP_blind );
 8016d08:	a816      	add	r0, sp, #88	; 0x58
 8016d0a:	f7f7 fe83 	bl	800ea14 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8016d0e:	a819      	add	r0, sp, #100	; 0x64
 8016d10:	f7f7 fe80 	bl	800ea14 <mbedtls_mpi_free>
 8016d14:	9b03      	ldr	r3, [sp, #12]
    if( ret != 0 )
 8016d16:	b10b      	cbz	r3, 8016d1c <mbedtls_rsa_private+0x268>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8016d18:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	b01d      	add	sp, #116	; 0x74
 8016d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d24:	230c      	movs	r3, #12
 8016d26:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8016d28:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8016d2c:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        if( count++ > 10 )
 8016d30:	9b03      	ldr	r3, [sp, #12]
 8016d32:	3b01      	subs	r3, #1
 8016d34:	9303      	str	r3, [sp, #12]
 8016d36:	d03f      	beq.n	8016db8 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8016d38:	6861      	ldr	r1, [r4, #4]
 8016d3a:	463b      	mov	r3, r7
 8016d3c:	462a      	mov	r2, r5
 8016d3e:	3901      	subs	r1, #1
 8016d40:	4658      	mov	r0, fp
 8016d42:	f7f8 ff82 	bl	800fc4a <mbedtls_mpi_fill_random>
 8016d46:	4603      	mov	r3, r0
 8016d48:	2800      	cmp	r0, #0
 8016d4a:	d1c8      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8016d4c:	4632      	mov	r2, r6
 8016d4e:	4659      	mov	r1, fp
 8016d50:	4640      	mov	r0, r8
 8016d52:	f7f8 fef6 	bl	800fb42 <mbedtls_mpi_gcd>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2800      	cmp	r0, #0
 8016d5a:	d1c0      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8016d5c:	2101      	movs	r1, #1
 8016d5e:	4640      	mov	r0, r8
 8016d60:	f7f8 f95a 	bl	800f018 <mbedtls_mpi_cmp_int>
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d1e3      	bne.n	8016d30 <mbedtls_rsa_private+0x27c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8016d68:	4632      	mov	r2, r6
 8016d6a:	4659      	mov	r1, fp
 8016d6c:	4640      	mov	r0, r8
 8016d6e:	f7f8 ff85 	bl	800fc7c <mbedtls_mpi_inv_mod>
 8016d72:	4603      	mov	r3, r0
 8016d74:	2800      	cmp	r0, #0
 8016d76:	d1b2      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8016d78:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8016d7c:	9300      	str	r3, [sp, #0]
 8016d7e:	f104 0214 	add.w	r2, r4, #20
 8016d82:	4633      	mov	r3, r6
 8016d84:	4641      	mov	r1, r8
 8016d86:	4640      	mov	r0, r8
 8016d88:	f7f8 fcad 	bl	800f6e6 <mbedtls_mpi_exp_mod>
 8016d8c:	e700      	b.n	8016b90 <mbedtls_rsa_private+0xdc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8016d8e:	a904      	add	r1, sp, #16
 8016d90:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8016d94:	4608      	mov	r0, r1
 8016d96:	f7f8 fa46 	bl	800f226 <mbedtls_mpi_mul_mpi>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	2800      	cmp	r0, #0
 8016d9e:	d19e      	bne.n	8016cde <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8016da0:	a904      	add	r1, sp, #16
 8016da2:	4632      	mov	r2, r6
 8016da4:	4608      	mov	r0, r1
 8016da6:	f7f8 fc6c 	bl	800f682 <mbedtls_mpi_mod_mpi>
 8016daa:	4603      	mov	r3, r0
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d090      	beq.n	8016cd2 <mbedtls_rsa_private+0x21e>
 8016db0:	e795      	b.n	8016cde <mbedtls_rsa_private+0x22a>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8016db2:	f06f 0303 	mvn.w	r3, #3
 8016db6:	e792      	b.n	8016cde <mbedtls_rsa_private+0x22a>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8016db8:	4b01      	ldr	r3, [pc, #4]	; (8016dc0 <mbedtls_rsa_private+0x30c>)
 8016dba:	e790      	b.n	8016cde <mbedtls_rsa_private+0x22a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016dbc:	4b01      	ldr	r3, [pc, #4]	; (8016dc4 <mbedtls_rsa_private+0x310>)
 8016dbe:	e7ad      	b.n	8016d1c <mbedtls_rsa_private+0x268>
 8016dc0:	ffffbb80 	.word	0xffffbb80
 8016dc4:	ffffbf80 	.word	0xffffbf80

08016dc8 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8016dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dcc:	b08b      	sub	sp, #44	; 0x2c
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016dce:	2b01      	cmp	r3, #1
{
 8016dd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016dd4:	9102      	str	r1, [sp, #8]
 8016dd6:	4607      	mov	r7, r0
 8016dd8:	4693      	mov	fp, r2
 8016dda:	9303      	str	r3, [sp, #12]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016ddc:	d108      	bne.n	8016df0 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
 8016dde:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016de2:	2b01      	cmp	r3, #1
 8016de4:	d004      	beq.n	8016df0 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016de6:	4c40      	ldr	r4, [pc, #256]	; (8016ee8 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
    mbedtls_md_free( &md_ctx );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 8016de8:	4620      	mov	r0, r4
 8016dea:	b00b      	add	sp, #44	; 0x2c
 8016dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 8016df0:	9b02      	ldr	r3, [sp, #8]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d0f7      	beq.n	8016de6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8016df6:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
 8016dfa:	f7fd fd9f 	bl	801493c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8016dfe:	4682      	mov	sl, r0
 8016e00:	2800      	cmp	r0, #0
 8016e02:	d0f0      	beq.n	8016de6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    olen = ctx->len;
 8016e04:	687e      	ldr	r6, [r7, #4]
    hlen = mbedtls_md_get_size( md_info );
 8016e06:	f7fd fee9 	bl	8014bdc <mbedtls_md_get_size>
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8016e0a:	b202      	sxth	r2, r0
 8016e0c:	0053      	lsls	r3, r2, #1
 8016e0e:	9304      	str	r3, [sp, #16]
 8016e10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016e12:	3302      	adds	r3, #2
 8016e14:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016e18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016e1a:	4293      	cmp	r3, r2
    hlen = mbedtls_md_get_size( md_info );
 8016e1c:	4605      	mov	r5, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8016e1e:	d3e2      	bcc.n	8016de6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 8016e20:	42b3      	cmp	r3, r6
 8016e22:	d8e0      	bhi.n	8016de6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    memset( output, 0, olen );
 8016e24:	4632      	mov	r2, r6
 8016e26:	2100      	movs	r1, #0
    *p++ = 0;
 8016e28:	46c1      	mov	r9, r8
    memset( output, 0, olen );
 8016e2a:	4640      	mov	r0, r8
 8016e2c:	f00b fb50 	bl	80224d0 <memset>
    *p++ = 0;
 8016e30:	2300      	movs	r3, #0
 8016e32:	f809 3b01 	strb.w	r3, [r9], #1
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 8016e36:	462a      	mov	r2, r5
 8016e38:	9b02      	ldr	r3, [sp, #8]
 8016e3a:	4649      	mov	r1, r9
 8016e3c:	4658      	mov	r0, fp
 8016e3e:	4798      	blx	r3
 8016e40:	4604      	mov	r4, r0
 8016e42:	b110      	cbz	r0, 8016e4a <mbedtls_rsa_rsaes_oaep_encrypt+0x82>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8016e44:	f5a0 4489 	sub.w	r4, r0, #17536	; 0x4480
 8016e48:	e7ce      	b.n	8016de8 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    mbedtls_md( md_info, label, label_len, p );
 8016e4a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    p += hlen;
 8016e4e:	eb09 0305 	add.w	r3, r9, r5
    mbedtls_md( md_info, label, label_len, p );
 8016e52:	4650      	mov	r0, sl
 8016e54:	9305      	str	r3, [sp, #20]
 8016e56:	f7fd fdf3 	bl	8014a40 <mbedtls_md>
    p += olen - 2 * hlen - 2 - ilen;
 8016e5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016e5c:	1af2      	subs	r2, r6, r3
 8016e5e:	3a02      	subs	r2, #2
 8016e60:	9b04      	ldr	r3, [sp, #16]
 8016e62:	442a      	add	r2, r5
 8016e64:	1ad2      	subs	r2, r2, r3
 8016e66:	9b05      	ldr	r3, [sp, #20]
    *p++ = 1;
 8016e68:	2101      	movs	r1, #1
    p += olen - 2 * hlen - 2 - ilen;
 8016e6a:	1898      	adds	r0, r3, r2
    *p++ = 1;
 8016e6c:	5499      	strb	r1, [r3, r2]
    memcpy( p, input, ilen );
 8016e6e:	3001      	adds	r0, #1
 8016e70:	e9dd 2116 	ldrd	r2, r1, [sp, #88]	; 0x58
 8016e74:	f00b fb04 	bl	8022480 <memcpy>
    mbedtls_md_init( &md_ctx );
 8016e78:	a807      	add	r0, sp, #28
 8016e7a:	f7fd fd6b 	bl	8014954 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8016e7e:	4622      	mov	r2, r4
 8016e80:	4651      	mov	r1, sl
 8016e82:	a807      	add	r0, sp, #28
 8016e84:	f7fd fd90 	bl	80149a8 <mbedtls_md_setup>
 8016e88:	4604      	mov	r4, r0
 8016e8a:	b118      	cbz	r0, 8016e94 <mbedtls_rsa_rsaes_oaep_encrypt+0xcc>
        mbedtls_md_free( &md_ctx );
 8016e8c:	a807      	add	r0, sp, #28
 8016e8e:	f7fd fd67 	bl	8014960 <mbedtls_md_free>
        return( ret );
 8016e92:	e7a9      	b.n	8016de8 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 8016e94:	1c6c      	adds	r4, r5, #1
 8016e96:	3e01      	subs	r6, #1
 8016e98:	4444      	add	r4, r8
 8016e9a:	1b76      	subs	r6, r6, r5
 8016e9c:	ab07      	add	r3, sp, #28
 8016e9e:	9300      	str	r3, [sp, #0]
 8016ea0:	464a      	mov	r2, r9
 8016ea2:	462b      	mov	r3, r5
 8016ea4:	4631      	mov	r1, r6
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f7ff fc2a 	bl	8016700 <mgf_mask>
    mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 8016eac:	ab07      	add	r3, sp, #28
 8016eae:	9300      	str	r3, [sp, #0]
 8016eb0:	4622      	mov	r2, r4
 8016eb2:	4633      	mov	r3, r6
 8016eb4:	4629      	mov	r1, r5
 8016eb6:	4648      	mov	r0, r9
 8016eb8:	f7ff fc22 	bl	8016700 <mgf_mask>
    mbedtls_md_free( &md_ctx );
 8016ebc:	a807      	add	r0, sp, #28
 8016ebe:	f7fd fd4f 	bl	8014960 <mbedtls_md_free>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016ec2:	9b03      	ldr	r3, [sp, #12]
 8016ec4:	b933      	cbnz	r3, 8016ed4 <mbedtls_rsa_rsaes_oaep_encrypt+0x10c>
            ? mbedtls_rsa_public(  ctx, output, output )
 8016ec6:	4642      	mov	r2, r8
 8016ec8:	4641      	mov	r1, r8
 8016eca:	4638      	mov	r0, r7
 8016ecc:	f7ff fdba 	bl	8016a44 <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016ed0:	4604      	mov	r4, r0
 8016ed2:	e789      	b.n	8016de8 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
 8016ed4:	9902      	ldr	r1, [sp, #8]
 8016ed6:	f8cd 8000 	str.w	r8, [sp]
 8016eda:	4643      	mov	r3, r8
 8016edc:	465a      	mov	r2, fp
 8016ede:	4638      	mov	r0, r7
 8016ee0:	f7ff fde8 	bl	8016ab4 <mbedtls_rsa_private>
 8016ee4:	e7f4      	b.n	8016ed0 <mbedtls_rsa_rsaes_oaep_encrypt+0x108>
 8016ee6:	bf00      	nop
 8016ee8:	ffffbf80 	.word	0xffffbf80

08016eec <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8016eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef0:	4698      	mov	r8, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016ef2:	f1b8 0f01 	cmp.w	r8, #1
{
 8016ef6:	e9dd a30c 	ldrd	sl, r3, [sp, #48]	; 0x30
 8016efa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016efc:	4606      	mov	r6, r0
 8016efe:	460f      	mov	r7, r1
 8016f00:	4691      	mov	r9, r2
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016f02:	d103      	bne.n	8016f0c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
 8016f04:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8016f08:	2a00      	cmp	r2, #0
 8016f0a:	d15e      	bne.n	8016fca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 8016f0c:	2f00      	cmp	r7, #0
 8016f0e:	d05c      	beq.n	8016fca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d05a      	beq.n	8016fca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
 8016f14:	2d00      	cmp	r5, #0
 8016f16:	d058      	beq.n	8016fca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8016f18:	f11a 0f0c 	cmn.w	sl, #12
    olen = ctx->len;
 8016f1c:	6874      	ldr	r4, [r6, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8016f1e:	d854      	bhi.n	8016fca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
 8016f20:	f10a 020b 	add.w	r2, sl, #11
 8016f24:	42a2      	cmp	r2, r4
 8016f26:	d850      	bhi.n	8016fca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 8016f28:	4629      	mov	r1, r5
    nb_pad = olen - 3 - ilen;
 8016f2a:	eba4 040a 	sub.w	r4, r4, sl
    *p++ = 0;
 8016f2e:	2200      	movs	r2, #0
 8016f30:	f801 2b02 	strb.w	r2, [r1], #2
    nb_pad = olen - 3 - ilen;
 8016f34:	3c03      	subs	r4, #3
    if( mode == MBEDTLS_RSA_PUBLIC )
 8016f36:	f1b8 0f00 	cmp.w	r8, #0
 8016f3a:	d12d      	bne.n	8016f98 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xac>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 8016f3c:	2202      	movs	r2, #2
 8016f3e:	4414      	add	r4, r2
 8016f40:	706a      	strb	r2, [r5, #1]

        while( nb_pad-- > 0 )
 8016f42:	442c      	add	r4, r5
 8016f44:	428c      	cmp	r4, r1
 8016f46:	d112      	bne.n	8016f6e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
    }

    *p++ = 0;
 8016f48:	4608      	mov	r0, r1
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8016f50:	4619      	mov	r1, r3
 8016f52:	4652      	mov	r2, sl
 8016f54:	f00b fa94 	bl	8022480 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016f58:	f1b8 0f00 	cmp.w	r8, #0
 8016f5c:	d12b      	bne.n	8016fb6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xca>
            ? mbedtls_rsa_public(  ctx, output, output )
 8016f5e:	462a      	mov	r2, r5
 8016f60:	4629      	mov	r1, r5
 8016f62:	4630      	mov	r0, r6
}
 8016f64:	b003      	add	sp, #12
 8016f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            ? mbedtls_rsa_public(  ctx, output, output )
 8016f6a:	f7ff bd6b 	b.w	8016a44 <mbedtls_rsa_public>
 8016f6e:	f04f 0b64 	mov.w	fp, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 8016f72:	2201      	movs	r2, #1
 8016f74:	4648      	mov	r0, r9
 8016f76:	9301      	str	r3, [sp, #4]
 8016f78:	9100      	str	r1, [sp, #0]
 8016f7a:	47b8      	blx	r7
            } while( *p == 0 && --rng_dl && ret == 0 );
 8016f7c:	9900      	ldr	r1, [sp, #0]
 8016f7e:	9b01      	ldr	r3, [sp, #4]
 8016f80:	780a      	ldrb	r2, [r1, #0]
 8016f82:	bb22      	cbnz	r2, 8016fce <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe2>
 8016f84:	f1bb 0b01 	subs.w	fp, fp, #1
 8016f88:	d001      	beq.n	8016f8e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
 8016f8a:	2800      	cmp	r0, #0
 8016f8c:	d0f1      	beq.n	8016f72 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x86>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8016f8e:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
}
 8016f92:	b003      	add	sp, #12
 8016f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *p++ = MBEDTLS_RSA_SIGN;
 8016f98:	462a      	mov	r2, r5
 8016f9a:	2001      	movs	r0, #1
 8016f9c:	f802 0f01 	strb.w	r0, [r2, #1]!
        while( nb_pad-- > 0 )
 8016fa0:	1820      	adds	r0, r4, r0
 8016fa2:	4428      	add	r0, r5
            *p++ = 0xFF;
 8016fa4:	f04f 0cff 	mov.w	ip, #255	; 0xff
        while( nb_pad-- > 0 )
 8016fa8:	4282      	cmp	r2, r0
 8016faa:	d101      	bne.n	8016fb0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc4>
 8016fac:	4421      	add	r1, r4
 8016fae:	e7cb      	b.n	8016f48 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5c>
            *p++ = 0xFF;
 8016fb0:	f802 cf01 	strb.w	ip, [r2, #1]!
 8016fb4:	e7f8      	b.n	8016fa8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbc>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016fb6:	462b      	mov	r3, r5
 8016fb8:	464a      	mov	r2, r9
 8016fba:	4639      	mov	r1, r7
 8016fbc:	4630      	mov	r0, r6
 8016fbe:	950c      	str	r5, [sp, #48]	; 0x30
}
 8016fc0:	b003      	add	sp, #12
 8016fc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016fc6:	f7ff bd75 	b.w	8016ab4 <mbedtls_rsa_private>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016fca:	4803      	ldr	r0, [pc, #12]	; (8016fd8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xec>)
 8016fcc:	e7e1      	b.n	8016f92 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa6>
            if( rng_dl == 0 || ret != 0 )
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	d1dd      	bne.n	8016f8e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
            p++;
 8016fd2:	3101      	adds	r1, #1
 8016fd4:	e7b6      	b.n	8016f44 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x58>
 8016fd6:	bf00      	nop
 8016fd8:	ffffbf80 	.word	0xffffbf80

08016fdc <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8016fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8016fde:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8016fe2:	b087      	sub	sp, #28
 8016fe4:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016fe8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    switch( ctx->padding )
 8016fea:	b124      	cbz	r4, 8016ff6 <mbedtls_rsa_pkcs1_encrypt+0x1a>
 8016fec:	2c01      	cmp	r4, #1
 8016fee:	d007      	beq.n	8017000 <mbedtls_rsa_pkcs1_encrypt+0x24>
 8016ff0:	4808      	ldr	r0, [pc, #32]	; (8017014 <mbedtls_rsa_pkcs1_encrypt+0x38>)
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8016ff2:	b007      	add	sp, #28
 8016ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ff6:	b007      	add	sp, #28
 8016ff8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8016ffc:	f7ff bf76 	b.w	8016eec <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 8017000:	2400      	movs	r4, #0
 8017002:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8017006:	e9cd 4400 	strd	r4, r4, [sp]
 801700a:	9502      	str	r5, [sp, #8]
 801700c:	f7ff fedc 	bl	8016dc8 <mbedtls_rsa_rsaes_oaep_encrypt>
 8017010:	e7ef      	b.n	8016ff2 <mbedtls_rsa_pkcs1_encrypt+0x16>
 8017012:	bf00      	nop
 8017014:	ffffbf00 	.word	0xffffbf00

08017018 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 8017018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801701c:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8017020:	2b01      	cmp	r3, #1
{
 8017022:	f8dd b494 	ldr.w	fp, [sp, #1172]	; 0x494
 8017026:	4604      	mov	r4, r0
 8017028:	4699      	mov	r9, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801702a:	d109      	bne.n	8017040 <mbedtls_rsa_rsaes_oaep_decrypt+0x28>
 801702c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8017030:	2b01      	cmp	r3, #1
 8017032:	d005      	beq.n	8017040 <mbedtls_rsa_rsaes_oaep_decrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8017034:	4c57      	ldr	r4, [pc, #348]	; (8017194 <mbedtls_rsa_rsaes_oaep_decrypt+0x17c>)
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 8017036:	4620      	mov	r0, r4
 8017038:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 801703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ilen = ctx->len;
 8017040:	6865      	ldr	r5, [r4, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 8017042:	f1a5 0310 	sub.w	r3, r5, #16
 8017046:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 801704a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801704e:	d8f1      	bhi.n	8017034 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8017050:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 8017054:	f7fd fc72 	bl	801493c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8017058:	4607      	mov	r7, r0
 801705a:	2800      	cmp	r0, #0
 801705c:	d0ea      	beq.n	8017034 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    hlen = mbedtls_md_get_size( md_info );
 801705e:	f7fd fdbd 	bl	8014bdc <mbedtls_md_get_size>
    if( 2 * hlen + 2 > ilen )
 8017062:	f100 0a01 	add.w	sl, r0, #1
 8017066:	ebb5 0f4a 	cmp.w	r5, sl, lsl #1
    hlen = mbedtls_md_get_size( md_info );
 801706a:	4606      	mov	r6, r0
    if( 2 * hlen + 2 > ilen )
 801706c:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8017070:	d3e0      	bcc.n	8017034 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8017072:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017076:	ab18      	add	r3, sp, #96	; 0x60
 8017078:	f1b9 0f00 	cmp.w	r9, #0
 801707c:	d11d      	bne.n	80170ba <mbedtls_rsa_rsaes_oaep_decrypt+0xa2>
          ? mbedtls_rsa_public(  ctx, input, buf )
 801707e:	461a      	mov	r2, r3
 8017080:	4659      	mov	r1, fp
 8017082:	4620      	mov	r0, r4
 8017084:	f7ff fcde 	bl	8016a44 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8017088:	4604      	mov	r4, r0
    if( ret != 0 )
 801708a:	b960      	cbnz	r0, 80170a6 <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
    mbedtls_md_init( &md_ctx );
 801708c:	a805      	add	r0, sp, #20
 801708e:	f7fd fc61 	bl	8014954 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8017092:	4622      	mov	r2, r4
 8017094:	4639      	mov	r1, r7
 8017096:	a805      	add	r0, sp, #20
 8017098:	f7fd fc86 	bl	80149a8 <mbedtls_md_setup>
 801709c:	4604      	mov	r4, r0
 801709e:	b190      	cbz	r0, 80170c6 <mbedtls_rsa_rsaes_oaep_decrypt+0xae>
        mbedtls_md_free( &md_ctx );
 80170a0:	a805      	add	r0, sp, #20
 80170a2:	f7fd fc5d 	bl	8014960 <mbedtls_md_free>
    mbedtls_zeroize( buf, sizeof( buf ) );
 80170a6:	a818      	add	r0, sp, #96	; 0x60
 80170a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80170ac:	f7ff fb20 	bl	80166f0 <mbedtls_zeroize>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 80170b0:	2140      	movs	r1, #64	; 0x40
 80170b2:	a808      	add	r0, sp, #32
 80170b4:	f7ff fb1c 	bl	80166f0 <mbedtls_zeroize>
    return( ret );
 80170b8:	e7bd      	b.n	8017036 <mbedtls_rsa_rsaes_oaep_decrypt+0x1e>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80170ba:	9300      	str	r3, [sp, #0]
 80170bc:	4620      	mov	r0, r4
 80170be:	465b      	mov	r3, fp
 80170c0:	f7ff fcf8 	bl	8016ab4 <mbedtls_rsa_private>
 80170c4:	e7e0      	b.n	8017088 <mbedtls_rsa_rsaes_oaep_decrypt+0x70>
    mbedtls_md( md_info, label, label_len, lhash );
 80170c6:	f10d 0920 	add.w	r9, sp, #32
 80170ca:	4638      	mov	r0, r7
 80170cc:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80170d0:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 80170d4:	464b      	mov	r3, r9
    mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 80170d6:	af18      	add	r7, sp, #96	; 0x60
 80170d8:	f105 3bff 	add.w	fp, r5, #4294967295
    mbedtls_md( md_info, label, label_len, lhash );
 80170dc:	f7fd fcb0 	bl	8014a40 <mbedtls_md>
    mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 80170e0:	44ba      	add	sl, r7
 80170e2:	ebab 0b06 	sub.w	fp, fp, r6
 80170e6:	ab05      	add	r3, sp, #20
 80170e8:	9300      	str	r3, [sp, #0]
 80170ea:	4652      	mov	r2, sl
 80170ec:	465b      	mov	r3, fp
 80170ee:	4631      	mov	r1, r6
 80170f0:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 80170f4:	f7ff fb04 	bl	8016700 <mgf_mask>
    mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
 80170f8:	ab05      	add	r3, sp, #20
 80170fa:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 80170fe:	9300      	str	r3, [sp, #0]
 8017100:	4659      	mov	r1, fp
 8017102:	4633      	mov	r3, r6
 8017104:	4650      	mov	r0, sl
 8017106:	f7ff fafb 	bl	8016700 <mgf_mask>
    mbedtls_md_free( &md_ctx );
 801710a:	a805      	add	r0, sp, #20
 801710c:	f7fd fc28 	bl	8014960 <mbedtls_md_free>
    p += hlen; /* Skip seed */
 8017110:	f10d 0261 	add.w	r2, sp, #97	; 0x61
    bad |= *p++; /* First byte must be 0 */
 8017114:	783b      	ldrb	r3, [r7, #0]
    p += hlen; /* Skip seed */
 8017116:	1990      	adds	r0, r2, r6
    for( i = 0; i < hlen; i++ )
 8017118:	4622      	mov	r2, r4
 801711a:	42b2      	cmp	r2, r6
 801711c:	fa4f fc83 	sxtb.w	ip, r3
 8017120:	d320      	bcc.n	8017164 <mbedtls_rsa_rsaes_oaep_decrypt+0x14c>
 8017122:	4430      	add	r0, r6
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8017124:	eba5 0808 	sub.w	r8, r5, r8
    pad_done = 0;
 8017128:	2600      	movs	r6, #0
 801712a:	4603      	mov	r3, r0
 801712c:	4480      	add	r8, r0
    pad_len = 0;
 801712e:	4631      	mov	r1, r6
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8017130:	4598      	cmp	r8, r3
 8017132:	d120      	bne.n	8017176 <mbedtls_rsa_rsaes_oaep_decrypt+0x15e>
    bad |= *p++ ^ 0x01;
 8017134:	5c43      	ldrb	r3, [r0, r1]
 8017136:	f083 0301 	eor.w	r3, r3, #1
 801713a:	ea4c 0303 	orr.w	r3, ip, r3
    if( bad != 0 )
 801713e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017142:	d123      	bne.n	801718c <mbedtls_rsa_rsaes_oaep_decrypt+0x174>
    bad |= *p++ ^ 0x01;
 8017144:	3101      	adds	r1, #1
 8017146:	4401      	add	r1, r0
    if( ilen - ( p - buf ) > output_max_len )
 8017148:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 801714c:	1bca      	subs	r2, r1, r7
 801714e:	1aaa      	subs	r2, r5, r2
 8017150:	429a      	cmp	r2, r3
 8017152:	d81d      	bhi.n	8017190 <mbedtls_rsa_rsaes_oaep_decrypt+0x178>
    *olen = ilen - (p - buf);
 8017154:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    memcpy( output, p, *olen );
 8017158:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
    *olen = ilen - (p - buf);
 801715c:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 801715e:	f00b f98f 	bl	8022480 <memcpy>
    ret = 0;
 8017162:	e7a0      	b.n	80170a6 <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
        bad |= lhash[i] ^ *p++;
 8017164:	f819 3002 	ldrb.w	r3, [r9, r2]
 8017168:	5c81      	ldrb	r1, [r0, r2]
 801716a:	404b      	eors	r3, r1
 801716c:	ea4c 0303 	orr.w	r3, ip, r3
 8017170:	b2db      	uxtb	r3, r3
    for( i = 0; i < hlen; i++ )
 8017172:	3201      	adds	r2, #1
 8017174:	e7d1      	b.n	801711a <mbedtls_rsa_rsaes_oaep_decrypt+0x102>
        pad_done |= p[i];
 8017176:	f813 2b01 	ldrb.w	r2, [r3], #1
 801717a:	4316      	orrs	r6, r2
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 801717c:	4272      	negs	r2, r6
 801717e:	4332      	orrs	r2, r6
 8017180:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8017184:	f082 0201 	eor.w	r2, r2, #1
 8017188:	4411      	add	r1, r2
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 801718a:	e7d1      	b.n	8017130 <mbedtls_rsa_rsaes_oaep_decrypt+0x118>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 801718c:	4c02      	ldr	r4, [pc, #8]	; (8017198 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>)
 801718e:	e78a      	b.n	80170a6 <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8017190:	4c02      	ldr	r4, [pc, #8]	; (801719c <mbedtls_rsa_rsaes_oaep_decrypt+0x184>)
 8017192:	e788      	b.n	80170a6 <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
 8017194:	ffffbf80 	.word	0xffffbf80
 8017198:	ffffbf00 	.word	0xffffbf00
 801719c:	ffffbc00 	.word	0xffffbc00

080171a0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 80171a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171a4:	461f      	mov	r7, r3
 80171a6:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80171aa:	2f01      	cmp	r7, #1
{
 80171ac:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80171b0:	d103      	bne.n	80171ba <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a>
 80171b2:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 80171b6:	2c00      	cmp	r4, #0
 80171b8:	d175      	bne.n	80172a6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 80171ba:	6845      	ldr	r5, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80171bc:	f1a5 0410 	sub.w	r4, r5, #16
 80171c0:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
 80171c4:	d86f      	bhi.n	80172a6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 80171c6:	ae02      	add	r6, sp, #8
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80171c8:	2f00      	cmp	r7, #0
 80171ca:	d14d      	bne.n	8017268 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc8>
          ? mbedtls_rsa_public(  ctx, input, buf )
 80171cc:	4632      	mov	r2, r6
 80171ce:	4619      	mov	r1, r3
 80171d0:	f7ff fc38 	bl	8016a44 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80171d4:	4604      	mov	r4, r0

    if( ret != 0 )
 80171d6:	2800      	cmp	r0, #0
 80171d8:	d13c      	bne.n	8017254 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb4>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 80171da:	2f01      	cmp	r7, #1
 80171dc:	7871      	ldrb	r1, [r6, #1]
 80171de:	f996 2000 	ldrsb.w	r2, [r6]
 80171e2:	f1a5 0e03 	sub.w	lr, r5, #3
 80171e6:	d143      	bne.n	8017270 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd0>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 80171e8:	f081 0302 	eor.w	r3, r1, #2
 80171ec:	4313      	orrs	r3, r2
 80171ee:	b2db      	uxtb	r3, r3

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80171f0:	f10d 0109 	add.w	r1, sp, #9
    unsigned char *p, bad, pad_done = 0;
 80171f4:	4607      	mov	r7, r0
        for( i = 0; i < ilen - 3; i++ )
 80171f6:	4684      	mov	ip, r0
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80171f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80171fc:	f1c2 0800 	rsb	r8, r2, #0
 8017200:	ea42 0208 	orr.w	r2, r2, r8
 8017204:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8017208:	f082 0201 	eor.w	r2, r2, #1
 801720c:	4317      	orrs	r7, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 801720e:	427a      	negs	r2, r7
 8017210:	433a      	orrs	r2, r7
 8017212:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        for( i = 0; i < ilen - 3; i++ )
 8017216:	f10c 0c01 	add.w	ip, ip, #1
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 801721a:	f082 0201 	eor.w	r2, r2, #1
        for( i = 0; i < ilen - 3; i++ )
 801721e:	45e6      	cmp	lr, ip
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8017220:	4410      	add	r0, r2
        for( i = 0; i < ilen - 3; i++ )
 8017222:	d8e9      	bhi.n	80171f8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x58>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 8017224:	f10d 020a 	add.w	r2, sp, #10
 8017228:	1c41      	adds	r1, r0, #1
 801722a:	4411      	add	r1, r2
 801722c:	5c12      	ldrb	r2, [r2, r0]
 801722e:	4313      	orrs	r3, r2
    }

    bad |= ( pad_count < 8 );
 8017230:	2807      	cmp	r0, #7
 8017232:	bf98      	it	ls
 8017234:	f043 0301 	orrls.w	r3, r3, #1

    if( bad )
 8017238:	bb8b      	cbnz	r3, 801729e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xfe>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 801723a:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 801723e:	1b8a      	subs	r2, r1, r6
 8017240:	1aaa      	subs	r2, r5, r2
 8017242:	429a      	cmp	r2, r3
 8017244:	d82d      	bhi.n	80172a2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x102>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8017246:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 801724a:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    *olen = ilen - (p - buf);
 801724e:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8017250:	f00b f916 	bl	8022480 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8017254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017258:	4630      	mov	r0, r6
 801725a:	f7ff fa49 	bl	80166f0 <mbedtls_zeroize>

    return( ret );
}
 801725e:	4620      	mov	r0, r4
 8017260:	f50d 6d81 	add.w	sp, sp, #1032	; 0x408
 8017264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8017268:	9600      	str	r6, [sp, #0]
 801726a:	f7ff fc23 	bl	8016ab4 <mbedtls_rsa_private>
 801726e:	e7b1      	b.n	80171d4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x34>
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8017270:	f081 0301 	eor.w	r3, r1, #1
 8017274:	4313      	orrs	r3, r2
 8017276:	b2db      	uxtb	r3, r3
        for( i = 0; i < ilen - 3; i++ )
 8017278:	f10d 0209 	add.w	r2, sp, #9
    unsigned char *p, bad, pad_done = 0;
 801727c:	4607      	mov	r7, r0
        for( i = 0; i < ilen - 3; i++ )
 801727e:	4601      	mov	r1, r0
            pad_done |= ( p[i] != 0xFF );
 8017280:	f812 cf01 	ldrb.w	ip, [r2, #1]!
        for( i = 0; i < ilen - 3; i++ )
 8017284:	3101      	adds	r1, #1
            pad_done |= ( p[i] != 0xFF );
 8017286:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801728a:	bf18      	it	ne
 801728c:	f047 0701 	orrne.w	r7, r7, #1
            pad_count += ( pad_done == 0 );
 8017290:	f087 0c01 	eor.w	ip, r7, #1
        for( i = 0; i < ilen - 3; i++ )
 8017294:	458e      	cmp	lr, r1
            pad_count += ( pad_done == 0 );
 8017296:	fa50 f08c 	uxtab	r0, r0, ip
        for( i = 0; i < ilen - 3; i++ )
 801729a:	d8f1      	bhi.n	8017280 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xe0>
 801729c:	e7c2      	b.n	8017224 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 801729e:	4c03      	ldr	r4, [pc, #12]	; (80172ac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10c>)
 80172a0:	e7d8      	b.n	8017254 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb4>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 80172a2:	4c03      	ldr	r4, [pc, #12]	; (80172b0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x110>)
 80172a4:	e7d6      	b.n	8017254 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80172a6:	4c03      	ldr	r4, [pc, #12]	; (80172b4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>)
 80172a8:	e7d9      	b.n	801725e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xbe>
 80172aa:	bf00      	nop
 80172ac:	ffffbf00 	.word	0xffffbf00
 80172b0:	ffffbc00 	.word	0xffffbc00
 80172b4:	ffffbf80 	.word	0xffffbf80

080172b8 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 80172b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 80172ba:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 80172be:	b087      	sub	sp, #28
 80172c0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 80172c4:	e9dd 7c0e 	ldrd	r7, ip, [sp, #56]	; 0x38
    switch( ctx->padding )
 80172c8:	b124      	cbz	r4, 80172d4 <mbedtls_rsa_pkcs1_decrypt+0x1c>
 80172ca:	2c01      	cmp	r4, #1
 80172cc:	d007      	beq.n	80172de <mbedtls_rsa_pkcs1_decrypt+0x26>
 80172ce:	4809      	ldr	r0, [pc, #36]	; (80172f4 <mbedtls_rsa_pkcs1_decrypt+0x3c>)
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80172d0:	b007      	add	sp, #28
 80172d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172d4:	b007      	add	sp, #28
 80172d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 80172da:	f7ff bf61 	b.w	80171a0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 80172de:	2400      	movs	r4, #0
 80172e0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80172e4:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80172e8:	e9cd 4400 	strd	r4, r4, [sp]
 80172ec:	f7ff fe94 	bl	8017018 <mbedtls_rsa_rsaes_oaep_decrypt>
 80172f0:	e7ee      	b.n	80172d0 <mbedtls_rsa_pkcs1_decrypt+0x18>
 80172f2:	bf00      	nop
 80172f4:	ffffbf00 	.word	0xffffbf00

080172f8 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80172f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172fc:	ed2d 8b02 	vpush	{d8}
 8017300:	b09b      	sub	sp, #108	; 0x6c
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8017302:	2b01      	cmp	r3, #1
{
 8017304:	4607      	mov	r7, r0
 8017306:	ee08 2a10 	vmov	s16, r2
 801730a:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 801730e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8017310:	9102      	str	r1, [sp, #8]
 8017312:	9303      	str	r3, [sp, #12]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8017314:	d10b      	bne.n	801732e <mbedtls_rsa_rsassa_pss_sign+0x36>
 8017316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801731a:	2b01      	cmp	r3, #1
 801731c:	d007      	beq.n	801732e <mbedtls_rsa_rsassa_pss_sign+0x36>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801731e:	f8df a154 	ldr.w	sl, [pc, #340]	; 8017474 <mbedtls_rsa_rsassa_pss_sign+0x17c>
    *p++ = 0xBC;

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
}
 8017322:	4650      	mov	r0, sl
 8017324:	b01b      	add	sp, #108	; 0x6c
 8017326:	ecbd 8b02 	vpop	{d8}
 801732a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 801732e:	9b02      	ldr	r3, [sp, #8]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d0f4      	beq.n	801731e <mbedtls_rsa_rsassa_pss_sign+0x26>
    olen = ctx->len;
 8017334:	f8d7 8004 	ldr.w	r8, [r7, #4]
    if( md_alg != MBEDTLS_MD_NONE )
 8017338:	b130      	cbz	r0, 8017348 <mbedtls_rsa_rsassa_pss_sign+0x50>
        md_info = mbedtls_md_info_from_type( md_alg );
 801733a:	f7fd faff 	bl	801493c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 801733e:	2800      	cmp	r0, #0
 8017340:	d0ed      	beq.n	801731e <mbedtls_rsa_rsassa_pss_sign+0x26>
        hashlen = mbedtls_md_get_size( md_info );
 8017342:	f7fd fc4b 	bl	8014bdc <mbedtls_md_get_size>
 8017346:	9027      	str	r0, [sp, #156]	; 0x9c
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8017348:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
 801734c:	f7fd faf6 	bl	801493c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8017350:	4682      	mov	sl, r0
 8017352:	2800      	cmp	r0, #0
 8017354:	d0e3      	beq.n	801731e <mbedtls_rsa_rsassa_pss_sign+0x26>
    hlen = mbedtls_md_get_size( md_info );
 8017356:	f7fd fc41 	bl	8014bdc <mbedtls_md_get_size>
    if( olen < hlen + slen + 2 )
 801735a:	1c43      	adds	r3, r0, #1
 801735c:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
    hlen = mbedtls_md_get_size( md_info );
 8017360:	4604      	mov	r4, r0
    if( olen < hlen + slen + 2 )
 8017362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8017366:	d3da      	bcc.n	801731e <mbedtls_rsa_rsassa_pss_sign+0x26>
    memset( sig, 0, olen );
 8017368:	4642      	mov	r2, r8
 801736a:	2100      	movs	r1, #0
 801736c:	4630      	mov	r0, r6
 801736e:	f00b f8af 	bl	80224d0 <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 8017372:	ee18 0a10 	vmov	r0, s16
 8017376:	9b02      	ldr	r3, [sp, #8]
 8017378:	4622      	mov	r2, r4
 801737a:	a90a      	add	r1, sp, #40	; 0x28
 801737c:	4798      	blx	r3
 801737e:	b110      	cbz	r0, 8017386 <mbedtls_rsa_rsassa_pss_sign+0x8e>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8017380:	f5a0 4a89 	sub.w	sl, r0, #17536	; 0x4480
 8017384:	e7cd      	b.n	8017322 <mbedtls_rsa_rsassa_pss_sign+0x2a>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8017386:	f107 0b08 	add.w	fp, r7, #8
 801738a:	9005      	str	r0, [sp, #20]
 801738c:	4658      	mov	r0, fp
 801738e:	f7f7 fc66 	bl	800ec5e <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 8017392:	eba8 0505 	sub.w	r5, r8, r5
 8017396:	1972      	adds	r2, r6, r5
    *p++ = 0x01;
 8017398:	f102 0901 	add.w	r9, r2, #1
 801739c:	2201      	movs	r2, #1
 801739e:	5572      	strb	r2, [r6, r5]
    memcpy( p, salt, slen );
 80173a0:	a90a      	add	r1, sp, #40	; 0x28
 80173a2:	4622      	mov	r2, r4
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80173a4:	9004      	str	r0, [sp, #16]
    mbedtls_md_init( &md_ctx );
 80173a6:	ad07      	add	r5, sp, #28
    memcpy( p, salt, slen );
 80173a8:	4648      	mov	r0, r9
 80173aa:	f00b f869 	bl	8022480 <memcpy>
    mbedtls_md_init( &md_ctx );
 80173ae:	4628      	mov	r0, r5
 80173b0:	f7fd fad0 	bl	8014954 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80173b4:	9b05      	ldr	r3, [sp, #20]
 80173b6:	4651      	mov	r1, sl
 80173b8:	461a      	mov	r2, r3
 80173ba:	4628      	mov	r0, r5
 80173bc:	f7fd faf4 	bl	80149a8 <mbedtls_md_setup>
 80173c0:	4682      	mov	sl, r0
 80173c2:	b118      	cbz	r0, 80173cc <mbedtls_rsa_rsassa_pss_sign+0xd4>
        mbedtls_md_free( &md_ctx );
 80173c4:	4628      	mov	r0, r5
 80173c6:	f7fd facb 	bl	8014960 <mbedtls_md_free>
        return( ret );
 80173ca:	e7aa      	b.n	8017322 <mbedtls_rsa_rsassa_pss_sign+0x2a>
    p += slen;
 80173cc:	eb09 0a04 	add.w	sl, r9, r4
    mbedtls_md_starts( &md_ctx );
 80173d0:	4628      	mov	r0, r5
 80173d2:	f7fd fb0b 	bl	80149ec <mbedtls_md_starts>
    mbedtls_md_update( &md_ctx, p, 8 );
 80173d6:	2208      	movs	r2, #8
 80173d8:	4651      	mov	r1, sl
 80173da:	4628      	mov	r0, r5
 80173dc:	f7fd fb14 	bl	8014a08 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, hash, hashlen );
 80173e0:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 80173e4:	4628      	mov	r0, r5
 80173e6:	f7fd fb0f 	bl	8014a08 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, salt, slen );
 80173ea:	4622      	mov	r2, r4
 80173ec:	a90a      	add	r1, sp, #40	; 0x28
 80173ee:	4628      	mov	r0, r5
 80173f0:	f7fd fb0a 	bl	8014a08 <mbedtls_md_update>
    mbedtls_md_finish( &md_ctx, p );
 80173f4:	4651      	mov	r1, sl
 80173f6:	4628      	mov	r0, r5
 80173f8:	f7fd fb14 	bl	8014a24 <mbedtls_md_finish>
    mbedtls_zeroize( salt, sizeof( salt ) );
 80173fc:	2140      	movs	r1, #64	; 0x40
 80173fe:	a80a      	add	r0, sp, #40	; 0x28
 8017400:	f7ff f976 	bl	80166f0 <mbedtls_zeroize>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8017404:	9b04      	ldr	r3, [sp, #16]
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 8017406:	9500      	str	r5, [sp, #0]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8017408:	1e58      	subs	r0, r3, #1
    if( msb % 8 == 0 )
 801740a:	f010 0f07 	tst.w	r0, #7
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 801740e:	f108 31ff 	add.w	r1, r8, #4294967295
    if( msb % 8 == 0 )
 8017412:	bf0c      	ite	eq
 8017414:	2001      	moveq	r0, #1
 8017416:	2000      	movne	r0, #0
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 8017418:	1b09      	subs	r1, r1, r4
 801741a:	4623      	mov	r3, r4
 801741c:	1a09      	subs	r1, r1, r0
 801741e:	4652      	mov	r2, sl
 8017420:	4430      	add	r0, r6
 8017422:	f7ff f96d 	bl	8016700 <mgf_mask>
    mbedtls_md_free( &md_ctx );
 8017426:	4628      	mov	r0, r5
 8017428:	f7fd fa9a 	bl	8014960 <mbedtls_md_free>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 801742c:	4658      	mov	r0, fp
 801742e:	f7f7 fc16 	bl	800ec5e <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8017432:	ebc0 00c8 	rsb	r0, r0, r8, lsl #3
 8017436:	7833      	ldrb	r3, [r6, #0]
 8017438:	3001      	adds	r0, #1
 801743a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801743e:	fa48 f800 	asr.w	r8, r8, r0
 8017442:	ea08 0803 	and.w	r8, r8, r3
    *p++ = 0xBC;
 8017446:	23bc      	movs	r3, #188	; 0xbc
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8017448:	f886 8000 	strb.w	r8, [r6]
    *p++ = 0xBC;
 801744c:	f809 3014 	strb.w	r3, [r9, r4, lsl #1]
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 8017450:	9b03      	ldr	r3, [sp, #12]
 8017452:	b933      	cbnz	r3, 8017462 <mbedtls_rsa_rsassa_pss_sign+0x16a>
            ? mbedtls_rsa_public(  ctx, sig, sig )
 8017454:	4632      	mov	r2, r6
 8017456:	4631      	mov	r1, r6
 8017458:	4638      	mov	r0, r7
 801745a:	f7ff faf3 	bl	8016a44 <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 801745e:	4682      	mov	sl, r0
 8017460:	e75f      	b.n	8017322 <mbedtls_rsa_rsassa_pss_sign+0x2a>
 8017462:	ee18 2a10 	vmov	r2, s16
 8017466:	9902      	ldr	r1, [sp, #8]
 8017468:	9600      	str	r6, [sp, #0]
 801746a:	4633      	mov	r3, r6
 801746c:	4638      	mov	r0, r7
 801746e:	f7ff fb21 	bl	8016ab4 <mbedtls_rsa_private>
 8017472:	e7f4      	b.n	801745e <mbedtls_rsa_rsassa_pss_sign+0x166>
 8017474:	ffffbf80 	.word	0xffffbf80

08017478 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8017478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801747c:	ed2d 8b02 	vpush	{d8}
 8017480:	b089      	sub	sp, #36	; 0x24
 8017482:	4691      	mov	r9, r2
    size_t i;
    unsigned char diff;
    volatile unsigned char diff_no_optimize;
    int ret;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017484:	2b01      	cmp	r3, #1
    size_t nb_pad, olen, oid_size = 0;
 8017486:	f04f 0200 	mov.w	r2, #0
    const char *oid = NULL;
 801748a:	e9cd 2206 	strd	r2, r2, [sp, #24]
{
 801748e:	ee08 1a10 	vmov	s16, r1
 8017492:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 8017496:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 801749a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801749c:	4604      	mov	r4, r0
 801749e:	469a      	mov	sl, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80174a0:	d109      	bne.n	80174b6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
 80174a2:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 80174a6:	b132      	cbz	r2, 80174b6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80174a8:	4d56      	ldr	r5, [pc, #344]	; (8017604 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x18c>)
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80174aa:	4628      	mov	r0, r5
 80174ac:	b009      	add	sp, #36	; 0x24
 80174ae:	ecbd 8b02 	vpop	{d8}
 80174b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    olen = ctx->len;
 80174b6:	f8d4 b004 	ldr.w	fp, [r4, #4]
    nb_pad = olen - 3;
 80174ba:	f1ab 0503 	sub.w	r5, fp, #3
    if( md_alg != MBEDTLS_MD_NONE )
 80174be:	b19f      	cbz	r7, 80174e8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x70>
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80174c0:	4638      	mov	r0, r7
 80174c2:	f7fd fa3b 	bl	801493c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80174c6:	4680      	mov	r8, r0
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d0ed      	beq.n	80174a8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80174cc:	aa06      	add	r2, sp, #24
 80174ce:	a907      	add	r1, sp, #28
 80174d0:	4638      	mov	r0, r7
 80174d2:	f7fe f915 	bl	8015700 <mbedtls_oid_get_oid_by_md>
 80174d6:	2800      	cmp	r0, #0
 80174d8:	d1e6      	bne.n	80174a8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
        nb_pad -= 10 + oid_size;
 80174da:	9a06      	ldr	r2, [sp, #24]
        hashlen = mbedtls_md_get_size( md_info );
 80174dc:	4640      	mov	r0, r8
        nb_pad -= 10 + oid_size;
 80174de:	1aad      	subs	r5, r5, r2
        hashlen = mbedtls_md_get_size( md_info );
 80174e0:	f7fd fb7c 	bl	8014bdc <mbedtls_md_get_size>
        nb_pad -= 10 + oid_size;
 80174e4:	3d0a      	subs	r5, #10
        hashlen = mbedtls_md_get_size( md_info );
 80174e6:	4680      	mov	r8, r0
    nb_pad -= hashlen;
 80174e8:	eba5 0208 	sub.w	r2, r5, r8
    if( ( nb_pad < 8 ) || ( nb_pad > olen ) )
 80174ec:	2a07      	cmp	r2, #7
 80174ee:	d9db      	bls.n	80174a8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
 80174f0:	4593      	cmp	fp, r2
 80174f2:	d3d9      	bcc.n	80174a8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
    *p++ = 0;
 80174f4:	46b3      	mov	fp, r6
 80174f6:	2500      	movs	r5, #0
 80174f8:	f80b 5b02 	strb.w	r5, [fp], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80174fc:	2101      	movs	r1, #1
 80174fe:	7071      	strb	r1, [r6, #1]
    memset( p, 0xFF, nb_pad );
 8017500:	4658      	mov	r0, fp
 8017502:	21ff      	movs	r1, #255	; 0xff
 8017504:	9203      	str	r2, [sp, #12]
 8017506:	f00a ffe3 	bl	80224d0 <memset>
    p += nb_pad;
 801750a:	9a03      	ldr	r2, [sp, #12]
    *p++ = 0;
 801750c:	f80b 5002 	strb.w	r5, [fp, r2]
    p += nb_pad;
 8017510:	eb0b 0002 	add.w	r0, fp, r2
    if( md_alg == MBEDTLS_MD_NONE )
 8017514:	b977      	cbnz	r7, 8017534 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        memcpy( p, hash, hashlen );
 8017516:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017518:	4642      	mov	r2, r8
 801751a:	3001      	adds	r0, #1
        memcpy( p, hash, hashlen );
 801751c:	f00a ffb0 	bl	8022480 <memcpy>
    if( mode == MBEDTLS_RSA_PUBLIC )
 8017520:	f1ba 0f00 	cmp.w	sl, #0
 8017524:	d12a      	bne.n	801757c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x104>
        return( mbedtls_rsa_public(  ctx, sig, sig ) );
 8017526:	4632      	mov	r2, r6
 8017528:	4631      	mov	r1, r6
 801752a:	4620      	mov	r0, r4
 801752c:	f7ff fa8a 	bl	8016a44 <mbedtls_rsa_public>
 8017530:	4605      	mov	r5, r0
 8017532:	e7ba      	b.n	80174aa <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
        *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8017534:	2730      	movs	r7, #48	; 0x30
 8017536:	7047      	strb	r7, [r0, #1]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 8017538:	9a06      	ldr	r2, [sp, #24]
        *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 801753a:	70c7      	strb	r7, [r0, #3]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 801753c:	f102 0108 	add.w	r1, r2, #8
 8017540:	fa51 f188 	uxtab	r1, r1, r8
 8017544:	7081      	strb	r1, [r0, #2]
        *p++ = (unsigned char) ( 0x04 + oid_size );
 8017546:	b2d1      	uxtb	r1, r2
 8017548:	1d0f      	adds	r7, r1, #4
 801754a:	7107      	strb	r7, [r0, #4]
        *p++ = MBEDTLS_ASN1_OID;
 801754c:	2706      	movs	r7, #6
 801754e:	7147      	strb	r7, [r0, #5]
        *p++ = oid_size & 0xFF;
 8017550:	1dc7      	adds	r7, r0, #7
 8017552:	7181      	strb	r1, [r0, #6]
        memcpy( p, oid, oid_size );
 8017554:	9907      	ldr	r1, [sp, #28]
 8017556:	9203      	str	r2, [sp, #12]
 8017558:	4638      	mov	r0, r7
 801755a:	f00a ff91 	bl	8022480 <memcpy>
        p += oid_size;
 801755e:	9a03      	ldr	r2, [sp, #12]
        *p++ = MBEDTLS_ASN1_NULL;
 8017560:	2105      	movs	r1, #5
        p += oid_size;
 8017562:	18b8      	adds	r0, r7, r2
        *p++ = MBEDTLS_ASN1_NULL;
 8017564:	54b9      	strb	r1, [r7, r2]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 8017566:	fa5f fb88 	uxtb.w	fp, r8
        *p++ = MBEDTLS_ASN1_OCTET_STRING;
 801756a:	2204      	movs	r2, #4
 801756c:	7082      	strb	r2, [r0, #2]
        *p++ = 0x00;
 801756e:	7045      	strb	r5, [r0, #1]
        *p++ = hashlen;
 8017570:	f880 b003 	strb.w	fp, [r0, #3]
        memcpy( p, hash, hashlen );
 8017574:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017576:	4642      	mov	r2, r8
 8017578:	3004      	adds	r0, #4
 801757a:	e7cf      	b.n	801751c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
    sig_try = mbedtls_calloc( 1, ctx->len );
 801757c:	4d22      	ldr	r5, [pc, #136]	; (8017608 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x190>)
 801757e:	6861      	ldr	r1, [r4, #4]
 8017580:	682b      	ldr	r3, [r5, #0]
 8017582:	2001      	movs	r0, #1
 8017584:	4798      	blx	r3
    if( sig_try == NULL )
 8017586:	4607      	mov	r7, r0
 8017588:	b148      	cbz	r0, 801759e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x126>
    verif   = mbedtls_calloc( 1, ctx->len );
 801758a:	682b      	ldr	r3, [r5, #0]
 801758c:	6861      	ldr	r1, [r4, #4]
 801758e:	2001      	movs	r0, #1
 8017590:	4798      	blx	r3
    if( verif == NULL )
 8017592:	4682      	mov	sl, r0
 8017594:	b930      	cbnz	r0, 80175a4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x12c>
        mbedtls_free( sig_try );
 8017596:	4b1d      	ldr	r3, [pc, #116]	; (801760c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x194>)
 8017598:	4638      	mov	r0, r7
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	4798      	blx	r3
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 801759e:	f06f 050f 	mvn.w	r5, #15
 80175a2:	e782      	b.n	80174aa <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80175a4:	ee18 1a10 	vmov	r1, s16
 80175a8:	9700      	str	r7, [sp, #0]
 80175aa:	4633      	mov	r3, r6
 80175ac:	464a      	mov	r2, r9
 80175ae:	4620      	mov	r0, r4
 80175b0:	f7ff fa80 	bl	8016ab4 <mbedtls_rsa_private>
 80175b4:	4605      	mov	r5, r0
 80175b6:	b9a0      	cbnz	r0, 80175e2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x16a>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80175b8:	4652      	mov	r2, sl
 80175ba:	4639      	mov	r1, r7
 80175bc:	4620      	mov	r0, r4
 80175be:	f7ff fa41 	bl	8016a44 <mbedtls_rsa_public>
 80175c2:	4605      	mov	r5, r0
 80175c4:	b968      	cbnz	r0, 80175e2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x16a>
    for( diff = 0, i = 0; i < ctx->len; i++ )
 80175c6:	6862      	ldr	r2, [r4, #4]
 80175c8:	4601      	mov	r1, r0
 80175ca:	4603      	mov	r3, r0
 80175cc:	429a      	cmp	r2, r3
 80175ce:	d110      	bne.n	80175f2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x17a>
    diff_no_optimize = diff;
 80175d0:	f88d 1017 	strb.w	r1, [sp, #23]
    if( diff_no_optimize != 0 )
 80175d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80175d8:	b993      	cbnz	r3, 8017600 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x188>
    memcpy( sig, sig_try, ctx->len );
 80175da:	4639      	mov	r1, r7
 80175dc:	4630      	mov	r0, r6
 80175de:	f00a ff4f 	bl	8022480 <memcpy>
    mbedtls_free( sig_try );
 80175e2:	4c0a      	ldr	r4, [pc, #40]	; (801760c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x194>)
 80175e4:	4638      	mov	r0, r7
 80175e6:	6823      	ldr	r3, [r4, #0]
 80175e8:	4798      	blx	r3
    mbedtls_free( verif );
 80175ea:	6823      	ldr	r3, [r4, #0]
 80175ec:	4650      	mov	r0, sl
 80175ee:	4798      	blx	r3
    return( ret );
 80175f0:	e75b      	b.n	80174aa <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
        diff |= verif[i] ^ sig[i];
 80175f2:	f81a 0003 	ldrb.w	r0, [sl, r3]
 80175f6:	5cf4      	ldrb	r4, [r6, r3]
 80175f8:	4060      	eors	r0, r4
 80175fa:	4301      	orrs	r1, r0
    for( diff = 0, i = 0; i < ctx->len; i++ )
 80175fc:	3301      	adds	r3, #1
 80175fe:	e7e5      	b.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x154>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8017600:	4d03      	ldr	r5, [pc, #12]	; (8017610 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x198>)
 8017602:	e7ee      	b.n	80175e2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x16a>
 8017604:	ffffbf80 	.word	0xffffbf80
 8017608:	200005a0 	.word	0x200005a0
 801760c:	200005a4 	.word	0x200005a4
 8017610:	ffffbd00 	.word	0xffffbd00

08017614 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8017614:	b430      	push	{r4, r5}
    switch( ctx->padding )
 8017616:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 801761a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 801761e:	b125      	cbz	r5, 801762a <mbedtls_rsa_pkcs1_sign+0x16>
 8017620:	2d01      	cmp	r5, #1
 8017622:	d006      	beq.n	8017632 <mbedtls_rsa_pkcs1_sign+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8017624:	4805      	ldr	r0, [pc, #20]	; (801763c <mbedtls_rsa_pkcs1_sign+0x28>)
 8017626:	bc30      	pop	{r4, r5}
 8017628:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 801762a:	9402      	str	r4, [sp, #8]
}
 801762c:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 801762e:	f7ff bf23 	b.w	8017478 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 8017632:	9402      	str	r4, [sp, #8]
}
 8017634:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 8017636:	f7ff be5f 	b.w	80172f8 <mbedtls_rsa_rsassa_pss_sign>
 801763a:	bf00      	nop
 801763c:	ffffbf00 	.word	0xffffbf00

08017640 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8017640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017644:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    size_t slen, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8017648:	2b01      	cmp	r3, #1
{
 801764a:	4604      	mov	r4, r0
 801764c:	f89d 5490 	ldrb.w	r5, [sp, #1168]	; 0x490
 8017650:	f8dd 04a4 	ldr.w	r0, [sp, #1188]	; 0x4a4
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8017654:	d109      	bne.n	801766a <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
 8017656:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
 801765a:	2e01      	cmp	r6, #1
 801765c:	d005      	beq.n	801766a <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801765e:	4b5c      	ldr	r3, [pc, #368]	; (80177d0 <mbedtls_rsa_rsassa_pss_verify_ext+0x190>)

    if( memcmp( p + slen, result, hlen ) == 0 )
        return( 0 );
    else
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
}
 8017660:	4618      	mov	r0, r3
 8017662:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8017666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    siglen = ctx->len;
 801766a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 801766e:	f1a8 0610 	sub.w	r6, r8, #16
 8017672:	f5b6 7f7c 	cmp.w	r6, #1008	; 0x3f0
 8017676:	d8f2      	bhi.n	801765e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 8017678:	ae1a      	add	r6, sp, #104	; 0x68
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 801767a:	2b00      	cmp	r3, #0
 801767c:	d14a      	bne.n	8017714 <mbedtls_rsa_rsassa_pss_verify_ext+0xd4>
          ? mbedtls_rsa_public(  ctx, sig, buf )
 801767e:	4601      	mov	r1, r0
 8017680:	4632      	mov	r2, r6
 8017682:	4620      	mov	r0, r4
 8017684:	f7ff f9de 	bl	8016a44 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 8017688:	4603      	mov	r3, r0
    if( ret != 0 )
 801768a:	2800      	cmp	r0, #0
 801768c:	d1e8      	bne.n	8017660 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
    if( buf[siglen - 1] != 0xBC )
 801768e:	f108 37ff 	add.w	r7, r8, #4294967295
 8017692:	5df3      	ldrb	r3, [r6, r7]
 8017694:	2bbc      	cmp	r3, #188	; 0xbc
 8017696:	f040 8098 	bne.w	80177ca <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    if( md_alg != MBEDTLS_MD_NONE )
 801769a:	b145      	cbz	r5, 80176ae <mbedtls_rsa_rsassa_pss_verify_ext+0x6e>
        md_info = mbedtls_md_info_from_type( md_alg );
 801769c:	4628      	mov	r0, r5
 801769e:	f7fd f94d 	bl	801493c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80176a2:	2800      	cmp	r0, #0
 80176a4:	d0db      	beq.n	801765e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        hashlen = mbedtls_md_get_size( md_info );
 80176a6:	f7fd fa99 	bl	8014bdc <mbedtls_md_get_size>
 80176aa:	f8cd 0494 	str.w	r0, [sp, #1172]	; 0x494
    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80176ae:	f89d 049c 	ldrb.w	r0, [sp, #1180]	; 0x49c
 80176b2:	f7fd f943 	bl	801493c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80176b6:	4683      	mov	fp, r0
 80176b8:	2800      	cmp	r0, #0
 80176ba:	d0d0      	beq.n	801765e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    hlen = mbedtls_md_get_size( md_info );
 80176bc:	f7fd fa8e 	bl	8014bdc <mbedtls_md_get_size>
    memset( zeros, 0, 8 );
 80176c0:	2300      	movs	r3, #0
    hlen = mbedtls_md_get_size( md_info );
 80176c2:	4682      	mov	sl, r0
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80176c4:	f104 0008 	add.w	r0, r4, #8
    memset( zeros, 0, 8 );
 80176c8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80176cc:	f7f7 fac7 	bl	800ec5e <mbedtls_mpi_bitlen>
 80176d0:	f100 39ff 	add.w	r9, r0, #4294967295
    if( msb % 8 == 0 )
 80176d4:	f019 0f07 	tst.w	r9, #7
        siglen -= 1;
 80176d8:	bf08      	it	eq
 80176da:	46b8      	moveq	r8, r7
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80176dc:	7832      	ldrb	r2, [r6, #0]
 80176de:	f1c8 0301 	rsb	r3, r8, #1
 80176e2:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
        p++;
 80176e6:	bf0c      	ite	eq
 80176e8:	f10d 0469 	addeq.w	r4, sp, #105	; 0x69
    p = buf;
 80176ec:	4634      	movne	r4, r6
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80176ee:	411a      	asrs	r2, r3
 80176f0:	9203      	str	r2, [sp, #12]
 80176f2:	d1b4      	bne.n	801765e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    mbedtls_md_init( &md_ctx );
 80176f4:	ad07      	add	r5, sp, #28
 80176f6:	4628      	mov	r0, r5
 80176f8:	f7fd f92c 	bl	8014954 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80176fc:	9a03      	ldr	r2, [sp, #12]
 80176fe:	4659      	mov	r1, fp
 8017700:	4628      	mov	r0, r5
 8017702:	f7fd f951 	bl	80149a8 <mbedtls_md_setup>
 8017706:	b158      	cbz	r0, 8017720 <mbedtls_rsa_rsassa_pss_verify_ext+0xe0>
 8017708:	9003      	str	r0, [sp, #12]
        mbedtls_md_free( &md_ctx );
 801770a:	4628      	mov	r0, r5
 801770c:	f7fd f928 	bl	8014960 <mbedtls_md_free>
        return( ret );
 8017710:	9b03      	ldr	r3, [sp, #12]
 8017712:	e7a5      	b.n	8017660 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 8017714:	4603      	mov	r3, r0
 8017716:	9600      	str	r6, [sp, #0]
 8017718:	4620      	mov	r0, r4
 801771a:	f7ff f9cb 	bl	8016ab4 <mbedtls_rsa_private>
 801771e:	e7b3      	b.n	8017688 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
    mgf_mask( p, siglen - hlen - 1, p + siglen - hlen - 1, hlen, &md_ctx );
 8017720:	ea6f 010a 	mvn.w	r1, sl
 8017724:	4441      	add	r1, r8
 8017726:	4653      	mov	r3, sl
 8017728:	4620      	mov	r0, r4
 801772a:	9500      	str	r5, [sp, #0]
 801772c:	1862      	adds	r2, r4, r1
 801772e:	f7fe ffe7 	bl	8016700 <mgf_mask>
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 8017732:	ebc9 00c8 	rsb	r0, r9, r8, lsl #3
 8017736:	7833      	ldrb	r3, [r6, #0]
 8017738:	f04f 09ff 	mov.w	r9, #255	; 0xff
 801773c:	fa49 f900 	asr.w	r9, r9, r0
 8017740:	ea09 0903 	and.w	r9, r9, r3
 8017744:	f886 9000 	strb.w	r9, [r6]
    while( p < buf + siglen && *p == 0 )
 8017748:	44b0      	add	r8, r6
 801774a:	45a0      	cmp	r8, r4
 801774c:	d939      	bls.n	80177c2 <mbedtls_rsa_rsassa_pss_verify_ext+0x182>
 801774e:	4623      	mov	r3, r4
 8017750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017754:	b39a      	cbz	r2, 80177be <mbedtls_rsa_rsassa_pss_verify_ext+0x17e>
    if( p == buf + siglen ||
 8017756:	f814 3b01 	ldrb.w	r3, [r4], #1
 801775a:	2b01      	cmp	r3, #1
 801775c:	d132      	bne.n	80177c4 <mbedtls_rsa_rsassa_pss_verify_ext+0x184>
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 801775e:	f8dd 34a0 	ldr.w	r3, [sp, #1184]	; 0x4a0
    slen = siglen - hlen - 1; /* Currently length of salt + padding */
 8017762:	eba7 070a 	sub.w	r7, r7, sl
    slen -= p - buf;
 8017766:	1ba6      	subs	r6, r4, r6
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8017768:	1c5a      	adds	r2, r3, #1
    slen -= p - buf;
 801776a:	eba7 0606 	sub.w	r6, r7, r6
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 801776e:	d001      	beq.n	8017774 <mbedtls_rsa_rsassa_pss_verify_ext+0x134>
 8017770:	42b3      	cmp	r3, r6
 8017772:	d127      	bne.n	80177c4 <mbedtls_rsa_rsassa_pss_verify_ext+0x184>
    mbedtls_md_starts( &md_ctx );
 8017774:	4628      	mov	r0, r5
 8017776:	f7fd f939 	bl	80149ec <mbedtls_md_starts>
    mbedtls_md_update( &md_ctx, zeros, 8 );
 801777a:	2208      	movs	r2, #8
 801777c:	a905      	add	r1, sp, #20
 801777e:	4628      	mov	r0, r5
 8017780:	f7fd f942 	bl	8014a08 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, hash, hashlen );
 8017784:	f8dd 2494 	ldr.w	r2, [sp, #1172]	; 0x494
 8017788:	f8dd 1498 	ldr.w	r1, [sp, #1176]	; 0x498
 801778c:	4628      	mov	r0, r5
 801778e:	f7fd f93b 	bl	8014a08 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, p, slen );
 8017792:	4632      	mov	r2, r6
 8017794:	4621      	mov	r1, r4
 8017796:	4628      	mov	r0, r5
 8017798:	f7fd f936 	bl	8014a08 <mbedtls_md_update>
    mbedtls_md_finish( &md_ctx, result );
 801779c:	a90a      	add	r1, sp, #40	; 0x28
 801779e:	4628      	mov	r0, r5
 80177a0:	f7fd f940 	bl	8014a24 <mbedtls_md_finish>
    mbedtls_md_free( &md_ctx );
 80177a4:	4628      	mov	r0, r5
 80177a6:	f7fd f8db 	bl	8014960 <mbedtls_md_free>
    if( memcmp( p + slen, result, hlen ) == 0 )
 80177aa:	4652      	mov	r2, sl
 80177ac:	a90a      	add	r1, sp, #40	; 0x28
 80177ae:	19a0      	adds	r0, r4, r6
 80177b0:	f00a fe58 	bl	8022464 <memcmp>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80177b4:	4a07      	ldr	r2, [pc, #28]	; (80177d4 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>)
 80177b6:	1e03      	subs	r3, r0, #0
 80177b8:	bf18      	it	ne
 80177ba:	4613      	movne	r3, r2
 80177bc:	e750      	b.n	8017660 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
        p++;
 80177be:	461c      	mov	r4, r3
 80177c0:	e7c3      	b.n	801774a <mbedtls_rsa_rsassa_pss_verify_ext+0x10a>
    if( p == buf + siglen ||
 80177c2:	d1c8      	bne.n	8017756 <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
        mbedtls_md_free( &md_ctx );
 80177c4:	4628      	mov	r0, r5
 80177c6:	f7fd f8cb 	bl	8014960 <mbedtls_md_free>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80177ca:	4b03      	ldr	r3, [pc, #12]	; (80177d8 <mbedtls_rsa_rsassa_pss_verify_ext+0x198>)
 80177cc:	e748      	b.n	8017660 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
 80177ce:	bf00      	nop
 80177d0:	ffffbf80 	.word	0xffffbf80
 80177d4:	ffffbc80 	.word	0xffffbc80
 80177d8:	ffffbf00 	.word	0xffffbf00

080177dc <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80177dc:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 80177de:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
{
 80177e2:	b086      	sub	sp, #24
 80177e4:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 80177e8:	b17c      	cbz	r4, 801780a <mbedtls_rsa_rsassa_pss_verify+0x2e>
 80177ea:	b2e4      	uxtb	r4, r4

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
 80177ec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80177ee:	9605      	str	r6, [sp, #20]
 80177f0:	f04f 36ff 	mov.w	r6, #4294967295
 80177f4:	e9cd 4603 	strd	r4, r6, [sp, #12]
 80177f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80177fa:	9402      	str	r4, [sp, #8]
 80177fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80177fe:	e9cd 5400 	strd	r5, r4, [sp]
 8017802:	f7ff ff1d 	bl	8017640 <mbedtls_rsa_rsassa_pss_verify_ext>
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );

}
 8017806:	b006      	add	sp, #24
 8017808:	bd70      	pop	{r4, r5, r6, pc}
                             : md_alg;
 801780a:	462c      	mov	r4, r5
 801780c:	e7ee      	b.n	80177ec <mbedtls_rsa_rsassa_pss_verify+0x10>
	...

08017810 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8017810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017814:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
    mbedtls_md_type_t msg_md_alg;
    const mbedtls_md_info_t *md_info;
    mbedtls_asn1_buf oid;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017818:	2b01      	cmp	r3, #1
{
 801781a:	f89d 5440 	ldrb.w	r5, [sp, #1088]	; 0x440
 801781e:	f8dd 7444 	ldr.w	r7, [sp, #1092]	; 0x444
 8017822:	f8dd 6448 	ldr.w	r6, [sp, #1096]	; 0x448
 8017826:	f8dd c44c 	ldr.w	ip, [sp, #1100]	; 0x44c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801782a:	d107      	bne.n	801783c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x2c>
 801782c:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 8017830:	b124      	cbz	r4, 801783c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x2c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8017832:	485b      	ldr	r0, [pc, #364]	; (80179a0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x190>)

    if( p != end )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    return( 0 );
}
 8017834:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 8017838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    siglen = ctx->len;
 801783c:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 8017840:	f1a8 0410 	sub.w	r4, r8, #16
 8017844:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
 8017848:	d8f3      	bhi.n	8017832 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x22>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 801784a:	ac08      	add	r4, sp, #32
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 801784c:	b94b      	cbnz	r3, 8017862 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x52>
          ? mbedtls_rsa_public(  ctx, sig, buf )
 801784e:	4622      	mov	r2, r4
 8017850:	4661      	mov	r1, ip
 8017852:	f7ff f8f7 	bl	8016a44 <mbedtls_rsa_public>
    if( ret != 0 )
 8017856:	2800      	cmp	r0, #0
 8017858:	d1ec      	bne.n	8017834 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
    if( *p++ != 0 || *p++ != MBEDTLS_RSA_SIGN )
 801785a:	7823      	ldrb	r3, [r4, #0]
 801785c:	b133      	cbz	r3, 801786c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5c>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 801785e:	4851      	ldr	r0, [pc, #324]	; (80179a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x194>)
 8017860:	e7e8      	b.n	8017834 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 8017862:	9400      	str	r4, [sp, #0]
 8017864:	4663      	mov	r3, ip
 8017866:	f7ff f925 	bl	8016ab4 <mbedtls_rsa_private>
 801786a:	e7f4      	b.n	8017856 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x46>
    if( *p++ != 0 || *p++ != MBEDTLS_RSA_SIGN )
 801786c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8017870:	9304      	str	r3, [sp, #16]
 8017872:	7863      	ldrb	r3, [r4, #1]
 8017874:	2b01      	cmp	r3, #1
 8017876:	d1f2      	bne.n	801785e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
        if( p >= buf + siglen - 1 || *p != 0xFF )
 8017878:	f108 33ff 	add.w	r3, r8, #4294967295
 801787c:	4423      	add	r3, r4
    while( *p != 0 )
 801787e:	9804      	ldr	r0, [sp, #16]
 8017880:	7802      	ldrb	r2, [r0, #0]
 8017882:	b98a      	cbnz	r2, 80178a8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
    p++; /* skip 00 byte */
 8017884:	3001      	adds	r0, #1
    if( p - buf < 11 )
 8017886:	1b04      	subs	r4, r0, r4
 8017888:	2c0a      	cmp	r4, #10
    p++; /* skip 00 byte */
 801788a:	9004      	str	r0, [sp, #16]
    if( p - buf < 11 )
 801788c:	dde7      	ble.n	801785e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
    len = siglen - ( p - buf );
 801788e:	eba8 0404 	sub.w	r4, r8, r4
    if( len == hashlen && md_alg == MBEDTLS_MD_NONE )
 8017892:	42bc      	cmp	r4, r7
 8017894:	d10f      	bne.n	80178b6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa6>
 8017896:	b975      	cbnz	r5, 80178b6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa6>
        if( memcmp( p, hash, hashlen ) == 0 )
 8017898:	463a      	mov	r2, r7
 801789a:	4631      	mov	r1, r6
 801789c:	f00a fde2 	bl	8022464 <memcmp>
 80178a0:	2800      	cmp	r0, #0
 80178a2:	d0c7      	beq.n	8017834 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80178a4:	4840      	ldr	r0, [pc, #256]	; (80179a8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x198>)
 80178a6:	e7c5      	b.n	8017834 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
        if( p >= buf + siglen - 1 || *p != 0xFF )
 80178a8:	4298      	cmp	r0, r3
 80178aa:	d2d8      	bcs.n	801785e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
 80178ac:	2aff      	cmp	r2, #255	; 0xff
 80178ae:	d1d6      	bne.n	801785e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
        p++;
 80178b0:	3001      	adds	r0, #1
 80178b2:	9004      	str	r0, [sp, #16]
 80178b4:	e7e3      	b.n	801787e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
    md_info = mbedtls_md_info_from_type( md_alg );
 80178b6:	4628      	mov	r0, r5
 80178b8:	f7fd f840 	bl	801493c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80178bc:	2800      	cmp	r0, #0
 80178be:	d0b8      	beq.n	8017832 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x22>
    hashlen = mbedtls_md_get_size( md_info );
 80178c0:	f7fd f98c 	bl	8014bdc <mbedtls_md_get_size>
    end = p + len;
 80178c4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80178c8:	eb09 0704 	add.w	r7, r9, r4
    hashlen = mbedtls_md_get_size( md_info );
 80178cc:	4680      	mov	r8, r0
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
 80178ce:	2330      	movs	r3, #48	; 0x30
 80178d0:	aa03      	add	r2, sp, #12
 80178d2:	4639      	mov	r1, r7
 80178d4:	a804      	add	r0, sp, #16
 80178d6:	f7f6 fc5b 	bl	800e190 <mbedtls_asn1_get_tag>
 80178da:	2800      	cmp	r0, #0
 80178dc:	d1e2      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 || asn1_len + 2 != len )
 80178de:	f8dd a010 	ldr.w	sl, [sp, #16]
 80178e2:	f109 0902 	add.w	r9, r9, #2
 80178e6:	45ca      	cmp	sl, r9
 80178e8:	d1dc      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 80178ea:	9b03      	ldr	r3, [sp, #12]
 80178ec:	3302      	adds	r3, #2
 80178ee:	42a3      	cmp	r3, r4
 80178f0:	d1d8      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
 80178f2:	2330      	movs	r3, #48	; 0x30
 80178f4:	aa03      	add	r2, sp, #12
 80178f6:	4639      	mov	r1, r7
 80178f8:	a804      	add	r0, sp, #16
 80178fa:	f7f6 fc49 	bl	800e190 <mbedtls_asn1_get_tag>
 80178fe:	2800      	cmp	r0, #0
 8017900:	d1d0      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 || asn1_len + 6 + hashlen != len )
 8017902:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017906:	f10a 0a02 	add.w	sl, sl, #2
 801790a:	45d1      	cmp	r9, sl
 801790c:	d1ca      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 801790e:	9b03      	ldr	r3, [sp, #12]
 8017910:	3306      	adds	r3, #6
 8017912:	4443      	add	r3, r8
 8017914:	42a3      	cmp	r3, r4
 8017916:	d1c5      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8017918:	2306      	movs	r3, #6
 801791a:	aa06      	add	r2, sp, #24
 801791c:	4639      	mov	r1, r7
 801791e:	a804      	add	r0, sp, #16
 8017920:	f7f6 fc36 	bl	800e190 <mbedtls_asn1_get_tag>
 8017924:	2800      	cmp	r0, #0
 8017926:	d1bd      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 )
 8017928:	9b04      	ldr	r3, [sp, #16]
 801792a:	f109 0902 	add.w	r9, r9, #2
 801792e:	454b      	cmp	r3, r9
 8017930:	d1b8      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    p += oid.len;
 8017932:	9a06      	ldr	r2, [sp, #24]
    oid.p = p;
 8017934:	9307      	str	r3, [sp, #28]
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 8017936:	f10d 010b 	add.w	r1, sp, #11
    p += oid.len;
 801793a:	4413      	add	r3, r2
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 801793c:	a805      	add	r0, sp, #20
    p += oid.len;
 801793e:	9304      	str	r3, [sp, #16]
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 8017940:	f7fd fec4 	bl	80156cc <mbedtls_oid_get_md_alg>
 8017944:	2800      	cmp	r0, #0
 8017946:	d1ad      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( md_alg != msg_md_alg )
 8017948:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801794c:	42ab      	cmp	r3, r5
 801794e:	d1a9      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_NULL ) ) != 0 )
 8017950:	2305      	movs	r3, #5
 8017952:	aa03      	add	r2, sp, #12
 8017954:	4639      	mov	r1, r7
 8017956:	a804      	add	r0, sp, #16
    p0 = p;
 8017958:	9c04      	ldr	r4, [sp, #16]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_NULL ) ) != 0 )
 801795a:	f7f6 fc19 	bl	800e190 <mbedtls_asn1_get_tag>
 801795e:	2800      	cmp	r0, #0
 8017960:	d1a0      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 )
 8017962:	9d04      	ldr	r5, [sp, #16]
 8017964:	3402      	adds	r4, #2
 8017966:	42a5      	cmp	r5, r4
 8017968:	d19c      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 801796a:	2304      	movs	r3, #4
 801796c:	aa03      	add	r2, sp, #12
 801796e:	4639      	mov	r1, r7
 8017970:	a804      	add	r0, sp, #16
 8017972:	f7f6 fc0d 	bl	800e190 <mbedtls_asn1_get_tag>
 8017976:	2800      	cmp	r0, #0
 8017978:	d194      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 || asn1_len != hashlen )
 801797a:	9c04      	ldr	r4, [sp, #16]
 801797c:	3502      	adds	r5, #2
 801797e:	42ac      	cmp	r4, r5
 8017980:	d190      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 8017982:	9b03      	ldr	r3, [sp, #12]
 8017984:	4543      	cmp	r3, r8
 8017986:	d18d      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( memcmp( p, hash, hashlen ) != 0 )
 8017988:	4642      	mov	r2, r8
 801798a:	4631      	mov	r1, r6
 801798c:	4620      	mov	r0, r4
 801798e:	f00a fd69 	bl	8022464 <memcmp>
 8017992:	2800      	cmp	r0, #0
 8017994:	d186      	bne.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    p += hashlen;
 8017996:	44a0      	add	r8, r4
    if( p != end )
 8017998:	4547      	cmp	r7, r8
 801799a:	f43f af4b 	beq.w	8017834 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
 801799e:	e781      	b.n	80178a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 80179a0:	ffffbf80 	.word	0xffffbf80
 80179a4:	ffffbf00 	.word	0xffffbf00
 80179a8:	ffffbc80 	.word	0xffffbc80

080179ac <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80179ac:	b430      	push	{r4, r5}
    switch( ctx->padding )
 80179ae:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 80179b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 80179b6:	b125      	cbz	r5, 80179c2 <mbedtls_rsa_pkcs1_verify+0x16>
 80179b8:	2d01      	cmp	r5, #1
 80179ba:	d006      	beq.n	80179ca <mbedtls_rsa_pkcs1_verify+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80179bc:	4805      	ldr	r0, [pc, #20]	; (80179d4 <mbedtls_rsa_pkcs1_verify+0x28>)
 80179be:	bc30      	pop	{r4, r5}
 80179c0:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 80179c2:	9402      	str	r4, [sp, #8]
}
 80179c4:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 80179c6:	f7ff bf23 	b.w	8017810 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 80179ca:	9402      	str	r4, [sp, #8]
}
 80179cc:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 80179ce:	f7ff bf05 	b.w	80177dc <mbedtls_rsa_rsassa_pss_verify>
 80179d2:	bf00      	nop
 80179d4:	ffffbf00 	.word	0xffffbf00

080179d8 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 80179d8:	b510      	push	{r4, lr}
 80179da:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 80179dc:	308c      	adds	r0, #140	; 0x8c
 80179de:	f7f7 f819 	bl	800ea14 <mbedtls_mpi_free>
 80179e2:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80179e6:	f7f7 f815 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP ); mbedtls_mpi_free( &ctx->RN );
 80179ea:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80179ee:	f7f7 f811 	bl	800ea14 <mbedtls_mpi_free>
 80179f2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80179f6:	f7f7 f80d 	bl	800ea14 <mbedtls_mpi_free>
 80179fa:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80179fe:	f7f7 f809 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ ); mbedtls_mpi_free( &ctx->DP );
 8017a02:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017a06:	f7f7 f805 	bl	800ea14 <mbedtls_mpi_free>
 8017a0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017a0e:	f7f7 f801 	bl	800ea14 <mbedtls_mpi_free>
 8017a12:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8017a16:	f7f6 fffd 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  ); mbedtls_mpi_free( &ctx->D );
 8017a1a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8017a1e:	f7f6 fff9 	bl	800ea14 <mbedtls_mpi_free>
 8017a22:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8017a26:	f7f6 fff5 	bl	800ea14 <mbedtls_mpi_free>
 8017a2a:	f104 0020 	add.w	r0, r4, #32
 8017a2e:	f7f6 fff1 	bl	800ea14 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8017a32:	f104 0014 	add.w	r0, r4, #20
 8017a36:	f7f6 ffed 	bl	800ea14 <mbedtls_mpi_free>
 8017a3a:	f104 0008 	add.w	r0, r4, #8

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8017a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8017a42:	f7f6 bfe7 	b.w	800ea14 <mbedtls_mpi_free>

08017a46 <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 8017a46:	225c      	movs	r2, #92	; 0x5c
 8017a48:	2100      	movs	r1, #0
 8017a4a:	f00a bd41 	b.w	80224d0 <memset>

08017a4e <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 8017a4e:	b120      	cbz	r0, 8017a5a <mbedtls_sha1_free+0xc>
 8017a50:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8017a54:	2200      	movs	r2, #0
 8017a56:	4298      	cmp	r0, r3
 8017a58:	d100      	bne.n	8017a5c <mbedtls_sha1_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}
 8017a5a:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8017a5c:	f800 2b01 	strb.w	r2, [r0], #1
 8017a60:	e7f9      	b.n	8017a56 <mbedtls_sha1_free+0x8>

08017a62 <mbedtls_sha1_clone>:

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 8017a62:	b508      	push	{r3, lr}
    *dst = *src;
 8017a64:	225c      	movs	r2, #92	; 0x5c
 8017a66:	f00a fd0b 	bl	8022480 <memcpy>
}
 8017a6a:	bd08      	pop	{r3, pc}

08017a6c <mbedtls_sha1_starts>:
/*
 * SHA-1 context setup
 */
void mbedtls_sha1_starts( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8017a6c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 8017a6e:	e9c0 3300 	strd	r3, r3, [r0]

    ctx->state[0] = 0x67452301;
 8017a72:	4b09      	ldr	r3, [pc, #36]	; (8017a98 <mbedtls_sha1_starts+0x2c>)
 8017a74:	6083      	str	r3, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
 8017a76:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8017a7a:	60c3      	str	r3, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
 8017a7c:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 8017a80:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 8017a84:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 8017a88:	6103      	str	r3, [r0, #16]
    ctx->state[3] = 0x10325476;
 8017a8a:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 8017a8e:	6143      	str	r3, [r0, #20]
    ctx->state[4] = 0xC3D2E1F0;
 8017a90:	4b02      	ldr	r3, [pc, #8]	; (8017a9c <mbedtls_sha1_starts+0x30>)
 8017a92:	6183      	str	r3, [r0, #24]
}
 8017a94:	4770      	bx	lr
 8017a96:	bf00      	nop
 8017a98:	67452301 	.word	0x67452301
 8017a9c:	c3d2e1f0 	.word	0xc3d2e1f0

08017aa0 <mbedtls_sha1_process>:

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
void mbedtls_sha1_process( mbedtls_sha1_context *ctx, const unsigned char data[64] )
{
 8017aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa4:	680d      	ldr	r5, [r1, #0]
 8017aa6:	684a      	ldr	r2, [r1, #4]
 8017aa8:	698f      	ldr	r7, [r1, #24]
 8017aaa:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8017aac:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8017ab0:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8017ab4:	68ce      	ldr	r6, [r1, #12]
 8017ab6:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8017aba:	b099      	sub	sp, #100	; 0x64
 8017abc:	ba2b      	rev	r3, r5
 8017abe:	9306      	str	r3, [sp, #24]
 8017ac0:	ba13      	rev	r3, r2
 8017ac2:	9307      	str	r3, [sp, #28]
 8017ac4:	694b      	ldr	r3, [r1, #20]
 8017ac6:	9000      	str	r0, [sp, #0]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8017ac8:	ba1b      	rev	r3, r3
 8017aca:	9309      	str	r3, [sp, #36]	; 0x24
 8017acc:	ba3b      	rev	r3, r7
 8017ace:	9310      	str	r3, [sp, #64]	; 0x40
 8017ad0:	69cb      	ldr	r3, [r1, #28]
 8017ad2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8017ad4:	6a0a      	ldr	r2, [r1, #32]
 8017ad6:	ba1b      	rev	r3, r3
 8017ad8:	9311      	str	r3, [sp, #68]	; 0x44
 8017ada:	ba03      	rev	r3, r0
 8017adc:	930a      	str	r3, [sp, #40]	; 0x28
 8017ade:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8017ae0:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 8017ae2:	ba1b      	rev	r3, r3
 8017ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ae6:	ba23      	rev	r3, r4
 8017ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8017aea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8017aec:	ba1b      	rev	r3, r3
 8017aee:	930d      	str	r3, [sp, #52]	; 0x34
 8017af0:	fa9e f38e 	rev.w	r3, lr
 8017af4:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
 8017af8:	9302      	str	r3, [sp, #8]
 8017afa:	fa9e f38e 	rev.w	r3, lr
 8017afe:	9303      	str	r3, [sp, #12]
 8017b00:	ba03      	rev	r3, r0
 8017b02:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 8017b04:	9b00      	ldr	r3, [sp, #0]
 8017b06:	689b      	ldr	r3, [r3, #8]
 8017b08:	930e      	str	r3, [sp, #56]	; 0x38
    B = ctx->state[1];
 8017b0a:	9b00      	ldr	r3, [sp, #0]
 8017b0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017b0e:	68db      	ldr	r3, [r3, #12]
 8017b10:	9301      	str	r3, [sp, #4]
    C = ctx->state[2];
 8017b12:	9b00      	ldr	r3, [sp, #0]
#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
 8017b14:	9801      	ldr	r0, [sp, #4]
    C = ctx->state[2];
 8017b16:	691b      	ldr	r3, [r3, #16]
 8017b18:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 8017b1a:	9b00      	ldr	r3, [sp, #0]
 8017b1c:	9f01      	ldr	r7, [sp, #4]
 8017b1e:	695b      	ldr	r3, [r3, #20]
 8017b20:	930f      	str	r3, [sp, #60]	; 0x3c
    E = ctx->state[4];
 8017b22:	9b00      	ldr	r3, [sp, #0]
 8017b24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017b26:	699b      	ldr	r3, [r3, #24]
 8017b28:	9317      	str	r3, [sp, #92]	; 0x5c
 8017b2a:	fa92 f982 	rev.w	r9, r2
    P( A, B, C, D, E, W[0]  );
 8017b2e:	9b05      	ldr	r3, [sp, #20]
 8017b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017b32:	ea83 0c02 	eor.w	ip, r3, r2
 8017b36:	9b01      	ldr	r3, [sp, #4]
 8017b38:	ea0c 0c03 	and.w	ip, ip, r3
 8017b3c:	ea8c 0c02 	eor.w	ip, ip, r2
 8017b40:	4bde      	ldr	r3, [pc, #888]	; (8017ebc <mbedtls_sha1_process+0x41c>)
 8017b42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017b44:	441a      	add	r2, r3
 8017b46:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8017b4a:	4494      	add	ip, r2
 8017b4c:	9a06      	ldr	r2, [sp, #24]
    P( E, A, B, C, D, W[1]  );
 8017b4e:	9901      	ldr	r1, [sp, #4]
    P( A, B, C, D, E, W[0]  );
 8017b50:	4494      	add	ip, r2
    P( E, A, B, C, D, W[1]  );
 8017b52:	9a05      	ldr	r2, [sp, #20]
 8017b54:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 8017b58:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017b5a:	400a      	ands	r2, r1
 8017b5c:	9905      	ldr	r1, [sp, #20]
 8017b5e:	404a      	eors	r2, r1
 8017b60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017b62:	4419      	add	r1, r3
 8017b64:	440a      	add	r2, r1
 8017b66:	9907      	ldr	r1, [sp, #28]
 8017b68:	440a      	add	r2, r1
 8017b6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017b6c:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, W[2]  );
 8017b70:	ea81 04b0 	eor.w	r4, r1, r0, ror #2
 8017b74:	ea04 040c 	and.w	r4, r4, ip
 8017b78:	ea84 04b0 	eor.w	r4, r4, r0, ror #2
 8017b7c:	9805      	ldr	r0, [sp, #20]
 8017b7e:	fa9a fa8a 	rev.w	sl, sl
    GET_UINT32_BE( W[ 3], data, 12 );
 8017b82:	4418      	add	r0, r3
 8017b84:	4450      	add	r0, sl
    P( E, A, B, C, D, W[1]  );
 8017b86:	eb02 62fc 	add.w	r2, r2, ip, ror #27
 8017b8a:	4404      	add	r4, r0
    P( C, D, E, A, B, W[3]  );
 8017b8c:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
 8017b90:	ba36      	rev	r6, r6
 8017b92:	4010      	ands	r0, r2
 8017b94:	eb03 07b7 	add.w	r7, r3, r7, ror #2
    P( D, E, A, B, C, W[2]  );
 8017b98:	eb04 64f2 	add.w	r4, r4, r2, ror #27
 8017b9c:	4437      	add	r7, r6
    P( C, D, E, A, B, W[3]  );
 8017b9e:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8017ba2:	4048      	eors	r0, r1
 8017ba4:	4438      	add	r0, r7
    P( B, C, D, E, A, W[4]  );
 8017ba6:	ea82 07bc 	eor.w	r7, r2, ip, ror #2
 8017baa:	fa98 f888 	rev.w	r8, r8
 8017bae:	4027      	ands	r7, r4
 8017bb0:	4419      	add	r1, r3
 8017bb2:	4441      	add	r1, r8
 8017bb4:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
    P( C, D, E, A, B, W[3]  );
 8017bb8:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, W[4]  );
 8017bbc:	440f      	add	r7, r1
    P( A, B, C, D, E, W[5]  );
 8017bbe:	ea82 01b4 	eor.w	r1, r2, r4, ror #2
 8017bc2:	eb05 0e03 	add.w	lr, r5, r3
 8017bc6:	4001      	ands	r1, r0
    P( B, C, D, E, A, W[4]  );
 8017bc8:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( A, B, C, D, E, W[5]  );
 8017bcc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8017bce:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017bd2:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
 8017bd6:	4051      	eors	r1, r2
 8017bd8:	4461      	add	r1, ip
    P( E, A, B, C, D, W[6]  );
 8017bda:	ea80 0cb4 	eor.w	ip, r0, r4, ror #2
 8017bde:	eb05 0e03 	add.w	lr, r5, r3
 8017be2:	ea0c 0c07 	and.w	ip, ip, r7
 8017be6:	4472      	add	r2, lr
 8017be8:	ea8c 0cb4 	eor.w	ip, ip, r4, ror #2
 8017bec:	4494      	add	ip, r2
 8017bee:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( A, B, C, D, E, W[5]  );
 8017bf0:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( D, E, A, B, C, W[7]  );
 8017bf4:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
    P( E, A, B, C, D, W[6]  );
 8017bf8:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    P( D, E, A, B, C, W[7]  );
 8017bfc:	441a      	add	r2, r3
 8017bfe:	ea0e 0e01 	and.w	lr, lr, r1
 8017c02:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8017c06:	eb02 04b4 	add.w	r4, r2, r4, ror #2
 8017c0a:	ea8e 0e00 	eor.w	lr, lr, r0
    P( C, D, E, A, B, W[8]  );
 8017c0e:	ea81 02b7 	eor.w	r2, r1, r7, ror #2
 8017c12:	44a6      	add	lr, r4
 8017c14:	ea02 020c 	and.w	r2, r2, ip
 8017c18:	eb09 0403 	add.w	r4, r9, r3
 8017c1c:	4420      	add	r0, r4
 8017c1e:	ea82 02b7 	eor.w	r2, r2, r7, ror #2
 8017c22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, W[7]  );
 8017c24:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, W[8]  );
 8017c28:	4402      	add	r2, r0
    P( B, C, D, E, A, W[9]  );
 8017c2a:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
 8017c2e:	441c      	add	r4, r3
 8017c30:	ea00 000e 	and.w	r0, r0, lr
    P( C, D, E, A, B, W[8]  );
 8017c34:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, W[9]  );
 8017c38:	eb04 07b7 	add.w	r7, r4, r7, ror #2
 8017c3c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8017c40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017c42:	4048      	eors	r0, r1
 8017c44:	4438      	add	r0, r7
    P( A, B, C, D, E, W[10] );
 8017c46:	ea8e 07bc 	eor.w	r7, lr, ip, ror #2
 8017c4a:	441c      	add	r4, r3
 8017c4c:	4017      	ands	r7, r2
 8017c4e:	4421      	add	r1, r4
 8017c50:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
 8017c54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    P( B, C, D, E, A, W[9]  );
 8017c56:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, W[10] );
 8017c5a:	440f      	add	r7, r1
    P( E, A, B, C, D, W[11] );
 8017c5c:	ea8e 01b2 	eor.w	r1, lr, r2, ror #2
 8017c60:	441c      	add	r4, r3
 8017c62:	4001      	ands	r1, r0
 8017c64:	ea81 010e 	eor.w	r1, r1, lr
 8017c68:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
    P( A, B, C, D, E, W[10] );
 8017c6c:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, W[11] );
 8017c70:	448c      	add	ip, r1
 8017c72:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017c76:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, W[12] );
 8017c78:	ea80 04b2 	eor.w	r4, r0, r2, ror #2
 8017c7c:	4419      	add	r1, r3
 8017c7e:	403c      	ands	r4, r7
 8017c80:	448e      	add	lr, r1
 8017c82:	ea84 04b2 	eor.w	r4, r4, r2, ror #2
 8017c86:	9902      	ldr	r1, [sp, #8]
    P( E, A, B, C, D, W[11] );
 8017c88:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( D, E, A, B, C, W[12] );
 8017c8c:	4474      	add	r4, lr
    P( C, D, E, A, B, W[13] );
 8017c8e:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
 8017c92:	4419      	add	r1, r3
 8017c94:	ea0e 0e0c 	and.w	lr, lr, ip
 8017c98:	eb01 02b2 	add.w	r2, r1, r2, ror #2
 8017c9c:	ea8e 0e00 	eor.w	lr, lr, r0
 8017ca0:	4496      	add	lr, r2
 8017ca2:	9a03      	ldr	r2, [sp, #12]
 8017ca4:	441a      	add	r2, r3
    P( D, E, A, B, C, W[12] );
 8017ca6:	eb04 64fc 	add.w	r4, r4, ip, ror #27
    P( C, D, E, A, B, W[13] );
 8017caa:	4410      	add	r0, r2
 8017cac:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 8017cb0:	9a04      	ldr	r2, [sp, #16]
    P( B, C, D, E, A, W[14] );
 8017cb2:	ea8c 0bb7 	eor.w	fp, ip, r7, ror #2
 8017cb6:	441a      	add	r2, r3
 8017cb8:	ea0b 0b04 	and.w	fp, fp, r4
 8017cbc:	ea8b 0bb7 	eor.w	fp, fp, r7, ror #2
 8017cc0:	eb02 07b7 	add.w	r7, r2, r7, ror #2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8017cc4:	9a06      	ldr	r2, [sp, #24]
 8017cc6:	ea82 050a 	eor.w	r5, r2, sl
 8017cca:	9a02      	ldr	r2, [sp, #8]
 8017ccc:	ea85 0509 	eor.w	r5, r5, r9
    P( C, D, E, A, B, W[13] );
 8017cd0:	eb0e 6ef4 	add.w	lr, lr, r4, ror #27
    P( A, B, C, D, E, W[15] );
 8017cd4:	ea8c 01b4 	eor.w	r1, ip, r4, ror #2
    P( E, A, B, C, D, R(16) );
 8017cd8:	406a      	eors	r2, r5
 8017cda:	9206      	str	r2, [sp, #24]
    P( A, B, C, D, E, W[15] );
 8017cdc:	ea01 010e 	and.w	r1, r1, lr
 8017ce0:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8017ce4:	ea81 010c 	eor.w	r1, r1, ip
 8017ce8:	4494      	add	ip, r2
    P( D, E, A, B, C, R(17) );
 8017cea:	9a07      	ldr	r2, [sp, #28]
 8017cec:	4483      	add	fp, r0
 8017cee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017cf0:	4072      	eors	r2, r6
 8017cf2:	4042      	eors	r2, r0
 8017cf4:	9803      	ldr	r0, [sp, #12]
    P( B, C, D, E, A, W[14] );
 8017cf6:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27
    P( A, B, C, D, E, W[15] );
 8017cfa:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( D, E, A, B, C, R(17) );
 8017cfe:	4042      	eors	r2, r0
 8017d00:	4439      	add	r1, r7
    P( E, A, B, C, D, R(16) );
 8017d02:	ea8e 07b4 	eor.w	r7, lr, r4, ror #2
    P( D, E, A, B, C, R(17) );
 8017d06:	9207      	str	r2, [sp, #28]
    P( E, A, B, C, D, R(16) );
 8017d08:	ea07 070b 	and.w	r7, r7, fp
 8017d0c:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8017d10:	ea87 07b4 	eor.w	r7, r7, r4, ror #2
 8017d14:	eb02 04b4 	add.w	r4, r2, r4, ror #2
    P( C, D, E, A, B, R(18) );
 8017d18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017d1a:	ea8a 0a08 	eor.w	sl, sl, r8
 8017d1e:	ea8a 0a02 	eor.w	sl, sl, r2
 8017d22:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, W[15] );
 8017d24:	eb01 61fb 	add.w	r1, r1, fp, ror #27
    P( C, D, E, A, B, R(18) );
 8017d28:	ea8a 0a02 	eor.w	sl, sl, r2
 8017d2c:	4467      	add	r7, ip
    P( D, E, A, B, C, R(17) );
 8017d2e:	ea8e 0cbb 	eor.w	ip, lr, fp, ror #2
 8017d32:	eb03 70fa 	add.w	r0, r3, sl, ror #31
 8017d36:	ea0c 0c01 	and.w	ip, ip, r1
 8017d3a:	ea8c 0c0e 	eor.w	ip, ip, lr
 8017d3e:	4486      	add	lr, r0
    P( B, C, D, E, A, R(19) );
 8017d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d42:	44a4      	add	ip, r4
 8017d44:	ea86 0400 	eor.w	r4, r6, r0
 8017d48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017d4a:	4044      	eors	r4, r0
 8017d4c:	9806      	ldr	r0, [sp, #24]
 8017d4e:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( E, A, B, C, D, R(16) );
 8017d52:	eb07 67f1 	add.w	r7, r7, r1, ror #27
    P( B, C, D, E, A, R(19) );
 8017d56:	ea4f 70f4 	mov.w	r0, r4, ror #31
    P( D, E, A, B, C, R(17) );
 8017d5a:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8017d5e:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( B, C, D, E, A, R(19) );
 8017d62:	9013      	str	r0, [sp, #76]	; 0x4c
 8017d64:	ea81 00b7 	eor.w	r0, r1, r7, ror #2
 8017d68:	ea00 000c 	and.w	r0, r0, ip
 8017d6c:	eb03 73f4 	add.w	r3, r3, r4, ror #31
 8017d70:	eb03 03bb 	add.w	r3, r3, fp, ror #2
 8017d74:	4048      	eors	r0, r1
 8017d76:	4418      	add	r0, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8017d78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d7a:	ea88 0803 	eor.w	r8, r8, r3
 8017d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(18) );
 8017d80:	ea4f 72fa 	mov.w	r2, sl, ror #31
    P( A, B, C, D, E, R(20) );
 8017d84:	ea88 0803 	eor.w	r8, r8, r3
 8017d88:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(18) );
 8017d8a:	9212      	str	r2, [sp, #72]	; 0x48
 8017d8c:	ea81 02bb 	eor.w	r2, r1, fp, ror #2
    P( A, B, C, D, E, R(20) );
 8017d90:	ea88 73f3 	eor.w	r3, r8, r3, ror #31
    P( C, D, E, A, B, R(18) );
 8017d94:	403a      	ands	r2, r7
    P( A, B, C, D, E, R(20) );
 8017d96:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(18) );
 8017d98:	ea82 02bb 	eor.w	r2, r2, fp, ror #2
 8017d9c:	4b48      	ldr	r3, [pc, #288]	; (8017ec0 <mbedtls_sha1_process+0x420>)
 8017d9e:	9e08      	ldr	r6, [sp, #32]
 8017da0:	4472      	add	r2, lr
 8017da2:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( B, C, D, E, A, R(19) );
 8017da6:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(20) );
 8017daa:	ea8c 05b7 	eor.w	r5, ip, r7, ror #2
 8017dae:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 8017db2:	4431      	add	r1, r6
 8017db4:	4055      	eors	r5, r2
    P( E, A, B, C, D, R(21) );
 8017db6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017db8:	440d      	add	r5, r1
 8017dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017dbc:	4071      	eors	r1, r6
 8017dbe:	9e02      	ldr	r6, [sp, #8]
 8017dc0:	4071      	eors	r1, r6
 8017dc2:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
    P( B, C, D, E, A, R(19) );
 8017dc6:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(20) );
 8017dca:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
    P( E, A, B, C, D, R(21) );
 8017dce:	ea8c 06b2 	eor.w	r6, ip, r2, ror #2
 8017dd2:	eb0e 07b7 	add.w	r7, lr, r7, ror #2
 8017dd6:	4046      	eors	r6, r0
 8017dd8:	443e      	add	r6, r7
    P( D, E, A, B, C, R(22) );
 8017dda:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( E, A, B, C, D, R(21) );
 8017ddc:	9109      	str	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
 8017dde:	9903      	ldr	r1, [sp, #12]
 8017de0:	ea87 0709 	eor.w	r7, r7, r9
 8017de4:	404f      	eors	r7, r1
 8017de6:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( A, B, C, D, E, R(20) );
 8017dea:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( D, E, A, B, C, R(22) );
 8017dee:	ea4f 71f7 	mov.w	r1, r7, ror #31
    P( E, A, B, C, D, R(21) );
 8017df2:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017df6:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
    P( D, E, A, B, C, R(22) );
 8017dfa:	ea80 0bb2 	eor.w	fp, r0, r2, ror #2
 8017dfe:	9110      	str	r1, [sp, #64]	; 0x40
    P( C, D, E, A, B, R(23) );
 8017e00:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017e02:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(22) );
 8017e04:	ea8b 0b05 	eor.w	fp, fp, r5
 8017e08:	44e3      	add	fp, ip
    P( C, D, E, A, B, R(23) );
 8017e0a:	468c      	mov	ip, r1
 8017e0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017e0e:	ea8c 0801 	eor.w	r8, ip, r1
 8017e12:	9904      	ldr	r1, [sp, #16]
 8017e14:	ea88 0801 	eor.w	r8, r8, r1
 8017e18:	9908      	ldr	r1, [sp, #32]
 8017e1a:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
    P( E, A, B, C, D, R(21) );
 8017e1e:	eb06 66f5 	add.w	r6, r6, r5, ror #27
    P( D, E, A, B, C, R(22) );
 8017e22:	eb03 7cf8 	add.w	ip, r3, r8, ror #31
    P( C, D, E, A, B, R(23) );
 8017e26:	ea80 0eb5 	eor.w	lr, r0, r5, ror #2
 8017e2a:	eb0c 02b2 	add.w	r2, ip, r2, ror #2
 8017e2e:	ea8e 0e06 	eor.w	lr, lr, r6
 8017e32:	ea4f 71f8 	mov.w	r1, r8, ror #31
 8017e36:	4496      	add	lr, r2
    P( B, C, D, E, A, R(24) );
 8017e38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(23) );
 8017e3a:	9111      	str	r1, [sp, #68]	; 0x44
    P( B, C, D, E, A, R(24) );
 8017e3c:	9906      	ldr	r1, [sp, #24]
 8017e3e:	ea89 0202 	eor.w	r2, r9, r2
 8017e42:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
 8017e46:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
 8017e48:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( B, C, D, E, A, R(24) );
 8017e4c:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
    P( C, D, E, A, B, R(23) );
 8017e50:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8017e54:	eb03 79f2 	add.w	r9, r3, r2, ror #31
    P( B, C, D, E, A, R(24) );
 8017e58:	ea86 0cb5 	eor.w	ip, r6, r5, ror #2
 8017e5c:	4448      	add	r0, r9
 8017e5e:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( A, B, C, D, E, R(25) );
 8017e62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017e64:	4484      	add	ip, r0
 8017e66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017e68:	4048      	eors	r0, r1
 8017e6a:	9907      	ldr	r1, [sp, #28]
 8017e6c:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
 8017e70:	ea80 71f7 	eor.w	r1, r0, r7, ror #31
    P( C, D, E, A, B, R(23) );
 8017e74:	eb0e 6efb 	add.w	lr, lr, fp, ror #27
    P( B, C, D, E, A, R(24) );
 8017e78:	eb03 79f1 	add.w	r9, r3, r1, ror #31
    P( A, B, C, D, E, R(25) );
 8017e7c:	ea86 00bb 	eor.w	r0, r6, fp, ror #2
 8017e80:	eb09 05b5 	add.w	r5, r9, r5, ror #2
 8017e84:	ea80 000e 	eor.w	r0, r0, lr
 8017e88:	910a      	str	r1, [sp, #40]	; 0x28
 8017e8a:	4428      	add	r0, r5
    P( E, A, B, C, D, R(26) );
 8017e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017e8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017e90:	404d      	eors	r5, r1
 8017e92:	ea85 7afa 	eor.w	sl, r5, sl, ror #31
    P( B, C, D, E, A, R(24) );
 8017e96:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( E, A, B, C, D, R(26) );
 8017e9a:	ea8a 7af8 	eor.w	sl, sl, r8, ror #31
    P( A, B, C, D, E, R(25) );
 8017e9e:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8017ea2:	eb03 79fa 	add.w	r9, r3, sl, ror #31
    P( E, A, B, C, D, R(26) );
 8017ea6:	ea8e 05bb 	eor.w	r5, lr, fp, ror #2
 8017eaa:	ea4f 71fa 	mov.w	r1, sl, ror #31
 8017eae:	444e      	add	r6, r9
 8017eb0:	ea85 050c 	eor.w	r5, r5, ip
 8017eb4:	9114      	str	r1, [sp, #80]	; 0x50
 8017eb6:	4435      	add	r5, r6
    P( D, E, A, B, C, R(27) );
 8017eb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017eba:	e003      	b.n	8017ec4 <mbedtls_sha1_process+0x424>
 8017ebc:	5a827999 	.word	0x5a827999
 8017ec0:	6ed9eba1 	.word	0x6ed9eba1
 8017ec4:	9e02      	ldr	r6, [sp, #8]
 8017ec6:	ea81 0906 	eor.w	r9, r1, r6
 8017eca:	ea89 74f4 	eor.w	r4, r9, r4, ror #31
 8017ece:	ea84 74f2 	eor.w	r4, r4, r2, ror #31
    P( A, B, C, D, E, R(25) );
 8017ed2:	eb00 60fc 	add.w	r0, r0, ip, ror #27
    P( E, A, B, C, D, R(26) );
 8017ed6:	eb03 79f4 	add.w	r9, r3, r4, ror #31
    P( D, E, A, B, C, R(27) );
 8017eda:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
 8017ede:	ea4f 71f4 	mov.w	r1, r4, ror #31
 8017ee2:	4046      	eors	r6, r0
 8017ee4:	eb09 0bbb 	add.w	fp, r9, fp, ror #2
 8017ee8:	9115      	str	r1, [sp, #84]	; 0x54
 8017eea:	44b3      	add	fp, r6
    P( C, D, E, A, B, R(28) );
 8017eec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017eee:	9e03      	ldr	r6, [sp, #12]
 8017ef0:	404e      	eors	r6, r1
 8017ef2:	9908      	ldr	r1, [sp, #32]
 8017ef4:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 8017ef8:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(26) );
 8017efa:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( C, D, E, A, B, R(28) );
 8017efe:	ea86 71f1 	eor.w	r1, r6, r1, ror #31
    P( D, E, A, B, C, R(27) );
 8017f02:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017f06:	eb03 79f1 	add.w	r9, r3, r1, ror #31
    P( C, D, E, A, B, R(28) );
 8017f0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f0c:	ea80 06bc 	eor.w	r6, r0, ip, ror #2
    P( B, C, D, E, A, R(29) );
 8017f10:	9902      	ldr	r1, [sp, #8]
 8017f12:	44ce      	add	lr, r9
    P( C, D, E, A, B, R(28) );
 8017f14:	406e      	eors	r6, r5
 8017f16:	4476      	add	r6, lr
    P( B, C, D, E, A, R(29) );
 8017f18:	468e      	mov	lr, r1
 8017f1a:	9904      	ldr	r1, [sp, #16]
 8017f1c:	ea8e 0e01 	eor.w	lr, lr, r1
 8017f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f22:	ea8e 7ef1 	eor.w	lr, lr, r1, ror #31
 8017f26:	ea8e 71fa 	eor.w	r1, lr, sl, ror #31
    P( D, E, A, B, C, R(27) );
 8017f2a:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27
    P( C, D, E, A, B, R(28) );
 8017f2e:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
    P( B, C, D, E, A, R(29) );
 8017f32:	9102      	str	r1, [sp, #8]
 8017f34:	ea80 09b5 	eor.w	r9, r0, r5, ror #2
    P( A, B, C, D, E, R(30) );
 8017f38:	9903      	ldr	r1, [sp, #12]
 8017f3a:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
    P( B, C, D, E, A, R(29) );
 8017f3e:	ea89 090b 	eor.w	r9, r9, fp
 8017f42:	44e1      	add	r9, ip
    P( A, B, C, D, E, R(30) );
 8017f44:	468c      	mov	ip, r1
 8017f46:	9906      	ldr	r1, [sp, #24]
 8017f48:	ea8c 7ef1 	eor.w	lr, ip, r1, ror #31
 8017f4c:	ea8e 77f7 	eor.w	r7, lr, r7, ror #31
    P( C, D, E, A, B, R(28) );
 8017f50:	eb06 66fb 	add.w	r6, r6, fp, ror #27
    P( A, B, C, D, E, R(30) );
 8017f54:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( B, C, D, E, A, R(29) );
 8017f58:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8017f5c:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
    P( A, B, C, D, E, R(30) );
 8017f60:	ea8b 0cb5 	eor.w	ip, fp, r5, ror #2
 8017f64:	ea4f 71f7 	mov.w	r1, r7, ror #31
 8017f68:	4470      	add	r0, lr
 8017f6a:	ea8c 0c06 	eor.w	ip, ip, r6
 8017f6e:	910d      	str	r1, [sp, #52]	; 0x34
 8017f70:	4484      	add	ip, r0
    P( E, A, B, C, D, R(31) );
 8017f72:	9904      	ldr	r1, [sp, #16]
 8017f74:	9807      	ldr	r0, [sp, #28]
 8017f76:	ea81 70f0 	eor.w	r0, r1, r0, ror #31
 8017f7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017f7c:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
 8017f80:	ea80 71f1 	eor.w	r1, r0, r1, ror #31
 8017f84:	910c      	str	r1, [sp, #48]	; 0x30
 8017f86:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8017f8a:	9116      	str	r1, [sp, #88]	; 0x58
 8017f8c:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8017f8e:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(29) );
 8017f90:	eb09 69f6 	add.w	r9, r9, r6, ror #27
    P( A, B, C, D, E, R(30) );
 8017f94:	eb03 78f1 	add.w	r8, r3, r1, ror #31
    P( E, A, B, C, D, R(31) );
 8017f98:	ea8b 0eb6 	eor.w	lr, fp, r6, ror #2
 8017f9c:	eb08 05b5 	add.w	r5, r8, r5, ror #2
 8017fa0:	ea8e 0e09 	eor.w	lr, lr, r9
    P( D, E, A, B, C, R(32) );
 8017fa4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017fa6:	44ae      	add	lr, r5
 8017fa8:	9d06      	ldr	r5, [sp, #24]
 8017faa:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
 8017fae:	9902      	ldr	r1, [sp, #8]
 8017fb0:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
 8017fb4:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
 8017fb8:	9103      	str	r1, [sp, #12]
 8017fba:	eb03 78f1 	add.w	r8, r3, r1, ror #31
    P( C, D, E, A, B, R(33) );
 8017fbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017fc0:	44c3      	add	fp, r8
 8017fc2:	4688      	mov	r8, r1
 8017fc4:	9907      	ldr	r1, [sp, #28]
 8017fc6:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
 8017fca:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(30) );
 8017fcc:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27
    P( E, A, B, C, D, R(31) );
 8017fd0:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(32) );
 8017fd4:	ea89 05b6 	eor.w	r5, r9, r6, ror #2
    P( C, D, E, A, B, R(33) );
 8017fd8:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
 8017fdc:	ea88 71f7 	eor.w	r1, r8, r7, ror #31
    P( D, E, A, B, C, R(32) );
 8017fe0:	ea85 050c 	eor.w	r5, r5, ip
    P( E, A, B, C, D, R(31) );
 8017fe4:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, R(33) );
 8017fe8:	ea89 08bc 	eor.w	r8, r9, ip, ror #2
 8017fec:	445d      	add	r5, fp
 8017fee:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
 8017ff2:	eb0b 06b6 	add.w	r6, fp, r6, ror #2
 8017ff6:	ea88 080e 	eor.w	r8, r8, lr
 8017ffa:	9104      	str	r1, [sp, #16]
 8017ffc:	44b0      	add	r8, r6
    P( B, C, D, E, A, R(34) );
 8017ffe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018000:	9e08      	ldr	r6, [sp, #32]
 8018002:	ea81 76f6 	eor.w	r6, r1, r6, ror #31
 8018006:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018008:	ea86 7afa 	eor.w	sl, r6, sl, ror #31
 801800c:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
    P( D, E, A, B, C, R(32) );
 8018010:	eb05 65fe 	add.w	r5, r5, lr, ror #27
    P( B, C, D, E, A, R(34) );
 8018014:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(33) );
 8018018:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 801801c:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
    P( B, C, D, E, A, R(34) );
 8018020:	9112      	str	r1, [sp, #72]	; 0x48
 8018022:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
    P( A, B, C, D, E, R(35) );
 8018026:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018028:	44d9      	add	r9, fp
    P( B, C, D, E, A, R(34) );
 801802a:	406e      	eors	r6, r5
 801802c:	444e      	add	r6, r9
    P( A, B, C, D, E, R(35) );
 801802e:	ea81 79f0 	eor.w	r9, r1, r0, ror #31
 8018032:	9903      	ldr	r1, [sp, #12]
 8018034:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
 8018038:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
 801803c:	ea4f 71f9 	mov.w	r1, r9, ror #31
    P( C, D, E, A, B, R(33) );
 8018040:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( B, C, D, E, A, R(34) );
 8018044:	eb03 7bf9 	add.w	fp, r3, r9, ror #31
    P( A, B, C, D, E, R(35) );
 8018048:	9113      	str	r1, [sp, #76]	; 0x4c
 801804a:	ea8e 04b5 	eor.w	r4, lr, r5, ror #2
    P( E, A, B, C, D, R(36) );
 801804e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018050:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
    P( A, B, C, D, E, R(35) );
 8018054:	ea84 0408 	eor.w	r4, r4, r8
 8018058:	4464      	add	r4, ip
    P( E, A, B, C, D, R(36) );
 801805a:	468c      	mov	ip, r1
 801805c:	9908      	ldr	r1, [sp, #32]
 801805e:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
 8018062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018064:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
 8018068:	9904      	ldr	r1, [sp, #16]
    P( B, C, D, E, A, R(34) );
 801806a:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( E, A, B, C, D, R(36) );
 801806e:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
    P( A, B, C, D, E, R(35) );
 8018072:	ea4f 08b8 	mov.w	r8, r8, ror #2
 8018076:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
    P( E, A, B, C, D, R(36) );
 801807a:	9106      	str	r1, [sp, #24]
 801807c:	ea88 0cb5 	eor.w	ip, r8, r5, ror #2
    P( D, E, A, B, C, R(37) );
 8018080:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018082:	44de      	add	lr, fp
    P( E, A, B, C, D, R(36) );
 8018084:	ea8c 0c06 	eor.w	ip, ip, r6
 8018088:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(37) );
 801808a:	ea81 7ef0 	eor.w	lr, r1, r0, ror #31
 801808e:	9902      	ldr	r1, [sp, #8]
 8018090:	ea8e 71f1 	eor.w	r1, lr, r1, ror #31
 8018094:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 8018098:	9107      	str	r1, [sp, #28]
 801809a:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 801809e:	eb01 05b5 	add.w	r5, r1, r5, ror #2
    P( C, D, E, A, B, R(38) );
 80180a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80180a4:	ea81 7ef2 	eor.w	lr, r1, r2, ror #31
 80180a8:	ea8e 7ef7 	eor.w	lr, lr, r7, ror #31
 80180ac:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 80180b0:	ea4f 71fe 	mov.w	r1, lr, ror #31
 80180b4:	9110      	str	r1, [sp, #64]	; 0x40
 80180b6:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( B, C, D, E, A, R(39) );
 80180ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(37) );
 80180bc:	ea88 0bb6 	eor.w	fp, r8, r6, ror #2
 80180c0:	4488      	add	r8, r1
    P( B, C, D, E, A, R(39) );
 80180c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80180c4:	ea81 77f7 	eor.w	r7, r1, r7, ror #31
 80180c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80180ca:	ea87 70f1 	eor.w	r0, r7, r1, ror #31
 80180ce:	9906      	ldr	r1, [sp, #24]
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 80180d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(35) );
 80180d2:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( B, C, D, E, A, R(39) );
 80180d6:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
    P( D, E, A, B, C, R(37) );
 80180da:	ea8b 0b04 	eor.w	fp, fp, r4
    P( E, A, B, C, D, R(36) );
 80180de:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(39) );
 80180e2:	ea4f 71f0 	mov.w	r1, r0, ror #31
    P( D, E, A, B, C, R(37) );
 80180e6:	ea4f 04b4 	mov.w	r4, r4, ror #2
 80180ea:	44ab      	add	fp, r5
 80180ec:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( B, C, D, E, A, R(39) );
 80180f0:	910c      	str	r1, [sp, #48]	; 0x30
 80180f2:	eb03 73f0 	add.w	r3, r3, r0, ror #31
 80180f6:	ea84 01bc 	eor.w	r1, r4, ip, ror #2
 80180fa:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 80180fe:	ea81 010b 	eor.w	r1, r1, fp
 8018102:	4419      	add	r1, r3
    P( A, B, C, D, E, R(40) );
 8018104:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018106:	ea83 72f2 	eor.w	r2, r3, r2, ror #31
 801810a:	9b03      	ldr	r3, [sp, #12]
 801810c:	ea82 72f3 	eor.w	r2, r2, r3, ror #31
 8018110:	9b07      	ldr	r3, [sp, #28]
 8018112:	ea82 73f3 	eor.w	r3, r2, r3, ror #31
 8018116:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(38) );
 8018118:	ea84 05b6 	eor.w	r5, r4, r6, ror #2
 801811c:	4bda      	ldr	r3, [pc, #872]	; (8018488 <mbedtls_sha1_process+0x9e8>)
 801811e:	9a08      	ldr	r2, [sp, #32]
 8018120:	ea85 050c 	eor.w	r5, r5, ip
 8018124:	4445      	add	r5, r8
 8018126:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( B, C, D, E, A, R(39) );
 801812a:	eb03 76f2 	add.w	r6, r3, r2, ror #31
 801812e:	4434      	add	r4, r6
    P( A, B, C, D, E, R(40) );
 8018130:	ea45 06bb 	orr.w	r6, r5, fp, ror #2
    P( B, C, D, E, A, R(39) );
 8018134:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( A, B, C, D, E, R(40) );
 8018138:	ea05 02bb 	and.w	r2, r5, fp, ror #2
 801813c:	ea06 06bc 	and.w	r6, r6, ip, ror #2
 8018140:	eb04 64f1 	add.w	r4, r4, r1, ror #27
 8018144:	4316      	orrs	r6, r2
 8018146:	4426      	add	r6, r4
    P( E, A, B, C, D, R(41) );
 8018148:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801814a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801814c:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
 8018150:	9c04      	ldr	r4, [sp, #16]
 8018152:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
 8018156:	ea82 72fe 	eor.w	r2, r2, lr, ror #31
 801815a:	ea41 04b5 	orr.w	r4, r1, r5, ror #2
 801815e:	9209      	str	r2, [sp, #36]	; 0x24
 8018160:	ea04 02bb 	and.w	r2, r4, fp, ror #2
 8018164:	ea01 04b5 	and.w	r4, r1, r5, ror #2
 8018168:	4314      	orrs	r4, r2
 801816a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801816c:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8018170:	eb02 0cbc 	add.w	ip, r2, ip, ror #2
    P( D, E, A, B, C, R(42) );
 8018174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018176:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
 801817a:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 801817e:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 8018182:	ea4f 72fa 	mov.w	r2, sl, ror #31
 8018186:	9211      	str	r2, [sp, #68]	; 0x44
 8018188:	4464      	add	r4, ip
 801818a:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( E, A, B, C, D, R(41) );
 801818e:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( D, E, A, B, C, R(42) );
 8018192:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
 8018196:	eb0b 62f4 	add.w	r2, fp, r4, ror #27
 801819a:	ea46 0bb1 	orr.w	fp, r6, r1, ror #2
 801819e:	ea06 07b1 	and.w	r7, r6, r1, ror #2
 80181a2:	ea0b 0bb5 	and.w	fp, fp, r5, ror #2
 80181a6:	ea4b 0b07 	orr.w	fp, fp, r7
 80181aa:	4493      	add	fp, r2
    P( C, D, E, A, B, R(43) );
 80181ac:	9f02      	ldr	r7, [sp, #8]
 80181ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80181b0:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
 80181b4:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 80181b8:	9a08      	ldr	r2, [sp, #32]
 80181ba:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
 80181be:	ea44 08b6 	orr.w	r8, r4, r6, ror #2
 80181c2:	ea4f 72f9 	mov.w	r2, r9, ror #31
 80181c6:	9214      	str	r2, [sp, #80]	; 0x50
 80181c8:	ea08 02b1 	and.w	r2, r8, r1, ror #2
 80181cc:	ea04 08b6 	and.w	r8, r4, r6, ror #2
 80181d0:	ea42 0808 	orr.w	r8, r2, r8
 80181d4:	eb03 72f9 	add.w	r2, r3, r9, ror #31
 80181d8:	eb02 05b5 	add.w	r5, r2, r5, ror #2
 80181dc:	44a8      	add	r8, r5
    P( B, C, D, E, A, R(44) );
 80181de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80181e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80181e2:	ea82 75f5 	eor.w	r5, r2, r5, ror #31
 80181e6:	9a06      	ldr	r2, [sp, #24]
 80181e8:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
 80181ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181ee:	ea85 72f2 	eor.w	r2, r5, r2, ror #31
 80181f2:	eb03 7cf2 	add.w	ip, r3, r2, ror #31
 80181f6:	eb0c 01b1 	add.w	r1, ip, r1, ror #2
 80181fa:	ea4b 0cb4 	orr.w	ip, fp, r4, ror #2
    P( C, D, E, A, B, R(43) );
 80181fe:	eb08 68fb 	add.w	r8, r8, fp, ror #27
    P( B, C, D, E, A, R(44) );
 8018202:	ea0b 05b4 	and.w	r5, fp, r4, ror #2
 8018206:	ea0c 0cb6 	and.w	ip, ip, r6, ror #2
 801820a:	920a      	str	r2, [sp, #40]	; 0x28
 801820c:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( A, B, C, D, E, R(45) );
 8018210:	9a16      	ldr	r2, [sp, #88]	; 0x58
    P( B, C, D, E, A, R(44) );
 8018212:	ea4c 0c05 	orr.w	ip, ip, r5
 8018216:	448c      	add	ip, r1
    P( A, B, C, D, E, R(45) );
 8018218:	9907      	ldr	r1, [sp, #28]
    P( E, A, B, C, D, R(46) );
 801821a:	9d03      	ldr	r5, [sp, #12]
    P( A, B, C, D, E, R(45) );
 801821c:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
 8018220:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
 8018224:	ea82 72fa 	eor.w	r2, r2, sl, ror #31
 8018228:	9202      	str	r2, [sp, #8]
 801822a:	ea48 02bb 	orr.w	r2, r8, fp, ror #2
 801822e:	ea02 01b4 	and.w	r1, r2, r4, ror #2
 8018232:	ea08 02bb 	and.w	r2, r8, fp, ror #2
 8018236:	430a      	orrs	r2, r1
 8018238:	9902      	ldr	r1, [sp, #8]
 801823a:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 801823e:	eb01 06b6 	add.w	r6, r1, r6, ror #2
    P( E, A, B, C, D, R(46) );
 8018242:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018244:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 8018248:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
 801824c:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 8018250:	ea4f 71fe 	mov.w	r1, lr, ror #31
 8018254:	910b      	str	r1, [sp, #44]	; 0x2c
 8018256:	4432      	add	r2, r6
 8018258:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( A, B, C, D, E, R(45) );
 801825c:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( E, A, B, C, D, R(46) );
 8018260:	eb01 04b4 	add.w	r4, r1, r4, ror #2
 8018264:	eb04 61f2 	add.w	r1, r4, r2, ror #27
 8018268:	ea4c 04b8 	orr.w	r4, ip, r8, ror #2
 801826c:	ea0c 06b8 	and.w	r6, ip, r8, ror #2
 8018270:	ea04 04bb 	and.w	r4, r4, fp, ror #2
 8018274:	4334      	orrs	r4, r6
 8018276:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 8018278:	9916      	ldr	r1, [sp, #88]	; 0x58
 801827a:	9d04      	ldr	r5, [sp, #16]
 801827c:	ea81 77f5 	eor.w	r7, r1, r5, ror #31
 8018280:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(48) );
 8018282:	9d03      	ldr	r5, [sp, #12]
    P( D, E, A, B, C, R(47) );
 8018284:	ea87 77f0 	eor.w	r7, r7, r0, ror #31
 8018288:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 801828c:	ea42 00bc 	orr.w	r0, r2, ip, ror #2
 8018290:	ea4f 71f7 	mov.w	r1, r7, ror #31
 8018294:	910d      	str	r1, [sp, #52]	; 0x34
 8018296:	ea00 01b8 	and.w	r1, r0, r8, ror #2
 801829a:	ea02 00bc 	and.w	r0, r2, ip, ror #2
 801829e:	4308      	orrs	r0, r1
 80182a0:	eb03 71f7 	add.w	r1, r3, r7, ror #31
 80182a4:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( C, D, E, A, B, R(48) );
 80182a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80182aa:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
 80182ae:	9908      	ldr	r1, [sp, #32]
 80182b0:	ea85 75f1 	eor.w	r5, r5, r1, ror #31
 80182b4:	9902      	ldr	r1, [sp, #8]
 80182b6:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
 80182ba:	4458      	add	r0, fp
 80182bc:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
 80182c0:	eb0b 08b8 	add.w	r8, fp, r8, ror #2
 80182c4:	ea44 0bb2 	orr.w	fp, r4, r2, ror #2
 80182c8:	9103      	str	r1, [sp, #12]
 80182ca:	ea0b 0bbc 	and.w	fp, fp, ip, ror #2
 80182ce:	ea04 01b2 	and.w	r1, r4, r2, ror #2
    P( B, C, D, E, A, R(49) );
 80182d2:	9d04      	ldr	r5, [sp, #16]
    P( C, D, E, A, B, R(48) );
 80182d4:	ea4b 0b01 	orr.w	fp, fp, r1
    P( B, C, D, E, A, R(49) );
 80182d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80182da:	ea81 76f5 	eor.w	r6, r1, r5, ror #31
 80182de:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(47) );
 80182e0:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, R(49) );
 80182e4:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 80182e8:	ea86 71fe 	eor.w	r1, r6, lr, ror #31
 80182ec:	ea40 05b4 	orr.w	r5, r0, r4, ror #2
 80182f0:	9104      	str	r1, [sp, #16]
 80182f2:	ea05 01b2 	and.w	r1, r5, r2, ror #2
 80182f6:	ea00 05b4 	and.w	r5, r0, r4, ror #2
 80182fa:	430d      	orrs	r5, r1
 80182fc:	9904      	ldr	r1, [sp, #16]
    P( A, B, C, D, E, R(50) );
 80182fe:	9e06      	ldr	r6, [sp, #24]
 8018300:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 8018304:	eb01 0cbc 	add.w	ip, r1, ip, ror #2
 8018308:	9912      	ldr	r1, [sp, #72]	; 0x48
 801830a:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
 801830e:	ea81 7afa 	eor.w	sl, r1, sl, ror #31
 8018312:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
 8018316:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 801831a:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(48) );
 801831e:	44c3      	add	fp, r8
    P( A, B, C, D, E, R(50) );
 8018320:	9112      	str	r1, [sp, #72]	; 0x48
 8018322:	4465      	add	r5, ip
 8018324:	eb03 71fa 	add.w	r1, r3, sl, ror #31
    P( B, C, D, E, A, R(49) );
 8018328:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( A, B, C, D, E, R(50) );
 801832c:	eb01 02b2 	add.w	r2, r1, r2, ror #2
 8018330:	eb02 61f5 	add.w	r1, r2, r5, ror #27
 8018334:	ea4b 02b0 	orr.w	r2, fp, r0, ror #2
 8018338:	ea0b 0cb0 	and.w	ip, fp, r0, ror #2
 801833c:	ea02 02b4 	and.w	r2, r2, r4, ror #2
 8018340:	ea42 020c 	orr.w	r2, r2, ip
 8018344:	440a      	add	r2, r1
    P( E, A, B, C, D, R(51) );
 8018346:	9e07      	ldr	r6, [sp, #28]
 8018348:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801834a:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
 801834e:	ea81 79f9 	eor.w	r9, r1, r9, ror #31
 8018352:	9903      	ldr	r1, [sp, #12]
 8018354:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
 8018358:	ea45 06bb 	orr.w	r6, r5, fp, ror #2
 801835c:	ea4f 71f9 	mov.w	r1, r9, ror #31
 8018360:	9113      	str	r1, [sp, #76]	; 0x4c
 8018362:	ea06 01b0 	and.w	r1, r6, r0, ror #2
 8018366:	ea05 06bb 	and.w	r6, r5, fp, ror #2
 801836a:	430e      	orrs	r6, r1
 801836c:	eb03 71f9 	add.w	r1, r3, r9, ror #31
 8018370:	eb01 04b4 	add.w	r4, r1, r4, ror #2
 8018374:	4426      	add	r6, r4
    P( D, E, A, B, C, R(52) );
 8018376:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018378:	9c06      	ldr	r4, [sp, #24]
 801837a:	ea81 74f4 	eor.w	r4, r1, r4, ror #31
 801837e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018380:	ea84 74f1 	eor.w	r4, r4, r1, ror #31
 8018384:	9904      	ldr	r1, [sp, #16]
 8018386:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 801838a:	9106      	str	r1, [sp, #24]
 801838c:	eb03 71f1 	add.w	r1, r3, r1, ror #31
    P( E, A, B, C, D, R(51) );
 8018390:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( D, E, A, B, C, R(52) );
 8018394:	eb01 00b0 	add.w	r0, r1, r0, ror #2
 8018398:	eb00 61f6 	add.w	r1, r0, r6, ror #27
 801839c:	ea42 00b5 	orr.w	r0, r2, r5, ror #2
 80183a0:	ea02 04b5 	and.w	r4, r2, r5, ror #2
 80183a4:	ea00 00bb 	and.w	r0, r0, fp, ror #2
 80183a8:	4320      	orrs	r0, r4
 80183aa:	4408      	add	r0, r1
    P( C, D, E, A, B, R(53) );
 80183ac:	9c07      	ldr	r4, [sp, #28]
 80183ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80183b0:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 80183b4:	9c02      	ldr	r4, [sp, #8]
 80183b6:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 80183ba:	ea46 08b2 	orr.w	r8, r6, r2, ror #2
 80183be:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 80183c2:	9107      	str	r1, [sp, #28]
 80183c4:	ea08 01b5 	and.w	r1, r8, r5, ror #2
 80183c8:	ea06 08b2 	and.w	r8, r6, r2, ror #2
 80183cc:	ea41 0808 	orr.w	r8, r1, r8
 80183d0:	9907      	ldr	r1, [sp, #28]
 80183d2:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 80183d6:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( B, C, D, E, A, R(54) );
 80183da:	9910      	ldr	r1, [sp, #64]	; 0x40
 80183dc:	9c08      	ldr	r4, [sp, #32]
 80183de:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 80183e2:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
 80183e6:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 80183ea:	ea4f 71fe 	mov.w	r1, lr, ror #31
 80183ee:	9110      	str	r1, [sp, #64]	; 0x40
 80183f0:	44d8      	add	r8, fp
 80183f2:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( C, D, E, A, B, R(53) );
 80183f6:	eb08 68f0 	add.w	r8, r8, r0, ror #27
    P( B, C, D, E, A, R(54) );
 80183fa:	eb01 05b5 	add.w	r5, r1, r5, ror #2
 80183fe:	eb05 61f8 	add.w	r1, r5, r8, ror #27
 8018402:	ea40 05b6 	orr.w	r5, r0, r6, ror #2
 8018406:	ea00 04b6 	and.w	r4, r0, r6, ror #2
 801840a:	ea05 05b2 	and.w	r5, r5, r2, ror #2
 801840e:	4325      	orrs	r5, r4
 8018410:	440d      	add	r5, r1
    P( A, B, C, D, E, R(55) );
 8018412:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018414:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018416:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 801841a:	9c06      	ldr	r4, [sp, #24]
 801841c:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
 8018420:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8018424:	ea48 0cb0 	orr.w	ip, r8, r0, ror #2
 8018428:	ea4f 74f1 	mov.w	r4, r1, ror #31
 801842c:	940c      	str	r4, [sp, #48]	; 0x30
 801842e:	ea0c 04b6 	and.w	r4, ip, r6, ror #2
 8018432:	ea08 0cb0 	and.w	ip, r8, r0, ror #2
 8018436:	ea44 0c0c 	orr.w	ip, r4, ip
 801843a:	eb03 74f1 	add.w	r4, r3, r1, ror #31
 801843e:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 8018442:	4494      	add	ip, r2
    P( E, A, B, C, D, R(56) );
 8018444:	9c08      	ldr	r4, [sp, #32]
 8018446:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018448:	ea82 77f4 	eor.w	r7, r2, r4, ror #31
 801844c:	9a03      	ldr	r2, [sp, #12]
 801844e:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 8018452:	9a07      	ldr	r2, [sp, #28]
 8018454:	ea87 72f2 	eor.w	r2, r7, r2, ror #31
 8018458:	eb03 77f2 	add.w	r7, r3, r2, ror #31
 801845c:	eb07 06b6 	add.w	r6, r7, r6, ror #2
 8018460:	ea45 07b8 	orr.w	r7, r5, r8, ror #2
 8018464:	ea05 04b8 	and.w	r4, r5, r8, ror #2
 8018468:	ea07 07b0 	and.w	r7, r7, r0, ror #2
    P( A, B, C, D, E, R(55) );
 801846c:	eb0c 6cf5 	add.w	ip, ip, r5, ror #27
    P( E, A, B, C, D, R(56) );
 8018470:	9208      	str	r2, [sp, #32]
 8018472:	4327      	orrs	r7, r4
    P( D, E, A, B, C, R(57) );
 8018474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018476:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018478:	eb06 66fc 	add.w	r6, r6, ip, ror #27
    P( E, A, B, C, D, R(56) );
 801847c:	4437      	add	r7, r6
    P( D, E, A, B, C, R(57) );
 801847e:	ea82 76f4 	eor.w	r6, r2, r4, ror #31
 8018482:	9a04      	ldr	r2, [sp, #16]
 8018484:	e002      	b.n	801848c <mbedtls_sha1_process+0x9ec>
 8018486:	bf00      	nop
 8018488:	8f1bbcdc 	.word	0x8f1bbcdc
 801848c:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 8018490:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
 8018494:	9209      	str	r2, [sp, #36]	; 0x24
 8018496:	ea4c 02b5 	orr.w	r2, ip, r5, ror #2
 801849a:	ea02 04b8 	and.w	r4, r2, r8, ror #2
 801849e:	ea0c 02b5 	and.w	r2, ip, r5, ror #2
 80184a2:	4322      	orrs	r2, r4
 80184a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80184a6:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 80184aa:	eb04 00b0 	add.w	r0, r4, r0, ror #2
 80184ae:	4402      	add	r2, r0
    P( C, D, E, A, B, R(58) );
 80184b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80184b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80184b4:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 80184b8:	ea80 7afa 	eor.w	sl, r0, sl, ror #31
 80184bc:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
 80184c0:	ea4f 70fa 	mov.w	r0, sl, ror #31
 80184c4:	9011      	str	r0, [sp, #68]	; 0x44
 80184c6:	eb03 70fa 	add.w	r0, r3, sl, ror #31
    P( D, E, A, B, C, R(57) );
 80184ca:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( C, D, E, A, B, R(58) );
 80184ce:	eb00 08b8 	add.w	r8, r0, r8, ror #2
 80184d2:	eb08 60f2 	add.w	r0, r8, r2, ror #27
 80184d6:	ea47 08bc 	orr.w	r8, r7, ip, ror #2
 80184da:	ea07 04bc 	and.w	r4, r7, ip, ror #2
 80184de:	ea08 08b5 	and.w	r8, r8, r5, ror #2
 80184e2:	ea48 0804 	orr.w	r8, r8, r4
 80184e6:	4480      	add	r8, r0
    P( B, C, D, E, A, R(59) );
 80184e8:	9c02      	ldr	r4, [sp, #8]
 80184ea:	9814      	ldr	r0, [sp, #80]	; 0x50
 80184ec:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 80184f0:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
 80184f4:	9808      	ldr	r0, [sp, #32]
 80184f6:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 80184fa:	ea4f 70f9 	mov.w	r0, r9, ror #31
 80184fe:	ea42 04b7 	orr.w	r4, r2, r7, ror #2
 8018502:	9014      	str	r0, [sp, #80]	; 0x50
 8018504:	ea04 04bc 	and.w	r4, r4, ip, ror #2
 8018508:	ea02 00b7 	and.w	r0, r2, r7, ror #2
 801850c:	eb03 73f9 	add.w	r3, r3, r9, ror #31
 8018510:	eb03 03b5 	add.w	r3, r3, r5, ror #2
 8018514:	4320      	orrs	r0, r4
 8018516:	4418      	add	r0, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8018518:	e9dd 430a 	ldrd	r4, r3, [sp, #40]	; 0x28
 801851c:	ea83 75f4 	eor.w	r5, r3, r4, ror #31
 8018520:	9b06      	ldr	r3, [sp, #24]
 8018522:	ea85 75f3 	eor.w	r5, r5, r3, ror #31
 8018526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018528:	ea85 73f3 	eor.w	r3, r5, r3, ror #31
 801852c:	930a      	str	r3, [sp, #40]	; 0x28
 801852e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018530:	4bd8      	ldr	r3, [pc, #864]	; (8018894 <mbedtls_sha1_process+0xdf4>)
    P( E, A, B, C, D, R(61) );
 8018532:	9d02      	ldr	r5, [sp, #8]
 8018534:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 8018538:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
 801853c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801853e:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 8018542:	9d07      	ldr	r5, [sp, #28]
 8018544:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 8018548:	ea84 74fa 	eor.w	r4, r4, sl, ror #31
 801854c:	9402      	str	r4, [sp, #8]
 801854e:	9d02      	ldr	r5, [sp, #8]
    P( D, E, A, B, C, R(62) );
 8018550:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(59) );
 8018552:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8018556:	eb03 75f5 	add.w	r5, r3, r5, ror #31
    P( A, B, C, D, E, R(60) );
 801855a:	ea82 0bb7 	eor.w	fp, r2, r7, ror #2
 801855e:	eb05 07b7 	add.w	r7, r5, r7, ror #2
    P( D, E, A, B, C, R(62) );
 8018562:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8018564:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
    P( A, B, C, D, E, R(60) );
 8018568:	ea8b 0b08 	eor.w	fp, fp, r8
    P( D, E, A, B, C, R(62) );
 801856c:	ea85 7efe 	eor.w	lr, r5, lr, ror #31
 8018570:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
    P( B, C, D, E, A, R(59) );
 8018574:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( E, A, B, C, D, R(61) );
 8018578:	ea82 04b8 	eor.w	r4, r2, r8, ror #2
 801857c:	44e3      	add	fp, ip
    P( A, B, C, D, E, R(60) );
 801857e:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
    P( D, E, A, B, C, R(62) );
 8018582:	ea4f 75fe 	mov.w	r5, lr, ror #31
    P( E, A, B, C, D, R(61) );
 8018586:	4044      	eors	r4, r0
 8018588:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 801858c:	950b      	str	r5, [sp, #44]	; 0x2c
 801858e:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 8018592:	eb03 75fe 	add.w	r5, r3, lr, ror #31
 8018596:	442a      	add	r2, r5
 8018598:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( C, D, E, A, B, R(63) );
 801859c:	9d04      	ldr	r5, [sp, #16]
 801859e:	4494      	add	ip, r2
 80185a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80185a2:	443c      	add	r4, r7
 80185a4:	ea82 77f5 	eor.w	r7, r2, r5, ror #31
 80185a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(64) );
 80185aa:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(63) );
 80185ac:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 80185b0:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 80185b4:	ea4f 72f7 	mov.w	r2, r7, ror #31
 80185b8:	920d      	str	r2, [sp, #52]	; 0x34
 80185ba:	eb03 72f7 	add.w	r2, r3, r7, ror #31
 80185be:	eb02 08b8 	add.w	r8, r2, r8, ror #2
    P( B, C, D, E, A, R(64) );
 80185c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80185c4:	ea82 72f6 	eor.w	r2, r2, r6, ror #31
 80185c8:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 80185cc:	9d02      	ldr	r5, [sp, #8]
    P( E, A, B, C, D, R(61) );
 80185ce:	eb04 64fb 	add.w	r4, r4, fp, ror #27
    P( C, D, E, A, B, R(63) );
 80185d2:	ea80 01bb 	eor.w	r1, r0, fp, ror #2
    P( D, E, A, B, C, R(62) );
 80185d6:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(64) );
 80185da:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
    P( C, D, E, A, B, R(63) );
 80185de:	4061      	eors	r1, r4
 80185e0:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(64) );
 80185e4:	9203      	str	r2, [sp, #12]
 80185e6:	4441      	add	r1, r8
 80185e8:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 80185ec:	ea84 08bb 	eor.w	r8, r4, fp, ror #2
 80185f0:	4410      	add	r0, r2
 80185f2:	ea88 080c 	eor.w	r8, r8, ip
    P( A, B, C, D, E, R(65) );
 80185f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80185f8:	4480      	add	r8, r0
 80185fa:	9804      	ldr	r0, [sp, #16]
 80185fc:	ea82 76f0 	eor.w	r6, r2, r0, ror #31
 8018600:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(66) );
 8018602:	9806      	ldr	r0, [sp, #24]
    P( A, B, C, D, E, R(65) );
 8018604:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 8018608:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
 801860c:	9204      	str	r2, [sp, #16]
 801860e:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8018612:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
    P( E, A, B, C, D, R(66) );
 8018616:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018618:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 801861c:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 8018620:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
 8018624:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( D, E, A, B, C, R(67) );
 8018628:	9807      	ldr	r0, [sp, #28]
    P( A, B, C, D, E, R(65) );
 801862a:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
 801862e:	4414      	add	r4, r2
    P( D, E, A, B, C, R(67) );
 8018630:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018632:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
    P( C, D, E, A, B, R(63) );
 8018636:	eb01 61fc 	add.w	r1, r1, ip, ror #27
    P( D, E, A, B, C, R(67) );
 801863a:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 801863e:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, R(64) );
 8018640:	eb08 68f1 	add.w	r8, r8, r1, ror #27
    P( A, B, C, D, E, R(65) );
 8018644:	404e      	eors	r6, r1
 8018646:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(67) );
 801864a:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
 801864e:	445e      	add	r6, fp
    P( E, A, B, C, D, R(66) );
 8018650:	ea81 0bbc 	eor.w	fp, r1, ip, ror #2
 8018654:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 8018658:	ea8b 0b08 	eor.w	fp, fp, r8
 801865c:	eb00 0cbc 	add.w	ip, r0, ip, ror #2
 8018660:	44a3      	add	fp, r4
    P( C, D, E, A, B, R(68) );
 8018662:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018664:	9c06      	ldr	r4, [sp, #24]
 8018666:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
 801866a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801866c:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 8018670:	9804      	ldr	r0, [sp, #16]
    P( A, B, C, D, E, R(65) );
 8018672:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( D, E, A, B, C, R(67) );
 8018676:	ea81 02b8 	eor.w	r2, r1, r8, ror #2
    P( E, A, B, C, D, R(66) );
 801867a:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( C, D, E, A, B, R(68) );
 801867e:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( D, E, A, B, C, R(67) );
 8018682:	4072      	eors	r2, r6
 8018684:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8018688:	eb03 70f4 	add.w	r0, r3, r4, ror #31
 801868c:	4462      	add	r2, ip
    P( C, D, E, A, B, R(68) );
 801868e:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
 8018692:	4401      	add	r1, r0
 8018694:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( B, C, D, E, A, R(69) );
 8018698:	9807      	ldr	r0, [sp, #28]
 801869a:	448c      	add	ip, r1
 801869c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801869e:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 80186a2:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 80186a6:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 80186aa:	eb03 70f1 	add.w	r0, r3, r1, ror #31
    P( D, E, A, B, C, R(67) );
 80186ae:	eb02 62fb 	add.w	r2, r2, fp, ror #27
    P( B, C, D, E, A, R(69) );
 80186b2:	ea86 05bb 	eor.w	r5, r6, fp, ror #2
 80186b6:	eb00 08b8 	add.w	r8, r0, r8, ror #2
    P( A, B, C, D, E, R(70) );
 80186ba:	9810      	ldr	r0, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(69) );
 80186bc:	4055      	eors	r5, r2
 80186be:	4445      	add	r5, r8
    P( A, B, C, D, E, R(70) );
 80186c0:	4680      	mov	r8, r0
 80186c2:	9808      	ldr	r0, [sp, #32]
 80186c4:	ea88 70f0 	eor.w	r0, r8, r0, ror #31
 80186c8:	ea80 7efe 	eor.w	lr, r0, lr, ror #31
    P( C, D, E, A, B, R(68) );
 80186cc:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( A, B, C, D, E, R(70) );
 80186d0:	ea8e 70f9 	eor.w	r0, lr, r9, ror #31
    P( B, C, D, E, A, R(69) );
 80186d4:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(70) );
 80186d8:	9006      	str	r0, [sp, #24]
 80186da:	ea82 08bb 	eor.w	r8, r2, fp, ror #2
 80186de:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 80186e2:	4406      	add	r6, r0
 80186e4:	ea88 080c 	eor.w	r8, r8, ip
    P( E, A, B, C, D, R(71) );
 80186e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80186ea:	44b0      	add	r8, r6
 80186ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80186ee:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 80186f2:	ea80 77f7 	eor.w	r7, r0, r7, ror #31
 80186f6:	ea87 70f4 	eor.w	r0, r7, r4, ror #31
 80186fa:	9007      	str	r0, [sp, #28]
 80186fc:	9e07      	ldr	r6, [sp, #28]
    P( D, E, A, B, C, R(72) );
 80186fe:	9f08      	ldr	r7, [sp, #32]
 8018700:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 8018704:	eb06 0bbb 	add.w	fp, r6, fp, ror #2
 8018708:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801870a:	ea86 77f7 	eor.w	r7, r6, r7, ror #31
 801870e:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(69) );
 8018710:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( E, A, B, C, D, R(71) );
 8018714:	ea82 00bc 	eor.w	r0, r2, ip, ror #2
    P( D, E, A, B, C, R(72) );
 8018718:	ea87 77f6 	eor.w	r7, r7, r6, ror #31
    P( A, B, C, D, E, R(70) );
 801871c:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( D, E, A, B, C, R(72) );
 8018720:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
    P( E, A, B, C, D, R(71) );
 8018724:	4068      	eors	r0, r5
 8018726:	ea4f 05b5 	mov.w	r5, r5, ror #2
 801872a:	eb03 76f7 	add.w	r6, r3, r7, ror #31
    P( D, E, A, B, C, R(72) );
 801872e:	ea85 0ebc 	eor.w	lr, r5, ip, ror #2
 8018732:	4432      	add	r2, r6
 8018734:	ea8e 0e08 	eor.w	lr, lr, r8
    P( C, D, E, A, B, R(73) );
 8018738:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801873a:	4496      	add	lr, r2
 801873c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801873e:	ea82 76f6 	eor.w	r6, r2, r6, ror #31
 8018742:	9a04      	ldr	r2, [sp, #16]
 8018744:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 8018748:	9a06      	ldr	r2, [sp, #24]
 801874a:	ea86 72f2 	eor.w	r2, r6, r2, ror #31
 801874e:	9208      	str	r2, [sp, #32]
 8018750:	9e08      	ldr	r6, [sp, #32]
 8018752:	4458      	add	r0, fp
    P( E, A, B, C, D, R(71) );
 8018754:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( D, E, A, B, C, R(72) );
 8018758:	eb03 7bf6 	add.w	fp, r3, r6, ror #31
    P( C, D, E, A, B, R(73) );
 801875c:	ea85 02b8 	eor.w	r2, r5, r8, ror #2
    P( B, C, D, E, A, R(74) );
 8018760:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018762:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
    P( C, D, E, A, B, R(73) );
 8018766:	4042      	eors	r2, r0
 8018768:	4462      	add	r2, ip
    P( B, C, D, E, A, R(74) );
 801876a:	46b4      	mov	ip, r6
 801876c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801876e:	ea8c 7cf6 	eor.w	ip, ip, r6, ror #31
 8018772:	9e07      	ldr	r6, [sp, #28]
 8018774:	ea8c 7afa 	eor.w	sl, ip, sl, ror #31
    P( D, E, A, B, C, R(72) );
 8018778:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( B, C, D, E, A, R(74) );
 801877c:	ea8a 7af6 	eor.w	sl, sl, r6, ror #31
    P( C, D, E, A, B, R(73) );
 8018780:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8018784:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
    P( B, C, D, E, A, R(74) );
 8018788:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 801878c:	445d      	add	r5, fp
 801878e:	ea8c 0c0e 	eor.w	ip, ip, lr
    P( A, B, C, D, E, R(75) );
 8018792:	9e02      	ldr	r6, [sp, #8]
 8018794:	44ac      	add	ip, r5
 8018796:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018798:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
 801879c:	ea85 79f9 	eor.w	r9, r5, r9, ror #31
 80187a0:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 80187a4:	eb03 75f7 	add.w	r5, r3, r7, ror #31
 80187a8:	eb05 08b8 	add.w	r8, r5, r8, ror #2
    P( E, A, B, C, D, R(76) );
 80187ac:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
 80187b0:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
 80187b4:	ea85 74f4 	eor.w	r4, r5, r4, ror #31
 80187b8:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(73) );
 80187ba:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( A, B, C, D, E, R(75) );
 80187be:	ea80 0bbe 	eor.w	fp, r0, lr, ror #2
    P( B, C, D, E, A, R(74) );
 80187c2:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( E, A, B, C, D, R(76) );
 80187c6:	ea84 76f5 	eor.w	r6, r4, r5, ror #31
    P( A, B, C, D, E, R(75) );
 80187ca:	ea8b 0b02 	eor.w	fp, fp, r2
 80187ce:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80187d2:	eb03 75f6 	add.w	r5, r3, r6, ror #31
    P( E, A, B, C, D, R(76) );
 80187d6:	ea82 04be 	eor.w	r4, r2, lr, ror #2
 80187da:	ea84 040c 	eor.w	r4, r4, ip
 80187de:	4428      	add	r0, r5
 80187e0:	4420      	add	r0, r4
    P( D, E, A, B, C, R(77) );
 80187e2:	9d02      	ldr	r5, [sp, #8]
 80187e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80187e6:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 80187ea:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 80187ee:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 80187f2:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 80187f6:	44c3      	add	fp, r8
    P( A, B, C, D, E, R(75) );
 80187f8:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( E, A, B, C, D, R(76) );
 80187fc:	eb01 0ebe 	add.w	lr, r1, lr, ror #2
    P( D, E, A, B, C, R(77) );
 8018800:	ea82 01bc 	eor.w	r1, r2, ip, ror #2
 8018804:	ea81 010b 	eor.w	r1, r1, fp
    P( C, D, E, A, B, R(78) );
 8018808:	9c03      	ldr	r4, [sp, #12]
 801880a:	448e      	add	lr, r1
 801880c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801880e:	ea81 79f4 	eor.w	r9, r1, r4, ror #31
 8018812:	9906      	ldr	r1, [sp, #24]
    P( B, C, D, E, A, R(79) );
 8018814:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(78) );
 8018816:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
    P( B, C, D, E, A, R(79) );
 801881a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801881c:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8018820:	9c07      	ldr	r4, [sp, #28]
 8018822:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8018826:	ea81 76f6 	eor.w	r6, r1, r6, ror #31

#undef K
#undef F

    ctx->state[0] += A;
 801882a:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(78) );
 801882c:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
    P( E, A, B, C, D, R(76) );
 8018830:	eb00 60fb 	add.w	r0, r0, fp, ror #27
    P( D, E, A, B, C, R(77) );
 8018834:	eb03 79f9 	add.w	r9, r3, r9, ror #31
 8018838:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    ctx->state[0] += A;
 801883c:	440b      	add	r3, r1
 801883e:	eb03 73f6 	add.w	r3, r3, r6, ror #31
 8018842:	444a      	add	r2, r9
    P( C, D, E, A, B, R(78) );
 8018844:	ea8b 09bc 	eor.w	r9, fp, ip, ror #2
    P( D, E, A, B, C, R(77) );
 8018848:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( C, D, E, A, B, R(78) );
 801884c:	ea89 0900 	eor.w	r9, r9, r0
    ctx->state[0] += A;
 8018850:	eb03 0cbc 	add.w	ip, r3, ip, ror #2
    P( B, C, D, E, A, R(79) );
 8018854:	ea8b 03b0 	eor.w	r3, fp, r0, ror #2
 8018858:	444a      	add	r2, r9
 801885a:	ea83 030e 	eor.w	r3, r3, lr
    ctx->state[0] += A;
 801885e:	9900      	ldr	r1, [sp, #0]
    P( C, D, E, A, B, R(78) );
 8018860:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    ctx->state[0] += A;
 8018864:	4463      	add	r3, ip
 8018866:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 801886a:	608b      	str	r3, [r1, #8]
    ctx->state[1] += B;
 801886c:	9b01      	ldr	r3, [sp, #4]
 801886e:	441a      	add	r2, r3
    ctx->state[2] += C;
 8018870:	9b05      	ldr	r3, [sp, #20]
    ctx->state[1] += B;
 8018872:	60ca      	str	r2, [r1, #12]
    ctx->state[2] += C;
 8018874:	eb03 01be 	add.w	r1, r3, lr, ror #2
 8018878:	9b00      	ldr	r3, [sp, #0]
 801887a:	6119      	str	r1, [r3, #16]
    ctx->state[3] += D;
 801887c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801887e:	eb03 00b0 	add.w	r0, r3, r0, ror #2
 8018882:	9b00      	ldr	r3, [sp, #0]
 8018884:	6158      	str	r0, [r3, #20]
    ctx->state[4] += E;
 8018886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018888:	eb03 050b 	add.w	r5, r3, fp
 801888c:	9b00      	ldr	r3, [sp, #0]
 801888e:	619d      	str	r5, [r3, #24]
}
 8018890:	e002      	b.n	8018898 <mbedtls_sha1_process+0xdf8>
 8018892:	bf00      	nop
 8018894:	ca62c1d6 	.word	0xca62c1d6
 8018898:	b019      	add	sp, #100	; 0x64
 801889a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801889e:	bf00      	nop

080188a0 <mbedtls_sha1_update.part.0>:
#endif /* !MBEDTLS_SHA1_PROCESS_ALT */

/*
 * SHA-1 process buffer
 */
void mbedtls_sha1_update( mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen )
 80188a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 80188a4:	6803      	ldr	r3, [r0, #0]
 80188a6:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80188aa:	189b      	adds	r3, r3, r2
 80188ac:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80188ae:	bf24      	itt	cs
 80188b0:	6843      	ldrcs	r3, [r0, #4]
 80188b2:	3301      	addcs	r3, #1
void mbedtls_sha1_update( mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen )
 80188b4:	4605      	mov	r5, r0
 80188b6:	460e      	mov	r6, r1
 80188b8:	4614      	mov	r4, r2
        ctx->total[1]++;
 80188ba:	bf28      	it	cs
 80188bc:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 80188be:	b197      	cbz	r7, 80188e6 <mbedtls_sha1_update.part.0+0x46>
    fill = 64 - left;
 80188c0:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 80188c4:	4591      	cmp	r9, r2
 80188c6:	d80e      	bhi.n	80188e6 <mbedtls_sha1_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80188c8:	f100 081c 	add.w	r8, r0, #28
 80188cc:	464a      	mov	r2, r9
 80188ce:	eb08 0007 	add.w	r0, r8, r7
 80188d2:	f009 fdd5 	bl	8022480 <memcpy>
        mbedtls_sha1_process( ctx, ctx->buffer );
 80188d6:	4641      	mov	r1, r8
 80188d8:	4628      	mov	r0, r5
 80188da:	f7ff f8e1 	bl	8017aa0 <mbedtls_sha1_process>
        input += fill;
 80188de:	3c40      	subs	r4, #64	; 0x40
        ilen  -= fill;
 80188e0:	443c      	add	r4, r7
        input += fill;
 80188e2:	444e      	add	r6, r9
        left = 0;
 80188e4:	2700      	movs	r7, #0
 80188e6:	46a0      	mov	r8, r4
 80188e8:	eb06 0904 	add.w	r9, r6, r4
 80188ec:	e004      	b.n	80188f8 <mbedtls_sha1_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_sha1_process( ctx, input );
 80188ee:	4628      	mov	r0, r5
 80188f0:	f7ff f8d6 	bl	8017aa0 <mbedtls_sha1_process>
        input += 64;
        ilen  -= 64;
 80188f4:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 80188f8:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 80188fc:	eba9 0108 	sub.w	r1, r9, r8
 8018900:	d8f5      	bhi.n	80188ee <mbedtls_sha1_update.part.0+0x4e>
 8018902:	09a2      	lsrs	r2, r4, #6
 8018904:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8018908:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 801890c:	fb03 4202 	mla	r2, r3, r2, r4
    }

    if( ilen > 0 )
 8018910:	4431      	add	r1, r6
 8018912:	b132      	cbz	r2, 8018922 <mbedtls_sha1_update.part.0+0x82>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8018914:	f105 001c 	add.w	r0, r5, #28
 8018918:	4438      	add	r0, r7
}
 801891a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801891e:	f009 bdaf 	b.w	8022480 <memcpy>
}
 8018922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018926 <mbedtls_sha1_update>:
    if( ilen == 0 )
 8018926:	b10a      	cbz	r2, 801892c <mbedtls_sha1_update+0x6>
 8018928:	f7ff bfba 	b.w	80188a0 <mbedtls_sha1_update.part.0>
}
 801892c:	4770      	bx	lr
	...

08018930 <mbedtls_sha1_finish>:

/*
 * SHA-1 final digest
 */
void mbedtls_sha1_finish( mbedtls_sha1_context *ctx, unsigned char output[20] )
{
 8018930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018932:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8018934:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 8018938:	0f53      	lsrs	r3, r2, #29
 801893a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801893e:	ba1b      	rev	r3, r3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 8018940:	9300      	str	r3, [sp, #0]
    low  = ( ctx->total[0] <<  3 );
 8018942:	00d3      	lsls	r3, r2, #3
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 8018944:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8018948:	2a37      	cmp	r2, #55	; 0x37
{
 801894a:	4604      	mov	r4, r0
 801894c:	ba1b      	rev	r3, r3
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 801894e:	bf94      	ite	ls
 8018950:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 8018954:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    mbedtls_sha1_update( ctx, sha1_padding, padn );
 8018958:	491b      	ldr	r1, [pc, #108]	; (80189c8 <mbedtls_sha1_finish+0x98>)
    PUT_UINT32_BE( low,  msglen, 4 );
 801895a:	9301      	str	r3, [sp, #4]
    mbedtls_sha1_update( ctx, sha1_padding, padn );
 801895c:	f7ff ffe3 	bl	8018926 <mbedtls_sha1_update>
    if( ilen == 0 )
 8018960:	2208      	movs	r2, #8
 8018962:	4669      	mov	r1, sp
 8018964:	4620      	mov	r0, r4
 8018966:	f7ff ff9b 	bl	80188a0 <mbedtls_sha1_update.part.0>
    mbedtls_sha1_update( ctx, msglen, 8 );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 801896a:	7ae3      	ldrb	r3, [r4, #11]
 801896c:	702b      	strb	r3, [r5, #0]
 801896e:	8963      	ldrh	r3, [r4, #10]
 8018970:	706b      	strb	r3, [r5, #1]
 8018972:	68a3      	ldr	r3, [r4, #8]
 8018974:	0a1b      	lsrs	r3, r3, #8
 8018976:	70ab      	strb	r3, [r5, #2]
 8018978:	68a3      	ldr	r3, [r4, #8]
 801897a:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 801897c:	7be3      	ldrb	r3, [r4, #15]
 801897e:	712b      	strb	r3, [r5, #4]
 8018980:	89e3      	ldrh	r3, [r4, #14]
 8018982:	716b      	strb	r3, [r5, #5]
 8018984:	68e3      	ldr	r3, [r4, #12]
 8018986:	0a1b      	lsrs	r3, r3, #8
 8018988:	71ab      	strb	r3, [r5, #6]
 801898a:	68e3      	ldr	r3, [r4, #12]
 801898c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 801898e:	7ce3      	ldrb	r3, [r4, #19]
 8018990:	722b      	strb	r3, [r5, #8]
 8018992:	8a63      	ldrh	r3, [r4, #18]
 8018994:	726b      	strb	r3, [r5, #9]
 8018996:	6923      	ldr	r3, [r4, #16]
 8018998:	0a1b      	lsrs	r3, r3, #8
 801899a:	72ab      	strb	r3, [r5, #10]
 801899c:	6923      	ldr	r3, [r4, #16]
 801899e:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80189a0:	7de3      	ldrb	r3, [r4, #23]
 80189a2:	732b      	strb	r3, [r5, #12]
 80189a4:	8ae3      	ldrh	r3, [r4, #22]
 80189a6:	736b      	strb	r3, [r5, #13]
 80189a8:	6963      	ldr	r3, [r4, #20]
 80189aa:	0a1b      	lsrs	r3, r3, #8
 80189ac:	73ab      	strb	r3, [r5, #14]
 80189ae:	6963      	ldr	r3, [r4, #20]
 80189b0:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80189b2:	7ee3      	ldrb	r3, [r4, #27]
 80189b4:	742b      	strb	r3, [r5, #16]
 80189b6:	8b63      	ldrh	r3, [r4, #26]
 80189b8:	746b      	strb	r3, [r5, #17]
 80189ba:	69a3      	ldr	r3, [r4, #24]
 80189bc:	0a1b      	lsrs	r3, r3, #8
 80189be:	74ab      	strb	r3, [r5, #18]
 80189c0:	69a3      	ldr	r3, [r4, #24]
 80189c2:	74eb      	strb	r3, [r5, #19]
}
 80189c4:	b003      	add	sp, #12
 80189c6:	bd30      	pop	{r4, r5, pc}
 80189c8:	0802c76c 	.word	0x0802c76c

080189cc <mbedtls_sha1>:

/*
 * output = SHA-1( input buffer )
 */
void mbedtls_sha1( const unsigned char *input, size_t ilen, unsigned char output[20] )
{
 80189cc:	b570      	push	{r4, r5, r6, lr}
 80189ce:	b098      	sub	sp, #96	; 0x60
 80189d0:	4605      	mov	r5, r0
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80189d2:	a801      	add	r0, sp, #4
{
 80189d4:	460e      	mov	r6, r1
 80189d6:	4614      	mov	r4, r2
    mbedtls_sha1_init( &ctx );
 80189d8:	f7ff f835 	bl	8017a46 <mbedtls_sha1_init>
    mbedtls_sha1_starts( &ctx );
 80189dc:	a801      	add	r0, sp, #4
 80189de:	f7ff f845 	bl	8017a6c <mbedtls_sha1_starts>
    mbedtls_sha1_update( &ctx, input, ilen );
 80189e2:	4632      	mov	r2, r6
 80189e4:	4629      	mov	r1, r5
 80189e6:	a801      	add	r0, sp, #4
 80189e8:	f7ff ff9d 	bl	8018926 <mbedtls_sha1_update>
    mbedtls_sha1_finish( &ctx, output );
 80189ec:	4621      	mov	r1, r4
 80189ee:	a801      	add	r0, sp, #4
 80189f0:	f7ff ff9e 	bl	8018930 <mbedtls_sha1_finish>
    mbedtls_sha1_free( &ctx );
 80189f4:	a801      	add	r0, sp, #4
 80189f6:	f7ff f82a 	bl	8017a4e <mbedtls_sha1_free>
}
 80189fa:	b018      	add	sp, #96	; 0x60
 80189fc:	bd70      	pop	{r4, r5, r6, pc}

080189fe <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80189fe:	226c      	movs	r2, #108	; 0x6c
 8018a00:	2100      	movs	r1, #0
 8018a02:	f009 bd65 	b.w	80224d0 <memset>

08018a06 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 8018a06:	b120      	cbz	r0, 8018a12 <mbedtls_sha256_free+0xc>
 8018a08:	f100 036c 	add.w	r3, r0, #108	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8018a0c:	2200      	movs	r2, #0
 8018a0e:	4298      	cmp	r0, r3
 8018a10:	d100      	bne.n	8018a14 <mbedtls_sha256_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}
 8018a12:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8018a14:	f800 2b01 	strb.w	r2, [r0], #1
 8018a18:	e7f9      	b.n	8018a0e <mbedtls_sha256_free+0x8>

08018a1a <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8018a1a:	b508      	push	{r3, lr}
    *dst = *src;
 8018a1c:	226c      	movs	r2, #108	; 0x6c
 8018a1e:	f009 fd2f 	bl	8022480 <memcpy>
}
 8018a22:	bd08      	pop	{r3, pc}

08018a24 <mbedtls_sha256_starts>:
/*
 * SHA-256 context setup
 */
void mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 8018a24:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 8018a26:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
 8018a2a:	b9b9      	cbnz	r1, 8018a5c <mbedtls_sha256_starts+0x38>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
 8018a2c:	4a19      	ldr	r2, [pc, #100]	; (8018a94 <mbedtls_sha256_starts+0x70>)
 8018a2e:	4b1a      	ldr	r3, [pc, #104]	; (8018a98 <mbedtls_sha256_starts+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
 8018a30:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8018ac0 <mbedtls_sha256_starts+0x9c>
        ctx->state[1] = 0xBB67AE85;
 8018a34:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
 8018a38:	4b18      	ldr	r3, [pc, #96]	; (8018a9c <mbedtls_sha256_starts+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
 8018a3a:	4a19      	ldr	r2, [pc, #100]	; (8018aa0 <mbedtls_sha256_starts+0x7c>)
        ctx->state[3] = 0xA54FF53A;
 8018a3c:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
 8018a40:	4b18      	ldr	r3, [pc, #96]	; (8018aa4 <mbedtls_sha256_starts+0x80>)
 8018a42:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
 8018a46:	4b18      	ldr	r3, [pc, #96]	; (8018aa8 <mbedtls_sha256_starts+0x84>)
 8018a48:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8018a4a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8018a4e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8018a52:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 8018a56:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8018a58:	6681      	str	r1, [r0, #104]	; 0x68
}
 8018a5a:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 8018a5c:	4b13      	ldr	r3, [pc, #76]	; (8018aac <mbedtls_sha256_starts+0x88>)
 8018a5e:	4a14      	ldr	r2, [pc, #80]	; (8018ab0 <mbedtls_sha256_starts+0x8c>)
        ctx->state[4] = 0xFFC00B31;
 8018a60:	f8df c060 	ldr.w	ip, [pc, #96]	; 8018ac4 <mbedtls_sha256_starts+0xa0>
        ctx->state[1] = 0x367CD507;
 8018a64:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 8018a68:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8018a6c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8018a70:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8018a74:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 8018a76:	4b0f      	ldr	r3, [pc, #60]	; (8018ab4 <mbedtls_sha256_starts+0x90>)
 8018a78:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
 8018a7c:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8018a80:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8018a84:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8018a88:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 8018a8a:	4b0b      	ldr	r3, [pc, #44]	; (8018ab8 <mbedtls_sha256_starts+0x94>)
 8018a8c:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8018a8e:	4b0b      	ldr	r3, [pc, #44]	; (8018abc <mbedtls_sha256_starts+0x98>)
 8018a90:	e7e1      	b.n	8018a56 <mbedtls_sha256_starts+0x32>
 8018a92:	bf00      	nop
 8018a94:	6a09e667 	.word	0x6a09e667
 8018a98:	bb67ae85 	.word	0xbb67ae85
 8018a9c:	a54ff53a 	.word	0xa54ff53a
 8018aa0:	510e527f 	.word	0x510e527f
 8018aa4:	9b05688c 	.word	0x9b05688c
 8018aa8:	1f83d9ab 	.word	0x1f83d9ab
 8018aac:	367cd507 	.word	0x367cd507
 8018ab0:	c1059ed8 	.word	0xc1059ed8
 8018ab4:	ffc00b31 	.word	0xffc00b31
 8018ab8:	64f98fa7 	.word	0x64f98fa7
 8018abc:	befa4fa4 	.word	0xbefa4fa4
 8018ac0:	3c6ef372 	.word	0x3c6ef372
 8018ac4:	f70e5939 	.word	0xf70e5939

08018ac8 <mbedtls_sha256_process>:
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

void mbedtls_sha256_process( mbedtls_sha256_context *ctx, const unsigned char data[64] )
{
 8018ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018acc:	b0d1      	sub	sp, #324	; 0x144
 8018ace:	f100 0308 	add.w	r3, r0, #8
 8018ad2:	9305      	str	r3, [sp, #20]
 8018ad4:	ab08      	add	r3, sp, #32
 8018ad6:	9300      	str	r3, [sp, #0]
 8018ad8:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8018adc:	9306      	str	r3, [sp, #24]
 8018ade:	9a00      	ldr	r2, [sp, #0]
 8018ae0:	9b05      	ldr	r3, [sp, #20]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
 8018ae2:	f853 0b04 	ldr.w	r0, [r3], #4
 8018ae6:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
 8018aea:	9806      	ldr	r0, [sp, #24]
 8018aec:	4298      	cmp	r0, r3
 8018aee:	d1f8      	bne.n	8018ae2 <mbedtls_sha256_process+0x1a>
 8018af0:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8018af4:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8018af8:	464a      	mov	r2, r9
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 8018afa:	784b      	ldrb	r3, [r1, #1]
 8018afc:	780c      	ldrb	r4, [r1, #0]
 8018afe:	041b      	lsls	r3, r3, #16
 8018b00:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8018b04:	78cc      	ldrb	r4, [r1, #3]
 8018b06:	4323      	orrs	r3, r4
 8018b08:	788c      	ldrb	r4, [r1, #2]
 8018b0a:	3104      	adds	r1, #4
 8018b0c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    for( i = 0; i < 16; i++ )
 8018b10:	4288      	cmp	r0, r1
        GET_UINT32_BE( W[i], data, 4 * i );
 8018b12:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 16; i++ )
 8018b16:	d1f0      	bne.n	8018afa <mbedtls_sha256_process+0x32>
 8018b18:	9b00      	ldr	r3, [sp, #0]
 8018b1a:	9900      	ldr	r1, [sp, #0]
 8018b1c:	489b      	ldr	r0, [pc, #620]	; (8018d8c <mbedtls_sha256_process+0x2c4>)
 8018b1e:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8018b22:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8018b26:	68c9      	ldr	r1, [r1, #12]
 8018b28:	9001      	str	r0, [sp, #4]
 8018b2a:	e9d3 6b05 	ldrd	r6, fp, [r3, #20]
 8018b2e:	e9d3 7200 	ldrd	r7, r2, [r3]
 8018b32:	689b      	ldr	r3, [r3, #8]
 8018b34:	46ca      	mov	sl, r9
 8018b36:	4686      	mov	lr, r0

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8018b38:	f8de 0000 	ldr.w	r0, [lr]
 8018b3c:	f8da 4000 	ldr.w	r4, [sl]
 8018b40:	ea4f 25f8 	mov.w	r5, r8, ror #11
 8018b44:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
 8018b48:	4420      	add	r0, r4
 8018b4a:	ea85 6578 	eor.w	r5, r5, r8, ror #25
 8018b4e:	4405      	add	r5, r0
 8018b50:	ea8b 0006 	eor.w	r0, fp, r6
 8018b54:	ea00 0008 	and.w	r0, r0, r8
 8018b58:	ea80 000b 	eor.w	r0, r0, fp
 8018b5c:	4405      	add	r5, r0
 8018b5e:	ea47 0402 	orr.w	r4, r7, r2
 8018b62:	ea4f 3077 	mov.w	r0, r7, ror #13
 8018b66:	44ac      	add	ip, r5
 8018b68:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 8018b6c:	ea07 0502 	and.w	r5, r7, r2
 8018b70:	401c      	ands	r4, r3
 8018b72:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 8018b76:	432c      	orrs	r4, r5
 8018b78:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018b7a:	f8de 5004 	ldr.w	r5, [lr, #4]
 8018b7e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8018b82:	4405      	add	r5, r0
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8018b84:	4461      	add	r1, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018b86:	44ab      	add	fp, r5
 8018b88:	ea88 0506 	eor.w	r5, r8, r6
 8018b8c:	400d      	ands	r5, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8018b8e:	44a4      	add	ip, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018b90:	ea85 0406 	eor.w	r4, r5, r6
 8018b94:	eb0b 0504 	add.w	r5, fp, r4
 8018b98:	ea4f 2bf1 	mov.w	fp, r1, ror #11
 8018b9c:	ea8b 1bb1 	eor.w	fp, fp, r1, ror #6
 8018ba0:	ea8b 6b71 	eor.w	fp, fp, r1, ror #25
 8018ba4:	44ab      	add	fp, r5
 8018ba6:	ea4c 0007 	orr.w	r0, ip, r7
 8018baa:	ea4f 357c 	mov.w	r5, ip, ror #13
 8018bae:	ea0c 0407 	and.w	r4, ip, r7
 8018bb2:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8018bb6:	4010      	ands	r0, r2
 8018bb8:	4320      	orrs	r0, r4
 8018bba:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8018bbe:	f8de 4008 	ldr.w	r4, [lr, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018bc2:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8018bc4:	f8da 0008 	ldr.w	r0, [sl, #8]
 8018bc8:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018bca:	445b      	add	r3, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8018bcc:	4426      	add	r6, r4
 8018bce:	ea81 0408 	eor.w	r4, r1, r8
 8018bd2:	401c      	ands	r4, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018bd4:	445d      	add	r5, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8018bd6:	ea84 0b08 	eor.w	fp, r4, r8
 8018bda:	eb06 040b 	add.w	r4, r6, fp
 8018bde:	ea4f 26f3 	mov.w	r6, r3, ror #11
 8018be2:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
 8018be6:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 8018bea:	4426      	add	r6, r4
 8018bec:	ea4c 0005 	orr.w	r0, ip, r5
 8018bf0:	ea4f 3475 	mov.w	r4, r5, ror #13
 8018bf4:	ea0c 0b05 	and.w	fp, ip, r5
 8018bf8:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 8018bfc:	4038      	ands	r0, r7
 8018bfe:	ea40 000b 	orr.w	r0, r0, fp
 8018c02:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 8018c06:	4404      	add	r4, r0
 8018c08:	4434      	add	r4, r6
 8018c0a:	4432      	add	r2, r6
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8018c0c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018c10:	f8da 600c 	ldr.w	r6, [sl, #12]
 8018c14:	ea81 0b03 	eor.w	fp, r1, r3
 8018c18:	4430      	add	r0, r6
 8018c1a:	ea0b 0b02 	and.w	fp, fp, r2
 8018c1e:	ea4f 26f2 	mov.w	r6, r2, ror #11
 8018c22:	ea8b 0b01 	eor.w	fp, fp, r1
 8018c26:	4440      	add	r0, r8
 8018c28:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
 8018c2c:	4458      	add	r0, fp
 8018c2e:	ea86 6672 	eor.w	r6, r6, r2, ror #25
 8018c32:	4406      	add	r6, r0
 8018c34:	eb07 0806 	add.w	r8, r7, r6
 8018c38:	ea4f 3074 	mov.w	r0, r4, ror #13
 8018c3c:	ea45 0704 	orr.w	r7, r5, r4
 8018c40:	ea05 0b04 	and.w	fp, r5, r4
 8018c44:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8018c48:	ea07 070c 	and.w	r7, r7, ip
 8018c4c:	ea47 070b 	orr.w	r7, r7, fp
 8018c50:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
 8018c54:	4438      	add	r0, r7
 8018c56:	4430      	add	r0, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8018c58:	f8da 7010 	ldr.w	r7, [sl, #16]
 8018c5c:	f8de 6010 	ldr.w	r6, [lr, #16]
 8018c60:	ea83 0b02 	eor.w	fp, r3, r2
 8018c64:	443e      	add	r6, r7
 8018c66:	4431      	add	r1, r6
 8018c68:	ea0b 0b08 	and.w	fp, fp, r8
 8018c6c:	ea4f 26f8 	mov.w	r6, r8, ror #11
 8018c70:	ea8b 0b03 	eor.w	fp, fp, r3
 8018c74:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
 8018c78:	4459      	add	r1, fp
 8018c7a:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8018c7e:	440e      	add	r6, r1
 8018c80:	ea44 0700 	orr.w	r7, r4, r0
 8018c84:	ea4f 3170 	mov.w	r1, r0, ror #13
 8018c88:	ea04 0b00 	and.w	fp, r4, r0
 8018c8c:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8018c90:	402f      	ands	r7, r5
 8018c92:	ea47 070b 	orr.w	r7, r7, fp
 8018c96:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8018c9a:	4439      	add	r1, r7
 8018c9c:	4431      	add	r1, r6
 8018c9e:	44b4      	add	ip, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8018ca0:	f8da 7014 	ldr.w	r7, [sl, #20]
 8018ca4:	f8de 6014 	ldr.w	r6, [lr, #20]
 8018ca8:	ea82 0b08 	eor.w	fp, r2, r8
 8018cac:	443e      	add	r6, r7
 8018cae:	4433      	add	r3, r6
 8018cb0:	ea0b 0b0c 	and.w	fp, fp, ip
 8018cb4:	ea4f 26fc 	mov.w	r6, ip, ror #11
 8018cb8:	ea8b 0b02 	eor.w	fp, fp, r2
 8018cbc:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 8018cc0:	445b      	add	r3, fp
 8018cc2:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 8018cc6:	441e      	add	r6, r3
 8018cc8:	eb05 0b06 	add.w	fp, r5, r6
 8018ccc:	ea4f 3371 	mov.w	r3, r1, ror #13
 8018cd0:	ea40 0501 	orr.w	r5, r0, r1
 8018cd4:	ea00 0701 	and.w	r7, r0, r1
 8018cd8:	4025      	ands	r5, r4
 8018cda:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
 8018cde:	433d      	orrs	r5, r7
 8018ce0:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 8018ce4:	442b      	add	r3, r5
 8018ce6:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8018ce8:	f8de 5018 	ldr.w	r5, [lr, #24]
 8018cec:	f8da 6018 	ldr.w	r6, [sl, #24]
 8018cf0:	4435      	add	r5, r6
 8018cf2:	4415      	add	r5, r2
 8018cf4:	ea88 020c 	eor.w	r2, r8, ip
 8018cf8:	ea02 020b 	and.w	r2, r2, fp
 8018cfc:	ea82 0708 	eor.w	r7, r2, r8
 8018d00:	19ea      	adds	r2, r5, r7
 8018d02:	ea4f 25fb 	mov.w	r5, fp, ror #11
 8018d06:	ea85 15bb 	eor.w	r5, r5, fp, ror #6
 8018d0a:	ea85 657b 	eor.w	r5, r5, fp, ror #25
 8018d0e:	4415      	add	r5, r2
 8018d10:	1966      	adds	r6, r4, r5
 8018d12:	ea4f 3273 	mov.w	r2, r3, ror #13
 8018d16:	ea41 0403 	orr.w	r4, r1, r3
 8018d1a:	4004      	ands	r4, r0
 8018d1c:	ea01 0703 	and.w	r7, r1, r3
 8018d20:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 8018d24:	433c      	orrs	r4, r7
 8018d26:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8018d2a:	4422      	add	r2, r4
 8018d2c:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8018d2e:	f8de 401c 	ldr.w	r4, [lr, #28]
 8018d32:	f8da 501c 	ldr.w	r5, [sl, #28]
 8018d36:	1967      	adds	r7, r4, r5
 8018d38:	44b8      	add	r8, r7
 8018d3a:	ea8c 070b 	eor.w	r7, ip, fp
 8018d3e:	4037      	ands	r7, r6
 8018d40:	ea87 070c 	eor.w	r7, r7, ip
 8018d44:	4447      	add	r7, r8
 8018d46:	ea4f 28f6 	mov.w	r8, r6, ror #11
 8018d4a:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
 8018d4e:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 8018d52:	4447      	add	r7, r8
 8018d54:	eb00 0807 	add.w	r8, r0, r7
 8018d58:	ea43 0402 	orr.w	r4, r3, r2
 8018d5c:	ea4f 3072 	mov.w	r0, r2, ror #13
 8018d60:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8018d64:	400c      	ands	r4, r1
 8018d66:	ea03 0502 	and.w	r5, r3, r2
 8018d6a:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
 8018d6e:	432c      	orrs	r4, r5
 8018d70:	4404      	add	r4, r0
    for( i = 0; i < 16; i += 8 )
 8018d72:	4807      	ldr	r0, [pc, #28]	; (8018d90 <mbedtls_sha256_process+0x2c8>)
 8018d74:	f10e 0e20 	add.w	lr, lr, #32
 8018d78:	4570      	cmp	r0, lr
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8018d7a:	4427      	add	r7, r4
    for( i = 0; i < 16; i += 8 )
 8018d7c:	f10a 0a20 	add.w	sl, sl, #32
 8018d80:	f47f aeda 	bne.w	8018b38 <mbedtls_sha256_process+0x70>
 8018d84:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
 8018d88:	9007      	str	r0, [sp, #28]
 8018d8a:	e003      	b.n	8018d94 <mbedtls_sha256_process+0x2cc>
 8018d8c:	0802c8a0 	.word	0x0802c8a0
 8018d90:	0802c8e0 	.word	0x0802c8e0
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8018d94:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 8018d98:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8018d9c:	f8d9 4000 	ldr.w	r4, [r9]
 8018da0:	ea4f 4ef0 	mov.w	lr, r0, ror #19
 8018da4:	ea8e 4e70 	eor.w	lr, lr, r0, ror #17
 8018da8:	ea8e 2e90 	eor.w	lr, lr, r0, lsr #10
 8018dac:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8018db0:	ea4f 4ab5 	mov.w	sl, r5, ror #18
 8018db4:	4420      	add	r0, r4
 8018db6:	ea8a 1af5 	eor.w	sl, sl, r5, ror #7
 8018dba:	ea8a 0ad5 	eor.w	sl, sl, r5, lsr #3
 8018dbe:	4486      	add	lr, r0
 8018dc0:	ea4f 24f8 	mov.w	r4, r8, ror #11
 8018dc4:	eb0e 000a 	add.w	r0, lr, sl
 8018dc8:	ea84 14b8 	eor.w	r4, r4, r8, ror #6
 8018dcc:	9004      	str	r0, [sp, #16]
 8018dce:	ea84 6078 	eor.w	r0, r4, r8, ror #25
 8018dd2:	ea8b 0406 	eor.w	r4, fp, r6
 8018dd6:	ea04 0408 	and.w	r4, r4, r8
 8018dda:	ea84 040b 	eor.w	r4, r4, fp
 8018dde:	4404      	add	r4, r0
 8018de0:	9801      	ldr	r0, [sp, #4]
 8018de2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8018de4:	4420      	add	r0, r4
 8018de6:	9c04      	ldr	r4, [sp, #16]
 8018de8:	f8c9 4040 	str.w	r4, [r9, #64]	; 0x40
 8018dec:	4420      	add	r0, r4
 8018dee:	4484      	add	ip, r0
 8018df0:	4461      	add	r1, ip
 8018df2:	9102      	str	r1, [sp, #8]
 8018df4:	ea47 0002 	orr.w	r0, r7, r2
 8018df8:	ea4f 3177 	mov.w	r1, r7, ror #13
 8018dfc:	ea07 0402 	and.w	r4, r7, r2
 8018e00:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8018e04:	4018      	ands	r0, r3
 8018e06:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 8018e0a:	4320      	orrs	r0, r4
 8018e0c:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8018e0e:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8018e12:	f8d9 4008 	ldr.w	r4, [r9, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8018e16:	4484      	add	ip, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8018e18:	ea4f 40f1 	mov.w	r0, r1, ror #19
 8018e1c:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 8018e20:	ea80 2091 	eor.w	r0, r0, r1, lsr #10
 8018e24:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8018e28:	4429      	add	r1, r5
 8018e2a:	4401      	add	r1, r0
 8018e2c:	9802      	ldr	r0, [sp, #8]
 8018e2e:	ea88 0e06 	eor.w	lr, r8, r6
 8018e32:	ea0e 0e00 	and.w	lr, lr, r0
 8018e36:	9801      	ldr	r0, [sp, #4]
 8018e38:	ea4f 45b4 	mov.w	r5, r4, ror #18
 8018e3c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8018e3e:	ea85 15f4 	eor.w	r5, r5, r4, ror #7
 8018e42:	ea85 05d4 	eor.w	r5, r5, r4, lsr #3
 8018e46:	4429      	add	r1, r5
 8018e48:	4458      	add	r0, fp
 8018e4a:	4408      	add	r0, r1
 8018e4c:	ea8e 0e06 	eor.w	lr, lr, r6
 8018e50:	4486      	add	lr, r0
 8018e52:	9802      	ldr	r0, [sp, #8]
 8018e54:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8018e58:	ea4f 25f0 	mov.w	r5, r0, ror #11
 8018e5c:	ea85 15b0 	eor.w	r5, r5, r0, ror #6
 8018e60:	ea85 6570 	eor.w	r5, r5, r0, ror #25
 8018e64:	eb05 000e 	add.w	r0, r5, lr
 8018e68:	eb03 0b00 	add.w	fp, r3, r0
 8018e6c:	ea4f 357c 	mov.w	r5, ip, ror #13
 8018e70:	ea47 030c 	orr.w	r3, r7, ip
 8018e74:	ea07 0e0c 	and.w	lr, r7, ip
 8018e78:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8018e7c:	4013      	ands	r3, r2
 8018e7e:	ea43 030e 	orr.w	r3, r3, lr
 8018e82:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
 8018e86:	441d      	add	r5, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8018e88:	9b04      	ldr	r3, [sp, #16]
 8018e8a:	f8d9 e00c 	ldr.w	lr, [r9, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8018e8e:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8018e90:	ea4f 40f3 	mov.w	r0, r3, ror #19
 8018e94:	ea80 4073 	eor.w	r0, r0, r3, ror #17
 8018e98:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
 8018e9c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8018ea0:	4423      	add	r3, r4
 8018ea2:	4403      	add	r3, r0
 8018ea4:	9802      	ldr	r0, [sp, #8]
 8018ea6:	ea88 0a00 	eor.w	sl, r8, r0
 8018eaa:	9801      	ldr	r0, [sp, #4]
 8018eac:	ea4f 44be 	mov.w	r4, lr, ror #18
 8018eb0:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8018eb2:	ea84 14fe 	eor.w	r4, r4, lr, ror #7
 8018eb6:	ea84 04de 	eor.w	r4, r4, lr, lsr #3
 8018eba:	4423      	add	r3, r4
 8018ebc:	ea0a 0a0b 	and.w	sl, sl, fp
 8018ec0:	4430      	add	r0, r6
 8018ec2:	ea4f 24fb 	mov.w	r4, fp, ror #11
 8018ec6:	4418      	add	r0, r3
 8018ec8:	ea8a 0a08 	eor.w	sl, sl, r8
 8018ecc:	ea84 14bb 	eor.w	r4, r4, fp, ror #6
 8018ed0:	ea84 647b 	eor.w	r4, r4, fp, ror #25
 8018ed4:	4482      	add	sl, r0
 8018ed6:	eb04 000a 	add.w	r0, r4, sl
 8018eda:	4402      	add	r2, r0
 8018edc:	ea4c 0405 	orr.w	r4, ip, r5
 8018ee0:	ea4f 3675 	mov.w	r6, r5, ror #13
 8018ee4:	9203      	str	r2, [sp, #12]
 8018ee6:	ea86 06b5 	eor.w	r6, r6, r5, ror #2
 8018eea:	ea0c 0205 	and.w	r2, ip, r5
 8018eee:	403c      	ands	r4, r7
 8018ef0:	ea86 56b5 	eor.w	r6, r6, r5, ror #22
 8018ef4:	4314      	orrs	r4, r2
 8018ef6:	4434      	add	r4, r6
 8018ef8:	4404      	add	r4, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018efa:	ea4f 40f1 	mov.w	r0, r1, ror #19
 8018efe:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 8018f02:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
 8018f06:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8018f0a:	f8d9 2010 	ldr.w	r2, [r9, #16]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8018f0e:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018f12:	4486      	add	lr, r0
 8018f14:	4471      	add	r1, lr
 8018f16:	ea4f 4eb2 	mov.w	lr, r2, ror #18
 8018f1a:	ea8e 1ef2 	eor.w	lr, lr, r2, ror #7
 8018f1e:	ea8e 0ed2 	eor.w	lr, lr, r2, lsr #3
 8018f22:	448e      	add	lr, r1
 8018f24:	9902      	ldr	r1, [sp, #8]
 8018f26:	9803      	ldr	r0, [sp, #12]
 8018f28:	ea81 010b 	eor.w	r1, r1, fp
 8018f2c:	4001      	ands	r1, r0
 8018f2e:	9802      	ldr	r0, [sp, #8]
 8018f30:	4041      	eors	r1, r0
 8018f32:	9801      	ldr	r0, [sp, #4]
 8018f34:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8018f36:	9803      	ldr	r0, [sp, #12]
 8018f38:	f8c9 e04c 	str.w	lr, [r9, #76]	; 0x4c
 8018f3c:	4446      	add	r6, r8
 8018f3e:	4476      	add	r6, lr
 8018f40:	4431      	add	r1, r6
 8018f42:	9e03      	ldr	r6, [sp, #12]
 8018f44:	ea4f 20f0 	mov.w	r0, r0, ror #11
 8018f48:	ea80 10b6 	eor.w	r0, r0, r6, ror #6
 8018f4c:	ea80 6076 	eor.w	r0, r0, r6, ror #25
 8018f50:	1846      	adds	r6, r0, r1
 8018f52:	ea45 0004 	orr.w	r0, r5, r4
 8018f56:	ea05 0104 	and.w	r1, r5, r4
 8018f5a:	ea4f 3874 	mov.w	r8, r4, ror #13
 8018f5e:	ea00 000c 	and.w	r0, r0, ip
 8018f62:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8018f66:	4308      	orrs	r0, r1
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018f68:	ea4f 41f3 	mov.w	r1, r3, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018f6c:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018f70:	ea81 4173 	eor.w	r1, r1, r3, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018f74:	4440      	add	r0, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018f76:	ea81 2393 	eor.w	r3, r1, r3, lsr #10
 8018f7a:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018f7e:	4430      	add	r0, r6
 8018f80:	eb07 0a06 	add.w	sl, r7, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018f84:	f8d9 6014 	ldr.w	r6, [r9, #20]
 8018f88:	440a      	add	r2, r1
 8018f8a:	4413      	add	r3, r2
 8018f8c:	ea4f 42b6 	mov.w	r2, r6, ror #18
 8018f90:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
 8018f94:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
 8018f98:	441a      	add	r2, r3
 8018f9a:	9b03      	ldr	r3, [sp, #12]
 8018f9c:	9902      	ldr	r1, [sp, #8]
 8018f9e:	f8c9 2050 	str.w	r2, [r9, #80]	; 0x50
 8018fa2:	ea8b 0703 	eor.w	r7, fp, r3
 8018fa6:	9b01      	ldr	r3, [sp, #4]
 8018fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018faa:	4413      	add	r3, r2
 8018fac:	440b      	add	r3, r1
 8018fae:	ea07 070a 	and.w	r7, r7, sl
 8018fb2:	ea4f 21fa 	mov.w	r1, sl, ror #11
 8018fb6:	ea87 070b 	eor.w	r7, r7, fp
 8018fba:	ea81 11ba 	eor.w	r1, r1, sl, ror #6
 8018fbe:	441f      	add	r7, r3
 8018fc0:	ea81 617a 	eor.w	r1, r1, sl, ror #25
 8018fc4:	19cb      	adds	r3, r1, r7
 8018fc6:	ea44 0700 	orr.w	r7, r4, r0
 8018fca:	ea4f 3170 	mov.w	r1, r0, ror #13
 8018fce:	ea04 0800 	and.w	r8, r4, r0
 8018fd2:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8018fd6:	402f      	ands	r7, r5
 8018fd8:	ea47 0708 	orr.w	r7, r7, r8
 8018fdc:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8018fe0:	4439      	add	r1, r7
 8018fe2:	4419      	add	r1, r3
 8018fe4:	449c      	add	ip, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8018fe6:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8018fea:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8018fee:	ea4f 47fe 	mov.w	r7, lr, ror #19
 8018ff2:	ea87 477e 	eor.w	r7, r7, lr, ror #17
 8018ff6:	ea87 2e9e 	eor.w	lr, r7, lr, lsr #10
 8018ffa:	199f      	adds	r7, r3, r6
 8018ffc:	ea4f 43b8 	mov.w	r3, r8, ror #18
 8019000:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
 8019004:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
 8019008:	4477      	add	r7, lr
 801900a:	441f      	add	r7, r3
 801900c:	9b03      	ldr	r3, [sp, #12]
 801900e:	f8c9 7054 	str.w	r7, [r9, #84]	; 0x54
 8019012:	ea83 0e0a 	eor.w	lr, r3, sl
 8019016:	ea0e 0e0c 	and.w	lr, lr, ip
 801901a:	ea8e 0e03 	eor.w	lr, lr, r3
 801901e:	9b01      	ldr	r3, [sp, #4]
 8019020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019022:	443b      	add	r3, r7
 8019024:	445b      	add	r3, fp
 8019026:	449e      	add	lr, r3
 8019028:	ea4f 23fc 	mov.w	r3, ip, ror #11
 801902c:	ea83 13bc 	eor.w	r3, r3, ip, ror #6
 8019030:	ea83 637c 	eor.w	r3, r3, ip, ror #25
 8019034:	eb03 060e 	add.w	r6, r3, lr
 8019038:	eb05 0b06 	add.w	fp, r5, r6
 801903c:	ea4f 3371 	mov.w	r3, r1, ror #13
 8019040:	ea40 0501 	orr.w	r5, r0, r1
 8019044:	ea00 0e01 	and.w	lr, r0, r1
 8019048:	4025      	ands	r5, r4
 801904a:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
 801904e:	ea45 050e 	orr.w	r5, r5, lr
 8019052:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 8019056:	442b      	add	r3, r5
 8019058:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 801905a:	f8d9 503c 	ldr.w	r5, [r9, #60]	; 0x3c
 801905e:	f8d9 e01c 	ldr.w	lr, [r9, #28]
 8019062:	ea4f 46f2 	mov.w	r6, r2, ror #19
 8019066:	ea86 4672 	eor.w	r6, r6, r2, ror #17
 801906a:	ea86 2292 	eor.w	r2, r6, r2, lsr #10
 801906e:	eb05 0608 	add.w	r6, r5, r8
 8019072:	4416      	add	r6, r2
 8019074:	ea4f 42be 	mov.w	r2, lr, ror #18
 8019078:	ea82 12fe 	eor.w	r2, r2, lr, ror #7
 801907c:	ea82 02de 	eor.w	r2, r2, lr, lsr #3
 8019080:	4416      	add	r6, r2
 8019082:	9a01      	ldr	r2, [sp, #4]
 8019084:	f8c9 6058 	str.w	r6, [r9, #88]	; 0x58
 8019088:	6d95      	ldr	r5, [r2, #88]	; 0x58
 801908a:	9a03      	ldr	r2, [sp, #12]
 801908c:	4435      	add	r5, r6
 801908e:	ea8a 080c 	eor.w	r8, sl, ip
 8019092:	4415      	add	r5, r2
 8019094:	ea08 080b 	and.w	r8, r8, fp
 8019098:	ea4f 22fb 	mov.w	r2, fp, ror #11
 801909c:	ea88 080a 	eor.w	r8, r8, sl
 80190a0:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 80190a4:	4445      	add	r5, r8
 80190a6:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 80190aa:	4415      	add	r5, r2
 80190ac:	1966      	adds	r6, r4, r5
 80190ae:	ea4f 3273 	mov.w	r2, r3, ror #13
 80190b2:	ea41 0403 	orr.w	r4, r1, r3
 80190b6:	4004      	ands	r4, r0
 80190b8:	ea01 0803 	and.w	r8, r1, r3
 80190bc:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 80190c0:	ea44 0408 	orr.w	r4, r4, r8
 80190c4:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 80190c8:	4422      	add	r2, r4
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80190ca:	ea4f 44f7 	mov.w	r4, r7, ror #19
 80190ce:	ea84 4477 	eor.w	r4, r4, r7, ror #17
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80190d2:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80190d4:	ea84 2797 	eor.w	r7, r4, r7, lsr #10
 80190d8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80190dc:	9c04      	ldr	r4, [sp, #16]
 80190de:	44a6      	add	lr, r4
 80190e0:	ea4f 44b5 	mov.w	r4, r5, ror #18
 80190e4:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
 80190e8:	ea84 05d5 	eor.w	r5, r4, r5, lsr #3
 80190ec:	9c01      	ldr	r4, [sp, #4]
 80190ee:	4477      	add	r7, lr
 80190f0:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 80190f2:	443d      	add	r5, r7
 80190f4:	ea8c 0e0b 	eor.w	lr, ip, fp
 80190f8:	442c      	add	r4, r5
 80190fa:	ea0e 0e06 	and.w	lr, lr, r6
 80190fe:	ea4f 27f6 	mov.w	r7, r6, ror #11
 8019102:	ea8e 0e0c 	eor.w	lr, lr, ip
 8019106:	4454      	add	r4, sl
 8019108:	ea87 17b6 	eor.w	r7, r7, r6, ror #6
 801910c:	4474      	add	r4, lr
 801910e:	ea87 6776 	eor.w	r7, r7, r6, ror #25
 8019112:	4427      	add	r7, r4
 8019114:	eb00 0807 	add.w	r8, r0, r7
 8019118:	ea43 0402 	orr.w	r4, r3, r2
 801911c:	ea4f 3072 	mov.w	r0, r2, ror #13
 8019120:	f8c9 505c 	str.w	r5, [r9, #92]	; 0x5c
 8019124:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8019128:	400c      	ands	r4, r1
 801912a:	ea03 0502 	and.w	r5, r3, r2
 801912e:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
 8019132:	432c      	orrs	r4, r5
 8019134:	4404      	add	r4, r0
 8019136:	9801      	ldr	r0, [sp, #4]
 8019138:	3020      	adds	r0, #32
 801913a:	9001      	str	r0, [sp, #4]
    for( i = 16; i < 64; i += 8 )
 801913c:	9807      	ldr	r0, [sp, #28]
 801913e:	f109 0920 	add.w	r9, r9, #32
 8019142:	4548      	cmp	r0, r9
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8019144:	4427      	add	r7, r4
    for( i = 16; i < 64; i += 8 )
 8019146:	f47f ae25 	bne.w	8018d94 <mbedtls_sha256_process+0x2cc>
 801914a:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	; 0x34
 801914e:	e9cd 7208 	strd	r7, r2, [sp, #32]
 8019152:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
 8019156:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801915a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 801915e:	9b05      	ldr	r3, [sp, #20]
 8019160:	9900      	ldr	r1, [sp, #0]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	f851 2b04 	ldr.w	r2, [r1], #4
 8019168:	9100      	str	r1, [sp, #0]
 801916a:	4413      	add	r3, r2
 801916c:	9a05      	ldr	r2, [sp, #20]
 801916e:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 8; i++ )
 8019172:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += A[i];
 8019174:	9205      	str	r2, [sp, #20]
    for( i = 0; i < 8; i++ )
 8019176:	4293      	cmp	r3, r2
 8019178:	d1f1      	bne.n	801915e <mbedtls_sha256_process+0x696>
}
 801917a:	b051      	add	sp, #324	; 0x144
 801917c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019180 <mbedtls_sha256_update.part.0>:
#endif /* !MBEDTLS_SHA256_PROCESS_ALT */

/*
 * SHA-256 process buffer
 */
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
 8019180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 8019184:	6803      	ldr	r3, [r0, #0]
 8019186:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 801918a:	189b      	adds	r3, r3, r2
 801918c:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 801918e:	bf24      	itt	cs
 8019190:	6843      	ldrcs	r3, [r0, #4]
 8019192:	3301      	addcs	r3, #1
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
 8019194:	4605      	mov	r5, r0
 8019196:	460e      	mov	r6, r1
 8019198:	4614      	mov	r4, r2
        ctx->total[1]++;
 801919a:	bf28      	it	cs
 801919c:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 801919e:	b197      	cbz	r7, 80191c6 <mbedtls_sha256_update.part.0+0x46>
    fill = 64 - left;
 80191a0:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 80191a4:	4591      	cmp	r9, r2
 80191a6:	d80e      	bhi.n	80191c6 <mbedtls_sha256_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80191a8:	f100 0828 	add.w	r8, r0, #40	; 0x28
 80191ac:	464a      	mov	r2, r9
 80191ae:	eb08 0007 	add.w	r0, r8, r7
 80191b2:	f009 f965 	bl	8022480 <memcpy>
        mbedtls_sha256_process( ctx, ctx->buffer );
 80191b6:	4641      	mov	r1, r8
 80191b8:	4628      	mov	r0, r5
 80191ba:	f7ff fc85 	bl	8018ac8 <mbedtls_sha256_process>
        input += fill;
 80191be:	3c40      	subs	r4, #64	; 0x40
        ilen  -= fill;
 80191c0:	443c      	add	r4, r7
        input += fill;
 80191c2:	444e      	add	r6, r9
        left = 0;
 80191c4:	2700      	movs	r7, #0
 80191c6:	46a0      	mov	r8, r4
 80191c8:	eb06 0904 	add.w	r9, r6, r4
 80191cc:	e004      	b.n	80191d8 <mbedtls_sha256_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_sha256_process( ctx, input );
 80191ce:	4628      	mov	r0, r5
 80191d0:	f7ff fc7a 	bl	8018ac8 <mbedtls_sha256_process>
        input += 64;
        ilen  -= 64;
 80191d4:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 80191d8:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 80191dc:	eba9 0108 	sub.w	r1, r9, r8
 80191e0:	d8f5      	bhi.n	80191ce <mbedtls_sha256_update.part.0+0x4e>
 80191e2:	09a2      	lsrs	r2, r4, #6
 80191e4:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 80191e8:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 80191ec:	fb03 4202 	mla	r2, r3, r2, r4
    }

    if( ilen > 0 )
 80191f0:	4431      	add	r1, r6
 80191f2:	b132      	cbz	r2, 8019202 <mbedtls_sha256_update.part.0+0x82>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80191f4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80191f8:	4438      	add	r0, r7
}
 80191fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80191fe:	f009 b93f 	b.w	8022480 <memcpy>
}
 8019202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019206 <mbedtls_sha256_update>:
    if( ilen == 0 )
 8019206:	b10a      	cbz	r2, 801920c <mbedtls_sha256_update+0x6>
 8019208:	f7ff bfba 	b.w	8019180 <mbedtls_sha256_update.part.0>
}
 801920c:	4770      	bx	lr
	...

08019210 <mbedtls_sha256_finish>:

/*
 * SHA-256 final digest
 */
void mbedtls_sha256_finish( mbedtls_sha256_context *ctx, unsigned char output[32] )
{
 8019210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019212:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8019214:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 8019218:	0f53      	lsrs	r3, r2, #29
 801921a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801921e:	ba1b      	rev	r3, r3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 8019220:	9300      	str	r3, [sp, #0]
    low  = ( ctx->total[0] <<  3 );
 8019222:	00d3      	lsls	r3, r2, #3
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 8019224:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8019228:	2a37      	cmp	r2, #55	; 0x37
{
 801922a:	4604      	mov	r4, r0
 801922c:	ba1b      	rev	r3, r3
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 801922e:	bf94      	ite	ls
 8019230:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 8019234:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    mbedtls_sha256_update( ctx, sha256_padding, padn );
 8019238:	492b      	ldr	r1, [pc, #172]	; (80192e8 <mbedtls_sha256_finish+0xd8>)
    PUT_UINT32_BE( low,  msglen, 4 );
 801923a:	9301      	str	r3, [sp, #4]
    mbedtls_sha256_update( ctx, sha256_padding, padn );
 801923c:	f7ff ffe3 	bl	8019206 <mbedtls_sha256_update>
    if( ilen == 0 )
 8019240:	2208      	movs	r2, #8
 8019242:	4669      	mov	r1, sp
 8019244:	4620      	mov	r0, r4
 8019246:	f7ff ff9b 	bl	8019180 <mbedtls_sha256_update.part.0>
    mbedtls_sha256_update( ctx, msglen, 8 );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 801924a:	7ae3      	ldrb	r3, [r4, #11]
 801924c:	702b      	strb	r3, [r5, #0]
 801924e:	8963      	ldrh	r3, [r4, #10]
 8019250:	706b      	strb	r3, [r5, #1]
 8019252:	68a3      	ldr	r3, [r4, #8]
 8019254:	0a1b      	lsrs	r3, r3, #8
 8019256:	70ab      	strb	r3, [r5, #2]
 8019258:	68a3      	ldr	r3, [r4, #8]
 801925a:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 801925c:	7be3      	ldrb	r3, [r4, #15]
 801925e:	712b      	strb	r3, [r5, #4]
 8019260:	89e3      	ldrh	r3, [r4, #14]
 8019262:	716b      	strb	r3, [r5, #5]
 8019264:	68e3      	ldr	r3, [r4, #12]
 8019266:	0a1b      	lsrs	r3, r3, #8
 8019268:	71ab      	strb	r3, [r5, #6]
 801926a:	68e3      	ldr	r3, [r4, #12]
 801926c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 801926e:	7ce3      	ldrb	r3, [r4, #19]
 8019270:	722b      	strb	r3, [r5, #8]
 8019272:	8a63      	ldrh	r3, [r4, #18]
 8019274:	726b      	strb	r3, [r5, #9]
 8019276:	6923      	ldr	r3, [r4, #16]
 8019278:	0a1b      	lsrs	r3, r3, #8
 801927a:	72ab      	strb	r3, [r5, #10]
 801927c:	6923      	ldr	r3, [r4, #16]
 801927e:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8019280:	7de3      	ldrb	r3, [r4, #23]
 8019282:	732b      	strb	r3, [r5, #12]
 8019284:	8ae3      	ldrh	r3, [r4, #22]
 8019286:	736b      	strb	r3, [r5, #13]
 8019288:	6963      	ldr	r3, [r4, #20]
 801928a:	0a1b      	lsrs	r3, r3, #8
 801928c:	73ab      	strb	r3, [r5, #14]
 801928e:	6963      	ldr	r3, [r4, #20]
 8019290:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8019292:	7ee3      	ldrb	r3, [r4, #27]
 8019294:	742b      	strb	r3, [r5, #16]
 8019296:	8b63      	ldrh	r3, [r4, #26]
 8019298:	746b      	strb	r3, [r5, #17]
 801929a:	69a3      	ldr	r3, [r4, #24]
 801929c:	0a1b      	lsrs	r3, r3, #8
 801929e:	74ab      	strb	r3, [r5, #18]
 80192a0:	69a3      	ldr	r3, [r4, #24]
 80192a2:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80192a4:	7fe3      	ldrb	r3, [r4, #31]
 80192a6:	752b      	strb	r3, [r5, #20]
 80192a8:	8be3      	ldrh	r3, [r4, #30]
 80192aa:	756b      	strb	r3, [r5, #21]
 80192ac:	69e3      	ldr	r3, [r4, #28]
 80192ae:	0a1b      	lsrs	r3, r3, #8
 80192b0:	75ab      	strb	r3, [r5, #22]
 80192b2:	69e3      	ldr	r3, [r4, #28]
 80192b4:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80192b6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80192ba:	762b      	strb	r3, [r5, #24]
 80192bc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80192be:	766b      	strb	r3, [r5, #25]
 80192c0:	6a23      	ldr	r3, [r4, #32]
 80192c2:	0a1b      	lsrs	r3, r3, #8
 80192c4:	76ab      	strb	r3, [r5, #26]
 80192c6:	6a23      	ldr	r3, [r4, #32]
 80192c8:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 80192ca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80192cc:	b94b      	cbnz	r3, 80192e2 <mbedtls_sha256_finish+0xd2>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80192ce:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80192d2:	772b      	strb	r3, [r5, #28]
 80192d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80192d6:	776b      	strb	r3, [r5, #29]
 80192d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192da:	0a1b      	lsrs	r3, r3, #8
 80192dc:	77ab      	strb	r3, [r5, #30]
 80192de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192e0:	77eb      	strb	r3, [r5, #31]
}
 80192e2:	b003      	add	sp, #12
 80192e4:	bd30      	pop	{r4, r5, pc}
 80192e6:	bf00      	nop
 80192e8:	0802c9a0 	.word	0x0802c9a0

080192ec <mbedtls_sha256>:
/*
 * output = SHA-256( input buffer )
 */
void mbedtls_sha256( const unsigned char *input, size_t ilen,
             unsigned char output[32], int is224 )
{
 80192ec:	b570      	push	{r4, r5, r6, lr}
 80192ee:	b09e      	sub	sp, #120	; 0x78
 80192f0:	4605      	mov	r5, r0
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 80192f2:	a803      	add	r0, sp, #12
{
 80192f4:	9301      	str	r3, [sp, #4]
 80192f6:	4614      	mov	r4, r2
 80192f8:	460e      	mov	r6, r1
    mbedtls_sha256_init( &ctx );
 80192fa:	f7ff fb80 	bl	80189fe <mbedtls_sha256_init>
    mbedtls_sha256_starts( &ctx, is224 );
 80192fe:	9901      	ldr	r1, [sp, #4]
 8019300:	a803      	add	r0, sp, #12
 8019302:	f7ff fb8f 	bl	8018a24 <mbedtls_sha256_starts>
    mbedtls_sha256_update( &ctx, input, ilen );
 8019306:	4632      	mov	r2, r6
 8019308:	4629      	mov	r1, r5
 801930a:	a803      	add	r0, sp, #12
 801930c:	f7ff ff7b 	bl	8019206 <mbedtls_sha256_update>
    mbedtls_sha256_finish( &ctx, output );
 8019310:	4621      	mov	r1, r4
 8019312:	a803      	add	r0, sp, #12
 8019314:	f7ff ff7c 	bl	8019210 <mbedtls_sha256_finish>
    mbedtls_sha256_free( &ctx );
 8019318:	a803      	add	r0, sp, #12
 801931a:	f7ff fb74 	bl	8018a06 <mbedtls_sha256_free>
}
 801931e:	b01e      	add	sp, #120	; 0x78
 8019320:	bd70      	pop	{r4, r5, r6, pc}

08019322 <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 8019322:	22d8      	movs	r2, #216	; 0xd8
 8019324:	2100      	movs	r1, #0
 8019326:	f009 b8d3 	b.w	80224d0 <memset>

0801932a <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 801932a:	b120      	cbz	r0, 8019336 <mbedtls_sha512_free+0xc>
 801932c:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8019330:	2200      	movs	r2, #0
 8019332:	4298      	cmp	r0, r3
 8019334:	d100      	bne.n	8019338 <mbedtls_sha512_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}
 8019336:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8019338:	f800 2b01 	strb.w	r2, [r0], #1
 801933c:	e7f9      	b.n	8019332 <mbedtls_sha512_free+0x8>

0801933e <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 801933e:	b508      	push	{r3, lr}
    *dst = *src;
 8019340:	22d8      	movs	r2, #216	; 0xd8
 8019342:	f009 f89d 	bl	8022480 <memcpy>
}
 8019346:	bd08      	pop	{r3, pc}

08019348 <mbedtls_sha512_starts>:
/*
 * SHA-512 context setup
 */
void mbedtls_sha512_starts( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 8019348:	2200      	movs	r2, #0
 801934a:	2300      	movs	r3, #0
 801934c:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 8019350:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 8019354:	bb51      	cbnz	r1, 80193ac <mbedtls_sha512_starts+0x64>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 8019356:	a32a      	add	r3, pc, #168	; (adr r3, 8019400 <mbedtls_sha512_starts+0xb8>)
 8019358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801935c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 8019360:	a329      	add	r3, pc, #164	; (adr r3, 8019408 <mbedtls_sha512_starts+0xc0>)
 8019362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019366:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 801936a:	a329      	add	r3, pc, #164	; (adr r3, 8019410 <mbedtls_sha512_starts+0xc8>)
 801936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019370:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 8019374:	a328      	add	r3, pc, #160	; (adr r3, 8019418 <mbedtls_sha512_starts+0xd0>)
 8019376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801937a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 801937e:	a328      	add	r3, pc, #160	; (adr r3, 8019420 <mbedtls_sha512_starts+0xd8>)
 8019380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019384:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 8019388:	a327      	add	r3, pc, #156	; (adr r3, 8019428 <mbedtls_sha512_starts+0xe0>)
 801938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801938e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 8019392:	a327      	add	r3, pc, #156	; (adr r3, 8019430 <mbedtls_sha512_starts+0xe8>)
 8019394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019398:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 801939c:	a326      	add	r3, pc, #152	; (adr r3, 8019438 <mbedtls_sha512_starts+0xf0>)
 801939e:	e9d3 2300 	ldrd	r2, r3, [r3]
        ctx->state[2] = UL64(0x9159015A3070DD17);
        ctx->state[3] = UL64(0x152FECD8F70E5939);
        ctx->state[4] = UL64(0x67332667FFC00B31);
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 80193a2:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 80193a6:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
}
 80193aa:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 80193ac:	a324      	add	r3, pc, #144	; (adr r3, 8019440 <mbedtls_sha512_starts+0xf8>)
 80193ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 80193b6:	a324      	add	r3, pc, #144	; (adr r3, 8019448 <mbedtls_sha512_starts+0x100>)
 80193b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193bc:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 80193c0:	a323      	add	r3, pc, #140	; (adr r3, 8019450 <mbedtls_sha512_starts+0x108>)
 80193c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c6:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 80193ca:	a323      	add	r3, pc, #140	; (adr r3, 8019458 <mbedtls_sha512_starts+0x110>)
 80193cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193d0:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 80193d4:	a322      	add	r3, pc, #136	; (adr r3, 8019460 <mbedtls_sha512_starts+0x118>)
 80193d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193da:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 80193de:	a322      	add	r3, pc, #136	; (adr r3, 8019468 <mbedtls_sha512_starts+0x120>)
 80193e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193e4:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 80193e8:	a321      	add	r3, pc, #132	; (adr r3, 8019470 <mbedtls_sha512_starts+0x128>)
 80193ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193ee:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 80193f2:	a321      	add	r3, pc, #132	; (adr r3, 8019478 <mbedtls_sha512_starts+0x130>)
 80193f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f8:	e7d3      	b.n	80193a2 <mbedtls_sha512_starts+0x5a>
 80193fa:	bf00      	nop
 80193fc:	f3af 8000 	nop.w
 8019400:	f3bcc908 	.word	0xf3bcc908
 8019404:	6a09e667 	.word	0x6a09e667
 8019408:	84caa73b 	.word	0x84caa73b
 801940c:	bb67ae85 	.word	0xbb67ae85
 8019410:	fe94f82b 	.word	0xfe94f82b
 8019414:	3c6ef372 	.word	0x3c6ef372
 8019418:	5f1d36f1 	.word	0x5f1d36f1
 801941c:	a54ff53a 	.word	0xa54ff53a
 8019420:	ade682d1 	.word	0xade682d1
 8019424:	510e527f 	.word	0x510e527f
 8019428:	2b3e6c1f 	.word	0x2b3e6c1f
 801942c:	9b05688c 	.word	0x9b05688c
 8019430:	fb41bd6b 	.word	0xfb41bd6b
 8019434:	1f83d9ab 	.word	0x1f83d9ab
 8019438:	137e2179 	.word	0x137e2179
 801943c:	5be0cd19 	.word	0x5be0cd19
 8019440:	c1059ed8 	.word	0xc1059ed8
 8019444:	cbbb9d5d 	.word	0xcbbb9d5d
 8019448:	367cd507 	.word	0x367cd507
 801944c:	629a292a 	.word	0x629a292a
 8019450:	3070dd17 	.word	0x3070dd17
 8019454:	9159015a 	.word	0x9159015a
 8019458:	f70e5939 	.word	0xf70e5939
 801945c:	152fecd8 	.word	0x152fecd8
 8019460:	ffc00b31 	.word	0xffc00b31
 8019464:	67332667 	.word	0x67332667
 8019468:	68581511 	.word	0x68581511
 801946c:	8eb44a87 	.word	0x8eb44a87
 8019470:	64f98fa7 	.word	0x64f98fa7
 8019474:	db0c2e0d 	.word	0xdb0c2e0d
 8019478:	befa4fa4 	.word	0xbefa4fa4
 801947c:	47b5481d 	.word	0x47b5481d

08019480 <mbedtls_sha512_process>:
    UL64(0x4CC5D4BECB3E42B6),  UL64(0x597F299CFC657E2A),
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

void mbedtls_sha512_process( mbedtls_sha512_context *ctx, const unsigned char data[128] )
{
 8019480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019484:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 8019488:	f101 0780 	add.w	r7, r1, #128	; 0x80
 801948c:	9000      	str	r0, [sp, #0]
 801948e:	a81e      	add	r0, sp, #120	; 0x78
 8019490:	4606      	mov	r6, r0
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 8019492:	784a      	ldrb	r2, [r1, #1]
 8019494:	780c      	ldrb	r4, [r1, #0]
 8019496:	f891 8002 	ldrb.w	r8, [r1, #2]
 801949a:	79cb      	ldrb	r3, [r1, #7]
 801949c:	f891 a004 	ldrb.w	sl, [r1, #4]
 80194a0:	0412      	lsls	r2, r2, #16
 80194a2:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80194a6:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 80194aa:	794a      	ldrb	r2, [r1, #5]
 80194ac:	f891 8003 	ldrb.w	r8, [r1, #3]
 80194b0:	ea43 640a 	orr.w	r4, r3, sl, lsl #24
 80194b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80194b8:	798a      	ldrb	r2, [r1, #6]
 80194ba:	3108      	adds	r1, #8
 80194bc:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
 80194c0:	ea45 0508 	orr.w	r5, r5, r8
    for( i = 0; i < 16; i++ )
 80194c4:	428f      	cmp	r7, r1
        GET_UINT64_BE( W[i], data, i << 3 );
 80194c6:	e9c6 2500 	strd	r2, r5, [r6]
 80194ca:	f106 0608 	add.w	r6, r6, #8
    for( i = 0; i < 16; i++ )
 80194ce:	d1e0      	bne.n	8019492 <mbedtls_sha512_process+0x12>
 80194d0:	4601      	mov	r1, r0
 80194d2:	2610      	movs	r6, #16
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80194d4:	e9d1 421c 	ldrd	r4, r2, [r1, #112]	; 0x70
 80194d8:	0ce3      	lsrs	r3, r4, #19
 80194da:	ea4f 4cd2 	mov.w	ip, r2, lsr #19
 80194de:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80194e2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80194e6:	ea48 7854 	orr.w	r8, r8, r4, lsr #29
 80194ea:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80194ee:	ea4c 3c44 	orr.w	ip, ip, r4, lsl #13
 80194f2:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80194f6:	09a4      	lsrs	r4, r4, #6
 80194f8:	468e      	mov	lr, r1
 80194fa:	ea8c 0c08 	eor.w	ip, ip, r8
 80194fe:	ea44 6482 	orr.w	r4, r4, r2, lsl #26
 8019502:	ea83 0309 	eor.w	r3, r3, r9
 8019506:	4063      	eors	r3, r4
 8019508:	ea8c 1c92 	eor.w	ip, ip, r2, lsr #6
               S0(W[i - 15]) + W[i - 16];
 801950c:	e9de 4212 	ldrd	r4, r2, [lr, #72]	; 0x48
 8019510:	e9de 8e00 	ldrd	r8, lr, [lr]
 8019514:	e9d1 7502 	ldrd	r7, r5, [r1, #8]
 8019518:	eb14 0408 	adds.w	r4, r4, r8
 801951c:	eb42 020e 	adc.w	r2, r2, lr
 8019520:	191b      	adds	r3, r3, r4
 8019522:	eb4c 0c02 	adc.w	ip, ip, r2
 8019526:	087c      	lsrs	r4, r7, #1
 8019528:	0a3a      	lsrs	r2, r7, #8
 801952a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 801952e:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
 8019532:	ea4f 0e55 	mov.w	lr, r5, lsr #1
 8019536:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801953a:	4054      	eors	r4, r2
 801953c:	09fa      	lsrs	r2, r7, #7
 801953e:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8019542:	ea4e 7ec7 	orr.w	lr, lr, r7, lsl #31
 8019546:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
 801954a:	ea8e 0e08 	eor.w	lr, lr, r8
 801954e:	4062      	eors	r2, r4
 8019550:	189a      	adds	r2, r3, r2
 8019552:	ea8e 15d5 	eor.w	r5, lr, r5, lsr #7
    for( ; i < 80; i++ )
 8019556:	f106 0601 	add.w	r6, r6, #1
               S0(W[i - 15]) + W[i - 16];
 801955a:	eb4c 0505 	adc.w	r5, ip, r5
 801955e:	3108      	adds	r1, #8
    for( ; i < 80; i++ )
 8019560:	2e50      	cmp	r6, #80	; 0x50
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8019562:	e9c1 251e 	strd	r2, r5, [r1, #120]	; 0x78
    for( ; i < 80; i++ )
 8019566:	d1b5      	bne.n	80194d4 <mbedtls_sha512_process+0x54>
    }

    A = ctx->state[0];
 8019568:	9b00      	ldr	r3, [sp, #0]
 801956a:	4926      	ldr	r1, [pc, #152]	; (8019604 <mbedtls_sha512_process+0x184>)
 801956c:	691b      	ldr	r3, [r3, #16]
 801956e:	930e      	str	r3, [sp, #56]	; 0x38
 8019570:	9b00      	ldr	r3, [sp, #0]
 8019572:	695b      	ldr	r3, [r3, #20]
 8019574:	930f      	str	r3, [sp, #60]	; 0x3c
    B = ctx->state[1];
 8019576:	9b00      	ldr	r3, [sp, #0]
 8019578:	699b      	ldr	r3, [r3, #24]
 801957a:	9310      	str	r3, [sp, #64]	; 0x40
 801957c:	9b00      	ldr	r3, [sp, #0]
 801957e:	69db      	ldr	r3, [r3, #28]
 8019580:	9311      	str	r3, [sp, #68]	; 0x44
    C = ctx->state[2];
 8019582:	9b00      	ldr	r3, [sp, #0]
 8019584:	6a1b      	ldr	r3, [r3, #32]
 8019586:	9312      	str	r3, [sp, #72]	; 0x48
 8019588:	9b00      	ldr	r3, [sp, #0]
 801958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801958c:	9313      	str	r3, [sp, #76]	; 0x4c
    D = ctx->state[3];
 801958e:	9b00      	ldr	r3, [sp, #0]
 8019590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019592:	9314      	str	r3, [sp, #80]	; 0x50
 8019594:	9b00      	ldr	r3, [sp, #0]
 8019596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019598:	9315      	str	r3, [sp, #84]	; 0x54
    E = ctx->state[4];
 801959a:	9b00      	ldr	r3, [sp, #0]
 801959c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801959e:	9316      	str	r3, [sp, #88]	; 0x58
 80195a0:	9b00      	ldr	r3, [sp, #0]
 80195a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195a4:	9317      	str	r3, [sp, #92]	; 0x5c
    F = ctx->state[5];
 80195a6:	9b00      	ldr	r3, [sp, #0]
 80195a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195aa:	9318      	str	r3, [sp, #96]	; 0x60
 80195ac:	9b00      	ldr	r3, [sp, #0]
 80195ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195b0:	9319      	str	r3, [sp, #100]	; 0x64
    G = ctx->state[6];
 80195b2:	9b00      	ldr	r3, [sp, #0]
 80195b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195b6:	931a      	str	r3, [sp, #104]	; 0x68
 80195b8:	9b00      	ldr	r3, [sp, #0]
 80195ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195bc:	931b      	str	r3, [sp, #108]	; 0x6c
    H = ctx->state[7];
 80195be:	9b00      	ldr	r3, [sp, #0]
 80195c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80195c2:	931c      	str	r3, [sp, #112]	; 0x70
 80195c4:	9b00      	ldr	r3, [sp, #0]
 80195c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80195c8:	931d      	str	r3, [sp, #116]	; 0x74
 80195ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80195cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80195ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80195d0:	930c      	str	r3, [sp, #48]	; 0x30
    G = ctx->state[6];
 80195d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80195d4:	9309      	str	r3, [sp, #36]	; 0x24
 80195d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80195d8:	930a      	str	r3, [sp, #40]	; 0x28
    F = ctx->state[5];
 80195da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80195dc:	9307      	str	r3, [sp, #28]
 80195de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80195e0:	9308      	str	r3, [sp, #32]
    E = ctx->state[4];
 80195e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80195e4:	9305      	str	r3, [sp, #20]
 80195e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80195e8:	9306      	str	r3, [sp, #24]
    D = ctx->state[3];
 80195ea:	e9dd a314 	ldrd	sl, r3, [sp, #80]	; 0x50
 80195ee:	9304      	str	r3, [sp, #16]
    C = ctx->state[2];
 80195f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80195f2:	9302      	str	r3, [sp, #8]
    B = ctx->state[1];
 80195f4:	e9dd ce10 	ldrd	ip, lr, [sp, #64]	; 0x40
    C = ctx->state[2];
 80195f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80195fa:	9303      	str	r3, [sp, #12]
    A = ctx->state[0];
 80195fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80195fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019600:	9301      	str	r3, [sp, #4]
 8019602:	e001      	b.n	8019608 <mbedtls_sha512_process+0x188>
 8019604:	0802cb58 	.word	0x0802cb58
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 8019608:	9c05      	ldr	r4, [sp, #20]
 801960a:	9e05      	ldr	r6, [sp, #20]
 801960c:	9b01      	ldr	r3, [sp, #4]
 801960e:	ea4f 3894 	mov.w	r8, r4, lsr #14
 8019612:	9c06      	ldr	r4, [sp, #24]
 8019614:	ea48 4884 	orr.w	r8, r8, r4, lsl #18
 8019618:	ea4f 3994 	mov.w	r9, r4, lsr #14
 801961c:	9c05      	ldr	r4, [sp, #20]
 801961e:	ea49 4984 	orr.w	r9, r9, r4, lsl #18
 8019622:	0ca5      	lsrs	r5, r4, #18
 8019624:	9c06      	ldr	r4, [sp, #24]
 8019626:	ea45 3584 	orr.w	r5, r5, r4, lsl #14
 801962a:	0ca4      	lsrs	r4, r4, #18
 801962c:	ea44 3486 	orr.w	r4, r4, r6, lsl #14
 8019630:	ea89 0904 	eor.w	r9, r9, r4
 8019634:	9c06      	ldr	r4, [sp, #24]
 8019636:	05e4      	lsls	r4, r4, #23
 8019638:	ea44 2456 	orr.w	r4, r4, r6, lsr #9
 801963c:	ea88 0805 	eor.w	r8, r8, r5
 8019640:	05f5      	lsls	r5, r6, #23
 8019642:	9e06      	ldr	r6, [sp, #24]
 8019644:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
 8019648:	ea88 0805 	eor.w	r8, r8, r5
 801964c:	ea89 0904 	eor.w	r9, r9, r4
 8019650:	e9d1 5700 	ldrd	r5, r7, [r1]
 8019654:	e9d0 6400 	ldrd	r6, r4, [r0]
 8019658:	19ad      	adds	r5, r5, r6
 801965a:	eb47 0404 	adc.w	r4, r7, r4
 801965e:	9e07      	ldr	r6, [sp, #28]
 8019660:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019662:	ea86 0b07 	eor.w	fp, r6, r7
 8019666:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019668:	9e08      	ldr	r6, [sp, #32]
 801966a:	407e      	eors	r6, r7
 801966c:	9f05      	ldr	r7, [sp, #20]
 801966e:	ea0b 0b07 	and.w	fp, fp, r7
 8019672:	9f06      	ldr	r7, [sp, #24]
 8019674:	403e      	ands	r6, r7
 8019676:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019678:	ea8b 0b07 	eor.w	fp, fp, r7
 801967c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801967e:	eb18 0505 	adds.w	r5, r8, r5
 8019682:	eb49 0404 	adc.w	r4, r9, r4
 8019686:	407e      	eors	r6, r7
 8019688:	eb15 050b 	adds.w	r5, r5, fp
 801968c:	eb46 0404 	adc.w	r4, r6, r4
 8019690:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019692:	19ad      	adds	r5, r5, r6
 8019694:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019696:	eb44 0606 	adc.w	r6, r4, r6
 801969a:	4634      	mov	r4, r6
 801969c:	eb1a 0605 	adds.w	r6, sl, r5
 80196a0:	960b      	str	r6, [sp, #44]	; 0x2c
 80196a2:	9e04      	ldr	r6, [sp, #16]
 80196a4:	eb44 0606 	adc.w	r6, r4, r6
 80196a8:	960d      	str	r6, [sp, #52]	; 0x34
 80196aa:	ea4f 7913 	mov.w	r9, r3, lsr #28
 80196ae:	079e      	lsls	r6, r3, #30
 80196b0:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
 80196b4:	ea49 1902 	orr.w	r9, r9, r2, lsl #4
 80196b8:	ea4f 7812 	mov.w	r8, r2, lsr #28
 80196bc:	0797      	lsls	r7, r2, #30
 80196be:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
 80196c2:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 80196c6:	ea89 0906 	eor.w	r9, r9, r6
 80196ca:	065e      	lsls	r6, r3, #25
 80196cc:	ea46 16d2 	orr.w	r6, r6, r2, lsr #7
 80196d0:	ea88 0807 	eor.w	r8, r8, r7
 80196d4:	0657      	lsls	r7, r2, #25
 80196d6:	ea47 17d3 	orr.w	r7, r7, r3, lsr #7
 80196da:	ea89 0906 	eor.w	r9, r9, r6
 80196de:	ea43 060c 	orr.w	r6, r3, ip
 80196e2:	9b02      	ldr	r3, [sp, #8]
 80196e4:	401e      	ands	r6, r3
 80196e6:	9b03      	ldr	r3, [sp, #12]
 80196e8:	ea88 0807 	eor.w	r8, r8, r7
 80196ec:	ea42 070e 	orr.w	r7, r2, lr
 80196f0:	401f      	ands	r7, r3
 80196f2:	9b01      	ldr	r3, [sp, #4]
 80196f4:	ea03 0b0c 	and.w	fp, r3, ip
 80196f8:	ea02 0a0e 	and.w	sl, r2, lr
 80196fc:	ea46 060b 	orr.w	r6, r6, fp
 8019700:	eb19 0606 	adds.w	r6, r9, r6
 8019704:	ea47 070a 	orr.w	r7, r7, sl
 8019708:	eb48 0707 	adc.w	r7, r8, r7
 801970c:	1973      	adds	r3, r6, r5
 801970e:	9304      	str	r3, [sp, #16]
 8019710:	eb47 0304 	adc.w	r3, r7, r4
 8019714:	930c      	str	r3, [sp, #48]	; 0x30
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 8019716:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
 801971a:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 801971e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019720:	19a4      	adds	r4, r4, r6
 8019722:	eb47 0505 	adc.w	r5, r7, r5
 8019726:	18e4      	adds	r4, r4, r3
 8019728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801972a:	eb45 0803 	adc.w	r8, r5, r3
 801972e:	9b05      	ldr	r3, [sp, #20]
 8019730:	9d07      	ldr	r5, [sp, #28]
 8019732:	ea83 0a05 	eor.w	sl, r3, r5
 8019736:	9b06      	ldr	r3, [sp, #24]
 8019738:	9d08      	ldr	r5, [sp, #32]
 801973a:	405d      	eors	r5, r3
 801973c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801973e:	ea0a 0a03 	and.w	sl, sl, r3
 8019742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019744:	401d      	ands	r5, r3
 8019746:	9b07      	ldr	r3, [sp, #28]
 8019748:	ea8a 0a03 	eor.w	sl, sl, r3
 801974c:	9b08      	ldr	r3, [sp, #32]
 801974e:	ea85 0903 	eor.w	r9, r5, r3
 8019752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019754:	eb14 0a0a 	adds.w	sl, r4, sl
 8019758:	ea4f 3493 	mov.w	r4, r3, lsr #14
 801975c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801975e:	eb48 0509 	adc.w	r5, r8, r9
 8019762:	ea4f 3b93 	mov.w	fp, r3, lsr #14
 8019766:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
 801976a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801976c:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
 8019770:	0c9c      	lsrs	r4, r3, #18
 8019772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019774:	ea4f 4b93 	mov.w	fp, r3, lsr #18
 8019778:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 801977c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801977e:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
 8019782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019784:	ea88 0b06 	eor.w	fp, r8, r6
 8019788:	ea4f 58c3 	mov.w	r8, r3, lsl #23
 801978c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801978e:	ea89 0404 	eor.w	r4, r9, r4
 8019792:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
 8019796:	ea4f 59c3 	mov.w	r9, r3, lsl #23
 801979a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801979c:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
 80197a0:	ea84 0409 	eor.w	r4, r4, r9
 80197a4:	9b02      	ldr	r3, [sp, #8]
 80197a6:	eb1a 0404 	adds.w	r4, sl, r4
 80197aa:	ea8b 0808 	eor.w	r8, fp, r8
 80197ae:	eb45 0808 	adc.w	r8, r5, r8
 80197b2:	191b      	adds	r3, r3, r4
 80197b4:	9309      	str	r3, [sp, #36]	; 0x24
 80197b6:	9b03      	ldr	r3, [sp, #12]
 80197b8:	eb43 0308 	adc.w	r3, r3, r8
 80197bc:	930a      	str	r3, [sp, #40]	; 0x28
 80197be:	9b04      	ldr	r3, [sp, #16]
 80197c0:	0f1f      	lsrs	r7, r3, #28
 80197c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197c4:	0f1e      	lsrs	r6, r3, #28
 80197c6:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
 80197ca:	9b04      	ldr	r3, [sp, #16]
 80197cc:	ea46 1903 	orr.w	r9, r6, r3, lsl #4
 80197d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197d2:	079e      	lsls	r6, r3, #30
 80197d4:	9b04      	ldr	r3, [sp, #16]
 80197d6:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
 80197da:	079d      	lsls	r5, r3, #30
 80197dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197de:	ea89 0606 	eor.w	r6, r9, r6
 80197e2:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
 80197e6:	ea4f 6943 	mov.w	r9, r3, lsl #25
 80197ea:	9b04      	ldr	r3, [sp, #16]
 80197ec:	406f      	eors	r7, r5
 80197ee:	ea49 19d3 	orr.w	r9, r9, r3, lsr #7
 80197f2:	065d      	lsls	r5, r3, #25
 80197f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197f6:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
 80197fa:	406f      	eors	r7, r5
 80197fc:	9b04      	ldr	r3, [sp, #16]
 80197fe:	9d01      	ldr	r5, [sp, #4]
 8019800:	431d      	orrs	r5, r3
 8019802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019804:	ea86 0609 	eor.w	r6, r6, r9
 8019808:	ea42 0903 	orr.w	r9, r2, r3
 801980c:	ea05 030c 	and.w	r3, r5, ip
 8019810:	9302      	str	r3, [sp, #8]
 8019812:	9d01      	ldr	r5, [sp, #4]
 8019814:	9b04      	ldr	r3, [sp, #16]
 8019816:	ea05 0b03 	and.w	fp, r5, r3
 801981a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801981c:	ea02 0a03 	and.w	sl, r2, r3
 8019820:	9b02      	ldr	r3, [sp, #8]
 8019822:	ea09 090e 	and.w	r9, r9, lr
 8019826:	ea43 050b 	orr.w	r5, r3, fp
 801982a:	197d      	adds	r5, r7, r5
 801982c:	ea49 090a 	orr.w	r9, r9, sl
 8019830:	eb46 0909 	adc.w	r9, r6, r9
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 8019834:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 8019838:	192b      	adds	r3, r5, r4
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 801983a:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 801983e:	9302      	str	r3, [sp, #8]
 8019840:	eb49 0308 	adc.w	r3, r9, r8
 8019844:	9303      	str	r3, [sp, #12]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 8019846:	9b07      	ldr	r3, [sp, #28]
 8019848:	19a4      	adds	r4, r4, r6
 801984a:	eb47 0505 	adc.w	r5, r7, r5
 801984e:	18e4      	adds	r4, r4, r3
 8019850:	9b08      	ldr	r3, [sp, #32]
 8019852:	eb45 0803 	adc.w	r8, r5, r3
 8019856:	9b05      	ldr	r3, [sp, #20]
 8019858:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801985a:	ea83 0a05 	eor.w	sl, r3, r5
 801985e:	9b06      	ldr	r3, [sp, #24]
 8019860:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019862:	405d      	eors	r5, r3
 8019864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019866:	ea0a 0a03 	and.w	sl, sl, r3
 801986a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801986c:	401d      	ands	r5, r3
 801986e:	9b05      	ldr	r3, [sp, #20]
 8019870:	ea8a 0a03 	eor.w	sl, sl, r3
 8019874:	9b06      	ldr	r3, [sp, #24]
 8019876:	ea85 0903 	eor.w	r9, r5, r3
 801987a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801987c:	eb14 0a0a 	adds.w	sl, r4, sl
 8019880:	ea4f 3493 	mov.w	r4, r3, lsr #14
 8019884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019886:	eb48 0509 	adc.w	r5, r8, r9
 801988a:	ea4f 3b93 	mov.w	fp, r3, lsr #14
 801988e:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
 8019892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019894:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
 8019898:	0c9c      	lsrs	r4, r3, #18
 801989a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801989c:	ea4f 4b93 	mov.w	fp, r3, lsr #18
 80198a0:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 80198a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198a6:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
 80198aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198ac:	ea88 0b06 	eor.w	fp, r8, r6
 80198b0:	ea4f 58c3 	mov.w	r8, r3, lsl #23
 80198b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198b6:	ea89 0404 	eor.w	r4, r9, r4
 80198ba:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
 80198be:	ea4f 59c3 	mov.w	r9, r3, lsl #23
 80198c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198c4:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
 80198c8:	ea84 0409 	eor.w	r4, r4, r9
 80198cc:	eb1a 0404 	adds.w	r4, sl, r4
 80198d0:	ea8b 0808 	eor.w	r8, fp, r8
 80198d4:	eb45 0808 	adc.w	r8, r5, r8
 80198d8:	eb1c 0304 	adds.w	r3, ip, r4
 80198dc:	9307      	str	r3, [sp, #28]
 80198de:	eb4e 0308 	adc.w	r3, lr, r8
 80198e2:	9308      	str	r3, [sp, #32]
 80198e4:	9b02      	ldr	r3, [sp, #8]
 80198e6:	0f1f      	lsrs	r7, r3, #28
 80198e8:	9b03      	ldr	r3, [sp, #12]
 80198ea:	0f1e      	lsrs	r6, r3, #28
 80198ec:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
 80198f0:	9b02      	ldr	r3, [sp, #8]
 80198f2:	ea46 1c03 	orr.w	ip, r6, r3, lsl #4
 80198f6:	9b03      	ldr	r3, [sp, #12]
 80198f8:	079e      	lsls	r6, r3, #30
 80198fa:	9b02      	ldr	r3, [sp, #8]
 80198fc:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
 8019900:	079d      	lsls	r5, r3, #30
 8019902:	9b03      	ldr	r3, [sp, #12]
 8019904:	ea8c 0606 	eor.w	r6, ip, r6
 8019908:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
 801990c:	ea4f 6c43 	mov.w	ip, r3, lsl #25
 8019910:	9b02      	ldr	r3, [sp, #8]
 8019912:	406f      	eors	r7, r5
 8019914:	ea4c 1cd3 	orr.w	ip, ip, r3, lsr #7
 8019918:	065d      	lsls	r5, r3, #25
 801991a:	9b03      	ldr	r3, [sp, #12]
 801991c:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
 8019920:	406f      	eors	r7, r5
 8019922:	9b04      	ldr	r3, [sp, #16]
 8019924:	9d02      	ldr	r5, [sp, #8]
 8019926:	431d      	orrs	r5, r3
 8019928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801992a:	ea86 060c 	eor.w	r6, r6, ip
 801992e:	469c      	mov	ip, r3
 8019930:	9b03      	ldr	r3, [sp, #12]
 8019932:	ea4c 0c03 	orr.w	ip, ip, r3
 8019936:	9b01      	ldr	r3, [sp, #4]
 8019938:	401d      	ands	r5, r3
 801993a:	9b04      	ldr	r3, [sp, #16]
 801993c:	469e      	mov	lr, r3
 801993e:	9b02      	ldr	r3, [sp, #8]
 8019940:	ea0e 0903 	and.w	r9, lr, r3
 8019944:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019946:	469e      	mov	lr, r3
 8019948:	9b03      	ldr	r3, [sp, #12]
 801994a:	ea0c 0c02 	and.w	ip, ip, r2
 801994e:	ea0e 0e03 	and.w	lr, lr, r3
 8019952:	ea45 0509 	orr.w	r5, r5, r9
 8019956:	197d      	adds	r5, r7, r5
 8019958:	ea4c 0c0e 	orr.w	ip, ip, lr
 801995c:	eb46 0c0c 	adc.w	ip, r6, ip
 8019960:	eb15 0904 	adds.w	r9, r5, r4
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 8019964:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
 8019968:	e9d1 4506 	ldrd	r4, r5, [r1, #24]
 801996c:	9b05      	ldr	r3, [sp, #20]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 801996e:	eb4c 0b08 	adc.w	fp, ip, r8
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 8019972:	19a4      	adds	r4, r4, r6
 8019974:	eb45 0707 	adc.w	r7, r5, r7
 8019978:	18e4      	adds	r4, r4, r3
 801997a:	9b06      	ldr	r3, [sp, #24]
 801997c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801997e:	eb43 0707 	adc.w	r7, r3, r7
 8019982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019984:	ea83 0605 	eor.w	r6, r3, r5
 8019988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801998a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801998c:	405d      	eors	r5, r3
 801998e:	9b07      	ldr	r3, [sp, #28]
 8019990:	401e      	ands	r6, r3
 8019992:	9b08      	ldr	r3, [sp, #32]
 8019994:	401d      	ands	r5, r3
 8019996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019998:	405e      	eors	r6, r3
 801999a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801999c:	ea85 0c03 	eor.w	ip, r5, r3
 80199a0:	9b07      	ldr	r3, [sp, #28]
 80199a2:	19a6      	adds	r6, r4, r6
 80199a4:	ea4f 3493 	mov.w	r4, r3, lsr #14
 80199a8:	9b08      	ldr	r3, [sp, #32]
 80199aa:	eb47 050c 	adc.w	r5, r7, ip
 80199ae:	ea4f 3e93 	mov.w	lr, r3, lsr #14
 80199b2:	ea44 4c83 	orr.w	ip, r4, r3, lsl #18
 80199b6:	9b07      	ldr	r3, [sp, #28]
 80199b8:	ea4e 4883 	orr.w	r8, lr, r3, lsl #18
 80199bc:	0c9c      	lsrs	r4, r3, #18
 80199be:	9b08      	ldr	r3, [sp, #32]
 80199c0:	ea4f 4e93 	mov.w	lr, r3, lsr #18
 80199c4:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 80199c8:	9b07      	ldr	r3, [sp, #28]
 80199ca:	ea4e 3783 	orr.w	r7, lr, r3, lsl #14
 80199ce:	9b08      	ldr	r3, [sp, #32]
 80199d0:	ea88 0e07 	eor.w	lr, r8, r7
 80199d4:	05df      	lsls	r7, r3, #23
 80199d6:	9b07      	ldr	r3, [sp, #28]
 80199d8:	ea8c 0404 	eor.w	r4, ip, r4
 80199dc:	ea47 2753 	orr.w	r7, r7, r3, lsr #9
 80199e0:	ea4f 5cc3 	mov.w	ip, r3, lsl #23
 80199e4:	9b08      	ldr	r3, [sp, #32]
 80199e6:	ea4c 2c53 	orr.w	ip, ip, r3, lsr #9
 80199ea:	ea84 040c 	eor.w	r4, r4, ip
 80199ee:	9b01      	ldr	r3, [sp, #4]
 80199f0:	1934      	adds	r4, r6, r4
 80199f2:	ea8e 0707 	eor.w	r7, lr, r7
 80199f6:	eb45 0707 	adc.w	r7, r5, r7
 80199fa:	eb13 0804 	adds.w	r8, r3, r4
 80199fe:	eb42 0307 	adc.w	r3, r2, r7
 8019a02:	9305      	str	r3, [sp, #20]
 8019a04:	ea4f 721b 	mov.w	r2, fp, lsr #28
 8019a08:	ea4f 7519 	mov.w	r5, r9, lsr #28
 8019a0c:	ea4f 7389 	mov.w	r3, r9, lsl #30
 8019a10:	ea42 1609 	orr.w	r6, r2, r9, lsl #4
 8019a14:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
 8019a18:	ea45 150b 	orr.w	r5, r5, fp, lsl #4
 8019a1c:	ea4f 728b 	mov.w	r2, fp, lsl #30
 8019a20:	ea42 0299 	orr.w	r2, r2, r9, lsr #2
 8019a24:	405d      	eors	r5, r3
 8019a26:	ea4f 6349 	mov.w	r3, r9, lsl #25
 8019a2a:	4072      	eors	r2, r6
 8019a2c:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
 8019a30:	ea4f 664b 	mov.w	r6, fp, lsl #25
 8019a34:	ea46 16d9 	orr.w	r6, r6, r9, lsr #7
 8019a38:	405d      	eors	r5, r3
 8019a3a:	9b02      	ldr	r3, [sp, #8]
 8019a3c:	ea82 0a06 	eor.w	sl, r2, r6
 8019a40:	9a04      	ldr	r2, [sp, #16]
 8019a42:	9e03      	ldr	r6, [sp, #12]
 8019a44:	ea43 0309 	orr.w	r3, r3, r9
 8019a48:	4013      	ands	r3, r2
 8019a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019a4c:	ea46 060b 	orr.w	r6, r6, fp
 8019a50:	4016      	ands	r6, r2
 8019a52:	9a02      	ldr	r2, [sp, #8]
 8019a54:	ea02 0e09 	and.w	lr, r2, r9
 8019a58:	9a03      	ldr	r2, [sp, #12]
 8019a5a:	ea43 030e 	orr.w	r3, r3, lr
 8019a5e:	ea02 0c0b 	and.w	ip, r2, fp
 8019a62:	18eb      	adds	r3, r5, r3
 8019a64:	ea46 060c 	orr.w	r6, r6, ip
 8019a68:	eb4a 0606 	adc.w	r6, sl, r6
 8019a6c:	191b      	adds	r3, r3, r4
 8019a6e:	9301      	str	r3, [sp, #4]
 8019a70:	eb46 0307 	adc.w	r3, r6, r7
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 8019a74:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 8019a78:	9306      	str	r3, [sp, #24]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 8019a7a:	e9d1 3208 	ldrd	r3, r2, [r1, #32]
 8019a7e:	191b      	adds	r3, r3, r4
 8019a80:	eb42 0505 	adc.w	r5, r2, r5
 8019a84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019a86:	9c08      	ldr	r4, [sp, #32]
 8019a88:	eb13 0a02 	adds.w	sl, r3, r2
 8019a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a8e:	9a07      	ldr	r2, [sp, #28]
 8019a90:	eb43 0505 	adc.w	r5, r3, r5
 8019a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a96:	4053      	eors	r3, r2
 8019a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a9a:	4062      	eors	r2, r4
 8019a9c:	9c05      	ldr	r4, [sp, #20]
 8019a9e:	4022      	ands	r2, r4
 8019aa0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019aa2:	ea03 0308 	and.w	r3, r3, r8
 8019aa6:	4063      	eors	r3, r4
 8019aa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019aaa:	ea82 0604 	eor.w	r6, r2, r4
 8019aae:	9c05      	ldr	r4, [sp, #20]
 8019ab0:	eb1a 0303 	adds.w	r3, sl, r3
 8019ab4:	ea4f 3794 	mov.w	r7, r4, lsr #14
 8019ab8:	eb45 0206 	adc.w	r2, r5, r6
 8019abc:	ea4f 3a98 	mov.w	sl, r8, lsr #14
 8019ac0:	ea47 4588 	orr.w	r5, r7, r8, lsl #18
 8019ac4:	ea4f 4698 	mov.w	r6, r8, lsr #18
 8019ac8:	0ca7      	lsrs	r7, r4, #18
 8019aca:	ea46 3684 	orr.w	r6, r6, r4, lsl #14
 8019ace:	ea4a 4a84 	orr.w	sl, sl, r4, lsl #18
 8019ad2:	ea47 3488 	orr.w	r4, r7, r8, lsl #14
 8019ad6:	ea85 0704 	eor.w	r7, r5, r4
 8019ada:	9c05      	ldr	r4, [sp, #20]
 8019adc:	ea8a 0a06 	eor.w	sl, sl, r6
 8019ae0:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 8019ae4:	ea46 2654 	orr.w	r6, r6, r4, lsr #9
 8019ae8:	05e5      	lsls	r5, r4, #23
 8019aea:	ea8a 0a06 	eor.w	sl, sl, r6
 8019aee:	eb13 0a0a 	adds.w	sl, r3, sl
 8019af2:	ea45 2558 	orr.w	r5, r5, r8, lsr #9
 8019af6:	9b04      	ldr	r3, [sp, #16]
 8019af8:	ea85 0507 	eor.w	r5, r5, r7
 8019afc:	eb42 0505 	adc.w	r5, r2, r5
 8019b00:	eb13 030a 	adds.w	r3, r3, sl
 8019b04:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b08:	9f06      	ldr	r7, [sp, #24]
 8019b0a:	416b      	adcs	r3, r5
 8019b0c:	930c      	str	r3, [sp, #48]	; 0x30
 8019b0e:	9b01      	ldr	r3, [sp, #4]
 8019b10:	0f1c      	lsrs	r4, r3, #28
 8019b12:	9b06      	ldr	r3, [sp, #24]
 8019b14:	0f1a      	lsrs	r2, r3, #28
 8019b16:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 8019b1a:	9b01      	ldr	r3, [sp, #4]
 8019b1c:	ea42 1603 	orr.w	r6, r2, r3, lsl #4
 8019b20:	9b06      	ldr	r3, [sp, #24]
 8019b22:	079a      	lsls	r2, r3, #30
 8019b24:	9b01      	ldr	r3, [sp, #4]
 8019b26:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 8019b2a:	079b      	lsls	r3, r3, #30
 8019b2c:	ea43 0397 	orr.w	r3, r3, r7, lsr #2
 8019b30:	405c      	eors	r4, r3
 8019b32:	9b01      	ldr	r3, [sp, #4]
 8019b34:	4072      	eors	r2, r6
 8019b36:	067e      	lsls	r6, r7, #25
 8019b38:	ea46 16d3 	orr.w	r6, r6, r3, lsr #7
 8019b3c:	065b      	lsls	r3, r3, #25
 8019b3e:	ea43 13d7 	orr.w	r3, r3, r7, lsr #7
 8019b42:	405c      	eors	r4, r3
 8019b44:	9b01      	ldr	r3, [sp, #4]
 8019b46:	4072      	eors	r2, r6
 8019b48:	ea4b 0607 	orr.w	r6, fp, r7
 8019b4c:	9f02      	ldr	r7, [sp, #8]
 8019b4e:	ea49 0303 	orr.w	r3, r9, r3
 8019b52:	403b      	ands	r3, r7
 8019b54:	9f03      	ldr	r7, [sp, #12]
 8019b56:	403e      	ands	r6, r7
 8019b58:	9f01      	ldr	r7, [sp, #4]
 8019b5a:	ea09 0c07 	and.w	ip, r9, r7
 8019b5e:	9f06      	ldr	r7, [sp, #24]
 8019b60:	ea43 030c 	orr.w	r3, r3, ip
 8019b64:	ea0b 0707 	and.w	r7, fp, r7
 8019b68:	18e3      	adds	r3, r4, r3
 8019b6a:	ea46 0607 	orr.w	r6, r6, r7
 8019b6e:	eb42 0606 	adc.w	r6, r2, r6
 8019b72:	eb13 0a0a 	adds.w	sl, r3, sl
 8019b76:	eb46 0305 	adc.w	r3, r6, r5
 8019b7a:	9304      	str	r3, [sp, #16]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 8019b7c:	e9d0 450a 	ldrd	r4, r5, [r0, #40]	; 0x28
 8019b80:	e9d1 320a 	ldrd	r3, r2, [r1, #40]	; 0x28
 8019b84:	191b      	adds	r3, r3, r4
 8019b86:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019b88:	9e05      	ldr	r6, [sp, #20]
 8019b8a:	eb45 0202 	adc.w	r2, r5, r2
 8019b8e:	191b      	adds	r3, r3, r4
 8019b90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019b92:	eb42 0504 	adc.w	r5, r2, r4
 8019b96:	9a07      	ldr	r2, [sp, #28]
 8019b98:	ea82 0408 	eor.w	r4, r2, r8
 8019b9c:	9a08      	ldr	r2, [sp, #32]
 8019b9e:	4072      	eors	r2, r6
 8019ba0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019ba2:	4034      	ands	r4, r6
 8019ba4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019ba6:	4032      	ands	r2, r6
 8019ba8:	9e07      	ldr	r6, [sp, #28]
 8019baa:	4074      	eors	r4, r6
 8019bac:	9e08      	ldr	r6, [sp, #32]
 8019bae:	191c      	adds	r4, r3, r4
 8019bb0:	ea82 0606 	eor.w	r6, r2, r6
 8019bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019bb6:	eb45 0206 	adc.w	r2, r5, r6
 8019bba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019bbc:	0b9b      	lsrs	r3, r3, #14
 8019bbe:	ea43 4685 	orr.w	r6, r3, r5, lsl #18
 8019bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019bc4:	0baf      	lsrs	r7, r5, #14
 8019bc6:	ea47 4c83 	orr.w	ip, r7, r3, lsl #18
 8019bca:	0c9b      	lsrs	r3, r3, #18
 8019bcc:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8019bd0:	0caf      	lsrs	r7, r5, #18
 8019bd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019bd4:	ea47 3585 	orr.w	r5, r7, r5, lsl #14
 8019bd8:	ea8c 0705 	eor.w	r7, ip, r5
 8019bdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019bde:	ea83 0e06 	eor.w	lr, r3, r6
 8019be2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019be6:	05ed      	lsls	r5, r5, #23
 8019be8:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
 8019bec:	05f6      	lsls	r6, r6, #23
 8019bee:	ea46 2653 	orr.w	r6, r6, r3, lsr #9
 8019bf2:	ea8e 0306 	eor.w	r3, lr, r6
 8019bf6:	18e3      	adds	r3, r4, r3
 8019bf8:	ea87 0705 	eor.w	r7, r7, r5
 8019bfc:	eb42 0707 	adc.w	r7, r2, r7
 8019c00:	9a02      	ldr	r2, [sp, #8]
 8019c02:	930d      	str	r3, [sp, #52]	; 0x34
 8019c04:	18d2      	adds	r2, r2, r3
 8019c06:	9209      	str	r2, [sp, #36]	; 0x24
 8019c08:	9a03      	ldr	r2, [sp, #12]
 8019c0a:	9b04      	ldr	r3, [sp, #16]
 8019c0c:	417a      	adcs	r2, r7
 8019c0e:	920a      	str	r2, [sp, #40]	; 0x28
 8019c10:	9a04      	ldr	r2, [sp, #16]
 8019c12:	ea4f 751a 	mov.w	r5, sl, lsr #28
 8019c16:	0f14      	lsrs	r4, r2, #28
 8019c18:	ea44 160a 	orr.w	r6, r4, sl, lsl #4
 8019c1c:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8019c20:	0794      	lsls	r4, r2, #30
 8019c22:	ea4f 728a 	mov.w	r2, sl, lsl #30
 8019c26:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 8019c2a:	4055      	eors	r5, r2
 8019c2c:	ea44 049a 	orr.w	r4, r4, sl, lsr #2
 8019c30:	ea4f 624a 	mov.w	r2, sl, lsl #25
 8019c34:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 8019c38:	4074      	eors	r4, r6
 8019c3a:	065e      	lsls	r6, r3, #25
 8019c3c:	9b01      	ldr	r3, [sp, #4]
 8019c3e:	ea46 16da 	orr.w	r6, r6, sl, lsr #7
 8019c42:	4055      	eors	r5, r2
 8019c44:	4074      	eors	r4, r6
 8019c46:	ea43 020a 	orr.w	r2, r3, sl
 8019c4a:	9e04      	ldr	r6, [sp, #16]
 8019c4c:	9b06      	ldr	r3, [sp, #24]
 8019c4e:	431e      	orrs	r6, r3
 8019c50:	9b01      	ldr	r3, [sp, #4]
 8019c52:	ea03 0e0a 	and.w	lr, r3, sl
 8019c56:	9b06      	ldr	r3, [sp, #24]
 8019c58:	469c      	mov	ip, r3
 8019c5a:	9b04      	ldr	r3, [sp, #16]
 8019c5c:	ea02 0209 	and.w	r2, r2, r9
 8019c60:	ea0c 0c03 	and.w	ip, ip, r3
 8019c64:	ea06 060b 	and.w	r6, r6, fp
 8019c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c6a:	ea42 020e 	orr.w	r2, r2, lr
 8019c6e:	18aa      	adds	r2, r5, r2
 8019c70:	ea46 060c 	orr.w	r6, r6, ip
 8019c74:	eb44 0606 	adc.w	r6, r4, r6
 8019c78:	18d3      	adds	r3, r2, r3
 8019c7a:	9302      	str	r3, [sp, #8]
 8019c7c:	eb46 0307 	adc.w	r3, r6, r7
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 8019c80:	e9d0 450c 	ldrd	r4, r5, [r0, #48]	; 0x30
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 8019c84:	9303      	str	r3, [sp, #12]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 8019c86:	e9d1 320c 	ldrd	r3, r2, [r1, #48]	; 0x30
 8019c8a:	eb13 0c04 	adds.w	ip, r3, r4
 8019c8e:	9b07      	ldr	r3, [sp, #28]
 8019c90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019c92:	eb42 0e05 	adc.w	lr, r2, r5
 8019c96:	eb1c 0c03 	adds.w	ip, ip, r3
 8019c9a:	9b08      	ldr	r3, [sp, #32]
 8019c9c:	9a05      	ldr	r2, [sp, #20]
 8019c9e:	eb4e 0e03 	adc.w	lr, lr, r3
 8019ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019ca4:	ea82 0604 	eor.w	r6, r2, r4
 8019ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019caa:	ea88 0303 	eor.w	r3, r8, r3
 8019cae:	4013      	ands	r3, r2
 8019cb0:	ea83 0308 	eor.w	r3, r3, r8
 8019cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cb6:	eb1c 0c03 	adds.w	ip, ip, r3
 8019cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cbc:	ea06 0602 	and.w	r6, r6, r2
 8019cc0:	9a05      	ldr	r2, [sp, #20]
 8019cc2:	ea4f 3493 	mov.w	r4, r3, lsr #14
 8019cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cc8:	ea86 0602 	eor.w	r6, r6, r2
 8019ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019cce:	eb4e 0e06 	adc.w	lr, lr, r6
 8019cd2:	ea44 4683 	orr.w	r6, r4, r3, lsl #18
 8019cd6:	0b9b      	lsrs	r3, r3, #14
 8019cd8:	ea43 4582 	orr.w	r5, r3, r2, lsl #18
 8019cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cde:	0c94      	lsrs	r4, r2, #18
 8019ce0:	ea44 3283 	orr.w	r2, r4, r3, lsl #14
 8019ce4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019ce6:	0c9b      	lsrs	r3, r3, #18
 8019ce8:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
 8019cec:	ea86 0402 	eor.w	r4, r6, r2
 8019cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cf2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019cf4:	406b      	eors	r3, r5
 8019cf6:	05d5      	lsls	r5, r2, #23
 8019cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019cfa:	ea45 2552 	orr.w	r5, r5, r2, lsr #9
 8019cfe:	05d2      	lsls	r2, r2, #23
 8019d00:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 8019d04:	4062      	eors	r2, r4
 8019d06:	eb1c 0c02 	adds.w	ip, ip, r2
 8019d0a:	ea83 0305 	eor.w	r3, r3, r5
 8019d0e:	eb4e 0e03 	adc.w	lr, lr, r3
 8019d12:	eb19 030c 	adds.w	r3, r9, ip
 8019d16:	9307      	str	r3, [sp, #28]
 8019d18:	eb4b 030e 	adc.w	r3, fp, lr
 8019d1c:	9308      	str	r3, [sp, #32]
 8019d1e:	9b02      	ldr	r3, [sp, #8]
 8019d20:	9e03      	ldr	r6, [sp, #12]
 8019d22:	0f1c      	lsrs	r4, r3, #28
 8019d24:	9b03      	ldr	r3, [sp, #12]
 8019d26:	0f1a      	lsrs	r2, r3, #28
 8019d28:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 8019d2c:	9b02      	ldr	r3, [sp, #8]
 8019d2e:	ea42 1503 	orr.w	r5, r2, r3, lsl #4
 8019d32:	9b03      	ldr	r3, [sp, #12]
 8019d34:	079a      	lsls	r2, r3, #30
 8019d36:	9b02      	ldr	r3, [sp, #8]
 8019d38:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 8019d3c:	079b      	lsls	r3, r3, #30
 8019d3e:	ea43 0396 	orr.w	r3, r3, r6, lsr #2
 8019d42:	405c      	eors	r4, r3
 8019d44:	9b02      	ldr	r3, [sp, #8]
 8019d46:	406a      	eors	r2, r5
 8019d48:	0675      	lsls	r5, r6, #25
 8019d4a:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
 8019d4e:	065b      	lsls	r3, r3, #25
 8019d50:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
 8019d54:	406a      	eors	r2, r5
 8019d56:	9d04      	ldr	r5, [sp, #16]
 8019d58:	405c      	eors	r4, r3
 8019d5a:	9b02      	ldr	r3, [sp, #8]
 8019d5c:	4335      	orrs	r5, r6
 8019d5e:	9e01      	ldr	r6, [sp, #4]
 8019d60:	ea4a 0303 	orr.w	r3, sl, r3
 8019d64:	4033      	ands	r3, r6
 8019d66:	9e06      	ldr	r6, [sp, #24]
 8019d68:	4035      	ands	r5, r6
 8019d6a:	9e02      	ldr	r6, [sp, #8]
 8019d6c:	ea0a 0706 	and.w	r7, sl, r6
 8019d70:	9e04      	ldr	r6, [sp, #16]
 8019d72:	46b1      	mov	r9, r6
 8019d74:	9e03      	ldr	r6, [sp, #12]
 8019d76:	433b      	orrs	r3, r7
 8019d78:	ea09 0606 	and.w	r6, r9, r6
 8019d7c:	18e3      	adds	r3, r4, r3
 8019d7e:	ea45 0506 	orr.w	r5, r5, r6
 8019d82:	eb42 0505 	adc.w	r5, r2, r5
 8019d86:	eb13 0c0c 	adds.w	ip, r3, ip
 8019d8a:	eb45 0e0e 	adc.w	lr, r5, lr
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 8019d8e:	e9d1 320e 	ldrd	r3, r2, [r1, #56]	; 0x38
 8019d92:	e9d0 450e 	ldrd	r4, r5, [r0, #56]	; 0x38
 8019d96:	191b      	adds	r3, r3, r4
 8019d98:	9c05      	ldr	r4, [sp, #20]
 8019d9a:	eb45 0202 	adc.w	r2, r5, r2
 8019d9e:	eb13 0308 	adds.w	r3, r3, r8
 8019da2:	eb42 0504 	adc.w	r5, r2, r4
 8019da6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019da8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019daa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019dac:	4054      	eors	r4, r2
 8019dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019db0:	4072      	eors	r2, r6
 8019db2:	9e07      	ldr	r6, [sp, #28]
 8019db4:	4034      	ands	r4, r6
 8019db6:	9e08      	ldr	r6, [sp, #32]
 8019db8:	4032      	ands	r2, r6
 8019dba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019dbc:	4074      	eors	r4, r6
 8019dbe:	eb13 0b04 	adds.w	fp, r3, r4
 8019dc2:	9c07      	ldr	r4, [sp, #28]
 8019dc4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019dc6:	9b08      	ldr	r3, [sp, #32]
 8019dc8:	ea4f 3794 	mov.w	r7, r4, lsr #14
 8019dcc:	9c08      	ldr	r4, [sp, #32]
 8019dce:	ea82 0606 	eor.w	r6, r2, r6
 8019dd2:	eb45 0206 	adc.w	r2, r5, r6
 8019dd6:	ea47 4984 	orr.w	r9, r7, r4, lsl #18
 8019dda:	0ba6      	lsrs	r6, r4, #14
 8019ddc:	9c07      	ldr	r4, [sp, #28]
 8019dde:	9d08      	ldr	r5, [sp, #32]
 8019de0:	ea46 4884 	orr.w	r8, r6, r4, lsl #18
 8019de4:	0ca7      	lsrs	r7, r4, #18
 8019de6:	9c08      	ldr	r4, [sp, #32]
 8019de8:	0cae      	lsrs	r6, r5, #18
 8019dea:	ea47 3484 	orr.w	r4, r7, r4, lsl #14
 8019dee:	9d07      	ldr	r5, [sp, #28]
 8019df0:	ea89 0704 	eor.w	r7, r9, r4
 8019df4:	9c08      	ldr	r4, [sp, #32]
 8019df6:	ea46 3585 	orr.w	r5, r6, r5, lsl #14
 8019dfa:	ea88 0605 	eor.w	r6, r8, r5
 8019dfe:	05e5      	lsls	r5, r4, #23
 8019e00:	9c07      	ldr	r4, [sp, #28]
 8019e02:	ea45 2554 	orr.w	r5, r5, r4, lsr #9
 8019e06:	05e4      	lsls	r4, r4, #23
 8019e08:	ea44 2453 	orr.w	r4, r4, r3, lsr #9
 8019e0c:	407c      	eors	r4, r7
 8019e0e:	9b01      	ldr	r3, [sp, #4]
 8019e10:	eb1b 0404 	adds.w	r4, fp, r4
 8019e14:	ea85 0506 	eor.w	r5, r5, r6
 8019e18:	eb42 0505 	adc.w	r5, r2, r5
 8019e1c:	191b      	adds	r3, r3, r4
 8019e1e:	9305      	str	r3, [sp, #20]
 8019e20:	9b06      	ldr	r3, [sp, #24]
 8019e22:	416b      	adcs	r3, r5
 8019e24:	9306      	str	r3, [sp, #24]
 8019e26:	ea4f 771c 	mov.w	r7, ip, lsr #28
 8019e2a:	ea4f 738c 	mov.w	r3, ip, lsl #30
 8019e2e:	ea43 039e 	orr.w	r3, r3, lr, lsr #2
 8019e32:	ea47 170e 	orr.w	r7, r7, lr, lsl #4
 8019e36:	405f      	eors	r7, r3
 8019e38:	ea4f 634c 	mov.w	r3, ip, lsl #25
 8019e3c:	ea4f 721e 	mov.w	r2, lr, lsr #28
 8019e40:	ea43 13de 	orr.w	r3, r3, lr, lsr #7
 8019e44:	ea42 180c 	orr.w	r8, r2, ip, lsl #4
 8019e48:	405f      	eors	r7, r3
 8019e4a:	ea4f 728e 	mov.w	r2, lr, lsl #30
 8019e4e:	9b02      	ldr	r3, [sp, #8]
 8019e50:	ea42 029c 	orr.w	r2, r2, ip, lsr #2
 8019e54:	ea88 0202 	eor.w	r2, r8, r2
 8019e58:	ea43 060c 	orr.w	r6, r3, ip
 8019e5c:	ea4f 684e 	mov.w	r8, lr, lsl #25
 8019e60:	9b03      	ldr	r3, [sp, #12]
 8019e62:	ea48 18dc 	orr.w	r8, r8, ip, lsr #7
 8019e66:	ea82 0208 	eor.w	r2, r2, r8
 8019e6a:	ea43 080e 	orr.w	r8, r3, lr
 8019e6e:	9b04      	ldr	r3, [sp, #16]
 8019e70:	ea08 0803 	and.w	r8, r8, r3
 8019e74:	9b02      	ldr	r3, [sp, #8]
 8019e76:	ea03 0b0c 	and.w	fp, r3, ip
 8019e7a:	9b03      	ldr	r3, [sp, #12]
 8019e7c:	ea06 060a 	and.w	r6, r6, sl
 8019e80:	ea03 090e 	and.w	r9, r3, lr
 8019e84:	ea4b 0306 	orr.w	r3, fp, r6
 8019e88:	18fb      	adds	r3, r7, r3
 8019e8a:	ea48 0809 	orr.w	r8, r8, r9
 8019e8e:	eb42 0208 	adc.w	r2, r2, r8
 8019e92:	191b      	adds	r3, r3, r4
 8019e94:	9301      	str	r3, [sp, #4]
    }
    while( i < 80 );
 8019e96:	4b2b      	ldr	r3, [pc, #172]	; (8019f44 <mbedtls_sha512_process+0xac4>)
 8019e98:	f101 0140 	add.w	r1, r1, #64	; 0x40
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 8019e9c:	eb45 0202 	adc.w	r2, r5, r2
    while( i < 80 );
 8019ea0:	428b      	cmp	r3, r1
 8019ea2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8019ea6:	f47f abaf 	bne.w	8019608 <mbedtls_sha512_process+0x188>

    ctx->state[0] += A;
 8019eaa:	9901      	ldr	r1, [sp, #4]
 8019eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
 8019eae:	9f06      	ldr	r7, [sp, #24]
    ctx->state[5] += F;
 8019eb0:	9d08      	ldr	r5, [sp, #32]
    ctx->state[0] += A;
 8019eb2:	185b      	adds	r3, r3, r1
 8019eb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019eb6:	eb41 0202 	adc.w	r2, r1, r2
 8019eba:	9900      	ldr	r1, [sp, #0]
 8019ebc:	610b      	str	r3, [r1, #16]
    ctx->state[1] += B;
 8019ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ctx->state[0] += A;
 8019ec0:	614a      	str	r2, [r1, #20]
    ctx->state[1] += B;
 8019ec2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019ec4:	eb13 030c 	adds.w	r3, r3, ip
 8019ec8:	eb42 020e 	adc.w	r2, r2, lr
 8019ecc:	618b      	str	r3, [r1, #24]
 8019ece:	61ca      	str	r2, [r1, #28]
    ctx->state[2] += C;
 8019ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019ed2:	9a02      	ldr	r2, [sp, #8]
 8019ed4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8019ed6:	189b      	adds	r3, r3, r2
 8019ed8:	9a03      	ldr	r2, [sp, #12]
 8019eda:	eb41 0202 	adc.w	r2, r1, r2
 8019ede:	9900      	ldr	r1, [sp, #0]
 8019ee0:	620b      	str	r3, [r1, #32]
    ctx->state[3] += D;
 8019ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ctx->state[2] += C;
 8019ee4:	624a      	str	r2, [r1, #36]	; 0x24
    ctx->state[3] += D;
 8019ee6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019ee8:	9a04      	ldr	r2, [sp, #16]
 8019eea:	eb13 030a 	adds.w	r3, r3, sl
 8019eee:	eb41 0202 	adc.w	r2, r1, r2
 8019ef2:	9900      	ldr	r1, [sp, #0]
 8019ef4:	628b      	str	r3, [r1, #40]	; 0x28
 8019ef6:	62ca      	str	r2, [r1, #44]	; 0x2c
    ctx->state[4] += E;
 8019ef8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019efa:	9a05      	ldr	r2, [sp, #20]
 8019efc:	189c      	adds	r4, r3, r2
 8019efe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ctx->state[5] += F;
 8019f00:	9a07      	ldr	r2, [sp, #28]
    ctx->state[4] += E;
 8019f02:	eb43 0707 	adc.w	r7, r3, r7
    ctx->state[5] += F;
 8019f06:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ctx->state[4] += E;
 8019f08:	e9c1 470c 	strd	r4, r7, [r1, #48]	; 0x30
    ctx->state[5] += F;
 8019f0c:	189c      	adds	r4, r3, r2
 8019f0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ctx->state[6] += G;
 8019f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ctx->state[5] += F;
 8019f12:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[6] += G;
 8019f16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ctx->state[5] += F;
 8019f18:	e9c1 450e 	strd	r4, r5, [r1, #56]	; 0x38
    ctx->state[6] += G;
 8019f1c:	189c      	adds	r4, r3, r2
 8019f1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019f20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ctx->state[7] += H;
 8019f22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ctx->state[6] += G;
 8019f24:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[7] += H;
 8019f28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ctx->state[6] += G;
 8019f2a:	e9c1 4510 	strd	r4, r5, [r1, #64]	; 0x40
    ctx->state[7] += H;
 8019f2e:	189d      	adds	r5, r3, r2
 8019f30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019f32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019f34:	eb43 0404 	adc.w	r4, r3, r4
 8019f38:	e9c1 5412 	strd	r5, r4, [r1, #72]	; 0x48
}
 8019f3c:	f50d 7d3f 	add.w	sp, sp, #764	; 0x2fc
 8019f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f44:	0802cdd8 	.word	0x0802cdd8

08019f48 <mbedtls_sha512_update.part.0>:
#endif /* !MBEDTLS_SHA512_PROCESS_ALT */

/*
 * SHA-512 process buffer
 */
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f4c:	4615      	mov	r5, r2
    unsigned int left;

    if( ilen == 0 )
        return;

    left = (unsigned int) (ctx->total[0] & 0x7F);
 8019f4e:	e9d0 2300 	ldrd	r2, r3, [r0]
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019f52:	4689      	mov	r9, r1
 8019f54:	1956      	adds	r6, r2, r5
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 8019f56:	f04f 0100 	mov.w	r1, #0
 8019f5a:	eb53 0701 	adcs.w	r7, r3, r1
 8019f5e:	f04f 0a00 	mov.w	sl, #0
 8019f62:	f04f 0b00 	mov.w	fp, #0
 8019f66:	bf24      	itt	cs
 8019f68:	f04f 0a01 	movcs.w	sl, #1
 8019f6c:	f04f 0b00 	movcs.w	fp, #0

    if( ctx->total[0] < (uint64_t) ilen )
 8019f70:	ea5a 030b 	orrs.w	r3, sl, fp
    ctx->total[0] += (uint64_t) ilen;
 8019f74:	e9c0 6700 	strd	r6, r7, [r0]
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019f78:	4604      	mov	r4, r0
    left = (unsigned int) (ctx->total[0] & 0x7F);
 8019f7a:	f002 087f 	and.w	r8, r2, #127	; 0x7f
    if( ctx->total[0] < (uint64_t) ilen )
 8019f7e:	d006      	beq.n	8019f8e <mbedtls_sha512_update.part.0+0x46>
        ctx->total[1]++;
 8019f80:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8019f84:	3301      	adds	r3, #1
 8019f86:	f142 0200 	adc.w	r2, r2, #0
 8019f8a:	e9c4 3202 	strd	r3, r2, [r4, #8]

    if( left && ilen >= fill )
 8019f8e:	f1b8 0f00 	cmp.w	r8, #0
 8019f92:	d014      	beq.n	8019fbe <mbedtls_sha512_update.part.0+0x76>
    fill = 128 - left;
 8019f94:	f1c8 0780 	rsb	r7, r8, #128	; 0x80
    if( left && ilen >= fill )
 8019f98:	42af      	cmp	r7, r5
 8019f9a:	d810      	bhi.n	8019fbe <mbedtls_sha512_update.part.0+0x76>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8019f9c:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8019fa0:	4649      	mov	r1, r9
 8019fa2:	463a      	mov	r2, r7
 8019fa4:	eb06 0008 	add.w	r0, r6, r8
 8019fa8:	f008 fa6a 	bl	8022480 <memcpy>
        mbedtls_sha512_process( ctx, ctx->buffer );
 8019fac:	4631      	mov	r1, r6
 8019fae:	4620      	mov	r0, r4
 8019fb0:	f7ff fa66 	bl	8019480 <mbedtls_sha512_process>
        input += fill;
 8019fb4:	3d80      	subs	r5, #128	; 0x80
        ilen  -= fill;
 8019fb6:	4445      	add	r5, r8
        input += fill;
 8019fb8:	44b9      	add	r9, r7
        left = 0;
 8019fba:	f04f 0800 	mov.w	r8, #0
 8019fbe:	462e      	mov	r6, r5
 8019fc0:	eb09 0705 	add.w	r7, r9, r5
 8019fc4:	e003      	b.n	8019fce <mbedtls_sha512_update.part.0+0x86>
    }

    while( ilen >= 128 )
    {
        mbedtls_sha512_process( ctx, input );
 8019fc6:	4620      	mov	r0, r4
 8019fc8:	f7ff fa5a 	bl	8019480 <mbedtls_sha512_process>
        input += 128;
        ilen  -= 128;
 8019fcc:	3e80      	subs	r6, #128	; 0x80
    while( ilen >= 128 )
 8019fce:	2e7f      	cmp	r6, #127	; 0x7f
 8019fd0:	eba7 0106 	sub.w	r1, r7, r6
 8019fd4:	d8f7      	bhi.n	8019fc6 <mbedtls_sha512_update.part.0+0x7e>
 8019fd6:	09ea      	lsrs	r2, r5, #7
 8019fd8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8019fdc:	f025 017f 	bic.w	r1, r5, #127	; 0x7f
 8019fe0:	fb03 5202 	mla	r2, r3, r2, r5
    }

    if( ilen > 0 )
 8019fe4:	4449      	add	r1, r9
 8019fe6:	b132      	cbz	r2, 8019ff6 <mbedtls_sha512_update.part.0+0xae>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019fec:	4440      	add	r0, r8
}
 8019fee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019ff2:	f008 ba45 	b.w	8022480 <memcpy>
}
 8019ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019ffa <mbedtls_sha512_update>:
    if( ilen == 0 )
 8019ffa:	b10a      	cbz	r2, 801a000 <mbedtls_sha512_update+0x6>
 8019ffc:	f7ff bfa4 	b.w	8019f48 <mbedtls_sha512_update.part.0>
}
 801a000:	4770      	bx	lr
	...

0801a004 <mbedtls_sha512_finish>:

/*
 * SHA-512 final digest
 */
void mbedtls_sha512_finish( mbedtls_sha512_context *ctx, unsigned char output[64] )
{
 801a004:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a006:	460d      	mov	r5, r1
    size_t last, padn;
    uint64_t high, low;
    unsigned char msglen[16];

    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
 801a008:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
    high = ( ctx->total[0] >> 61 )
 801a00c:	e9d0 2300 	ldrd	r2, r3, [r0]
         | ( ctx->total[1] <<  3 );
 801a010:	00c9      	lsls	r1, r1, #3
{
 801a012:	b085      	sub	sp, #20
         | ( ctx->total[1] <<  3 );
 801a014:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
{
 801a018:	4604      	mov	r4, r0
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, msglen, 0 );
 801a01a:	0e0f      	lsrs	r7, r1, #24
    high = ( ctx->total[0] >> 61 )
 801a01c:	0f58      	lsrs	r0, r3, #29
    low  = ( ctx->total[0] <<  3 );
 801a01e:	00db      	lsls	r3, r3, #3
 801a020:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    PUT_UINT64_BE( high, msglen, 0 );
 801a024:	f88d 7000 	strb.w	r7, [sp]
 801a028:	0c0f      	lsrs	r7, r1, #16
 801a02a:	f88d 7001 	strb.w	r7, [sp, #1]
 801a02e:	f88d 1003 	strb.w	r1, [sp, #3]
 801a032:	0a0f      	lsrs	r7, r1, #8
    PUT_UINT64_BE( low,  msglen, 8 );
 801a034:	0e19      	lsrs	r1, r3, #24
    high = ( ctx->total[0] >> 61 )
 801a036:	ea40 00c6 	orr.w	r0, r0, r6, lsl #3
    PUT_UINT64_BE( low,  msglen, 8 );
 801a03a:	f88d 1008 	strb.w	r1, [sp, #8]
    low  = ( ctx->total[0] <<  3 );
 801a03e:	00d6      	lsls	r6, r2, #3
    PUT_UINT64_BE( low,  msglen, 8 );
 801a040:	0c19      	lsrs	r1, r3, #16

    last = (size_t)( ctx->total[0] & 0x7F );
 801a042:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );
 801a046:	2a6f      	cmp	r2, #111	; 0x6f
 801a048:	ba00      	rev	r0, r0
    PUT_UINT64_BE( low,  msglen, 8 );
 801a04a:	f88d 1009 	strb.w	r1, [sp, #9]
 801a04e:	ea4f 2113 	mov.w	r1, r3, lsr #8
    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );
 801a052:	bf94      	ite	ls
 801a054:	f1c2 0270 	rsbls	r2, r2, #112	; 0x70
 801a058:	f1c2 02f0 	rsbhi	r2, r2, #240	; 0xf0
    PUT_UINT64_BE( high, msglen, 0 );
 801a05c:	9001      	str	r0, [sp, #4]
    PUT_UINT64_BE( low,  msglen, 8 );
 801a05e:	f88d 100a 	strb.w	r1, [sp, #10]

    mbedtls_sha512_update( ctx, sha512_padding, padn );
 801a062:	4620      	mov	r0, r4
 801a064:	4969      	ldr	r1, [pc, #420]	; (801a20c <mbedtls_sha512_finish+0x208>)
    PUT_UINT64_BE( low,  msglen, 8 );
 801a066:	f88d 300b 	strb.w	r3, [sp, #11]
 801a06a:	ba36      	rev	r6, r6
    PUT_UINT64_BE( high, msglen, 0 );
 801a06c:	f88d 7002 	strb.w	r7, [sp, #2]
    PUT_UINT64_BE( low,  msglen, 8 );
 801a070:	9603      	str	r6, [sp, #12]
    mbedtls_sha512_update( ctx, sha512_padding, padn );
 801a072:	f7ff ffc2 	bl	8019ffa <mbedtls_sha512_update>
    if( ilen == 0 )
 801a076:	2210      	movs	r2, #16
 801a078:	4669      	mov	r1, sp
 801a07a:	4620      	mov	r0, r4
 801a07c:	f7ff ff64 	bl	8019f48 <mbedtls_sha512_update.part.0>
    mbedtls_sha512_update( ctx, msglen, 16 );

    PUT_UINT64_BE( ctx->state[0], output,  0 );
 801a080:	7de3      	ldrb	r3, [r4, #23]
 801a082:	702b      	strb	r3, [r5, #0]
 801a084:	8ae3      	ldrh	r3, [r4, #22]
 801a086:	706b      	strb	r3, [r5, #1]
 801a088:	6963      	ldr	r3, [r4, #20]
 801a08a:	0a1b      	lsrs	r3, r3, #8
 801a08c:	70ab      	strb	r3, [r5, #2]
 801a08e:	6963      	ldr	r3, [r4, #20]
 801a090:	70eb      	strb	r3, [r5, #3]
 801a092:	7ce3      	ldrb	r3, [r4, #19]
 801a094:	712b      	strb	r3, [r5, #4]
 801a096:	8a63      	ldrh	r3, [r4, #18]
 801a098:	716b      	strb	r3, [r5, #5]
 801a09a:	6923      	ldr	r3, [r4, #16]
 801a09c:	0a1b      	lsrs	r3, r3, #8
 801a09e:	71ab      	strb	r3, [r5, #6]
 801a0a0:	6923      	ldr	r3, [r4, #16]
 801a0a2:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 801a0a4:	7fe3      	ldrb	r3, [r4, #31]
 801a0a6:	722b      	strb	r3, [r5, #8]
 801a0a8:	8be3      	ldrh	r3, [r4, #30]
 801a0aa:	726b      	strb	r3, [r5, #9]
 801a0ac:	69e3      	ldr	r3, [r4, #28]
 801a0ae:	0a1b      	lsrs	r3, r3, #8
 801a0b0:	72ab      	strb	r3, [r5, #10]
 801a0b2:	69e3      	ldr	r3, [r4, #28]
 801a0b4:	72eb      	strb	r3, [r5, #11]
 801a0b6:	7ee3      	ldrb	r3, [r4, #27]
 801a0b8:	732b      	strb	r3, [r5, #12]
 801a0ba:	8b63      	ldrh	r3, [r4, #26]
 801a0bc:	736b      	strb	r3, [r5, #13]
 801a0be:	69a3      	ldr	r3, [r4, #24]
 801a0c0:	0a1b      	lsrs	r3, r3, #8
 801a0c2:	73ab      	strb	r3, [r5, #14]
 801a0c4:	69a3      	ldr	r3, [r4, #24]
 801a0c6:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 801a0c8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801a0cc:	742b      	strb	r3, [r5, #16]
 801a0ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801a0d0:	746b      	strb	r3, [r5, #17]
 801a0d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a0d4:	0a1b      	lsrs	r3, r3, #8
 801a0d6:	74ab      	strb	r3, [r5, #18]
 801a0d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a0da:	74eb      	strb	r3, [r5, #19]
 801a0dc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801a0e0:	752b      	strb	r3, [r5, #20]
 801a0e2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801a0e4:	756b      	strb	r3, [r5, #21]
 801a0e6:	6a23      	ldr	r3, [r4, #32]
 801a0e8:	0a1b      	lsrs	r3, r3, #8
 801a0ea:	75ab      	strb	r3, [r5, #22]
 801a0ec:	6a23      	ldr	r3, [r4, #32]
 801a0ee:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 801a0f0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801a0f4:	762b      	strb	r3, [r5, #24]
 801a0f6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a0f8:	766b      	strb	r3, [r5, #25]
 801a0fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a0fc:	0a1b      	lsrs	r3, r3, #8
 801a0fe:	76ab      	strb	r3, [r5, #26]
 801a100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a102:	76eb      	strb	r3, [r5, #27]
 801a104:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801a108:	772b      	strb	r3, [r5, #28]
 801a10a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801a10c:	776b      	strb	r3, [r5, #29]
 801a10e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a110:	0a1b      	lsrs	r3, r3, #8
 801a112:	77ab      	strb	r3, [r5, #30]
 801a114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a116:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 801a118:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801a11c:	f885 3020 	strb.w	r3, [r5, #32]
 801a120:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a122:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 801a126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a128:	0a1b      	lsrs	r3, r3, #8
 801a12a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 801a12e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a130:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 801a134:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 801a138:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 801a13c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801a13e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801a142:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a144:	0a1b      	lsrs	r3, r3, #8
 801a146:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 801a14a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a14c:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 801a150:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 801a154:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 801a158:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a15a:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 801a15e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a160:	0a1b      	lsrs	r3, r3, #8
 801a162:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
 801a166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a168:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 801a16c:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 801a170:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 801a174:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801a176:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 801a17a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a17c:	0a1b      	lsrs	r3, r3, #8
 801a17e:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 801a182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a184:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 801a188:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d13b      	bne.n	801a208 <mbedtls_sha512_finish+0x204>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 801a190:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 801a194:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801a198:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801a19c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 801a1a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a1a2:	0a1b      	lsrs	r3, r3, #8
 801a1a4:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 801a1a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a1aa:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 801a1ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a1b2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 801a1b6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801a1ba:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 801a1be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a1c0:	0a1b      	lsrs	r3, r3, #8
 801a1c2:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 801a1c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a1c8:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 801a1cc:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 801a1d0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 801a1d4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801a1d8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 801a1dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a1de:	0a1b      	lsrs	r3, r3, #8
 801a1e0:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 801a1e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a1e6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 801a1ea:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 801a1ee:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 801a1f2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801a1f6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 801a1fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801a1fc:	0a1b      	lsrs	r3, r3, #8
 801a1fe:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 801a202:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801a204:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }
}
 801a208:	b005      	add	sp, #20
 801a20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a20c:	0802cdd8 	.word	0x0802cdd8

0801a210 <mbedtls_sha512>:
/*
 * output = SHA-512( input buffer )
 */
void mbedtls_sha512( const unsigned char *input, size_t ilen,
             unsigned char output[64], int is384 )
{
 801a210:	b570      	push	{r4, r5, r6, lr}
 801a212:	b0b8      	sub	sp, #224	; 0xe0
 801a214:	4605      	mov	r5, r0
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 801a216:	a802      	add	r0, sp, #8
{
 801a218:	9301      	str	r3, [sp, #4]
 801a21a:	4614      	mov	r4, r2
 801a21c:	460e      	mov	r6, r1
    mbedtls_sha512_init( &ctx );
 801a21e:	f7ff f880 	bl	8019322 <mbedtls_sha512_init>
    mbedtls_sha512_starts( &ctx, is384 );
 801a222:	9901      	ldr	r1, [sp, #4]
 801a224:	a802      	add	r0, sp, #8
 801a226:	f7ff f88f 	bl	8019348 <mbedtls_sha512_starts>
    mbedtls_sha512_update( &ctx, input, ilen );
 801a22a:	4632      	mov	r2, r6
 801a22c:	4629      	mov	r1, r5
 801a22e:	a802      	add	r0, sp, #8
 801a230:	f7ff fee3 	bl	8019ffa <mbedtls_sha512_update>
    mbedtls_sha512_finish( &ctx, output );
 801a234:	4621      	mov	r1, r4
 801a236:	a802      	add	r0, sp, #8
 801a238:	f7ff fee4 	bl	801a004 <mbedtls_sha512_finish>
    mbedtls_sha512_free( &ctx );
 801a23c:	a802      	add	r0, sp, #8
 801a23e:	f7ff f874 	bl	801932a <mbedtls_sha512_free>
}
 801a242:	b038      	add	sp, #224	; 0xe0
 801a244:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a248 <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
 801a248:	4602      	mov	r2, r0
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 801a24a:	4804      	ldr	r0, [pc, #16]	; (801a25c <mbedtls_ssl_ciphersuite_from_id+0x14>)

    while( cur->id != 0 )
 801a24c:	6803      	ldr	r3, [r0, #0]
 801a24e:	b90b      	cbnz	r3, 801a254 <mbedtls_ssl_ciphersuite_from_id+0xc>
            return( cur );

        cur++;
    }

    return( NULL );
 801a250:	4618      	mov	r0, r3
}
 801a252:	4770      	bx	lr
        if( cur->id == ciphersuite )
 801a254:	4293      	cmp	r3, r2
 801a256:	d0fc      	beq.n	801a252 <mbedtls_ssl_ciphersuite_from_id+0xa>
        cur++;
 801a258:	3020      	adds	r0, #32
 801a25a:	e7f7      	b.n	801a24c <mbedtls_ssl_ciphersuite_from_id+0x4>
 801a25c:	0802d138 	.word	0x0802d138

0801a260 <mbedtls_ssl_list_ciphersuites>:
{
 801a260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( supported_init == 0 )
 801a262:	4c0e      	ldr	r4, [pc, #56]	; (801a29c <mbedtls_ssl_list_ciphersuites+0x3c>)
 801a264:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a266:	b953      	cbnz	r3, 801a27e <mbedtls_ssl_list_ciphersuites+0x1e>
 801a268:	4e0d      	ldr	r6, [pc, #52]	; (801a2a0 <mbedtls_ssl_list_ciphersuites+0x40>)
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 801a26a:	4621      	mov	r1, r4
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 801a26c:	f104 0748 	add.w	r7, r4, #72	; 0x48
 801a270:	f856 5b04 	ldr.w	r5, [r6], #4
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 801a274:	b92d      	cbnz	r5, 801a282 <mbedtls_ssl_list_ciphersuites+0x22>
        *q = 0;
 801a276:	2300      	movs	r3, #0
 801a278:	600b      	str	r3, [r1, #0]
        supported_init = 1;
 801a27a:	2301      	movs	r3, #1
 801a27c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 801a27e:	4807      	ldr	r0, [pc, #28]	; (801a29c <mbedtls_ssl_list_ciphersuites+0x3c>)
 801a280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 801a282:	42b9      	cmp	r1, r7
 801a284:	d2f7      	bcs.n	801a276 <mbedtls_ssl_list_ciphersuites+0x16>
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
 801a286:	4628      	mov	r0, r5
 801a288:	f7ff ffde 	bl	801a248 <mbedtls_ssl_ciphersuite_from_id>
 801a28c:	2800      	cmp	r0, #0
 801a28e:	d0ef      	beq.n	801a270 <mbedtls_ssl_list_ciphersuites+0x10>
 801a290:	7a03      	ldrb	r3, [r0, #8]
 801a292:	2b2a      	cmp	r3, #42	; 0x2a
                *(q++) = *p;
 801a294:	bf18      	it	ne
 801a296:	f841 5b04 	strne.w	r5, [r1], #4
             p++ )
 801a29a:	e7e9      	b.n	801a270 <mbedtls_ssl_list_ciphersuites+0x10>
 801a29c:	200010e0 	.word	0x200010e0
 801a2a0:	0802d398 	.word	0x0802d398

0801a2a4 <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 801a2a4:	b508      	push	{r3, lr}
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 801a2a6:	f7ff ffcf 	bl	801a248 <mbedtls_ssl_ciphersuite_from_id>

    if( cur == NULL )
 801a2aa:	b108      	cbz	r0, 801a2b0 <mbedtls_ssl_get_ciphersuite_name+0xc>
        return( "unknown" );

    return( cur->name );
 801a2ac:	6840      	ldr	r0, [r0, #4]
}
 801a2ae:	bd08      	pop	{r3, pc}
        return( "unknown" );
 801a2b0:	4800      	ldr	r0, [pc, #0]	; (801a2b4 <mbedtls_ssl_get_ciphersuite_name+0x10>)
 801a2b2:	e7fc      	b.n	801a2ae <mbedtls_ssl_get_ciphersuite_name+0xa>
 801a2b4:	08030ceb 	.word	0x08030ceb

0801a2b8 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801a2b8:	7a80      	ldrb	r0, [r0, #10]
 801a2ba:	1e43      	subs	r3, r0, #1
 801a2bc:	2b09      	cmp	r3, #9
 801a2be:	d808      	bhi.n	801a2d2 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x1a>
 801a2c0:	e8df f003 	tbb	[pc, r3]
 801a2c4:	0a090909 	.word	0x0a090909
 801a2c8:	07090707 	.word	0x07090707
 801a2cc:	0505      	.short	0x0505
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
 801a2ce:	2002      	movs	r0, #2
 801a2d0:	4770      	bx	lr

        default:
            return( MBEDTLS_PK_NONE );
 801a2d2:	2000      	movs	r0, #0
 801a2d4:	4770      	bx	lr
            return( MBEDTLS_PK_RSA );
 801a2d6:	2001      	movs	r0, #1
    }
}
 801a2d8:	4770      	bx	lr

0801a2da <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801a2da:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 801a2dc:	4603      	mov	r3, r0
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801a2de:	b112      	cbz	r2, 801a2e6 <mbedtls_ssl_own_key+0xc>
 801a2e0:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
 801a2e4:	b910      	cbnz	r0, 801a2ec <mbedtls_ssl_own_key+0x12>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	6c18      	ldr	r0, [r3, #64]	; 0x40

    return( key_cert == NULL ? NULL : key_cert->key );
 801a2ea:	b100      	cbz	r0, 801a2ee <mbedtls_ssl_own_key+0x14>
 801a2ec:	6840      	ldr	r0, [r0, #4]
}
 801a2ee:	4770      	bx	lr

0801a2f0 <ssl_write_client_hello>:

    return( 0 );
}

static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
{
 801a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f4:	b087      	sub	sp, #28
    unsigned char *p, *q;
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 801a2f6:	4bbc      	ldr	r3, [pc, #752]	; (801a5e8 <ssl_write_client_hello+0x2f8>)
 801a2f8:	9300      	str	r3, [sp, #0]
{
 801a2fa:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 801a2fc:	f240 23cf 	movw	r3, #719	; 0x2cf
 801a300:	2102      	movs	r1, #2
 801a302:	4aba      	ldr	r2, [pc, #744]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a304:	f7f6 fc2e 	bl	8010b64 <mbedtls_debug_print_msg>

    if( ssl->conf->f_rng == NULL )
 801a308:	6821      	ldr	r1, [r4, #0]
 801a30a:	698b      	ldr	r3, [r1, #24]
 801a30c:	b96b      	cbnz	r3, 801a32a <ssl_write_client_hello+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 801a30e:	4bb8      	ldr	r3, [pc, #736]	; (801a5f0 <ssl_write_client_hello+0x300>)
 801a310:	9300      	str	r3, [sp, #0]
 801a312:	4ab6      	ldr	r2, [pc, #728]	; (801a5ec <ssl_write_client_hello+0x2fc>)
        return( MBEDTLS_ERR_SSL_NO_RNG );
 801a314:	4db7      	ldr	r5, [pc, #732]	; (801a5f4 <ssl_write_client_hello+0x304>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 801a316:	f240 23d3 	movw	r3, #723	; 0x2d3
 801a31a:	2101      	movs	r1, #1
 801a31c:	4620      	mov	r0, r4
 801a31e:	f7f6 fc21 	bl	8010b64 <mbedtls_debug_print_msg>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );

    return( 0 );
}
 801a322:	4628      	mov	r0, r5
 801a324:	b007      	add	sp, #28
 801a326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a32a:	68a3      	ldr	r3, [r4, #8]
 801a32c:	b92b      	cbnz	r3, 801a33a <ssl_write_client_hello+0x4a>
        ssl->major_ver = ssl->conf->min_major_ver;
 801a32e:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 801a332:	6123      	str	r3, [r4, #16]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 801a334:	f891 306b 	ldrb.w	r3, [r1, #107]	; 0x6b
 801a338:	6163      	str	r3, [r4, #20]
    if( ssl->conf->max_major_ver == 0 )
 801a33a:	f891 0068 	ldrb.w	r0, [r1, #104]	; 0x68
 801a33e:	b950      	cbnz	r0, 801a356 <ssl_write_client_hello+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 801a340:	4bad      	ldr	r3, [pc, #692]	; (801a5f8 <ssl_write_client_hello+0x308>)
 801a342:	9300      	str	r3, [sp, #0]
 801a344:	4aa9      	ldr	r2, [pc, #676]	; (801a5ec <ssl_write_client_hello+0x2fc>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801a346:	4dad      	ldr	r5, [pc, #692]	; (801a5fc <ssl_write_client_hello+0x30c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 801a348:	f240 23e1 	movw	r3, #737	; 0x2e1
 801a34c:	2101      	movs	r1, #1
 801a34e:	4620      	mov	r0, r4
 801a350:	f7f6 fc08 	bl	8010b64 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801a354:	e7e5      	b.n	801a322 <ssl_write_client_hello+0x32>
    buf = ssl->out_msg;
 801a356:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                       ssl->conf->transport, p );
 801a35a:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
    buf = ssl->out_msg;
 801a35e:	9304      	str	r3, [sp, #16]
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801a360:	f891 1069 	ldrb.w	r1, [r1, #105]	; 0x69
 801a364:	3304      	adds	r3, #4
 801a366:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801a36a:	f005 f83f 	bl	801f3ec <mbedtls_ssl_write_version>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 801a36e:	9b04      	ldr	r3, [sp, #16]
 801a370:	4a9e      	ldr	r2, [pc, #632]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a372:	795b      	ldrb	r3, [r3, #5]
 801a374:	9302      	str	r3, [sp, #8]
 801a376:	9b04      	ldr	r3, [sp, #16]
 801a378:	791b      	ldrb	r3, [r3, #4]
 801a37a:	9301      	str	r3, [sp, #4]
 801a37c:	4ba0      	ldr	r3, [pc, #640]	; (801a600 <ssl_write_client_hello+0x310>)
 801a37e:	9300      	str	r3, [sp, #0]
 801a380:	2103      	movs	r1, #3
 801a382:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801a386:	4620      	mov	r0, r4
 801a388:	f7f6 fbec 	bl	8010b64 <mbedtls_debug_print_msg>
    t = mbedtls_time( NULL );
 801a38c:	2000      	movs	r0, #0
    unsigned char *p = ssl->handshake->randbytes;
 801a38e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    t = mbedtls_time( NULL );
 801a390:	f7e8 ff64 	bl	800325c <time>
    *p++ = (unsigned char)( t >> 24 );
 801a394:	0e03      	lsrs	r3, r0, #24
 801a396:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
    *p++ = (unsigned char)( t >> 16 );
 801a39a:	0c03      	lsrs	r3, r0, #16
 801a39c:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
    *p++ = (unsigned char)( t >>  8 );
 801a3a0:	0a03      	lsrs	r3, r0, #8
 801a3a2:	f885 32ae 	strb.w	r3, [r5, #686]	; 0x2ae
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
 801a3a6:	4b97      	ldr	r3, [pc, #604]	; (801a604 <ssl_write_client_hello+0x314>)
    *p++ = (unsigned char)( t       );
 801a3a8:	f885 02af 	strb.w	r0, [r5, #687]	; 0x2af
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
 801a3ac:	4a8f      	ldr	r2, [pc, #572]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a3ae:	9300      	str	r3, [sp, #0]
 801a3b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a3b4:	f240 23b7 	movw	r3, #695	; 0x2b7
 801a3b8:	2103      	movs	r1, #3
 801a3ba:	4620      	mov	r0, r4
 801a3bc:	f7f6 fbd2 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 801a3c0:	6823      	ldr	r3, [r4, #0]
 801a3c2:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 801a3c6:	699e      	ldr	r6, [r3, #24]
 801a3c8:	69d8      	ldr	r0, [r3, #28]
 801a3ca:	221c      	movs	r2, #28
 801a3cc:	47b0      	blx	r6
 801a3ce:	4605      	mov	r5, r0
 801a3d0:	b150      	cbz	r0, 801a3e8 <ssl_write_client_hello+0xf8>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 801a3d2:	4b8d      	ldr	r3, [pc, #564]	; (801a608 <ssl_write_client_hello+0x318>)
 801a3d4:	9300      	str	r3, [sp, #0]
 801a3d6:	9001      	str	r0, [sp, #4]
 801a3d8:	f240 23f9 	movw	r3, #761	; 0x2f9
 801a3dc:	4a83      	ldr	r2, [pc, #524]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a3de:	2101      	movs	r1, #1
 801a3e0:	4620      	mov	r0, r4
 801a3e2:	f7f6 fbef 	bl	8010bc4 <mbedtls_debug_print_ret>
        return( ret );
 801a3e6:	e79c      	b.n	801a322 <ssl_write_client_hello+0x32>
    p += 2;
 801a3e8:	9b04      	ldr	r3, [sp, #16]
 801a3ea:	1d99      	adds	r1, r3, #6
    memcpy( p, ssl->handshake->randbytes, 32 );
 801a3ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a3ee:	4608      	mov	r0, r1
 801a3f0:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 801a3f4:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 801a3f8:	f852 5b04 	ldr.w	r5, [r2], #4
 801a3fc:	f840 5b04 	str.w	r5, [r0], #4
 801a400:	429a      	cmp	r2, r3
 801a402:	d1f9      	bne.n	801a3f8 <ssl_write_client_hello+0x108>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 801a404:	2320      	movs	r3, #32
 801a406:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a40a:	4b80      	ldr	r3, [pc, #512]	; (801a60c <ssl_write_client_hello+0x31c>)
 801a40c:	4a77      	ldr	r2, [pc, #476]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a40e:	9300      	str	r3, [sp, #0]
 801a410:	2103      	movs	r1, #3
 801a412:	f240 23fe 	movw	r3, #766	; 0x2fe
 801a416:	4620      	mov	r0, r4
 801a418:	f7f6 fc04 	bl	8010c24 <mbedtls_debug_print_buf>
    n = ssl->session_negotiate->id_len;
 801a41c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a41e:	690b      	ldr	r3, [r1, #16]
    if( n < 16 || n > 32 ||
 801a420:	f1a3 0210 	sub.w	r2, r3, #16
 801a424:	2a10      	cmp	r2, #16
 801a426:	68a2      	ldr	r2, [r4, #8]
 801a428:	f200 80d8 	bhi.w	801a5dc <ssl_write_client_hello+0x2ec>
 801a42c:	2a00      	cmp	r2, #0
 801a42e:	f040 80d8 	bne.w	801a5e2 <ssl_write_client_hello+0x2f2>
        ssl->handshake->resume == 0 )
 801a432:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
 801a434:	f8d2 2330 	ldr.w	r2, [r2, #816]	; 0x330
        n = 0;
 801a438:	2a00      	cmp	r2, #0
 801a43a:	bf08      	it	eq
 801a43c:	2300      	moveq	r3, #0
        if( ssl->session_negotiate->ticket != NULL &&
 801a43e:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 801a440:	b172      	cbz	r2, 801a460 <ssl_write_client_hello+0x170>
 801a442:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 801a444:	b162      	cbz	r2, 801a460 <ssl_write_client_hello+0x170>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 801a446:	6823      	ldr	r3, [r4, #0]
 801a448:	2220      	movs	r2, #32
 801a44a:	699d      	ldr	r5, [r3, #24]
 801a44c:	69d8      	ldr	r0, [r3, #28]
 801a44e:	3114      	adds	r1, #20
 801a450:	47a8      	blx	r5
            if( ret != 0 )
 801a452:	4605      	mov	r5, r0
 801a454:	2800      	cmp	r0, #0
 801a456:	f47f af64 	bne.w	801a322 <ssl_write_client_hello+0x32>
            ssl->session_negotiate->id_len = n = 32;
 801a45a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a45c:	2320      	movs	r3, #32
 801a45e:	6113      	str	r3, [r2, #16]
    *p++ = (unsigned char) n;
 801a460:	9a04      	ldr	r2, [sp, #16]
 801a462:	f102 0627 	add.w	r6, r2, #39	; 0x27
 801a466:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 801a46a:	4631      	mov	r1, r6
    for( i = 0; i < n; i++ )
 801a46c:	2500      	movs	r5, #0
 801a46e:	429d      	cmp	r5, r3
 801a470:	f040 80e0 	bne.w	801a634 <ssl_write_client_hello+0x344>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 801a474:	4b66      	ldr	r3, [pc, #408]	; (801a610 <ssl_write_client_hello+0x320>)
 801a476:	4a5d      	ldr	r2, [pc, #372]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a478:	9501      	str	r5, [sp, #4]
 801a47a:	9300      	str	r3, [sp, #0]
 801a47c:	2103      	movs	r1, #3
 801a47e:	f240 3333 	movw	r3, #819	; 0x333
 801a482:	4620      	mov	r0, r4
 801a484:	f7f6 fb6e 	bl	8010b64 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 801a488:	4b62      	ldr	r3, [pc, #392]	; (801a614 <ssl_write_client_hello+0x324>)
 801a48a:	4a58      	ldr	r2, [pc, #352]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a48c:	9300      	str	r3, [sp, #0]
 801a48e:	e9cd 6501 	strd	r6, r5, [sp, #4]
 801a492:	f44f 734d 	mov.w	r3, #820	; 0x334
 801a496:	2103      	movs	r1, #3
 801a498:	4620      	mov	r0, r4
 801a49a:	f7f6 fbc3 	bl	8010c24 <mbedtls_debug_print_buf>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 801a49e:	6823      	ldr	r3, [r4, #0]
 801a4a0:	6962      	ldr	r2, [r4, #20]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 801a4a2:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801a630 <ssl_write_client_hello+0x340>
 801a4a6:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a4aa:	f8df b140 	ldr.w	fp, [pc, #320]	; 801a5ec <ssl_write_client_hello+0x2fc>
 801a4ae:	eb06 0805 	add.w	r8, r6, r5
    p += 2;
 801a4b2:	f108 0602 	add.w	r6, r8, #2
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a4b6:	3f04      	subs	r7, #4
    n = 0;
 801a4b8:	2500      	movs	r5, #0
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a4ba:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801a4be:	f106 0902 	add.w	r9, r6, #2
 801a4c2:	2800      	cmp	r0, #0
 801a4c4:	f040 80bd 	bne.w	801a642 <ssl_write_client_hello+0x352>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a4c8:	68a3      	ldr	r3, [r4, #8]
 801a4ca:	b923      	cbnz	r3, 801a4d6 <ssl_write_client_hello+0x1e6>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 801a4cc:	7033      	strb	r3, [r6, #0]
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 801a4ce:	23ff      	movs	r3, #255	; 0xff
 801a4d0:	7073      	strb	r3, [r6, #1]
        n++;
 801a4d2:	3501      	adds	r5, #1
 801a4d4:	464e      	mov	r6, r9
    *q++ = (unsigned char)( n >> 7 );
 801a4d6:	09eb      	lsrs	r3, r5, #7
 801a4d8:	f888 3000 	strb.w	r3, [r8]
    *q++ = (unsigned char)( n << 1 );
 801a4dc:	006b      	lsls	r3, r5, #1
 801a4de:	f888 3001 	strb.w	r3, [r8, #1]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites", n ) );
 801a4e2:	4b4d      	ldr	r3, [pc, #308]	; (801a618 <ssl_write_client_hello+0x328>)
 801a4e4:	4a41      	ldr	r2, [pc, #260]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a4e6:	9501      	str	r5, [sp, #4]
 801a4e8:	9300      	str	r3, [sp, #0]
 801a4ea:	2103      	movs	r1, #3
 801a4ec:	f44f 7366 	mov.w	r3, #920	; 0x398
 801a4f0:	4620      	mov	r0, r4
 801a4f2:	f7f6 fb37 	bl	8010b64 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 801a4f6:	2501      	movs	r5, #1
 801a4f8:	4b48      	ldr	r3, [pc, #288]	; (801a61c <ssl_write_client_hello+0x32c>)
 801a4fa:	4a3c      	ldr	r2, [pc, #240]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a4fc:	9300      	str	r3, [sp, #0]
 801a4fe:	2103      	movs	r1, #3
 801a500:	f240 33b7 	movw	r3, #951	; 0x3b7
 801a504:	4620      	mov	r0, r4
 801a506:	9501      	str	r5, [sp, #4]
 801a508:	f7f6 fb2c 	bl	8010b64 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 801a50c:	f04f 0900 	mov.w	r9, #0
 801a510:	4b43      	ldr	r3, [pc, #268]	; (801a620 <ssl_write_client_hello+0x330>)
 801a512:	9300      	str	r3, [sp, #0]
        *p++ = 1;
 801a514:	4637      	mov	r7, r6
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 801a516:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 801a51a:	4a34      	ldr	r2, [pc, #208]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a51c:	f8cd 9004 	str.w	r9, [sp, #4]
 801a520:	2103      	movs	r1, #3
 801a522:	4620      	mov	r0, r4
 801a524:	f7f6 fb1e 	bl	8010b64 <mbedtls_debug_print_msg>
        *p++ = 1;
 801a528:	f807 5b02 	strb.w	r5, [r7], #2
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 801a52c:	1d33      	adds	r3, r6, #4
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 801a52e:	f886 9001 	strb.w	r9, [r6, #1]
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 801a532:	9305      	str	r3, [sp, #20]
    if( ssl->hostname == NULL )
 801a534:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801a538:	2b00      	cmp	r3, #0
 801a53a:	f000 80c2 	beq.w	801a6c2 <ssl_write_client_hello+0x3d2>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a53e:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
 801a542:	9301      	str	r3, [sp, #4]
 801a544:	4b37      	ldr	r3, [pc, #220]	; (801a624 <ssl_write_client_hello+0x334>)
 801a546:	9300      	str	r3, [sp, #0]
 801a548:	4a28      	ldr	r2, [pc, #160]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a54a:	2347      	movs	r3, #71	; 0x47
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a54c:	f505 559c 	add.w	r5, r5, #4992	; 0x1380
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
 801a550:	2103      	movs	r1, #3
 801a552:	4620      	mov	r0, r4
 801a554:	f7f6 fb06 	bl	8010b64 <mbedtls_debug_print_msg>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a558:	3508      	adds	r5, #8
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 801a55a:	1d33      	adds	r3, r6, #4
 801a55c:	42ab      	cmp	r3, r5
 801a55e:	d80a      	bhi.n	801a576 <ssl_write_client_hello+0x286>
    hostname_len = strlen( ssl->hostname );
 801a560:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801a564:	f7e5 fe3e 	bl	80001e4 <strlen>
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 801a568:	1d33      	adds	r3, r6, #4
 801a56a:	f100 0809 	add.w	r8, r0, #9
 801a56e:	1aed      	subs	r5, r5, r3
 801a570:	4545      	cmp	r5, r8
 801a572:	f080 808a 	bcs.w	801a68a <ssl_write_client_hello+0x39a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a576:	4b2c      	ldr	r3, [pc, #176]	; (801a628 <ssl_write_client_hello+0x338>)
 801a578:	9300      	str	r3, [sp, #0]
 801a57a:	4a1c      	ldr	r2, [pc, #112]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a57c:	234e      	movs	r3, #78	; 0x4e
 801a57e:	2101      	movs	r1, #1
 801a580:	4620      	mov	r0, r4
 801a582:	f7f6 faef 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801a586:	f04f 0800 	mov.w	r8, #0
    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801a58a:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801a58e:	f1ba 0f01 	cmp.w	sl, #1
 801a592:	d121      	bne.n	801a5d8 <ssl_write_client_hello+0x2e8>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a594:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a598:	4a14      	ldr	r2, [pc, #80]	; (801a5ec <ssl_write_client_hello+0x2fc>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a59a:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
 801a59e:	f108 0502 	add.w	r5, r8, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a5a2:	4b22      	ldr	r3, [pc, #136]	; (801a62c <ssl_write_client_hello+0x33c>)
 801a5a4:	9300      	str	r3, [sp, #0]
    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
 801a5a6:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a5a8:	f109 0908 	add.w	r9, r9, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a5ac:	2384      	movs	r3, #132	; 0x84
 801a5ae:	2103      	movs	r1, #3
 801a5b0:	4620      	mov	r0, r4
 801a5b2:	f7f6 fad7 	bl	8010b64 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 5 + ssl->verify_data_len )
 801a5b6:	454d      	cmp	r5, r9
 801a5b8:	d806      	bhi.n	801a5c8 <ssl_write_client_hello+0x2d8>
 801a5ba:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a5be:	eba9 0905 	sub.w	r9, r9, r5
 801a5c2:	3305      	adds	r3, #5
 801a5c4:	4599      	cmp	r9, r3
 801a5c6:	d27e      	bcs.n	801a6c6 <ssl_write_client_hello+0x3d6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a5c8:	4b17      	ldr	r3, [pc, #92]	; (801a628 <ssl_write_client_hello+0x338>)
 801a5ca:	9300      	str	r3, [sp, #0]
 801a5cc:	4a07      	ldr	r2, [pc, #28]	; (801a5ec <ssl_write_client_hello+0x2fc>)
 801a5ce:	2388      	movs	r3, #136	; 0x88
 801a5d0:	2101      	movs	r1, #1
 801a5d2:	4620      	mov	r0, r4
 801a5d4:	f7f6 fac6 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801a5d8:	2500      	movs	r5, #0
 801a5da:	e08b      	b.n	801a6f4 <ssl_write_client_hello+0x404>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a5dc:	b90a      	cbnz	r2, 801a5e2 <ssl_write_client_hello+0x2f2>
        n = 0;
 801a5de:	4613      	mov	r3, r2
 801a5e0:	e72d      	b.n	801a43e <ssl_write_client_hello+0x14e>
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	e73c      	b.n	801a460 <ssl_write_client_hello+0x170>
 801a5e6:	bf00      	nop
 801a5e8:	08030fce 	.word	0x08030fce
 801a5ec:	08030f75 	.word	0x08030f75
 801a5f0:	08030fe4 	.word	0x08030fe4
 801a5f4:	ffff8c00 	.word	0xffff8c00
 801a5f8:	08030ff4 	.word	0x08030ff4
 801a5fc:	ffff8f00 	.word	0xffff8f00
 801a600:	0803104a 	.word	0x0803104a
 801a604:	0803106d 	.word	0x0803106d
 801a608:	0803108d 	.word	0x0803108d
 801a60c:	080310a1 	.word	0x080310a1
 801a610:	080310bc 	.word	0x080310bc
 801a614:	080310de 	.word	0x080310de
 801a618:	0803111b 	.word	0x0803111b
 801a61c:	0803113d 	.word	0x0803113d
 801a620:	0803115d 	.word	0x0803115d
 801a624:	0803117d 	.word	0x0803117d
 801a628:	080311ac 	.word	0x080311ac
 801a62c:	080311bd 	.word	0x080311bd
 801a630:	080310f7 	.word	0x080310f7
        *p++ = ssl->session_negotiate->id[i];
 801a634:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a636:	442a      	add	r2, r5
    for( i = 0; i < n; i++ )
 801a638:	3501      	adds	r5, #1
        *p++ = ssl->session_negotiate->id[i];
 801a63a:	7d12      	ldrb	r2, [r2, #20]
 801a63c:	f801 2b01 	strb.w	r2, [r1], #1
    for( i = 0; i < n; i++ )
 801a640:	e715      	b.n	801a46e <ssl_write_client_hello+0x17e>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 801a642:	f7ff fe01 	bl	801a248 <mbedtls_ssl_ciphersuite_from_id>
        if( ciphersuite_info == NULL )
 801a646:	2800      	cmp	r0, #0
 801a648:	f43f af37 	beq.w	801a4ba <ssl_write_client_hello+0x1ca>
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 801a64c:	6823      	ldr	r3, [r4, #0]
 801a64e:	6902      	ldr	r2, [r0, #16]
 801a650:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 801a654:	428a      	cmp	r2, r1
 801a656:	f73f af30 	bgt.w	801a4ba <ssl_write_client_hello+0x1ca>
            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )
 801a65a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 801a65e:	6982      	ldr	r2, [r0, #24]
 801a660:	429a      	cmp	r2, r3
 801a662:	f6ff af2a 	blt.w	801a4ba <ssl_write_client_hello+0x1ca>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 801a666:	683b      	ldr	r3, [r7, #0]
 801a668:	465a      	mov	r2, fp
 801a66a:	e9cd a300 	strd	sl, r3, [sp]
 801a66e:	2103      	movs	r1, #3
 801a670:	f240 3376 	movw	r3, #886	; 0x376
 801a674:	4620      	mov	r0, r4
 801a676:	f7f6 fa75 	bl	8010b64 <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 801a67a:	683b      	ldr	r3, [r7, #0]
 801a67c:	121b      	asrs	r3, r3, #8
 801a67e:	7033      	strb	r3, [r6, #0]
        *p++ = (unsigned char)( ciphersuites[i]      );
 801a680:	683b      	ldr	r3, [r7, #0]
 801a682:	7073      	strb	r3, [r6, #1]
        n++;
 801a684:	3501      	adds	r5, #1
        *p++ = (unsigned char)( ciphersuites[i]      );
 801a686:	464e      	mov	r6, r9
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a688:	e717      	b.n	801a4ba <ssl_write_client_hello+0x1ca>
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 801a68a:	1d43      	adds	r3, r0, #5
 801a68c:	0a1b      	lsrs	r3, r3, #8
 801a68e:	71b3      	strb	r3, [r6, #6]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 801a690:	b2c3      	uxtb	r3, r0
 801a692:	1d5a      	adds	r2, r3, #5
 801a694:	71f2      	strb	r2, [r6, #7]
    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 801a696:	1cc2      	adds	r2, r0, #3
 801a698:	0a12      	lsrs	r2, r2, #8
 801a69a:	7232      	strb	r2, [r6, #8]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 801a69c:	1cda      	adds	r2, r3, #3
 801a69e:	7272      	strb	r2, [r6, #9]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 801a6a0:	0a02      	lsrs	r2, r0, #8
 801a6a2:	72f2      	strb	r2, [r6, #11]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 801a6a4:	f886 9004 	strb.w	r9, [r6, #4]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 801a6a8:	f886 9005 	strb.w	r9, [r6, #5]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 801a6ac:	f886 900a 	strb.w	r9, [r6, #10]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 801a6b0:	7333      	strb	r3, [r6, #12]
    memcpy( p, ssl->hostname, hostname_len );
 801a6b2:	4602      	mov	r2, r0
 801a6b4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 801a6b8:	f106 000d 	add.w	r0, r6, #13
 801a6bc:	f007 fee0 	bl	8022480 <memcpy>
    *olen = hostname_len + 9;
 801a6c0:	e763      	b.n	801a58a <ssl_write_client_hello+0x29a>
    *olen = 0;
 801a6c2:	4698      	mov	r8, r3
 801a6c4:	e761      	b.n	801a58a <ssl_write_client_hello+0x29a>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );
 801a6c6:	23ff      	movs	r3, #255	; 0xff
 801a6c8:	702b      	strb	r3, [r5, #0]
    *p++ = 0x00;
 801a6ca:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );
 801a6cc:	f885 a001 	strb.w	sl, [r5, #1]
    *p++ = 0x00;
 801a6d0:	70ab      	strb	r3, [r5, #2]
    *p++ = ( ssl->verify_data_len + 1 ) & 0xFF;
 801a6d2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a6d6:	3301      	adds	r3, #1
 801a6d8:	70eb      	strb	r3, [r5, #3]
    *p++ = ssl->verify_data_len & 0xFF;
 801a6da:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a6de:	712b      	strb	r3, [r5, #4]
    memcpy( p, ssl->own_verify_data, ssl->verify_data_len );
 801a6e0:	1d68      	adds	r0, r5, #5
 801a6e2:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 801a6e6:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 801a6ea:	f007 fec9 	bl	8022480 <memcpy>
    *olen = 5 + ssl->verify_data_len;
 801a6ee:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 801a6f2:	3505      	adds	r5, #5
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 801a6f4:	6823      	ldr	r3, [r4, #0]
 801a6f6:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 801a6fa:	2903      	cmp	r1, #3
    ext_len += olen;
 801a6fc:	44a8      	add	r8, r5
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 801a6fe:	d16f      	bne.n	801a7e0 <ssl_write_client_hello+0x4f0>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 801a700:	4b42      	ldr	r3, [pc, #264]	; (801a80c <ssl_write_client_hello+0x51c>)
 801a702:	4a43      	ldr	r2, [pc, #268]	; (801a810 <ssl_write_client_hello+0x520>)
 801a704:	9300      	str	r3, [sp, #0]
 801a706:	4620      	mov	r0, r4
 801a708:	23b2      	movs	r3, #178	; 0xb2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a70a:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 801a70e:	f7f6 fa29 	bl	8010b64 <mbedtls_debug_print_msg>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a712:	6823      	ldr	r3, [r4, #0]
 801a714:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    size_t sig_alg_len = 0;
 801a716:	2200      	movs	r2, #0
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a718:	5881      	ldr	r1, [r0, r2]
 801a71a:	2900      	cmp	r1, #0
 801a71c:	d156      	bne.n	801a7cc <ssl_write_client_hello+0x4dc>
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 801a71e:	f108 0902 	add.w	r9, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a722:	f505 539c 	add.w	r3, r5, #4992	; 0x1380
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 801a726:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a728:	3308      	adds	r3, #8
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 801a72a:	4599      	cmp	r9, r3
 801a72c:	d850      	bhi.n	801a7d0 <ssl_write_client_hello+0x4e0>
 801a72e:	eba3 0309 	sub.w	r3, r3, r9
 801a732:	3206      	adds	r2, #6
 801a734:	4293      	cmp	r3, r2
 801a736:	d34b      	bcc.n	801a7d0 <ssl_write_client_hello+0x4e0>
 801a738:	f1a0 0b04 	sub.w	fp, r0, #4
    unsigned char *sig_alg_list = buf + 6;
 801a73c:	f109 0a06 	add.w	sl, r9, #6
    sig_alg_len = 0;
 801a740:	460d      	mov	r5, r1
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a742:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 801a746:	1caa      	adds	r2, r5, #2
 801a748:	f10a 0a04 	add.w	sl, sl, #4
 801a74c:	2800      	cmp	r0, #0
 801a74e:	d14a      	bne.n	801a7e6 <ssl_write_client_hello+0x4f6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 801a750:	230d      	movs	r3, #13
 801a752:	f889 3001 	strb.w	r3, [r9, #1]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 801a756:	0a12      	lsrs	r2, r2, #8
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 801a758:	b2eb      	uxtb	r3, r5
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 801a75a:	f889 2002 	strb.w	r2, [r9, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 801a75e:	1c9a      	adds	r2, r3, #2
 801a760:	f889 2003 	strb.w	r2, [r9, #3]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 801a764:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 801a766:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 801a76a:	f889 2004 	strb.w	r2, [r9, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 801a76e:	f889 3005 	strb.w	r3, [r9, #5]
    *olen = 6 + sig_alg_len;
 801a772:	f105 0906 	add.w	r9, r5, #6
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );
 801a776:	4b27      	ldr	r3, [pc, #156]	; (801a814 <ssl_write_client_hello+0x524>)
 801a778:	9300      	str	r3, [sp, #0]
 801a77a:	4a25      	ldr	r2, [pc, #148]	; (801a810 <ssl_write_client_hello+0x520>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a77c:	f8d4 b0a0 	ldr.w	fp, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );
 801a780:	f240 1307 	movw	r3, #263	; 0x107
 801a784:	2103      	movs	r1, #3
 801a786:	4620      	mov	r0, r4
 801a788:	f7f6 f9ec 	bl	8010b64 <mbedtls_debug_print_msg>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a78c:	6823      	ldr	r3, [r4, #0]
 801a78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    ext_len += olen;
 801a790:	44c8      	add	r8, r9
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a792:	f103 3aff 	add.w	sl, r3, #4294967295
    size_t elliptic_curve_len = 0;
 801a796:	f04f 0900 	mov.w	r9, #0
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a79a:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 801a79e:	2800      	cmp	r0, #0
 801a7a0:	d13c      	bne.n	801a81c <ssl_write_client_hello+0x52c>
    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 801a7a2:	f108 0a02 	add.w	sl, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a7a6:	f50b 5b9c 	add.w	fp, fp, #4992	; 0x1380
    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 801a7aa:	44ba      	add	sl, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a7ac:	f10b 0b08 	add.w	fp, fp, #8
    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
 801a7b0:	45da      	cmp	sl, fp
 801a7b2:	d806      	bhi.n	801a7c2 <ssl_write_client_hello+0x4d2>
 801a7b4:	ebab 0b0a 	sub.w	fp, fp, sl
 801a7b8:	f109 0906 	add.w	r9, r9, #6
 801a7bc:	45cb      	cmp	fp, r9
 801a7be:	f080 8178 	bcs.w	801aab2 <ssl_write_client_hello+0x7c2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a7c2:	4b15      	ldr	r3, [pc, #84]	; (801a818 <ssl_write_client_hello+0x528>)
 801a7c4:	9300      	str	r3, [sp, #0]
 801a7c6:	f240 131d 	movw	r3, #285	; 0x11d
 801a7ca:	e030      	b.n	801a82e <ssl_write_client_hello+0x53e>
        sig_alg_len += 2;
 801a7cc:	3204      	adds	r2, #4
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a7ce:	e7a3      	b.n	801a718 <ssl_write_client_hello+0x428>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a7d0:	4b11      	ldr	r3, [pc, #68]	; (801a818 <ssl_write_client_hello+0x528>)
 801a7d2:	9300      	str	r3, [sp, #0]
 801a7d4:	4a0e      	ldr	r2, [pc, #56]	; (801a810 <ssl_write_client_hello+0x520>)
 801a7d6:	23c0      	movs	r3, #192	; 0xc0
 801a7d8:	2101      	movs	r1, #1
 801a7da:	4620      	mov	r0, r4
 801a7dc:	f7f6 f9c2 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801a7e0:	f04f 0900 	mov.w	r9, #0
 801a7e4:	e7c7      	b.n	801a776 <ssl_write_client_hello+0x486>
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a7e6:	f004 fb7c 	bl	801eee2 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
 801a7ea:	f04f 0303 	mov.w	r3, #3
 801a7ee:	f80a 3c03 	strb.w	r3, [sl, #-3]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a7f2:	f80a 0c04 	strb.w	r0, [sl, #-4]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a7f6:	f8db 0000 	ldr.w	r0, [fp]
 801a7fa:	f004 fb72 	bl	801eee2 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801a7fe:	2301      	movs	r3, #1
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a800:	f80a 0c02 	strb.w	r0, [sl, #-2]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801a804:	3504      	adds	r5, #4
 801a806:	f80a 3c01 	strb.w	r3, [sl, #-1]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a80a:	e79a      	b.n	801a742 <ssl_write_client_hello+0x452>
 801a80c:	080311ea 	.word	0x080311ea
 801a810:	08030f75 	.word	0x08030f75
 801a814:	0803121e 	.word	0x0803121e
 801a818:	080311ac 	.word	0x080311ac
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 801a81c:	f7f7 fc38 	bl	8012090 <mbedtls_ecp_curve_info_from_grp_id>
        if( info == NULL )
 801a820:	2800      	cmp	r0, #0
 801a822:	f040 8143 	bne.w	801aaac <ssl_write_client_hello+0x7bc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid curve in ssl configuration" ) );
 801a826:	4bca      	ldr	r3, [pc, #808]	; (801ab50 <ssl_write_client_hello+0x860>)
 801a828:	9300      	str	r3, [sp, #0]
 801a82a:	f44f 738a 	mov.w	r3, #276	; 0x114
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a82e:	4ac9      	ldr	r2, [pc, #804]	; (801ab54 <ssl_write_client_hello+0x864>)
 801a830:	2101      	movs	r1, #1
 801a832:	4620      	mov	r0, r4
 801a834:	f7f6 f996 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801a838:	2200      	movs	r2, #0
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a83a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ext_len += olen;
 801a83e:	eb08 0902 	add.w	r9, r8, r2
    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 801a842:	f109 0502 	add.w	r5, r9, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a846:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 801a84a:	4bc3      	ldr	r3, [pc, #780]	; (801ab58 <ssl_write_client_hello+0x868>)
 801a84c:	9300      	str	r3, [sp, #0]
 801a84e:	4ac1      	ldr	r2, [pc, #772]	; (801ab54 <ssl_write_client_hello+0x864>)
    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 801a850:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a852:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 801a856:	f44f 73a4 	mov.w	r3, #328	; 0x148
 801a85a:	2103      	movs	r1, #3
 801a85c:	4620      	mov	r0, r4
 801a85e:	f7f6 f981 	bl	8010b64 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 6 )
 801a862:	4545      	cmp	r5, r8
 801a864:	d804      	bhi.n	801a870 <ssl_write_client_hello+0x580>
 801a866:	eba8 0305 	sub.w	r3, r8, r5
 801a86a:	2b05      	cmp	r3, #5
 801a86c:	f200 8153 	bhi.w	801ab16 <ssl_write_client_hello+0x826>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a870:	4bba      	ldr	r3, [pc, #744]	; (801ab5c <ssl_write_client_hello+0x86c>)
 801a872:	9300      	str	r3, [sp, #0]
 801a874:	4ab7      	ldr	r2, [pc, #732]	; (801ab54 <ssl_write_client_hello+0x864>)
 801a876:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 801a87a:	2101      	movs	r1, #1
 801a87c:	4620      	mov	r0, r4
 801a87e:	f7f6 f971 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801a882:	f04f 0a00 	mov.w	sl, #0
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 801a886:	6823      	ldr	r3, [r4, #0]
 801a888:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 801a88c:	f418 78e0 	ands.w	r8, r8, #448	; 0x1c0
    ext_len += olen;
 801a890:	44ca      	add	sl, r9
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 801a892:	d023      	beq.n	801a8dc <ssl_write_client_hello+0x5ec>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a894:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a898:	4aae      	ldr	r2, [pc, #696]	; (801ab54 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a89a:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 801a89e:	f10a 0502 	add.w	r5, sl, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a8a2:	4baf      	ldr	r3, [pc, #700]	; (801ab60 <ssl_write_client_hello+0x870>)
 801a8a4:	9300      	str	r3, [sp, #0]
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 801a8a6:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a8a8:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a8ac:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 801a8b0:	2103      	movs	r1, #3
 801a8b2:	4620      	mov	r0, r4
 801a8b4:	f7f6 f956 	bl	8010b64 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 5 )
 801a8b8:	4545      	cmp	r5, r8
 801a8ba:	d804      	bhi.n	801a8c6 <ssl_write_client_hello+0x5d6>
 801a8bc:	eba8 0305 	sub.w	r3, r8, r5
 801a8c0:	2b04      	cmp	r3, #4
 801a8c2:	f200 8135 	bhi.w	801ab30 <ssl_write_client_hello+0x840>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a8c6:	4ba5      	ldr	r3, [pc, #660]	; (801ab5c <ssl_write_client_hello+0x86c>)
 801a8c8:	9300      	str	r3, [sp, #0]
 801a8ca:	4aa2      	ldr	r2, [pc, #648]	; (801ab54 <ssl_write_client_hello+0x864>)
 801a8cc:	f44f 73df 	mov.w	r3, #446	; 0x1be
 801a8d0:	2101      	movs	r1, #1
 801a8d2:	4620      	mov	r0, r4
 801a8d4:	f7f6 f946 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801a8d8:	f04f 0800 	mov.w	r8, #0
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )
 801a8dc:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a8de:	44c2      	add	sl, r8
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )
 801a8e0:	f893 806d 	ldrb.w	r8, [r3, #109]	; 0x6d
 801a8e4:	f018 0808 	ands.w	r8, r8, #8
 801a8e8:	d023      	beq.n	801a932 <ssl_write_client_hello+0x642>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a8ea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a8ee:	4a99      	ldr	r2, [pc, #612]	; (801ab54 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a8f0:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );
 801a8f4:	f10a 0502 	add.w	r5, sl, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a8f8:	4b9a      	ldr	r3, [pc, #616]	; (801ab64 <ssl_write_client_hello+0x874>)
 801a8fa:	9300      	str	r3, [sp, #0]
    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );
 801a8fc:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a8fe:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a902:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 801a906:	2103      	movs	r1, #3
 801a908:	4620      	mov	r0, r4
 801a90a:	f7f6 f92b 	bl	8010b64 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 )
 801a90e:	4545      	cmp	r5, r8
 801a910:	d804      	bhi.n	801a91c <ssl_write_client_hello+0x62c>
 801a912:	eba8 0305 	sub.w	r3, r8, r5
 801a916:	2b03      	cmp	r3, #3
 801a918:	f200 8130 	bhi.w	801ab7c <ssl_write_client_hello+0x88c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a91c:	4b8f      	ldr	r3, [pc, #572]	; (801ab5c <ssl_write_client_hello+0x86c>)
 801a91e:	9300      	str	r3, [sp, #0]
 801a920:	4a8c      	ldr	r2, [pc, #560]	; (801ab54 <ssl_write_client_hello+0x864>)
 801a922:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a926:	2101      	movs	r1, #1
 801a928:	4620      	mov	r0, r4
 801a92a:	f7f6 f91b 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801a92e:	f04f 0800 	mov.w	r8, #0
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801a932:	6823      	ldr	r3, [r4, #0]
 801a934:	f893 506d 	ldrb.w	r5, [r3, #109]	; 0x6d
 801a938:	f015 0502 	ands.w	r5, r5, #2
    ext_len += olen;
 801a93c:	44d0      	add	r8, sl
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801a93e:	d025      	beq.n	801a98c <ssl_write_client_hello+0x69c>
 801a940:	f893 5069 	ldrb.w	r5, [r3, #105]	; 0x69
 801a944:	b315      	cbz	r5, 801a98c <ssl_write_client_hello+0x69c>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a946:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a94a:	4a82      	ldr	r2, [pc, #520]	; (801ab54 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a94c:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );
 801a950:	f108 0502 	add.w	r5, r8, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a954:	4b84      	ldr	r3, [pc, #528]	; (801ab68 <ssl_write_client_hello+0x878>)
 801a956:	9300      	str	r3, [sp, #0]
    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );
 801a958:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a95a:	f109 0908 	add.w	r9, r9, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a95e:	f240 231f 	movw	r3, #543	; 0x21f
 801a962:	2103      	movs	r1, #3
 801a964:	4620      	mov	r0, r4
 801a966:	f7f6 f8fd 	bl	8010b64 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 )
 801a96a:	454d      	cmp	r5, r9
 801a96c:	d804      	bhi.n	801a978 <ssl_write_client_hello+0x688>
 801a96e:	eba9 0305 	sub.w	r3, r9, r5
 801a972:	2b03      	cmp	r3, #3
 801a974:	f200 810b 	bhi.w	801ab8e <ssl_write_client_hello+0x89e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a978:	4b78      	ldr	r3, [pc, #480]	; (801ab5c <ssl_write_client_hello+0x86c>)
 801a97a:	9300      	str	r3, [sp, #0]
 801a97c:	4a75      	ldr	r2, [pc, #468]	; (801ab54 <ssl_write_client_hello+0x864>)
 801a97e:	f44f 7309 	mov.w	r3, #548	; 0x224
 801a982:	2101      	movs	r1, #1
 801a984:	4620      	mov	r0, r4
 801a986:	f7f6 f8ed 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801a98a:	2500      	movs	r5, #0
    if( ssl->conf->alpn_list == NULL )
 801a98c:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a98e:	44a8      	add	r8, r5
    if( ssl->conf->alpn_list == NULL )
 801a990:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801a992:	b375      	cbz	r5, 801a9f2 <ssl_write_client_hello+0x702>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding alpn extension" ) );
 801a994:	4b75      	ldr	r3, [pc, #468]	; (801ab6c <ssl_write_client_hello+0x87c>)
 801a996:	9300      	str	r3, [sp, #0]
 801a998:	4a6e      	ldr	r2, [pc, #440]	; (801ab54 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a99a:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding alpn extension" ) );
 801a99e:	f240 236e 	movw	r3, #622	; 0x26e
 801a9a2:	2103      	movs	r1, #3
 801a9a4:	4620      	mov	r0, r4
 801a9a6:	f7f6 f8dd 	bl	8010b64 <mbedtls_debug_print_msg>
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a9aa:	6823      	ldr	r3, [r4, #0]
 801a9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    size_t alpnlen = 0;
 801a9ae:	f04f 0a00 	mov.w	sl, #0
 801a9b2:	f1a3 0904 	sub.w	r9, r3, #4
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a9b6:	f859 0f04 	ldr.w	r0, [r9, #4]!
 801a9ba:	2800      	cmp	r0, #0
 801a9bc:	f040 80ef 	bne.w	801ab9e <ssl_write_client_hello+0x8ae>
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
 801a9c0:	f108 0902 	add.w	r9, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a9c4:	f505 539c 	add.w	r3, r5, #4992	; 0x1380
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
 801a9c8:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a9ca:	3308      	adds	r3, #8
    if( end < p || (size_t)( end - p ) < 6 + alpnlen )
 801a9cc:	4599      	cmp	r9, r3
 801a9ce:	d806      	bhi.n	801a9de <ssl_write_client_hello+0x6ee>
 801a9d0:	eba3 0309 	sub.w	r3, r3, r9
 801a9d4:	f10a 0a06 	add.w	sl, sl, #6
 801a9d8:	4553      	cmp	r3, sl
 801a9da:	f080 80e6 	bcs.w	801abaa <ssl_write_client_hello+0x8ba>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a9de:	4b5f      	ldr	r3, [pc, #380]	; (801ab5c <ssl_write_client_hello+0x86c>)
 801a9e0:	9300      	str	r3, [sp, #0]
 801a9e2:	4a5c      	ldr	r2, [pc, #368]	; (801ab54 <ssl_write_client_hello+0x864>)
 801a9e4:	f240 2375 	movw	r3, #629	; 0x275
 801a9e8:	2101      	movs	r1, #1
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	f7f6 f8ba 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801a9f0:	2500      	movs	r5, #0
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 801a9f2:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a9f4:	4445      	add	r5, r8
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 801a9f6:	f893 806d 	ldrb.w	r8, [r3, #109]	; 0x6d
 801a9fa:	f018 0810 	ands.w	r8, r8, #16
 801a9fe:	d028      	beq.n	801aa52 <ssl_write_client_hello+0x762>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801aa00:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801aa04:	4a53      	ldr	r2, [pc, #332]	; (801ab54 <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801aa06:	f503 5a9c 	add.w	sl, r3, #4992	; 0x1380
    size_t tlen = ssl->session_negotiate->ticket_len;
 801aa0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 801aa0c:	f105 0902 	add.w	r9, r5, #2
    size_t tlen = ssl->session_negotiate->ticket_len;
 801aa10:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801aa14:	4b56      	ldr	r3, [pc, #344]	; (801ab70 <ssl_write_client_hello+0x880>)
 801aa16:	9300      	str	r3, [sp, #0]
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 801aa18:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801aa1a:	f10a 0a08 	add.w	sl, sl, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801aa1e:	f240 2341 	movw	r3, #577	; 0x241
 801aa22:	2103      	movs	r1, #3
 801aa24:	4620      	mov	r0, r4
 801aa26:	f7f6 f89d 	bl	8010b64 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 + tlen )
 801aa2a:	45d1      	cmp	r9, sl
 801aa2c:	d806      	bhi.n	801aa3c <ssl_write_client_hello+0x74c>
 801aa2e:	f10b 0804 	add.w	r8, fp, #4
 801aa32:	ebaa 0a09 	sub.w	sl, sl, r9
 801aa36:	45c2      	cmp	sl, r8
 801aa38:	f080 80e8 	bcs.w	801ac0c <ssl_write_client_hello+0x91c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801aa3c:	4b47      	ldr	r3, [pc, #284]	; (801ab5c <ssl_write_client_hello+0x86c>)
 801aa3e:	9300      	str	r3, [sp, #0]
 801aa40:	4a44      	ldr	r2, [pc, #272]	; (801ab54 <ssl_write_client_hello+0x864>)
 801aa42:	f240 2345 	movw	r3, #581	; 0x245
 801aa46:	2101      	movs	r1, #1
 801aa48:	4620      	mov	r0, r4
 801aa4a:	f7f6 f88b 	bl	8010b64 <mbedtls_debug_print_msg>
    *olen = 0;
 801aa4e:	f04f 0800 	mov.w	r8, #0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 801aa52:	4b48      	ldr	r3, [pc, #288]	; (801ab74 <ssl_write_client_hello+0x884>)
 801aa54:	9300      	str	r3, [sp, #0]
    ext_len += olen;
 801aa56:	4445      	add	r5, r8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 801aa58:	4a3e      	ldr	r2, [pc, #248]	; (801ab54 <ssl_write_client_hello+0x864>)
 801aa5a:	9501      	str	r5, [sp, #4]
 801aa5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aa60:	2103      	movs	r1, #3
 801aa62:	4620      	mov	r0, r4
 801aa64:	f7f6 f87e 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 801aa68:	b12d      	cbz	r5, 801aa76 <ssl_write_client_hello+0x786>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 801aa6a:	0a2b      	lsrs	r3, r5, #8
 801aa6c:	70b3      	strb	r3, [r6, #2]
        p += ext_len;
 801aa6e:	9b05      	ldr	r3, [sp, #20]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 801aa70:	70f5      	strb	r5, [r6, #3]
        p += ext_len;
 801aa72:	442b      	add	r3, r5
 801aa74:	461f      	mov	r7, r3
    ssl->out_msglen  = p - buf;
 801aa76:	9b04      	ldr	r3, [sp, #16]
 801aa78:	1aff      	subs	r7, r7, r3
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801aa7a:	2316      	movs	r3, #22
 801aa7c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 801aa80:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ssl->out_msglen  = p - buf;
 801aa84:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 801aa88:	2601      	movs	r6, #1
 801aa8a:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 801aa8c:	6863      	ldr	r3, [r4, #4]
 801aa8e:	4433      	add	r3, r6
 801aa90:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801aa92:	4620      	mov	r0, r4
 801aa94:	f002 f9c4 	bl	801ce20 <mbedtls_ssl_write_record>
 801aa98:	4605      	mov	r5, r0
 801aa9a:	2800      	cmp	r0, #0
 801aa9c:	f000 80de 	beq.w	801ac5c <ssl_write_client_hello+0x96c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801aaa0:	4b35      	ldr	r3, [pc, #212]	; (801ab78 <ssl_write_client_hello+0x888>)
 801aaa2:	9300      	str	r3, [sp, #0]
 801aaa4:	9001      	str	r0, [sp, #4]
 801aaa6:	f240 4317 	movw	r3, #1047	; 0x417
 801aaaa:	e497      	b.n	801a3dc <ssl_write_client_hello+0xec>
        elliptic_curve_len += 2;
 801aaac:	f109 0902 	add.w	r9, r9, #2
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801aab0:	e673      	b.n	801a79a <ssl_write_client_hello+0x4aa>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801aab2:	6823      	ldr	r3, [r4, #0]
 801aab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aab6:	f06f 0505 	mvn.w	r5, #5
 801aaba:	f103 39ff 	add.w	r9, r3, #4294967295
    unsigned char *elliptic_curve_list = p + 6;
 801aabe:	f10a 0b06 	add.w	fp, sl, #6
 801aac2:	eba5 050a 	sub.w	r5, r5, sl
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801aac6:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 801aaca:	eb05 020b 	add.w	r2, r5, fp
 801aace:	f10b 0b02 	add.w	fp, fp, #2
 801aad2:	b9b0      	cbnz	r0, 801ab02 <ssl_write_client_hello+0x812>
    if( elliptic_curve_len == 0 )
 801aad4:	2a00      	cmp	r2, #0
 801aad6:	f43f aeb0 	beq.w	801a83a <ssl_write_client_hello+0x54a>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
 801aada:	230a      	movs	r3, #10
 801aadc:	f88a 3001 	strb.w	r3, [sl, #1]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
 801aae0:	1c93      	adds	r3, r2, #2
 801aae2:	0a1b      	lsrs	r3, r3, #8
 801aae4:	f88a 3002 	strb.w	r3, [sl, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
 801aae8:	b2d3      	uxtb	r3, r2
 801aaea:	1c99      	adds	r1, r3, #2
 801aaec:	f88a 1003 	strb.w	r1, [sl, #3]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 801aaf0:	0a11      	lsrs	r1, r2, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
 801aaf2:	f88a 0000 	strb.w	r0, [sl]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 801aaf6:	f88a 1004 	strb.w	r1, [sl, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
 801aafa:	f88a 3005 	strb.w	r3, [sl, #5]
    *olen = 6 + elliptic_curve_len;
 801aafe:	3206      	adds	r2, #6
 801ab00:	e69b      	b.n	801a83a <ssl_write_client_hello+0x54a>
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 801ab02:	f7f7 fac5 	bl	8012090 <mbedtls_ecp_curve_info_from_grp_id>
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
 801ab06:	8843      	ldrh	r3, [r0, #2]
 801ab08:	0a1b      	lsrs	r3, r3, #8
 801ab0a:	f80b 3c02 	strb.w	r3, [fp, #-2]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
 801ab0e:	8843      	ldrh	r3, [r0, #2]
 801ab10:	f80b 3c01 	strb.w	r3, [fp, #-1]
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801ab14:	e7d7      	b.n	801aac6 <ssl_write_client_hello+0x7d6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
 801ab16:	220b      	movs	r2, #11
 801ab18:	706a      	strb	r2, [r5, #1]
    *p++ = 2;
 801ab1a:	2202      	movs	r2, #2
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 801ab1c:	2300      	movs	r3, #0
    *p++ = 2;
 801ab1e:	70ea      	strb	r2, [r5, #3]
    *p++ = 1;
 801ab20:	2201      	movs	r2, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 801ab22:	702b      	strb	r3, [r5, #0]
    *p++ = 0x00;
 801ab24:	70ab      	strb	r3, [r5, #2]
    *p++ = 1;
 801ab26:	712a      	strb	r2, [r5, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
 801ab28:	716b      	strb	r3, [r5, #5]
    *olen = 6;
 801ab2a:	f04f 0a06 	mov.w	sl, #6
 801ab2e:	e6aa      	b.n	801a886 <ssl_write_client_hello+0x596>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 801ab30:	2301      	movs	r3, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 801ab32:	2200      	movs	r2, #0
 801ab34:	702a      	strb	r2, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 801ab36:	706b      	strb	r3, [r5, #1]
    *p++ = 0x00;
 801ab38:	70aa      	strb	r2, [r5, #2]
    *p++ = 1;
 801ab3a:	70eb      	strb	r3, [r5, #3]
    *p++ = ssl->conf->mfl_code;
 801ab3c:	6823      	ldr	r3, [r4, #0]
 801ab3e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801ab42:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801ab46:	712b      	strb	r3, [r5, #4]
    *olen = 5;
 801ab48:	f04f 0805 	mov.w	r8, #5
 801ab4c:	e6c6      	b.n	801a8dc <ssl_write_client_hello+0x5ec>
 801ab4e:	bf00      	nop
 801ab50:	08031257 	.word	0x08031257
 801ab54:	08030f75 	.word	0x08030f75
 801ab58:	0803127a 	.word	0x0803127a
 801ab5c:	080311ac 	.word	0x080311ac
 801ab60:	080312b1 	.word	0x080312b1
 801ab64:	080312e4 	.word	0x080312e4
 801ab68:	08031312 	.word	0x08031312
 801ab6c:	08031348 	.word	0x08031348
 801ab70:	0803136c 	.word	0x0803136c
 801ab74:	080313be 	.word	0x080313be
 801ab78:	080313e7 	.word	0x080313e7
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );
 801ab7c:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );
 801ab7e:	f04f 0804 	mov.w	r8, #4
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );
 801ab82:	702b      	strb	r3, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );
 801ab84:	f885 8001 	strb.w	r8, [r5, #1]
    *p++ = 0x00;
 801ab88:	70ab      	strb	r3, [r5, #2]
    *p++ = 0x00;
 801ab8a:	70eb      	strb	r3, [r5, #3]
    *olen = 4;
 801ab8c:	e6d1      	b.n	801a932 <ssl_write_client_hello+0x642>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );
 801ab8e:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );
 801ab90:	2217      	movs	r2, #23
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );
 801ab92:	702b      	strb	r3, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );
 801ab94:	706a      	strb	r2, [r5, #1]
    *p++ = 0x00;
 801ab96:	70ab      	strb	r3, [r5, #2]
    *p++ = 0x00;
 801ab98:	70eb      	strb	r3, [r5, #3]
    *olen = 4;
 801ab9a:	2504      	movs	r5, #4
 801ab9c:	e6f6      	b.n	801a98c <ssl_write_client_hello+0x69c>
        alpnlen += (unsigned char)( strlen( *cur ) & 0xFF ) + 1;
 801ab9e:	f7e5 fb21 	bl	80001e4 <strlen>
 801aba2:	b2c0      	uxtb	r0, r0
 801aba4:	3001      	adds	r0, #1
 801aba6:	4482      	add	sl, r0
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801aba8:	e705      	b.n	801a9b6 <ssl_write_client_hello+0x6c6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 801abaa:	2310      	movs	r3, #16
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );
 801abac:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 801abb0:	f889 3001 	strb.w	r3, [r9, #1]
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801abb4:	6823      	ldr	r3, [r4, #0]
 801abb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    p += 4;
 801abb8:	f109 0506 	add.w	r5, r9, #6
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801abbc:	f1a3 0a04 	sub.w	sl, r3, #4
 801abc0:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 801abc4:	b988      	cbnz	r0, 801abea <ssl_write_client_hello+0x8fa>
    *olen = p - buf;
 801abc6:	eba5 0509 	sub.w	r5, r5, r9
    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );
 801abca:	1fab      	subs	r3, r5, #6
 801abcc:	0a1b      	lsrs	r3, r3, #8
 801abce:	f889 3004 	strb.w	r3, [r9, #4]
    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );
 801abd2:	b2eb      	uxtb	r3, r5
 801abd4:	1f9a      	subs	r2, r3, #6
 801abd6:	f889 2005 	strb.w	r2, [r9, #5]
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 801abda:	1f2a      	subs	r2, r5, #4
 801abdc:	0a12      	lsrs	r2, r2, #8
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 801abde:	3b04      	subs	r3, #4
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 801abe0:	f889 2002 	strb.w	r2, [r9, #2]
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 801abe4:	f889 3003 	strb.w	r3, [r9, #3]
 801abe8:	e703      	b.n	801a9f2 <ssl_write_client_hello+0x702>
        *p = (unsigned char)( strlen( *cur ) & 0xFF );
 801abea:	f7e5 fafb 	bl	80001e4 <strlen>
 801abee:	4683      	mov	fp, r0
 801abf0:	4628      	mov	r0, r5
 801abf2:	f800 bb01 	strb.w	fp, [r0], #1
        memcpy( p + 1, *cur, *p );
 801abf6:	fa5f fb8b 	uxtb.w	fp, fp
 801abfa:	465a      	mov	r2, fp
 801abfc:	f8da 1000 	ldr.w	r1, [sl]
        p += 1 + *p;
 801ac00:	f10b 0b01 	add.w	fp, fp, #1
        memcpy( p + 1, *cur, *p );
 801ac04:	f007 fc3c 	bl	8022480 <memcpy>
        p += 1 + *p;
 801ac08:	445d      	add	r5, fp
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801ac0a:	e7d9      	b.n	801abc0 <ssl_write_client_hello+0x8d0>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 801ac0c:	2300      	movs	r3, #0
 801ac0e:	f889 3000 	strb.w	r3, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 801ac12:	2323      	movs	r3, #35	; 0x23
 801ac14:	f889 3001 	strb.w	r3, [r9, #1]
    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 801ac18:	ea4f 231b 	mov.w	r3, fp, lsr #8
 801ac1c:	f889 3002 	strb.w	r3, [r9, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 801ac20:	f889 b003 	strb.w	fp, [r9, #3]
    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 801ac24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac28:	b1ab      	cbz	r3, 801ac56 <ssl_write_client_hello+0x966>
 801ac2a:	f1bb 0f00 	cmp.w	fp, #0
 801ac2e:	d012      	beq.n	801ac56 <ssl_write_client_hello+0x966>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );
 801ac30:	4b10      	ldr	r3, [pc, #64]	; (801ac74 <ssl_write_client_hello+0x984>)
 801ac32:	9300      	str	r3, [sp, #0]
 801ac34:	4620      	mov	r0, r4
 801ac36:	4a10      	ldr	r2, [pc, #64]	; (801ac78 <ssl_write_client_hello+0x988>)
 801ac38:	f8cd b004 	str.w	fp, [sp, #4]
 801ac3c:	f240 2356 	movw	r3, #598	; 0x256
 801ac40:	2103      	movs	r1, #3
 801ac42:	f7f5 ff8f 	bl	8010b64 <mbedtls_debug_print_msg>
    memcpy( p, ssl->session_negotiate->ticket, tlen );
 801ac46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac48:	465a      	mov	r2, fp
 801ac4a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801ac4c:	f109 0004 	add.w	r0, r9, #4
 801ac50:	f007 fc16 	bl	8022480 <memcpy>
    *olen += tlen;
 801ac54:	e6fd      	b.n	801aa52 <ssl_write_client_hello+0x762>
    *olen = 4;
 801ac56:	f04f 0804 	mov.w	r8, #4
 801ac5a:	e6fa      	b.n	801aa52 <ssl_write_client_hello+0x762>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 801ac5c:	4b07      	ldr	r3, [pc, #28]	; (801ac7c <ssl_write_client_hello+0x98c>)
 801ac5e:	9300      	str	r3, [sp, #0]
 801ac60:	4a05      	ldr	r2, [pc, #20]	; (801ac78 <ssl_write_client_hello+0x988>)
 801ac62:	f240 431b 	movw	r3, #1051	; 0x41b
 801ac66:	2102      	movs	r1, #2
 801ac68:	4620      	mov	r0, r4
 801ac6a:	f7f5 ff7b 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801ac6e:	f7ff bb58 	b.w	801a322 <ssl_write_client_hello+0x32>
 801ac72:	bf00      	nop
 801ac74:	0803139a 	.word	0x0803139a
 801ac78:	08030f75 	.word	0x08030f75
 801ac7c:	08031400 	.word	0x08031400

0801ac80 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 801ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801ac84:	6843      	ldr	r3, [r0, #4]
{
 801ac86:	ed2d 8b02 	vpush	{d8}
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801ac8a:	2b10      	cmp	r3, #16
{
 801ac8c:	b0a1      	sub	sp, #132	; 0x84
 801ac8e:	4604      	mov	r4, r0
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801ac90:	f000 81a0 	beq.w	801afd4 <mbedtls_ssl_handshake_client_step+0x354>
 801ac94:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801ac96:	2a00      	cmp	r2, #0
 801ac98:	f000 819c 	beq.w	801afd4 <mbedtls_ssl_handshake_client_step+0x354>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 801ac9c:	9301      	str	r3, [sp, #4]
 801ac9e:	4baf      	ldr	r3, [pc, #700]	; (801af5c <mbedtls_ssl_handshake_client_step+0x2dc>)
 801aca0:	4aaf      	ldr	r2, [pc, #700]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801aca2:	9300      	str	r3, [sp, #0]
 801aca4:	2102      	movs	r1, #2
 801aca6:	f640 5323 	movw	r3, #3363	; 0xd23
 801acaa:	f7f5 ff5b 	bl	8010b64 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801acae:	4620      	mov	r0, r4
 801acb0:	f002 f82a 	bl	801cd08 <mbedtls_ssl_flush_output>
 801acb4:	4605      	mov	r5, r0
 801acb6:	bb18      	cbnz	r0, 801ad00 <mbedtls_ssl_handshake_client_step+0x80>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 801acb8:	6863      	ldr	r3, [r4, #4]
 801acba:	2b0c      	cmp	r3, #12
 801acbc:	d105      	bne.n	801acca <mbedtls_ssl_handshake_client_step+0x4a>
        ssl->handshake->new_session_ticket != 0 )
 801acbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 801acc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801acc4:	b10b      	cbz	r3, 801acca <mbedtls_ssl_handshake_client_step+0x4a>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 801acc6:	2311      	movs	r3, #17
 801acc8:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 801acca:	6863      	ldr	r3, [r4, #4]
 801accc:	2b11      	cmp	r3, #17
 801acce:	f201 8236 	bhi.w	801c13e <mbedtls_ssl_handshake_client_step+0x14be>
 801acd2:	e8df f013 	tbh	[pc, r3, lsl #1]
 801acd6:	0012      	.short	0x0012
 801acd8:	0020001b 	.word	0x0020001b
 801acdc:	0433042e 	.word	0x0433042e
 801ace0:	072f0682 	.word	0x072f0682
 801ace4:	079f0770 	.word	0x079f0770
 801ace8:	096c0898 	.word	0x096c0898
 801acec:	0a190971 	.word	0x0a190971
 801acf0:	0a230a1e 	.word	0x0a230a1e
 801acf4:	0a340a2f 	.word	0x0a340a2f
 801acf8:	0976      	.short	0x0976
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 801acfa:	2201      	movs	r2, #1
 801acfc:	6062      	str	r2, [r4, #4]
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801acfe:	461d      	mov	r5, r3
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 801ad00:	4628      	mov	r0, r5
 801ad02:	b021      	add	sp, #132	; 0x84
 801ad04:	ecbd 8b02 	vpop	{d8}
 801ad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           ret = ssl_write_client_hello( ssl );
 801ad0c:	4620      	mov	r0, r4
 801ad0e:	f7ff faef 	bl	801a2f0 <ssl_write_client_hello>
           ret = mbedtls_ssl_parse_certificate( ssl );
 801ad12:	4605      	mov	r5, r0
           break;
 801ad14:	e7f4      	b.n	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 801ad16:	4b93      	ldr	r3, [pc, #588]	; (801af64 <mbedtls_ssl_handshake_client_step+0x2e4>)
 801ad18:	4a91      	ldr	r2, [pc, #580]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ad1a:	9300      	str	r3, [sp, #0]
 801ad1c:	2102      	movs	r1, #2
 801ad1e:	f240 53a7 	movw	r3, #1447	; 0x5a7
 801ad22:	4620      	mov	r0, r4
 801ad24:	f7f5 ff1e 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ad28:	4620      	mov	r0, r4
    buf = ssl->in_msg;
 801ad2a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ad2c:	f002 ffc6 	bl	801dcbc <mbedtls_ssl_read_record>
 801ad30:	4605      	mov	r5, r0
 801ad32:	b150      	cbz	r0, 801ad4a <mbedtls_ssl_handshake_client_step+0xca>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ad34:	4b8c      	ldr	r3, [pc, #560]	; (801af68 <mbedtls_ssl_handshake_client_step+0x2e8>)
 801ad36:	9300      	str	r3, [sp, #0]
 801ad38:	9001      	str	r0, [sp, #4]
 801ad3a:	f240 53ae 	movw	r3, #1454	; 0x5ae
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ad3e:	4a88      	ldr	r2, [pc, #544]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ad40:	2101      	movs	r1, #1
 801ad42:	4620      	mov	r0, r4
 801ad44:	f7f5 ff3e 	bl	8010bc4 <mbedtls_debug_print_ret>
        return( ret );
 801ad48:	e7da      	b.n	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801ad4a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801ad4c:	2b16      	cmp	r3, #22
 801ad4e:	d032      	beq.n	801adb6 <mbedtls_ssl_handshake_client_step+0x136>
        if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801ad50:	68a1      	ldr	r1, [r4, #8]
 801ad52:	2901      	cmp	r1, #1
 801ad54:	d11f      	bne.n	801ad96 <mbedtls_ssl_handshake_client_step+0x116>
            if( ssl->conf->renego_max_records >= 0 &&
 801ad56:	6822      	ldr	r2, [r4, #0]
            ssl->renego_records_seen++;
 801ad58:	68e3      	ldr	r3, [r4, #12]
            if( ssl->conf->renego_max_records >= 0 &&
 801ad5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
            ssl->renego_records_seen++;
 801ad5c:	3301      	adds	r3, #1
            if( ssl->conf->renego_max_records >= 0 &&
 801ad5e:	2a00      	cmp	r2, #0
            ssl->renego_records_seen++;
 801ad60:	60e3      	str	r3, [r4, #12]
            if( ssl->conf->renego_max_records >= 0 &&
 801ad62:	db0a      	blt.n	801ad7a <mbedtls_ssl_handshake_client_step+0xfa>
 801ad64:	4293      	cmp	r3, r2
 801ad66:	dd08      	ble.n	801ad7a <mbedtls_ssl_handshake_client_step+0xfa>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
 801ad68:	4b80      	ldr	r3, [pc, #512]	; (801af6c <mbedtls_ssl_handshake_client_step+0x2ec>)
 801ad6a:	4a7d      	ldr	r2, [pc, #500]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ad6c:	9300      	str	r3, [sp, #0]
 801ad6e:	f240 53bc 	movw	r3, #1468	; 0x5bc
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801ad72:	4620      	mov	r0, r4
 801ad74:	f7f5 fef6 	bl	8010b64 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801ad78:	e01b      	b.n	801adb2 <mbedtls_ssl_handshake_client_step+0x132>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-handshake message during renego" ) );
 801ad7a:	4b7d      	ldr	r3, [pc, #500]	; (801af70 <mbedtls_ssl_handshake_client_step+0x2f0>)
 801ad7c:	9300      	str	r3, [sp, #0]
 801ad7e:	4a78      	ldr	r2, [pc, #480]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
 801ad80:	4d7c      	ldr	r5, [pc, #496]	; (801af74 <mbedtls_ssl_handshake_client_step+0x2f4>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-handshake message during renego" ) );
 801ad82:	f240 53c1 	movw	r3, #1473	; 0x5c1
 801ad86:	2101      	movs	r1, #1
 801ad88:	4620      	mov	r0, r4
 801ad8a:	f7f5 feeb 	bl	8010b64 <mbedtls_debug_print_msg>
            ssl->keep_current_message = 1;
 801ad8e:	2301      	movs	r3, #1
 801ad90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
 801ad94:	e7b4      	b.n	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ad96:	4b78      	ldr	r3, [pc, #480]	; (801af78 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801ad98:	9300      	str	r3, [sp, #0]
 801ad9a:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 801ad9e:	4a70      	ldr	r2, [pc, #448]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ada0:	2101      	movs	r1, #1
 801ada2:	4620      	mov	r0, r4
 801ada4:	f7f5 fede 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ada8:	220a      	movs	r2, #10
 801adaa:	2102      	movs	r1, #2
 801adac:	4620      	mov	r0, r4
 801adae:	f002 fb6f 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801adb2:	4d72      	ldr	r5, [pc, #456]	; (801af7c <mbedtls_ssl_handshake_client_step+0x2fc>)
 801adb4:	e7a4      	b.n	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 801adb6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801adba:	2b29      	cmp	r3, #41	; 0x29
 801adbc:	d902      	bls.n	801adc4 <mbedtls_ssl_handshake_client_step+0x144>
 801adbe:	783b      	ldrb	r3, [r7, #0]
 801adc0:	2b02      	cmp	r3, #2
 801adc2:	d00f      	beq.n	801ade4 <mbedtls_ssl_handshake_client_step+0x164>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801adc4:	4b6c      	ldr	r3, [pc, #432]	; (801af78 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801adc6:	9300      	str	r3, [sp, #0]
 801adc8:	f240 53e4 	movw	r3, #1508	; 0x5e4
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801adcc:	4a64      	ldr	r2, [pc, #400]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801adce:	2101      	movs	r1, #1
 801add0:	4620      	mov	r0, r4
 801add2:	f7f5 fec7 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801add6:	2232      	movs	r2, #50	; 0x32
 801add8:	2102      	movs	r1, #2
 801adda:	4620      	mov	r0, r4
 801addc:	f002 fb58 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801ade0:	4d67      	ldr	r5, [pc, #412]	; (801af80 <mbedtls_ssl_handshake_client_step+0x300>)
 801ade2:	e78d      	b.n	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 801ade4:	f107 0804 	add.w	r8, r7, #4
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 801ade8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801adec:	4b65      	ldr	r3, [pc, #404]	; (801af84 <mbedtls_ssl_handshake_client_step+0x304>)
 801adee:	4a5c      	ldr	r2, [pc, #368]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801adf0:	9300      	str	r3, [sp, #0]
 801adf2:	2103      	movs	r1, #3
 801adf4:	f240 53f7 	movw	r3, #1527	; 0x5f7
 801adf8:	4620      	mov	r0, r4
 801adfa:	f7f5 ff13 	bl	8010c24 <mbedtls_debug_print_buf>
                      ssl->conf->transport, buf + 0 );
 801adfe:	4621      	mov	r1, r4
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 801ae00:	f104 0010 	add.w	r0, r4, #16
                      ssl->conf->transport, buf + 0 );
 801ae04:	f851 3b14 	ldr.w	r3, [r1], #20
 801ae08:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 801ae0c:	4643      	mov	r3, r8
 801ae0e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801ae12:	f004 faee 	bl	801f3f2 <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 801ae16:	6823      	ldr	r3, [r4, #0]
 801ae18:	6922      	ldr	r2, [r4, #16]
 801ae1a:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
 801ae1e:	6961      	ldr	r1, [r4, #20]
 801ae20:	f893 6069 	ldrb.w	r6, [r3, #105]	; 0x69
 801ae24:	4282      	cmp	r2, r0
 801ae26:	db09      	blt.n	801ae3c <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 801ae28:	f893 e06b 	ldrb.w	lr, [r3, #107]	; 0x6b
 801ae2c:	f893 c068 	ldrb.w	ip, [r3, #104]	; 0x68
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 801ae30:	4571      	cmp	r1, lr
 801ae32:	db03      	blt.n	801ae3c <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 801ae34:	4562      	cmp	r2, ip
 801ae36:	dc01      	bgt.n	801ae3c <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->major_ver > ssl->conf->max_major_ver ||
 801ae38:	42b1      	cmp	r1, r6
 801ae3a:	dd19      	ble.n	801ae70 <mbedtls_ssl_handshake_client_step+0x1f0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 801ae3c:	9606      	str	r6, [sp, #24]
 801ae3e:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 801ae42:	9203      	str	r2, [sp, #12]
 801ae44:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801ae48:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801ae4c:	4a44      	ldr	r2, [pc, #272]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 801ae4e:	4d4e      	ldr	r5, [pc, #312]	; (801af88 <mbedtls_ssl_handshake_client_step+0x308>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 801ae50:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801ae54:	4b4d      	ldr	r3, [pc, #308]	; (801af8c <mbedtls_ssl_handshake_client_step+0x30c>)
 801ae56:	9300      	str	r3, [sp, #0]
 801ae58:	2101      	movs	r1, #1
 801ae5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801ae5e:	4620      	mov	r0, r4
 801ae60:	f7f5 fe80 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ae64:	2246      	movs	r2, #70	; 0x46
 801ae66:	2102      	movs	r1, #2
 801ae68:	4620      	mov	r0, r4
 801ae6a:	f002 fb11 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 801ae6e:	e747      	b.n	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    t = ( (uint32_t) buf[2] << 24 )
 801ae70:	46b9      	mov	r9, r7
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu", t ) );
 801ae72:	4a3b      	ldr	r2, [pc, #236]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ae74:	f859 3f06 	ldr.w	r3, [r9, #6]!
 801ae78:	ba1b      	rev	r3, r3
 801ae7a:	9301      	str	r3, [sp, #4]
 801ae7c:	4b44      	ldr	r3, [pc, #272]	; (801af90 <mbedtls_ssl_handshake_client_step+0x310>)
 801ae7e:	9300      	str	r3, [sp, #0]
 801ae80:	2103      	movs	r1, #3
 801ae82:	f240 6311 	movw	r3, #1553	; 0x611
 801ae86:	4620      	mov	r0, r4
 801ae88:	f7f5 fe6c 	bl	8010b64 <mbedtls_debug_print_msg>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 801ae8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ae8e:	464a      	mov	r2, r9
 801ae90:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 801ae94:	f107 0126 	add.w	r1, r7, #38	; 0x26
 801ae98:	f852 0b04 	ldr.w	r0, [r2], #4
 801ae9c:	f843 0b04 	str.w	r0, [r3], #4
 801aea0:	428a      	cmp	r2, r1
 801aea2:	d1f9      	bne.n	801ae98 <mbedtls_ssl_handshake_client_step+0x218>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 801aea4:	2320      	movs	r3, #32
    n = buf[34];
 801aea6:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 801aeaa:	4a2d      	ldr	r2, [pc, #180]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801aeac:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801aeb0:	4b38      	ldr	r3, [pc, #224]	; (801af94 <mbedtls_ssl_handshake_client_step+0x314>)
 801aeb2:	9300      	str	r3, [sp, #0]
 801aeb4:	2103      	movs	r1, #3
 801aeb6:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 801aeba:	4620      	mov	r0, r4
 801aebc:	f7f5 feb2 	bl	8010c24 <mbedtls_debug_print_buf>
    if( n > 32 )
 801aec0:	2e20      	cmp	r6, #32
 801aec2:	d904      	bls.n	801aece <mbedtls_ssl_handshake_client_step+0x24e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801aec4:	4b2c      	ldr	r3, [pc, #176]	; (801af78 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801aec6:	9300      	str	r3, [sp, #0]
 801aec8:	f240 631c 	movw	r3, #1564	; 0x61c
 801aecc:	e77e      	b.n	801adcc <mbedtls_ssl_handshake_client_step+0x14c>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 801aece:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801aed2:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 801aed6:	4293      	cmp	r3, r2
 801aed8:	d915      	bls.n	801af06 <mbedtls_ssl_handshake_client_step+0x286>
        ext_len = ( ( buf[38 + n] <<  8 )
 801aeda:	eb08 0206 	add.w	r2, r8, r6
 801aede:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
                  | ( buf[39 + n]       ) );
 801aee2:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 801aee6:	ea42 2b01 	orr.w	fp, r2, r1, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 801aeea:	f10b 32ff 	add.w	r2, fp, #4294967295
 801aeee:	2a02      	cmp	r2, #2
 801aef0:	d904      	bls.n	801aefc <mbedtls_ssl_handshake_client_step+0x27c>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 801aef2:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 801aef6:	445a      	add	r2, fp
        if( ( ext_len > 0 && ext_len < 4 ) ||
 801aef8:	4293      	cmp	r3, r2
 801aefa:	d00f      	beq.n	801af1c <mbedtls_ssl_handshake_client_step+0x29c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801aefc:	4b1e      	ldr	r3, [pc, #120]	; (801af78 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801aefe:	9300      	str	r3, [sp, #0]
 801af00:	f240 632a 	movw	r3, #1578	; 0x62a
 801af04:	e762      	b.n	801adcc <mbedtls_ssl_handshake_client_step+0x14c>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 801af06:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 801af0a:	4293      	cmp	r3, r2
 801af0c:	d004      	beq.n	801af18 <mbedtls_ssl_handshake_client_step+0x298>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801af0e:	4b1a      	ldr	r3, [pc, #104]	; (801af78 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801af10:	9300      	str	r3, [sp, #0]
 801af12:	f240 6336 	movw	r3, #1590	; 0x636
 801af16:	e759      	b.n	801adcc <mbedtls_ssl_handshake_client_step+0x14c>
        ext_len = 0;
 801af18:	f04f 0b00 	mov.w	fp, #0
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801af1c:	eb08 0306 	add.w	r3, r8, r6
 801af20:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801af24:	f893 9024 	ldrb.w	r9, [r3, #36]	; 0x24
    comp = buf[37 + n];
 801af28:	f106 0325 	add.w	r3, r6, #37	; 0x25
 801af2c:	9309      	str	r3, [sp, #36]	; 0x24
 801af2e:	f818 3003 	ldrb.w	r3, [r8, r3]
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801af32:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 801af36:	b39b      	cbz	r3, 801afa0 <mbedtls_ssl_handshake_client_step+0x320>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 801af38:	9301      	str	r3, [sp, #4]
 801af3a:	4b17      	ldr	r3, [pc, #92]	; (801af98 <mbedtls_ssl_handshake_client_step+0x318>)
 801af3c:	4a08      	ldr	r2, [pc, #32]	; (801af60 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801af3e:	9300      	str	r3, [sp, #0]
 801af40:	2101      	movs	r1, #1
 801af42:	f240 6353 	movw	r3, #1619	; 0x653
 801af46:	4620      	mov	r0, r4
 801af48:	f7f5 fe0c 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801af4c:	222f      	movs	r2, #47	; 0x2f
 801af4e:	2102      	movs	r1, #2
 801af50:	4620      	mov	r0, r4
 801af52:	f002 fa9d 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 801af56:	4d11      	ldr	r5, [pc, #68]	; (801af9c <mbedtls_ssl_handshake_client_step+0x31c>)
 801af58:	e6d2      	b.n	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
 801af5a:	bf00      	nop
 801af5c:	08031419 	.word	0x08031419
 801af60:	08030f75 	.word	0x08030f75
 801af64:	0803142a 	.word	0x0803142a
 801af68:	08031440 	.word	0x08031440
 801af6c:	08031458 	.word	0x08031458
 801af70:	0803148b 	.word	0x0803148b
 801af74:	ffff9500 	.word	0xffff9500
 801af78:	080314af 	.word	0x080314af
 801af7c:	ffff8900 	.word	0xffff8900
 801af80:	ffff8680 	.word	0xffff8680
 801af84:	080314c8 	.word	0x080314c8
 801af88:	ffff9180 	.word	0xffff9180
 801af8c:	080314de 	.word	0x080314de
 801af90:	0803152a 	.word	0x0803152a
 801af94:	0803154a 	.word	0x0803154a
 801af98:	08031565 	.word	0x08031565
 801af9c:	ffff8f80 	.word	0xffff8f80
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 801afa0:	4648      	mov	r0, r9
 801afa2:	f8d4 a048 	ldr.w	sl, [r4, #72]	; 0x48
 801afa6:	f7ff f94f 	bl	801a248 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 801afaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 801afac:	f8ca 0000 	str.w	r0, [sl]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 801afb0:	6819      	ldr	r1, [r3, #0]
 801afb2:	b989      	cbnz	r1, 801afd8 <mbedtls_ssl_handshake_client_step+0x358>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 801afb4:	4bb6      	ldr	r3, [pc, #728]	; (801b290 <mbedtls_ssl_handshake_client_step+0x610>)
 801afb6:	4ab7      	ldr	r2, [pc, #732]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801afb8:	9300      	str	r3, [sp, #0]
 801afba:	2101      	movs	r1, #1
 801afbc:	4620      	mov	r0, r4
 801afbe:	f8cd 9004 	str.w	r9, [sp, #4]
 801afc2:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 801afc6:	f7f5 fdcd 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801afca:	2250      	movs	r2, #80	; 0x50
 801afcc:	2102      	movs	r1, #2
 801afce:	4620      	mov	r0, r4
 801afd0:	f002 fa5e 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801afd4:	4db0      	ldr	r5, [pc, #704]	; (801b298 <mbedtls_ssl_handshake_client_step+0x618>)
 801afd6:	e693      	b.n	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 801afd8:	4620      	mov	r0, r4
 801afda:	f003 f845 	bl	801e068 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 801afde:	4baf      	ldr	r3, [pc, #700]	; (801b29c <mbedtls_ssl_handshake_client_step+0x61c>)
 801afe0:	4aac      	ldr	r2, [pc, #688]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801afe2:	9300      	str	r3, [sp, #0]
 801afe4:	2103      	movs	r1, #3
 801afe6:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 801afea:	4620      	mov	r0, r4
 801afec:	9601      	str	r6, [sp, #4]
 801afee:	f7f5 fdb9 	bl	8010b64 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 801aff2:	3727      	adds	r7, #39	; 0x27
 801aff4:	4baa      	ldr	r3, [pc, #680]	; (801b2a0 <mbedtls_ssl_handshake_client_step+0x620>)
 801aff6:	4aa7      	ldr	r2, [pc, #668]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801aff8:	9300      	str	r3, [sp, #0]
 801affa:	e9cd 7601 	strd	r7, r6, [sp, #4]
 801affe:	f240 6369 	movw	r3, #1641	; 0x669
 801b002:	2103      	movs	r1, #3
 801b004:	4620      	mov	r0, r4
 801b006:	f7f5 fe0d 	bl	8010c24 <mbedtls_debug_print_buf>
    if( ssl->handshake->resume == 0 || n == 0 ||
 801b00a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b00c:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 801b010:	f8d3 2330 	ldr.w	r2, [r3, #816]	; 0x330
 801b014:	b1ba      	cbz	r2, 801b046 <mbedtls_ssl_handshake_client_step+0x3c6>
 801b016:	b1b6      	cbz	r6, 801b046 <mbedtls_ssl_handshake_client_step+0x3c6>
 801b018:	68a2      	ldr	r2, [r4, #8]
 801b01a:	b9a2      	cbnz	r2, 801b046 <mbedtls_ssl_handshake_client_step+0x3c6>
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
 801b01c:	f8da 2008 	ldr.w	r2, [sl, #8]
 801b020:	4591      	cmp	r9, r2
 801b022:	d110      	bne.n	801b046 <mbedtls_ssl_handshake_client_step+0x3c6>
        ssl->session_negotiate->ciphersuite != i ||
 801b024:	f8da 200c 	ldr.w	r2, [sl, #12]
 801b028:	b96a      	cbnz	r2, 801b046 <mbedtls_ssl_handshake_client_step+0x3c6>
        ssl->session_negotiate->compression != comp ||
 801b02a:	f8da 2010 	ldr.w	r2, [sl, #16]
 801b02e:	4296      	cmp	r6, r2
 801b030:	d109      	bne.n	801b046 <mbedtls_ssl_handshake_client_step+0x3c6>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 801b032:	4632      	mov	r2, r6
 801b034:	4639      	mov	r1, r7
 801b036:	f10a 0014 	add.w	r0, sl, #20
 801b03a:	930a      	str	r3, [sp, #40]	; 0x28
 801b03c:	f007 fa12 	bl	8022464 <memcmp>
        ssl->session_negotiate->id_len != n ||
 801b040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b042:	2800      	cmp	r0, #0
 801b044:	d04f      	beq.n	801b0e6 <mbedtls_ssl_handshake_client_step+0x466>
        ssl->state++;
 801b046:	6862      	ldr	r2, [r4, #4]
 801b048:	3201      	adds	r2, #1
 801b04a:	6062      	str	r2, [r4, #4]
        ssl->handshake->resume = 0;
 801b04c:	2200      	movs	r2, #0
 801b04e:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        ssl->session_negotiate->start = mbedtls_time( NULL );
 801b052:	4610      	mov	r0, r2
 801b054:	f7e8 f902 	bl	800325c <time>
 801b058:	e9ca 0100 	strd	r0, r1, [sl]
        ssl->session_negotiate->ciphersuite = i;
 801b05c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ssl->session_negotiate->compression = comp;
 801b05e:	2200      	movs	r2, #0
        ssl->session_negotiate->id_len = n;
 801b060:	e9c0 2603 	strd	r2, r6, [r0, #12]
        ssl->session_negotiate->ciphersuite = i;
 801b064:	f8c0 9008 	str.w	r9, [r0, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 801b068:	4632      	mov	r2, r6
 801b06a:	4639      	mov	r1, r7
 801b06c:	3014      	adds	r0, #20
 801b06e:	f007 fa07 	bl	8022480 <memcpy>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 801b072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b074:	4a8b      	ldr	r2, [pc, #556]	; (801b2a4 <mbedtls_ssl_handshake_client_step+0x624>)
 801b076:	f8d3 1330 	ldr.w	r1, [r3, #816]	; 0x330
 801b07a:	4b8b      	ldr	r3, [pc, #556]	; (801b2a8 <mbedtls_ssl_handshake_client_step+0x628>)
 801b07c:	2900      	cmp	r1, #0
 801b07e:	bf08      	it	eq
 801b080:	4613      	moveq	r3, r2
 801b082:	9301      	str	r3, [sp, #4]
 801b084:	4b89      	ldr	r3, [pc, #548]	; (801b2ac <mbedtls_ssl_handshake_client_step+0x62c>)
 801b086:	4a83      	ldr	r2, [pc, #524]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801b088:	9300      	str	r3, [sp, #0]
 801b08a:	2103      	movs	r1, #3
 801b08c:	f240 638e 	movw	r3, #1678	; 0x68e
 801b090:	4620      	mov	r0, r4
 801b092:	f7f5 fd67 	bl	8010b64 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 801b096:	4b86      	ldr	r3, [pc, #536]	; (801b2b0 <mbedtls_ssl_handshake_client_step+0x630>)
 801b098:	4a7e      	ldr	r2, [pc, #504]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801b09a:	9300      	str	r3, [sp, #0]
 801b09c:	2103      	movs	r1, #3
 801b09e:	f240 6391 	movw	r3, #1681	; 0x691
 801b0a2:	4620      	mov	r0, r4
 801b0a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b0a8:	f7f5 fd5c 	bl	8010b64 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 801b0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0ae:	4a79      	ldr	r2, [pc, #484]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801b0b0:	f818 3003 	ldrb.w	r3, [r8, r3]
 801b0b4:	9301      	str	r3, [sp, #4]
 801b0b6:	4b7f      	ldr	r3, [pc, #508]	; (801b2b4 <mbedtls_ssl_handshake_client_step+0x634>)
 801b0b8:	9300      	str	r3, [sp, #0]
 801b0ba:	4620      	mov	r0, r4
 801b0bc:	f240 6392 	movw	r3, #1682	; 0x692
 801b0c0:	2103      	movs	r1, #3
 801b0c2:	f7f5 fd4f 	bl	8010b64 <mbedtls_debug_print_msg>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 801b0c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0c8:	6898      	ldr	r0, [r3, #8]
 801b0ca:	f7ff f8bd 	bl	801a248 <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL
 801b0ce:	bb18      	cbnz	r0, 801b118 <mbedtls_ssl_handshake_client_step+0x498>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b0d0:	4b79      	ldr	r3, [pc, #484]	; (801b2b8 <mbedtls_ssl_handshake_client_step+0x638>)
 801b0d2:	9300      	str	r3, [sp, #0]
 801b0d4:	f240 639c 	movw	r3, #1692	; 0x69c
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b0d8:	4a6e      	ldr	r2, [pc, #440]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801b0da:	2101      	movs	r1, #1
 801b0dc:	4620      	mov	r0, r4
 801b0de:	f7f5 fd41 	bl	8010b64 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b0e2:	222f      	movs	r2, #47	; 0x2f
 801b0e4:	e678      	b.n	801add8 <mbedtls_ssl_handshake_client_step+0x158>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 801b0e6:	230c      	movs	r3, #12
 801b0e8:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 801b0ea:	4620      	mov	r0, r4
 801b0ec:	f001 fac0 	bl	801c670 <mbedtls_ssl_derive_keys>
 801b0f0:	4607      	mov	r7, r0
 801b0f2:	2800      	cmp	r0, #0
 801b0f4:	d0bd      	beq.n	801b072 <mbedtls_ssl_handshake_client_step+0x3f2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 801b0f6:	4b71      	ldr	r3, [pc, #452]	; (801b2bc <mbedtls_ssl_handshake_client_step+0x63c>)
 801b0f8:	4a66      	ldr	r2, [pc, #408]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801b0fa:	9001      	str	r0, [sp, #4]
 801b0fc:	9300      	str	r3, [sp, #0]
 801b0fe:	2101      	movs	r1, #1
 801b100:	f240 6387 	movw	r3, #1671	; 0x687
 801b104:	4620      	mov	r0, r4
 801b106:	f7f5 fd5d 	bl	8010bc4 <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b10a:	2250      	movs	r2, #80	; 0x50
 801b10c:	2102      	movs	r1, #2
 801b10e:	4620      	mov	r0, r4
 801b110:	f002 f9be 	bl	801d490 <mbedtls_ssl_send_alert_message>
            return( ret );
 801b114:	463d      	mov	r5, r7
 801b116:	e5f3      	b.n	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 801b118:	6843      	ldr	r3, [r0, #4]
 801b11a:	9301      	str	r3, [sp, #4]
 801b11c:	4b68      	ldr	r3, [pc, #416]	; (801b2c0 <mbedtls_ssl_handshake_client_step+0x640>)
 801b11e:	4a5d      	ldr	r2, [pc, #372]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801b120:	9300      	str	r3, [sp, #0]
 801b122:	2103      	movs	r1, #3
 801b124:	f240 63a2 	movw	r3, #1698	; 0x6a2
 801b128:	4620      	mov	r0, r4
 801b12a:	f7f5 fd1b 	bl	8010b64 <mbedtls_debug_print_msg>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 801b12e:	6823      	ldr	r3, [r4, #0]
 801b130:	6962      	ldr	r2, [r4, #20]
 801b132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b136:	3b04      	subs	r3, #4
 801b138:	f853 1f04 	ldr.w	r1, [r3, #4]!
 801b13c:	b921      	cbnz	r1, 801b148 <mbedtls_ssl_handshake_client_step+0x4c8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b13e:	4b5e      	ldr	r3, [pc, #376]	; (801b2b8 <mbedtls_ssl_handshake_client_step+0x638>)
 801b140:	9300      	str	r3, [sp, #0]
 801b142:	f240 63a9 	movw	r3, #1705	; 0x6a9
 801b146:	e7c7      	b.n	801b0d8 <mbedtls_ssl_handshake_client_step+0x458>
            ssl->session_negotiate->ciphersuite )
 801b148:	6b62      	ldr	r2, [r4, #52]	; 0x34
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 801b14a:	6890      	ldr	r0, [r2, #8]
 801b14c:	4281      	cmp	r1, r0
 801b14e:	d1f3      	bne.n	801b138 <mbedtls_ssl_handshake_client_step+0x4b8>
    ssl->session_negotiate->compression = comp;
 801b150:	2700      	movs	r7, #0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 801b152:	4b5c      	ldr	r3, [pc, #368]	; (801b2c4 <mbedtls_ssl_handshake_client_step+0x644>)
    ssl->session_negotiate->compression = comp;
 801b154:	60d7      	str	r7, [r2, #12]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 801b156:	2102      	movs	r1, #2
 801b158:	9300      	str	r3, [sp, #0]
 801b15a:	4a4e      	ldr	r2, [pc, #312]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801b15c:	f8cd b004 	str.w	fp, [sp, #4]
 801b160:	f240 63c5 	movw	r3, #1733	; 0x6c5
 801b164:	4620      	mov	r0, r4
 801b166:	f7f5 fcfd 	bl	8010b64 <mbedtls_debug_print_msg>
    ext = buf + 40 + n;
 801b16a:	3628      	adds	r6, #40	; 0x28
    int renegotiation_info_seen = 0;
 801b16c:	46b9      	mov	r9, r7
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found alpn extension" ) );
 801b16e:	4f49      	ldr	r7, [pc, #292]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
    ext = buf + 40 + n;
 801b170:	44b0      	add	r8, r6
    while( ext_len )
 801b172:	f1bb 0f00 	cmp.w	fp, #0
 801b176:	d111      	bne.n	801b19c <mbedtls_ssl_handshake_client_step+0x51c>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b178:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 801b17c:	2900      	cmp	r1, #0
 801b17e:	f040 81a9 	bne.w	801b4d4 <mbedtls_ssl_handshake_client_step+0x854>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 801b182:	6823      	ldr	r3, [r4, #0]
 801b184:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b188:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b18c:	2b20      	cmp	r3, #32
 801b18e:	f040 81a1 	bne.w	801b4d4 <mbedtls_ssl_handshake_client_step+0x854>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 801b192:	4b4d      	ldr	r3, [pc, #308]	; (801b2c8 <mbedtls_ssl_handshake_client_step+0x648>)
 801b194:	9300      	str	r3, [sp, #0]
 801b196:	f44f 63ec 	mov.w	r3, #1888	; 0x760
 801b19a:	e072      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 801b19c:	f8b8 6002 	ldrh.w	r6, [r8, #2]
 801b1a0:	f8b8 3000 	ldrh.w	r3, [r8]
 801b1a4:	ba76      	rev16	r6, r6
 801b1a6:	b2b6      	uxth	r6, r6
        if( ext_size + 4 > ext_len )
 801b1a8:	1d32      	adds	r2, r6, #4
 801b1aa:	ba5b      	rev16	r3, r3
 801b1ac:	455a      	cmp	r2, fp
 801b1ae:	b29b      	uxth	r3, r3
 801b1b0:	920a      	str	r2, [sp, #40]	; 0x28
 801b1b2:	d904      	bls.n	801b1be <mbedtls_ssl_handshake_client_step+0x53e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b1b4:	4b40      	ldr	r3, [pc, #256]	; (801b2b8 <mbedtls_ssl_handshake_client_step+0x638>)
 801b1b6:	9300      	str	r3, [sp, #0]
 801b1b8:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
 801b1bc:	e606      	b.n	801adcc <mbedtls_ssl_handshake_client_step+0x14c>
        switch( ext_id )
 801b1be:	2b10      	cmp	r3, #16
 801b1c0:	f000 8144 	beq.w	801b44c <mbedtls_ssl_handshake_client_step+0x7cc>
 801b1c4:	dc10      	bgt.n	801b1e8 <mbedtls_ssl_handshake_client_step+0x568>
 801b1c6:	2b04      	cmp	r3, #4
 801b1c8:	f000 80c6 	beq.w	801b358 <mbedtls_ssl_handshake_client_step+0x6d8>
 801b1cc:	2b0b      	cmp	r3, #11
 801b1ce:	f000 810c 	beq.w	801b3ea <mbedtls_ssl_handshake_client_step+0x76a>
 801b1d2:	2b01      	cmp	r3, #1
 801b1d4:	f000 80a4 	beq.w	801b320 <mbedtls_ssl_handshake_client_step+0x6a0>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 801b1d8:	9301      	str	r3, [sp, #4]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 801b1da:	4b3c      	ldr	r3, [pc, #240]	; (801b2cc <mbedtls_ssl_handshake_client_step+0x64c>)
 801b1dc:	9300      	str	r3, [sp, #0]
 801b1de:	463a      	mov	r2, r7
 801b1e0:	f240 734c 	movw	r3, #1868	; 0x74c
 801b1e4:	2103      	movs	r1, #3
 801b1e6:	e12b      	b.n	801b440 <mbedtls_ssl_handshake_client_step+0x7c0>
        switch( ext_id )
 801b1e8:	2b23      	cmp	r3, #35	; 0x23
 801b1ea:	f000 80e5 	beq.w	801b3b8 <mbedtls_ssl_handshake_client_step+0x738>
 801b1ee:	f64f 7201 	movw	r2, #65281	; 0xff01
 801b1f2:	4293      	cmp	r3, r2
 801b1f4:	d019      	beq.n	801b22a <mbedtls_ssl_handshake_client_step+0x5aa>
 801b1f6:	2b17      	cmp	r3, #23
 801b1f8:	d1ee      	bne.n	801b1d8 <mbedtls_ssl_handshake_client_step+0x558>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found extended_master_secret extension" ) );
 801b1fa:	4b35      	ldr	r3, [pc, #212]	; (801b2d0 <mbedtls_ssl_handshake_client_step+0x650>)
 801b1fc:	9300      	str	r3, [sp, #0]
 801b1fe:	463a      	mov	r2, r7
 801b200:	f240 730d 	movw	r3, #1805	; 0x70d
 801b204:	2103      	movs	r1, #3
 801b206:	4620      	mov	r0, r4
 801b208:	f7f5 fcac 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801b20c:	6823      	ldr	r3, [r4, #0]
 801b20e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b212:	079a      	lsls	r2, r3, #30
 801b214:	d504      	bpl.n	801b220 <mbedtls_ssl_handshake_client_step+0x5a0>
 801b216:	6963      	ldr	r3, [r4, #20]
 801b218:	b113      	cbz	r3, 801b220 <mbedtls_ssl_handshake_client_step+0x5a0>
        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||
 801b21a:	2e00      	cmp	r6, #0
 801b21c:	f000 80c7 	beq.w	801b3ae <mbedtls_ssl_handshake_client_step+0x72e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching extended master secret extension" ) );
 801b220:	4b2c      	ldr	r3, [pc, #176]	; (801b2d4 <mbedtls_ssl_handshake_client_step+0x654>)
 801b222:	9300      	str	r3, [sp, #0]
 801b224:	f240 4393 	movw	r3, #1171	; 0x493
 801b228:	e02b      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 801b22a:	4b2b      	ldr	r3, [pc, #172]	; (801b2d8 <mbedtls_ssl_handshake_client_step+0x658>)
 801b22c:	9300      	str	r3, [sp, #0]
 801b22e:	463a      	mov	r2, r7
 801b230:	f240 63d9 	movw	r3, #1753	; 0x6d9
 801b234:	2103      	movs	r1, #3
 801b236:	4620      	mov	r0, r4
 801b238:	f7f5 fc94 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801b23c:	68a3      	ldr	r3, [r4, #8]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d05f      	beq.n	801b302 <mbedtls_ssl_handshake_client_step+0x682>
        if( len    != 1 + ssl->verify_data_len * 2 ||
 801b242:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801b246:	0059      	lsls	r1, r3, #1
 801b248:	1c4a      	adds	r2, r1, #1
 801b24a:	4296      	cmp	r6, r2
 801b24c:	d115      	bne.n	801b27a <mbedtls_ssl_handshake_client_step+0x5fa>
            buf[0] !=     ssl->verify_data_len * 2 ||
 801b24e:	f898 2004 	ldrb.w	r2, [r8, #4]
        if( len    != 1 + ssl->verify_data_len * 2 ||
 801b252:	4291      	cmp	r1, r2
 801b254:	d111      	bne.n	801b27a <mbedtls_ssl_handshake_client_step+0x5fa>
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 801b256:	1d18      	adds	r0, r3, #4
 801b258:	f108 0c04 	add.w	ip, r8, #4
 801b25c:	f104 09c3 	add.w	r9, r4, #195	; 0xc3
 801b260:	4440      	add	r0, r8
    unsigned char diff = 0;
 801b262:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
 801b264:	4584      	cmp	ip, r0
 801b266:	d13b      	bne.n	801b2e0 <mbedtls_ssl_handshake_client_step+0x660>
            buf[0] !=     ssl->verify_data_len * 2 ||
 801b268:	b93a      	cbnz	r2, 801b27a <mbedtls_ssl_handshake_client_step+0x5fa>
 801b26a:	4443      	add	r3, r8
 801b26c:	f104 0ccf 	add.w	ip, r4, #207	; 0xcf
 801b270:	4441      	add	r1, r8
 801b272:	428b      	cmp	r3, r1
 801b274:	d13d      	bne.n	801b2f2 <mbedtls_ssl_handshake_client_step+0x672>
                          ssl->own_verify_data, ssl->verify_data_len ) != 0 ||
 801b276:	2a00      	cmp	r2, #0
 801b278:	d04f      	beq.n	801b31a <mbedtls_ssl_handshake_client_step+0x69a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching renegotiation info" ) );
 801b27a:	4b18      	ldr	r3, [pc, #96]	; (801b2dc <mbedtls_ssl_handshake_client_step+0x65c>)
 801b27c:	9300      	str	r3, [sp, #0]
 801b27e:	f240 432f 	movw	r3, #1071	; 0x42f
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 801b282:	4a04      	ldr	r2, [pc, #16]	; (801b294 <mbedtls_ssl_handshake_client_step+0x614>)
 801b284:	2101      	movs	r1, #1
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
 801b286:	4620      	mov	r0, r4
 801b288:	f7f5 fc6c 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b28c:	2228      	movs	r2, #40	; 0x28
 801b28e:	e5a3      	b.n	801add8 <mbedtls_ssl_handshake_client_step+0x158>
 801b290:	08031587 	.word	0x08031587
 801b294:	08030f75 	.word	0x08030f75
 801b298:	ffff8f00 	.word	0xffff8f00
 801b29c:	080315ab 	.word	0x080315ab
 801b2a0:	080315cd 	.word	0x080315cd
 801b2a4:	08031416 	.word	0x08031416
 801b2a8:	08032aa1 	.word	0x08032aa1
 801b2ac:	080315fe 	.word	0x080315fe
 801b2b0:	0803161a 	.word	0x0803161a
 801b2b4:	08031641 	.word	0x08031641
 801b2b8:	080314af 	.word	0x080314af
 801b2bc:	080315e6 	.word	0x080315e6
 801b2c0:	08031661 	.word	0x08031661
 801b2c4:	08031686 	.word	0x08031686
 801b2c8:	08031917 	.word	0x08031917
 801b2cc:	080318f0 	.word	0x080318f0
 801b2d0:	080317a4 	.word	0x080317a4
 801b2d4:	080317cb 	.word	0x080317cb
 801b2d8:	080316af 	.word	0x080316af
 801b2dc:	080316cd 	.word	0x080316cd
        diff |= A[i] ^ B[i];
 801b2e0:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801b2e4:	f819 af01 	ldrb.w	sl, [r9, #1]!
 801b2e8:	ea8e 0e0a 	eor.w	lr, lr, sl
 801b2ec:	ea42 020e 	orr.w	r2, r2, lr
    for( i = 0; i < n; i++ )
 801b2f0:	e7b8      	b.n	801b264 <mbedtls_ssl_handshake_client_step+0x5e4>
        diff |= A[i] ^ B[i];
 801b2f2:	7958      	ldrb	r0, [r3, #5]
 801b2f4:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801b2f8:	ea80 000e 	eor.w	r0, r0, lr
 801b2fc:	4302      	orrs	r2, r0
    for( i = 0; i < n; i++ )
 801b2fe:	3301      	adds	r3, #1
 801b300:	e7b7      	b.n	801b272 <mbedtls_ssl_handshake_client_step+0x5f2>
        if( len != 1 || buf[0] != 0x00 )
 801b302:	2e01      	cmp	r6, #1
 801b304:	d102      	bne.n	801b30c <mbedtls_ssl_handshake_client_step+0x68c>
 801b306:	f898 3004 	ldrb.w	r3, [r8, #4]
 801b30a:	b123      	cbz	r3, 801b316 <mbedtls_ssl_handshake_client_step+0x696>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 801b30c:	4bb0      	ldr	r3, [pc, #704]	; (801b5d0 <mbedtls_ssl_handshake_client_step+0x950>)
 801b30e:	9300      	str	r3, [sp, #0]
 801b310:	f240 433a 	movw	r3, #1082	; 0x43a
 801b314:	e7b5      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 801b316:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
            renegotiation_info_seen = 1;
 801b31a:	f04f 0901 	mov.w	r9, #1
 801b31e:	e032      	b.n	801b386 <mbedtls_ssl_handshake_client_step+0x706>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found max_fragment_length extension" ) );
 801b320:	4bac      	ldr	r3, [pc, #688]	; (801b5d4 <mbedtls_ssl_handshake_client_step+0x954>)
 801b322:	9300      	str	r3, [sp, #0]
 801b324:	463a      	mov	r2, r7
 801b326:	f240 63e6 	movw	r3, #1766	; 0x6e6
 801b32a:	2103      	movs	r1, #3
 801b32c:	4620      	mov	r0, r4
 801b32e:	f7f5 fc19 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 801b332:	6823      	ldr	r3, [r4, #0]
 801b334:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801b338:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 801b33c:	b13a      	cbz	r2, 801b34e <mbedtls_ssl_handshake_client_step+0x6ce>
 801b33e:	2e01      	cmp	r6, #1
 801b340:	d105      	bne.n	801b34e <mbedtls_ssl_handshake_client_step+0x6ce>
        len != 1 ||
 801b342:	f898 2004 	ldrb.w	r2, [r8, #4]
 801b346:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801b34a:	429a      	cmp	r2, r3
 801b34c:	d01b      	beq.n	801b386 <mbedtls_ssl_handshake_client_step+0x706>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching max fragment length extension" ) );
 801b34e:	4ba2      	ldr	r3, [pc, #648]	; (801b5d8 <mbedtls_ssl_handshake_client_step+0x958>)
 801b350:	9300      	str	r3, [sp, #0]
 801b352:	f240 4353 	movw	r3, #1107	; 0x453
 801b356:	e794      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found truncated_hmac extension" ) );
 801b358:	4ba0      	ldr	r3, [pc, #640]	; (801b5dc <mbedtls_ssl_handshake_client_step+0x95c>)
 801b35a:	9300      	str	r3, [sp, #0]
 801b35c:	2103      	movs	r1, #3
 801b35e:	f240 63f3 	movw	r3, #1779	; 0x6f3
 801b362:	463a      	mov	r2, r7
 801b364:	4620      	mov	r0, r4
 801b366:	f7f5 fbfd 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED ||
 801b36a:	6823      	ldr	r3, [r4, #0]
 801b36c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b370:	0719      	lsls	r1, r3, #28
 801b372:	d500      	bpl.n	801b376 <mbedtls_ssl_handshake_client_step+0x6f6>
 801b374:	b126      	cbz	r6, 801b380 <mbedtls_ssl_handshake_client_step+0x700>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching truncated HMAC extension" ) );
 801b376:	4b9a      	ldr	r3, [pc, #616]	; (801b5e0 <mbedtls_ssl_handshake_client_step+0x960>)
 801b378:	9300      	str	r3, [sp, #0]
 801b37a:	f240 4365 	movw	r3, #1125	; 0x465
 801b37e:	e780      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
    ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;
 801b380:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b382:	2201      	movs	r2, #1
 801b384:	67da      	str	r2, [r3, #124]	; 0x7c
        ext_len -= 4 + ext_size;
 801b386:	ebab 0606 	sub.w	r6, fp, r6
        ext += 4 + ext_size;
 801b38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        ext_len -= 4 + ext_size;
 801b38c:	f1a6 0b04 	sub.w	fp, r6, #4
        if( ext_len > 0 && ext_len < 4 )
 801b390:	3e05      	subs	r6, #5
 801b392:	2e02      	cmp	r6, #2
        ext += 4 + ext_size;
 801b394:	4498      	add	r8, r3
        if( ext_len > 0 && ext_len < 4 )
 801b396:	f63f aeec 	bhi.w	801b172 <mbedtls_ssl_handshake_client_step+0x4f2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b39a:	4b92      	ldr	r3, [pc, #584]	; (801b5e4 <mbedtls_ssl_handshake_client_step+0x964>)
 801b39c:	9300      	str	r3, [sp, #0]
 801b39e:	4a92      	ldr	r2, [pc, #584]	; (801b5e8 <mbedtls_ssl_handshake_client_step+0x968>)
 801b3a0:	f240 7355 	movw	r3, #1877	; 0x755
 801b3a4:	2101      	movs	r1, #1
 801b3a6:	4620      	mov	r0, r4
 801b3a8:	f7f5 fbdc 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801b3ac:	e518      	b.n	801ade0 <mbedtls_ssl_handshake_client_step+0x160>
    ssl->handshake->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
 801b3ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b3b0:	2201      	movs	r2, #1
 801b3b2:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    return( 0 );
 801b3b6:	e7e6      	b.n	801b386 <mbedtls_ssl_handshake_client_step+0x706>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found session_ticket extension" ) );
 801b3b8:	4b8c      	ldr	r3, [pc, #560]	; (801b5ec <mbedtls_ssl_handshake_client_step+0x96c>)
 801b3ba:	9300      	str	r3, [sp, #0]
 801b3bc:	463a      	mov	r2, r7
 801b3be:	f240 731a 	movw	r3, #1818	; 0x71a
 801b3c2:	2103      	movs	r1, #3
 801b3c4:	4620      	mov	r0, r4
 801b3c6:	f7f5 fbcd 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 801b3ca:	6823      	ldr	r3, [r4, #0]
 801b3cc:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b3d0:	06db      	lsls	r3, r3, #27
 801b3d2:	d500      	bpl.n	801b3d6 <mbedtls_ssl_handshake_client_step+0x756>
 801b3d4:	b126      	cbz	r6, 801b3e0 <mbedtls_ssl_handshake_client_step+0x760>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching session ticket extension" ) );
 801b3d6:	4b86      	ldr	r3, [pc, #536]	; (801b5f0 <mbedtls_ssl_handshake_client_step+0x970>)
 801b3d8:	9300      	str	r3, [sp, #0]
 801b3da:	f240 43a9 	movw	r3, #1193	; 0x4a9
 801b3de:	e750      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
    ssl->handshake->new_session_ticket = 1;
 801b3e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b3e2:	2201      	movs	r2, #1
 801b3e4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return( 0 );
 801b3e8:	e7cd      	b.n	801b386 <mbedtls_ssl_handshake_client_step+0x706>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported_point_formats extension" ) );
 801b3ea:	4b82      	ldr	r3, [pc, #520]	; (801b5f4 <mbedtls_ssl_handshake_client_step+0x974>)
 801b3ec:	9300      	str	r3, [sp, #0]
 801b3ee:	463a      	mov	r2, r7
 801b3f0:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 801b3f4:	2103      	movs	r1, #3
 801b3f6:	4620      	mov	r0, r4
 801b3f8:	f7f5 fbb4 	bl	8010b64 <mbedtls_debug_print_msg>
    list_size = buf[0];
 801b3fc:	f898 3004 	ldrb.w	r3, [r8, #4]
    if( list_size + 1 != len )
 801b400:	1c5a      	adds	r2, r3, #1
 801b402:	4296      	cmp	r6, r2
 801b404:	d004      	beq.n	801b410 <mbedtls_ssl_handshake_client_step+0x790>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b406:	4b77      	ldr	r3, [pc, #476]	; (801b5e4 <mbedtls_ssl_handshake_client_step+0x964>)
 801b408:	9300      	str	r3, [sp, #0]
 801b40a:	f240 43c3 	movw	r3, #1219	; 0x4c3
 801b40e:	e4dd      	b.n	801adcc <mbedtls_ssl_handshake_client_step+0x14c>
    while( list_size > 0 )
 801b410:	f108 0205 	add.w	r2, r8, #5
 801b414:	4610      	mov	r0, r2
 801b416:	b923      	cbnz	r3, 801b422 <mbedtls_ssl_handshake_client_step+0x7a2>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
 801b418:	4b77      	ldr	r3, [pc, #476]	; (801b5f8 <mbedtls_ssl_handshake_client_step+0x978>)
 801b41a:	9300      	str	r3, [sp, #0]
 801b41c:	f240 43dd 	movw	r3, #1245	; 0x4dd
 801b420:	e72f      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
 801b422:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b426:	2901      	cmp	r1, #1
 801b428:	d80e      	bhi.n	801b448 <mbedtls_ssl_handshake_client_step+0x7c8>
            ssl->handshake->ecdh_ctx.point_format = p[0];
 801b42a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b42c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
 801b430:	7803      	ldrb	r3, [r0, #0]
 801b432:	9301      	str	r3, [sp, #4]
 801b434:	4b71      	ldr	r3, [pc, #452]	; (801b5fc <mbedtls_ssl_handshake_client_step+0x97c>)
 801b436:	9300      	str	r3, [sp, #0]
 801b438:	463a      	mov	r2, r7
 801b43a:	f240 43d5 	movw	r3, #1237	; 0x4d5
 801b43e:	2104      	movs	r1, #4
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 801b440:	4620      	mov	r0, r4
 801b442:	f7f5 fb8f 	bl	8010b64 <mbedtls_debug_print_msg>
 801b446:	e79e      	b.n	801b386 <mbedtls_ssl_handshake_client_step+0x706>
        list_size--;
 801b448:	3b01      	subs	r3, #1
        p++;
 801b44a:	e7e3      	b.n	801b414 <mbedtls_ssl_handshake_client_step+0x794>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found alpn extension" ) );
 801b44c:	4b6c      	ldr	r3, [pc, #432]	; (801b600 <mbedtls_ssl_handshake_client_step+0x980>)
 801b44e:	9300      	str	r3, [sp, #0]
 801b450:	2103      	movs	r1, #3
 801b452:	f240 7343 	movw	r3, #1859	; 0x743
 801b456:	463a      	mov	r2, r7
 801b458:	4620      	mov	r0, r4
 801b45a:	f7f5 fb83 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->conf->alpn_list == NULL )
 801b45e:	6823      	ldr	r3, [r4, #0]
 801b460:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801b462:	b921      	cbnz	r1, 801b46e <mbedtls_ssl_handshake_client_step+0x7ee>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching ALPN extension" ) );
 801b464:	4b67      	ldr	r3, [pc, #412]	; (801b604 <mbedtls_ssl_handshake_client_step+0x984>)
 801b466:	9300      	str	r3, [sp, #0]
 801b468:	f240 530f 	movw	r3, #1295	; 0x50f
 801b46c:	e709      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
    if( len < 4 )
 801b46e:	2e03      	cmp	r6, #3
 801b470:	f67f acb1 	bls.w	801add6 <mbedtls_ssl_handshake_client_step+0x156>
    list_len = ( buf[0] << 8 ) | buf[1];
 801b474:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801b478:	ba5b      	rev16	r3, r3
 801b47a:	b29b      	uxth	r3, r3
    if( list_len != len - 2 )
 801b47c:	1eb2      	subs	r2, r6, #2
 801b47e:	4293      	cmp	r3, r2
 801b480:	f47f aca9 	bne.w	801add6 <mbedtls_ssl_handshake_client_step+0x156>
    name_len = buf[2];
 801b484:	f898 a006 	ldrb.w	sl, [r8, #6]
    if( name_len != list_len - 1 )
 801b488:	1ef3      	subs	r3, r6, #3
 801b48a:	459a      	cmp	sl, r3
 801b48c:	f47f aca3 	bne.w	801add6 <mbedtls_ssl_handshake_client_step+0x156>
 801b490:	1f0b      	subs	r3, r1, #4
 801b492:	9309      	str	r3, [sp, #36]	; 0x24
            memcmp( buf + 3, *p, name_len ) == 0 )
 801b494:	f108 0307 	add.w	r3, r8, #7
 801b498:	ee08 3a10 	vmov	s16, r3
    for( p = ssl->conf->alpn_list; *p != NULL; p++ )
 801b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b49e:	f853 1f04 	ldr.w	r1, [r3, #4]!
 801b4a2:	9309      	str	r3, [sp, #36]	; 0x24
 801b4a4:	b921      	cbnz	r1, 801b4b0 <mbedtls_ssl_handshake_client_step+0x830>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "ALPN extension: no matching protocol" ) );
 801b4a6:	4b58      	ldr	r3, [pc, #352]	; (801b608 <mbedtls_ssl_handshake_client_step+0x988>)
 801b4a8:	9300      	str	r3, [sp, #0]
 801b4aa:	f240 5342 	movw	r3, #1346	; 0x542
 801b4ae:	e6e8      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
        if( name_len == strlen( *p ) &&
 801b4b0:	4608      	mov	r0, r1
 801b4b2:	910b      	str	r1, [sp, #44]	; 0x2c
 801b4b4:	f7e4 fe96 	bl	80001e4 <strlen>
 801b4b8:	4582      	cmp	sl, r0
 801b4ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b4bc:	d1ee      	bne.n	801b49c <mbedtls_ssl_handshake_client_step+0x81c>
            memcmp( buf + 3, *p, name_len ) == 0 )
 801b4be:	ee18 0a10 	vmov	r0, s16
 801b4c2:	4652      	mov	r2, sl
 801b4c4:	f006 ffce 	bl	8022464 <memcmp>
        if( name_len == strlen( *p ) &&
 801b4c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b4ca:	2800      	cmp	r0, #0
 801b4cc:	d1e6      	bne.n	801b49c <mbedtls_ssl_handshake_client_step+0x81c>
            ssl->alpn_chosen = *p;
 801b4ce:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
            return( 0 );
 801b4d2:	e758      	b.n	801b386 <mbedtls_ssl_handshake_client_step+0x706>
    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
 801b4d4:	68a0      	ldr	r0, [r4, #8]
 801b4d6:	2801      	cmp	r0, #1
 801b4d8:	d120      	bne.n	801b51c <mbedtls_ssl_handshake_client_step+0x89c>
 801b4da:	2901      	cmp	r1, #1
 801b4dc:	d108      	bne.n	801b4f0 <mbedtls_ssl_handshake_client_step+0x870>
             ssl->secure_renegotiation == MBEDTLS_SSL_SECURE_RENEGOTIATION &&
 801b4de:	f1b9 0f00 	cmp.w	r9, #0
 801b4e2:	d11b      	bne.n	801b51c <mbedtls_ssl_handshake_client_step+0x89c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension missing (secure)" ) );
 801b4e4:	4b49      	ldr	r3, [pc, #292]	; (801b60c <mbedtls_ssl_handshake_client_step+0x98c>)
 801b4e6:	9300      	str	r3, [sp, #0]
 801b4e8:	4a3f      	ldr	r2, [pc, #252]	; (801b5e8 <mbedtls_ssl_handshake_client_step+0x968>)
 801b4ea:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 801b4ee:	e6ca      	b.n	801b286 <mbedtls_ssl_handshake_client_step+0x606>
    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
 801b4f0:	b9a1      	cbnz	r1, 801b51c <mbedtls_ssl_handshake_client_step+0x89c>
             ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION )
 801b4f2:	6823      	ldr	r3, [r4, #0]
 801b4f4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b4f8:	f013 0f30 	tst.w	r3, #48	; 0x30
 801b4fc:	d104      	bne.n	801b508 <mbedtls_ssl_handshake_client_step+0x888>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation not allowed" ) );
 801b4fe:	4b44      	ldr	r3, [pc, #272]	; (801b610 <mbedtls_ssl_handshake_client_step+0x990>)
 801b500:	9300      	str	r3, [sp, #0]
 801b502:	f240 736f 	movw	r3, #1903	; 0x76f
 801b506:	e6bc      	b.n	801b282 <mbedtls_ssl_handshake_client_step+0x602>
             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b508:	f1b9 0f00 	cmp.w	r9, #0
 801b50c:	d006      	beq.n	801b51c <mbedtls_ssl_handshake_client_step+0x89c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
 801b50e:	4b41      	ldr	r3, [pc, #260]	; (801b614 <mbedtls_ssl_handshake_client_step+0x994>)
 801b510:	9300      	str	r3, [sp, #0]
 801b512:	4a35      	ldr	r2, [pc, #212]	; (801b5e8 <mbedtls_ssl_handshake_client_step+0x968>)
 801b514:	f240 7376 	movw	r3, #1910	; 0x776
 801b518:	4649      	mov	r1, r9
 801b51a:	e6b4      	b.n	801b286 <mbedtls_ssl_handshake_client_step+0x606>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 801b51c:	4b3e      	ldr	r3, [pc, #248]	; (801b618 <mbedtls_ssl_handshake_client_step+0x998>)
 801b51e:	9300      	str	r3, [sp, #0]
 801b520:	f240 7382 	movw	r3, #1922	; 0x782
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );
 801b524:	4a30      	ldr	r2, [pc, #192]	; (801b5e8 <mbedtls_ssl_handshake_client_step+0x968>)
 801b526:	2102      	movs	r1, #2
 801b528:	4620      	mov	r0, r4
 801b52a:	f7f5 fb1b 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801b52e:	f7ff bbe7 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
           ret = mbedtls_ssl_parse_certificate( ssl );
 801b532:	4620      	mov	r0, r4
 801b534:	f003 fd32 	bl	801ef9c <mbedtls_ssl_parse_certificate>
 801b538:	f7ff bbeb 	b.w	801ad12 <mbedtls_ssl_handshake_client_step+0x92>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b53c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 801b53e:	4a2a      	ldr	r2, [pc, #168]	; (801b5e8 <mbedtls_ssl_handshake_client_step+0x968>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b540:	f8d3 b000 	ldr.w	fp, [r3]
    unsigned char *p = NULL, *end = NULL;
 801b544:	2300      	movs	r3, #0
 801b546:	930c      	str	r3, [sp, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 801b548:	4b34      	ldr	r3, [pc, #208]	; (801b61c <mbedtls_ssl_handshake_client_step+0x99c>)
 801b54a:	9300      	str	r3, [sp, #0]
 801b54c:	2102      	movs	r1, #2
 801b54e:	f640 03d7 	movw	r3, #2263	; 0x8d7
 801b552:	4620      	mov	r0, r4
 801b554:	f7f5 fb06 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 801b558:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b55c:	2b01      	cmp	r3, #1
 801b55e:	d10d      	bne.n	801b57c <mbedtls_ssl_handshake_client_step+0x8fc>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 801b560:	4b2f      	ldr	r3, [pc, #188]	; (801b620 <mbedtls_ssl_handshake_client_step+0x9a0>)
 801b562:	9300      	str	r3, [sp, #0]
 801b564:	f640 03dc 	movw	r3, #2268	; 0x8dc
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801b568:	4a1f      	ldr	r2, [pc, #124]	; (801b5e8 <mbedtls_ssl_handshake_client_step+0x968>)
 801b56a:	2102      	movs	r1, #2
 801b56c:	4620      	mov	r0, r4
 801b56e:	f7f5 faf9 	bl	8010b64 <mbedtls_debug_print_msg>
        ssl->state++;
 801b572:	6863      	ldr	r3, [r4, #4]
 801b574:	3301      	adds	r3, #1
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801b576:	6063      	str	r3, [r4, #4]
           break;
 801b578:	f7ff bbc2 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b57c:	4620      	mov	r0, r4
 801b57e:	f002 fb9d 	bl	801dcbc <mbedtls_ssl_read_record>
 801b582:	4605      	mov	r5, r0
 801b584:	b130      	cbz	r0, 801b594 <mbedtls_ssl_handshake_client_step+0x914>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801b586:	4b27      	ldr	r3, [pc, #156]	; (801b624 <mbedtls_ssl_handshake_client_step+0x9a4>)
 801b588:	9300      	str	r3, [sp, #0]
 801b58a:	9001      	str	r0, [sp, #4]
 801b58c:	f640 03fc 	movw	r3, #2300	; 0x8fc
 801b590:	f7ff bbd5 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801b594:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b596:	2b16      	cmp	r3, #22
 801b598:	d005      	beq.n	801b5a6 <mbedtls_ssl_handshake_client_step+0x926>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b59a:	4b23      	ldr	r3, [pc, #140]	; (801b628 <mbedtls_ssl_handshake_client_step+0x9a8>)
 801b59c:	9300      	str	r3, [sp, #0]
 801b59e:	f640 1302 	movw	r3, #2306	; 0x902
 801b5a2:	f7ff bbfc 	b.w	801ad9e <mbedtls_ssl_handshake_client_step+0x11e>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 801b5a6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 801b5a8:	7833      	ldrb	r3, [r6, #0]
 801b5aa:	2b0c      	cmp	r3, #12
 801b5ac:	d046      	beq.n	801b63c <mbedtls_ssl_handshake_client_step+0x9bc>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801b5ae:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b5b2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b5b6:	2b05      	cmp	r3, #5
 801b5b8:	d13a      	bne.n	801b630 <mbedtls_ssl_handshake_client_step+0x9b0>
            ssl->keep_current_message = 1;
 801b5ba:	2301      	movs	r3, #1
 801b5bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->state++;
 801b5c0:	6863      	ldr	r3, [r4, #4]
 801b5c2:	3301      	adds	r3, #1
 801b5c4:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 801b5c6:	4b19      	ldr	r3, [pc, #100]	; (801b62c <mbedtls_ssl_handshake_client_step+0x9ac>)
 801b5c8:	9300      	str	r3, [sp, #0]
 801b5ca:	f640 232f 	movw	r3, #2607	; 0xa2f
 801b5ce:	e7a9      	b.n	801b524 <mbedtls_ssl_handshake_client_step+0x8a4>
 801b5d0:	080316ed 	.word	0x080316ed
 801b5d4:	08031710 	.word	0x08031710
 801b5d8:	08031734 	.word	0x08031734
 801b5dc:	0803175f 	.word	0x0803175f
 801b5e0:	0803177e 	.word	0x0803177e
 801b5e4:	080314af 	.word	0x080314af
 801b5e8:	08030f75 	.word	0x08030f75
 801b5ec:	080317f9 	.word	0x080317f9
 801b5f0:	08031818 	.word	0x08031818
 801b5f4:	0803183e 	.word	0x0803183e
 801b5f8:	08031880 	.word	0x08031880
 801b5fc:	08031866 	.word	0x08031866
 801b600:	0803189a 	.word	0x0803189a
 801b604:	080318af 	.word	0x080318af
 801b608:	080318cb 	.word	0x080318cb
 801b60c:	08031944 	.word	0x08031944
 801b610:	08031972 	.word	0x08031972
 801b614:	08031993 	.word	0x08031993
 801b618:	080319c1 	.word	0x080319c1
 801b61c:	080319d7 	.word	0x080319d7
 801b620:	080319f4 	.word	0x080319f4
 801b624:	08031440 	.word	0x08031440
 801b628:	08031a16 	.word	0x08031a16
 801b62c:	08031bf3 	.word	0x08031bf3
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 801b630:	4b9e      	ldr	r3, [pc, #632]	; (801b8ac <mbedtls_ssl_handshake_client_step+0xc2c>)
 801b632:	9300      	str	r3, [sp, #0]
 801b634:	f640 1317 	movw	r3, #2327	; 0x917
 801b638:	f7ff bbb1 	b.w	801ad9e <mbedtls_ssl_handshake_client_step+0x11e>
    end = ssl->in_msg + ssl->in_hslen;
 801b63c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b640:	1d32      	adds	r2, r6, #4
    end = ssl->in_msg + ssl->in_hslen;
 801b642:	441e      	add	r6, r3
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 801b644:	3b04      	subs	r3, #4
 801b646:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801b64a:	4b99      	ldr	r3, [pc, #612]	; (801b8b0 <mbedtls_ssl_handshake_client_step+0xc30>)
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b64c:	920c      	str	r2, [sp, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 801b64e:	9300      	str	r3, [sp, #0]
 801b650:	4a98      	ldr	r2, [pc, #608]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b652:	f640 1321 	movw	r3, #2337	; 0x921
 801b656:	2103      	movs	r1, #3
 801b658:	4620      	mov	r0, r4
 801b65a:	f7f5 fae3 	bl	8010c24 <mbedtls_debug_print_buf>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 801b65e:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b662:	1eda      	subs	r2, r3, #3
 801b664:	2a01      	cmp	r2, #1
 801b666:	d901      	bls.n	801b66c <mbedtls_ssl_handshake_client_step+0x9ec>
 801b668:	2b08      	cmp	r3, #8
 801b66a:	d17f      	bne.n	801b76c <mbedtls_ssl_handshake_client_step+0xaec>
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
 801b66c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b66e:	4632      	mov	r2, r6
 801b670:	a90c      	add	r1, sp, #48	; 0x30
 801b672:	3004      	adds	r0, #4
 801b674:	f7f5 fce9 	bl	801104a <mbedtls_ecdh_read_params>
 801b678:	b1d0      	cbz	r0, 801b6b0 <mbedtls_ssl_handshake_client_step+0xa30>
        MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ecdh_read_params" ), ret );
 801b67a:	4b8f      	ldr	r3, [pc, #572]	; (801b8b8 <mbedtls_ssl_handshake_client_step+0xc38>)
 801b67c:	9001      	str	r0, [sp, #4]
 801b67e:	9300      	str	r3, [sp, #0]
 801b680:	4a8c      	ldr	r2, [pc, #560]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b682:	f240 73e6 	movw	r3, #2022	; 0x7e6
 801b686:	2101      	movs	r1, #1
 801b688:	4620      	mov	r0, r4
 801b68a:	f7f5 fa9b 	bl	8010bc4 <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b68e:	4b8b      	ldr	r3, [pc, #556]	; (801b8bc <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b690:	4a88      	ldr	r2, [pc, #544]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b692:	9300      	str	r3, [sp, #0]
 801b694:	2101      	movs	r1, #1
 801b696:	f640 1354 	movw	r3, #2388	; 0x954
 801b69a:	4620      	mov	r0, r4
 801b69c:	f7f5 fa62 	bl	8010b64 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b6a0:	222f      	movs	r2, #47	; 0x2f
 801b6a2:	2102      	movs	r1, #2
 801b6a4:	4620      	mov	r0, r4
 801b6a6:	f001 fef3 	bl	801d490 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b6aa:	4d85      	ldr	r5, [pc, #532]	; (801b8c0 <mbedtls_ssl_handshake_client_step+0xc40>)
 801b6ac:	f7ff bb28 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    curve_info = mbedtls_ecp_curve_info_from_grp_id( ssl->handshake->ecdh_ctx.grp.id );
 801b6b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b6b2:	7918      	ldrb	r0, [r3, #4]
 801b6b4:	f7f6 fcec 	bl	8012090 <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
 801b6b8:	b990      	cbnz	r0, 801b6e0 <mbedtls_ssl_handshake_client_step+0xa60>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b6ba:	4b82      	ldr	r3, [pc, #520]	; (801b8c4 <mbedtls_ssl_handshake_client_step+0xc44>)
 801b6bc:	9300      	str	r3, [sp, #0]
 801b6be:	4a7d      	ldr	r2, [pc, #500]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b6c0:	f240 73ba 	movw	r3, #1978	; 0x7ba
 801b6c4:	2101      	movs	r1, #1
 801b6c6:	4620      	mov	r0, r4
 801b6c8:	f7f5 fa4c 	bl	8010b64 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message (ECDHE curve)" ) );
 801b6cc:	4b7e      	ldr	r3, [pc, #504]	; (801b8c8 <mbedtls_ssl_handshake_client_step+0xc48>)
 801b6ce:	9300      	str	r3, [sp, #0]
 801b6d0:	4a78      	ldr	r2, [pc, #480]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b6d2:	f240 73ec 	movw	r3, #2028	; 0x7ec
 801b6d6:	2101      	movs	r1, #1
 801b6d8:	4620      	mov	r0, r4
 801b6da:	f7f5 fa43 	bl	8010b64 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b6de:	e7d6      	b.n	801b68e <mbedtls_ssl_handshake_client_step+0xa0e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDH curve: %s", curve_info->name ) );
 801b6e0:	6883      	ldr	r3, [r0, #8]
 801b6e2:	9301      	str	r3, [sp, #4]
 801b6e4:	4b79      	ldr	r3, [pc, #484]	; (801b8cc <mbedtls_ssl_handshake_client_step+0xc4c>)
 801b6e6:	9300      	str	r3, [sp, #0]
 801b6e8:	2102      	movs	r1, #2
 801b6ea:	f240 73be 	movw	r3, #1982	; 0x7be
 801b6ee:	4620      	mov	r0, r4
 801b6f0:	4a70      	ldr	r2, [pc, #448]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b6f2:	f7f5 fa37 	bl	8010b64 <mbedtls_debug_print_msg>
    if( mbedtls_ssl_check_curve( ssl, ssl->handshake->ecdh_ctx.grp.id ) != 0 )
 801b6f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b6f8:	4620      	mov	r0, r4
 801b6fa:	7919      	ldrb	r1, [r3, #4]
 801b6fc:	f003 fbf8 	bl	801eef0 <mbedtls_ssl_check_curve>
 801b700:	2800      	cmp	r0, #0
 801b702:	d1e3      	bne.n	801b6cc <mbedtls_ssl_handshake_client_step+0xa4c>
    MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Qp", &ssl->handshake->ecdh_ctx.Qp );
 801b704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b706:	4a6b      	ldr	r2, [pc, #428]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b708:	33b0      	adds	r3, #176	; 0xb0
 801b70a:	9301      	str	r3, [sp, #4]
 801b70c:	4b70      	ldr	r3, [pc, #448]	; (801b8d0 <mbedtls_ssl_handshake_client_step+0xc50>)
 801b70e:	9300      	str	r3, [sp, #0]
 801b710:	2103      	movs	r1, #3
 801b712:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 801b716:	4620      	mov	r0, r4
 801b718:	f7f5 fb6e 	bl	8010df8 <mbedtls_debug_print_ecp>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801b71c:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b720:	3b02      	subs	r3, #2
 801b722:	2b02      	cmp	r3, #2
 801b724:	f63f af4c 	bhi.w	801b5c0 <mbedtls_ssl_handshake_client_step+0x940>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801b728:	6963      	ldr	r3, [r4, #20]
 801b72a:	2b03      	cmp	r3, #3
 801b72c:	d16e      	bne.n	801b80c <mbedtls_ssl_handshake_client_step+0xb8c>
        size_t params_len = p - params;
 801b72e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    if( (*p) + 2 > end )
 801b732:	f10a 0302 	add.w	r3, sl, #2
 801b736:	429e      	cmp	r6, r3
 801b738:	d313      	bcc.n	801b762 <mbedtls_ssl_handshake_client_step+0xae2>
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 801b73a:	f89a 0000 	ldrb.w	r0, [sl]
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b73e:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 801b742:	f003 fbc7 	bl	801eed4 <mbedtls_ssl_md_alg_from_hash>
 801b746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b748:	4607      	mov	r7, r0
 801b74a:	b9d8      	cbnz	r0, 801b784 <mbedtls_ssl_handshake_client_step+0xb04>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Server used unsupported "
 801b74c:	781b      	ldrb	r3, [r3, #0]
 801b74e:	9301      	str	r3, [sp, #4]
 801b750:	4b60      	ldr	r3, [pc, #384]	; (801b8d4 <mbedtls_ssl_handshake_client_step+0xc54>)
 801b752:	9300      	str	r3, [sp, #0]
 801b754:	f640 0384 	movw	r3, #2180	; 0x884
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used HashAlgorithm %d that was not offered",
 801b758:	4a56      	ldr	r2, [pc, #344]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b75a:	2101      	movs	r1, #1
 801b75c:	4620      	mov	r0, r4
 801b75e:	f7f5 fa01 	bl	8010b64 <mbedtls_debug_print_msg>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b762:	4b56      	ldr	r3, [pc, #344]	; (801b8bc <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b764:	9300      	str	r3, [sp, #0]
 801b766:	f640 1385 	movw	r3, #2437	; 0x985
 801b76a:	e048      	b.n	801b7fe <mbedtls_ssl_handshake_client_step+0xb7e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b76c:	4b55      	ldr	r3, [pc, #340]	; (801b8c4 <mbedtls_ssl_handshake_client_step+0xc44>)
 801b76e:	9300      	str	r3, [sp, #0]
 801b770:	f640 136e 	movw	r3, #2414	; 0x96e
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b774:	4a4f      	ldr	r2, [pc, #316]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b776:	4d58      	ldr	r5, [pc, #352]	; (801b8d8 <mbedtls_ssl_handshake_client_step+0xc58>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b778:	2101      	movs	r1, #1
 801b77a:	4620      	mov	r0, r4
 801b77c:	f7f5 f9f2 	bl	8010b64 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b780:	f7ff babe 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
 801b784:	7858      	ldrb	r0, [r3, #1]
 801b786:	f003 fb9e 	bl	801eec6 <mbedtls_ssl_pk_alg_from_sig>
 801b78a:	4680      	mov	r8, r0
 801b78c:	b938      	cbnz	r0, 801b79e <mbedtls_ssl_handshake_client_step+0xb1e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used unsupported "
 801b78e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b790:	785b      	ldrb	r3, [r3, #1]
 801b792:	9301      	str	r3, [sp, #4]
 801b794:	4b51      	ldr	r3, [pc, #324]	; (801b8dc <mbedtls_ssl_handshake_client_step+0xc5c>)
 801b796:	9300      	str	r3, [sp, #0]
 801b798:	f640 038e 	movw	r3, #2190	; 0x88e
 801b79c:	e7dc      	b.n	801b758 <mbedtls_ssl_handshake_client_step+0xad8>
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
 801b79e:	4639      	mov	r1, r7
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	f003 fbb3 	bl	801ef0c <mbedtls_ssl_check_sig_hash>
 801b7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7a8:	b130      	cbz	r0, 801b7b8 <mbedtls_ssl_handshake_client_step+0xb38>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used HashAlgorithm %d that was not offered",
 801b7aa:	781b      	ldrb	r3, [r3, #0]
 801b7ac:	9301      	str	r3, [sp, #4]
 801b7ae:	4b4c      	ldr	r3, [pc, #304]	; (801b8e0 <mbedtls_ssl_handshake_client_step+0xc60>)
 801b7b0:	9300      	str	r3, [sp, #0]
 801b7b2:	f640 0398 	movw	r3, #2200	; 0x898
 801b7b6:	e7cf      	b.n	801b758 <mbedtls_ssl_handshake_client_step+0xad8>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
 801b7b8:	785b      	ldrb	r3, [r3, #1]
 801b7ba:	9301      	str	r3, [sp, #4]
 801b7bc:	4b49      	ldr	r3, [pc, #292]	; (801b8e4 <mbedtls_ssl_handshake_client_step+0xc64>)
 801b7be:	4a3d      	ldr	r2, [pc, #244]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b7c0:	9300      	str	r3, [sp, #0]
 801b7c2:	2102      	movs	r1, #2
 801b7c4:	f640 039d 	movw	r3, #2205	; 0x89d
 801b7c8:	4620      	mov	r0, r4
 801b7ca:	f7f5 f9cb 	bl	8010b64 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
 801b7ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7d0:	4a38      	ldr	r2, [pc, #224]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b7d2:	781b      	ldrb	r3, [r3, #0]
 801b7d4:	9301      	str	r3, [sp, #4]
 801b7d6:	4b44      	ldr	r3, [pc, #272]	; (801b8e8 <mbedtls_ssl_handshake_client_step+0xc68>)
 801b7d8:	9300      	str	r3, [sp, #0]
 801b7da:	2102      	movs	r1, #2
 801b7dc:	f640 039e 	movw	r3, #2206	; 0x89e
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	f7f5 f9bf 	bl	8010b64 <mbedtls_debug_print_msg>
    *p += 2;
 801b7e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 801b7e8:	4658      	mov	r0, fp
    *p += 2;
 801b7ea:	3302      	adds	r3, #2
 801b7ec:	930c      	str	r3, [sp, #48]	; 0x30
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 801b7ee:	f7fe fd63 	bl	801a2b8 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
 801b7f2:	4540      	cmp	r0, r8
 801b7f4:	d017      	beq.n	801b826 <mbedtls_ssl_handshake_client_step+0xba6>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b7f6:	4b31      	ldr	r3, [pc, #196]	; (801b8bc <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b7f8:	9300      	str	r3, [sp, #0]
 801b7fa:	f640 138d 	movw	r3, #2445	; 0x98d
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b7fe:	4a2d      	ldr	r2, [pc, #180]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b800:	2101      	movs	r1, #1
 801b802:	4620      	mov	r0, r4
 801b804:	f7f5 f9ae 	bl	8010b64 <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b808:	222f      	movs	r2, #47	; 0x2f
 801b80a:	e021      	b.n	801b850 <mbedtls_ssl_handshake_client_step+0xbd0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b80c:	4b2d      	ldr	r3, [pc, #180]	; (801b8c4 <mbedtls_ssl_handshake_client_step+0xc44>)
 801b80e:	9300      	str	r3, [sp, #0]
 801b810:	4a28      	ldr	r2, [pc, #160]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b812:	4e31      	ldr	r6, [pc, #196]	; (801b8d8 <mbedtls_ssl_handshake_client_step+0xc58>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b814:	f640 13a2 	movw	r3, #2466	; 0x9a2
 801b818:	2101      	movs	r1, #1
 801b81a:	4620      	mov	r0, r4
 801b81c:	f7f5 f9a2 	bl	8010b64 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b820:	4635      	mov	r5, r6
 801b822:	f7ff ba6d 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
        sig_len = ( p[0] << 8 ) | p[1];
 801b826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b828:	f832 3b02 	ldrh.w	r3, [r2], #2
        p += 2;
 801b82c:	920c      	str	r2, [sp, #48]	; 0x30
        sig_len = ( p[0] << 8 ) | p[1];
 801b82e:	ba5b      	rev16	r3, r3
 801b830:	fa1f fb83 	uxth.w	fp, r3
        if( end != p + sig_len )
 801b834:	fa12 f383 	uxtah	r3, r2, r3
 801b838:	429e      	cmp	r6, r3
 801b83a:	d00f      	beq.n	801b85c <mbedtls_ssl_handshake_client_step+0xbdc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b83c:	4b1f      	ldr	r3, [pc, #124]	; (801b8bc <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b83e:	4a1d      	ldr	r2, [pc, #116]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b840:	9300      	str	r3, [sp, #0]
 801b842:	2101      	movs	r1, #1
 801b844:	f640 13ae 	movw	r3, #2478	; 0x9ae
 801b848:	4620      	mov	r0, r4
 801b84a:	f7f5 f98b 	bl	8010b64 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b84e:	2232      	movs	r2, #50	; 0x32
 801b850:	2102      	movs	r1, #2
 801b852:	4620      	mov	r0, r4
 801b854:	f001 fe1c 	bl	801d490 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b858:	4e19      	ldr	r6, [pc, #100]	; (801b8c0 <mbedtls_ssl_handshake_client_step+0xc40>)
 801b85a:	e7e1      	b.n	801b820 <mbedtls_ssl_handshake_client_step+0xba0>
        MBEDTLS_SSL_DEBUG_BUF( 3, "signature", p, sig_len );
 801b85c:	4b23      	ldr	r3, [pc, #140]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xc6c>)
 801b85e:	9300      	str	r3, [sp, #0]
 801b860:	2103      	movs	r1, #3
 801b862:	f640 13b4 	movw	r3, #2484	; 0x9b4
 801b866:	e9cd 2b01 	strd	r2, fp, [sp, #4]
 801b86a:	4620      	mov	r0, r4
 801b86c:	4a11      	ldr	r2, [pc, #68]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b86e:	f7f5 f9d9 	bl	8010c24 <mbedtls_debug_print_buf>
            mbedtls_md_init( &ctx );
 801b872:	a80d      	add	r0, sp, #52	; 0x34
 801b874:	f7f9 f86e 	bl	8014954 <mbedtls_md_init>
            if( ( ret = mbedtls_md_setup( &ctx,
 801b878:	4638      	mov	r0, r7
 801b87a:	f7f9 f85f 	bl	801493c <mbedtls_md_info_from_type>
 801b87e:	2200      	movs	r2, #0
 801b880:	4601      	mov	r1, r0
 801b882:	a80d      	add	r0, sp, #52	; 0x34
 801b884:	f7f9 f890 	bl	80149a8 <mbedtls_md_setup>
 801b888:	4606      	mov	r6, r0
 801b88a:	b398      	cbz	r0, 801b8f4 <mbedtls_ssl_handshake_client_step+0xc74>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 801b88c:	4b18      	ldr	r3, [pc, #96]	; (801b8f0 <mbedtls_ssl_handshake_client_step+0xc70>)
 801b88e:	9001      	str	r0, [sp, #4]
 801b890:	9300      	str	r3, [sp, #0]
 801b892:	4620      	mov	r0, r4
 801b894:	4a07      	ldr	r2, [pc, #28]	; (801b8b4 <mbedtls_ssl_handshake_client_step+0xc34>)
 801b896:	f640 13f7 	movw	r3, #2551	; 0x9f7
 801b89a:	2101      	movs	r1, #1
 801b89c:	f7f5 f992 	bl	8010bc4 <mbedtls_debug_print_ret>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b8a0:	2250      	movs	r2, #80	; 0x50
 801b8a2:	2102      	movs	r1, #2
 801b8a4:	4620      	mov	r0, r4
 801b8a6:	f001 fdf3 	bl	801d490 <mbedtls_ssl_send_alert_message>
                return( ret );
 801b8aa:	e7b9      	b.n	801b820 <mbedtls_ssl_handshake_client_step+0xba0>
 801b8ac:	08031a36 	.word	0x08031a36
 801b8b0:	08031bfc 	.word	0x08031bfc
 801b8b4:	08030f75 	.word	0x08030f75
 801b8b8:	08031a66 	.word	0x08031a66
 801b8bc:	08031a16 	.word	0x08031a16
 801b8c0:	ffff8500 	.word	0xffff8500
 801b8c4:	08031a7f 	.word	0x08031a7f
 801b8c8:	08031aab 	.word	0x08031aab
 801b8cc:	08031a93 	.word	0x08031a93
 801b8d0:	08031aa2 	.word	0x08031aa2
 801b8d4:	08031ad9 	.word	0x08031ad9
 801b8d8:	ffff9400 	.word	0xffff9400
 801b8dc:	08031b02 	.word	0x08031b02
 801b8e0:	08031b30 	.word	0x08031b30
 801b8e4:	08031b62 	.word	0x08031b62
 801b8e8:	08031b84 	.word	0x08031b84
 801b8ec:	08031ba1 	.word	0x08031ba1
 801b8f0:	08031bab 	.word	0x08031bab
            mbedtls_md_starts( &ctx );
 801b8f4:	a80d      	add	r0, sp, #52	; 0x34
 801b8f6:	f7f9 f879 	bl	80149ec <mbedtls_md_starts>
            mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 );
 801b8fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b8fc:	f109 0904 	add.w	r9, r9, #4
            mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 );
 801b900:	2240      	movs	r2, #64	; 0x40
 801b902:	f501 712b 	add.w	r1, r1, #684	; 0x2ac
 801b906:	a80d      	add	r0, sp, #52	; 0x34
 801b908:	f7f9 f87e 	bl	8014a08 <mbedtls_md_update>
            mbedtls_md_update( &ctx, params, params_len );
 801b90c:	ebaa 0209 	sub.w	r2, sl, r9
 801b910:	4649      	mov	r1, r9
 801b912:	a80d      	add	r0, sp, #52	; 0x34
            mbedtls_md_finish( &ctx, hash );
 801b914:	f10d 0940 	add.w	r9, sp, #64	; 0x40
            mbedtls_md_update( &ctx, params, params_len );
 801b918:	f7f9 f876 	bl	8014a08 <mbedtls_md_update>
            mbedtls_md_finish( &ctx, hash );
 801b91c:	4649      	mov	r1, r9
 801b91e:	a80d      	add	r0, sp, #52	; 0x34
 801b920:	f7f9 f880 	bl	8014a24 <mbedtls_md_finish>
            mbedtls_md_free( &ctx );
 801b924:	a80d      	add	r0, sp, #52	; 0x34
 801b926:	f7f9 f81b 	bl	8014960 <mbedtls_md_free>
        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen != 0 ? hashlen :
 801b92a:	4638      	mov	r0, r7
 801b92c:	f7f9 f806 	bl	801493c <mbedtls_md_info_from_type>
 801b930:	f7f9 f954 	bl	8014bdc <mbedtls_md_get_size>
 801b934:	4ba2      	ldr	r3, [pc, #648]	; (801bbc0 <mbedtls_ssl_handshake_client_step+0xf40>)
 801b936:	9300      	str	r3, [sp, #0]
 801b938:	e9cd 9001 	strd	r9, r0, [sp, #4]
 801b93c:	f640 230b 	movw	r3, #2571	; 0xa0b
 801b940:	4620      	mov	r0, r4
 801b942:	4aa0      	ldr	r2, [pc, #640]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
 801b944:	2103      	movs	r1, #3
 801b946:	f7f5 f96d 	bl	8010c24 <mbedtls_debug_print_buf>
        if( ssl->session_negotiate->peer_cert == NULL )
 801b94a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b94c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801b94e:	b978      	cbnz	r0, 801b970 <mbedtls_ssl_handshake_client_step+0xcf0>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801b950:	4b9d      	ldr	r3, [pc, #628]	; (801bbc8 <mbedtls_ssl_handshake_client_step+0xf48>)
 801b952:	4a9c      	ldr	r2, [pc, #624]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
 801b954:	9300      	str	r3, [sp, #0]
 801b956:	2102      	movs	r1, #2
 801b958:	f44f 6321 	mov.w	r3, #2576	; 0xa10
 801b95c:	4620      	mov	r0, r4
 801b95e:	f7f5 f901 	bl	8010b64 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b962:	2228      	movs	r2, #40	; 0x28
 801b964:	2102      	movs	r1, #2
 801b966:	4620      	mov	r0, r4
 801b968:	f001 fd92 	bl	801d490 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801b96c:	4e97      	ldr	r6, [pc, #604]	; (801bbcc <mbedtls_ssl_handshake_client_step+0xf4c>)
 801b96e:	e757      	b.n	801b820 <mbedtls_ssl_handshake_client_step+0xba0>
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
 801b970:	4641      	mov	r1, r8
 801b972:	30bc      	adds	r0, #188	; 0xbc
 801b974:	f7fa f8fc 	bl	8015b70 <mbedtls_pk_can_do>
 801b978:	b978      	cbnz	r0, 801b99a <mbedtls_ssl_handshake_client_step+0xd1a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b97a:	4b95      	ldr	r3, [pc, #596]	; (801bbd0 <mbedtls_ssl_handshake_client_step+0xf50>)
 801b97c:	4a91      	ldr	r2, [pc, #580]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
 801b97e:	9300      	str	r3, [sp, #0]
 801b980:	2101      	movs	r1, #1
 801b982:	f640 231b 	movw	r3, #2587	; 0xa1b
 801b986:	4620      	mov	r0, r4
 801b988:	f7f5 f8ec 	bl	8010b64 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b98c:	2228      	movs	r2, #40	; 0x28
 801b98e:	2102      	movs	r1, #2
 801b990:	4620      	mov	r0, r4
 801b992:	f001 fd7d 	bl	801d490 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801b996:	4e8f      	ldr	r6, [pc, #572]	; (801bbd4 <mbedtls_ssl_handshake_client_step+0xf54>)
 801b998:	e742      	b.n	801b820 <mbedtls_ssl_handshake_client_step+0xba0>
        if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,
 801b99a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b99c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801b99e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9a0:	9300      	str	r3, [sp, #0]
 801b9a2:	f8cd b004 	str.w	fp, [sp, #4]
 801b9a6:	4633      	mov	r3, r6
 801b9a8:	464a      	mov	r2, r9
 801b9aa:	4639      	mov	r1, r7
 801b9ac:	30bc      	adds	r0, #188	; 0xbc
 801b9ae:	f7fa f8e9 	bl	8015b84 <mbedtls_pk_verify>
 801b9b2:	4606      	mov	r6, r0
 801b9b4:	2800      	cmp	r0, #0
 801b9b6:	f43f ae03 	beq.w	801b5c0 <mbedtls_ssl_handshake_client_step+0x940>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b9ba:	2233      	movs	r2, #51	; 0x33
 801b9bc:	2102      	movs	r1, #2
 801b9be:	4620      	mov	r0, r4
 801b9c0:	f001 fd66 	bl	801d490 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_verify", ret );
 801b9c4:	4b84      	ldr	r3, [pc, #528]	; (801bbd8 <mbedtls_ssl_handshake_client_step+0xf58>)
 801b9c6:	9300      	str	r3, [sp, #0]
 801b9c8:	4a7e      	ldr	r2, [pc, #504]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
 801b9ca:	9601      	str	r6, [sp, #4]
 801b9cc:	f640 2326 	movw	r3, #2598	; 0xa26
 801b9d0:	2101      	movs	r1, #1
 801b9d2:	4620      	mov	r0, r4
 801b9d4:	f7f5 f8f6 	bl	8010bc4 <mbedtls_debug_print_ret>
            return( ret );
 801b9d8:	e722      	b.n	801b820 <mbedtls_ssl_handshake_client_step+0xba0>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b9da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 801b9dc:	4a79      	ldr	r2, [pc, #484]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b9de:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 801b9e0:	4b7e      	ldr	r3, [pc, #504]	; (801bbdc <mbedtls_ssl_handshake_client_step+0xf5c>)
 801b9e2:	9300      	str	r3, [sp, #0]
 801b9e4:	2102      	movs	r1, #2
 801b9e6:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	f7f5 f8ba 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
 801b9f0:	7ab3      	ldrb	r3, [r6, #10]
    switch( info->key_exchange )
 801b9f2:	2b04      	cmp	r3, #4
 801b9f4:	d80c      	bhi.n	801ba10 <mbedtls_ssl_handshake_client_step+0xd90>
 801b9f6:	b173      	cbz	r3, 801ba16 <mbedtls_ssl_handshake_client_step+0xd96>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b9f8:	4620      	mov	r0, r4
 801b9fa:	f002 f95f 	bl	801dcbc <mbedtls_ssl_read_record>
 801b9fe:	4605      	mov	r5, r0
 801ba00:	b170      	cbz	r0, 801ba20 <mbedtls_ssl_handshake_client_step+0xda0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ba02:	4b77      	ldr	r3, [pc, #476]	; (801bbe0 <mbedtls_ssl_handshake_client_step+0xf60>)
 801ba04:	9300      	str	r3, [sp, #0]
 801ba06:	9001      	str	r0, [sp, #4]
 801ba08:	f640 235b 	movw	r3, #2651	; 0xa5b
 801ba0c:	f7ff b997 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
 801ba10:	3b09      	subs	r3, #9
 801ba12:	2b01      	cmp	r3, #1
 801ba14:	d9f0      	bls.n	801b9f8 <mbedtls_ssl_handshake_client_step+0xd78>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 801ba16:	4b73      	ldr	r3, [pc, #460]	; (801bbe4 <mbedtls_ssl_handshake_client_step+0xf64>)
 801ba18:	9300      	str	r3, [sp, #0]
 801ba1a:	f640 2354 	movw	r3, #2644	; 0xa54
 801ba1e:	e5a3      	b.n	801b568 <mbedtls_ssl_handshake_client_step+0x8e8>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801ba20:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801ba22:	2b16      	cmp	r3, #22
 801ba24:	d005      	beq.n	801ba32 <mbedtls_ssl_handshake_client_step+0xdb2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801ba26:	4b70      	ldr	r3, [pc, #448]	; (801bbe8 <mbedtls_ssl_handshake_client_step+0xf68>)
 801ba28:	9300      	str	r3, [sp, #0]
 801ba2a:	f640 2361 	movw	r3, #2657	; 0xa61
 801ba2e:	f7ff b9b6 	b.w	801ad9e <mbedtls_ssl_handshake_client_step+0x11e>
    ssl->state++;
 801ba32:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 801ba34:	4a6d      	ldr	r2, [pc, #436]	; (801bbec <mbedtls_ssl_handshake_client_step+0xf6c>)
    ssl->state++;
 801ba36:	3301      	adds	r3, #1
 801ba38:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 801ba3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801ba3c:	781b      	ldrb	r3, [r3, #0]
 801ba3e:	2b0d      	cmp	r3, #13
 801ba40:	bf0c      	ite	eq
 801ba42:	2301      	moveq	r3, #1
 801ba44:	2300      	movne	r3, #0
 801ba46:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 801ba4a:	4b69      	ldr	r3, [pc, #420]	; (801bbf0 <mbedtls_ssl_handshake_client_step+0xf70>)
 801ba4c:	bf18      	it	ne
 801ba4e:	4613      	movne	r3, r2
 801ba50:	9301      	str	r3, [sp, #4]
 801ba52:	4b68      	ldr	r3, [pc, #416]	; (801bbf4 <mbedtls_ssl_handshake_client_step+0xf74>)
 801ba54:	9300      	str	r3, [sp, #0]
 801ba56:	4a5b      	ldr	r2, [pc, #364]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
 801ba58:	f640 236a 	movw	r3, #2666	; 0xa6a
 801ba5c:	2103      	movs	r1, #3
 801ba5e:	4620      	mov	r0, r4
 801ba60:	f7f5 f880 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->client_auth == 0 )
 801ba64:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801ba68:	b93b      	cbnz	r3, 801ba7a <mbedtls_ssl_handshake_client_step+0xdfa>
        ssl->keep_current_message = 1;
 801ba6a:	2301      	movs	r3, #1
 801ba6c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 801ba70:	4b61      	ldr	r3, [pc, #388]	; (801bbf8 <mbedtls_ssl_handshake_client_step+0xf78>)
 801ba72:	9300      	str	r3, [sp, #0]
 801ba74:	f640 23c5 	movw	r3, #2757	; 0xac5
 801ba78:	e554      	b.n	801b524 <mbedtls_ssl_handshake_client_step+0x8a4>
    buf = ssl->in_msg;
 801ba7a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801ba7e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 801ba82:	f898 6004 	ldrb.w	r6, [r8, #4]
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801ba86:	1db3      	adds	r3, r6, #6
 801ba88:	429a      	cmp	r2, r3
 801ba8a:	d210      	bcs.n	801baae <mbedtls_ssl_handshake_client_step+0xe2e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801ba8c:	4b56      	ldr	r3, [pc, #344]	; (801bbe8 <mbedtls_ssl_handshake_client_step+0xf68>)
 801ba8e:	9300      	str	r3, [sp, #0]
 801ba90:	f640 2394 	movw	r3, #2708	; 0xa94
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801ba94:	4a4b      	ldr	r2, [pc, #300]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 801ba96:	4d59      	ldr	r5, [pc, #356]	; (801bbfc <mbedtls_ssl_handshake_client_step+0xf7c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801ba98:	2101      	movs	r1, #1
 801ba9a:	4620      	mov	r0, r4
 801ba9c:	f7f5 f862 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801baa0:	2232      	movs	r2, #50	; 0x32
 801baa2:	2102      	movs	r1, #2
 801baa4:	4620      	mov	r0, r4
 801baa6:	f001 fcf3 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 801baaa:	f7ff b929 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801baae:	6962      	ldr	r2, [r4, #20]
 801bab0:	2a03      	cmp	r2, #3
 801bab2:	d12e      	bne.n	801bb12 <mbedtls_ssl_handshake_client_step+0xe92>
 801bab4:	eb08 0206 	add.w	r2, r8, r6
 801bab8:	f818 7003 	ldrb.w	r7, [r8, r3]
 801babc:	7952      	ldrb	r2, [r2, #5]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801babe:	f8df b150 	ldr.w	fp, [pc, #336]	; 801bc10 <mbedtls_ssl_handshake_client_step+0xf90>
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 801bac2:	f106 0907 	add.w	r9, r6, #7
 801bac6:	44c1      	add	r9, r8
 801bac8:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
        for( i = 0; i < sig_alg_len; i += 2 )
 801bacc:	464b      	mov	r3, r9
 801bace:	f103 0a02 	add.w	sl, r3, #2
 801bad2:	eba3 0309 	sub.w	r3, r3, r9
 801bad6:	429f      	cmp	r7, r3
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801bad8:	4a3a      	ldr	r2, [pc, #232]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
        for( i = 0; i < sig_alg_len; i += 2 )
 801bada:	d80b      	bhi.n	801baf4 <mbedtls_ssl_handshake_client_step+0xe74>
        n += 2 + sig_alg_len;
 801badc:	4437      	add	r7, r6
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801bade:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        n += 2 + sig_alg_len;
 801bae2:	1cbe      	adds	r6, r7, #2
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801bae4:	3708      	adds	r7, #8
 801bae6:	42bb      	cmp	r3, r7
 801bae8:	d213      	bcs.n	801bb12 <mbedtls_ssl_handshake_client_step+0xe92>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801baea:	4b3f      	ldr	r3, [pc, #252]	; (801bbe8 <mbedtls_ssl_handshake_client_step+0xf68>)
 801baec:	9300      	str	r3, [sp, #0]
 801baee:	f640 23af 	movw	r3, #2735	; 0xaaf
 801baf2:	e7cf      	b.n	801ba94 <mbedtls_ssl_handshake_client_step+0xe14>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801baf4:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 801baf8:	9302      	str	r3, [sp, #8]
 801bafa:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 801bafe:	2103      	movs	r1, #3
 801bb00:	e9cd b300 	strd	fp, r3, [sp]
 801bb04:	4620      	mov	r0, r4
 801bb06:	f640 23a6 	movw	r3, #2726	; 0xaa6
 801bb0a:	f7f5 f82b 	bl	8010b64 <mbedtls_debug_print_msg>
 801bb0e:	4653      	mov	r3, sl
 801bb10:	e7dd      	b.n	801bace <mbedtls_ssl_handshake_client_step+0xe4e>
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 801bb12:	eb08 0306 	add.w	r3, r8, r6
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 801bb16:	3607      	adds	r6, #7
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 801bb18:	795a      	ldrb	r2, [r3, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 801bb1a:	799b      	ldrb	r3, [r3, #6]
 801bb1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 801bb20:	441e      	add	r6, r3
 801bb22:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801bb26:	42b3      	cmp	r3, r6
 801bb28:	d0a2      	beq.n	801ba70 <mbedtls_ssl_handshake_client_step+0xdf0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801bb2a:	4b2f      	ldr	r3, [pc, #188]	; (801bbe8 <mbedtls_ssl_handshake_client_step+0xf68>)
 801bb2c:	9300      	str	r3, [sp, #0]
 801bb2e:	f640 23be 	movw	r3, #2750	; 0xabe
 801bb32:	e7af      	b.n	801ba94 <mbedtls_ssl_handshake_client_step+0xe14>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 801bb34:	4b32      	ldr	r3, [pc, #200]	; (801bc00 <mbedtls_ssl_handshake_client_step+0xf80>)
 801bb36:	4a23      	ldr	r2, [pc, #140]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
 801bb38:	9300      	str	r3, [sp, #0]
 801bb3a:	2102      	movs	r1, #2
 801bb3c:	f640 23cf 	movw	r3, #2767	; 0xacf
 801bb40:	4620      	mov	r0, r4
 801bb42:	f7f5 f80f 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801bb46:	4620      	mov	r0, r4
 801bb48:	f002 f8b8 	bl	801dcbc <mbedtls_ssl_read_record>
 801bb4c:	4605      	mov	r5, r0
 801bb4e:	b130      	cbz	r0, 801bb5e <mbedtls_ssl_handshake_client_step+0xede>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801bb50:	4b23      	ldr	r3, [pc, #140]	; (801bbe0 <mbedtls_ssl_handshake_client_step+0xf60>)
 801bb52:	9300      	str	r3, [sp, #0]
 801bb54:	9001      	str	r0, [sp, #4]
 801bb56:	f640 23d3 	movw	r3, #2771	; 0xad3
 801bb5a:	f7ff b8f0 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801bb5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801bb60:	2b16      	cmp	r3, #22
 801bb62:	d007      	beq.n	801bb74 <mbedtls_ssl_handshake_client_step+0xef4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801bb64:	4b27      	ldr	r3, [pc, #156]	; (801bc04 <mbedtls_ssl_handshake_client_step+0xf84>)
 801bb66:	9300      	str	r3, [sp, #0]
 801bb68:	4a16      	ldr	r2, [pc, #88]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
 801bb6a:	f640 23d9 	movw	r3, #2777	; 0xad9
 801bb6e:	2101      	movs	r1, #1
 801bb70:	f7ff b8ff 	b.w	801ad72 <mbedtls_ssl_handshake_client_step+0xf2>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 801bb74:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801bb78:	2b04      	cmp	r3, #4
 801bb7a:	d103      	bne.n	801bb84 <mbedtls_ssl_handshake_client_step+0xf04>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 801bb7c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 801bb7e:	781b      	ldrb	r3, [r3, #0]
 801bb80:	2b0e      	cmp	r3, #14
 801bb82:	d010      	beq.n	801bba6 <mbedtls_ssl_handshake_client_step+0xf26>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801bb84:	4b1f      	ldr	r3, [pc, #124]	; (801bc04 <mbedtls_ssl_handshake_client_step+0xf84>)
 801bb86:	4a0f      	ldr	r2, [pc, #60]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0xf44>)
 801bb88:	9300      	str	r3, [sp, #0]
 801bb8a:	2101      	movs	r1, #1
 801bb8c:	f44f 632e 	mov.w	r3, #2784	; 0xae0
 801bb90:	4620      	mov	r0, r4
 801bb92:	f7f4 ffe7 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801bb96:	2232      	movs	r2, #50	; 0x32
 801bb98:	2102      	movs	r1, #2
 801bb9a:	4620      	mov	r0, r4
 801bb9c:	f001 fc78 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 801bba0:	4d19      	ldr	r5, [pc, #100]	; (801bc08 <mbedtls_ssl_handshake_client_step+0xf88>)
 801bba2:	f7ff b8ad 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    ssl->state++;
 801bba6:	6863      	ldr	r3, [r4, #4]
 801bba8:	3301      	adds	r3, #1
 801bbaa:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 801bbac:	4b17      	ldr	r3, [pc, #92]	; (801bc0c <mbedtls_ssl_handshake_client_step+0xf8c>)
 801bbae:	9300      	str	r3, [sp, #0]
 801bbb0:	f640 23ed 	movw	r3, #2797	; 0xaed
 801bbb4:	e4b6      	b.n	801b524 <mbedtls_ssl_handshake_client_step+0x8a4>
           ret = mbedtls_ssl_write_certificate( ssl );
 801bbb6:	4620      	mov	r0, r4
 801bbb8:	f002 f8d6 	bl	801dd68 <mbedtls_ssl_write_certificate>
 801bbbc:	f7ff b8a9 	b.w	801ad12 <mbedtls_ssl_handshake_client_step+0x92>
 801bbc0:	08031bbc 	.word	0x08031bbc
 801bbc4:	08030f75 	.word	0x08030f75
 801bbc8:	08031bcc 	.word	0x08031bcc
 801bbcc:	ffff8900 	.word	0xffff8900
 801bbd0:	08031a16 	.word	0x08031a16
 801bbd4:	ffff9300 	.word	0xffff9300
 801bbd8:	08031be1 	.word	0x08031be1
 801bbdc:	08031c10 	.word	0x08031c10
 801bbe0:	08031440 	.word	0x08031440
 801bbe4:	08031c2d 	.word	0x08031c2d
 801bbe8:	08031c4f 	.word	0x08031c4f
 801bbec:	08031416 	.word	0x08031416
 801bbf0:	08032aa1 	.word	0x08032aa1
 801bbf4:	08031c6f 	.word	0x08031c6f
 801bbf8:	08031cb5 	.word	0x08031cb5
 801bbfc:	ffff8580 	.word	0xffff8580
 801bc00:	08031cd2 	.word	0x08031cd2
 801bc04:	08031ced 	.word	0x08031ced
 801bc08:	ffff8480 	.word	0xffff8480
 801bc0c:	08031d0b 	.word	0x08031d0b
 801bc10:	08031c8a 	.word	0x08031c8a
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bc14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 801bc16:	4aa0      	ldr	r2, [pc, #640]	; (801be98 <mbedtls_ssl_handshake_client_step+0x1218>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bc18:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 801bc1a:	4ba0      	ldr	r3, [pc, #640]	; (801be9c <mbedtls_ssl_handshake_client_step+0x121c>)
 801bc1c:	9300      	str	r3, [sp, #0]
 801bc1e:	2102      	movs	r1, #2
 801bc20:	f640 23f9 	movw	r3, #2809	; 0xaf9
 801bc24:	4620      	mov	r0, r4
 801bc26:	f7f4 ff9d 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 801bc2a:	7aae      	ldrb	r6, [r5, #10]
 801bc2c:	1ef3      	subs	r3, r6, #3
 801bc2e:	2b01      	cmp	r3, #1
 801bc30:	d903      	bls.n	801bc3a <mbedtls_ssl_handshake_client_step+0xfba>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
 801bc32:	f1a6 0309 	sub.w	r3, r6, #9
 801bc36:	2b01      	cmp	r3, #1
 801bc38:	d863      	bhi.n	801bd02 <mbedtls_ssl_handshake_client_step+0x1082>
                                ssl->conf->f_rng, ssl->conf->p_rng );
 801bc3a:	6823      	ldr	r3, [r4, #0]
        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
 801bc3c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bc40:	69d9      	ldr	r1, [r3, #28]
 801bc42:	9101      	str	r1, [sp, #4]
 801bc44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801bc46:	699b      	ldr	r3, [r3, #24]
 801bc48:	9300      	str	r3, [sp, #0]
 801bc4a:	3204      	adds	r2, #4
 801bc4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bc50:	a910      	add	r1, sp, #64	; 0x40
 801bc52:	3004      	adds	r0, #4
 801bc54:	f7f5 fa0e 	bl	8011074 <mbedtls_ecdh_make_public>
        if( ret != 0 )
 801bc58:	4605      	mov	r5, r0
 801bc5a:	b130      	cbz	r0, 801bc6a <mbedtls_ssl_handshake_client_step+0xfea>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_make_public", ret );
 801bc5c:	4b90      	ldr	r3, [pc, #576]	; (801bea0 <mbedtls_ssl_handshake_client_step+0x1220>)
 801bc5e:	9300      	str	r3, [sp, #0]
 801bc60:	9001      	str	r0, [sp, #4]
 801bc62:	f640 3336 	movw	r3, #2870	; 0xb36
 801bc66:	f7ff b86a 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
        MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Q", &ssl->handshake->ecdh_ctx.Q );
 801bc6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bc6c:	4a8a      	ldr	r2, [pc, #552]	; (801be98 <mbedtls_ssl_handshake_client_step+0x1218>)
 801bc6e:	338c      	adds	r3, #140	; 0x8c
 801bc70:	9301      	str	r3, [sp, #4]
 801bc72:	4b8c      	ldr	r3, [pc, #560]	; (801bea4 <mbedtls_ssl_handshake_client_step+0x1224>)
 801bc74:	9300      	str	r3, [sp, #0]
 801bc76:	2103      	movs	r1, #3
 801bc78:	f640 333a 	movw	r3, #2874	; 0xb3a
 801bc7c:	4620      	mov	r0, r4
 801bc7e:	f7f5 f8bb 	bl	8010df8 <mbedtls_debug_print_ecp>
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801bc82:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
 801bc84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801bc86:	69da      	ldr	r2, [r3, #28]
 801bc88:	9201      	str	r2, [sp, #4]
 801bc8a:	699b      	ldr	r3, [r3, #24]
 801bc8c:	9300      	str	r3, [sp, #0]
 801bc8e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 801bc92:	f500 712a 	add.w	r1, r0, #680	; 0x2a8
 801bc96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc9a:	3004      	adds	r0, #4
 801bc9c:	f7f5 fa10 	bl	80110c0 <mbedtls_ecdh_calc_secret>
 801bca0:	4605      	mov	r5, r0
 801bca2:	b130      	cbz	r0, 801bcb2 <mbedtls_ssl_handshake_client_step+0x1032>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
 801bca4:	4b80      	ldr	r3, [pc, #512]	; (801bea8 <mbedtls_ssl_handshake_client_step+0x1228>)
 801bca6:	9300      	str	r3, [sp, #0]
 801bca8:	9001      	str	r0, [sp, #4]
 801bcaa:	f640 3342 	movw	r3, #2882	; 0xb42
 801bcae:	f7ff b846 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
        MBEDTLS_SSL_DEBUG_MPI( 3, "ECDH: z", &ssl->handshake->ecdh_ctx.z );
 801bcb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bcb4:	4a78      	ldr	r2, [pc, #480]	; (801be98 <mbedtls_ssl_handshake_client_step+0x1218>)
 801bcb6:	33d4      	adds	r3, #212	; 0xd4
 801bcb8:	9301      	str	r3, [sp, #4]
 801bcba:	4b7c      	ldr	r3, [pc, #496]	; (801beac <mbedtls_ssl_handshake_client_step+0x122c>)
 801bcbc:	9300      	str	r3, [sp, #0]
 801bcbe:	2103      	movs	r1, #3
 801bcc0:	f640 3346 	movw	r3, #2886	; 0xb46
 801bcc4:	4620      	mov	r0, r4
 801bcc6:	f7f5 f84f 	bl	8010d68 <mbedtls_debug_print_mpi>
    ssl->out_msglen  = i + n;
 801bcca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bccc:	3304      	adds	r3, #4
 801bcce:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801bcd2:	2316      	movs	r3, #22
 801bcd4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 801bcd8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bcdc:	2210      	movs	r2, #16
 801bcde:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801bce0:	6863      	ldr	r3, [r4, #4]
 801bce2:	3301      	adds	r3, #1
 801bce4:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801bce6:	4620      	mov	r0, r4
 801bce8:	f001 f89a 	bl	801ce20 <mbedtls_ssl_write_record>
 801bcec:	4605      	mov	r5, r0
 801bcee:	2800      	cmp	r0, #0
 801bcf0:	f000 8083 	beq.w	801bdfa <mbedtls_ssl_handshake_client_step+0x117a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801bcf4:	4b6e      	ldr	r3, [pc, #440]	; (801beb0 <mbedtls_ssl_handshake_client_step+0x1230>)
 801bcf6:	9300      	str	r3, [sp, #0]
 801bcf8:	9001      	str	r0, [sp, #4]
 801bcfa:	f640 33e7 	movw	r3, #3047	; 0xbe7
 801bcfe:	f7ff b81e 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 801bd02:	2e01      	cmp	r6, #1
 801bd04:	d174      	bne.n	801bdf0 <mbedtls_ssl_handshake_client_step+0x1170>
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bd06:	6820      	ldr	r0, [r4, #0]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801bd08:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801bd0a:	6963      	ldr	r3, [r4, #20]
                       ssl->conf->transport, p );
 801bd0c:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bd10:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 801bd14:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801bd18:	f505 783b 	add.w	r8, r5, #748	; 0x2ec
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801bd1c:	2b00      	cmp	r3, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bd1e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801bd22:	4643      	mov	r3, r8
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801bd24:	bf0c      	ite	eq
 801bd26:	2700      	moveq	r7, #0
 801bd28:	2702      	movne	r7, #2
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bd2a:	f003 fb5f 	bl	801f3ec <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 801bd2e:	6823      	ldr	r3, [r4, #0]
 801bd30:	f205 21ee 	addw	r1, r5, #750	; 0x2ee
 801bd34:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801bd38:	69d8      	ldr	r0, [r3, #28]
 801bd3a:	222e      	movs	r2, #46	; 0x2e
 801bd3c:	47d0      	blx	sl
    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )
 801bd3e:	f107 0904 	add.w	r9, r7, #4
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 801bd42:	4605      	mov	r5, r0
 801bd44:	b130      	cbz	r0, 801bd54 <mbedtls_ssl_handshake_client_step+0x10d4>
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 801bd46:	4b5b      	ldr	r3, [pc, #364]	; (801beb4 <mbedtls_ssl_handshake_client_step+0x1234>)
 801bd48:	9300      	str	r3, [sp, #0]
 801bd4a:	9001      	str	r0, [sp, #4]
 801bd4c:	f640 0339 	movw	r3, #2105	; 0x839
 801bd50:	f7fe bff5 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
    ssl->handshake->pmslen = 48;
 801bd54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bd56:	2230      	movs	r2, #48	; 0x30
 801bd58:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    if( ssl->session_negotiate->peer_cert == NULL )
 801bd5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bd5e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801bd60:	b938      	cbnz	r0, 801bd72 <mbedtls_ssl_handshake_client_step+0x10f2>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801bd62:	4b55      	ldr	r3, [pc, #340]	; (801beb8 <mbedtls_ssl_handshake_client_step+0x1238>)
 801bd64:	9300      	str	r3, [sp, #0]
 801bd66:	4a4c      	ldr	r2, [pc, #304]	; (801be98 <mbedtls_ssl_handshake_client_step+0x1218>)
 801bd68:	f640 0341 	movw	r3, #2113	; 0x841
 801bd6c:	2102      	movs	r1, #2
 801bd6e:	f7ff b800 	b.w	801ad72 <mbedtls_ssl_handshake_client_step+0xf2>
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 801bd72:	4631      	mov	r1, r6
 801bd74:	30bc      	adds	r0, #188	; 0xbc
 801bd76:	f7f9 fefb 	bl	8015b70 <mbedtls_pk_can_do>
 801bd7a:	b958      	cbnz	r0, 801bd94 <mbedtls_ssl_handshake_client_step+0x1114>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 801bd7c:	4b4f      	ldr	r3, [pc, #316]	; (801bebc <mbedtls_ssl_handshake_client_step+0x123c>)
 801bd7e:	9300      	str	r3, [sp, #0]
 801bd80:	4a45      	ldr	r2, [pc, #276]	; (801be98 <mbedtls_ssl_handshake_client_step+0x1218>)
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801bd82:	4d4f      	ldr	r5, [pc, #316]	; (801bec0 <mbedtls_ssl_handshake_client_step+0x1240>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 801bd84:	f640 034b 	movw	r3, #2123	; 0x84b
 801bd88:	4631      	mov	r1, r6
 801bd8a:	4620      	mov	r0, r4
 801bd8c:	f7f4 feea 	bl	8010b64 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801bd90:	f7fe bfb6 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801bd94:	e9d4 010d 	ldrd	r0, r1, [r4, #52]	; 0x34
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801bd98:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801bd9a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801bd9c:	69d5      	ldr	r5, [r2, #28]
 801bd9e:	9503      	str	r5, [sp, #12]
 801bda0:	6992      	ldr	r2, [r2, #24]
 801bda2:	9202      	str	r2, [sp, #8]
 801bda4:	f5c9 529c 	rsb	r2, r9, #4992	; 0x1380
 801bda8:	3208      	adds	r2, #8
 801bdaa:	9201      	str	r2, [sp, #4]
 801bdac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bdb0:	aa10      	add	r2, sp, #64	; 0x40
 801bdb2:	9200      	str	r2, [sp, #0]
 801bdb4:	f8d1 22a8 	ldr.w	r2, [r1, #680]	; 0x2a8
 801bdb8:	444b      	add	r3, r9
 801bdba:	4641      	mov	r1, r8
 801bdbc:	30bc      	adds	r0, #188	; 0xbc
 801bdbe:	f7f9 ff3b 	bl	8015c38 <mbedtls_pk_encrypt>
 801bdc2:	4605      	mov	r5, r0
 801bdc4:	b130      	cbz	r0, 801bdd4 <mbedtls_ssl_handshake_client_step+0x1154>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 801bdc6:	4b3f      	ldr	r3, [pc, #252]	; (801bec4 <mbedtls_ssl_handshake_client_step+0x1244>)
 801bdc8:	9300      	str	r3, [sp, #0]
 801bdca:	9001      	str	r0, [sp, #4]
 801bdcc:	f640 0355 	movw	r3, #2133	; 0x855
 801bdd0:	f7fe bfb5 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
    if( len_bytes == 2 )
 801bdd4:	2f00      	cmp	r7, #0
 801bdd6:	f43f af78 	beq.w	801bcca <mbedtls_ssl_handshake_client_step+0x104a>
 801bdda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bddc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 801bde0:	0a19      	lsrs	r1, r3, #8
 801bde2:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 801bde4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bde8:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 801bdea:	3302      	adds	r3, #2
 801bdec:	9310      	str	r3, [sp, #64]	; 0x40
 801bdee:	e76c      	b.n	801bcca <mbedtls_ssl_handshake_client_step+0x104a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801bdf0:	4b35      	ldr	r3, [pc, #212]	; (801bec8 <mbedtls_ssl_handshake_client_step+0x1248>)
 801bdf2:	9300      	str	r3, [sp, #0]
 801bdf4:	f640 33db 	movw	r3, #3035	; 0xbdb
 801bdf8:	e4bc      	b.n	801b774 <mbedtls_ssl_handshake_client_step+0xaf4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 801bdfa:	4b34      	ldr	r3, [pc, #208]	; (801becc <mbedtls_ssl_handshake_client_step+0x124c>)
 801bdfc:	9300      	str	r3, [sp, #0]
 801bdfe:	f640 33eb 	movw	r3, #3051	; 0xbeb
 801be02:	f7ff bb8f 	b.w	801b524 <mbedtls_ssl_handshake_client_step+0x8a4>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801be06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 801be08:	4a23      	ldr	r2, [pc, #140]	; (801be98 <mbedtls_ssl_handshake_client_step+0x1218>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801be0a:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
 801be0c:	2300      	movs	r3, #0
 801be0e:	930d      	str	r3, [sp, #52]	; 0x34
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 801be10:	4b2f      	ldr	r3, [pc, #188]	; (801bed0 <mbedtls_ssl_handshake_client_step+0x1250>)
 801be12:	9300      	str	r3, [sp, #0]
 801be14:	2102      	movs	r1, #2
 801be16:	f640 431e 	movw	r3, #3102	; 0xc1e
 801be1a:	4620      	mov	r0, r4
 801be1c:	f7f4 fea2 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 801be20:	4620      	mov	r0, r4
 801be22:	f000 fc25 	bl	801c670 <mbedtls_ssl_derive_keys>
 801be26:	4605      	mov	r5, r0
 801be28:	b130      	cbz	r0, 801be38 <mbedtls_ssl_handshake_client_step+0x11b8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 801be2a:	4b2a      	ldr	r3, [pc, #168]	; (801bed4 <mbedtls_ssl_handshake_client_step+0x1254>)
 801be2c:	9300      	str	r3, [sp, #0]
 801be2e:	9001      	str	r0, [sp, #4]
 801be30:	f640 4322 	movw	r3, #3106	; 0xc22
 801be34:	f7fe bf83 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801be38:	7ab3      	ldrb	r3, [r6, #10]
 801be3a:	1f5a      	subs	r2, r3, #5
 801be3c:	2a03      	cmp	r2, #3
 801be3e:	d901      	bls.n	801be44 <mbedtls_ssl_handshake_client_step+0x11c4>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 801be40:	2b0b      	cmp	r3, #11
 801be42:	d105      	bne.n	801be50 <mbedtls_ssl_handshake_client_step+0x11d0>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801be44:	4b24      	ldr	r3, [pc, #144]	; (801bed8 <mbedtls_ssl_handshake_client_step+0x1258>)
 801be46:	9300      	str	r3, [sp, #0]
 801be48:	f640 432c 	movw	r3, #3116	; 0xc2c
 801be4c:	f7ff bb8c 	b.w	801b568 <mbedtls_ssl_handshake_client_step+0x8e8>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 801be50:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801be54:	b14b      	cbz	r3, 801be6a <mbedtls_ssl_handshake_client_step+0x11ea>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801be56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801be58:	b111      	cbz	r1, 801be60 <mbedtls_ssl_handshake_client_step+0x11e0>
 801be5a:	f8d1 313c 	ldr.w	r3, [r1, #316]	; 0x13c
 801be5e:	b913      	cbnz	r3, 801be66 <mbedtls_ssl_handshake_client_step+0x11e6>
        key_cert = ssl->conf->key_cert;
 801be60:	6823      	ldr	r3, [r4, #0]
 801be62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801be64:	b10b      	cbz	r3, 801be6a <mbedtls_ssl_handshake_client_step+0x11ea>
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	b92b      	cbnz	r3, 801be76 <mbedtls_ssl_handshake_client_step+0x11f6>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801be6a:	4b1b      	ldr	r3, [pc, #108]	; (801bed8 <mbedtls_ssl_handshake_client_step+0x1258>)
 801be6c:	9300      	str	r3, [sp, #0]
 801be6e:	f640 4333 	movw	r3, #3123	; 0xc33
 801be72:	f7ff bb79 	b.w	801b568 <mbedtls_ssl_handshake_client_step+0x8e8>
    if( mbedtls_ssl_own_key( ssl ) == NULL )
 801be76:	4620      	mov	r0, r4
 801be78:	f7fe fa2f 	bl	801a2da <mbedtls_ssl_own_key>
 801be7c:	bb90      	cbnz	r0, 801bee4 <mbedtls_ssl_handshake_client_step+0x1264>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 801be7e:	4b17      	ldr	r3, [pc, #92]	; (801bedc <mbedtls_ssl_handshake_client_step+0x125c>)
 801be80:	9300      	str	r3, [sp, #0]
 801be82:	4a05      	ldr	r2, [pc, #20]	; (801be98 <mbedtls_ssl_handshake_client_step+0x1218>)
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 801be84:	4d16      	ldr	r5, [pc, #88]	; (801bee0 <mbedtls_ssl_handshake_client_step+0x1260>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 801be86:	f640 433a 	movw	r3, #3130	; 0xc3a
 801be8a:	2101      	movs	r1, #1
 801be8c:	4620      	mov	r0, r4
 801be8e:	f7f4 fe69 	bl	8010b64 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 801be92:	f7fe bf35 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
 801be96:	bf00      	nop
 801be98:	08030f75 	.word	0x08030f75
 801be9c:	08031d26 	.word	0x08031d26
 801bea0:	08031d43 	.word	0x08031d43
 801bea4:	08031d5c 	.word	0x08031d5c
 801bea8:	08031d64 	.word	0x08031d64
 801beac:	08031d7d 	.word	0x08031d7d
 801beb0:	080313e7 	.word	0x080313e7
 801beb4:	08031d85 	.word	0x08031d85
 801beb8:	08031bcc 	.word	0x08031bcc
 801bebc:	08031d8b 	.word	0x08031d8b
 801bec0:	ffff9300 	.word	0xffff9300
 801bec4:	08031da9 	.word	0x08031da9
 801bec8:	08031a7f 	.word	0x08031a7f
 801becc:	08031dc3 	.word	0x08031dc3
 801bed0:	08031de0 	.word	0x08031de0
 801bed4:	080315e6 	.word	0x080315e6
 801bed8:	08031dfc 	.word	0x08031dfc
 801bedc:	08031e1d 	.word	0x08031e1d
 801bee0:	ffff8a00 	.word	0xffff8a00
    ssl->handshake->calc_verify( ssl, hash );
 801bee4:	f8d1 329c 	ldr.w	r3, [r1, #668]	; 0x29c
 801bee8:	4620      	mov	r0, r4
 801beea:	a910      	add	r1, sp, #64	; 0x40
 801beec:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801beee:	6963      	ldr	r3, [r4, #20]
 801bef0:	2b03      	cmp	r3, #3
 801bef2:	d130      	bne.n	801bf56 <mbedtls_ssl_handshake_client_step+0x12d6>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 801bef4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	7a5d      	ldrb	r5, [r3, #9]
 801befa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801befe:	2d07      	cmp	r5, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 801bf00:	bf0b      	itete	eq
 801bf02:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 801bf04:	2204      	movne	r2, #4
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 801bf06:	711a      	strbeq	r2, [r3, #4]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 801bf08:	711a      	strbne	r2, [r3, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 801bf0a:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA256;
 801bf0c:	bf18      	it	ne
 801bf0e:	2506      	movne	r5, #6
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 801bf10:	f7fe f9e3 	bl	801a2da <mbedtls_ssl_own_key>
 801bf14:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 801bf18:	f002 ffc4 	bl	801eea4 <mbedtls_ssl_sig_from_pk>
 801bf1c:	7170      	strb	r0, [r6, #5]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801bf1e:	4620      	mov	r0, r4
 801bf20:	f7fe f9db 	bl	801a2da <mbedtls_ssl_own_key>
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801bf24:	6823      	ldr	r3, [r4, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801bf26:	69da      	ldr	r2, [r3, #28]
 801bf28:	9203      	str	r2, [sp, #12]
 801bf2a:	699b      	ldr	r3, [r3, #24]
 801bf2c:	9302      	str	r3, [sp, #8]
 801bf2e:	ab0d      	add	r3, sp, #52	; 0x34
 801bf30:	9301      	str	r3, [sp, #4]
 801bf32:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bf36:	3308      	adds	r3, #8
 801bf38:	9300      	str	r3, [sp, #0]
 801bf3a:	4629      	mov	r1, r5
 801bf3c:	2300      	movs	r3, #0
 801bf3e:	aa10      	add	r2, sp, #64	; 0x40
 801bf40:	f7f9 fe4a 	bl	8015bd8 <mbedtls_pk_sign>
 801bf44:	4605      	mov	r5, r0
 801bf46:	b158      	cbz	r0, 801bf60 <mbedtls_ssl_handshake_client_step+0x12e0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 801bf48:	4b83      	ldr	r3, [pc, #524]	; (801c158 <mbedtls_ssl_handshake_client_step+0x14d8>)
 801bf4a:	9300      	str	r3, [sp, #0]
 801bf4c:	9001      	str	r0, [sp, #4]
 801bf4e:	f640 4391 	movw	r3, #3217	; 0xc91
 801bf52:	f7fe bef4 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801bf56:	4b81      	ldr	r3, [pc, #516]	; (801c15c <mbedtls_ssl_handshake_client_step+0x14dc>)
 801bf58:	9300      	str	r3, [sp, #0]
 801bf5a:	f640 4389 	movw	r3, #3209	; 0xc89
 801bf5e:	e409      	b.n	801b774 <mbedtls_ssl_handshake_client_step+0xaf4>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 801bf60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf62:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bf66:	0a19      	lsrs	r1, r3, #8
 801bf68:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 801bf6a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bf6e:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
 801bf70:	3308      	adds	r3, #8
 801bf72:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801bf76:	2316      	movs	r3, #22
 801bf78:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 801bf7c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bf80:	220f      	movs	r2, #15
 801bf82:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801bf84:	6863      	ldr	r3, [r4, #4]
 801bf86:	3301      	adds	r3, #1
 801bf88:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801bf8a:	4620      	mov	r0, r4
 801bf8c:	f000 ff48 	bl	801ce20 <mbedtls_ssl_write_record>
 801bf90:	4605      	mov	r5, r0
 801bf92:	b130      	cbz	r0, 801bfa2 <mbedtls_ssl_handshake_client_step+0x1322>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801bf94:	4b72      	ldr	r3, [pc, #456]	; (801c160 <mbedtls_ssl_handshake_client_step+0x14e0>)
 801bf96:	9300      	str	r3, [sp, #0]
 801bf98:	9001      	str	r0, [sp, #4]
 801bf9a:	f44f 634a 	mov.w	r3, #3232	; 0xca0
 801bf9e:	f7fe bece 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 801bfa2:	4b70      	ldr	r3, [pc, #448]	; (801c164 <mbedtls_ssl_handshake_client_step+0x14e4>)
 801bfa4:	9300      	str	r3, [sp, #0]
 801bfa6:	f640 43a4 	movw	r3, #3236	; 0xca4
 801bfaa:	f7ff babb 	b.w	801b524 <mbedtls_ssl_handshake_client_step+0x8a4>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 801bfae:	4620      	mov	r0, r4
 801bfb0:	f001 ffa4 	bl	801defc <mbedtls_ssl_write_change_cipher_spec>
 801bfb4:	f7fe bead 	b.w	801ad12 <mbedtls_ssl_handshake_client_step+0x92>
           ret = mbedtls_ssl_write_finished( ssl );
 801bfb8:	4620      	mov	r0, r4
 801bfba:	f002 f863 	bl	801e084 <mbedtls_ssl_write_finished>
 801bfbe:	f7fe bea8 	b.w	801ad12 <mbedtls_ssl_handshake_client_step+0x92>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );
 801bfc2:	4b69      	ldr	r3, [pc, #420]	; (801c168 <mbedtls_ssl_handshake_client_step+0x14e8>)
 801bfc4:	4a69      	ldr	r2, [pc, #420]	; (801c16c <mbedtls_ssl_handshake_client_step+0x14ec>)
 801bfc6:	9300      	str	r3, [sp, #0]
 801bfc8:	2102      	movs	r1, #2
 801bfca:	f640 43b8 	movw	r3, #3256	; 0xcb8
 801bfce:	4620      	mov	r0, r4
 801bfd0:	f7f4 fdc8 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	f001 fe71 	bl	801dcbc <mbedtls_ssl_read_record>
 801bfda:	4605      	mov	r5, r0
 801bfdc:	b130      	cbz	r0, 801bfec <mbedtls_ssl_handshake_client_step+0x136c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801bfde:	4b64      	ldr	r3, [pc, #400]	; (801c170 <mbedtls_ssl_handshake_client_step+0x14f0>)
 801bfe0:	9300      	str	r3, [sp, #0]
 801bfe2:	9001      	str	r0, [sp, #4]
 801bfe4:	f640 43bc 	movw	r3, #3260	; 0xcbc
 801bfe8:	f7fe bea9 	b.w	801ad3e <mbedtls_ssl_handshake_client_step+0xbe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801bfec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801bfee:	2b16      	cmp	r3, #22
 801bff0:	d005      	beq.n	801bffe <mbedtls_ssl_handshake_client_step+0x137e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bff2:	4b60      	ldr	r3, [pc, #384]	; (801c174 <mbedtls_ssl_handshake_client_step+0x14f4>)
 801bff4:	9300      	str	r3, [sp, #0]
 801bff6:	f640 43c2 	movw	r3, #3266	; 0xcc2
 801bffa:	f7fe bed0 	b.w	801ad9e <mbedtls_ssl_handshake_client_step+0x11e>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 801bffe:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 801c002:	f898 3000 	ldrb.w	r3, [r8]
 801c006:	2b04      	cmp	r3, #4
 801c008:	d103      	bne.n	801c012 <mbedtls_ssl_handshake_client_step+0x1392>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 801c00a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 801c00e:	2b09      	cmp	r3, #9
 801c010:	d810      	bhi.n	801c034 <mbedtls_ssl_handshake_client_step+0x13b4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801c012:	4b58      	ldr	r3, [pc, #352]	; (801c174 <mbedtls_ssl_handshake_client_step+0x14f4>)
 801c014:	9300      	str	r3, [sp, #0]
 801c016:	f640 43d5 	movw	r3, #3285	; 0xcd5
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801c01a:	4a54      	ldr	r2, [pc, #336]	; (801c16c <mbedtls_ssl_handshake_client_step+0x14ec>)
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 801c01c:	4d56      	ldr	r5, [pc, #344]	; (801c178 <mbedtls_ssl_handshake_client_step+0x14f8>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801c01e:	2101      	movs	r1, #1
 801c020:	4620      	mov	r0, r4
 801c022:	f7f4 fd9f 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801c026:	2232      	movs	r2, #50	; 0x32
 801c028:	2102      	movs	r1, #2
 801c02a:	4620      	mov	r0, r4
 801c02c:	f001 fa30 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 801c030:	f7fe be66 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 801c034:	f8b8 6008 	ldrh.w	r6, [r8, #8]
 801c038:	f8d8 9004 	ldr.w	r9, [r8, #4]
    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 801c03c:	ba76      	rev16	r6, r6
 801c03e:	b2b6      	uxth	r6, r6
    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 801c040:	f106 020a 	add.w	r2, r6, #10
 801c044:	4293      	cmp	r3, r2
 801c046:	d004      	beq.n	801c052 <mbedtls_ssl_handshake_client_step+0x13d2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801c048:	4b4a      	ldr	r3, [pc, #296]	; (801c174 <mbedtls_ssl_handshake_client_step+0x14f4>)
 801c04a:	9300      	str	r3, [sp, #0]
 801c04c:	f640 43e4 	movw	r3, #3300	; 0xce4
 801c050:	e7e3      	b.n	801c01a <mbedtls_ssl_handshake_client_step+0x139a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );
 801c052:	4b4a      	ldr	r3, [pc, #296]	; (801c17c <mbedtls_ssl_handshake_client_step+0x14fc>)
 801c054:	9300      	str	r3, [sp, #0]
 801c056:	4a45      	ldr	r2, [pc, #276]	; (801c16c <mbedtls_ssl_handshake_client_step+0x14ec>)
 801c058:	9601      	str	r6, [sp, #4]
 801c05a:	f640 43ea 	movw	r3, #3306	; 0xcea
 801c05e:	2103      	movs	r1, #3
 801c060:	4620      	mov	r0, r4
 801c062:	f7f4 fd7f 	bl	8010b64 <mbedtls_debug_print_msg>
    ssl->handshake->new_session_ticket = 0;
 801c066:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c068:	f8c3 5340 	str.w	r5, [r3, #832]	; 0x340
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 801c06c:	230c      	movs	r3, #12
 801c06e:	6063      	str	r3, [r4, #4]
    if( ticket_len == 0 )
 801c070:	2e00      	cmp	r6, #0
 801c072:	f43e ae45 	beq.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    mbedtls_zeroize( ssl->session_negotiate->ticket,
 801c076:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801c078:	e9d2 321b 	ldrd	r3, r2, [r2, #108]	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801c07c:	4629      	mov	r1, r5
 801c07e:	441a      	add	r2, r3
 801c080:	4293      	cmp	r3, r2
 801c082:	d121      	bne.n	801c0c8 <mbedtls_ssl_handshake_client_step+0x1448>
    mbedtls_free( ssl->session_negotiate->ticket );
 801c084:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801c086:	4b3e      	ldr	r3, [pc, #248]	; (801c180 <mbedtls_ssl_handshake_client_step+0x1500>)
 801c088:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	4798      	blx	r3
    ssl->session_negotiate->ticket = NULL;
 801c08e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c090:	f04f 0a00 	mov.w	sl, #0
    ssl->session_negotiate->ticket_len = 0;
 801c094:	e9c3 aa1b 	strd	sl, sl, [r3, #108]	; 0x6c
    if( ( ticket = mbedtls_calloc( 1, ticket_len ) ) == NULL )
 801c098:	4b3a      	ldr	r3, [pc, #232]	; (801c184 <mbedtls_ssl_handshake_client_step+0x1504>)
 801c09a:	4631      	mov	r1, r6
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	2001      	movs	r0, #1
 801c0a0:	4798      	blx	r3
 801c0a2:	4607      	mov	r7, r0
 801c0a4:	b998      	cbnz	r0, 801c0ce <mbedtls_ssl_handshake_client_step+0x144e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
 801c0a6:	4b38      	ldr	r3, [pc, #224]	; (801c188 <mbedtls_ssl_handshake_client_step+0x1508>)
 801c0a8:	4a30      	ldr	r2, [pc, #192]	; (801c16c <mbedtls_ssl_handshake_client_step+0x14ec>)
 801c0aa:	9300      	str	r3, [sp, #0]
 801c0ac:	2101      	movs	r1, #1
 801c0ae:	f640 43ff 	movw	r3, #3327	; 0xcff
 801c0b2:	4620      	mov	r0, r4
 801c0b4:	f7f4 fd56 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801c0b8:	2250      	movs	r2, #80	; 0x50
 801c0ba:	2102      	movs	r1, #2
 801c0bc:	4620      	mov	r0, r4
 801c0be:	f001 f9e7 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801c0c2:	4d32      	ldr	r5, [pc, #200]	; (801c18c <mbedtls_ssl_handshake_client_step+0x150c>)
 801c0c4:	f7fe be1c 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801c0c8:	f803 1b01 	strb.w	r1, [r3], #1
 801c0cc:	e7d8      	b.n	801c080 <mbedtls_ssl_handshake_client_step+0x1400>
    memcpy( ticket, msg + 6, ticket_len );
 801c0ce:	4632      	mov	r2, r6
 801c0d0:	f108 010a 	add.w	r1, r8, #10
 801c0d4:	f006 f9d4 	bl	8022480 <memcpy>
    ssl->session_negotiate->ticket = ticket;
 801c0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c0da:	fa99 f289 	rev.w	r2, r9
    ssl->session_negotiate->ticket_lifetime = lifetime;
 801c0de:	675a      	str	r2, [r3, #116]	; 0x74
    ssl->session_negotiate->ticket_len = ticket_len;
 801c0e0:	e9c3 761b 	strd	r7, r6, [r3, #108]	; 0x6c
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
 801c0e4:	4b2a      	ldr	r3, [pc, #168]	; (801c190 <mbedtls_ssl_handshake_client_step+0x1510>)
 801c0e6:	9300      	str	r3, [sp, #0]
 801c0e8:	4a20      	ldr	r2, [pc, #128]	; (801c16c <mbedtls_ssl_handshake_client_step+0x14ec>)
 801c0ea:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 801c0ee:	2103      	movs	r1, #3
 801c0f0:	4620      	mov	r0, r4
 801c0f2:	f7f4 fd37 	bl	8010b64 <mbedtls_debug_print_msg>
    ssl->session_negotiate->id_len = 0;
 801c0f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c0f8:	f8c3 a010 	str.w	sl, [r3, #16]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );
 801c0fc:	4b25      	ldr	r3, [pc, #148]	; (801c194 <mbedtls_ssl_handshake_client_step+0x1514>)
 801c0fe:	9300      	str	r3, [sp, #0]
 801c100:	f640 5313 	movw	r3, #3347	; 0xd13
 801c104:	f7ff ba0e 	b.w	801b524 <mbedtls_ssl_handshake_client_step+0x8a4>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 801c108:	4620      	mov	r0, r4
 801c10a:	f001 ff2f 	bl	801df6c <mbedtls_ssl_parse_change_cipher_spec>
 801c10e:	f7fe be00 	b.w	801ad12 <mbedtls_ssl_handshake_client_step+0x92>
           ret = mbedtls_ssl_parse_finished( ssl );
 801c112:	4620      	mov	r0, r4
 801c114:	f002 f834 	bl	801e180 <mbedtls_ssl_parse_finished>
 801c118:	f7fe bdfb 	b.w	801ad12 <mbedtls_ssl_handshake_client_step+0x92>
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 801c11c:	4b1e      	ldr	r3, [pc, #120]	; (801c198 <mbedtls_ssl_handshake_client_step+0x1518>)
 801c11e:	9300      	str	r3, [sp, #0]
 801c120:	4a12      	ldr	r2, [pc, #72]	; (801c16c <mbedtls_ssl_handshake_client_step+0x14ec>)
 801c122:	f640 5392 	movw	r3, #3474	; 0xd92
 801c126:	2102      	movs	r1, #2
 801c128:	4620      	mov	r0, r4
 801c12a:	f7f4 fd1b 	bl	8010b64 <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801c12e:	230f      	movs	r3, #15
 801c130:	f7ff ba21 	b.w	801b576 <mbedtls_ssl_handshake_client_step+0x8f6>
           mbedtls_ssl_handshake_wrapup( ssl );
 801c134:	4620      	mov	r0, r4
 801c136:	f002 fa25 	bl	801e584 <mbedtls_ssl_handshake_wrapup>
           break;
 801c13a:	f7fe bde1 	b.w	801ad00 <mbedtls_ssl_handshake_client_step+0x80>
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 801c13e:	9301      	str	r3, [sp, #4]
 801c140:	4b16      	ldr	r3, [pc, #88]	; (801c19c <mbedtls_ssl_handshake_client_step+0x151c>)
 801c142:	9300      	str	r3, [sp, #0]
 801c144:	4a09      	ldr	r2, [pc, #36]	; (801c16c <mbedtls_ssl_handshake_client_step+0x14ec>)
 801c146:	f640 539b 	movw	r3, #3483	; 0xd9b
 801c14a:	2101      	movs	r1, #1
 801c14c:	4620      	mov	r0, r4
 801c14e:	f7f4 fd09 	bl	8010b64 <mbedtls_debug_print_msg>
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c152:	f7fe bf3f 	b.w	801afd4 <mbedtls_ssl_handshake_client_step+0x354>
 801c156:	bf00      	nop
 801c158:	08031e40 	.word	0x08031e40
 801c15c:	08031a7f 	.word	0x08031a7f
 801c160:	080313e7 	.word	0x080313e7
 801c164:	08031e50 	.word	0x08031e50
 801c168:	08031e6c 	.word	0x08031e6c
 801c16c:	08030f75 	.word	0x08030f75
 801c170:	08031440 	.word	0x08031440
 801c174:	08031e88 	.word	0x08031e88
 801c178:	ffff9200 	.word	0xffff9200
 801c17c:	08031ea7 	.word	0x08031ea7
 801c180:	200005a4 	.word	0x200005a4
 801c184:	200005a0 	.word	0x200005a0
 801c188:	08031eb9 	.word	0x08031eb9
 801c18c:	ffff8100 	.word	0xffff8100
 801c190:	08031ecd 	.word	0x08031ecd
 801c194:	08031ef2 	.word	0x08031ef2
 801c198:	08031f0e 	.word	0x08031f0e
 801c19c:	08031f1e 	.word	0x08031f1e

0801c1a0 <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801c1a0:	4401      	add	r1, r0
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	4288      	cmp	r0, r1
 801c1a6:	d100      	bne.n	801c1aa <mbedtls_zeroize+0xa>
}
 801c1a8:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801c1aa:	f800 3b01 	strb.w	r3, [r0], #1
 801c1ae:	e7f9      	b.n	801c1a4 <mbedtls_zeroize+0x4>

0801c1b0 <ssl_append_key_cert>:
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
    mbedtls_ssl_key_cert *new;

    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801c1b0:	4b0d      	ldr	r3, [pc, #52]	; (801c1e8 <ssl_append_key_cert+0x38>)
{
 801c1b2:	b570      	push	{r4, r5, r6, lr}
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801c1b4:	681b      	ldr	r3, [r3, #0]
{
 801c1b6:	4604      	mov	r4, r0
 801c1b8:	460e      	mov	r6, r1
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801c1ba:	2001      	movs	r0, #1
 801c1bc:	210c      	movs	r1, #12
{
 801c1be:	4615      	mov	r5, r2
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801c1c0:	4798      	blx	r3
    if( new == NULL )
 801c1c2:	b170      	cbz	r0, 801c1e2 <ssl_append_key_cert+0x32>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new->cert = cert;
    new->key  = key;
    new->next = NULL;
 801c1c4:	2300      	movs	r3, #0
 801c1c6:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 801c1c8:	6823      	ldr	r3, [r4, #0]
    new->key  = key;
 801c1ca:	e9c0 6500 	strd	r6, r5, [r0]
    if( *head == NULL )
 801c1ce:	b913      	cbnz	r3, 801c1d6 <ssl_append_key_cert+0x26>
    {
        *head = new;
 801c1d0:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new;
    }

    return( 0 );
 801c1d2:	4618      	mov	r0, r3
}
 801c1d4:	bd70      	pop	{r4, r5, r6, pc}
        while( cur->next != NULL )
 801c1d6:	461a      	mov	r2, r3
 801c1d8:	689b      	ldr	r3, [r3, #8]
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d1fb      	bne.n	801c1d6 <ssl_append_key_cert+0x26>
        cur->next = new;
 801c1de:	6090      	str	r0, [r2, #8]
 801c1e0:	e7f7      	b.n	801c1d2 <ssl_append_key_cert+0x22>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801c1e2:	4802      	ldr	r0, [pc, #8]	; (801c1ec <ssl_append_key_cert+0x3c>)
 801c1e4:	e7f6      	b.n	801c1d4 <ssl_append_key_cert+0x24>
 801c1e6:	bf00      	nop
 801c1e8:	200005a0 	.word	0x200005a0
 801c1ec:	ffff8100 	.word	0xffff8100

0801c1f0 <ssl_calc_finished_tls_sha256>:
{
 801c1f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c1f4:	6b47      	ldr	r7, [r0, #52]	; 0x34
{
 801c1f6:	b0ab      	sub	sp, #172	; 0xac
 801c1f8:	4604      	mov	r4, r0
 801c1fa:	460d      	mov	r5, r1
 801c1fc:	4690      	mov	r8, r2
    if( !session )
 801c1fe:	b907      	cbnz	r7, 801c202 <ssl_calc_finished_tls_sha256+0x12>
        session = ssl->session;
 801c200:	6b07      	ldr	r7, [r0, #48]	; 0x30
    mbedtls_sha256_init( &sha256 );
 801c202:	a80f      	add	r0, sp, #60	; 0x3c
 801c204:	f7fc fbfb 	bl	80189fe <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 801c208:	4b29      	ldr	r3, [pc, #164]	; (801c2b0 <ssl_calc_finished_tls_sha256+0xc0>)
 801c20a:	4a2a      	ldr	r2, [pc, #168]	; (801c2b4 <ssl_calc_finished_tls_sha256+0xc4>)
 801c20c:	9300      	str	r3, [sp, #0]
 801c20e:	4620      	mov	r0, r4
 801c210:	f241 33c2 	movw	r3, #5058	; 0x13c2
 801c214:	2102      	movs	r1, #2
 801c216:	f7f4 fca5 	bl	8010b64 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 801c21a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c21c:	a80f      	add	r0, sp, #60	; 0x3c
 801c21e:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 801c222:	f7fc fbfa 	bl	8018a1a <mbedtls_sha256_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 801c226:	ab11      	add	r3, sp, #68	; 0x44
 801c228:	2620      	movs	r6, #32
 801c22a:	9301      	str	r3, [sp, #4]
 801c22c:	4b22      	ldr	r3, [pc, #136]	; (801c2b8 <ssl_calc_finished_tls_sha256+0xc8>)
 801c22e:	9300      	str	r3, [sp, #0]
 801c230:	4620      	mov	r0, r4
 801c232:	4a20      	ldr	r2, [pc, #128]	; (801c2b4 <ssl_calc_finished_tls_sha256+0xc4>)
 801c234:	9602      	str	r6, [sp, #8]
 801c236:	f241 33cd 	movw	r3, #5069	; 0x13cd
 801c23a:	2104      	movs	r1, #4
 801c23c:	f7f4 fcf2 	bl	8010c24 <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c240:	4b1e      	ldr	r3, [pc, #120]	; (801c2bc <ssl_calc_finished_tls_sha256+0xcc>)
 801c242:	4a1f      	ldr	r2, [pc, #124]	; (801c2c0 <ssl_calc_finished_tls_sha256+0xd0>)
    mbedtls_sha256_finish( &sha256, padbuf );
 801c244:	a907      	add	r1, sp, #28
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c246:	f1b8 0f00 	cmp.w	r8, #0
 801c24a:	bf08      	it	eq
 801c24c:	461a      	moveq	r2, r3
    mbedtls_sha256_finish( &sha256, padbuf );
 801c24e:	a80f      	add	r0, sp, #60	; 0x3c
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c250:	f04f 080c 	mov.w	r8, #12
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c254:	9205      	str	r2, [sp, #20]
    mbedtls_sha256_finish( &sha256, padbuf );
 801c256:	f7fc ffdb 	bl	8019210 <mbedtls_sha256_finish>
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c25a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c25e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c260:	9600      	str	r6, [sp, #0]
 801c262:	f8d3 92a4 	ldr.w	r9, [r3, #676]	; 0x2a4
 801c266:	9a05      	ldr	r2, [sp, #20]
 801c268:	ab07      	add	r3, sp, #28
 801c26a:	2130      	movs	r1, #48	; 0x30
 801c26c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801c270:	47c8      	blx	r9
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 801c272:	4b14      	ldr	r3, [pc, #80]	; (801c2c4 <ssl_calc_finished_tls_sha256+0xd4>)
 801c274:	4a0f      	ldr	r2, [pc, #60]	; (801c2b4 <ssl_calc_finished_tls_sha256+0xc4>)
 801c276:	9300      	str	r3, [sp, #0]
 801c278:	2103      	movs	r1, #3
 801c27a:	f241 33da 	movw	r3, #5082	; 0x13da
 801c27e:	4620      	mov	r0, r4
 801c280:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c284:	f7f4 fcce 	bl	8010c24 <mbedtls_debug_print_buf>
    mbedtls_sha256_free( &sha256 );
 801c288:	a80f      	add	r0, sp, #60	; 0x3c
 801c28a:	f7fc fbbc 	bl	8018a06 <mbedtls_sha256_free>
    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 801c28e:	4631      	mov	r1, r6
 801c290:	a807      	add	r0, sp, #28
 801c292:	f7ff ff85 	bl	801c1a0 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 801c296:	4b0c      	ldr	r3, [pc, #48]	; (801c2c8 <ssl_calc_finished_tls_sha256+0xd8>)
 801c298:	9300      	str	r3, [sp, #0]
 801c29a:	4a06      	ldr	r2, [pc, #24]	; (801c2b4 <ssl_calc_finished_tls_sha256+0xc4>)
 801c29c:	f44f 539f 	mov.w	r3, #5088	; 0x13e0
 801c2a0:	2102      	movs	r1, #2
 801c2a2:	4620      	mov	r0, r4
 801c2a4:	f7f4 fc5e 	bl	8010b64 <mbedtls_debug_print_msg>
}
 801c2a8:	b02b      	add	sp, #172	; 0xac
 801c2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c2ae:	bf00      	nop
 801c2b0:	08031fa8 	.word	0x08031fa8
 801c2b4:	08031f4f 	.word	0x08031f4f
 801c2b8:	08031fc5 	.word	0x08031fc5
 801c2bc:	08031f2f 	.word	0x08031f2f
 801c2c0:	08031f3f 	.word	0x08031f3f
 801c2c4:	08031fd9 	.word	0x08031fd9
 801c2c8:	08031fee 	.word	0x08031fee

0801c2cc <ssl_calc_verify_tls_sha256>:
{
 801c2cc:	b530      	push	{r4, r5, lr}
 801c2ce:	b0a1      	sub	sp, #132	; 0x84
 801c2d0:	4604      	mov	r4, r0
    mbedtls_sha256_init( &sha256 );
 801c2d2:	a805      	add	r0, sp, #20
{
 801c2d4:	460d      	mov	r5, r1
    mbedtls_sha256_init( &sha256 );
 801c2d6:	f7fc fb92 	bl	80189fe <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 801c2da:	4b16      	ldr	r3, [pc, #88]	; (801c334 <ssl_calc_verify_tls_sha256+0x68>)
 801c2dc:	4a16      	ldr	r2, [pc, #88]	; (801c338 <ssl_calc_verify_tls_sha256+0x6c>)
 801c2de:	9300      	str	r3, [sp, #0]
 801c2e0:	4620      	mov	r0, r4
 801c2e2:	f240 4316 	movw	r3, #1046	; 0x416
 801c2e6:	2102      	movs	r1, #2
 801c2e8:	f7f4 fc3c 	bl	8010b64 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 801c2ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c2ee:	a805      	add	r0, sp, #20
 801c2f0:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 801c2f4:	f7fc fb91 	bl	8018a1a <mbedtls_sha256_clone>
    mbedtls_sha256_finish( &sha256, hash );
 801c2f8:	4629      	mov	r1, r5
 801c2fa:	a805      	add	r0, sp, #20
 801c2fc:	f7fc ff88 	bl	8019210 <mbedtls_sha256_finish>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 801c300:	2320      	movs	r3, #32
 801c302:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801c306:	4b0d      	ldr	r3, [pc, #52]	; (801c33c <ssl_calc_verify_tls_sha256+0x70>)
 801c308:	9300      	str	r3, [sp, #0]
 801c30a:	4620      	mov	r0, r4
 801c30c:	4a0a      	ldr	r2, [pc, #40]	; (801c338 <ssl_calc_verify_tls_sha256+0x6c>)
 801c30e:	f240 431b 	movw	r3, #1051	; 0x41b
 801c312:	2103      	movs	r1, #3
 801c314:	f7f4 fc86 	bl	8010c24 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 801c318:	4b09      	ldr	r3, [pc, #36]	; (801c340 <ssl_calc_verify_tls_sha256+0x74>)
 801c31a:	4a07      	ldr	r2, [pc, #28]	; (801c338 <ssl_calc_verify_tls_sha256+0x6c>)
 801c31c:	9300      	str	r3, [sp, #0]
 801c31e:	2102      	movs	r1, #2
 801c320:	f240 431c 	movw	r3, #1052	; 0x41c
 801c324:	4620      	mov	r0, r4
 801c326:	f7f4 fc1d 	bl	8010b64 <mbedtls_debug_print_msg>
    mbedtls_sha256_free( &sha256 );
 801c32a:	a805      	add	r0, sp, #20
 801c32c:	f7fc fb6b 	bl	8018a06 <mbedtls_sha256_free>
}
 801c330:	b021      	add	sp, #132	; 0x84
 801c332:	bd30      	pop	{r4, r5, pc}
 801c334:	08032000 	.word	0x08032000
 801c338:	08031f4f 	.word	0x08031f4f
 801c33c:	08032016 	.word	0x08032016
 801c340:	0803202f 	.word	0x0803202f

0801c344 <tls_prf_generic>:
{
 801c344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c348:	ed2d 8b02 	vpush	{d8}
 801c34c:	b0b5      	sub	sp, #212	; 0xd4
 801c34e:	4604      	mov	r4, r0
    mbedtls_md_init( &md_ctx );
 801c350:	a801      	add	r0, sp, #4
{
 801c352:	ee08 1a10 	vmov	s16, r1
 801c356:	4692      	mov	sl, r2
 801c358:	4699      	mov	r9, r3
 801c35a:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    mbedtls_md_init( &md_ctx );
 801c35c:	f7f8 fafa 	bl	8014954 <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 801c360:	4620      	mov	r0, r4
 801c362:	f7f8 faeb 	bl	801493c <mbedtls_md_info_from_type>
 801c366:	4607      	mov	r7, r0
 801c368:	2800      	cmp	r0, #0
 801c36a:	d077      	beq.n	801c45c <tls_prf_generic+0x118>
    md_len = mbedtls_md_get_size( md_info );
 801c36c:	f7f8 fc36 	bl	8014bdc <mbedtls_md_get_size>
 801c370:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 801c372:	4648      	mov	r0, r9
 801c374:	f7e3 ff36 	bl	80001e4 <strlen>
 801c378:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c37a:	eb00 0804 	add.w	r8, r0, r4
 801c37e:	eb08 0203 	add.w	r2, r8, r3
 801c382:	2a80      	cmp	r2, #128	; 0x80
 801c384:	4605      	mov	r5, r0
 801c386:	d86b      	bhi.n	801c460 <tls_prf_generic+0x11c>
    memcpy( tmp + md_len, label, nb );
 801c388:	ab14      	add	r3, sp, #80	; 0x50
 801c38a:	eb03 0b04 	add.w	fp, r3, r4
 801c38e:	4602      	mov	r2, r0
 801c390:	4649      	mov	r1, r9
 801c392:	4658      	mov	r0, fp
 801c394:	f006 f874 	bl	8022480 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 801c398:	ab14      	add	r3, sp, #80	; 0x50
 801c39a:	e9dd 1240 	ldrd	r1, r2, [sp, #256]	; 0x100
 801c39e:	eb03 0008 	add.w	r0, r3, r8
 801c3a2:	f006 f86d 	bl	8022480 <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 801c3a6:	4639      	mov	r1, r7
 801c3a8:	2201      	movs	r2, #1
 801c3aa:	a801      	add	r0, sp, #4
 801c3ac:	f7f8 fafc 	bl	80149a8 <mbedtls_md_setup>
 801c3b0:	4607      	mov	r7, r0
 801c3b2:	b9f8      	cbnz	r0, 801c3f4 <tls_prf_generic+0xb0>
    nb += rlen;
 801c3b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 801c3b6:	ee18 1a10 	vmov	r1, s16
    nb += rlen;
 801c3ba:	441d      	add	r5, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 801c3bc:	4652      	mov	r2, sl
 801c3be:	a801      	add	r0, sp, #4
 801c3c0:	f7f8 fb4c 	bl	8014a5c <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 801c3c4:	462a      	mov	r2, r5
 801c3c6:	4659      	mov	r1, fp
 801c3c8:	a801      	add	r0, sp, #4
 801c3ca:	f7f8 fba7 	bl	8014b1c <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 801c3ce:	a914      	add	r1, sp, #80	; 0x50
 801c3d0:	a801      	add	r0, sp, #4
 801c3d2:	f7f8 fbb3 	bl	8014b3c <mbedtls_md_hmac_finish>
    for( i = 0; i < dlen; i += md_len )
 801c3d6:	46b9      	mov	r9, r7
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 801c3d8:	4425      	add	r5, r4
    for( i = 0; i < dlen; i += md_len )
 801c3da:	454e      	cmp	r6, r9
        mbedtls_md_hmac_reset ( &md_ctx );
 801c3dc:	a801      	add	r0, sp, #4
    for( i = 0; i < dlen; i += md_len )
 801c3de:	d80f      	bhi.n	801c400 <tls_prf_generic+0xbc>
    mbedtls_md_free( &md_ctx );
 801c3e0:	f7f8 fabe 	bl	8014960 <mbedtls_md_free>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 801c3e4:	2180      	movs	r1, #128	; 0x80
 801c3e6:	a814      	add	r0, sp, #80	; 0x50
 801c3e8:	f7ff feda 	bl	801c1a0 <mbedtls_zeroize>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 801c3ec:	2140      	movs	r1, #64	; 0x40
 801c3ee:	a804      	add	r0, sp, #16
 801c3f0:	f7ff fed6 	bl	801c1a0 <mbedtls_zeroize>
}
 801c3f4:	4638      	mov	r0, r7
 801c3f6:	b035      	add	sp, #212	; 0xd4
 801c3f8:	ecbd 8b02 	vpop	{d8}
 801c3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_md_hmac_reset ( &md_ctx );
 801c400:	f7f8 fbc8 	bl	8014b94 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 801c404:	462a      	mov	r2, r5
 801c406:	a914      	add	r1, sp, #80	; 0x50
 801c408:	a801      	add	r0, sp, #4
 801c40a:	f7f8 fb87 	bl	8014b1c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 801c40e:	a904      	add	r1, sp, #16
 801c410:	a801      	add	r0, sp, #4
 801c412:	f7f8 fb93 	bl	8014b3c <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
 801c416:	a801      	add	r0, sp, #4
 801c418:	f7f8 fbbc 	bl	8014b94 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 801c41c:	4622      	mov	r2, r4
 801c41e:	a914      	add	r1, sp, #80	; 0x50
 801c420:	a801      	add	r0, sp, #4
 801c422:	f7f8 fb7b 	bl	8014b1c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 801c426:	a914      	add	r1, sp, #80	; 0x50
 801c428:	a801      	add	r0, sp, #4
 801c42a:	f7f8 fb87 	bl	8014b3c <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 801c42e:	eb04 0209 	add.w	r2, r4, r9
 801c432:	9842      	ldr	r0, [sp, #264]	; 0x108
 801c434:	4296      	cmp	r6, r2
 801c436:	bf2c      	ite	cs
 801c438:	4623      	movcs	r3, r4
 801c43a:	fbb6 f3f4 	udivcc	r3, r6, r4
 801c43e:	4481      	add	r9, r0
 801c440:	bf38      	it	cc
 801c442:	fb04 6313 	mlscc	r3, r4, r3, r6
        for( j = 0; j < k; j++ )
 801c446:	a904      	add	r1, sp, #16
 801c448:	444b      	add	r3, r9
 801c44a:	4599      	cmp	r9, r3
 801c44c:	d101      	bne.n	801c452 <tls_prf_generic+0x10e>
 801c44e:	4691      	mov	r9, r2
 801c450:	e7c3      	b.n	801c3da <tls_prf_generic+0x96>
            dstbuf[i + j]  = h_i[j];
 801c452:	f811 0b01 	ldrb.w	r0, [r1], #1
 801c456:	f809 0b01 	strb.w	r0, [r9], #1
        for( j = 0; j < k; j++ )
 801c45a:	e7f6      	b.n	801c44a <tls_prf_generic+0x106>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c45c:	4f01      	ldr	r7, [pc, #4]	; (801c464 <tls_prf_generic+0x120>)
 801c45e:	e7c9      	b.n	801c3f4 <tls_prf_generic+0xb0>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c460:	4f01      	ldr	r7, [pc, #4]	; (801c468 <tls_prf_generic+0x124>)
 801c462:	e7c7      	b.n	801c3f4 <tls_prf_generic+0xb0>
 801c464:	ffff9400 	.word	0xffff9400
 801c468:	ffff8f00 	.word	0xffff8f00

0801c46c <tls_prf_sha256>:
{
 801c46c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 801c46e:	9c08      	ldr	r4, [sp, #32]
 801c470:	9403      	str	r4, [sp, #12]
 801c472:	9c07      	ldr	r4, [sp, #28]
 801c474:	9402      	str	r4, [sp, #8]
 801c476:	9c06      	ldr	r4, [sp, #24]
 801c478:	e9cd 3400 	strd	r3, r4, [sp]
 801c47c:	4613      	mov	r3, r2
 801c47e:	460a      	mov	r2, r1
 801c480:	4601      	mov	r1, r0
 801c482:	2006      	movs	r0, #6
 801c484:	f7ff ff5e 	bl	801c344 <tls_prf_generic>
}
 801c488:	b004      	add	sp, #16
 801c48a:	bd10      	pop	{r4, pc}

0801c48c <tls_prf_sha384>:
{
 801c48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
 801c48e:	9c08      	ldr	r4, [sp, #32]
 801c490:	9403      	str	r4, [sp, #12]
 801c492:	9c07      	ldr	r4, [sp, #28]
 801c494:	9402      	str	r4, [sp, #8]
 801c496:	9c06      	ldr	r4, [sp, #24]
 801c498:	e9cd 3400 	strd	r3, r4, [sp]
 801c49c:	4613      	mov	r3, r2
 801c49e:	460a      	mov	r2, r1
 801c4a0:	4601      	mov	r1, r0
 801c4a2:	2007      	movs	r0, #7
 801c4a4:	f7ff ff4e 	bl	801c344 <tls_prf_generic>
}
 801c4a8:	b004      	add	sp, #16
 801c4aa:	bd10      	pop	{r4, pc}

0801c4ac <ssl_calc_finished_tls_sha384>:
{
 801c4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c4b0:	6b47      	ldr	r7, [r0, #52]	; 0x34
{
 801c4b2:	b0c9      	sub	sp, #292	; 0x124
 801c4b4:	4604      	mov	r4, r0
 801c4b6:	460d      	mov	r5, r1
 801c4b8:	4616      	mov	r6, r2
    if( !session )
 801c4ba:	b907      	cbnz	r7, 801c4be <ssl_calc_finished_tls_sha384+0x12>
        session = ssl->session;
 801c4bc:	6b07      	ldr	r7, [r0, #48]	; 0x30
    mbedtls_sha512_init( &sha512 );
 801c4be:	a812      	add	r0, sp, #72	; 0x48
 801c4c0:	f7fc ff2f 	bl	8019322 <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );
 801c4c4:	4b29      	ldr	r3, [pc, #164]	; (801c56c <ssl_calc_finished_tls_sha384+0xc0>)
 801c4c6:	4a2a      	ldr	r2, [pc, #168]	; (801c570 <ssl_calc_finished_tls_sha384+0xc4>)
 801c4c8:	9300      	str	r3, [sp, #0]
 801c4ca:	4620      	mov	r0, r4
 801c4cc:	f241 33f3 	movw	r3, #5107	; 0x13f3
 801c4d0:	2102      	movs	r1, #2
 801c4d2:	f7f4 fb47 	bl	8010b64 <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 801c4d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c4d8:	a812      	add	r0, sp, #72	; 0x48
 801c4da:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 801c4de:	f7fc ff2e 	bl	801933e <mbedtls_sha512_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha512 state", (unsigned char *)
 801c4e2:	2340      	movs	r3, #64	; 0x40
 801c4e4:	9302      	str	r3, [sp, #8]
 801c4e6:	ab16      	add	r3, sp, #88	; 0x58
 801c4e8:	9301      	str	r3, [sp, #4]
 801c4ea:	4b22      	ldr	r3, [pc, #136]	; (801c574 <ssl_calc_finished_tls_sha384+0xc8>)
 801c4ec:	9300      	str	r3, [sp, #0]
 801c4ee:	4620      	mov	r0, r4
 801c4f0:	4a1f      	ldr	r2, [pc, #124]	; (801c570 <ssl_calc_finished_tls_sha384+0xc4>)
 801c4f2:	f241 33fe 	movw	r3, #5118	; 0x13fe
 801c4f6:	2104      	movs	r1, #4
 801c4f8:	f7f4 fb94 	bl	8010c24 <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c4fc:	4b1e      	ldr	r3, [pc, #120]	; (801c578 <ssl_calc_finished_tls_sha384+0xcc>)
 801c4fe:	4a1f      	ldr	r2, [pc, #124]	; (801c57c <ssl_calc_finished_tls_sha384+0xd0>)
    mbedtls_sha512_finish( &sha512, padbuf );
 801c500:	a906      	add	r1, sp, #24
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c502:	2e00      	cmp	r6, #0
 801c504:	bf08      	it	eq
 801c506:	461a      	moveq	r2, r3
    mbedtls_sha512_finish( &sha512, padbuf );
 801c508:	a812      	add	r0, sp, #72	; 0x48
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c50a:	f04f 080c 	mov.w	r8, #12
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c50e:	9205      	str	r2, [sp, #20]
    mbedtls_sha512_finish( &sha512, padbuf );
 801c510:	f7fd fd78 	bl	801a004 <mbedtls_sha512_finish>
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c514:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c518:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c51a:	9a05      	ldr	r2, [sp, #20]
 801c51c:	2630      	movs	r6, #48	; 0x30
 801c51e:	9600      	str	r6, [sp, #0]
 801c520:	f8d3 92a4 	ldr.w	r9, [r3, #676]	; 0x2a4
 801c524:	4631      	mov	r1, r6
 801c526:	ab06      	add	r3, sp, #24
 801c528:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801c52c:	47c8      	blx	r9
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 801c52e:	4b14      	ldr	r3, [pc, #80]	; (801c580 <ssl_calc_finished_tls_sha384+0xd4>)
 801c530:	4a0f      	ldr	r2, [pc, #60]	; (801c570 <ssl_calc_finished_tls_sha384+0xc4>)
 801c532:	9300      	str	r3, [sp, #0]
 801c534:	2103      	movs	r1, #3
 801c536:	f241 430b 	movw	r3, #5131	; 0x140b
 801c53a:	4620      	mov	r0, r4
 801c53c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c540:	f7f4 fb70 	bl	8010c24 <mbedtls_debug_print_buf>
    mbedtls_sha512_free( &sha512 );
 801c544:	a812      	add	r0, sp, #72	; 0x48
 801c546:	f7fc fef0 	bl	801932a <mbedtls_sha512_free>
    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 801c54a:	4631      	mov	r1, r6
 801c54c:	a806      	add	r0, sp, #24
 801c54e:	f7ff fe27 	bl	801c1a0 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 801c552:	4b0c      	ldr	r3, [pc, #48]	; (801c584 <ssl_calc_finished_tls_sha384+0xd8>)
 801c554:	9300      	str	r3, [sp, #0]
 801c556:	4a06      	ldr	r2, [pc, #24]	; (801c570 <ssl_calc_finished_tls_sha384+0xc4>)
 801c558:	f241 4311 	movw	r3, #5137	; 0x1411
 801c55c:	2102      	movs	r1, #2
 801c55e:	4620      	mov	r0, r4
 801c560:	f7f4 fb00 	bl	8010b64 <mbedtls_debug_print_msg>
}
 801c564:	b049      	add	sp, #292	; 0x124
 801c566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c56a:	bf00      	nop
 801c56c:	0803203e 	.word	0x0803203e
 801c570:	08031f4f 	.word	0x08031f4f
 801c574:	0803205b 	.word	0x0803205b
 801c578:	08031f2f 	.word	0x08031f2f
 801c57c:	08031f3f 	.word	0x08031f3f
 801c580:	08031fd9 	.word	0x08031fd9
 801c584:	08031fee 	.word	0x08031fee

0801c588 <ssl_calc_verify_tls_sha384>:
{
 801c588:	b530      	push	{r4, r5, lr}
 801c58a:	b0bb      	sub	sp, #236	; 0xec
 801c58c:	4604      	mov	r4, r0
    mbedtls_sha512_init( &sha512 );
 801c58e:	a804      	add	r0, sp, #16
{
 801c590:	460d      	mov	r5, r1
    mbedtls_sha512_init( &sha512 );
 801c592:	f7fc fec6 	bl	8019322 <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
 801c596:	4b16      	ldr	r3, [pc, #88]	; (801c5f0 <ssl_calc_verify_tls_sha384+0x68>)
 801c598:	4a16      	ldr	r2, [pc, #88]	; (801c5f4 <ssl_calc_verify_tls_sha384+0x6c>)
 801c59a:	9300      	str	r3, [sp, #0]
 801c59c:	4620      	mov	r0, r4
 801c59e:	f240 432b 	movw	r3, #1067	; 0x42b
 801c5a2:	2102      	movs	r1, #2
 801c5a4:	f7f4 fade 	bl	8010b64 <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 801c5a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c5aa:	a804      	add	r0, sp, #16
 801c5ac:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 801c5b0:	f7fc fec5 	bl	801933e <mbedtls_sha512_clone>
    mbedtls_sha512_finish( &sha512, hash );
 801c5b4:	4629      	mov	r1, r5
 801c5b6:	a804      	add	r0, sp, #16
 801c5b8:	f7fd fd24 	bl	801a004 <mbedtls_sha512_finish>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
 801c5bc:	2330      	movs	r3, #48	; 0x30
 801c5be:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801c5c2:	4b0d      	ldr	r3, [pc, #52]	; (801c5f8 <ssl_calc_verify_tls_sha384+0x70>)
 801c5c4:	9300      	str	r3, [sp, #0]
 801c5c6:	4620      	mov	r0, r4
 801c5c8:	4a0a      	ldr	r2, [pc, #40]	; (801c5f4 <ssl_calc_verify_tls_sha384+0x6c>)
 801c5ca:	f44f 6386 	mov.w	r3, #1072	; 0x430
 801c5ce:	2103      	movs	r1, #3
 801c5d0:	f7f4 fb28 	bl	8010c24 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 801c5d4:	4b09      	ldr	r3, [pc, #36]	; (801c5fc <ssl_calc_verify_tls_sha384+0x74>)
 801c5d6:	4a07      	ldr	r2, [pc, #28]	; (801c5f4 <ssl_calc_verify_tls_sha384+0x6c>)
 801c5d8:	9300      	str	r3, [sp, #0]
 801c5da:	2102      	movs	r1, #2
 801c5dc:	f240 4331 	movw	r3, #1073	; 0x431
 801c5e0:	4620      	mov	r0, r4
 801c5e2:	f7f4 fabf 	bl	8010b64 <mbedtls_debug_print_msg>
    mbedtls_sha512_free( &sha512 );
 801c5e6:	a804      	add	r0, sp, #16
 801c5e8:	f7fc fe9f 	bl	801932a <mbedtls_sha512_free>
}
 801c5ec:	b03b      	add	sp, #236	; 0xec
 801c5ee:	bd30      	pop	{r4, r5, pc}
 801c5f0:	08032071 	.word	0x08032071
 801c5f4:	08031f4f 	.word	0x08031f4f
 801c5f8:	08032016 	.word	0x08032016
 801c5fc:	0803202f 	.word	0x0803202f

0801c600 <ssl_update_checksum_sha256>:
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c600:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c602:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 801c606:	f7fc bdfe 	b.w	8019206 <mbedtls_sha256_update>

0801c60a <ssl_update_checksum_sha384>:
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c60a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c60c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 801c610:	f7fd bcf3 	b.w	8019ffa <mbedtls_sha512_update>

0801c614 <ssl_update_checksum_start>:
{
 801c614:	b570      	push	{r4, r5, r6, lr}
 801c616:	4604      	mov	r4, r0
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c618:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c61a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
{
 801c61e:	460d      	mov	r5, r1
 801c620:	4616      	mov	r6, r2
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c622:	f7fc fdf0 	bl	8019206 <mbedtls_sha256_update>
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c626:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c628:	4632      	mov	r2, r6
 801c62a:	4629      	mov	r1, r5
 801c62c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
}
 801c630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c634:	f7fd bce1 	b.w	8019ffa <mbedtls_sha512_update>

0801c638 <ssl_set_timer>:
    if( ssl->f_set_timer == NULL )
 801c638:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 801c63a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c63c:	4604      	mov	r4, r0
 801c63e:	460d      	mov	r5, r1
    if( ssl->f_set_timer == NULL )
 801c640:	b17b      	cbz	r3, 801c662 <ssl_set_timer+0x2a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 801c642:	4b09      	ldr	r3, [pc, #36]	; (801c668 <ssl_set_timer+0x30>)
 801c644:	9101      	str	r1, [sp, #4]
 801c646:	9300      	str	r3, [sp, #0]
 801c648:	4a08      	ldr	r2, [pc, #32]	; (801c66c <ssl_set_timer+0x34>)
 801c64a:	2352      	movs	r3, #82	; 0x52
 801c64c:	2103      	movs	r1, #3
 801c64e:	f7f4 fa89 	bl	8010b64 <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 801c652:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c654:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801c656:	462a      	mov	r2, r5
 801c658:	08a9      	lsrs	r1, r5, #2
}
 801c65a:	b003      	add	sp, #12
 801c65c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 801c660:	4718      	bx	r3
}
 801c662:	b003      	add	sp, #12
 801c664:	bd30      	pop	{r4, r5, pc}
 801c666:	bf00      	nop
 801c668:	08032087 	.word	0x08032087
 801c66c:	08031f4f 	.word	0x08031f4f

0801c670 <mbedtls_ssl_derive_keys>:
{
 801c670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c674:	b0d9      	sub	sp, #356	; 0x164
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c676:	6b43      	ldr	r3, [r0, #52]	; 0x34
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 801c678:	6c85      	ldr	r5, [r0, #72]	; 0x48
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c67a:	9307      	str	r3, [sp, #28]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c67c:	4b8d      	ldr	r3, [pc, #564]	; (801c8b4 <mbedtls_ssl_derive_keys+0x244>)
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 801c67e:	6b86      	ldr	r6, [r0, #56]	; 0x38
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c680:	4a8d      	ldr	r2, [pc, #564]	; (801c8b8 <mbedtls_ssl_derive_keys+0x248>)
 801c682:	9300      	str	r3, [sp, #0]
 801c684:	2102      	movs	r1, #2
 801c686:	f240 13f5 	movw	r3, #501	; 0x1f5
{
 801c68a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c68c:	f7f4 fa6a 	bl	8010b64 <mbedtls_debug_print_msg>
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 801c690:	682b      	ldr	r3, [r5, #0]
 801c692:	7a18      	ldrb	r0, [r3, #8]
 801c694:	f7f3 fd2e 	bl	80100f4 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 801c698:	682b      	ldr	r3, [r5, #0]
 801c69a:	4680      	mov	r8, r0
 801c69c:	b980      	cbnz	r0, 801c6c0 <mbedtls_ssl_derive_keys+0x50>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 801c69e:	7a1b      	ldrb	r3, [r3, #8]
 801c6a0:	9301      	str	r3, [sp, #4]
 801c6a2:	4b86      	ldr	r3, [pc, #536]	; (801c8bc <mbedtls_ssl_derive_keys+0x24c>)
 801c6a4:	9300      	str	r3, [sp, #0]
 801c6a6:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c6aa:	4a83      	ldr	r2, [pc, #524]	; (801c8b8 <mbedtls_ssl_derive_keys+0x248>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c6ac:	f8df b250 	ldr.w	fp, [pc, #592]	; 801c900 <mbedtls_ssl_derive_keys+0x290>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c6b0:	2101      	movs	r1, #1
 801c6b2:	4620      	mov	r0, r4
 801c6b4:	f7f4 fa56 	bl	8010b64 <mbedtls_debug_print_msg>
}
 801c6b8:	4658      	mov	r0, fp
 801c6ba:	b059      	add	sp, #356	; 0x164
 801c6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 801c6c0:	7a58      	ldrb	r0, [r3, #9]
 801c6c2:	f7f8 f93b 	bl	801493c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801c6c6:	4681      	mov	r9, r0
 801c6c8:	b938      	cbnz	r0, 801c6da <mbedtls_ssl_derive_keys+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c6ca:	682b      	ldr	r3, [r5, #0]
 801c6cc:	7a5b      	ldrb	r3, [r3, #9]
 801c6ce:	9301      	str	r3, [sp, #4]
 801c6d0:	4b7b      	ldr	r3, [pc, #492]	; (801c8c0 <mbedtls_ssl_derive_keys+0x250>)
 801c6d2:	9300      	str	r3, [sp, #0]
 801c6d4:	f240 2302 	movw	r3, #514	; 0x202
 801c6d8:	e7e7      	b.n	801c6aa <mbedtls_ssl_derive_keys+0x3a>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 801c6da:	6963      	ldr	r3, [r4, #20]
 801c6dc:	2b03      	cmp	r3, #3
 801c6de:	d171      	bne.n	801c7c4 <mbedtls_ssl_derive_keys+0x154>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 801c6e0:	682b      	ldr	r3, [r5, #0]
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 801c6e2:	7a5b      	ldrb	r3, [r3, #9]
 801c6e4:	2b07      	cmp	r3, #7
 801c6e6:	d165      	bne.n	801c7b4 <mbedtls_ssl_derive_keys+0x144>
        handshake->tls_prf = tls_prf_sha384;
 801c6e8:	4b76      	ldr	r3, [pc, #472]	; (801c8c4 <mbedtls_ssl_derive_keys+0x254>)
 801c6ea:	f8c6 32a4 	str.w	r3, [r6, #676]	; 0x2a4
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 801c6ee:	4b76      	ldr	r3, [pc, #472]	; (801c8c8 <mbedtls_ssl_derive_keys+0x258>)
 801c6f0:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 801c6f4:	4b75      	ldr	r3, [pc, #468]	; (801c8cc <mbedtls_ssl_derive_keys+0x25c>)
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 801c6f6:	f8c6 32a0 	str.w	r3, [r6, #672]	; 0x2a0
    if( handshake->resume == 0 )
 801c6fa:	9b07      	ldr	r3, [sp, #28]
 801c6fc:	3334      	adds	r3, #52	; 0x34
 801c6fe:	9306      	str	r3, [sp, #24]
 801c700:	f8d6 3330 	ldr.w	r3, [r6, #816]	; 0x330
 801c704:	2b00      	cmp	r3, #0
 801c706:	f040 80ca 	bne.w	801c89e <mbedtls_ssl_derive_keys+0x22e>
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 801c70a:	f8d6 32a8 	ldr.w	r3, [r6, #680]	; 0x2a8
 801c70e:	4a6a      	ldr	r2, [pc, #424]	; (801c8b8 <mbedtls_ssl_derive_keys+0x248>)
 801c710:	f506 7a3b 	add.w	sl, r6, #748	; 0x2ec
 801c714:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c718:	4b6d      	ldr	r3, [pc, #436]	; (801c8d0 <mbedtls_ssl_derive_keys+0x260>)
 801c71a:	9300      	str	r3, [sp, #0]
 801c71c:	2103      	movs	r1, #3
 801c71e:	f240 2342 	movw	r3, #578	; 0x242
 801c722:	4620      	mov	r0, r4
 801c724:	f7f4 fa7e 	bl	8010c24 <mbedtls_debug_print_buf>
        if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED )
 801c728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c72a:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801c72e:	2b01      	cmp	r3, #1
 801c730:	d156      	bne.n	801c7e0 <mbedtls_ssl_derive_keys+0x170>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using extended master secret" ) );
 801c732:	4b68      	ldr	r3, [pc, #416]	; (801c8d4 <mbedtls_ssl_derive_keys+0x264>)
 801c734:	4a60      	ldr	r2, [pc, #384]	; (801c8b8 <mbedtls_ssl_derive_keys+0x248>)
 801c736:	9300      	str	r3, [sp, #0]
 801c738:	2103      	movs	r1, #3
 801c73a:	f240 234b 	movw	r3, #587	; 0x24b
 801c73e:	4620      	mov	r0, r4
 801c740:	f7f4 fa10 	bl	8010b64 <mbedtls_debug_print_msg>
            ssl->handshake->calc_verify( ssl, session_hash );
 801c744:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c746:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
 801c74a:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801c74e:	4659      	mov	r1, fp
 801c750:	4620      	mov	r0, r4
 801c752:	4798      	blx	r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801c754:	6963      	ldr	r3, [r4, #20]
 801c756:	2b03      	cmp	r3, #3
 801c758:	d140      	bne.n	801c7dc <mbedtls_ssl_derive_keys+0x16c>
                if( ssl->transform_negotiate->ciphersuite_info->mac ==
 801c75a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	7a5b      	ldrb	r3, [r3, #9]
                    hash_len = 32;
 801c760:	2b07      	cmp	r3, #7
 801c762:	bf0c      	ite	eq
 801c764:	2730      	moveq	r7, #48	; 0x30
 801c766:	2720      	movne	r7, #32
            MBEDTLS_SSL_DEBUG_BUF( 3, "session hash", session_hash, hash_len );
 801c768:	4b5b      	ldr	r3, [pc, #364]	; (801c8d8 <mbedtls_ssl_derive_keys+0x268>)
 801c76a:	4a53      	ldr	r2, [pc, #332]	; (801c8b8 <mbedtls_ssl_derive_keys+0x248>)
 801c76c:	9300      	str	r3, [sp, #0]
 801c76e:	e9cd b701 	strd	fp, r7, [sp, #4]
 801c772:	f44f 7318 	mov.w	r3, #608	; 0x260
 801c776:	2103      	movs	r1, #3
 801c778:	4620      	mov	r0, r4
 801c77a:	f7f4 fa53 	bl	8010c24 <mbedtls_debug_print_buf>
            ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 801c77e:	2330      	movs	r3, #48	; 0x30
 801c780:	9302      	str	r3, [sp, #8]
 801c782:	9b06      	ldr	r3, [sp, #24]
 801c784:	4a55      	ldr	r2, [pc, #340]	; (801c8dc <mbedtls_ssl_derive_keys+0x26c>)
 801c786:	e9cd 7300 	strd	r7, r3, [sp]
 801c78a:	4650      	mov	r0, sl
 801c78c:	465b      	mov	r3, fp
 801c78e:	f8d6 72a4 	ldr.w	r7, [r6, #676]	; 0x2a4
 801c792:	f8d6 12a8 	ldr.w	r1, [r6, #680]	; 0x2a8
 801c796:	47b8      	blx	r7
            if( ret != 0 )
 801c798:	4683      	mov	fp, r0
 801c79a:	2800      	cmp	r0, #0
 801c79c:	d037      	beq.n	801c80e <mbedtls_ssl_derive_keys+0x19e>
                MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c79e:	4b50      	ldr	r3, [pc, #320]	; (801c8e0 <mbedtls_ssl_derive_keys+0x270>)
 801c7a0:	9300      	str	r3, [sp, #0]
 801c7a2:	9001      	str	r0, [sp, #4]
 801c7a4:	f44f 731a 	mov.w	r3, #616	; 0x268
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801c7a8:	4a43      	ldr	r2, [pc, #268]	; (801c8b8 <mbedtls_ssl_derive_keys+0x248>)
 801c7aa:	2101      	movs	r1, #1
 801c7ac:	4620      	mov	r0, r4
 801c7ae:	f7f4 fa09 	bl	8010bc4 <mbedtls_debug_print_ret>
        return( ret );
 801c7b2:	e781      	b.n	801c6b8 <mbedtls_ssl_derive_keys+0x48>
        handshake->tls_prf = tls_prf_sha256;
 801c7b4:	4b4b      	ldr	r3, [pc, #300]	; (801c8e4 <mbedtls_ssl_derive_keys+0x274>)
 801c7b6:	f8c6 32a4 	str.w	r3, [r6, #676]	; 0x2a4
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 801c7ba:	4b4b      	ldr	r3, [pc, #300]	; (801c8e8 <mbedtls_ssl_derive_keys+0x278>)
 801c7bc:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 801c7c0:	4b4a      	ldr	r3, [pc, #296]	; (801c8ec <mbedtls_ssl_derive_keys+0x27c>)
 801c7c2:	e798      	b.n	801c6f6 <mbedtls_ssl_derive_keys+0x86>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c7c4:	4b4a      	ldr	r3, [pc, #296]	; (801c8f0 <mbedtls_ssl_derive_keys+0x280>)
 801c7c6:	9300      	str	r3, [sp, #0]
 801c7c8:	f240 2332 	movw	r3, #562	; 0x232
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c7cc:	4a3a      	ldr	r2, [pc, #232]	; (801c8b8 <mbedtls_ssl_derive_keys+0x248>)
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c7ce:	f8df b134 	ldr.w	fp, [pc, #308]	; 801c904 <mbedtls_ssl_derive_keys+0x294>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c7d2:	2101      	movs	r1, #1
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	f7f4 f9c5 	bl	8010b64 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c7da:	e76d      	b.n	801c6b8 <mbedtls_ssl_derive_keys+0x48>
                hash_len = 36;
 801c7dc:	2724      	movs	r7, #36	; 0x24
 801c7de:	e7c3      	b.n	801c768 <mbedtls_ssl_derive_keys+0xf8>
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 801c7e0:	2330      	movs	r3, #48	; 0x30
 801c7e2:	9302      	str	r3, [sp, #8]
 801c7e4:	9b06      	ldr	r3, [sp, #24]
 801c7e6:	9301      	str	r3, [sp, #4]
 801c7e8:	2340      	movs	r3, #64	; 0x40
 801c7ea:	9300      	str	r3, [sp, #0]
 801c7ec:	f8d6 72a4 	ldr.w	r7, [r6, #676]	; 0x2a4
 801c7f0:	4a40      	ldr	r2, [pc, #256]	; (801c8f4 <mbedtls_ssl_derive_keys+0x284>)
 801c7f2:	f8d6 12a8 	ldr.w	r1, [r6, #680]	; 0x2a8
 801c7f6:	f506 732b 	add.w	r3, r6, #684	; 0x2ac
 801c7fa:	4650      	mov	r0, sl
 801c7fc:	47b8      	blx	r7
        if( ret != 0 )
 801c7fe:	4683      	mov	fp, r0
 801c800:	b128      	cbz	r0, 801c80e <mbedtls_ssl_derive_keys+0x19e>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c802:	4b37      	ldr	r3, [pc, #220]	; (801c8e0 <mbedtls_ssl_derive_keys+0x270>)
 801c804:	9300      	str	r3, [sp, #0]
 801c806:	9001      	str	r0, [sp, #4]
 801c808:	f240 2375 	movw	r3, #629	; 0x275
 801c80c:	e7cc      	b.n	801c7a8 <mbedtls_ssl_derive_keys+0x138>
        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 801c80e:	2142      	movs	r1, #66	; 0x42
 801c810:	4650      	mov	r0, sl
 801c812:	f7ff fcc5 	bl	801c1a0 <mbedtls_zeroize>
    memcpy( tmp, handshake->randbytes, 64 );
 801c816:	f506 732b 	add.w	r3, r6, #684	; 0x2ac
 801c81a:	af08      	add	r7, sp, #32
 801c81c:	f506 7c3b 	add.w	ip, r6, #748	; 0x2ec
 801c820:	469a      	mov	sl, r3
 801c822:	6818      	ldr	r0, [r3, #0]
 801c824:	6859      	ldr	r1, [r3, #4]
 801c826:	463a      	mov	r2, r7
 801c828:	c203      	stmia	r2!, {r0, r1}
 801c82a:	3308      	adds	r3, #8
 801c82c:	4563      	cmp	r3, ip
 801c82e:	4617      	mov	r7, r2
 801c830:	d1f7      	bne.n	801c822 <mbedtls_ssl_derive_keys+0x1b2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 801c832:	af10      	add	r7, sp, #64	; 0x40
 801c834:	4652      	mov	r2, sl
 801c836:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
 801c83a:	463b      	mov	r3, r7
 801c83c:	cb03      	ldmia	r3!, {r0, r1}
 801c83e:	4563      	cmp	r3, ip
 801c840:	6010      	str	r0, [r2, #0]
 801c842:	6051      	str	r1, [r2, #4]
 801c844:	461f      	mov	r7, r3
 801c846:	f102 0208 	add.w	r2, r2, #8
 801c84a:	d1f6      	bne.n	801c83a <mbedtls_ssl_derive_keys+0x1ca>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 801c84c:	af08      	add	r7, sp, #32
 801c84e:	f506 7233 	add.w	r2, r6, #716	; 0x2cc
 801c852:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801c856:	463b      	mov	r3, r7
 801c858:	cb03      	ldmia	r3!, {r0, r1}
 801c85a:	4563      	cmp	r3, ip
 801c85c:	6010      	str	r0, [r2, #0]
 801c85e:	6051      	str	r1, [r2, #4]
 801c860:	461f      	mov	r7, r3
 801c862:	f102 0208 	add.w	r2, r2, #8
 801c866:	d1f6      	bne.n	801c856 <mbedtls_ssl_derive_keys+0x1e6>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 801c868:	2140      	movs	r1, #64	; 0x40
 801c86a:	a808      	add	r0, sp, #32
 801c86c:	f7ff fc98 	bl	801c1a0 <mbedtls_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 801c870:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c874:	9302      	str	r3, [sp, #8]
 801c876:	2740      	movs	r7, #64	; 0x40
 801c878:	ab18      	add	r3, sp, #96	; 0x60
 801c87a:	9301      	str	r3, [sp, #4]
 801c87c:	9700      	str	r7, [sp, #0]
 801c87e:	f8d6 62a4 	ldr.w	r6, [r6, #676]	; 0x2a4
 801c882:	4a1d      	ldr	r2, [pc, #116]	; (801c8f8 <mbedtls_ssl_derive_keys+0x288>)
 801c884:	9806      	ldr	r0, [sp, #24]
 801c886:	4653      	mov	r3, sl
 801c888:	2130      	movs	r1, #48	; 0x30
 801c88a:	47b0      	blx	r6
    if( ret != 0 )
 801c88c:	4683      	mov	fp, r0
 801c88e:	2800      	cmp	r0, #0
 801c890:	d03a      	beq.n	801c908 <mbedtls_ssl_derive_keys+0x298>
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c892:	4b13      	ldr	r3, [pc, #76]	; (801c8e0 <mbedtls_ssl_derive_keys+0x270>)
 801c894:	9300      	str	r3, [sp, #0]
 801c896:	9001      	str	r0, [sp, #4]
 801c898:	f240 2396 	movw	r3, #662	; 0x296
 801c89c:	e784      	b.n	801c7a8 <mbedtls_ssl_derive_keys+0x138>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 801c89e:	4b17      	ldr	r3, [pc, #92]	; (801c8fc <mbedtls_ssl_derive_keys+0x28c>)
 801c8a0:	9300      	str	r3, [sp, #0]
 801c8a2:	4a05      	ldr	r2, [pc, #20]	; (801c8b8 <mbedtls_ssl_derive_keys+0x248>)
 801c8a4:	f44f 731f 	mov.w	r3, #636	; 0x27c
 801c8a8:	2103      	movs	r1, #3
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	f7f4 f95a 	bl	8010b64 <mbedtls_debug_print_msg>
 801c8b0:	e7b1      	b.n	801c816 <mbedtls_ssl_derive_keys+0x1a6>
 801c8b2:	bf00      	nop
 801c8b4:	0803209a 	.word	0x0803209a
 801c8b8:	08031f4f 	.word	0x08031f4f
 801c8bc:	080320a9 	.word	0x080320a9
 801c8c0:	080320c6 	.word	0x080320c6
 801c8c4:	0801c48d 	.word	0x0801c48d
 801c8c8:	0801c589 	.word	0x0801c589
 801c8cc:	0801c4ad 	.word	0x0801c4ad
 801c8d0:	080320e7 	.word	0x080320e7
 801c8d4:	080320f8 	.word	0x080320f8
 801c8d8:	08032115 	.word	0x08032115
 801c8dc:	080320fe 	.word	0x080320fe
 801c8e0:	08032122 	.word	0x08032122
 801c8e4:	0801c46d 	.word	0x0801c46d
 801c8e8:	0801c2cd 	.word	0x0801c2cd
 801c8ec:	0801c1f1 	.word	0x0801c1f1
 801c8f0:	08031a7f 	.word	0x08031a7f
 801c8f4:	08032107 	.word	0x08032107
 801c8f8:	08032145 	.word	0x08032145
 801c8fc:	08032126 	.word	0x08032126
 801c900:	ffff8f00 	.word	0xffff8f00
 801c904:	ffff9400 	.word	0xffff9400
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 801c908:	9b07      	ldr	r3, [sp, #28]
 801c90a:	6898      	ldr	r0, [r3, #8]
 801c90c:	f7fd fcca 	bl	801a2a4 <mbedtls_ssl_get_ciphersuite_name>
 801c910:	4ba1      	ldr	r3, [pc, #644]	; (801cb98 <mbedtls_ssl_derive_keys+0x528>)
 801c912:	4aa2      	ldr	r2, [pc, #648]	; (801cb9c <mbedtls_ssl_derive_keys+0x52c>)
 801c914:	9001      	str	r0, [sp, #4]
 801c916:	9300      	str	r3, [sp, #0]
 801c918:	2103      	movs	r1, #3
 801c91a:	f240 239a 	movw	r3, #666	; 0x29a
 801c91e:	4620      	mov	r0, r4
 801c920:	f7f4 f920 	bl	8010b64 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 801c924:	2330      	movs	r3, #48	; 0x30
 801c926:	9302      	str	r3, [sp, #8]
 801c928:	9b06      	ldr	r3, [sp, #24]
 801c92a:	9301      	str	r3, [sp, #4]
 801c92c:	4b9c      	ldr	r3, [pc, #624]	; (801cba0 <mbedtls_ssl_derive_keys+0x530>)
 801c92e:	4a9b      	ldr	r2, [pc, #620]	; (801cb9c <mbedtls_ssl_derive_keys+0x52c>)
 801c930:	9300      	str	r3, [sp, #0]
 801c932:	2103      	movs	r1, #3
 801c934:	f44f 7327 	mov.w	r3, #668	; 0x29c
 801c938:	4620      	mov	r0, r4
 801c93a:	f7f4 f973 	bl	8010c24 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 801c93e:	4b99      	ldr	r3, [pc, #612]	; (801cba4 <mbedtls_ssl_derive_keys+0x534>)
 801c940:	4a96      	ldr	r2, [pc, #600]	; (801cb9c <mbedtls_ssl_derive_keys+0x52c>)
 801c942:	9300      	str	r3, [sp, #0]
 801c944:	2104      	movs	r1, #4
 801c946:	f240 239d 	movw	r3, #669	; 0x29d
 801c94a:	4620      	mov	r0, r4
 801c94c:	e9cd a701 	strd	sl, r7, [sp, #4]
 801c950:	f7f4 f968 	bl	8010c24 <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 801c954:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c958:	9302      	str	r3, [sp, #8]
 801c95a:	ab18      	add	r3, sp, #96	; 0x60
 801c95c:	9301      	str	r3, [sp, #4]
 801c95e:	4b92      	ldr	r3, [pc, #584]	; (801cba8 <mbedtls_ssl_derive_keys+0x538>)
 801c960:	4a8e      	ldr	r2, [pc, #568]	; (801cb9c <mbedtls_ssl_derive_keys+0x52c>)
 801c962:	9300      	str	r3, [sp, #0]
 801c964:	2104      	movs	r1, #4
 801c966:	f240 239e 	movw	r3, #670	; 0x29e
 801c96a:	4620      	mov	r0, r4
 801c96c:	f7f4 f95a 	bl	8010c24 <mbedtls_debug_print_buf>
    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 801c970:	4639      	mov	r1, r7
 801c972:	4650      	mov	r0, sl
 801c974:	f7ff fc14 	bl	801c1a0 <mbedtls_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
 801c978:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c97c:	08db      	lsrs	r3, r3, #3
 801c97e:	606b      	str	r3, [r5, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 801c980:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c984:	2b06      	cmp	r3, #6
 801c986:	d001      	beq.n	801c98c <mbedtls_ssl_derive_keys+0x31c>
 801c988:	2b08      	cmp	r3, #8
 801c98a:	d10e      	bne.n	801c9aa <mbedtls_ssl_derive_keys+0x33a>
        transform->maclen = 0;
 801c98c:	2300      	movs	r3, #0
 801c98e:	616b      	str	r3, [r5, #20]
        transform->fixed_ivlen = 4;
 801c990:	210c      	movs	r1, #12
 801c992:	2304      	movs	r3, #4
 801c994:	e9c5 1303 	strd	r1, r3, [r5, #12]
                            + ( transform->ciphersuite_info->flags &
 801c998:	682b      	ldr	r3, [r5, #0]
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 801c99a:	7f1b      	ldrb	r3, [r3, #28]
 801c99c:	f013 0f02 	tst.w	r3, #2
                            + ( transform->ciphersuite_info->flags &
 801c9a0:	bf14      	ite	ne
 801c9a2:	2310      	movne	r3, #16
 801c9a4:	2318      	moveq	r3, #24
                transform->minlen += transform->ivlen;
 801c9a6:	60ab      	str	r3, [r5, #8]
 801c9a8:	e029      	b.n	801c9fe <mbedtls_ssl_derive_keys+0x38e>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 801c9aa:	2201      	movs	r2, #1
 801c9ac:	4649      	mov	r1, r9
 801c9ae:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801c9b2:	f7f7 fff9 	bl	80149a8 <mbedtls_md_setup>
 801c9b6:	4683      	mov	fp, r0
 801c9b8:	b938      	cbnz	r0, 801c9ca <mbedtls_ssl_derive_keys+0x35a>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
 801c9ba:	2201      	movs	r2, #1
 801c9bc:	4649      	mov	r1, r9
 801c9be:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801c9c2:	f7f7 fff1 	bl	80149a8 <mbedtls_md_setup>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 801c9c6:	4683      	mov	fp, r0
 801c9c8:	b130      	cbz	r0, 801c9d8 <mbedtls_ssl_derive_keys+0x368>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 801c9ca:	4b78      	ldr	r3, [pc, #480]	; (801cbac <mbedtls_ssl_derive_keys+0x53c>)
 801c9cc:	9300      	str	r3, [sp, #0]
 801c9ce:	f8cd b004 	str.w	fp, [sp, #4]
 801c9d2:	f240 23bb 	movw	r3, #699	; 0x2bb
 801c9d6:	e6e7      	b.n	801c7a8 <mbedtls_ssl_derive_keys+0x138>
        transform->maclen = mbedtls_md_get_size( md_info );
 801c9d8:	4648      	mov	r0, r9
 801c9da:	f7f8 f8ff 	bl	8014bdc <mbedtls_md_get_size>
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c9de:	9b07      	ldr	r3, [sp, #28]
        transform->ivlen = cipher_info->iv_size;
 801c9e0:	f8d8 200c 	ldr.w	r2, [r8, #12]
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c9e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
        transform->maclen = mbedtls_md_get_size( md_info );
 801c9e6:	6168      	str	r0, [r5, #20]
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c9e8:	2b01      	cmp	r3, #1
            transform->maclen = MBEDTLS_SSL_TRUNCATED_HMAC_LEN;
 801c9ea:	bf04      	itt	eq
 801c9ec:	230a      	moveq	r3, #10
 801c9ee:	616b      	streq	r3, [r5, #20]
        transform->ivlen = cipher_info->iv_size;
 801c9f0:	60ea      	str	r2, [r5, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 801c9f2:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c9f6:	6969      	ldr	r1, [r5, #20]
 801c9f8:	2b07      	cmp	r3, #7
 801c9fa:	d139      	bne.n	801ca70 <mbedtls_ssl_derive_keys+0x400>
            transform->minlen = transform->maclen;
 801c9fc:	60a9      	str	r1, [r5, #8]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 801c9fe:	696b      	ldr	r3, [r5, #20]
 801ca00:	9304      	str	r3, [sp, #16]
 801ca02:	68eb      	ldr	r3, [r5, #12]
 801ca04:	9303      	str	r3, [sp, #12]
 801ca06:	68ab      	ldr	r3, [r5, #8]
 801ca08:	9302      	str	r3, [sp, #8]
 801ca0a:	686b      	ldr	r3, [r5, #4]
 801ca0c:	9301      	str	r3, [sp, #4]
 801ca0e:	4b68      	ldr	r3, [pc, #416]	; (801cbb0 <mbedtls_ssl_derive_keys+0x540>)
 801ca10:	9300      	str	r3, [sp, #0]
 801ca12:	4a62      	ldr	r2, [pc, #392]	; (801cb9c <mbedtls_ssl_derive_keys+0x52c>)
 801ca14:	f240 23fd 	movw	r3, #765	; 0x2fd
 801ca18:	2103      	movs	r1, #3
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	f7f4 f8a2 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801ca20:	6823      	ldr	r3, [r4, #0]
 801ca22:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801ca26:	07db      	lsls	r3, r3, #31
 801ca28:	d434      	bmi.n	801ca94 <mbedtls_ssl_derive_keys+0x424>
        key1 = keyblk + transform->maclen * 2;
 801ca2a:	f8d5 b014 	ldr.w	fp, [r5, #20]
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801ca2e:	686f      	ldr	r7, [r5, #4]
        iv_copy_len = ( transform->fixed_ivlen ) ?
 801ca30:	692a      	ldr	r2, [r5, #16]
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801ca32:	ab18      	add	r3, sp, #96	; 0x60
 801ca34:	eb07 064b 	add.w	r6, r7, fp, lsl #1
        key1 = keyblk + transform->maclen * 2;
 801ca38:	ea4f 094b 	mov.w	r9, fp, lsl #1
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801ca3c:	441e      	add	r6, r3
        mac_dec = keyblk + transform->maclen;
 801ca3e:	eb03 0a0b 	add.w	sl, r3, fp
                            transform->fixed_ivlen : transform->ivlen;
 801ca42:	b902      	cbnz	r2, 801ca46 <mbedtls_ssl_derive_keys+0x3d6>
 801ca44:	68ea      	ldr	r2, [r5, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 801ca46:	9206      	str	r2, [sp, #24]
 801ca48:	19f1      	adds	r1, r6, r7
 801ca4a:	f105 0018 	add.w	r0, r5, #24
 801ca4e:	f005 fd17 	bl	8022480 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 801ca52:	9a06      	ldr	r2, [sp, #24]
 801ca54:	18b9      	adds	r1, r7, r2
 801ca56:	4431      	add	r1, r6
 801ca58:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801ca5c:	f005 fd10 	bl	8022480 <memcpy>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801ca60:	6963      	ldr	r3, [r4, #20]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	dc1b      	bgt.n	801ca9e <mbedtls_ssl_derive_keys+0x42e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ca66:	4b53      	ldr	r3, [pc, #332]	; (801cbb4 <mbedtls_ssl_derive_keys+0x544>)
 801ca68:	9300      	str	r3, [sp, #0]
 801ca6a:	f240 3349 	movw	r3, #841	; 0x349
 801ca6e:	e6ad      	b.n	801c7cc <mbedtls_ssl_derive_keys+0x15c>
                                  + cipher_info->block_size
 801ca70:	f8d8 3014 	ldr.w	r3, [r8, #20]
                                  - transform->maclen % cipher_info->block_size;
 801ca74:	fbb1 f1f3 	udiv	r1, r1, r3
 801ca78:	fb03 3301 	mla	r3, r3, r1, r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 801ca7c:	6961      	ldr	r1, [r4, #20]
                transform->minlen = transform->maclen
 801ca7e:	60ab      	str	r3, [r5, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 801ca80:	3902      	subs	r1, #2
 801ca82:	2901      	cmp	r1, #1
 801ca84:	d801      	bhi.n	801ca8a <mbedtls_ssl_derive_keys+0x41a>
                transform->minlen += transform->ivlen;
 801ca86:	4413      	add	r3, r2
 801ca88:	e78d      	b.n	801c9a6 <mbedtls_ssl_derive_keys+0x336>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ca8a:	4b4a      	ldr	r3, [pc, #296]	; (801cbb4 <mbedtls_ssl_derive_keys+0x544>)
 801ca8c:	9300      	str	r3, [sp, #0]
 801ca8e:	f240 23f7 	movw	r3, #759	; 0x2f7
 801ca92:	e69b      	b.n	801c7cc <mbedtls_ssl_derive_keys+0x15c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ca94:	4b47      	ldr	r3, [pc, #284]	; (801cbb4 <mbedtls_ssl_derive_keys+0x544>)
 801ca96:	9300      	str	r3, [sp, #0]
 801ca98:	f240 332d 	movw	r3, #813	; 0x32d
 801ca9c:	e696      	b.n	801c7cc <mbedtls_ssl_derive_keys+0x15c>
        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, transform->maclen );
 801ca9e:	465a      	mov	r2, fp
 801caa0:	a918      	add	r1, sp, #96	; 0x60
 801caa2:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801caa6:	f7f7 ffd9 	bl	8014a5c <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 801caaa:	f105 0750 	add.w	r7, r5, #80	; 0x50
        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, transform->maclen );
 801caae:	696a      	ldr	r2, [r5, #20]
 801cab0:	4651      	mov	r1, sl
 801cab2:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801cab6:	f7f7 ffd1 	bl	8014a5c <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 801caba:	4641      	mov	r1, r8
 801cabc:	4638      	mov	r0, r7
 801cabe:	f7f3 fd13 	bl	80104e8 <mbedtls_cipher_setup>
 801cac2:	4683      	mov	fp, r0
 801cac4:	b128      	cbz	r0, 801cad2 <mbedtls_ssl_derive_keys+0x462>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 801cac6:	4b3c      	ldr	r3, [pc, #240]	; (801cbb8 <mbedtls_ssl_derive_keys+0x548>)
 801cac8:	9300      	str	r3, [sp, #0]
 801caca:	9001      	str	r0, [sp, #4]
 801cacc:	f240 336d 	movw	r3, #877	; 0x36d
 801cad0:	e66a      	b.n	801c7a8 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 801cad2:	3590      	adds	r5, #144	; 0x90
 801cad4:	4641      	mov	r1, r8
 801cad6:	4628      	mov	r0, r5
 801cad8:	f7f3 fd06 	bl	80104e8 <mbedtls_cipher_setup>
 801cadc:	4683      	mov	fp, r0
 801cade:	b128      	cbz	r0, 801caec <mbedtls_ssl_derive_keys+0x47c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 801cae0:	4b35      	ldr	r3, [pc, #212]	; (801cbb8 <mbedtls_ssl_derive_keys+0x548>)
 801cae2:	9300      	str	r3, [sp, #0]
 801cae4:	9001      	str	r0, [sp, #4]
 801cae6:	f44f 735d 	mov.w	r3, #884	; 0x374
 801caea:	e65d      	b.n	801c7a8 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 801caec:	a918      	add	r1, sp, #96	; 0x60
 801caee:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801caf2:	2301      	movs	r3, #1
 801caf4:	4449      	add	r1, r9
 801caf6:	4638      	mov	r0, r7
 801caf8:	f7f3 fb32 	bl	8010160 <mbedtls_cipher_setkey>
 801cafc:	4683      	mov	fp, r0
 801cafe:	b128      	cbz	r0, 801cb0c <mbedtls_ssl_derive_keys+0x49c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801cb00:	4b2e      	ldr	r3, [pc, #184]	; (801cbbc <mbedtls_ssl_derive_keys+0x54c>)
 801cb02:	9300      	str	r3, [sp, #0]
 801cb04:	9001      	str	r0, [sp, #4]
 801cb06:	f44f 735f 	mov.w	r3, #892	; 0x37c
 801cb0a:	e64d      	b.n	801c7a8 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 801cb0c:	4603      	mov	r3, r0
 801cb0e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801cb12:	4631      	mov	r1, r6
 801cb14:	4628      	mov	r0, r5
 801cb16:	f7f3 fb23 	bl	8010160 <mbedtls_cipher_setkey>
 801cb1a:	4683      	mov	fp, r0
 801cb1c:	b128      	cbz	r0, 801cb2a <mbedtls_ssl_derive_keys+0x4ba>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801cb1e:	4b27      	ldr	r3, [pc, #156]	; (801cbbc <mbedtls_ssl_derive_keys+0x54c>)
 801cb20:	9300      	str	r3, [sp, #0]
 801cb22:	9001      	str	r0, [sp, #4]
 801cb24:	f44f 7361 	mov.w	r3, #900	; 0x384
 801cb28:	e63e      	b.n	801c7a8 <mbedtls_ssl_derive_keys+0x138>
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 801cb2a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801cb2e:	2b02      	cmp	r3, #2
 801cb30:	d123      	bne.n	801cb7a <mbedtls_ssl_derive_keys+0x50a>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 801cb32:	2104      	movs	r1, #4
 801cb34:	4638      	mov	r0, r7
 801cb36:	f7f3 fc99 	bl	801046c <mbedtls_cipher_set_padding_mode>
 801cb3a:	4606      	mov	r6, r0
 801cb3c:	b158      	cbz	r0, 801cb56 <mbedtls_ssl_derive_keys+0x4e6>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 801cb3e:	4b20      	ldr	r3, [pc, #128]	; (801cbc0 <mbedtls_ssl_derive_keys+0x550>)
 801cb40:	9001      	str	r0, [sp, #4]
 801cb42:	9300      	str	r3, [sp, #0]
 801cb44:	4a15      	ldr	r2, [pc, #84]	; (801cb9c <mbedtls_ssl_derive_keys+0x52c>)
 801cb46:	f240 338e 	movw	r3, #910	; 0x38e
 801cb4a:	2101      	movs	r1, #1
 801cb4c:	4620      	mov	r0, r4
 801cb4e:	f7f4 f839 	bl	8010bc4 <mbedtls_debug_print_ret>
            return( ret );
 801cb52:	46b3      	mov	fp, r6
 801cb54:	e5b0      	b.n	801c6b8 <mbedtls_ssl_derive_keys+0x48>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 801cb56:	4628      	mov	r0, r5
 801cb58:	2104      	movs	r1, #4
 801cb5a:	f7f3 fc87 	bl	801046c <mbedtls_cipher_set_padding_mode>
 801cb5e:	4605      	mov	r5, r0
 801cb60:	b158      	cbz	r0, 801cb7a <mbedtls_ssl_derive_keys+0x50a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 801cb62:	4b17      	ldr	r3, [pc, #92]	; (801cbc0 <mbedtls_ssl_derive_keys+0x550>)
 801cb64:	9001      	str	r0, [sp, #4]
 801cb66:	9300      	str	r3, [sp, #0]
 801cb68:	4a0c      	ldr	r2, [pc, #48]	; (801cb9c <mbedtls_ssl_derive_keys+0x52c>)
 801cb6a:	f240 3395 	movw	r3, #917	; 0x395
 801cb6e:	2101      	movs	r1, #1
 801cb70:	4620      	mov	r0, r4
 801cb72:	f7f4 f827 	bl	8010bc4 <mbedtls_debug_print_ret>
            return( ret );
 801cb76:	46ab      	mov	fp, r5
 801cb78:	e59e      	b.n	801c6b8 <mbedtls_ssl_derive_keys+0x48>
    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 801cb7a:	a818      	add	r0, sp, #96	; 0x60
 801cb7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cb80:	f7ff fb0e 	bl	801c1a0 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 801cb84:	4b0f      	ldr	r3, [pc, #60]	; (801cbc4 <mbedtls_ssl_derive_keys+0x554>)
 801cb86:	9300      	str	r3, [sp, #0]
 801cb88:	4a04      	ldr	r2, [pc, #16]	; (801cb9c <mbedtls_ssl_derive_keys+0x52c>)
 801cb8a:	f240 33bd 	movw	r3, #957	; 0x3bd
 801cb8e:	2102      	movs	r1, #2
 801cb90:	4620      	mov	r0, r4
 801cb92:	f7f3 ffe7 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801cb96:	e58f      	b.n	801c6b8 <mbedtls_ssl_derive_keys+0x48>
 801cb98:	08032153 	.word	0x08032153
 801cb9c:	08031f4f 	.word	0x08031f4f
 801cba0:	08032107 	.word	0x08032107
 801cba4:	08031558 	.word	0x08031558
 801cba8:	08032164 	.word	0x08032164
 801cbac:	08031bab 	.word	0x08031bab
 801cbb0:	0803216e 	.word	0x0803216e
 801cbb4:	08031a7f 	.word	0x08031a7f
 801cbb8:	0803219c 	.word	0x0803219c
 801cbbc:	080321b1 	.word	0x080321b1
 801cbc0:	080321c7 	.word	0x080321c7
 801cbc4:	080321e7 	.word	0x080321e7

0801cbc8 <mbedtls_ssl_fetch_input>:
{
 801cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbcc:	b086      	sub	sp, #24
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801cbce:	4b43      	ldr	r3, [pc, #268]	; (801ccdc <mbedtls_ssl_fetch_input+0x114>)
 801cbd0:	9300      	str	r3, [sp, #0]
{
 801cbd2:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801cbd4:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 801cbd8:	4a41      	ldr	r2, [pc, #260]	; (801cce0 <mbedtls_ssl_fetch_input+0x118>)
{
 801cbda:	460e      	mov	r6, r1
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801cbdc:	2102      	movs	r1, #2
 801cbde:	f7f3 ffc1 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 801cbe2:	69e3      	ldr	r3, [r4, #28]
 801cbe4:	b97b      	cbnz	r3, 801cc06 <mbedtls_ssl_fetch_input+0x3e>
 801cbe6:	6a23      	ldr	r3, [r4, #32]
 801cbe8:	b96b      	cbnz	r3, 801cc06 <mbedtls_ssl_fetch_input+0x3e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801cbea:	4b3e      	ldr	r3, [pc, #248]	; (801cce4 <mbedtls_ssl_fetch_input+0x11c>)
 801cbec:	9300      	str	r3, [sp, #0]
 801cbee:	f640 03a4 	movw	r3, #2212	; 0x8a4
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801cbf2:	4a3b      	ldr	r2, [pc, #236]	; (801cce0 <mbedtls_ssl_fetch_input+0x118>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801cbf4:	4d3c      	ldr	r5, [pc, #240]	; (801cce8 <mbedtls_ssl_fetch_input+0x120>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801cbf6:	2101      	movs	r1, #1
 801cbf8:	4620      	mov	r0, r4
 801cbfa:	f7f3 ffb3 	bl	8010b64 <mbedtls_debug_print_msg>
}
 801cbfe:	4628      	mov	r0, r5
 801cc00:	b006      	add	sp, #24
 801cc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 801cc06:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801cc08:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801cc0a:	1a9b      	subs	r3, r3, r2
 801cc0c:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 801cc10:	3315      	adds	r3, #21
 801cc12:	42b3      	cmp	r3, r6
 801cc14:	d204      	bcs.n	801cc20 <mbedtls_ssl_fetch_input+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801cc16:	4b35      	ldr	r3, [pc, #212]	; (801ccec <mbedtls_ssl_fetch_input+0x124>)
 801cc18:	9300      	str	r3, [sp, #0]
 801cc1a:	f640 03ab 	movw	r3, #2219	; 0x8ab
 801cc1e:	e7e8      	b.n	801cbf2 <mbedtls_ssl_fetch_input+0x2a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 801cc20:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801cc22:	4f33      	ldr	r7, [pc, #204]	; (801ccf0 <mbedtls_ssl_fetch_input+0x128>)
 801cc24:	9301      	str	r3, [sp, #4]
 801cc26:	4a2e      	ldr	r2, [pc, #184]	; (801cce0 <mbedtls_ssl_fetch_input+0x118>)
 801cc28:	9602      	str	r6, [sp, #8]
 801cc2a:	9700      	str	r7, [sp, #0]
 801cc2c:	f640 133d 	movw	r3, #2365	; 0x93d
 801cc30:	2102      	movs	r1, #2
 801cc32:	4620      	mov	r0, r4
 801cc34:	f7f3 ff96 	bl	8010b64 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801cc38:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801cd00 <mbedtls_ssl_fetch_input+0x138>
 801cc3c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801cce0 <mbedtls_ssl_fetch_input+0x118>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 801cc40:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801cd04 <mbedtls_ssl_fetch_input+0x13c>
        while( ssl->in_left < nb_want )
 801cc44:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801cc46:	42b2      	cmp	r2, r6
 801cc48:	d30a      	bcc.n	801cc60 <mbedtls_ssl_fetch_input+0x98>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 801cc4a:	4b2a      	ldr	r3, [pc, #168]	; (801ccf4 <mbedtls_ssl_fetch_input+0x12c>)
 801cc4c:	9300      	str	r3, [sp, #0]
 801cc4e:	4a24      	ldr	r2, [pc, #144]	; (801cce0 <mbedtls_ssl_fetch_input+0x118>)
 801cc50:	f640 1363 	movw	r3, #2403	; 0x963
 801cc54:	2102      	movs	r1, #2
 801cc56:	4620      	mov	r0, r4
 801cc58:	f7f3 ff84 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801cc5c:	2500      	movs	r5, #0
 801cc5e:	e7ce      	b.n	801cbfe <mbedtls_ssl_fetch_input+0x36>
    if( ssl->f_get_timer == NULL )
 801cc60:	6d63      	ldr	r3, [r4, #84]	; 0x54
            len = nb_want - ssl->in_left;
 801cc62:	1ab2      	subs	r2, r6, r2
    if( ssl->f_get_timer == NULL )
 801cc64:	b353      	cbz	r3, 801ccbc <mbedtls_ssl_fetch_input+0xf4>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 801cc66:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801cc68:	9205      	str	r2, [sp, #20]
 801cc6a:	4798      	blx	r3
 801cc6c:	2802      	cmp	r0, #2
 801cc6e:	9a05      	ldr	r2, [sp, #20]
 801cc70:	d124      	bne.n	801ccbc <mbedtls_ssl_fetch_input+0xf4>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801cc72:	f8cd 9000 	str.w	r9, [sp]
 801cc76:	2360      	movs	r3, #96	; 0x60
 801cc78:	4642      	mov	r2, r8
 801cc7a:	2103      	movs	r1, #3
 801cc7c:	4620      	mov	r0, r4
 801cc7e:	f7f3 ff71 	bl	8010b64 <mbedtls_debug_print_msg>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 801cc82:	4655      	mov	r5, sl
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 801cc84:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801cc86:	9602      	str	r6, [sp, #8]
 801cc88:	e9cd 7300 	strd	r7, r3, [sp]
 801cc8c:	4642      	mov	r2, r8
 801cc8e:	f640 1355 	movw	r3, #2389	; 0x955
 801cc92:	2102      	movs	r1, #2
 801cc94:	4620      	mov	r0, r4
 801cc96:	f7f3 ff65 	bl	8010b64 <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 801cc9a:	4b17      	ldr	r3, [pc, #92]	; (801ccf8 <mbedtls_ssl_fetch_input+0x130>)
 801cc9c:	9300      	str	r3, [sp, #0]
 801cc9e:	9501      	str	r5, [sp, #4]
 801cca0:	f640 1357 	movw	r3, #2391	; 0x957
 801cca4:	4642      	mov	r2, r8
 801cca6:	2102      	movs	r1, #2
 801cca8:	4620      	mov	r0, r4
 801ccaa:	f7f3 ff8b 	bl	8010bc4 <mbedtls_debug_print_ret>
            if( ret == 0 )
 801ccae:	2d00      	cmp	r5, #0
 801ccb0:	d012      	beq.n	801ccd8 <mbedtls_ssl_fetch_input+0x110>
            if( ret < 0 )
 801ccb2:	dba4      	blt.n	801cbfe <mbedtls_ssl_fetch_input+0x36>
            ssl->in_left += ret;
 801ccb4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801ccb6:	4428      	add	r0, r5
 801ccb8:	67e0      	str	r0, [r4, #124]	; 0x7c
 801ccba:	e7c3      	b.n	801cc44 <mbedtls_ssl_fetch_input+0x7c>
                if( ssl->f_recv_timeout != NULL )
 801ccbc:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 801ccc0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801ccc2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801ccc4:	4419      	add	r1, r3
 801ccc6:	b125      	cbz	r5, 801ccd2 <mbedtls_ssl_fetch_input+0x10a>
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 801ccc8:	6823      	ldr	r3, [r4, #0]
 801ccca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cccc:	47a8      	blx	r5
                    ret = ssl->f_recv( ssl->p_bio,
 801ccce:	4605      	mov	r5, r0
 801ccd0:	e7d8      	b.n	801cc84 <mbedtls_ssl_fetch_input+0xbc>
 801ccd2:	69e3      	ldr	r3, [r4, #28]
 801ccd4:	4798      	blx	r3
 801ccd6:	e7fa      	b.n	801ccce <mbedtls_ssl_fetch_input+0x106>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 801ccd8:	4d08      	ldr	r5, [pc, #32]	; (801ccfc <mbedtls_ssl_fetch_input+0x134>)
 801ccda:	e790      	b.n	801cbfe <mbedtls_ssl_fetch_input+0x36>
 801ccdc:	080321f6 	.word	0x080321f6
 801cce0:	08031f4f 	.word	0x08031f4f
 801cce4:	08032205 	.word	0x08032205
 801cce8:	ffff8f00 	.word	0xffff8f00
 801ccec:	08032241 	.word	0x08032241
 801ccf0:	08032260 	.word	0x08032260
 801ccf4:	0803229d 	.word	0x0803229d
 801ccf8:	08032287 	.word	0x08032287
 801ccfc:	ffff8d80 	.word	0xffff8d80
 801cd00:	08032279 	.word	0x08032279
 801cd04:	ffff9800 	.word	0xffff9800

0801cd08 <mbedtls_ssl_flush_output>:
{
 801cd08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 801cd0c:	4b3b      	ldr	r3, [pc, #236]	; (801cdfc <mbedtls_ssl_flush_output+0xf4>)
 801cd0e:	9300      	str	r3, [sp, #0]
{
 801cd10:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 801cd12:	f44f 6317 	mov.w	r3, #2416	; 0x970
 801cd16:	4a3a      	ldr	r2, [pc, #232]	; (801ce00 <mbedtls_ssl_flush_output+0xf8>)
 801cd18:	2102      	movs	r1, #2
 801cd1a:	f7f3 ff23 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->f_send == NULL )
 801cd1e:	69a3      	ldr	r3, [r4, #24]
 801cd20:	b96b      	cbnz	r3, 801cd3e <mbedtls_ssl_flush_output+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801cd22:	4b38      	ldr	r3, [pc, #224]	; (801ce04 <mbedtls_ssl_flush_output+0xfc>)
 801cd24:	9300      	str	r3, [sp, #0]
 801cd26:	4a36      	ldr	r2, [pc, #216]	; (801ce00 <mbedtls_ssl_flush_output+0xf8>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801cd28:	4d37      	ldr	r5, [pc, #220]	; (801ce08 <mbedtls_ssl_flush_output+0x100>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801cd2a:	f640 1374 	movw	r3, #2420	; 0x974
 801cd2e:	2101      	movs	r1, #1
 801cd30:	4620      	mov	r0, r4
 801cd32:	f7f3 ff17 	bl	8010b64 <mbedtls_debug_print_msg>
}
 801cd36:	4628      	mov	r0, r5
 801cd38:	b004      	add	sp, #16
 801cd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->out_left == 0 )
 801cd3e:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 801cd42:	b1ed      	cbz	r5, 801cd80 <mbedtls_ssl_flush_output+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 801cd44:	4f31      	ldr	r7, [pc, #196]	; (801ce0c <mbedtls_ssl_flush_output+0x104>)
 801cd46:	4e2e      	ldr	r6, [pc, #184]	; (801ce00 <mbedtls_ssl_flush_output+0xf8>)
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801cd48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ce1c <mbedtls_ssl_flush_output+0x114>
    while( ssl->out_left > 0 )
 801cd4c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 801cd50:	bb03      	cbnz	r3, 801cd94 <mbedtls_ssl_flush_output+0x8c>
 801cd52:	2207      	movs	r2, #7
        if( ++ssl->out_ctr[i - 1] != 0 )
 801cd54:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801cd58:	5c8b      	ldrb	r3, [r1, r2]
 801cd5a:	3301      	adds	r3, #1
 801cd5c:	b2db      	uxtb	r3, r3
 801cd5e:	548b      	strb	r3, [r1, r2]
 801cd60:	3a01      	subs	r2, #1
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d13f      	bne.n	801cde6 <mbedtls_ssl_flush_output+0xde>
    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 801cd66:	1c53      	adds	r3, r2, #1
 801cd68:	d1f4      	bne.n	801cd54 <mbedtls_ssl_flush_output+0x4c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801cd6a:	4b29      	ldr	r3, [pc, #164]	; (801ce10 <mbedtls_ssl_flush_output+0x108>)
 801cd6c:	9300      	str	r3, [sp, #0]
 801cd6e:	4a24      	ldr	r2, [pc, #144]	; (801ce00 <mbedtls_ssl_flush_output+0xf8>)
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801cd70:	4d28      	ldr	r5, [pc, #160]	; (801ce14 <mbedtls_ssl_flush_output+0x10c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801cd72:	f640 1398 	movw	r3, #2456	; 0x998
 801cd76:	2101      	movs	r1, #1
 801cd78:	4620      	mov	r0, r4
 801cd7a:	f7f3 fef3 	bl	8010b64 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801cd7e:	e7da      	b.n	801cd36 <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 801cd80:	4b25      	ldr	r3, [pc, #148]	; (801ce18 <mbedtls_ssl_flush_output+0x110>)
 801cd82:	9300      	str	r3, [sp, #0]
 801cd84:	4a1e      	ldr	r2, [pc, #120]	; (801ce00 <mbedtls_ssl_flush_output+0xf8>)
 801cd86:	f640 137c 	movw	r3, #2428	; 0x97c
 801cd8a:	2102      	movs	r1, #2
 801cd8c:	4620      	mov	r0, r4
 801cd8e:	f7f3 fee9 	bl	8010b64 <mbedtls_debug_print_msg>
        return( 0 );
 801cd92:	e7d0      	b.n	801cd36 <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 801cd94:	9302      	str	r3, [sp, #8]
 801cd96:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cd9a:	3305      	adds	r3, #5
 801cd9c:	e9cd 7300 	strd	r7, r3, [sp]
 801cda0:	4632      	mov	r2, r6
 801cda2:	f640 1382 	movw	r3, #2434	; 0x982
 801cda6:	2102      	movs	r1, #2
 801cda8:	4620      	mov	r0, r4
 801cdaa:	f7f3 fedb 	bl	8010b64 <mbedtls_debug_print_msg>
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 801cdae:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 801cdb2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cdb6:	69a3      	ldr	r3, [r4, #24]
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 801cdb8:	3105      	adds	r1, #5
              ssl->out_msglen - ssl->out_left;
 801cdba:	1a89      	subs	r1, r1, r2
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cdbc:	4401      	add	r1, r0
 801cdbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cdc0:	4798      	blx	r3
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801cdc2:	f640 1389 	movw	r3, #2441	; 0x989
 801cdc6:	e9cd 8000 	strd	r8, r0, [sp]
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cdca:	4605      	mov	r5, r0
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801cdcc:	4632      	mov	r2, r6
 801cdce:	2102      	movs	r1, #2
 801cdd0:	4620      	mov	r0, r4
 801cdd2:	f7f3 fef7 	bl	8010bc4 <mbedtls_debug_print_ret>
        if( ret <= 0 )
 801cdd6:	2d00      	cmp	r5, #0
 801cdd8:	ddad      	ble.n	801cd36 <mbedtls_ssl_flush_output+0x2e>
        ssl->out_left -= ret;
 801cdda:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801cdde:	1b40      	subs	r0, r0, r5
 801cde0:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
 801cde4:	e7b2      	b.n	801cd4c <mbedtls_ssl_flush_output+0x44>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 801cde6:	4b0c      	ldr	r3, [pc, #48]	; (801ce18 <mbedtls_ssl_flush_output+0x110>)
 801cde8:	9300      	str	r3, [sp, #0]
 801cdea:	4a05      	ldr	r2, [pc, #20]	; (801ce00 <mbedtls_ssl_flush_output+0xf8>)
 801cdec:	f640 139c 	movw	r3, #2460	; 0x99c
 801cdf0:	2102      	movs	r1, #2
 801cdf2:	4620      	mov	r0, r4
 801cdf4:	f7f3 feb6 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801cdf8:	2500      	movs	r5, #0
 801cdfa:	e79c      	b.n	801cd36 <mbedtls_ssl_flush_output+0x2e>
 801cdfc:	080322ac 	.word	0x080322ac
 801ce00:	08031f4f 	.word	0x08031f4f
 801ce04:	08032205 	.word	0x08032205
 801ce08:	ffff8f00 	.word	0xffff8f00
 801ce0c:	080322cc 	.word	0x080322cc
 801ce10:	080322f9 	.word	0x080322f9
 801ce14:	ffff9480 	.word	0xffff9480
 801ce18:	080322bc 	.word	0x080322bc
 801ce1c:	080322ed 	.word	0x080322ed

0801ce20 <mbedtls_ssl_write_record>:
{
 801ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce24:	b08f      	sub	sp, #60	; 0x3c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801ce26:	4bba      	ldr	r3, [pc, #744]	; (801d110 <mbedtls_ssl_write_record+0x2f0>)
    size_t len = ssl->out_msglen;
 801ce28:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801ce2c:	4ab9      	ldr	r2, [pc, #740]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
 801ce2e:	9300      	str	r3, [sp, #0]
{
 801ce30:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801ce32:	f640 238d 	movw	r3, #2701	; 0xa8d
 801ce36:	2102      	movs	r1, #2
 801ce38:	f7f3 fe94 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801ce3c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801ce40:	2b16      	cmp	r3, #22
 801ce42:	d126      	bne.n	801ce92 <mbedtls_ssl_write_record+0x72>
        out_msg_type = ssl->out_msg[0];
 801ce44:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801ce48:	780a      	ldrb	r2, [r1, #0]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 801ce4a:	b17a      	cbz	r2, 801ce6c <mbedtls_ssl_write_record+0x4c>
 801ce4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ce4e:	b96b      	cbnz	r3, 801ce6c <mbedtls_ssl_write_record+0x4c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ce50:	4bb1      	ldr	r3, [pc, #708]	; (801d118 <mbedtls_ssl_write_record+0x2f8>)
 801ce52:	9300      	str	r3, [sp, #0]
 801ce54:	4aaf      	ldr	r2, [pc, #700]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801ce56:	4db1      	ldr	r5, [pc, #708]	; (801d11c <mbedtls_ssl_write_record+0x2fc>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ce58:	f640 239f 	movw	r3, #2719	; 0xa9f
 801ce5c:	2101      	movs	r1, #1
 801ce5e:	4620      	mov	r0, r4
 801ce60:	f7f3 fe80 	bl	8010b64 <mbedtls_debug_print_msg>
}
 801ce64:	4628      	mov	r0, r5
 801ce66:	b00f      	add	sp, #60	; 0x3c
 801ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 801ce6c:	1f2b      	subs	r3, r5, #4
 801ce6e:	0c18      	lsrs	r0, r3, #16
 801ce70:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 801ce72:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801ce76:	0a18      	lsrs	r0, r3, #8
 801ce78:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 801ce7a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801ce7e:	70cb      	strb	r3, [r1, #3]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 801ce80:	b13a      	cbz	r2, 801ce92 <mbedtls_ssl_write_record+0x72>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 801ce82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ce84:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801ce88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801ce8c:	462a      	mov	r2, r5
 801ce8e:	4620      	mov	r0, r4
 801ce90:	4798      	blx	r3
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 801ce92:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801ce96:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 801ce9a:	701a      	strb	r2, [r3, #0]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 801ce9c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 801cea0:	6962      	ldr	r2, [r4, #20]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 801cea2:	6921      	ldr	r1, [r4, #16]
 801cea4:	7059      	strb	r1, [r3, #1]
        ver[1] = (unsigned char) minor;
 801cea6:	709a      	strb	r2, [r3, #2]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 801cea8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801ceac:	0a2a      	lsrs	r2, r5, #8
 801ceae:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 801ceb0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801ceb4:	705d      	strb	r5, [r3, #1]
        if( ssl->transform_out != NULL )
 801ceb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	f000 81e0 	beq.w	801d27e <mbedtls_ssl_write_record+0x45e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 801cebe:	4b98      	ldr	r3, [pc, #608]	; (801d120 <mbedtls_ssl_write_record+0x300>)
 801cec0:	9300      	str	r3, [sp, #0]
 801cec2:	4a94      	ldr	r2, [pc, #592]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
 801cec4:	f240 43ea 	movw	r3, #1258	; 0x4ea
 801cec8:	2102      	movs	r1, #2
 801ceca:	4620      	mov	r0, r4
 801cecc:	f7f3 fe4a 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 801ced0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ced2:	b10b      	cbz	r3, 801ced8 <mbedtls_ssl_write_record+0xb8>
 801ced4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ced6:	b953      	cbnz	r3, 801ceee <mbedtls_ssl_write_record+0xce>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ced8:	4b8f      	ldr	r3, [pc, #572]	; (801d118 <mbedtls_ssl_write_record+0x2f8>)
 801ceda:	9300      	str	r3, [sp, #0]
 801cedc:	f240 43ee 	movw	r3, #1262	; 0x4ee
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cee0:	4a8c      	ldr	r2, [pc, #560]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801cee2:	4d8e      	ldr	r5, [pc, #568]	; (801d11c <mbedtls_ssl_write_record+0x2fc>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cee4:	2101      	movs	r1, #1
 801cee6:	4620      	mov	r0, r4
 801cee8:	f7f3 fe3c 	bl	8010b64 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801ceec:	e0fd      	b.n	801d0ea <mbedtls_ssl_write_record+0x2ca>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801ceee:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cef0:	b105      	cbz	r5, 801cef4 <mbedtls_ssl_write_record+0xd4>
    return ctx->cipher_info->mode;
 801cef2:	786d      	ldrb	r5, [r5, #1]
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 801cef4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cef8:	9302      	str	r3, [sp, #8]
 801cefa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801cefe:	9301      	str	r3, [sp, #4]
 801cf00:	4b88      	ldr	r3, [pc, #544]	; (801d124 <mbedtls_ssl_write_record+0x304>)
 801cf02:	9300      	str	r3, [sp, #0]
 801cf04:	4a83      	ldr	r2, [pc, #524]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
 801cf06:	f240 43f4 	movw	r3, #1268	; 0x4f4
 801cf0a:	2104      	movs	r1, #4
 801cf0c:	4620      	mov	r0, r4
 801cf0e:	f7f3 fe89 	bl	8010c24 <mbedtls_debug_print_buf>
    if( mode == MBEDTLS_MODE_STREAM ||
 801cf12:	2d07      	cmp	r5, #7
 801cf14:	d002      	beq.n	801cf1c <mbedtls_ssl_write_record+0xfc>
 801cf16:	2d02      	cmp	r5, #2
 801cf18:	f040 808d 	bne.w	801d036 <mbedtls_ssl_write_record+0x216>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801cf1c:	6963      	ldr	r3, [r4, #20]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	f340 8084 	ble.w	801d02c <mbedtls_ssl_write_record+0x20c>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 801cf24:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cf26:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801cf2a:	2208      	movs	r2, #8
 801cf2c:	3038      	adds	r0, #56	; 0x38
 801cf2e:	f7f7 fdf5 	bl	8014b1c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 801cf32:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cf34:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801cf38:	2203      	movs	r2, #3
 801cf3a:	3038      	adds	r0, #56	; 0x38
 801cf3c:	f7f7 fdee 	bl	8014b1c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 801cf40:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cf42:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 801cf46:	2202      	movs	r2, #2
 801cf48:	3038      	adds	r0, #56	; 0x38
 801cf4a:	f7f7 fde7 	bl	8014b1c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 801cf4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cf50:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 801cf54:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cf58:	3038      	adds	r0, #56	; 0x38
 801cf5a:	f7f7 fddf 	bl	8014b1c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc,
 801cf5e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cf62:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cf66:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cf68:	4419      	add	r1, r3
 801cf6a:	3038      	adds	r0, #56	; 0x38
 801cf6c:	f7f7 fde6 	bl	8014b3c <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 801cf70:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cf72:	3038      	adds	r0, #56	; 0x38
 801cf74:	f7f7 fe0e 	bl	8014b94 <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 801cf78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cf7a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 801cf7e:	695b      	ldr	r3, [r3, #20]
 801cf80:	9302      	str	r3, [sp, #8]
 801cf82:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801cf86:	4413      	add	r3, r2
 801cf88:	9301      	str	r3, [sp, #4]
 801cf8a:	4b67      	ldr	r3, [pc, #412]	; (801d128 <mbedtls_ssl_write_record+0x308>)
 801cf8c:	4a61      	ldr	r2, [pc, #388]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
 801cf8e:	9300      	str	r3, [sp, #0]
 801cf90:	2104      	movs	r1, #4
 801cf92:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 801cf96:	4620      	mov	r0, r4
 801cf98:	f7f3 fe44 	bl	8010c24 <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->maclen;
 801cf9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cf9e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cfa2:	6952      	ldr	r2, [r2, #20]
 801cfa4:	4413      	add	r3, r2
 801cfa6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        auth_done++;
 801cfaa:	f04f 0801 	mov.w	r8, #1
    if( mode == MBEDTLS_MODE_GCM ||
 801cfae:	2d06      	cmp	r5, #6
 801cfb0:	d002      	beq.n	801cfb8 <mbedtls_ssl_write_record+0x198>
 801cfb2:	2d08      	cmp	r5, #8
 801cfb4:	f040 80de 	bne.w	801d174 <mbedtls_ssl_write_record+0x354>
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cfb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        memcpy( add_data, ssl->out_ctr, 8 );
 801cfba:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cfbe:	681b      	ldr	r3, [r3, #0]
        memcpy( add_data, ssl->out_ctr, 8 );
 801cfc0:	6810      	ldr	r0, [r2, #0]
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cfc2:	7f1b      	ldrb	r3, [r3, #28]
        memcpy( add_data, ssl->out_ctr, 8 );
 801cfc4:	6851      	ldr	r1, [r2, #4]
 801cfc6:	ad0a      	add	r5, sp, #40	; 0x28
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cfc8:	f013 0f02 	tst.w	r3, #2
        memcpy( add_data, ssl->out_ctr, 8 );
 801cfcc:	462b      	mov	r3, r5
 801cfce:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 801cfd0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801cfd4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        ver[0] = (unsigned char) major;
 801cfd8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
        ver[1] = (unsigned char) minor;
 801cfdc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801cfe0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        ver[0] = (unsigned char) major;
 801cfe4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        add_data[12] = ssl->out_msglen & 0xFF;
 801cfe8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801cfec:	ea4f 2213 	mov.w	r2, r3, lsr #8
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801cff0:	f04f 0b0d 	mov.w	fp, #13
 801cff4:	4b4d      	ldr	r3, [pc, #308]	; (801d12c <mbedtls_ssl_write_record+0x30c>)
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801cff6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801cffa:	9300      	str	r3, [sp, #0]
 801cffc:	4a45      	ldr	r2, [pc, #276]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
 801cffe:	f240 535a 	movw	r3, #1370	; 0x55a
 801d002:	f04f 0104 	mov.w	r1, #4
 801d006:	e9cd 5b01 	strd	r5, fp, [sp, #4]
 801d00a:	4620      	mov	r0, r4
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801d00c:	bf14      	ite	ne
 801d00e:	2708      	movne	r7, #8
 801d010:	2710      	moveq	r7, #16
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d012:	f7f3 fe07 	bl	8010c24 <mbedtls_debug_print_buf>
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 801d016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d018:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
 801d01c:	1a52      	subs	r2, r2, r1
 801d01e:	2a08      	cmp	r2, #8
 801d020:	d00c      	beq.n	801d03c <mbedtls_ssl_write_record+0x21c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d022:	4b3d      	ldr	r3, [pc, #244]	; (801d118 <mbedtls_ssl_write_record+0x2f8>)
 801d024:	9300      	str	r3, [sp, #0]
 801d026:	f240 5363 	movw	r3, #1379	; 0x563
 801d02a:	e759      	b.n	801cee0 <mbedtls_ssl_write_record+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d02c:	4b3a      	ldr	r3, [pc, #232]	; (801d118 <mbedtls_ssl_write_record+0x2f8>)
 801d02e:	9300      	str	r3, [sp, #0]
 801d030:	f240 531c 	movw	r3, #1308	; 0x51c
 801d034:	e754      	b.n	801cee0 <mbedtls_ssl_write_record+0xc0>
    int auth_done = 0;
 801d036:	f04f 0800 	mov.w	r8, #0
 801d03a:	e7b8      	b.n	801cfae <mbedtls_ssl_write_record+0x18e>
        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 801d03c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801d040:	3318      	adds	r3, #24
 801d042:	6802      	ldr	r2, [r0, #0]
 801d044:	505a      	str	r2, [r3, r1]
 801d046:	185e      	adds	r6, r3, r1
 801d048:	6842      	ldr	r2, [r0, #4]
 801d04a:	6072      	str	r2, [r6, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 801d04c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801d050:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 801d054:	680b      	ldr	r3, [r1, #0]
 801d056:	6013      	str	r3, [r2, #0]
 801d058:	684b      	ldr	r3, [r1, #4]
 801d05a:	6053      	str	r3, [r2, #4]
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
 801d05c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d05e:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801d062:	1a9b      	subs	r3, r3, r2
 801d064:	9302      	str	r3, [sp, #8]
 801d066:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801d06a:	9301      	str	r3, [sp, #4]
 801d06c:	4b30      	ldr	r3, [pc, #192]	; (801d130 <mbedtls_ssl_write_record+0x310>)
 801d06e:	4a29      	ldr	r2, [pc, #164]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
 801d070:	9300      	str	r3, [sp, #0]
 801d072:	2104      	movs	r1, #4
 801d074:	f240 536b 	movw	r3, #1387	; 0x56b
 801d078:	4620      	mov	r0, r4
 801d07a:	f7f3 fdd3 	bl	8010c24 <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->ivlen -
 801d07e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        enc_msglen = ssl->out_msglen;
 801d080:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
        ssl->out_msglen += ssl->transform_out->ivlen -
 801d084:	68d3      	ldr	r3, [r2, #12]
 801d086:	6912      	ldr	r2, [r2, #16]
        enc_msg = ssl->out_msg;
 801d088:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
 801d08c:	4433      	add	r3, r6
 801d08e:	1a9b      	subs	r3, r3, r2
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801d090:	2200      	movs	r2, #0
 801d092:	e9cd 3201 	strd	r3, r2, [sp, #4]
        ssl->out_msglen += ssl->transform_out->ivlen -
 801d096:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801d09a:	4b26      	ldr	r3, [pc, #152]	; (801d134 <mbedtls_ssl_write_record+0x314>)
 801d09c:	4a1d      	ldr	r2, [pc, #116]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
 801d09e:	9300      	str	r3, [sp, #0]
 801d0a0:	2103      	movs	r1, #3
 801d0a2:	f240 5376 	movw	r3, #1398	; 0x576
 801d0a6:	4620      	mov	r0, r4
 801d0a8:	f7f3 fd5c 	bl	8010b64 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 801d0ac:	eb09 0a06 	add.w	sl, r9, r6
 801d0b0:	ab09      	add	r3, sp, #36	; 0x24
 801d0b2:	e9cd 9303 	strd	r9, r3, [sp, #12]
 801d0b6:	e9cd a705 	strd	sl, r7, [sp, #20]
 801d0ba:	e9cd 9601 	strd	r9, r6, [sp, #4]
 801d0be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801d0c0:	f8cd b000 	str.w	fp, [sp]
 801d0c4:	68c2      	ldr	r2, [r0, #12]
 801d0c6:	462b      	mov	r3, r5
 801d0c8:	f100 0118 	add.w	r1, r0, #24
 801d0cc:	3050      	adds	r0, #80	; 0x50
 801d0ce:	f7f3 fa4b 	bl	8010568 <mbedtls_cipher_auth_encrypt>
 801d0d2:	4605      	mov	r5, r0
 801d0d4:	b1a0      	cbz	r0, 801d100 <mbedtls_ssl_write_record+0x2e0>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 801d0d6:	4b18      	ldr	r3, [pc, #96]	; (801d138 <mbedtls_ssl_write_record+0x318>)
 801d0d8:	9300      	str	r3, [sp, #0]
 801d0da:	9001      	str	r0, [sp, #4]
 801d0dc:	f240 5385 	movw	r3, #1413	; 0x585
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801d0e0:	4a0c      	ldr	r2, [pc, #48]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
 801d0e2:	2101      	movs	r1, #1
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	f7f3 fd6d 	bl	8010bc4 <mbedtls_debug_print_ret>
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 801d0ea:	4b14      	ldr	r3, [pc, #80]	; (801d13c <mbedtls_ssl_write_record+0x31c>)
 801d0ec:	9300      	str	r3, [sp, #0]
 801d0ee:	9501      	str	r5, [sp, #4]
 801d0f0:	f640 3308 	movw	r3, #2824	; 0xb08
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801d0f4:	4a07      	ldr	r2, [pc, #28]	; (801d114 <mbedtls_ssl_write_record+0x2f4>)
 801d0f6:	2101      	movs	r1, #1
 801d0f8:	4620      	mov	r0, r4
 801d0fa:	f7f3 fd63 	bl	8010bc4 <mbedtls_debug_print_ret>
        return( ret );
 801d0fe:	e6b1      	b.n	801ce64 <mbedtls_ssl_write_record+0x44>
        if( olen != enc_msglen )
 801d100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d102:	429e      	cmp	r6, r3
 801d104:	d01c      	beq.n	801d140 <mbedtls_ssl_write_record+0x320>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d106:	4b04      	ldr	r3, [pc, #16]	; (801d118 <mbedtls_ssl_write_record+0x2f8>)
 801d108:	9300      	str	r3, [sp, #0]
 801d10a:	f240 538b 	movw	r3, #1419	; 0x58b
 801d10e:	e6e7      	b.n	801cee0 <mbedtls_ssl_write_record+0xc0>
 801d110:	0803231d 	.word	0x0803231d
 801d114:	08031f4f 	.word	0x08031f4f
 801d118:	08031a7f 	.word	0x08031a7f
 801d11c:	ffff9400 	.word	0xffff9400
 801d120:	0803232d 	.word	0x0803232d
 801d124:	0803233c 	.word	0x0803233c
 801d128:	0803235b 	.word	0x0803235b
 801d12c:	08032368 	.word	0x08032368
 801d130:	08032386 	.word	0x08032386
 801d134:	0803238e 	.word	0x0803238e
 801d138:	080323c9 	.word	0x080323c9
 801d13c:	0803246a 	.word	0x0803246a
        ssl->out_msglen += taglen;
 801d140:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801d144:	4a6d      	ldr	r2, [pc, #436]	; (801d2fc <mbedtls_ssl_write_record+0x4dc>)
        ssl->out_msglen += taglen;
 801d146:	443b      	add	r3, r7
 801d148:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801d14c:	4b6c      	ldr	r3, [pc, #432]	; (801d300 <mbedtls_ssl_write_record+0x4e0>)
 801d14e:	9300      	str	r3, [sp, #0]
 801d150:	e9cd a701 	strd	sl, r7, [sp, #4]
 801d154:	f240 5392 	movw	r3, #1426	; 0x592
 801d158:	2104      	movs	r1, #4
 801d15a:	4620      	mov	r0, r4
        auth_done++;
 801d15c:	f108 0801 	add.w	r8, r8, #1
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801d160:	f7f3 fd60 	bl	8010c24 <mbedtls_debug_print_buf>
    if( auth_done != 1 )
 801d164:	f1b8 0f01 	cmp.w	r8, #1
 801d168:	d077      	beq.n	801d25a <mbedtls_ssl_write_record+0x43a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d16a:	4b66      	ldr	r3, [pc, #408]	; (801d304 <mbedtls_ssl_write_record+0x4e4>)
 801d16c:	9300      	str	r3, [sp, #0]
 801d16e:	f240 6314 	movw	r3, #1556	; 0x614
 801d172:	e6b5      	b.n	801cee0 <mbedtls_ssl_write_record+0xc0>
    if( mode == MBEDTLS_MODE_CBC )
 801d174:	2d02      	cmp	r5, #2
 801d176:	d16b      	bne.n	801d250 <mbedtls_ssl_write_record+0x430>
        size_t enc_msglen, padlen, olen = 0, i;
 801d178:	2300      	movs	r3, #0
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 801d17a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d17c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
        size_t enc_msglen, padlen, olen = 0, i;
 801d180:	930a      	str	r3, [sp, #40]	; 0x28
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 801d182:	68d2      	ldr	r2, [r2, #12]
 801d184:	3101      	adds	r1, #1
 801d186:	fbb1 f6f2 	udiv	r6, r1, r2
 801d18a:	fb02 1616 	mls	r6, r2, r6, r1
 801d18e:	1b96      	subs	r6, r2, r6
            padlen = 0;
 801d190:	42b2      	cmp	r2, r6
 801d192:	bf08      	it	eq
 801d194:	461e      	moveq	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801d196:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801d19a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 801d19e:	441a      	add	r2, r3
        for( i = 0; i <= padlen; i++ )
 801d1a0:	3301      	adds	r3, #1
 801d1a2:	429e      	cmp	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801d1a4:	5456      	strb	r6, [r2, r1]
        for( i = 0; i <= padlen; i++ )
 801d1a6:	d2f6      	bcs.n	801d196 <mbedtls_ssl_write_record+0x376>
        ssl->out_msglen += padlen + 1;
 801d1a8:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d1ac:	6963      	ldr	r3, [r4, #20]
        ssl->out_msglen += padlen + 1;
 801d1ae:	3701      	adds	r7, #1
 801d1b0:	4437      	add	r7, r6
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d1b2:	2b01      	cmp	r3, #1
        ssl->out_msglen += padlen + 1;
 801d1b4:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d1b8:	dc26      	bgt.n	801d208 <mbedtls_ssl_write_record+0x3e8>
        enc_msg = ssl->out_msg;
 801d1ba:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801d1be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d1c0:	4a4e      	ldr	r2, [pc, #312]	; (801d2fc <mbedtls_ssl_write_record+0x4dc>)
 801d1c2:	3601      	adds	r6, #1
 801d1c4:	9603      	str	r6, [sp, #12]
 801d1c6:	68db      	ldr	r3, [r3, #12]
 801d1c8:	9302      	str	r3, [sp, #8]
 801d1ca:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801d1ce:	9301      	str	r3, [sp, #4]
 801d1d0:	4b4d      	ldr	r3, [pc, #308]	; (801d308 <mbedtls_ssl_write_record+0x4e8>)
 801d1d2:	9300      	str	r3, [sp, #0]
 801d1d4:	2103      	movs	r1, #3
 801d1d6:	f240 53c6 	movw	r3, #1478	; 0x5c6
 801d1da:	4620      	mov	r0, r4
 801d1dc:	f7f3 fcc2 	bl	8010b64 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 801d1e0:	ab0a      	add	r3, sp, #40	; 0x28
 801d1e2:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801d1e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801d1e8:	9700      	str	r7, [sp, #0]
 801d1ea:	68c2      	ldr	r2, [r0, #12]
 801d1ec:	462b      	mov	r3, r5
 801d1ee:	f100 0118 	add.w	r1, r0, #24
 801d1f2:	3050      	adds	r0, #80	; 0x50
 801d1f4:	f7f3 f996 	bl	8010524 <mbedtls_cipher_crypt>
 801d1f8:	4605      	mov	r5, r0
 801d1fa:	b308      	cbz	r0, 801d240 <mbedtls_ssl_write_record+0x420>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801d1fc:	4b43      	ldr	r3, [pc, #268]	; (801d30c <mbedtls_ssl_write_record+0x4ec>)
 801d1fe:	9300      	str	r3, [sp, #0]
 801d200:	9001      	str	r0, [sp, #4]
 801d202:	f240 53d1 	movw	r3, #1489	; 0x5d1
 801d206:	e76b      	b.n	801d0e0 <mbedtls_ssl_write_record+0x2c0>
 801d208:	6c21      	ldr	r1, [r4, #64]	; 0x40
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 801d20a:	6823      	ldr	r3, [r4, #0]
 801d20c:	68ca      	ldr	r2, [r1, #12]
 801d20e:	699d      	ldr	r5, [r3, #24]
 801d210:	69d8      	ldr	r0, [r3, #28]
 801d212:	3118      	adds	r1, #24
 801d214:	47a8      	blx	r5
            if( ret != 0 )
 801d216:	4605      	mov	r5, r0
 801d218:	2800      	cmp	r0, #0
 801d21a:	f47f af66 	bne.w	801d0ea <mbedtls_ssl_write_record+0x2ca>
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 801d21e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d220:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 801d224:	68ca      	ldr	r2, [r1, #12]
 801d226:	3118      	adds	r1, #24
 801d228:	f005 f92a 	bl	8022480 <memcpy>
            ssl->out_msglen += ssl->transform_out->ivlen;
 801d22c:	6c23      	ldr	r3, [r4, #64]	; 0x40
            enc_msglen = ssl->out_msglen;
 801d22e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
            ssl->out_msglen += ssl->transform_out->ivlen;
 801d232:	68db      	ldr	r3, [r3, #12]
            enc_msg = ssl->out_msg;
 801d234:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 801d238:	443b      	add	r3, r7
 801d23a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 801d23e:	e7be      	b.n	801d1be <mbedtls_ssl_write_record+0x39e>
        if( enc_msglen != olen )
 801d240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d242:	429f      	cmp	r7, r3
 801d244:	d08e      	beq.n	801d164 <mbedtls_ssl_write_record+0x344>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d246:	4b2f      	ldr	r3, [pc, #188]	; (801d304 <mbedtls_ssl_write_record+0x4e4>)
 801d248:	9300      	str	r3, [sp, #0]
 801d24a:	f240 53d7 	movw	r3, #1495	; 0x5d7
 801d24e:	e647      	b.n	801cee0 <mbedtls_ssl_write_record+0xc0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d250:	4b2c      	ldr	r3, [pc, #176]	; (801d304 <mbedtls_ssl_write_record+0x4e4>)
 801d252:	9300      	str	r3, [sp, #0]
 801d254:	f240 630d 	movw	r3, #1549	; 0x60d
 801d258:	e642      	b.n	801cee0 <mbedtls_ssl_write_record+0xc0>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 801d25a:	4b2d      	ldr	r3, [pc, #180]	; (801d310 <mbedtls_ssl_write_record+0x4f0>)
 801d25c:	4a27      	ldr	r2, [pc, #156]	; (801d2fc <mbedtls_ssl_write_record+0x4dc>)
 801d25e:	9300      	str	r3, [sp, #0]
 801d260:	2102      	movs	r1, #2
 801d262:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 801d266:	4620      	mov	r0, r4
 801d268:	f7f3 fc7c 	bl	8010b64 <mbedtls_debug_print_msg>
            len = ssl->out_msglen;
 801d26c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 801d270:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 801d274:	0a19      	lsrs	r1, r3, #8
 801d276:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 801d278:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 801d27c:	7053      	strb	r3, [r2, #1]
        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 801d27e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801d282:	3305      	adds	r3, #5
 801d284:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 801d288:	e9d4 2325 	ldrd	r2, r3, [r4, #148]	; 0x94
 801d28c:	881b      	ldrh	r3, [r3, #0]
 801d28e:	ba5b      	rev16	r3, r3
 801d290:	b29b      	uxth	r3, r3
 801d292:	9304      	str	r3, [sp, #16]
 801d294:	7893      	ldrb	r3, [r2, #2]
 801d296:	9303      	str	r3, [sp, #12]
 801d298:	7853      	ldrb	r3, [r2, #1]
 801d29a:	9302      	str	r3, [sp, #8]
 801d29c:	7813      	ldrb	r3, [r2, #0]
 801d29e:	9301      	str	r3, [sp, #4]
 801d2a0:	4b1c      	ldr	r3, [pc, #112]	; (801d314 <mbedtls_ssl_write_record+0x4f4>)
 801d2a2:	4a16      	ldr	r2, [pc, #88]	; (801d2fc <mbedtls_ssl_write_record+0x4dc>)
 801d2a4:	9300      	str	r3, [sp, #0]
 801d2a6:	2103      	movs	r1, #3
 801d2a8:	f640 3313 	movw	r3, #2835	; 0xb13
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	f7f3 fc59 	bl	8010b64 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 801d2b2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801d2b6:	4a11      	ldr	r2, [pc, #68]	; (801d2fc <mbedtls_ssl_write_record+0x4dc>)
 801d2b8:	3305      	adds	r3, #5
 801d2ba:	9302      	str	r3, [sp, #8]
 801d2bc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801d2c0:	9301      	str	r3, [sp, #4]
 801d2c2:	4b15      	ldr	r3, [pc, #84]	; (801d318 <mbedtls_ssl_write_record+0x4f8>)
 801d2c4:	9300      	str	r3, [sp, #0]
 801d2c6:	2104      	movs	r1, #4
 801d2c8:	f640 3318 	movw	r3, #2840	; 0xb18
 801d2cc:	4620      	mov	r0, r4
 801d2ce:	f7f3 fca9 	bl	8010c24 <mbedtls_debug_print_buf>
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801d2d2:	4620      	mov	r0, r4
 801d2d4:	f7ff fd18 	bl	801cd08 <mbedtls_ssl_flush_output>
 801d2d8:	4605      	mov	r5, r0
 801d2da:	b128      	cbz	r0, 801d2e8 <mbedtls_ssl_write_record+0x4c8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801d2dc:	4b0f      	ldr	r3, [pc, #60]	; (801d31c <mbedtls_ssl_write_record+0x4fc>)
 801d2de:	9300      	str	r3, [sp, #0]
 801d2e0:	9001      	str	r0, [sp, #4]
 801d2e2:	f640 331e 	movw	r3, #2846	; 0xb1e
 801d2e6:	e705      	b.n	801d0f4 <mbedtls_ssl_write_record+0x2d4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 801d2e8:	4b0d      	ldr	r3, [pc, #52]	; (801d320 <mbedtls_ssl_write_record+0x500>)
 801d2ea:	9300      	str	r3, [sp, #0]
 801d2ec:	4a03      	ldr	r2, [pc, #12]	; (801d2fc <mbedtls_ssl_write_record+0x4dc>)
 801d2ee:	f640 3322 	movw	r3, #2850	; 0xb22
 801d2f2:	2102      	movs	r1, #2
 801d2f4:	4620      	mov	r0, r4
 801d2f6:	f7f3 fc35 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801d2fa:	e5b3      	b.n	801ce64 <mbedtls_ssl_write_record+0x44>
 801d2fc:	08031f4f 	.word	0x08031f4f
 801d300:	080323e5 	.word	0x080323e5
 801d304:	08031a7f 	.word	0x08031a7f
 801d308:	080323f8 	.word	0x080323f8
 801d30c:	08032446 	.word	0x08032446
 801d310:	0803245b 	.word	0x0803245b
 801d314:	0803247a 	.word	0x0803247a
 801d318:	080324b6 	.word	0x080324b6
 801d31c:	080324d4 	.word	0x080324d4
 801d320:	080324ed 	.word	0x080324ed

0801d324 <mbedtls_ssl_prepare_handshake_record>:
{
 801d324:	b530      	push	{r4, r5, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 801d326:	6f81      	ldr	r1, [r0, #120]	; 0x78
 801d328:	2903      	cmp	r1, #3
{
 801d32a:	b085      	sub	sp, #20
 801d32c:	4604      	mov	r4, r0
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 801d32e:	d80b      	bhi.n	801d348 <mbedtls_ssl_prepare_handshake_record+0x24>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 801d330:	4b1a      	ldr	r3, [pc, #104]	; (801d39c <mbedtls_ssl_prepare_handshake_record+0x78>)
 801d332:	9101      	str	r1, [sp, #4]
 801d334:	9300      	str	r3, [sp, #0]
 801d336:	4a1a      	ldr	r2, [pc, #104]	; (801d3a0 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d338:	f640 4305 	movw	r3, #3077	; 0xc05
 801d33c:	2101      	movs	r1, #1
 801d33e:	f7f3 fc11 	bl	8010b64 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801d342:	4818      	ldr	r0, [pc, #96]	; (801d3a4 <mbedtls_ssl_prepare_handshake_record+0x80>)
}
 801d344:	b005      	add	sp, #20
 801d346:	bd30      	pop	{r4, r5, pc}
                    ( ssl->in_msg[1] << 16 ) |
 801d348:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    ( ssl->in_msg[2] << 8  ) |
 801d34a:	7893      	ldrb	r3, [r2, #2]
                    ( ssl->in_msg[1] << 16 ) |
 801d34c:	7855      	ldrb	r5, [r2, #1]
                    ( ssl->in_msg[2] << 8  ) |
 801d34e:	021b      	lsls	r3, r3, #8
                    ( ssl->in_msg[1] << 16 ) |
 801d350:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                      ssl->in_msg[3] );
 801d354:	78d5      	ldrb	r5, [r2, #3]
                    ( ssl->in_msg[2] << 8  ) |
 801d356:	432b      	orrs	r3, r5
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 801d358:	3304      	adds	r3, #4
 801d35a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 801d35e:	9303      	str	r3, [sp, #12]
 801d360:	7813      	ldrb	r3, [r2, #0]
 801d362:	4a0f      	ldr	r2, [pc, #60]	; (801d3a0 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d364:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801d368:	4b0f      	ldr	r3, [pc, #60]	; (801d3a8 <mbedtls_ssl_prepare_handshake_record+0x84>)
 801d36a:	9300      	str	r3, [sp, #0]
 801d36c:	2103      	movs	r1, #3
 801d36e:	f640 430f 	movw	r3, #3087	; 0xc0f
 801d372:	f7f3 fbf7 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->in_msglen < ssl->in_hslen )
 801d376:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d378:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801d37c:	429a      	cmp	r2, r3
 801d37e:	d20a      	bcs.n	801d396 <mbedtls_ssl_prepare_handshake_record+0x72>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 801d380:	4b0a      	ldr	r3, [pc, #40]	; (801d3ac <mbedtls_ssl_prepare_handshake_record+0x88>)
 801d382:	9300      	str	r3, [sp, #0]
 801d384:	4620      	mov	r0, r4
 801d386:	4a06      	ldr	r2, [pc, #24]	; (801d3a0 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d388:	f640 434f 	movw	r3, #3151	; 0xc4f
 801d38c:	2101      	movs	r1, #1
 801d38e:	f7f3 fbe9 	bl	8010b64 <mbedtls_debug_print_msg>
 801d392:	4807      	ldr	r0, [pc, #28]	; (801d3b0 <mbedtls_ssl_prepare_handshake_record+0x8c>)
 801d394:	e7d6      	b.n	801d344 <mbedtls_ssl_prepare_handshake_record+0x20>
    return( 0 );
 801d396:	2000      	movs	r0, #0
 801d398:	e7d4      	b.n	801d344 <mbedtls_ssl_prepare_handshake_record+0x20>
 801d39a:	bf00      	nop
 801d39c:	080324fd 	.word	0x080324fd
 801d3a0:	08031f4f 	.word	0x08031f4f
 801d3a4:	ffff8e00 	.word	0xffff8e00
 801d3a8:	0803251d 	.word	0x0803251d
 801d3ac:	08032553 	.word	0x08032553
 801d3b0:	ffff8f80 	.word	0xffff8f80

0801d3b4 <mbedtls_ssl_update_handshake_status>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d3b4:	6842      	ldr	r2, [r0, #4]
 801d3b6:	2a10      	cmp	r2, #16
{
 801d3b8:	b410      	push	{r4}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d3ba:	d00a      	beq.n	801d3d2 <mbedtls_ssl_update_handshake_status+0x1e>
        ssl->handshake != NULL )
 801d3bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d3be:	b142      	cbz	r2, 801d3d2 <mbedtls_ssl_update_handshake_status+0x1e>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 801d3c0:	f8d2 4298 	ldr.w	r4, [r2, #664]	; 0x298
 801d3c4:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801d3c6:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 801d3ca:	4623      	mov	r3, r4
}
 801d3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 801d3d0:	4718      	bx	r3
}
 801d3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3d6:	4770      	bx	lr

0801d3d8 <mbedtls_ssl_handle_message_type>:
{
 801d3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801d3da:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801d3dc:	2b16      	cmp	r3, #22
{
 801d3de:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801d3e0:	d004      	beq.n	801d3ec <mbedtls_ssl_handle_message_type+0x14>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 801d3e2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d3e4:	2b15      	cmp	r3, #21
 801d3e6:	d007      	beq.n	801d3f8 <mbedtls_ssl_handle_message_type+0x20>
            return( 0 );
 801d3e8:	2000      	movs	r0, #0
 801d3ea:	e003      	b.n	801d3f4 <mbedtls_ssl_handle_message_type+0x1c>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 801d3ec:	f7ff ff9a 	bl	801d324 <mbedtls_ssl_prepare_handshake_record>
 801d3f0:	2800      	cmp	r0, #0
 801d3f2:	d0f6      	beq.n	801d3e2 <mbedtls_ssl_handle_message_type+0xa>
}
 801d3f4:	b004      	add	sp, #16
 801d3f6:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 801d3f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d3fa:	785a      	ldrb	r2, [r3, #1]
 801d3fc:	9202      	str	r2, [sp, #8]
 801d3fe:	781b      	ldrb	r3, [r3, #0]
 801d400:	9301      	str	r3, [sp, #4]
 801d402:	4b1b      	ldr	r3, [pc, #108]	; (801d470 <mbedtls_ssl_handle_message_type+0x98>)
 801d404:	4a1b      	ldr	r2, [pc, #108]	; (801d474 <mbedtls_ssl_handle_message_type+0x9c>)
 801d406:	9300      	str	r3, [sp, #0]
 801d408:	2102      	movs	r1, #2
 801d40a:	f640 73d4 	movw	r3, #4052	; 0xfd4
 801d40e:	4620      	mov	r0, r4
 801d410:	f7f3 fba8 	bl	8010b64 <mbedtls_debug_print_msg>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 801d414:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d416:	781a      	ldrb	r2, [r3, #0]
 801d418:	2a02      	cmp	r2, #2
 801d41a:	d10c      	bne.n	801d436 <mbedtls_ssl_handle_message_type+0x5e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 801d41c:	785b      	ldrb	r3, [r3, #1]
 801d41e:	9301      	str	r3, [sp, #4]
 801d420:	4b15      	ldr	r3, [pc, #84]	; (801d478 <mbedtls_ssl_handle_message_type+0xa0>)
 801d422:	9300      	str	r3, [sp, #0]
 801d424:	4620      	mov	r0, r4
 801d426:	4a13      	ldr	r2, [pc, #76]	; (801d474 <mbedtls_ssl_handle_message_type+0x9c>)
 801d428:	f640 73dc 	movw	r3, #4060	; 0xfdc
 801d42c:	2101      	movs	r1, #1
 801d42e:	f7f3 fb99 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 801d432:	4812      	ldr	r0, [pc, #72]	; (801d47c <mbedtls_ssl_handle_message_type+0xa4>)
 801d434:	e7de      	b.n	801d3f4 <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d436:	2a01      	cmp	r2, #1
 801d438:	d118      	bne.n	801d46c <mbedtls_ssl_handle_message_type+0x94>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 801d43a:	785b      	ldrb	r3, [r3, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d43c:	b953      	cbnz	r3, 801d454 <mbedtls_ssl_handle_message_type+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 801d43e:	4b10      	ldr	r3, [pc, #64]	; (801d480 <mbedtls_ssl_handle_message_type+0xa8>)
 801d440:	9300      	str	r3, [sp, #0]
 801d442:	4620      	mov	r0, r4
 801d444:	4a0b      	ldr	r2, [pc, #44]	; (801d474 <mbedtls_ssl_handle_message_type+0x9c>)
 801d446:	f640 73e4 	movw	r3, #4068	; 0xfe4
 801d44a:	2102      	movs	r1, #2
 801d44c:	f7f3 fb8a 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 801d450:	480c      	ldr	r0, [pc, #48]	; (801d484 <mbedtls_ssl_handle_message_type+0xac>)
 801d452:	e7cf      	b.n	801d3f4 <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d454:	2b64      	cmp	r3, #100	; 0x64
 801d456:	d109      	bne.n	801d46c <mbedtls_ssl_handle_message_type+0x94>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
 801d458:	4b0b      	ldr	r3, [pc, #44]	; (801d488 <mbedtls_ssl_handle_message_type+0xb0>)
 801d45a:	9300      	str	r3, [sp, #0]
 801d45c:	4a05      	ldr	r2, [pc, #20]	; (801d474 <mbedtls_ssl_handle_message_type+0x9c>)
 801d45e:	f640 73ec 	movw	r3, #4076	; 0xfec
 801d462:	2102      	movs	r1, #2
 801d464:	4620      	mov	r0, r4
 801d466:	f7f3 fb7d 	bl	8010b64 <mbedtls_debug_print_msg>
 801d46a:	e7bd      	b.n	801d3e8 <mbedtls_ssl_handle_message_type+0x10>
        return MBEDTLS_ERR_SSL_NON_FATAL;
 801d46c:	4807      	ldr	r0, [pc, #28]	; (801d48c <mbedtls_ssl_handle_message_type+0xb4>)
 801d46e:	e7c1      	b.n	801d3f4 <mbedtls_ssl_handle_message_type+0x1c>
 801d470:	0803257d 	.word	0x0803257d
 801d474:	08031f4f 	.word	0x08031f4f
 801d478:	080325a1 	.word	0x080325a1
 801d47c:	ffff8880 	.word	0xffff8880
 801d480:	080325c3 	.word	0x080325c3
 801d484:	ffff8780 	.word	0xffff8780
 801d488:	080325dd 	.word	0x080325dd
 801d48c:	ffff9980 	.word	0xffff9980

0801d490 <mbedtls_ssl_send_alert_message>:
{
 801d490:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d492:	460e      	mov	r6, r1
 801d494:	b085      	sub	sp, #20
 801d496:	4615      	mov	r5, r2
    if( ssl == NULL || ssl->conf == NULL )
 801d498:	4604      	mov	r4, r0
 801d49a:	2800      	cmp	r0, #0
 801d49c:	d03b      	beq.n	801d516 <mbedtls_ssl_send_alert_message+0x86>
 801d49e:	6803      	ldr	r3, [r0, #0]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d038      	beq.n	801d516 <mbedtls_ssl_send_alert_message+0x86>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 801d4a4:	4b1d      	ldr	r3, [pc, #116]	; (801d51c <mbedtls_ssl_send_alert_message+0x8c>)
 801d4a6:	4a1e      	ldr	r2, [pc, #120]	; (801d520 <mbedtls_ssl_send_alert_message+0x90>)
 801d4a8:	9300      	str	r3, [sp, #0]
 801d4aa:	2102      	movs	r1, #2
 801d4ac:	f241 031c 	movw	r3, #4124	; 0x101c
 801d4b0:	f7f3 fb58 	bl	8010b64 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 801d4b4:	4b1b      	ldr	r3, [pc, #108]	; (801d524 <mbedtls_ssl_send_alert_message+0x94>)
 801d4b6:	4a1a      	ldr	r2, [pc, #104]	; (801d520 <mbedtls_ssl_send_alert_message+0x90>)
 801d4b8:	9300      	str	r3, [sp, #0]
 801d4ba:	e9cd 6501 	strd	r6, r5, [sp, #4]
 801d4be:	f241 031d 	movw	r3, #4125	; 0x101d
 801d4c2:	2103      	movs	r1, #3
 801d4c4:	4620      	mov	r0, r4
 801d4c6:	f7f3 fb4d 	bl	8010b64 <mbedtls_debug_print_msg>
    ssl->out_msglen = 2;
 801d4ca:	2702      	movs	r7, #2
 801d4cc:	2315      	movs	r3, #21
 801d4ce:	e9c4 3729 	strd	r3, r7, [r4, #164]	; 0xa4
    ssl->out_msg[0] = level;
 801d4d2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801d4d6:	701e      	strb	r6, [r3, #0]
    ssl->out_msg[1] = message;
 801d4d8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801d4dc:	4620      	mov	r0, r4
    ssl->out_msg[1] = message;
 801d4de:	705d      	strb	r5, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801d4e0:	f7ff fc9e 	bl	801ce20 <mbedtls_ssl_write_record>
 801d4e4:	4605      	mov	r5, r0
 801d4e6:	b160      	cbz	r0, 801d502 <mbedtls_ssl_send_alert_message+0x72>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801d4e8:	4b0f      	ldr	r3, [pc, #60]	; (801d528 <mbedtls_ssl_send_alert_message+0x98>)
 801d4ea:	9001      	str	r0, [sp, #4]
 801d4ec:	9300      	str	r3, [sp, #0]
 801d4ee:	4a0c      	ldr	r2, [pc, #48]	; (801d520 <mbedtls_ssl_send_alert_message+0x90>)
 801d4f0:	f241 0326 	movw	r3, #4134	; 0x1026
 801d4f4:	2101      	movs	r1, #1
 801d4f6:	4620      	mov	r0, r4
 801d4f8:	f7f3 fb64 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801d4fc:	4628      	mov	r0, r5
 801d4fe:	b005      	add	sp, #20
 801d500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 801d502:	4b0a      	ldr	r3, [pc, #40]	; (801d52c <mbedtls_ssl_send_alert_message+0x9c>)
 801d504:	9300      	str	r3, [sp, #0]
 801d506:	4a06      	ldr	r2, [pc, #24]	; (801d520 <mbedtls_ssl_send_alert_message+0x90>)
 801d508:	f241 0329 	movw	r3, #4137	; 0x1029
 801d50c:	4639      	mov	r1, r7
 801d50e:	4620      	mov	r0, r4
 801d510:	f7f3 fb28 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801d514:	e7f2      	b.n	801d4fc <mbedtls_ssl_send_alert_message+0x6c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801d516:	4d06      	ldr	r5, [pc, #24]	; (801d530 <mbedtls_ssl_send_alert_message+0xa0>)
 801d518:	e7f0      	b.n	801d4fc <mbedtls_ssl_send_alert_message+0x6c>
 801d51a:	bf00      	nop
 801d51c:	080325f0 	.word	0x080325f0
 801d520:	08031f4f 	.word	0x08031f4f
 801d524:	08032606 	.word	0x08032606
 801d528:	080313e7 	.word	0x080313e7
 801d52c:	08032625 	.word	0x08032625
 801d530:	ffff8f00 	.word	0xffff8f00

0801d534 <mbedtls_ssl_read_record_layer>:
{
 801d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( ssl->in_hslen != 0 )
 801d538:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 801d53c:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
 801d53e:	b096      	sub	sp, #88	; 0x58
 801d540:	4604      	mov	r4, r0
    if( ssl->in_hslen != 0 )
 801d542:	b361      	cbz	r1, 801d59e <mbedtls_ssl_read_record_layer+0x6a>
        if( ssl->in_offt != NULL )
 801d544:	b163      	cbz	r3, 801d560 <mbedtls_ssl_read_record_layer+0x2c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d546:	4b94      	ldr	r3, [pc, #592]	; (801d798 <mbedtls_ssl_read_record_layer+0x264>)
 801d548:	9300      	str	r3, [sp, #0]
 801d54a:	4a94      	ldr	r2, [pc, #592]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d54c:	4d94      	ldr	r5, [pc, #592]	; (801d7a0 <mbedtls_ssl_read_record_layer+0x26c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d54e:	f640 63d8 	movw	r3, #3800	; 0xed8
 801d552:	2101      	movs	r1, #1
 801d554:	f7f3 fb06 	bl	8010b64 <mbedtls_debug_print_msg>
}
 801d558:	4628      	mov	r0, r5
 801d55a:	b016      	add	sp, #88	; 0x58
 801d55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( ssl->in_hslen < ssl->in_msglen )
 801d560:	6f82      	ldr	r2, [r0, #120]	; 0x78
 801d562:	4291      	cmp	r1, r2
 801d564:	d219      	bcs.n	801d59a <mbedtls_ssl_read_record_layer+0x66>
            ssl->in_msglen -= ssl->in_hslen;
 801d566:	1a52      	subs	r2, r2, r1
 801d568:	6782      	str	r2, [r0, #120]	; 0x78
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 801d56a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801d56c:	4401      	add	r1, r0
 801d56e:	f004 ff95 	bl	802249c <memmove>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 801d572:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d574:	9302      	str	r3, [sp, #8]
 801d576:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d578:	9301      	str	r3, [sp, #4]
 801d57a:	4b8a      	ldr	r3, [pc, #552]	; (801d7a4 <mbedtls_ssl_read_record_layer+0x270>)
 801d57c:	9300      	str	r3, [sp, #0]
 801d57e:	4a87      	ldr	r2, [pc, #540]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
 801d580:	f640 63f7 	movw	r3, #3831	; 0xef7
 801d584:	2104      	movs	r1, #4
 801d586:	4620      	mov	r0, r4
 801d588:	f7f3 fb4c 	bl	8010c24 <mbedtls_debug_print_buf>
        ssl->in_hslen   = 0;
 801d58c:	2300      	movs	r3, #0
 801d58e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if( ssl->in_msglen > 0 )
 801d592:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d594:	b133      	cbz	r3, 801d5a4 <mbedtls_ssl_read_record_layer+0x70>
        return( 0 );
 801d596:	2500      	movs	r5, #0
 801d598:	e7de      	b.n	801d558 <mbedtls_ssl_read_record_layer+0x24>
            ssl->in_msglen = 0;
 801d59a:	6783      	str	r3, [r0, #120]	; 0x78
 801d59c:	e7f6      	b.n	801d58c <mbedtls_ssl_read_record_layer+0x58>
    else if( ssl->in_offt != NULL )
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d1f9      	bne.n	801d596 <mbedtls_ssl_read_record_layer+0x62>
        ssl->in_msglen = 0;
 801d5a2:	6783      	str	r3, [r0, #120]	; 0x78
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 801d5a4:	2105      	movs	r1, #5
 801d5a6:	4620      	mov	r0, r4
 801d5a8:	f7ff fb0e 	bl	801cbc8 <mbedtls_ssl_fetch_input>
 801d5ac:	4605      	mov	r5, r0
 801d5ae:	b150      	cbz	r0, 801d5c6 <mbedtls_ssl_read_record_layer+0x92>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d5b0:	4b7d      	ldr	r3, [pc, #500]	; (801d7a8 <mbedtls_ssl_read_record_layer+0x274>)
 801d5b2:	9300      	str	r3, [sp, #0]
 801d5b4:	9001      	str	r0, [sp, #4]
 801d5b6:	f640 7323 	movw	r3, #3875	; 0xf23
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d5ba:	4a78      	ldr	r2, [pc, #480]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
 801d5bc:	2101      	movs	r1, #1
 801d5be:	4620      	mov	r0, r4
 801d5c0:	f7f3 fb00 	bl	8010bc4 <mbedtls_debug_print_ret>
        return( ret );
 801d5c4:	e7c8      	b.n	801d558 <mbedtls_ssl_read_record_layer+0x24>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 801d5c6:	2305      	movs	r3, #5
 801d5c8:	9302      	str	r3, [sp, #8]
 801d5ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d5cc:	9301      	str	r3, [sp, #4]
 801d5ce:	4b77      	ldr	r3, [pc, #476]	; (801d7ac <mbedtls_ssl_read_record_layer+0x278>)
 801d5d0:	4a72      	ldr	r2, [pc, #456]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
 801d5d2:	9300      	str	r3, [sp, #0]
 801d5d4:	2104      	movs	r1, #4
 801d5d6:	f640 5396 	movw	r3, #3478	; 0xd96
 801d5da:	4620      	mov	r0, r4
 801d5dc:	f7f3 fb22 	bl	8010c24 <mbedtls_debug_print_buf>
    ssl->in_msgtype =  ssl->in_hdr[0];
 801d5e0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 801d5e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ssl->in_msgtype =  ssl->in_hdr[0];
 801d5e4:	7811      	ldrb	r1, [r2, #0]
 801d5e6:	6761      	str	r1, [r4, #116]	; 0x74
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 801d5e8:	881b      	ldrh	r3, [r3, #0]
 801d5ea:	ba5b      	rev16	r3, r3
 801d5ec:	b29b      	uxth	r3, r3
 801d5ee:	67a3      	str	r3, [r4, #120]	; 0x78
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 801d5f0:	7895      	ldrb	r5, [r2, #2]
        *major = ver[0];
 801d5f2:	7856      	ldrb	r6, [r2, #1]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 801d5f4:	4a69      	ldr	r2, [pc, #420]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
        *minor = ver[1];
 801d5f6:	e9cd 5303 	strd	r5, r3, [sp, #12]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 801d5fa:	4b6d      	ldr	r3, [pc, #436]	; (801d7b0 <mbedtls_ssl_read_record_layer+0x27c>)
 801d5fc:	9300      	str	r3, [sp, #0]
 801d5fe:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801d602:	f640 539c 	movw	r3, #3484	; 0xd9c
 801d606:	2103      	movs	r1, #3
 801d608:	4620      	mov	r0, r4
 801d60a:	f7f3 faab 	bl	8010b64 <mbedtls_debug_print_msg>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 801d60e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d610:	3b14      	subs	r3, #20
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 801d612:	2b03      	cmp	r3, #3
 801d614:	d90f      	bls.n	801d636 <mbedtls_ssl_read_record_layer+0x102>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 801d616:	4b67      	ldr	r3, [pc, #412]	; (801d7b4 <mbedtls_ssl_read_record_layer+0x280>)
 801d618:	4a60      	ldr	r2, [pc, #384]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
 801d61a:	9300      	str	r3, [sp, #0]
 801d61c:	2101      	movs	r1, #1
 801d61e:	4620      	mov	r0, r4
 801d620:	f640 53a7 	movw	r3, #3495	; 0xda7
 801d624:	f7f3 fa9e 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801d628:	220a      	movs	r2, #10
 801d62a:	2102      	movs	r1, #2
 801d62c:	4620      	mov	r0, r4
 801d62e:	f7ff ff2f 	bl	801d490 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801d632:	4d61      	ldr	r5, [pc, #388]	; (801d7b8 <mbedtls_ssl_read_record_layer+0x284>)
 801d634:	e790      	b.n	801d558 <mbedtls_ssl_read_record_layer+0x24>
    if( major_ver != ssl->major_ver )
 801d636:	6923      	ldr	r3, [r4, #16]
 801d638:	429e      	cmp	r6, r3
 801d63a:	d009      	beq.n	801d650 <mbedtls_ssl_read_record_layer+0x11c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 801d63c:	4b5f      	ldr	r3, [pc, #380]	; (801d7bc <mbedtls_ssl_read_record_layer+0x288>)
 801d63e:	9300      	str	r3, [sp, #0]
 801d640:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d644:	4a55      	ldr	r2, [pc, #340]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
 801d646:	2101      	movs	r1, #1
 801d648:	4620      	mov	r0, r4
 801d64a:	f7f3 fa8b 	bl	8010b64 <mbedtls_debug_print_msg>
 801d64e:	e7f0      	b.n	801d632 <mbedtls_ssl_read_record_layer+0xfe>
    if( minor_ver > ssl->conf->max_minor_ver )
 801d650:	6823      	ldr	r3, [r4, #0]
 801d652:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801d656:	42ab      	cmp	r3, r5
 801d658:	d204      	bcs.n	801d664 <mbedtls_ssl_read_record_layer+0x130>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 801d65a:	4b59      	ldr	r3, [pc, #356]	; (801d7c0 <mbedtls_ssl_read_record_layer+0x28c>)
 801d65c:	9300      	str	r3, [sp, #0]
 801d65e:	f640 53b6 	movw	r3, #3510	; 0xdb6
 801d662:	e7ef      	b.n	801d644 <mbedtls_ssl_read_record_layer+0x110>
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 801d664:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d666:	6da2      	ldr	r2, [r4, #88]	; 0x58
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 801d668:	6fa1      	ldr	r1, [r4, #120]	; 0x78
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 801d66a:	1a9b      	subs	r3, r3, r2
 801d66c:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 801d670:	3315      	adds	r3, #21
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 801d672:	4299      	cmp	r1, r3
 801d674:	d904      	bls.n	801d680 <mbedtls_ssl_read_record_layer+0x14c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d676:	4b53      	ldr	r3, [pc, #332]	; (801d7c4 <mbedtls_ssl_read_record_layer+0x290>)
 801d678:	9300      	str	r3, [sp, #0]
 801d67a:	f640 53be 	movw	r3, #3518	; 0xdbe
 801d67e:	e7e1      	b.n	801d644 <mbedtls_ssl_read_record_layer+0x110>
    if( ssl->transform_in == NULL )
 801d680:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d682:	b94b      	cbnz	r3, 801d698 <mbedtls_ssl_read_record_layer+0x164>
        if( ssl->in_msglen < 1 ||
 801d684:	1e4a      	subs	r2, r1, #1
 801d686:	f241 3387 	movw	r3, #4999	; 0x1387
 801d68a:	429a      	cmp	r2, r3
 801d68c:	d919      	bls.n	801d6c2 <mbedtls_ssl_read_record_layer+0x18e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d68e:	4b4d      	ldr	r3, [pc, #308]	; (801d7c4 <mbedtls_ssl_read_record_layer+0x290>)
 801d690:	9300      	str	r3, [sp, #0]
 801d692:	f640 53c8 	movw	r3, #3528	; 0xdc8
 801d696:	e7d5      	b.n	801d644 <mbedtls_ssl_read_record_layer+0x110>
        if( ssl->in_msglen < ssl->transform_in->minlen )
 801d698:	689b      	ldr	r3, [r3, #8]
 801d69a:	4299      	cmp	r1, r3
 801d69c:	d204      	bcs.n	801d6a8 <mbedtls_ssl_read_record_layer+0x174>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d69e:	4b49      	ldr	r3, [pc, #292]	; (801d7c4 <mbedtls_ssl_read_record_layer+0x290>)
 801d6a0:	9300      	str	r3, [sp, #0]
 801d6a2:	f44f 635d 	mov.w	r3, #3536	; 0xdd0
 801d6a6:	e7cd      	b.n	801d644 <mbedtls_ssl_read_record_layer+0x110>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 801d6a8:	6962      	ldr	r2, [r4, #20]
 801d6aa:	2a00      	cmp	r2, #0
 801d6ac:	dd09      	ble.n	801d6c2 <mbedtls_ssl_read_record_layer+0x18e>
                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
 801d6ae:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 801d6b2:	3308      	adds	r3, #8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 801d6b4:	4299      	cmp	r1, r3
 801d6b6:	d904      	bls.n	801d6c2 <mbedtls_ssl_read_record_layer+0x18e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d6b8:	4b42      	ldr	r3, [pc, #264]	; (801d7c4 <mbedtls_ssl_read_record_layer+0x290>)
 801d6ba:	9300      	str	r3, [sp, #0]
 801d6bc:	f640 53e5 	movw	r3, #3557	; 0xde5
 801d6c0:	e7c0      	b.n	801d644 <mbedtls_ssl_read_record_layer+0x110>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 801d6c2:	3105      	adds	r1, #5
 801d6c4:	4620      	mov	r0, r4
 801d6c6:	f7ff fa7f 	bl	801cbc8 <mbedtls_ssl_fetch_input>
 801d6ca:	4605      	mov	r5, r0
 801d6cc:	b128      	cbz	r0, 801d6da <mbedtls_ssl_read_record_layer+0x1a6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d6ce:	4b36      	ldr	r3, [pc, #216]	; (801d7a8 <mbedtls_ssl_read_record_layer+0x274>)
 801d6d0:	9300      	str	r3, [sp, #0]
 801d6d2:	9001      	str	r0, [sp, #4]
 801d6d4:	f640 734d 	movw	r3, #3917	; 0xf4d
 801d6d8:	e76f      	b.n	801d5ba <mbedtls_ssl_read_record_layer+0x86>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 801d6da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
        ssl->in_left = 0;
 801d6dc:	67e0      	str	r0, [r4, #124]	; 0x7c
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 801d6de:	3305      	adds	r3, #5
 801d6e0:	9302      	str	r3, [sp, #8]
 801d6e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d6e4:	9301      	str	r3, [sp, #4]
 801d6e6:	4b38      	ldr	r3, [pc, #224]	; (801d7c8 <mbedtls_ssl_read_record_layer+0x294>)
 801d6e8:	9300      	str	r3, [sp, #0]
 801d6ea:	4a2c      	ldr	r2, [pc, #176]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
 801d6ec:	f640 6341 	movw	r3, #3649	; 0xe41
 801d6f0:	2104      	movs	r1, #4
 801d6f2:	4620      	mov	r0, r4
 801d6f4:	f7f3 fa96 	bl	8010c24 <mbedtls_debug_print_buf>
    if( !done && ssl->transform_in != NULL )
 801d6f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	f43f af4b 	beq.w	801d596 <mbedtls_ssl_read_record_layer+0x62>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 801d700:	4b32      	ldr	r3, [pc, #200]	; (801d7cc <mbedtls_ssl_read_record_layer+0x298>)
 801d702:	9300      	str	r3, [sp, #0]
 801d704:	4a25      	ldr	r2, [pc, #148]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
 801d706:	f44f 63c5 	mov.w	r3, #1576	; 0x628
 801d70a:	2102      	movs	r1, #2
 801d70c:	4620      	mov	r0, r4
 801d70e:	f7f3 fa29 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 801d712:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d714:	b10b      	cbz	r3, 801d71a <mbedtls_ssl_read_record_layer+0x1e6>
 801d716:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d718:	b950      	cbnz	r0, 801d730 <mbedtls_ssl_read_record_layer+0x1fc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d71a:	4b1f      	ldr	r3, [pc, #124]	; (801d798 <mbedtls_ssl_read_record_layer+0x264>)
 801d71c:	9300      	str	r3, [sp, #0]
 801d71e:	f240 632c 	movw	r3, #1580	; 0x62c
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d722:	4a1e      	ldr	r2, [pc, #120]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d724:	4d1e      	ldr	r5, [pc, #120]	; (801d7a0 <mbedtls_ssl_read_record_layer+0x26c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d726:	2101      	movs	r1, #1
 801d728:	4620      	mov	r0, r4
 801d72a:	f7f3 fa1b 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d72e:	e1a8      	b.n	801da82 <mbedtls_ssl_read_record_layer+0x54e>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801d730:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 801d734:	b103      	cbz	r3, 801d738 <mbedtls_ssl_read_record_layer+0x204>
    return ctx->cipher_info->mode;
 801d736:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
 801d738:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 801d73a:	6882      	ldr	r2, [r0, #8]
 801d73c:	4297      	cmp	r7, r2
 801d73e:	d20b      	bcs.n	801d758 <mbedtls_ssl_read_record_layer+0x224>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 801d740:	e9cd 7201 	strd	r7, r2, [sp, #4]
 801d744:	4b22      	ldr	r3, [pc, #136]	; (801d7d0 <mbedtls_ssl_read_record_layer+0x29c>)
 801d746:	9300      	str	r3, [sp, #0]
 801d748:	f240 6334 	movw	r3, #1588	; 0x634
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 801d74c:	4a13      	ldr	r2, [pc, #76]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
 801d74e:	2101      	movs	r1, #1
 801d750:	4620      	mov	r0, r4
 801d752:	f7f3 fa07 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d756:	e0ac      	b.n	801d8b2 <mbedtls_ssl_read_record_layer+0x37e>
    if( mode == MBEDTLS_MODE_GCM ||
 801d758:	2b06      	cmp	r3, #6
 801d75a:	d002      	beq.n	801d762 <mbedtls_ssl_read_record_layer+0x22e>
 801d75c:	2b08      	cmp	r3, #8
 801d75e:	f040 8149 	bne.w	801d9f4 <mbedtls_ssl_read_record_layer+0x4c0>
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 801d762:	6803      	ldr	r3, [r0, #0]
 801d764:	7f1b      	ldrb	r3, [r3, #28]
 801d766:	f013 0f02 	tst.w	r3, #2
                                 ssl->transform_in->fixed_ivlen;
 801d76a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 801d76e:	bf14      	ite	ne
 801d770:	2508      	movne	r5, #8
 801d772:	2510      	moveq	r5, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 801d774:	1ad1      	subs	r1, r2, r3
        if( ssl->in_msglen < explicit_iv_len + taglen )
 801d776:	1948      	adds	r0, r1, r5
 801d778:	4287      	cmp	r7, r0
 801d77a:	d22d      	bcs.n	801d7d8 <mbedtls_ssl_read_record_layer+0x2a4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 801d77c:	e9cd 1502 	strd	r1, r5, [sp, #8]
 801d780:	4b14      	ldr	r3, [pc, #80]	; (801d7d4 <mbedtls_ssl_read_record_layer+0x2a0>)
 801d782:	9300      	str	r3, [sp, #0]
 801d784:	9701      	str	r7, [sp, #4]
 801d786:	f240 6363 	movw	r3, #1635	; 0x663
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 801d78a:	4a04      	ldr	r2, [pc, #16]	; (801d79c <mbedtls_ssl_read_record_layer+0x268>)
 801d78c:	2101      	movs	r1, #1
 801d78e:	4620      	mov	r0, r4
 801d790:	f7f3 f9e8 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d794:	e08d      	b.n	801d8b2 <mbedtls_ssl_read_record_layer+0x37e>
 801d796:	bf00      	nop
 801d798:	08031a7f 	.word	0x08031a7f
 801d79c:	08031f4f 	.word	0x08031f4f
 801d7a0:	ffff9400 	.word	0xffff9400
 801d7a4:	0803263b 	.word	0x0803263b
 801d7a8:	08032657 	.word	0x08032657
 801d7ac:	0803266f 	.word	0x0803266f
 801d7b0:	08032683 	.word	0x08032683
 801d7b4:	080326be 	.word	0x080326be
 801d7b8:	ffff8e00 	.word	0xffff8e00
 801d7bc:	080326d2 	.word	0x080326d2
 801d7c0:	080326e9 	.word	0x080326e9
 801d7c4:	08032700 	.word	0x08032700
 801d7c8:	08032713 	.word	0x08032713
 801d7cc:	0803272d 	.word	0x0803272d
 801d7d0:	0803273c 	.word	0x0803273c
 801d7d4:	08032759 	.word	0x08032759
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 801d7d8:	441f      	add	r7, r3
 801d7da:	1abf      	subs	r7, r7, r2
 801d7dc:	1b7f      	subs	r7, r7, r5
        memcpy( add_data, ssl->in_ctr, 8 );
 801d7de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        ssl->in_msglen = dec_msglen;
 801d7e0:	67a7      	str	r7, [r4, #120]	; 0x78
        memcpy( add_data, ssl->in_ctr, 8 );
 801d7e2:	6810      	ldr	r0, [r2, #0]
 801d7e4:	6851      	ldr	r1, [r2, #4]
        dec_msg = ssl->in_msg;
 801d7e6:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        memcpy( add_data, ssl->in_ctr, 8 );
 801d7ea:	ae0a      	add	r6, sp, #40	; 0x28
 801d7ec:	4633      	mov	r3, r6
 801d7ee:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 801d7f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d7f2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        ver[0] = (unsigned char) major;
 801d7f6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
        ver[1] = (unsigned char) minor;
 801d7fa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 801d7fe:	0a3b      	lsrs	r3, r7, #8
 801d800:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d804:	f04f 090d 	mov.w	r9, #13
 801d808:	4baf      	ldr	r3, [pc, #700]	; (801dac8 <mbedtls_ssl_read_record_layer+0x594>)
        ver[0] = (unsigned char) major;
 801d80a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d80e:	9300      	str	r3, [sp, #0]
 801d810:	4aae      	ldr	r2, [pc, #696]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
        add_data[12] = ssl->in_msglen & 0xFF;
 801d812:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d816:	f240 6375 	movw	r3, #1653	; 0x675
 801d81a:	2104      	movs	r1, #4
 801d81c:	4620      	mov	r0, r4
 801d81e:	e9cd 6901 	strd	r6, r9, [sp, #4]
 801d822:	f7f3 f9ff 	bl	8010c24 <mbedtls_debug_print_buf>
        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 801d826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d828:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 801d82a:	6918      	ldr	r0, [r3, #16]
 801d82c:	68da      	ldr	r2, [r3, #12]
 801d82e:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 801d832:	1a12      	subs	r2, r2, r0
 801d834:	4460      	add	r0, ip
 801d836:	f004 fe23 	bl	8022480 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
 801d83a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d83c:	68da      	ldr	r2, [r3, #12]
 801d83e:	9202      	str	r2, [sp, #8]
 801d840:	3328      	adds	r3, #40	; 0x28
 801d842:	9301      	str	r3, [sp, #4]
 801d844:	4ba2      	ldr	r3, [pc, #648]	; (801dad0 <mbedtls_ssl_read_record_layer+0x59c>)
 801d846:	4aa1      	ldr	r2, [pc, #644]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
 801d848:	9300      	str	r3, [sp, #0]
 801d84a:	2104      	movs	r1, #4
 801d84c:	f240 637c 	movw	r3, #1660	; 0x67c
 801d850:	4620      	mov	r0, r4
 801d852:	f7f3 f9e7 	bl	8010c24 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 801d856:	eb08 0a07 	add.w	sl, r8, r7
 801d85a:	4b9e      	ldr	r3, [pc, #632]	; (801dad4 <mbedtls_ssl_read_record_layer+0x5a0>)
 801d85c:	4a9b      	ldr	r2, [pc, #620]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
 801d85e:	9300      	str	r3, [sp, #0]
 801d860:	e9cd a501 	strd	sl, r5, [sp, #4]
 801d864:	f240 637e 	movw	r3, #1662	; 0x67e
 801d868:	2104      	movs	r1, #4
 801d86a:	4620      	mov	r0, r4
 801d86c:	f7f3 f9da 	bl	8010c24 <mbedtls_debug_print_buf>
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 801d870:	ab09      	add	r3, sp, #36	; 0x24
 801d872:	e9cd a505 	strd	sl, r5, [sp, #20]
 801d876:	e9cd 8303 	strd	r8, r3, [sp, #12]
 801d87a:	e9cd 8701 	strd	r8, r7, [sp, #4]
 801d87e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d880:	f8cd 9000 	str.w	r9, [sp]
 801d884:	68c2      	ldr	r2, [r0, #12]
 801d886:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d88a:	4633      	mov	r3, r6
 801d88c:	3090      	adds	r0, #144	; 0x90
 801d88e:	f7f2 fe8f 	bl	80105b0 <mbedtls_cipher_auth_decrypt>
 801d892:	4605      	mov	r5, r0
 801d894:	b178      	cbz	r0, 801d8b6 <mbedtls_ssl_read_record_layer+0x382>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 801d896:	4b90      	ldr	r3, [pc, #576]	; (801dad8 <mbedtls_ssl_read_record_layer+0x5a4>)
 801d898:	9001      	str	r0, [sp, #4]
 801d89a:	9300      	str	r3, [sp, #0]
 801d89c:	4a8b      	ldr	r2, [pc, #556]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
 801d89e:	f240 638b 	movw	r3, #1675	; 0x68b
 801d8a2:	2101      	movs	r1, #1
 801d8a4:	4620      	mov	r0, r4
 801d8a6:	f7f3 f98d 	bl	8010bc4 <mbedtls_debug_print_ret>
            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 801d8aa:	f515 4fc6 	cmn.w	r5, #25344	; 0x6300
 801d8ae:	f040 80e8 	bne.w	801da82 <mbedtls_ssl_read_record_layer+0x54e>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d8b2:	4d8a      	ldr	r5, [pc, #552]	; (801dadc <mbedtls_ssl_read_record_layer+0x5a8>)
 801d8b4:	e0e5      	b.n	801da82 <mbedtls_ssl_read_record_layer+0x54e>
        if( olen != dec_msglen )
 801d8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8b8:	429f      	cmp	r7, r3
 801d8ba:	d004      	beq.n	801d8c6 <mbedtls_ssl_read_record_layer+0x392>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d8bc:	4b88      	ldr	r3, [pc, #544]	; (801dae0 <mbedtls_ssl_read_record_layer+0x5ac>)
 801d8be:	9300      	str	r3, [sp, #0]
 801d8c0:	f240 6396 	movw	r3, #1686	; 0x696
 801d8c4:	e72d      	b.n	801d722 <mbedtls_ssl_read_record_layer+0x1ee>
    size_t padlen = 0, correct = 1;
 801d8c6:	2601      	movs	r6, #1
 801d8c8:	4682      	mov	sl, r0
        auth_done++;
 801d8ca:	4635      	mov	r5, r6
    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 801d8cc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d8ce:	9302      	str	r3, [sp, #8]
 801d8d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d8d2:	9301      	str	r3, [sp, #4]
 801d8d4:	4b83      	ldr	r3, [pc, #524]	; (801dae4 <mbedtls_ssl_read_record_layer+0x5b0>)
 801d8d6:	9300      	str	r3, [sp, #0]
 801d8d8:	4a7c      	ldr	r2, [pc, #496]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
 801d8da:	f240 7377 	movw	r3, #1911	; 0x777
 801d8de:	2104      	movs	r1, #4
 801d8e0:	4620      	mov	r0, r4
 801d8e2:	f7f3 f99f 	bl	8010c24 <mbedtls_debug_print_buf>
    if( auth_done == 0 )
 801d8e6:	2d00      	cmp	r5, #0
 801d8e8:	f040 818d 	bne.w	801dc06 <mbedtls_ssl_read_record_layer+0x6d2>
        ssl->in_msglen -= ssl->transform_in->maclen;
 801d8ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d8ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d8f0:	6952      	ldr	r2, [r2, #20]
 801d8f2:	1a9b      	subs	r3, r3, r2
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 801d8f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
        ssl->in_msglen -= ssl->transform_in->maclen;
 801d8f6:	67a3      	str	r3, [r4, #120]	; 0x78
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 801d8f8:	0a1b      	lsrs	r3, r3, #8
 801d8fa:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 801d8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d8fe:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d900:	705a      	strb	r2, [r3, #1]
        memcpy( tmp, ssl->in_msg + ssl->in_msglen, ssl->transform_in->maclen );
 801d902:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 801d904:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
 801d908:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d90a:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801d90e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801d912:	4439      	add	r1, r7
 801d914:	4640      	mov	r0, r8
 801d916:	f004 fdb3 	bl	8022480 <memcpy>
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 801d91a:	6963      	ldr	r3, [r4, #20]
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	f340 816a 	ble.w	801dbf6 <mbedtls_ssl_read_record_layer+0x6c2>
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 801d922:	3715      	adds	r7, #21
 801d924:	44ba      	add	sl, r7
            extra_run &= correct * 0xFF;
 801d926:	0233      	lsls	r3, r6, #8
                        ( 13 + ssl->in_msglen          + 8 ) / 64;
 801d928:	09bf      	lsrs	r7, r7, #6
            extra_run &= correct * 0xFF;
 801d92a:	1b9b      	subs	r3, r3, r6
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d92c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801d92e:	2208      	movs	r2, #8
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 801d930:	ebc7 179a 	rsb	r7, r7, sl, lsr #6
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d934:	f109 0044 	add.w	r0, r9, #68	; 0x44
            extra_run &= correct * 0xFF;
 801d938:	401f      	ands	r7, r3
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d93a:	f7f7 f8ef 	bl	8014b1c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 801d93e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d940:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801d942:	2203      	movs	r2, #3
 801d944:	3044      	adds	r0, #68	; 0x44
 801d946:	f7f7 f8e9 	bl	8014b1c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 801d94a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d94c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801d94e:	2202      	movs	r2, #2
 801d950:	3044      	adds	r0, #68	; 0x44
 801d952:	f7f7 f8e3 	bl	8014b1c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 801d956:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d958:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d95a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d95c:	3044      	adds	r0, #68	; 0x44
 801d95e:	f7f7 f8dd 	bl	8014b1c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec,
 801d962:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d964:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d966:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d968:	4419      	add	r1, r3
 801d96a:	3044      	adds	r0, #68	; 0x44
 801d96c:	f7f7 f8e6 	bl	8014b3c <mbedtls_md_hmac_finish>
            for( j = 0; j < extra_run + 1; j++ )
 801d970:	3701      	adds	r7, #1
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 801d972:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d974:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d976:	3044      	adds	r0, #68	; 0x44
            for( j = 0; j < extra_run + 1; j++ )
 801d978:	3501      	adds	r5, #1
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 801d97a:	f7f7 f921 	bl	8014bc0 <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 801d97e:	42bd      	cmp	r5, r7
 801d980:	d3f7      	bcc.n	801d972 <mbedtls_ssl_read_record_layer+0x43e>
            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 801d982:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d984:	3044      	adds	r0, #68	; 0x44
 801d986:	f7f7 f905 	bl	8014b94 <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", tmp, ssl->transform_in->maclen );
 801d98a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d98c:	4a4f      	ldr	r2, [pc, #316]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
 801d98e:	695b      	ldr	r3, [r3, #20]
 801d990:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801d994:	4b54      	ldr	r3, [pc, #336]	; (801dae8 <mbedtls_ssl_read_record_layer+0x5b4>)
 801d996:	9300      	str	r3, [sp, #0]
 801d998:	2104      	movs	r1, #4
 801d99a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801d99e:	4620      	mov	r0, r4
 801d9a0:	f7f3 f940 	bl	8010c24 <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac", ssl->in_msg + ssl->in_msglen,
 801d9a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d9a6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d9a8:	695b      	ldr	r3, [r3, #20]
 801d9aa:	9302      	str	r3, [sp, #8]
 801d9ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d9ae:	4413      	add	r3, r2
 801d9b0:	9301      	str	r3, [sp, #4]
 801d9b2:	4b4e      	ldr	r3, [pc, #312]	; (801daec <mbedtls_ssl_read_record_layer+0x5b8>)
 801d9b4:	4a45      	ldr	r2, [pc, #276]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
 801d9b6:	9300      	str	r3, [sp, #0]
 801d9b8:	2104      	movs	r1, #4
 801d9ba:	f240 73c1 	movw	r3, #1985	; 0x7c1
 801d9be:	4620      	mov	r0, r4
 801d9c0:	f7f3 f930 	bl	8010c24 <mbedtls_debug_print_buf>
        if( mbedtls_ssl_safer_memcmp( tmp, ssl->in_msg + ssl->in_msglen,
 801d9c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d9c6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d9c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    for( i = 0; i < n; i++ )
 801d9ca:	6940      	ldr	r0, [r0, #20]
 801d9cc:	1899      	adds	r1, r3, r2
 801d9ce:	4403      	add	r3, r0
 801d9d0:	4413      	add	r3, r2
    unsigned char diff = 0;
 801d9d2:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
 801d9d4:	428b      	cmp	r3, r1
 801d9d6:	f040 8107 	bne.w	801dbe8 <mbedtls_ssl_read_record_layer+0x6b4>
 801d9da:	2a00      	cmp	r2, #0
 801d9dc:	f000 8110 	beq.w	801dc00 <mbedtls_ssl_read_record_layer+0x6cc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
 801d9e0:	4b43      	ldr	r3, [pc, #268]	; (801daf0 <mbedtls_ssl_read_record_layer+0x5bc>)
 801d9e2:	9300      	str	r3, [sp, #0]
 801d9e4:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 801d9e8:	4a38      	ldr	r2, [pc, #224]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
 801d9ea:	2101      	movs	r1, #1
 801d9ec:	4620      	mov	r0, r4
 801d9ee:	f7f3 f8b9 	bl	8010b64 <mbedtls_debug_print_msg>
 801d9f2:	e75e      	b.n	801d8b2 <mbedtls_ssl_read_record_layer+0x37e>
    if( mode == MBEDTLS_MODE_CBC )
 801d9f4:	2b02      	cmp	r3, #2
 801d9f6:	f040 80f2 	bne.w	801dbde <mbedtls_ssl_read_record_layer+0x6aa>
        size_t olen = 0;
 801d9fa:	2300      	movs	r3, #0
 801d9fc:	930a      	str	r3, [sp, #40]	; 0x28
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d9fe:	6961      	ldr	r1, [r4, #20]
 801da00:	68c2      	ldr	r2, [r0, #12]
 801da02:	6945      	ldr	r5, [r0, #20]
        size_t minlen = 0;
 801da04:	2901      	cmp	r1, #1
 801da06:	bfcc      	ite	gt
 801da08:	4616      	movgt	r6, r2
 801da0a:	461e      	movle	r6, r3
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 801da0c:	1993      	adds	r3, r2, r6
 801da0e:	429f      	cmp	r7, r3
 801da10:	d303      	bcc.n	801da1a <mbedtls_ssl_read_record_layer+0x4e6>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 801da12:	1c6b      	adds	r3, r5, #1
 801da14:	4433      	add	r3, r6
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 801da16:	429f      	cmp	r7, r3
 801da18:	d207      	bcs.n	801da2a <mbedtls_ssl_read_record_layer+0x4f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 801da1a:	4b36      	ldr	r3, [pc, #216]	; (801daf4 <mbedtls_ssl_read_record_layer+0x5c0>)
 801da1c:	9300      	str	r3, [sp, #0]
 801da1e:	e9cd 2502 	strd	r2, r5, [sp, #8]
 801da22:	9701      	str	r7, [sp, #4]
 801da24:	f240 63b5 	movw	r3, #1717	; 0x6b5
 801da28:	e6af      	b.n	801d78a <mbedtls_ssl_read_record_layer+0x256>
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 801da2a:	fbb7 f6f2 	udiv	r6, r7, r2
 801da2e:	fb02 7816 	mls	r8, r2, r6, r7
 801da32:	f1b8 0f00 	cmp.w	r8, #0
 801da36:	d006      	beq.n	801da46 <mbedtls_ssl_read_record_layer+0x512>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 801da38:	4b2f      	ldr	r3, [pc, #188]	; (801daf8 <mbedtls_ssl_read_record_layer+0x5c4>)
 801da3a:	9300      	str	r3, [sp, #0]
 801da3c:	e9cd 7201 	strd	r7, r2, [sp, #4]
 801da40:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 801da44:	e682      	b.n	801d74c <mbedtls_ssl_read_record_layer+0x218>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801da46:	2901      	cmp	r1, #1
        dec_msg = ssl->in_msg;
 801da48:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801da4a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801da4e:	dd05      	ble.n	801da5c <mbedtls_ssl_read_record_layer+0x528>
            dec_msglen -= ssl->transform_in->ivlen;
 801da50:	1abf      	subs	r7, r7, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;
 801da52:	67a7      	str	r7, [r4, #120]	; 0x78
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 801da54:	468c      	mov	ip, r1
 801da56:	4645      	mov	r5, r8
 801da58:	42aa      	cmp	r2, r5
 801da5a:	d126      	bne.n	801daaa <mbedtls_ssl_read_record_layer+0x576>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 801da5c:	ad0a      	add	r5, sp, #40	; 0x28
 801da5e:	e9cd 3501 	strd	r3, r5, [sp, #4]
 801da62:	9700      	str	r7, [sp, #0]
 801da64:	3090      	adds	r0, #144	; 0x90
 801da66:	f7f2 fd5d 	bl	8010524 <mbedtls_cipher_crypt>
 801da6a:	4605      	mov	r5, r0
 801da6c:	b318      	cbz	r0, 801dab6 <mbedtls_ssl_read_record_layer+0x582>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801da6e:	4b23      	ldr	r3, [pc, #140]	; (801dafc <mbedtls_ssl_read_record_layer+0x5c8>)
 801da70:	9001      	str	r0, [sp, #4]
 801da72:	9300      	str	r3, [sp, #0]
 801da74:	4a15      	ldr	r2, [pc, #84]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
 801da76:	f240 7309 	movw	r3, #1801	; 0x709
 801da7a:	2101      	movs	r1, #1
 801da7c:	4620      	mov	r0, r4
 801da7e:	f7f3 f8a1 	bl	8010bc4 <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 801da82:	4b1f      	ldr	r3, [pc, #124]	; (801db00 <mbedtls_ssl_read_record_layer+0x5cc>)
 801da84:	9300      	str	r3, [sp, #0]
 801da86:	4a11      	ldr	r2, [pc, #68]	; (801dacc <mbedtls_ssl_read_record_layer+0x598>)
 801da88:	9501      	str	r5, [sp, #4]
 801da8a:	f640 6358 	movw	r3, #3672	; 0xe58
 801da8e:	2101      	movs	r1, #1
 801da90:	4620      	mov	r0, r4
 801da92:	f7f3 f897 	bl	8010bc4 <mbedtls_debug_print_ret>
            if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
 801da96:	f515 4fe3 	cmn.w	r5, #29056	; 0x7180
 801da9a:	f47f ad5d 	bne.w	801d558 <mbedtls_ssl_read_record_layer+0x24>
                mbedtls_ssl_send_alert_message( ssl,
 801da9e:	2214      	movs	r2, #20
 801daa0:	2102      	movs	r1, #2
 801daa2:	4620      	mov	r0, r4
 801daa4:	f7ff fcf4 	bl	801d490 <mbedtls_ssl_send_alert_message>
 801daa8:	e556      	b.n	801d558 <mbedtls_ssl_read_record_layer+0x24>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 801daaa:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 801daac:	5d76      	ldrb	r6, [r6, r5]
 801daae:	f80c 6b01 	strb.w	r6, [ip], #1
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 801dab2:	3501      	adds	r5, #1
 801dab4:	e7d0      	b.n	801da58 <mbedtls_ssl_read_record_layer+0x524>
        if( dec_msglen != olen )
 801dab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dab8:	429f      	cmp	r7, r3
 801daba:	d023      	beq.n	801db04 <mbedtls_ssl_read_record_layer+0x5d0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801dabc:	4b08      	ldr	r3, [pc, #32]	; (801dae0 <mbedtls_ssl_read_record_layer+0x5ac>)
 801dabe:	9300      	str	r3, [sp, #0]
 801dac0:	f240 730f 	movw	r3, #1807	; 0x70f
 801dac4:	e62d      	b.n	801d722 <mbedtls_ssl_read_record_layer+0x1ee>
 801dac6:	bf00      	nop
 801dac8:	08032368 	.word	0x08032368
 801dacc:	08031f4f 	.word	0x08031f4f
 801dad0:	08032386 	.word	0x08032386
 801dad4:	0803278a 	.word	0x0803278a
 801dad8:	08032793 	.word	0x08032793
 801dadc:	ffff8e80 	.word	0xffff8e80
 801dae0:	08031a7f 	.word	0x08031a7f
 801dae4:	0803284e 	.word	0x0803284e
 801dae8:	0803286a 	.word	0x0803286a
 801daec:	0803235b 	.word	0x0803235b
 801daf0:	08032877 	.word	0x08032877
 801daf4:	080327af 	.word	0x080327af
 801daf8:	080327ed 	.word	0x080327ed
 801dafc:	08032446 	.word	0x08032446
 801db00:	080328d0 	.word	0x080328d0
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 801db04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801db06:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801db08:	441a      	add	r2, r3
 801db0a:	f812 7c01 	ldrb.w	r7, [r2, #-1]
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 801db0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801db10:	6952      	ldr	r2, [r2, #20]
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 801db12:	3701      	adds	r7, #1
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 801db14:	18b9      	adds	r1, r7, r2
 801db16:	428b      	cmp	r3, r1
 801db18:	d25a      	bcs.n	801dbd0 <mbedtls_ssl_read_record_layer+0x69c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
 801db1a:	9301      	str	r3, [sp, #4]
 801db1c:	4b5d      	ldr	r3, [pc, #372]	; (801dc94 <mbedtls_ssl_read_record_layer+0x760>)
 801db1e:	9300      	str	r3, [sp, #0]
 801db20:	e9cd 2702 	strd	r2, r7, [sp, #8]
 801db24:	f240 7325 	movw	r3, #1829	; 0x725
 801db28:	4a5b      	ldr	r2, [pc, #364]	; (801dc98 <mbedtls_ssl_read_record_layer+0x764>)
 801db2a:	2101      	movs	r1, #1
 801db2c:	4620      	mov	r0, r4
 801db2e:	f7f3 f819 	bl	8010b64 <mbedtls_debug_print_msg>
            correct = 0;
 801db32:	462f      	mov	r7, r5
            padlen = 0;
 801db34:	462e      	mov	r6, r5
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 801db36:	6963      	ldr	r3, [r4, #20]
 801db38:	2b00      	cmp	r3, #0
 801db3a:	dd4b      	ble.n	801dbd4 <mbedtls_ssl_read_record_layer+0x6a0>
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801db3c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
            correct &= ( ssl->in_msglen >= padlen + 1 );
 801db3e:	1c79      	adds	r1, r7, #1
 801db40:	428a      	cmp	r2, r1
 801db42:	bf34      	ite	cc
 801db44:	2600      	movcc	r6, #0
 801db46:	f006 0601 	andcs.w	r6, r6, #1
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801db4a:	1e53      	subs	r3, r2, #1
                                       ssl->transform_in->maclen );
 801db4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 801db4e:	6952      	ldr	r2, [r2, #20]
 801db50:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801db54:	1bdb      	subs	r3, r3, r7
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 801db56:	3208      	adds	r2, #8
 801db58:	4293      	cmp	r3, r2
 801db5a:	bf2c      	ite	cs
 801db5c:	2600      	movcs	r6, #0
 801db5e:	f006 0601 	andcc.w	r6, r6, #1
            for( i = 1; i <= 256; i++ )
 801db62:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
            size_t pad_count = 0, real_count = 1;
 801db64:	2101      	movs	r1, #1
 801db66:	fb06 2303 	mla	r3, r6, r3, r2
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801db6a:	f107 3eff 	add.w	lr, r7, #4294967295
            for( i = 1; i <= 256; i++ )
 801db6e:	460a      	mov	r2, r1
 801db70:	f240 1c01 	movw	ip, #257	; 0x101
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801db74:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801db78:	eba0 090e 	sub.w	r9, r0, lr
                real_count &= ( i <= padlen );
 801db7c:	4297      	cmp	r7, r2
 801db7e:	bf34      	ite	cc
 801db80:	2100      	movcc	r1, #0
 801db82:	f001 0101 	andcs.w	r1, r1, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801db86:	f1d9 0000 	rsbs	r0, r9, #0
            for( i = 1; i <= 256; i++ )
 801db8a:	f102 0201 	add.w	r2, r2, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801db8e:	eb40 0009 	adc.w	r0, r0, r9
            for( i = 1; i <= 256; i++ )
 801db92:	4562      	cmp	r2, ip
                pad_count += real_count *
 801db94:	fb01 8800 	mla	r8, r1, r0, r8
            for( i = 1; i <= 256; i++ )
 801db98:	d1ec      	bne.n	801db74 <mbedtls_ssl_read_record_layer+0x640>
            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 801db9a:	4547      	cmp	r7, r8
 801db9c:	bf14      	ite	ne
 801db9e:	2600      	movne	r6, #0
 801dba0:	f006 0601 	andeq.w	r6, r6, #1
            if( padlen > 0 && correct == 0 )
 801dba4:	b14f      	cbz	r7, 801dbba <mbedtls_ssl_read_record_layer+0x686>
 801dba6:	b946      	cbnz	r6, 801dbba <mbedtls_ssl_read_record_layer+0x686>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
 801dba8:	4b3c      	ldr	r3, [pc, #240]	; (801dc9c <mbedtls_ssl_read_record_layer+0x768>)
 801dbaa:	9300      	str	r3, [sp, #0]
 801dbac:	4a3a      	ldr	r2, [pc, #232]	; (801dc98 <mbedtls_ssl_read_record_layer+0x764>)
 801dbae:	f240 7361 	movw	r3, #1889	; 0x761
 801dbb2:	2101      	movs	r1, #1
 801dbb4:	4620      	mov	r0, r4
 801dbb6:	f7f2 ffd5 	bl	8010b64 <mbedtls_debug_print_msg>
            padlen &= correct * 0x1FF;
 801dbba:	ea4f 2a46 	mov.w	sl, r6, lsl #9
        ssl->in_msglen -= padlen;
 801dbbe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
            padlen &= correct * 0x1FF;
 801dbc0:	ebaa 0a06 	sub.w	sl, sl, r6
 801dbc4:	ea0a 0a07 	and.w	sl, sl, r7
        ssl->in_msglen -= padlen;
 801dbc8:	eba3 030a 	sub.w	r3, r3, sl
 801dbcc:	67a3      	str	r3, [r4, #120]	; 0x78
 801dbce:	e67d      	b.n	801d8cc <mbedtls_ssl_read_record_layer+0x398>
    size_t padlen = 0, correct = 1;
 801dbd0:	2601      	movs	r6, #1
 801dbd2:	e7b0      	b.n	801db36 <mbedtls_ssl_read_record_layer+0x602>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801dbd4:	4b32      	ldr	r3, [pc, #200]	; (801dca0 <mbedtls_ssl_read_record_layer+0x76c>)
 801dbd6:	9300      	str	r3, [sp, #0]
 801dbd8:	f240 7369 	movw	r3, #1897	; 0x769
 801dbdc:	e5a1      	b.n	801d722 <mbedtls_ssl_read_record_layer+0x1ee>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801dbde:	4b30      	ldr	r3, [pc, #192]	; (801dca0 <mbedtls_ssl_read_record_layer+0x76c>)
 801dbe0:	9300      	str	r3, [sp, #0]
 801dbe2:	f240 7373 	movw	r3, #1907	; 0x773
 801dbe6:	e59c      	b.n	801d722 <mbedtls_ssl_read_record_layer+0x1ee>
        diff |= A[i] ^ B[i];
 801dbe8:	f818 0b01 	ldrb.w	r0, [r8], #1
 801dbec:	f811 5b01 	ldrb.w	r5, [r1], #1
 801dbf0:	4068      	eors	r0, r5
 801dbf2:	4302      	orrs	r2, r0
    for( i = 0; i < n; i++ )
 801dbf4:	e6ee      	b.n	801d9d4 <mbedtls_ssl_read_record_layer+0x4a0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801dbf6:	4b2a      	ldr	r3, [pc, #168]	; (801dca0 <mbedtls_ssl_read_record_layer+0x76c>)
 801dbf8:	9300      	str	r3, [sp, #0]
 801dbfa:	f240 73bc 	movw	r3, #1980	; 0x7bc
 801dbfe:	e590      	b.n	801d722 <mbedtls_ssl_read_record_layer+0x1ee>
        if( correct == 0 )
 801dc00:	2e00      	cmp	r6, #0
 801dc02:	f43f ae56 	beq.w	801d8b2 <mbedtls_ssl_read_record_layer+0x37e>
    if( ssl->in_msglen == 0 )
 801dc06:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801dc08:	b95b      	cbnz	r3, 801dc22 <mbedtls_ssl_read_record_layer+0x6ee>
        ssl->nb_zero++;
 801dc0a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801dc0e:	3301      	adds	r3, #1
        if( ssl->nb_zero > 3 )
 801dc10:	2b03      	cmp	r3, #3
        ssl->nb_zero++;
 801dc12:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if( ssl->nb_zero > 3 )
 801dc16:	dd07      	ble.n	801dc28 <mbedtls_ssl_read_record_layer+0x6f4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 801dc18:	4b22      	ldr	r3, [pc, #136]	; (801dca4 <mbedtls_ssl_read_record_layer+0x770>)
 801dc1a:	9300      	str	r3, [sp, #0]
 801dc1c:	f240 73e7 	movw	r3, #2023	; 0x7e7
 801dc20:	e6e2      	b.n	801d9e8 <mbedtls_ssl_read_record_layer+0x4b4>
        ssl->nb_zero = 0;
 801dc22:	2300      	movs	r3, #0
 801dc24:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    unsigned char diff = 0;
 801dc28:	2208      	movs	r2, #8
            if( ++ssl->in_ctr[i - 1] != 0 )
 801dc2a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801dc2c:	3a01      	subs	r2, #1
 801dc2e:	5c8b      	ldrb	r3, [r1, r2]
 801dc30:	3301      	adds	r3, #1
 801dc32:	b2db      	uxtb	r3, r3
 801dc34:	548b      	strb	r3, [r1, r2]
 801dc36:	b963      	cbnz	r3, 801dc52 <mbedtls_ssl_read_record_layer+0x71e>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 801dc38:	2a00      	cmp	r2, #0
 801dc3a:	d1f6      	bne.n	801dc2a <mbedtls_ssl_read_record_layer+0x6f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 801dc3c:	4b1a      	ldr	r3, [pc, #104]	; (801dca8 <mbedtls_ssl_read_record_layer+0x774>)
 801dc3e:	9300      	str	r3, [sp, #0]
 801dc40:	4a15      	ldr	r2, [pc, #84]	; (801dc98 <mbedtls_ssl_read_record_layer+0x764>)
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801dc42:	4d1a      	ldr	r5, [pc, #104]	; (801dcac <mbedtls_ssl_read_record_layer+0x778>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 801dc44:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801dc48:	2101      	movs	r1, #1
 801dc4a:	4620      	mov	r0, r4
 801dc4c:	f7f2 ff8a 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801dc50:	e717      	b.n	801da82 <mbedtls_ssl_read_record_layer+0x54e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 801dc52:	4b17      	ldr	r3, [pc, #92]	; (801dcb0 <mbedtls_ssl_read_record_layer+0x77c>)
 801dc54:	4a10      	ldr	r2, [pc, #64]	; (801dc98 <mbedtls_ssl_read_record_layer+0x764>)
 801dc56:	9300      	str	r3, [sp, #0]
 801dc58:	2102      	movs	r1, #2
 801dc5a:	f640 0303 	movw	r3, #2051	; 0x803
 801dc5e:	4620      	mov	r0, r4
 801dc60:	f7f2 ff80 	bl	8010b64 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 801dc64:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801dc66:	9302      	str	r3, [sp, #8]
 801dc68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801dc6a:	9301      	str	r3, [sp, #4]
 801dc6c:	4b11      	ldr	r3, [pc, #68]	; (801dcb4 <mbedtls_ssl_read_record_layer+0x780>)
 801dc6e:	4a0a      	ldr	r2, [pc, #40]	; (801dc98 <mbedtls_ssl_read_record_layer+0x764>)
 801dc70:	9300      	str	r3, [sp, #0]
 801dc72:	2104      	movs	r1, #4
 801dc74:	f640 635c 	movw	r3, #3676	; 0xe5c
 801dc78:	4620      	mov	r0, r4
 801dc7a:	f7f2 ffd3 	bl	8010c24 <mbedtls_debug_print_buf>
        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 801dc7e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801dc80:	f241 3388 	movw	r3, #5000	; 0x1388
 801dc84:	429a      	cmp	r2, r3
 801dc86:	f67f ac86 	bls.w	801d596 <mbedtls_ssl_read_record_layer+0x62>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801dc8a:	4b0b      	ldr	r3, [pc, #44]	; (801dcb8 <mbedtls_ssl_read_record_layer+0x784>)
 801dc8c:	9300      	str	r3, [sp, #0]
 801dc8e:	f640 6361 	movw	r3, #3681	; 0xe61
 801dc92:	e4d7      	b.n	801d644 <mbedtls_ssl_read_record_layer+0x110>
 801dc94:	0803280c 	.word	0x0803280c
 801dc98:	08031f4f 	.word	0x08031f4f
 801dc9c:	08032834 	.word	0x08032834
 801dca0:	08031a7f 	.word	0x08031a7f
 801dca4:	08032892 	.word	0x08032892
 801dca8:	080328e0 	.word	0x080328e0
 801dcac:	ffff9480 	.word	0xffff9480
 801dcb0:	08032904 	.word	0x08032904
 801dcb4:	08032913 	.word	0x08032913
 801dcb8:	08032700 	.word	0x08032700

0801dcbc <mbedtls_ssl_read_record>:
{
 801dcbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 801dcbe:	4b25      	ldr	r3, [pc, #148]	; (801dd54 <mbedtls_ssl_read_record+0x98>)
 801dcc0:	9300      	str	r3, [sp, #0]
{
 801dcc2:	4605      	mov	r5, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 801dcc4:	f640 6389 	movw	r3, #3721	; 0xe89
 801dcc8:	4a23      	ldr	r2, [pc, #140]	; (801dd58 <mbedtls_ssl_read_record+0x9c>)
 801dcca:	2102      	movs	r1, #2
 801dccc:	f7f2 ff4a 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->keep_current_message == 0 )
 801dcd0:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801dcd4:	bb83      	cbnz	r3, 801dd38 <mbedtls_ssl_read_record+0x7c>
            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 801dcd6:	4628      	mov	r0, r5
 801dcd8:	f7ff fc2c 	bl	801d534 <mbedtls_ssl_read_record_layer>
 801dcdc:	4604      	mov	r4, r0
 801dcde:	b160      	cbz	r0, 801dcfa <mbedtls_ssl_read_record+0x3e>
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801dce0:	4b1e      	ldr	r3, [pc, #120]	; (801dd5c <mbedtls_ssl_read_record+0xa0>)
 801dce2:	9300      	str	r3, [sp, #0]
 801dce4:	9001      	str	r0, [sp, #4]
 801dce6:	f640 6391 	movw	r3, #3729	; 0xe91
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801dcea:	4a1b      	ldr	r2, [pc, #108]	; (801dd58 <mbedtls_ssl_read_record+0x9c>)
 801dcec:	2101      	movs	r1, #1
 801dcee:	4628      	mov	r0, r5
 801dcf0:	f7f2 ff68 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801dcf4:	4620      	mov	r0, r4
 801dcf6:	b003      	add	sp, #12
 801dcf8:	bd30      	pop	{r4, r5, pc}
            ret = mbedtls_ssl_handle_message_type( ssl );
 801dcfa:	4628      	mov	r0, r5
 801dcfc:	f7ff fb6c 	bl	801d3d8 <mbedtls_ssl_handle_message_type>
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 801dd00:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            ret = mbedtls_ssl_handle_message_type( ssl );
 801dd04:	4604      	mov	r4, r0
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 801dd06:	d0e6      	beq.n	801dcd6 <mbedtls_ssl_read_record+0x1a>
        if( 0 != ret )
 801dd08:	b128      	cbz	r0, 801dd16 <mbedtls_ssl_read_record+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801dd0a:	4b14      	ldr	r3, [pc, #80]	; (801dd5c <mbedtls_ssl_read_record+0xa0>)
 801dd0c:	9300      	str	r3, [sp, #0]
 801dd0e:	9001      	str	r0, [sp, #4]
 801dd10:	f640 639b 	movw	r3, #3739	; 0xe9b
 801dd14:	e7e9      	b.n	801dcea <mbedtls_ssl_read_record+0x2e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801dd16:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801dd18:	2b16      	cmp	r3, #22
 801dd1a:	d102      	bne.n	801dd22 <mbedtls_ssl_read_record+0x66>
            mbedtls_ssl_update_handshake_status( ssl );
 801dd1c:	4628      	mov	r0, r5
 801dd1e:	f7ff fb49 	bl	801d3b4 <mbedtls_ssl_update_handshake_status>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 801dd22:	4b0f      	ldr	r3, [pc, #60]	; (801dd60 <mbedtls_ssl_read_record+0xa4>)
 801dd24:	9300      	str	r3, [sp, #0]
 801dd26:	4a0c      	ldr	r2, [pc, #48]	; (801dd58 <mbedtls_ssl_read_record+0x9c>)
 801dd28:	f640 63aa 	movw	r3, #3754	; 0xeaa
 801dd2c:	2102      	movs	r1, #2
 801dd2e:	4628      	mov	r0, r5
 801dd30:	f7f2 ff18 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801dd34:	2400      	movs	r4, #0
 801dd36:	e7dd      	b.n	801dcf4 <mbedtls_ssl_read_record+0x38>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
 801dd38:	4b0a      	ldr	r3, [pc, #40]	; (801dd64 <mbedtls_ssl_read_record+0xa8>)
 801dd3a:	9300      	str	r3, [sp, #0]
 801dd3c:	4a06      	ldr	r2, [pc, #24]	; (801dd58 <mbedtls_ssl_read_record+0x9c>)
 801dd3e:	f640 63a6 	movw	r3, #3750	; 0xea6
 801dd42:	2102      	movs	r1, #2
 801dd44:	4628      	mov	r0, r5
 801dd46:	f7f2 ff0d 	bl	8010b64 <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 801dd4a:	2300      	movs	r3, #0
 801dd4c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
 801dd50:	e7e7      	b.n	801dd22 <mbedtls_ssl_read_record+0x66>
 801dd52:	bf00      	nop
 801dd54:	0803292f 	.word	0x0803292f
 801dd58:	08031f4f 	.word	0x08031f4f
 801dd5c:	0803293e 	.word	0x0803293e
 801dd60:	0803297d 	.word	0x0803297d
 801dd64:	0803295c 	.word	0x0803295c

0801dd68 <mbedtls_ssl_write_certificate>:
{
 801dd68:	b5f0      	push	{r4, r5, r6, r7, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801dd6a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dd6c:	4a5b      	ldr	r2, [pc, #364]	; (801dedc <mbedtls_ssl_write_certificate+0x174>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801dd6e:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dd70:	4b5b      	ldr	r3, [pc, #364]	; (801dee0 <mbedtls_ssl_write_certificate+0x178>)
{
 801dd72:	b085      	sub	sp, #20
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dd74:	2102      	movs	r1, #2
 801dd76:	9300      	str	r3, [sp, #0]
 801dd78:	f241 036b 	movw	r3, #4203	; 0x106b
{
 801dd7c:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dd7e:	f7f2 fef1 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801dd82:	7aab      	ldrb	r3, [r5, #10]
 801dd84:	2b0b      	cmp	r3, #11
 801dd86:	d815      	bhi.n	801ddb4 <mbedtls_ssl_write_certificate+0x4c>
 801dd88:	f44f 6516 	mov.w	r5, #2400	; 0x960
 801dd8c:	40dd      	lsrs	r5, r3
 801dd8e:	43ed      	mvns	r5, r5
 801dd90:	f015 0501 	ands.w	r5, r5, #1
 801dd94:	d10e      	bne.n	801ddb4 <mbedtls_ssl_write_certificate+0x4c>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dd96:	4b53      	ldr	r3, [pc, #332]	; (801dee4 <mbedtls_ssl_write_certificate+0x17c>)
 801dd98:	9300      	str	r3, [sp, #0]
 801dd9a:	f241 0372 	movw	r3, #4210	; 0x1072
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dd9e:	4a4f      	ldr	r2, [pc, #316]	; (801dedc <mbedtls_ssl_write_certificate+0x174>)
 801dda0:	2102      	movs	r1, #2
 801dda2:	4620      	mov	r0, r4
 801dda4:	f7f2 fede 	bl	8010b64 <mbedtls_debug_print_msg>
            ssl->state++;
 801dda8:	6863      	ldr	r3, [r4, #4]
 801ddaa:	3301      	adds	r3, #1
 801ddac:	6063      	str	r3, [r4, #4]
}
 801ddae:	4628      	mov	r0, r5
 801ddb0:	b005      	add	sp, #20
 801ddb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801ddb4:	6822      	ldr	r2, [r4, #0]
 801ddb6:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801ddba:	07db      	lsls	r3, r3, #31
 801ddbc:	d407      	bmi.n	801ddce <mbedtls_ssl_write_certificate+0x66>
        if( ssl->client_auth == 0 )
 801ddbe:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 801ddc2:	b925      	cbnz	r5, 801ddce <mbedtls_ssl_write_certificate+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801ddc4:	4b47      	ldr	r3, [pc, #284]	; (801dee4 <mbedtls_ssl_write_certificate+0x17c>)
 801ddc6:	9300      	str	r3, [sp, #0]
 801ddc8:	f241 037c 	movw	r3, #4220	; 0x107c
 801ddcc:	e7e7      	b.n	801dd9e <mbedtls_ssl_write_certificate+0x36>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801ddce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ddd0:	b113      	cbz	r3, 801ddd8 <mbedtls_ssl_write_certificate+0x70>
 801ddd2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801ddd6:	b90b      	cbnz	r3, 801dddc <mbedtls_ssl_write_certificate+0x74>
        key_cert = ssl->conf->key_cert;
 801ddd8:	6c13      	ldr	r3, [r2, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801ddda:	b103      	cbz	r3, 801ddde <mbedtls_ssl_write_certificate+0x76>
 801dddc:	681b      	ldr	r3, [r3, #0]
    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 801ddde:	9301      	str	r3, [sp, #4]
 801dde0:	4b41      	ldr	r3, [pc, #260]	; (801dee8 <mbedtls_ssl_write_certificate+0x180>)
 801dde2:	9300      	str	r3, [sp, #0]
 801dde4:	4a3d      	ldr	r2, [pc, #244]	; (801dedc <mbedtls_ssl_write_certificate+0x174>)
 801dde6:	f241 039f 	movw	r3, #4255	; 0x109f
 801ddea:	2103      	movs	r1, #3
 801ddec:	4620      	mov	r0, r4
 801ddee:	f7f3 f813 	bl	8010e18 <mbedtls_debug_print_crt>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801ddf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ddf4:	b113      	cbz	r3, 801ddfc <mbedtls_ssl_write_certificate+0x94>
 801ddf6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801ddfa:	b91b      	cbnz	r3, 801de04 <mbedtls_ssl_write_certificate+0x9c>
        key_cert = ssl->conf->key_cert;
 801ddfc:	6823      	ldr	r3, [r4, #0]
 801ddfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801de00:	2b00      	cmp	r3, #0
 801de02:	d05e      	beq.n	801dec2 <mbedtls_ssl_write_certificate+0x15a>
 801de04:	681d      	ldr	r5, [r3, #0]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 801de06:	f241 3785 	movw	r7, #4997	; 0x1385
 801de0a:	2307      	movs	r3, #7
    while( crt != NULL )
 801de0c:	bb45      	cbnz	r5, 801de60 <mbedtls_ssl_write_certificate+0xf8>
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 801de0e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801de12:	1fda      	subs	r2, r3, #7
 801de14:	0c10      	lsrs	r0, r2, #16
 801de16:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 801de18:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801de1c:	0a10      	lsrs	r0, r2, #8
 801de1e:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 801de20:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801de24:	718a      	strb	r2, [r1, #6]
    ssl->out_msglen  = i;
 801de26:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801de2a:	2316      	movs	r3, #22
 801de2c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 801de30:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801de34:	220b      	movs	r2, #11
 801de36:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801de38:	6863      	ldr	r3, [r4, #4]
 801de3a:	3301      	adds	r3, #1
 801de3c:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801de3e:	4620      	mov	r0, r4
 801de40:	f7fe ffee 	bl	801ce20 <mbedtls_ssl_write_record>
 801de44:	4605      	mov	r5, r0
 801de46:	2800      	cmp	r0, #0
 801de48:	d03d      	beq.n	801dec6 <mbedtls_ssl_write_certificate+0x15e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801de4a:	4b28      	ldr	r3, [pc, #160]	; (801deec <mbedtls_ssl_write_certificate+0x184>)
 801de4c:	9001      	str	r0, [sp, #4]
 801de4e:	9300      	str	r3, [sp, #0]
 801de50:	4a22      	ldr	r2, [pc, #136]	; (801dedc <mbedtls_ssl_write_certificate+0x174>)
 801de52:	f241 03cf 	movw	r3, #4303	; 0x10cf
 801de56:	2101      	movs	r1, #1
 801de58:	4620      	mov	r0, r4
 801de5a:	f7f2 feb3 	bl	8010bc4 <mbedtls_debug_print_ret>
        return( ret );
 801de5e:	e7a6      	b.n	801ddae <mbedtls_ssl_write_certificate+0x46>
        n = crt->raw.len;
 801de60:	686a      	ldr	r2, [r5, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 801de62:	1af9      	subs	r1, r7, r3
 801de64:	1cd8      	adds	r0, r3, #3
 801de66:	4291      	cmp	r1, r2
 801de68:	eb00 0602 	add.w	r6, r0, r2
 801de6c:	d20e      	bcs.n	801de8c <mbedtls_ssl_write_certificate+0x124>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 801de6e:	f241 3388 	movw	r3, #5000	; 0x1388
 801de72:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801de76:	4b1e      	ldr	r3, [pc, #120]	; (801def0 <mbedtls_ssl_write_certificate+0x188>)
 801de78:	9300      	str	r3, [sp, #0]
 801de7a:	4a18      	ldr	r2, [pc, #96]	; (801dedc <mbedtls_ssl_write_certificate+0x174>)
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 801de7c:	4d1d      	ldr	r5, [pc, #116]	; (801def4 <mbedtls_ssl_write_certificate+0x18c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 801de7e:	f241 03b2 	movw	r3, #4274	; 0x10b2
 801de82:	2101      	movs	r1, #1
 801de84:	4620      	mov	r0, r4
 801de86:	f7f2 fe6d 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 801de8a:	e790      	b.n	801ddae <mbedtls_ssl_write_certificate+0x46>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 801de8c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801de90:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801de94:	f801 c003 	strb.w	ip, [r1, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 801de98:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801de9c:	4419      	add	r1, r3
 801de9e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801dea2:	f881 c001 	strb.w	ip, [r1, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 801dea6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801deaa:	440b      	add	r3, r1
 801deac:	709a      	strb	r2, [r3, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 801deae:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801deb2:	68a9      	ldr	r1, [r5, #8]
 801deb4:	4418      	add	r0, r3
 801deb6:	f004 fae3 	bl	8022480 <memcpy>
        i += n; crt = crt->next;
 801deba:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 801debe:	4633      	mov	r3, r6
 801dec0:	e7a4      	b.n	801de0c <mbedtls_ssl_write_certificate+0xa4>
 801dec2:	2307      	movs	r3, #7
 801dec4:	e7a3      	b.n	801de0e <mbedtls_ssl_write_certificate+0xa6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 801dec6:	4b0c      	ldr	r3, [pc, #48]	; (801def8 <mbedtls_ssl_write_certificate+0x190>)
 801dec8:	9300      	str	r3, [sp, #0]
 801deca:	4a04      	ldr	r2, [pc, #16]	; (801dedc <mbedtls_ssl_write_certificate+0x174>)
 801decc:	f241 03d3 	movw	r3, #4307	; 0x10d3
 801ded0:	2102      	movs	r1, #2
 801ded2:	4620      	mov	r0, r4
 801ded4:	f7f2 fe46 	bl	8010b64 <mbedtls_debug_print_msg>
    return( ret );
 801ded8:	e769      	b.n	801ddae <mbedtls_ssl_write_certificate+0x46>
 801deda:	bf00      	nop
 801dedc:	08031f4f 	.word	0x08031f4f
 801dee0:	0803298c 	.word	0x0803298c
 801dee4:	080329a1 	.word	0x080329a1
 801dee8:	080329bb 	.word	0x080329bb
 801deec:	080313e7 	.word	0x080313e7
 801def0:	080329cb 	.word	0x080329cb
 801def4:	ffff8b00 	.word	0xffff8b00
 801def8:	080329ea 	.word	0x080329ea

0801defc <mbedtls_ssl_write_change_cipher_spec>:
{
 801defc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 801defe:	4b17      	ldr	r3, [pc, #92]	; (801df5c <mbedtls_ssl_write_change_cipher_spec+0x60>)
 801df00:	4a17      	ldr	r2, [pc, #92]	; (801df60 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801df02:	9300      	str	r3, [sp, #0]
{
 801df04:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 801df06:	f241 235c 	movw	r3, #4700	; 0x125c
 801df0a:	2102      	movs	r1, #2
 801df0c:	f7f2 fe2a 	bl	8010b64 <mbedtls_debug_print_msg>
    ssl->out_msglen  = 1;
 801df10:	2601      	movs	r6, #1
 801df12:	2314      	movs	r3, #20
 801df14:	e9c4 3629 	strd	r3, r6, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = 1;
 801df18:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801df1c:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 801df1e:	6863      	ldr	r3, [r4, #4]
 801df20:	4433      	add	r3, r6
 801df22:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801df24:	4620      	mov	r0, r4
 801df26:	f7fe ff7b 	bl	801ce20 <mbedtls_ssl_write_record>
 801df2a:	4605      	mov	r5, r0
 801df2c:	b160      	cbz	r0, 801df48 <mbedtls_ssl_write_change_cipher_spec+0x4c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801df2e:	4b0d      	ldr	r3, [pc, #52]	; (801df64 <mbedtls_ssl_write_change_cipher_spec+0x68>)
 801df30:	9001      	str	r0, [sp, #4]
 801df32:	9300      	str	r3, [sp, #0]
 801df34:	4a0a      	ldr	r2, [pc, #40]	; (801df60 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801df36:	f241 2366 	movw	r3, #4710	; 0x1266
 801df3a:	4631      	mov	r1, r6
 801df3c:	4620      	mov	r0, r4
 801df3e:	f7f2 fe41 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801df42:	4628      	mov	r0, r5
 801df44:	b002      	add	sp, #8
 801df46:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 801df48:	4b07      	ldr	r3, [pc, #28]	; (801df68 <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 801df4a:	9300      	str	r3, [sp, #0]
 801df4c:	4a04      	ldr	r2, [pc, #16]	; (801df60 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801df4e:	f241 236a 	movw	r3, #4714	; 0x126a
 801df52:	2102      	movs	r1, #2
 801df54:	4620      	mov	r0, r4
 801df56:	f7f2 fe05 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801df5a:	e7f2      	b.n	801df42 <mbedtls_ssl_write_change_cipher_spec+0x46>
 801df5c:	080329ff 	.word	0x080329ff
 801df60:	08031f4f 	.word	0x08031f4f
 801df64:	080313e7 	.word	0x080313e7
 801df68:	08032a1b 	.word	0x08032a1b

0801df6c <mbedtls_ssl_parse_change_cipher_spec>:
{
 801df6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 801df6e:	4b36      	ldr	r3, [pc, #216]	; (801e048 <mbedtls_ssl_parse_change_cipher_spec+0xdc>)
 801df70:	4a36      	ldr	r2, [pc, #216]	; (801e04c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801df72:	9300      	str	r3, [sp, #0]
{
 801df74:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 801df76:	f241 2373 	movw	r3, #4723	; 0x1273
 801df7a:	2102      	movs	r1, #2
 801df7c:	f7f2 fdf2 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801df80:	4620      	mov	r0, r4
 801df82:	f7ff fe9b 	bl	801dcbc <mbedtls_ssl_read_record>
 801df86:	4605      	mov	r5, r0
 801df88:	b160      	cbz	r0, 801dfa4 <mbedtls_ssl_parse_change_cipher_spec+0x38>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801df8a:	4b31      	ldr	r3, [pc, #196]	; (801e050 <mbedtls_ssl_parse_change_cipher_spec+0xe4>)
 801df8c:	9001      	str	r0, [sp, #4]
 801df8e:	9300      	str	r3, [sp, #0]
 801df90:	4a2e      	ldr	r2, [pc, #184]	; (801e04c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801df92:	f241 2377 	movw	r3, #4727	; 0x1277
 801df96:	2101      	movs	r1, #1
 801df98:	4620      	mov	r0, r4
 801df9a:	f7f2 fe13 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801df9e:	4628      	mov	r0, r5
 801dfa0:	b003      	add	sp, #12
 801dfa2:	bd30      	pop	{r4, r5, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 801dfa4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801dfa6:	2b14      	cmp	r3, #20
 801dfa8:	d00f      	beq.n	801dfca <mbedtls_ssl_parse_change_cipher_spec+0x5e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801dfaa:	4b2a      	ldr	r3, [pc, #168]	; (801e054 <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 801dfac:	4a27      	ldr	r2, [pc, #156]	; (801e04c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801dfae:	9300      	str	r3, [sp, #0]
 801dfb0:	2101      	movs	r1, #1
 801dfb2:	f241 237d 	movw	r3, #4733	; 0x127d
 801dfb6:	4620      	mov	r0, r4
 801dfb8:	f7f2 fdd4 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801dfbc:	220a      	movs	r2, #10
 801dfbe:	2102      	movs	r1, #2
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	f7ff fa65 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801dfc6:	4d24      	ldr	r5, [pc, #144]	; (801e058 <mbedtls_ssl_parse_change_cipher_spec+0xec>)
 801dfc8:	e7e9      	b.n	801df9e <mbedtls_ssl_parse_change_cipher_spec+0x32>
    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 801dfca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801dfcc:	2b01      	cmp	r3, #1
 801dfce:	d103      	bne.n	801dfd8 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
 801dfd0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801dfd2:	781b      	ldrb	r3, [r3, #0]
 801dfd4:	2b01      	cmp	r3, #1
 801dfd6:	d00f      	beq.n	801dff8 <mbedtls_ssl_parse_change_cipher_spec+0x8c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801dfd8:	4b1e      	ldr	r3, [pc, #120]	; (801e054 <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 801dfda:	4a1c      	ldr	r2, [pc, #112]	; (801e04c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801dfdc:	9300      	str	r3, [sp, #0]
 801dfde:	2101      	movs	r1, #1
 801dfe0:	f241 2385 	movw	r3, #4741	; 0x1285
 801dfe4:	4620      	mov	r0, r4
 801dfe6:	f7f2 fdbd 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801dfea:	2232      	movs	r2, #50	; 0x32
 801dfec:	2102      	movs	r1, #2
 801dfee:	4620      	mov	r0, r4
 801dff0:	f7ff fa4e 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 801dff4:	4d19      	ldr	r5, [pc, #100]	; (801e05c <mbedtls_ssl_parse_change_cipher_spec+0xf0>)
 801dff6:	e7d2      	b.n	801df9e <mbedtls_ssl_parse_change_cipher_spec+0x32>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 801dff8:	4b19      	ldr	r3, [pc, #100]	; (801e060 <mbedtls_ssl_parse_change_cipher_spec+0xf4>)
 801dffa:	4a14      	ldr	r2, [pc, #80]	; (801e04c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801dffc:	9300      	str	r3, [sp, #0]
 801dffe:	2103      	movs	r1, #3
 801e000:	4620      	mov	r0, r4
 801e002:	f241 238f 	movw	r3, #4751	; 0x128f
 801e006:	f7f2 fdad 	bl	8010b64 <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 801e00a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e00c:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->session_in = ssl->session_negotiate;
 801e00e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e010:	62a3      	str	r3, [r4, #40]	; 0x28
    memset( ssl->in_ctr, 0, 8 );
 801e012:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801e014:	601d      	str	r5, [r3, #0]
 801e016:	605d      	str	r5, [r3, #4]
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801e018:	6963      	ldr	r3, [r4, #20]
 801e01a:	2b01      	cmp	r3, #1
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 801e01c:	bfc8      	it	gt
 801e01e:	6ca1      	ldrgt	r1, [r4, #72]	; 0x48
 801e020:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801e022:	bfc2      	ittt	gt
 801e024:	e9d1 2103 	ldrdgt	r2, r1, [r1, #12]
 801e028:	1a52      	subgt	r2, r2, r1
 801e02a:	189b      	addgt	r3, r3, r2
 801e02c:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->state++;
 801e02e:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 801e030:	4a06      	ldr	r2, [pc, #24]	; (801e04c <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
    ssl->state++;
 801e032:	3301      	adds	r3, #1
 801e034:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 801e036:	4b0b      	ldr	r3, [pc, #44]	; (801e064 <mbedtls_ssl_parse_change_cipher_spec+0xf8>)
 801e038:	9300      	str	r3, [sp, #0]
 801e03a:	2102      	movs	r1, #2
 801e03c:	f241 23c1 	movw	r3, #4801	; 0x12c1
 801e040:	4620      	mov	r0, r4
 801e042:	f7f2 fd8f 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801e046:	e7aa      	b.n	801df9e <mbedtls_ssl_parse_change_cipher_spec+0x32>
 801e048:	08032a37 	.word	0x08032a37
 801e04c:	08031f4f 	.word	0x08031f4f
 801e050:	08031440 	.word	0x08031440
 801e054:	08032a53 	.word	0x08032a53
 801e058:	ffff8900 	.word	0xffff8900
 801e05c:	ffff8200 	.word	0xffff8200
 801e060:	08032a72 	.word	0x08032a72
 801e064:	08032aa3 	.word	0x08032aa3

0801e068 <mbedtls_ssl_optimize_checksum>:
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 801e068:	7a4a      	ldrb	r2, [r1, #9]
 801e06a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801e06c:	2a07      	cmp	r2, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 801e06e:	bf0c      	ite	eq
 801e070:	4a02      	ldreq	r2, [pc, #8]	; (801e07c <mbedtls_ssl_optimize_checksum+0x14>)
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 801e072:	4a03      	ldrne	r2, [pc, #12]	; (801e080 <mbedtls_ssl_optimize_checksum+0x18>)
 801e074:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
}
 801e078:	4770      	bx	lr
 801e07a:	bf00      	nop
 801e07c:	0801c60b 	.word	0x0801c60b
 801e080:	0801c601 	.word	0x0801c601

0801e084 <mbedtls_ssl_write_finished>:
{
 801e084:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 801e086:	4b39      	ldr	r3, [pc, #228]	; (801e16c <mbedtls_ssl_write_finished+0xe8>)
 801e088:	4a39      	ldr	r2, [pc, #228]	; (801e170 <mbedtls_ssl_write_finished+0xec>)
 801e08a:	9300      	str	r3, [sp, #0]
{
 801e08c:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 801e08e:	f241 4371 	movw	r3, #5233	; 0x1471
 801e092:	2102      	movs	r1, #2
 801e094:	f7f2 fd66 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801e098:	6963      	ldr	r3, [r4, #20]
 801e09a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 801e09e:	2b01      	cmp	r3, #1
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 801e0a0:	bfc1      	itttt	gt
 801e0a2:	6ca2      	ldrgt	r2, [r4, #72]	; 0x48
 801e0a4:	e9d2 3203 	ldrdgt	r3, r2, [r2, #12]
 801e0a8:	1a9b      	subgt	r3, r3, r2
 801e0aa:	18c9      	addgt	r1, r1, r3
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 801e0ac:	6823      	ldr	r3, [r4, #0]
 801e0ae:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
 801e0b2:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801e0b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e0b8:	f002 0201 	and.w	r2, r2, #1
 801e0bc:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 801e0c0:	3104      	adds	r1, #4
 801e0c2:	4620      	mov	r0, r4
 801e0c4:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 801e0c6:	6963      	ldr	r3, [r4, #20]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
 801e0c8:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	bf0c      	ite	eq
 801e0d0:	2524      	moveq	r5, #36	; 0x24
 801e0d2:	250c      	movne	r5, #12
    ssl->verify_data_len = hash_len;
 801e0d4:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
 801e0d8:	462a      	mov	r2, r5
 801e0da:	1d31      	adds	r1, r6, #4
 801e0dc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 801e0e0:	f004 f9ce 	bl	8022480 <memcpy>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801e0e4:	2316      	movs	r3, #22
 801e0e6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msglen  = 4 + hash_len;
 801e0ea:	3504      	adds	r5, #4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 801e0ec:	2314      	movs	r3, #20
    ssl->out_msglen  = 4 + hash_len;
 801e0ee:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 801e0f2:	7033      	strb	r3, [r6, #0]
    if( ssl->handshake->resume != 0 )
 801e0f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e0f6:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 801e0fa:	b353      	cbz	r3, 801e152 <mbedtls_ssl_write_finished+0xce>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801e0fc:	6823      	ldr	r3, [r4, #0]
 801e0fe:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e102:	07db      	lsls	r3, r3, #31
 801e104:	d401      	bmi.n	801e10a <mbedtls_ssl_write_finished+0x86>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801e106:	230f      	movs	r3, #15
        ssl->state++;
 801e108:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 801e10a:	4b1a      	ldr	r3, [pc, #104]	; (801e174 <mbedtls_ssl_write_finished+0xf0>)
 801e10c:	4a18      	ldr	r2, [pc, #96]	; (801e170 <mbedtls_ssl_write_finished+0xec>)
 801e10e:	9300      	str	r3, [sp, #0]
 801e110:	2103      	movs	r1, #3
 801e112:	f241 43a7 	movw	r3, #5287	; 0x14a7
 801e116:	4620      	mov	r0, r4
 801e118:	f7f2 fd24 	bl	8010b64 <mbedtls_debug_print_msg>
    memset( ssl->out_ctr, 0, 8 );
 801e11c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801e120:	2200      	movs	r2, #0
 801e122:	601a      	str	r2, [r3, #0]
 801e124:	605a      	str	r2, [r3, #4]
    ssl->transform_out = ssl->transform_negotiate;
 801e126:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e128:	6423      	str	r3, [r4, #64]	; 0x40
    ssl->session_out = ssl->session_negotiate;
 801e12a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e12c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801e12e:	4620      	mov	r0, r4
 801e130:	f7fe fe76 	bl	801ce20 <mbedtls_ssl_write_record>
 801e134:	4605      	mov	r5, r0
 801e136:	b178      	cbz	r0, 801e158 <mbedtls_ssl_write_finished+0xd4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801e138:	4b0f      	ldr	r3, [pc, #60]	; (801e178 <mbedtls_ssl_write_finished+0xf4>)
 801e13a:	9001      	str	r0, [sp, #4]
 801e13c:	9300      	str	r3, [sp, #0]
 801e13e:	4a0c      	ldr	r2, [pc, #48]	; (801e170 <mbedtls_ssl_write_finished+0xec>)
 801e140:	f241 43da 	movw	r3, #5338	; 0x14da
 801e144:	2101      	movs	r1, #1
 801e146:	4620      	mov	r0, r4
 801e148:	f7f2 fd3c 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801e14c:	4628      	mov	r0, r5
 801e14e:	b002      	add	sp, #8
 801e150:	bd70      	pop	{r4, r5, r6, pc}
        ssl->state++;
 801e152:	6863      	ldr	r3, [r4, #4]
 801e154:	3301      	adds	r3, #1
 801e156:	e7d7      	b.n	801e108 <mbedtls_ssl_write_finished+0x84>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 801e158:	4b08      	ldr	r3, [pc, #32]	; (801e17c <mbedtls_ssl_write_finished+0xf8>)
 801e15a:	9300      	str	r3, [sp, #0]
 801e15c:	4a04      	ldr	r2, [pc, #16]	; (801e170 <mbedtls_ssl_write_finished+0xec>)
 801e15e:	f241 43de 	movw	r3, #5342	; 0x14de
 801e162:	2102      	movs	r1, #2
 801e164:	4620      	mov	r0, r4
 801e166:	f7f2 fcfd 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801e16a:	e7ef      	b.n	801e14c <mbedtls_ssl_write_finished+0xc8>
 801e16c:	08032abf 	.word	0x08032abf
 801e170:	08031f4f 	.word	0x08031f4f
 801e174:	08032ad1 	.word	0x08032ad1
 801e178:	080313e7 	.word	0x080313e7
 801e17c:	08032b03 	.word	0x08032b03

0801e180 <mbedtls_ssl_parse_finished>:
{
 801e180:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e182:	b087      	sub	sp, #28
 801e184:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 801e186:	4b44      	ldr	r3, [pc, #272]	; (801e298 <mbedtls_ssl_parse_finished+0x118>)
 801e188:	4a44      	ldr	r2, [pc, #272]	; (801e29c <mbedtls_ssl_parse_finished+0x11c>)
 801e18a:	9300      	str	r3, [sp, #0]
 801e18c:	2102      	movs	r1, #2
 801e18e:	f241 43ef 	movw	r3, #5359	; 0x14ef
 801e192:	f7f2 fce7 	bl	8010b64 <mbedtls_debug_print_msg>
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 801e196:	6823      	ldr	r3, [r4, #0]
 801e198:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801e19c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e19e:	43d2      	mvns	r2, r2
 801e1a0:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 801e1a4:	f002 0201 	and.w	r2, r2, #1
 801e1a8:	a903      	add	r1, sp, #12
 801e1aa:	4620      	mov	r0, r4
 801e1ac:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801e1ae:	4620      	mov	r0, r4
 801e1b0:	f7ff fd84 	bl	801dcbc <mbedtls_ssl_read_record>
 801e1b4:	4605      	mov	r5, r0
 801e1b6:	b160      	cbz	r0, 801e1d2 <mbedtls_ssl_parse_finished+0x52>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801e1b8:	4b39      	ldr	r3, [pc, #228]	; (801e2a0 <mbedtls_ssl_parse_finished+0x120>)
 801e1ba:	9001      	str	r0, [sp, #4]
 801e1bc:	9300      	str	r3, [sp, #0]
 801e1be:	4a37      	ldr	r2, [pc, #220]	; (801e29c <mbedtls_ssl_parse_finished+0x11c>)
 801e1c0:	f241 43f5 	movw	r3, #5365	; 0x14f5
 801e1c4:	2101      	movs	r1, #1
 801e1c6:	4620      	mov	r0, r4
 801e1c8:	f7f2 fcfc 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801e1cc:	4628      	mov	r0, r5
 801e1ce:	b007      	add	sp, #28
 801e1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801e1d2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801e1d4:	2b16      	cmp	r3, #22
 801e1d6:	d00f      	beq.n	801e1f8 <mbedtls_ssl_parse_finished+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e1d8:	4b32      	ldr	r3, [pc, #200]	; (801e2a4 <mbedtls_ssl_parse_finished+0x124>)
 801e1da:	4a30      	ldr	r2, [pc, #192]	; (801e29c <mbedtls_ssl_parse_finished+0x11c>)
 801e1dc:	9300      	str	r3, [sp, #0]
 801e1de:	2101      	movs	r1, #1
 801e1e0:	f241 43fb 	movw	r3, #5371	; 0x14fb
 801e1e4:	4620      	mov	r0, r4
 801e1e6:	f7f2 fcbd 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801e1ea:	220a      	movs	r2, #10
 801e1ec:	2102      	movs	r1, #2
 801e1ee:	4620      	mov	r0, r4
 801e1f0:	f7ff f94e 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801e1f4:	4d2c      	ldr	r5, [pc, #176]	; (801e2a8 <mbedtls_ssl_parse_finished+0x128>)
 801e1f6:	e7e9      	b.n	801e1cc <mbedtls_ssl_parse_finished+0x4c>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 801e1f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801e1fa:	781a      	ldrb	r2, [r3, #0]
 801e1fc:	2a14      	cmp	r2, #20
 801e1fe:	d103      	bne.n	801e208 <mbedtls_ssl_parse_finished+0x88>
 801e200:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801e204:	2a10      	cmp	r2, #16
 801e206:	d00f      	beq.n	801e228 <mbedtls_ssl_parse_finished+0xa8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e208:	4b26      	ldr	r3, [pc, #152]	; (801e2a4 <mbedtls_ssl_parse_finished+0x124>)
 801e20a:	9300      	str	r3, [sp, #0]
 801e20c:	f241 530c 	movw	r3, #5388	; 0x150c
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e210:	4a22      	ldr	r2, [pc, #136]	; (801e29c <mbedtls_ssl_parse_finished+0x11c>)
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 801e212:	4d26      	ldr	r5, [pc, #152]	; (801e2ac <mbedtls_ssl_parse_finished+0x12c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e214:	2101      	movs	r1, #1
 801e216:	4620      	mov	r0, r4
 801e218:	f7f2 fca4 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801e21c:	2232      	movs	r2, #50	; 0x32
 801e21e:	2102      	movs	r1, #2
 801e220:	4620      	mov	r0, r4
 801e222:	f7ff f935 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 801e226:	e7d1      	b.n	801e1cc <mbedtls_ssl_parse_finished+0x4c>
 801e228:	1cd9      	adds	r1, r3, #3
 801e22a:	ae03      	add	r6, sp, #12
 801e22c:	330f      	adds	r3, #15
    unsigned char diff = 0;
 801e22e:	4602      	mov	r2, r0
        diff |= A[i] ^ B[i];
 801e230:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 801e234:	f816 0b01 	ldrb.w	r0, [r6], #1
    for( i = 0; i < n; i++ )
 801e238:	4299      	cmp	r1, r3
        diff |= A[i] ^ B[i];
 801e23a:	ea80 0007 	eor.w	r0, r0, r7
 801e23e:	ea42 0200 	orr.w	r2, r2, r0
    for( i = 0; i < n; i++ )
 801e242:	d1f5      	bne.n	801e230 <mbedtls_ssl_parse_finished+0xb0>
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 801e244:	b122      	cbz	r2, 801e250 <mbedtls_ssl_parse_finished+0xd0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e246:	4b17      	ldr	r3, [pc, #92]	; (801e2a4 <mbedtls_ssl_parse_finished+0x124>)
 801e248:	9300      	str	r3, [sp, #0]
 801e24a:	f241 5315 	movw	r3, #5397	; 0x1515
 801e24e:	e7df      	b.n	801e210 <mbedtls_ssl_parse_finished+0x90>
    ssl->verify_data_len = hash_len;
 801e250:	230c      	movs	r3, #12
 801e252:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    memcpy( ssl->peer_verify_data, buf, hash_len );
 801e256:	446b      	add	r3, sp
 801e258:	cb03      	ldmia	r3!, {r0, r1}
 801e25a:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
 801e25e:	6818      	ldr	r0, [r3, #0]
    if( ssl->handshake->resume != 0 )
 801e260:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    memcpy( ssl->peer_verify_data, buf, hash_len );
 801e262:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
 801e266:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    if( ssl->handshake->resume != 0 )
 801e26a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 801e26e:	b183      	cbz	r3, 801e292 <mbedtls_ssl_parse_finished+0x112>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801e270:	6823      	ldr	r3, [r4, #0]
 801e272:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e276:	07db      	lsls	r3, r3, #31
 801e278:	d401      	bmi.n	801e27e <mbedtls_ssl_parse_finished+0xfe>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 801e27a:	230a      	movs	r3, #10
        ssl->state++;
 801e27c:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 801e27e:	4b0c      	ldr	r3, [pc, #48]	; (801e2b0 <mbedtls_ssl_parse_finished+0x130>)
 801e280:	9300      	str	r3, [sp, #0]
 801e282:	4a06      	ldr	r2, [pc, #24]	; (801e29c <mbedtls_ssl_parse_finished+0x11c>)
 801e284:	f241 5333 	movw	r3, #5427	; 0x1533
 801e288:	2102      	movs	r1, #2
 801e28a:	4620      	mov	r0, r4
 801e28c:	f7f2 fc6a 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801e290:	e79c      	b.n	801e1cc <mbedtls_ssl_parse_finished+0x4c>
        ssl->state++;
 801e292:	6863      	ldr	r3, [r4, #4]
 801e294:	3301      	adds	r3, #1
 801e296:	e7f1      	b.n	801e27c <mbedtls_ssl_parse_finished+0xfc>
 801e298:	08032b15 	.word	0x08032b15
 801e29c:	08031f4f 	.word	0x08031f4f
 801e2a0:	08031440 	.word	0x08031440
 801e2a4:	08032b27 	.word	0x08032b27
 801e2a8:	ffff8900 	.word	0xffff8900
 801e2ac:	ffff8180 	.word	0xffff8180
 801e2b0:	08032b3c 	.word	0x08032b3c

0801e2b4 <mbedtls_ssl_session_init>:
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 801e2b4:	2280      	movs	r2, #128	; 0x80
 801e2b6:	2100      	movs	r1, #0
 801e2b8:	f004 b90a 	b.w	80224d0 <memset>

0801e2bc <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
 801e2bc:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 801e2c0:	f361 0383 	bfi	r3, r1, #2, #2
 801e2c4:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
}
 801e2c8:	4770      	bx	lr

0801e2ca <mbedtls_ssl_conf_rng>:
    conf->p_rng      = p_rng;
 801e2ca:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801e2ce:	4770      	bx	lr

0801e2d0 <mbedtls_ssl_conf_dbg>:
    conf->p_dbg      = p_dbg;
 801e2d0:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 801e2d4:	4770      	bx	lr

0801e2d6 <mbedtls_ssl_set_bio>:
    ssl->f_recv         = f_recv;
 801e2d6:	e9c0 2306 	strd	r2, r3, [r0, #24]
    ssl->f_recv_timeout = f_recv_timeout;
 801e2da:	9b00      	ldr	r3, [sp, #0]
    ssl->p_bio          = p_bio;
 801e2dc:	6241      	str	r1, [r0, #36]	; 0x24
    ssl->f_recv_timeout = f_recv_timeout;
 801e2de:	6203      	str	r3, [r0, #32]
}
 801e2e0:	4770      	bx	lr

0801e2e2 <mbedtls_ssl_conf_read_timeout>:
    conf->read_timeout   = timeout;
 801e2e2:	6581      	str	r1, [r0, #88]	; 0x58
}
 801e2e4:	4770      	bx	lr

0801e2e6 <mbedtls_ssl_conf_own_cert>:
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 801e2e6:	3040      	adds	r0, #64	; 0x40
 801e2e8:	f7fd bf62 	b.w	801c1b0 <ssl_append_key_cert>

0801e2ec <mbedtls_ssl_conf_ca_chain>:
    conf->ca_crl     = ca_crl;
 801e2ec:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
 801e2f0:	4770      	bx	lr
	...

0801e2f4 <mbedtls_ssl_set_hostname>:
{
 801e2f4:	b570      	push	{r4, r5, r6, lr}
 801e2f6:	4606      	mov	r6, r0
    if( hostname == NULL )
 801e2f8:	460d      	mov	r5, r1
 801e2fa:	b1b9      	cbz	r1, 801e32c <mbedtls_ssl_set_hostname+0x38>
    hostname_len = strlen( hostname );
 801e2fc:	4608      	mov	r0, r1
 801e2fe:	f7e1 ff71 	bl	80001e4 <strlen>
    if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 801e302:	28ff      	cmp	r0, #255	; 0xff
    hostname_len = strlen( hostname );
 801e304:	4604      	mov	r4, r0
    if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 801e306:	d811      	bhi.n	801e32c <mbedtls_ssl_set_hostname+0x38>
    ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 801e308:	4b0a      	ldr	r3, [pc, #40]	; (801e334 <mbedtls_ssl_set_hostname+0x40>)
 801e30a:	1c41      	adds	r1, r0, #1
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	2001      	movs	r0, #1
 801e310:	4798      	blx	r3
 801e312:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
    if( ssl->hostname == NULL )
 801e316:	b158      	cbz	r0, 801e330 <mbedtls_ssl_set_hostname+0x3c>
    memcpy( ssl->hostname, hostname, hostname_len );
 801e318:	4622      	mov	r2, r4
 801e31a:	4629      	mov	r1, r5
 801e31c:	f004 f8b0 	bl	8022480 <memcpy>
    ssl->hostname[hostname_len] = '\0';
 801e320:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
 801e324:	2300      	movs	r3, #0
 801e326:	5513      	strb	r3, [r2, r4]
    return( 0 );
 801e328:	4618      	mov	r0, r3
}
 801e32a:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e32c:	4802      	ldr	r0, [pc, #8]	; (801e338 <mbedtls_ssl_set_hostname+0x44>)
 801e32e:	e7fc      	b.n	801e32a <mbedtls_ssl_set_hostname+0x36>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801e330:	4802      	ldr	r0, [pc, #8]	; (801e33c <mbedtls_ssl_set_hostname+0x48>)
 801e332:	e7fa      	b.n	801e32a <mbedtls_ssl_set_hostname+0x36>
 801e334:	200005a0 	.word	0x200005a0
 801e338:	ffff8f00 	.word	0xffff8f00
 801e33c:	ffff8100 	.word	0xffff8100

0801e340 <mbedtls_ssl_get_verify_result>:
    if( ssl->session != NULL )
 801e340:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801e342:	b10b      	cbz	r3, 801e348 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session_negotiate->verify_result );
 801e344:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801e346:	4770      	bx	lr
    if( ssl->session_negotiate != NULL )
 801e348:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	d1fa      	bne.n	801e344 <mbedtls_ssl_get_verify_result+0x4>
    return( 0xFFFFFFFF );
 801e34e:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e352:	4770      	bx	lr

0801e354 <mbedtls_ssl_get_record_expansion>:
    const mbedtls_ssl_transform *transform = ssl->transform_out;
 801e354:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 801e356:	b507      	push	{r0, r1, r2, lr}
    if( transform == NULL )
 801e358:	b1d3      	cbz	r3, 801e390 <mbedtls_ssl_get_record_expansion+0x3c>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801e35a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e35c:	b161      	cbz	r1, 801e378 <mbedtls_ssl_get_record_expansion+0x24>
    return ctx->cipher_info->mode;
 801e35e:	784a      	ldrb	r2, [r1, #1]
    switch( mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_enc ) )
 801e360:	2a02      	cmp	r2, #2
 801e362:	d005      	beq.n	801e370 <mbedtls_ssl_get_record_expansion+0x1c>
 801e364:	3a06      	subs	r2, #6
 801e366:	2a02      	cmp	r2, #2
 801e368:	d806      	bhi.n	801e378 <mbedtls_ssl_get_record_expansion+0x24>
            transform_expansion = transform->minlen;
 801e36a:	6898      	ldr	r0, [r3, #8]
    return( (int)( mbedtls_ssl_hdr_len( ssl ) + transform_expansion ) );
 801e36c:	3005      	adds	r0, #5
 801e36e:	e00c      	b.n	801e38a <mbedtls_ssl_get_record_expansion+0x36>
            transform_expansion = transform->maclen
 801e370:	6958      	ldr	r0, [r3, #20]
 801e372:	694b      	ldr	r3, [r1, #20]
 801e374:	4418      	add	r0, r3
            break;
 801e376:	e7f9      	b.n	801e36c <mbedtls_ssl_get_record_expansion+0x18>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801e378:	4b06      	ldr	r3, [pc, #24]	; (801e394 <mbedtls_ssl_get_record_expansion+0x40>)
 801e37a:	9300      	str	r3, [sp, #0]
 801e37c:	4a06      	ldr	r2, [pc, #24]	; (801e398 <mbedtls_ssl_get_record_expansion+0x44>)
 801e37e:	f641 1346 	movw	r3, #6470	; 0x1946
 801e382:	2101      	movs	r1, #1
 801e384:	f7f2 fbee 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801e388:	4804      	ldr	r0, [pc, #16]	; (801e39c <mbedtls_ssl_get_record_expansion+0x48>)
}
 801e38a:	b003      	add	sp, #12
 801e38c:	f85d fb04 	ldr.w	pc, [sp], #4
        return( (int) mbedtls_ssl_hdr_len( ssl ) );
 801e390:	2005      	movs	r0, #5
 801e392:	e7fa      	b.n	801e38a <mbedtls_ssl_get_record_expansion+0x36>
 801e394:	08031a7f 	.word	0x08031a7f
 801e398:	08031f4f 	.word	0x08031f4f
 801e39c:	ffff9400 	.word	0xffff9400

0801e3a0 <mbedtls_ssl_get_max_frag_len>:
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 801e3a0:	6803      	ldr	r3, [r0, #0]
 801e3a2:	4a09      	ldr	r2, [pc, #36]	; (801e3c8 <mbedtls_ssl_get_max_frag_len+0x28>)
 801e3a4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    if( ssl->session_out != NULL &&
 801e3a8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 801e3aa:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801e3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if( ssl->session_out != NULL &&
 801e3b2:	b131      	cbz	r1, 801e3c2 <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 801e3b4:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 801e3b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801e3bc:	4293      	cmp	r3, r2
 801e3be:	bf28      	it	cs
 801e3c0:	4613      	movcs	r3, r2
}
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	4770      	bx	lr
 801e3c6:	bf00      	nop
 801e3c8:	0802d624 	.word	0x0802d624

0801e3cc <mbedtls_ssl_handshake_step>:
    if( ssl == NULL || ssl->conf == NULL )
 801e3cc:	b138      	cbz	r0, 801e3de <mbedtls_ssl_handshake_step+0x12>
 801e3ce:	6803      	ldr	r3, [r0, #0]
 801e3d0:	b12b      	cbz	r3, 801e3de <mbedtls_ssl_handshake_step+0x12>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801e3d2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e3d6:	07db      	lsls	r3, r3, #31
 801e3d8:	d403      	bmi.n	801e3e2 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 801e3da:	f7fc bc51 	b.w	801ac80 <mbedtls_ssl_handshake_client_step>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e3de:	4802      	ldr	r0, [pc, #8]	; (801e3e8 <mbedtls_ssl_handshake_step+0x1c>)
 801e3e0:	4770      	bx	lr
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 801e3e2:	4802      	ldr	r0, [pc, #8]	; (801e3ec <mbedtls_ssl_handshake_step+0x20>)
}
 801e3e4:	4770      	bx	lr
 801e3e6:	bf00      	nop
 801e3e8:	ffff8f00 	.word	0xffff8f00
 801e3ec:	ffff8f80 	.word	0xffff8f80

0801e3f0 <mbedtls_ssl_handshake>:
{
 801e3f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e3f2:	4605      	mov	r5, r0
 801e3f4:	b300      	cbz	r0, 801e438 <mbedtls_ssl_handshake+0x48>
 801e3f6:	6803      	ldr	r3, [r0, #0]
 801e3f8:	b1f3      	cbz	r3, 801e438 <mbedtls_ssl_handshake+0x48>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 801e3fa:	4b10      	ldr	r3, [pc, #64]	; (801e43c <mbedtls_ssl_handshake+0x4c>)
 801e3fc:	9300      	str	r3, [sp, #0]
 801e3fe:	4a10      	ldr	r2, [pc, #64]	; (801e440 <mbedtls_ssl_handshake+0x50>)
 801e400:	f641 139d 	movw	r3, #6557	; 0x199d
 801e404:	2102      	movs	r1, #2
 801e406:	f7f2 fbad 	bl	8010b64 <mbedtls_debug_print_msg>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e40a:	686b      	ldr	r3, [r5, #4]
 801e40c:	2b10      	cmp	r3, #16
 801e40e:	d101      	bne.n	801e414 <mbedtls_ssl_handshake+0x24>
 801e410:	2400      	movs	r4, #0
 801e412:	e005      	b.n	801e420 <mbedtls_ssl_handshake+0x30>
        ret = mbedtls_ssl_handshake_step( ssl );
 801e414:	4628      	mov	r0, r5
 801e416:	f7ff ffd9 	bl	801e3cc <mbedtls_ssl_handshake_step>
        if( ret != 0 )
 801e41a:	4604      	mov	r4, r0
 801e41c:	2800      	cmp	r0, #0
 801e41e:	d0f4      	beq.n	801e40a <mbedtls_ssl_handshake+0x1a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 801e420:	4b08      	ldr	r3, [pc, #32]	; (801e444 <mbedtls_ssl_handshake+0x54>)
 801e422:	9300      	str	r3, [sp, #0]
 801e424:	4a06      	ldr	r2, [pc, #24]	; (801e440 <mbedtls_ssl_handshake+0x50>)
 801e426:	f641 13a7 	movw	r3, #6567	; 0x19a7
 801e42a:	2102      	movs	r1, #2
 801e42c:	4628      	mov	r0, r5
 801e42e:	f7f2 fb99 	bl	8010b64 <mbedtls_debug_print_msg>
}
 801e432:	4620      	mov	r0, r4
 801e434:	b003      	add	sp, #12
 801e436:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e438:	4c03      	ldr	r4, [pc, #12]	; (801e448 <mbedtls_ssl_handshake+0x58>)
 801e43a:	e7fa      	b.n	801e432 <mbedtls_ssl_handshake+0x42>
 801e43c:	08032b4e 	.word	0x08032b4e
 801e440:	08031f4f 	.word	0x08031f4f
 801e444:	08032b5b 	.word	0x08032b5b
 801e448:	ffff8f00 	.word	0xffff8f00

0801e44c <mbedtls_ssl_close_notify>:
{
 801e44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e44e:	4604      	mov	r4, r0
 801e450:	2800      	cmp	r0, #0
 801e452:	d033      	beq.n	801e4bc <mbedtls_ssl_close_notify+0x70>
 801e454:	6803      	ldr	r3, [r0, #0]
 801e456:	b38b      	cbz	r3, 801e4bc <mbedtls_ssl_close_notify+0x70>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
 801e458:	4b19      	ldr	r3, [pc, #100]	; (801e4c0 <mbedtls_ssl_close_notify+0x74>)
 801e45a:	4a1a      	ldr	r2, [pc, #104]	; (801e4c4 <mbedtls_ssl_close_notify+0x78>)
 801e45c:	9300      	str	r3, [sp, #0]
 801e45e:	2102      	movs	r1, #2
 801e460:	f641 4312 	movw	r3, #7186	; 0x1c12
 801e464:	f7f2 fb7e 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->out_left != 0 )
 801e468:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 801e46c:	b12a      	cbz	r2, 801e47a <mbedtls_ssl_close_notify+0x2e>
        return( mbedtls_ssl_flush_output( ssl ) );
 801e46e:	4620      	mov	r0, r4
}
 801e470:	b003      	add	sp, #12
 801e472:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return( mbedtls_ssl_flush_output( ssl ) );
 801e476:	f7fe bc47 	b.w	801cd08 <mbedtls_ssl_flush_output>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801e47a:	6863      	ldr	r3, [r4, #4]
 801e47c:	2b10      	cmp	r3, #16
 801e47e:	d112      	bne.n	801e4a6 <mbedtls_ssl_close_notify+0x5a>
        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 801e480:	2101      	movs	r1, #1
 801e482:	4620      	mov	r0, r4
 801e484:	f7ff f804 	bl	801d490 <mbedtls_ssl_send_alert_message>
 801e488:	4605      	mov	r5, r0
 801e48a:	b160      	cbz	r0, 801e4a6 <mbedtls_ssl_close_notify+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
 801e48c:	4b0e      	ldr	r3, [pc, #56]	; (801e4c8 <mbedtls_ssl_close_notify+0x7c>)
 801e48e:	9001      	str	r0, [sp, #4]
 801e490:	9300      	str	r3, [sp, #0]
 801e492:	4a0c      	ldr	r2, [pc, #48]	; (801e4c4 <mbedtls_ssl_close_notify+0x78>)
 801e494:	f641 431d 	movw	r3, #7197	; 0x1c1d
 801e498:	2101      	movs	r1, #1
 801e49a:	4620      	mov	r0, r4
 801e49c:	f7f2 fb92 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801e4a0:	4628      	mov	r0, r5
 801e4a2:	b003      	add	sp, #12
 801e4a4:	bd30      	pop	{r4, r5, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
 801e4a6:	4b09      	ldr	r3, [pc, #36]	; (801e4cc <mbedtls_ssl_close_notify+0x80>)
 801e4a8:	9300      	str	r3, [sp, #0]
 801e4aa:	4a06      	ldr	r2, [pc, #24]	; (801e4c4 <mbedtls_ssl_close_notify+0x78>)
 801e4ac:	f641 4322 	movw	r3, #7202	; 0x1c22
 801e4b0:	2102      	movs	r1, #2
 801e4b2:	4620      	mov	r0, r4
 801e4b4:	f7f2 fb56 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801e4b8:	2500      	movs	r5, #0
 801e4ba:	e7f1      	b.n	801e4a0 <mbedtls_ssl_close_notify+0x54>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e4bc:	4d04      	ldr	r5, [pc, #16]	; (801e4d0 <mbedtls_ssl_close_notify+0x84>)
 801e4be:	e7ef      	b.n	801e4a0 <mbedtls_ssl_close_notify+0x54>
 801e4c0:	08032b68 	.word	0x08032b68
 801e4c4:	08031f4f 	.word	0x08031f4f
 801e4c8:	08032b7e 	.word	0x08032b7e
 801e4cc:	08032b9d 	.word	0x08032b9d
 801e4d0:	ffff8f00 	.word	0xffff8f00

0801e4d4 <mbedtls_ssl_transform_free>:
{
 801e4d4:	b510      	push	{r4, lr}
    if( transform == NULL )
 801e4d6:	4604      	mov	r4, r0
 801e4d8:	b1a0      	cbz	r0, 801e504 <mbedtls_ssl_transform_free+0x30>
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 801e4da:	3050      	adds	r0, #80	; 0x50
 801e4dc:	f7f1 fe2e 	bl	801013c <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 801e4e0:	f104 0090 	add.w	r0, r4, #144	; 0x90
 801e4e4:	f7f1 fe2a 	bl	801013c <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
 801e4e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801e4ec:	f7f6 fa38 	bl	8014960 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 801e4f0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801e4f4:	f7f6 fa34 	bl	8014960 <mbedtls_md_free>
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 801e4f8:	4620      	mov	r0, r4
 801e4fa:	21d0      	movs	r1, #208	; 0xd0
}
 801e4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 801e500:	f7fd be4e 	b.w	801c1a0 <mbedtls_zeroize>
}
 801e504:	bd10      	pop	{r4, pc}
	...

0801e508 <mbedtls_ssl_handshake_free>:
{
 801e508:	b570      	push	{r4, r5, r6, lr}
    if( handshake == NULL )
 801e50a:	4604      	mov	r4, r0
 801e50c:	b1f0      	cbz	r0, 801e54c <mbedtls_ssl_handshake_free+0x44>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 801e50e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 801e512:	f7fa fa78 	bl	8018a06 <mbedtls_sha256_free>
    mbedtls_free( (void *) handshake->curves );
 801e516:	4e0e      	ldr	r6, [pc, #56]	; (801e550 <mbedtls_ssl_handshake_free+0x48>)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 801e518:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801e51c:	f7fa ff05 	bl	801932a <mbedtls_sha512_free>
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
 801e520:	1d20      	adds	r0, r4, #4
 801e522:	f7f2 fd6e 	bl	8011002 <mbedtls_ecdh_free>
    mbedtls_free( (void *) handshake->curves );
 801e526:	6833      	ldr	r3, [r6, #0]
 801e528:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 801e52c:	4798      	blx	r3
    if( handshake->sni_key_cert != NULL )
 801e52e:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
 801e532:	b125      	cbz	r5, 801e53e <mbedtls_ssl_handshake_free+0x36>
            next = cur->next;
 801e534:	4628      	mov	r0, r5
            mbedtls_free( cur );
 801e536:	6833      	ldr	r3, [r6, #0]
            next = cur->next;
 801e538:	68ad      	ldr	r5, [r5, #8]
            mbedtls_free( cur );
 801e53a:	4798      	blx	r3
        while( cur != NULL )
 801e53c:	e7f9      	b.n	801e532 <mbedtls_ssl_handshake_free+0x2a>
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 801e53e:	4620      	mov	r0, r4
 801e540:	f44f 7152 	mov.w	r1, #840	; 0x348
}
 801e544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 801e548:	f7fd be2a 	b.w	801c1a0 <mbedtls_zeroize>
}
 801e54c:	bd70      	pop	{r4, r5, r6, pc}
 801e54e:	bf00      	nop
 801e550:	200005a4 	.word	0x200005a4

0801e554 <mbedtls_ssl_session_free>:
{
 801e554:	b538      	push	{r3, r4, r5, lr}
    if( session == NULL )
 801e556:	4604      	mov	r4, r0
 801e558:	b180      	cbz	r0, 801e57c <mbedtls_ssl_session_free+0x28>
    if( session->peer_cert != NULL )
 801e55a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e55c:	4d08      	ldr	r5, [pc, #32]	; (801e580 <mbedtls_ssl_session_free+0x2c>)
 801e55e:	b120      	cbz	r0, 801e56a <mbedtls_ssl_session_free+0x16>
        mbedtls_x509_crt_free( session->peer_cert );
 801e560:	f002 fe94 	bl	802128c <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 801e564:	682b      	ldr	r3, [r5, #0]
 801e566:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801e568:	4798      	blx	r3
    mbedtls_free( session->ticket );
 801e56a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801e56c:	682b      	ldr	r3, [r5, #0]
 801e56e:	4798      	blx	r3
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 801e570:	4620      	mov	r0, r4
 801e572:	2180      	movs	r1, #128	; 0x80
}
 801e574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 801e578:	f7fd be12 	b.w	801c1a0 <mbedtls_zeroize>
}
 801e57c:	bd38      	pop	{r3, r4, r5, pc}
 801e57e:	bf00      	nop
 801e580:	200005a4 	.word	0x200005a4

0801e584 <mbedtls_ssl_handshake_wrapup>:
{
 801e584:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int resume = ssl->handshake->resume;
 801e586:	6b83      	ldr	r3, [r0, #56]	; 0x38
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e588:	4a31      	ldr	r2, [pc, #196]	; (801e650 <mbedtls_ssl_handshake_wrapup+0xcc>)
    int resume = ssl->handshake->resume;
 801e58a:	f8d3 6330 	ldr.w	r6, [r3, #816]	; 0x330
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e58e:	4b31      	ldr	r3, [pc, #196]	; (801e654 <mbedtls_ssl_handshake_wrapup+0xd0>)
 801e590:	9300      	str	r3, [sp, #0]
{
 801e592:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e594:	f241 4333 	movw	r3, #5171	; 0x1433
 801e598:	2103      	movs	r1, #3
 801e59a:	f7f2 fae3 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e59e:	68a3      	ldr	r3, [r4, #8]
    if( ssl->session )
 801e5a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e5a2:	4d2d      	ldr	r5, [pc, #180]	; (801e658 <mbedtls_ssl_handshake_wrapup+0xd4>)
    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e5a4:	2b01      	cmp	r3, #1
        ssl->renego_records_seen = 0;
 801e5a6:	bf02      	ittt	eq
 801e5a8:	2202      	moveq	r2, #2
 801e5aa:	2300      	moveq	r3, #0
 801e5ac:	e9c4 2302 	strdeq	r2, r3, [r4, #8]
    if( ssl->session )
 801e5b0:	b120      	cbz	r0, 801e5bc <mbedtls_ssl_handshake_wrapup+0x38>
        mbedtls_ssl_session_free( ssl->session );
 801e5b2:	f7ff ffcf 	bl	801e554 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 801e5b6:	682b      	ldr	r3, [r5, #0]
 801e5b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e5ba:	4798      	blx	r3
    if( ssl->conf->f_set_cache != NULL &&
 801e5bc:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
 801e5be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e5c0:	6321      	str	r1, [r4, #48]	; 0x30
    ssl->session_negotiate = NULL;
 801e5c2:	2300      	movs	r3, #0
 801e5c4:	6363      	str	r3, [r4, #52]	; 0x34
    if( ssl->conf->f_set_cache != NULL &&
 801e5c6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801e5c8:	b173      	cbz	r3, 801e5e8 <mbedtls_ssl_handshake_wrapup+0x64>
 801e5ca:	6908      	ldr	r0, [r1, #16]
 801e5cc:	b160      	cbz	r0, 801e5e8 <mbedtls_ssl_handshake_wrapup+0x64>
        ssl->session->id_len != 0 &&
 801e5ce:	b95e      	cbnz	r6, 801e5e8 <mbedtls_ssl_handshake_wrapup+0x64>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 801e5d0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 801e5d2:	4798      	blx	r3
 801e5d4:	b140      	cbz	r0, 801e5e8 <mbedtls_ssl_handshake_wrapup+0x64>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 801e5d6:	4b21      	ldr	r3, [pc, #132]	; (801e65c <mbedtls_ssl_handshake_wrapup+0xd8>)
 801e5d8:	9300      	str	r3, [sp, #0]
 801e5da:	4a1d      	ldr	r2, [pc, #116]	; (801e650 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e5dc:	f241 4356 	movw	r3, #5206	; 0x1456
 801e5e0:	2101      	movs	r1, #1
 801e5e2:	4620      	mov	r0, r4
 801e5e4:	f7f2 fabe 	bl	8010b64 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 801e5e8:	4b1d      	ldr	r3, [pc, #116]	; (801e660 <mbedtls_ssl_handshake_wrapup+0xdc>)
 801e5ea:	4a19      	ldr	r2, [pc, #100]	; (801e650 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e5ec:	9300      	str	r3, [sp, #0]
 801e5ee:	2103      	movs	r1, #3
 801e5f0:	f241 4318 	movw	r3, #5144	; 0x1418
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	f7f2 fab5 	bl	8010b64 <mbedtls_debug_print_msg>
    mbedtls_ssl_handshake_free( ssl->handshake );
 801e5fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e5fc:	f7ff ff84 	bl	801e508 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 801e600:	682b      	ldr	r3, [r5, #0]
 801e602:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e604:	4798      	blx	r3
    if( ssl->transform )
 801e606:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ssl->handshake = NULL;
 801e608:	2300      	movs	r3, #0
 801e60a:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ssl->transform )
 801e60c:	b120      	cbz	r0, 801e618 <mbedtls_ssl_handshake_wrapup+0x94>
        mbedtls_ssl_transform_free( ssl->transform );
 801e60e:	f7ff ff61 	bl	801e4d4 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 801e612:	682b      	ldr	r3, [r5, #0]
 801e614:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801e616:	4798      	blx	r3
    ssl->transform = ssl->transform_negotiate;
 801e618:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e61a:	6463      	str	r3, [r4, #68]	; 0x44
    ssl->transform_negotiate = NULL;
 801e61c:	2300      	movs	r3, #0
 801e61e:	64a3      	str	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 801e620:	4b10      	ldr	r3, [pc, #64]	; (801e664 <mbedtls_ssl_handshake_wrapup+0xe0>)
 801e622:	9300      	str	r3, [sp, #0]
 801e624:	4620      	mov	r0, r4
 801e626:	4a0a      	ldr	r2, [pc, #40]	; (801e650 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e628:	f241 432c 	movw	r3, #5164	; 0x142c
 801e62c:	2103      	movs	r1, #3
 801e62e:	f7f2 fa99 	bl	8010b64 <mbedtls_debug_print_msg>
    ssl->state++;
 801e632:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 801e634:	4a06      	ldr	r2, [pc, #24]	; (801e650 <mbedtls_ssl_handshake_wrapup+0xcc>)
    ssl->state++;
 801e636:	3301      	adds	r3, #1
 801e638:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 801e63a:	4b0b      	ldr	r3, [pc, #44]	; (801e668 <mbedtls_ssl_handshake_wrapup+0xe4>)
 801e63c:	9300      	str	r3, [sp, #0]
 801e63e:	2103      	movs	r1, #3
 801e640:	f241 436a 	movw	r3, #5226	; 0x146a
 801e644:	4620      	mov	r0, r4
 801e646:	f7f2 fa8d 	bl	8010b64 <mbedtls_debug_print_msg>
}
 801e64a:	b002      	add	sp, #8
 801e64c:	bd70      	pop	{r4, r5, r6, pc}
 801e64e:	bf00      	nop
 801e650:	08031f4f 	.word	0x08031f4f
 801e654:	08032bb3 	.word	0x08032bb3
 801e658:	200005a4 	.word	0x200005a4
 801e65c:	08032bc7 	.word	0x08032bc7
 801e660:	08032be3 	.word	0x08032be3
 801e664:	08032c03 	.word	0x08032c03
 801e668:	08032c23 	.word	0x08032c23

0801e66c <ssl_handshake_init>:
{
 801e66c:	b530      	push	{r4, r5, lr}
 801e66e:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
 801e670:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
 801e672:	b085      	sub	sp, #20
    if( ssl->transform_negotiate )
 801e674:	b108      	cbz	r0, 801e67a <ssl_handshake_init+0xe>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 801e676:	f7ff ff2d 	bl	801e4d4 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 801e67a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e67c:	b108      	cbz	r0, 801e682 <ssl_handshake_init+0x16>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 801e67e:	f7ff ff69 	bl	801e554 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 801e682:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e684:	b108      	cbz	r0, 801e68a <ssl_handshake_init+0x1e>
        mbedtls_ssl_handshake_free( ssl->handshake );
 801e686:	f7ff ff3f 	bl	801e508 <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
 801e68a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e68c:	b92b      	cbnz	r3, 801e69a <ssl_handshake_init+0x2e>
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 801e68e:	4b3c      	ldr	r3, [pc, #240]	; (801e780 <ssl_handshake_init+0x114>)
 801e690:	21d0      	movs	r1, #208	; 0xd0
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	2001      	movs	r0, #1
 801e696:	4798      	blx	r3
 801e698:	64a0      	str	r0, [r4, #72]	; 0x48
    if( ssl->session_negotiate == NULL )
 801e69a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e69c:	b92b      	cbnz	r3, 801e6aa <ssl_handshake_init+0x3e>
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 801e69e:	4b38      	ldr	r3, [pc, #224]	; (801e780 <ssl_handshake_init+0x114>)
 801e6a0:	2180      	movs	r1, #128	; 0x80
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	2001      	movs	r0, #1
 801e6a6:	4798      	blx	r3
 801e6a8:	6360      	str	r0, [r4, #52]	; 0x34
    if( ssl->handshake == NULL )
 801e6aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e6ac:	b1db      	cbz	r3, 801e6e6 <ssl_handshake_init+0x7a>
    if( ssl->handshake == NULL ||
 801e6ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e6b0:	bb1b      	cbnz	r3, 801e6fa <ssl_handshake_init+0x8e>
        mbedtls_free( ssl->handshake );
 801e6b2:	4d34      	ldr	r5, [pc, #208]	; (801e784 <ssl_handshake_init+0x118>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 801e6b4:	4b34      	ldr	r3, [pc, #208]	; (801e788 <ssl_handshake_init+0x11c>)
 801e6b6:	4a35      	ldr	r2, [pc, #212]	; (801e78c <ssl_handshake_init+0x120>)
 801e6b8:	9300      	str	r3, [sp, #0]
 801e6ba:	2101      	movs	r1, #1
 801e6bc:	f241 539a 	movw	r3, #5530	; 0x159a
 801e6c0:	4620      	mov	r0, r4
 801e6c2:	f7f2 fa4f 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_free( ssl->handshake );
 801e6c6:	682b      	ldr	r3, [r5, #0]
 801e6c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e6ca:	4798      	blx	r3
        mbedtls_free( ssl->transform_negotiate );
 801e6cc:	682b      	ldr	r3, [r5, #0]
 801e6ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801e6d0:	4798      	blx	r3
        mbedtls_free( ssl->session_negotiate );
 801e6d2:	682b      	ldr	r3, [r5, #0]
 801e6d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e6d6:	4798      	blx	r3
        ssl->handshake = NULL;
 801e6d8:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801e6da:	482d      	ldr	r0, [pc, #180]	; (801e790 <ssl_handshake_init+0x124>)
        ssl->handshake = NULL;
 801e6dc:	63a3      	str	r3, [r4, #56]	; 0x38
        ssl->transform_negotiate = NULL;
 801e6de:	64a3      	str	r3, [r4, #72]	; 0x48
        ssl->session_negotiate = NULL;
 801e6e0:	6363      	str	r3, [r4, #52]	; 0x34
}
 801e6e2:	b005      	add	sp, #20
 801e6e4:	bd30      	pop	{r4, r5, pc}
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 801e6e6:	4b26      	ldr	r3, [pc, #152]	; (801e780 <ssl_handshake_init+0x114>)
 801e6e8:	f44f 7152 	mov.w	r1, #840	; 0x348
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	2001      	movs	r0, #1
 801e6f0:	4798      	blx	r3
 801e6f2:	63a0      	str	r0, [r4, #56]	; 0x38
    if( ssl->handshake == NULL ||
 801e6f4:	2800      	cmp	r0, #0
 801e6f6:	d1da      	bne.n	801e6ae <ssl_handshake_init+0x42>
 801e6f8:	e7db      	b.n	801e6b2 <ssl_handshake_init+0x46>
        ssl->session_negotiate == NULL )
 801e6fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ssl->transform_negotiate == NULL ||
 801e6fc:	2800      	cmp	r0, #0
 801e6fe:	d0d8      	beq.n	801e6b2 <ssl_handshake_init+0x46>
    mbedtls_ssl_session_init( ssl->session_negotiate );
 801e700:	f7ff fdd8 	bl	801e2b4 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 801e704:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 801e706:	22d0      	movs	r2, #208	; 0xd0
 801e708:	2100      	movs	r1, #0
 801e70a:	4628      	mov	r0, r5
 801e70c:	f003 fee0 	bl	80224d0 <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 801e710:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801e714:	f7f1 fd0e 	bl	8010134 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 801e718:	f105 0090 	add.w	r0, r5, #144	; 0x90
 801e71c:	f7f1 fd0a 	bl	8010134 <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
 801e720:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801e724:	f7f6 f916 	bl	8014954 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 801e728:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801e72c:	f7f6 f912 	bl	8014954 <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
 801e730:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 801e732:	f44f 7252 	mov.w	r2, #840	; 0x348
 801e736:	2100      	movs	r1, #0
 801e738:	4620      	mov	r0, r4
 801e73a:	f003 fec9 	bl	80224d0 <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 801e73e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 801e742:	9003      	str	r0, [sp, #12]
 801e744:	f7fa f95b 	bl	80189fe <mbedtls_sha256_init>
    mbedtls_sha256_starts( &handshake->fin_sha256, 0 );
 801e748:	2100      	movs	r1, #0
 801e74a:	9803      	ldr	r0, [sp, #12]
 801e74c:	f7fa f96a 	bl	8018a24 <mbedtls_sha256_starts>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 801e750:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801e754:	9003      	str	r0, [sp, #12]
 801e756:	f7fa fde4 	bl	8019322 <mbedtls_sha512_init>
    mbedtls_sha512_starts( &handshake->fin_sha512, 1 );
 801e75a:	9803      	ldr	r0, [sp, #12]
 801e75c:	2101      	movs	r1, #1
 801e75e:	f7fa fdf3 	bl	8019348 <mbedtls_sha512_starts>
    set->rsa   = md_alg;
 801e762:	2500      	movs	r5, #0
    handshake->update_checksum = ssl_update_checksum_start;
 801e764:	4b0b      	ldr	r3, [pc, #44]	; (801e794 <ssl_handshake_init+0x128>)
 801e766:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 801e76a:	1d20      	adds	r0, r4, #4
    set->rsa   = md_alg;
 801e76c:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
 801e76e:	7065      	strb	r5, [r4, #1]
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 801e770:	f7f2 fc42 	bl	8010ff8 <mbedtls_ecdh_init>
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 801e774:	2303      	movs	r3, #3
 801e776:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    return( 0 );
 801e77a:	4628      	mov	r0, r5
}
 801e77c:	e7b1      	b.n	801e6e2 <ssl_handshake_init+0x76>
 801e77e:	bf00      	nop
 801e780:	200005a0 	.word	0x200005a0
 801e784:	200005a4 	.word	0x200005a4
 801e788:	08032c37 	.word	0x08032c37
 801e78c:	08031f4f 	.word	0x08031f4f
 801e790:	ffff8100 	.word	0xffff8100
 801e794:	0801c615 	.word	0x0801c615

0801e798 <mbedtls_ssl_setup>:
{
 801e798:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e79a:	4d22      	ldr	r5, [pc, #136]	; (801e824 <mbedtls_ssl_setup+0x8c>)
    ssl->conf = conf;
 801e79c:	6001      	str	r1, [r0, #0]
{
 801e79e:	4604      	mov	r4, r0
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e7a0:	682b      	ldr	r3, [r5, #0]
 801e7a2:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801e7a6:	2001      	movs	r0, #1
 801e7a8:	4798      	blx	r3
 801e7aa:	65a0      	str	r0, [r4, #88]	; 0x58
 801e7ac:	b328      	cbz	r0, 801e7fa <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
 801e7ae:	682b      	ldr	r3, [r5, #0]
 801e7b0:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801e7b4:	2001      	movs	r0, #1
 801e7b6:	4798      	blx	r3
 801e7b8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e7bc:	b1e8      	cbz	r0, 801e7fa <mbedtls_ssl_setup+0x62>
        ssl->out_hdr = ssl->out_buf +  8;
 801e7be:	f100 0308 	add.w	r3, r0, #8
 801e7c2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        ssl->out_len = ssl->out_buf + 11;
 801e7c6:	f100 030b 	add.w	r3, r0, #11
 801e7ca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        ssl->in_ctr = ssl->in_buf;
 801e7ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
        ssl->out_ctr = ssl->out_buf;
 801e7d0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
        ssl->in_hdr = ssl->in_buf +  8;
 801e7d4:	f103 0208 	add.w	r2, r3, #8
        ssl->out_iv  = ssl->out_buf + 13;
 801e7d8:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;
 801e7da:	e9c4 0027 	strd	r0, r0, [r4, #156]	; 0x9c
        ssl->in_ctr = ssl->in_buf;
 801e7de:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_hdr = ssl->in_buf +  8;
 801e7e0:	6622      	str	r2, [r4, #96]	; 0x60
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e7e2:	4620      	mov	r0, r4
        ssl->in_len = ssl->in_buf + 11;
 801e7e4:	f103 020b 	add.w	r2, r3, #11
        ssl->in_iv  = ssl->in_buf + 13;
 801e7e8:	330d      	adds	r3, #13
        ssl->in_msg = ssl->in_buf + 13;
 801e7ea:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
        ssl->in_len = ssl->in_buf + 11;
 801e7ee:	6662      	str	r2, [r4, #100]	; 0x64
}
 801e7f0:	b003      	add	sp, #12
 801e7f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e7f6:	f7ff bf39 	b.w	801e66c <ssl_handshake_init>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
 801e7fa:	f241 43d5 	movw	r3, #5333	; 0x14d5
 801e7fe:	9301      	str	r3, [sp, #4]
 801e800:	4b09      	ldr	r3, [pc, #36]	; (801e828 <mbedtls_ssl_setup+0x90>)
 801e802:	4a0a      	ldr	r2, [pc, #40]	; (801e82c <mbedtls_ssl_setup+0x94>)
 801e804:	9300      	str	r3, [sp, #0]
 801e806:	2101      	movs	r1, #1
 801e808:	4620      	mov	r0, r4
 801e80a:	f241 53f3 	movw	r3, #5619	; 0x15f3
 801e80e:	f7f2 f9a9 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_free( ssl->in_buf );
 801e812:	4b07      	ldr	r3, [pc, #28]	; (801e830 <mbedtls_ssl_setup+0x98>)
 801e814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e816:	681b      	ldr	r3, [r3, #0]
 801e818:	4798      	blx	r3
}
 801e81a:	4806      	ldr	r0, [pc, #24]	; (801e834 <mbedtls_ssl_setup+0x9c>)
        ssl->in_buf = NULL;
 801e81c:	2300      	movs	r3, #0
 801e81e:	65a3      	str	r3, [r4, #88]	; 0x58
}
 801e820:	b003      	add	sp, #12
 801e822:	bd30      	pop	{r4, r5, pc}
 801e824:	200005a0 	.word	0x200005a0
 801e828:	08032c5a 	.word	0x08032c5a
 801e82c:	08031f4f 	.word	0x08031f4f
 801e830:	200005a4 	.word	0x200005a4
 801e834:	ffff8100 	.word	0xffff8100

0801e838 <ssl_start_renegotiation>:
{
 801e838:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
 801e83a:	4b16      	ldr	r3, [pc, #88]	; (801e894 <ssl_start_renegotiation+0x5c>)
 801e83c:	4a16      	ldr	r2, [pc, #88]	; (801e898 <ssl_start_renegotiation+0x60>)
 801e83e:	9300      	str	r3, [sp, #0]
{
 801e840:	4605      	mov	r5, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
 801e842:	f641 13d4 	movw	r3, #6612	; 0x19d4
 801e846:	2102      	movs	r1, #2
 801e848:	f7f2 f98c 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e84c:	4628      	mov	r0, r5
 801e84e:	f7ff ff0d 	bl	801e66c <ssl_handshake_init>
 801e852:	4604      	mov	r4, r0
 801e854:	b988      	cbnz	r0, 801e87a <ssl_start_renegotiation+0x42>
    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
 801e856:	2601      	movs	r6, #1
    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
 801e858:	6068      	str	r0, [r5, #4]
    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
 801e85a:	60ae      	str	r6, [r5, #8]
    if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e85c:	4628      	mov	r0, r5
 801e85e:	f7ff fdc7 	bl	801e3f0 <mbedtls_ssl_handshake>
 801e862:	4604      	mov	r4, r0
 801e864:	b160      	cbz	r0, 801e880 <ssl_start_renegotiation+0x48>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e866:	4b0d      	ldr	r3, [pc, #52]	; (801e89c <ssl_start_renegotiation+0x64>)
 801e868:	9001      	str	r0, [sp, #4]
 801e86a:	9300      	str	r3, [sp, #0]
 801e86c:	4a0a      	ldr	r2, [pc, #40]	; (801e898 <ssl_start_renegotiation+0x60>)
 801e86e:	f641 13eb 	movw	r3, #6635	; 0x19eb
 801e872:	4631      	mov	r1, r6
 801e874:	4628      	mov	r0, r5
 801e876:	f7f2 f9a5 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801e87a:	4620      	mov	r0, r4
 801e87c:	b002      	add	sp, #8
 801e87e:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= renegotiate" ) );
 801e880:	4b07      	ldr	r3, [pc, #28]	; (801e8a0 <ssl_start_renegotiation+0x68>)
 801e882:	9300      	str	r3, [sp, #0]
 801e884:	4a04      	ldr	r2, [pc, #16]	; (801e898 <ssl_start_renegotiation+0x60>)
 801e886:	f641 13ef 	movw	r3, #6639	; 0x19ef
 801e88a:	2102      	movs	r1, #2
 801e88c:	4628      	mov	r0, r5
 801e88e:	f7f2 f969 	bl	8010b64 <mbedtls_debug_print_msg>
    return( 0 );
 801e892:	e7f2      	b.n	801e87a <ssl_start_renegotiation+0x42>
 801e894:	08032c71 	.word	0x08032c71
 801e898:	08031f4f 	.word	0x08031f4f
 801e89c:	08032c80 	.word	0x08032c80
 801e8a0:	08032c96 	.word	0x08032c96

0801e8a4 <mbedtls_ssl_renegotiate>:
{
 801e8a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e8a6:	4605      	mov	r5, r0
 801e8a8:	b318      	cbz	r0, 801e8f2 <mbedtls_ssl_renegotiate+0x4e>
 801e8aa:	6803      	ldr	r3, [r0, #0]
 801e8ac:	b30b      	cbz	r3, 801e8f2 <mbedtls_ssl_renegotiate+0x4e>
    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e8ae:	6886      	ldr	r6, [r0, #8]
 801e8b0:	2e01      	cmp	r6, #1
 801e8b2:	d013      	beq.n	801e8dc <mbedtls_ssl_renegotiate+0x38>
        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e8b4:	6843      	ldr	r3, [r0, #4]
 801e8b6:	2b10      	cmp	r3, #16
 801e8b8:	d11b      	bne.n	801e8f2 <mbedtls_ssl_renegotiate+0x4e>
        if( ( ret = ssl_start_renegotiation( ssl ) ) != 0 )
 801e8ba:	f7ff ffbd 	bl	801e838 <ssl_start_renegotiation>
 801e8be:	4604      	mov	r4, r0
 801e8c0:	b148      	cbz	r0, 801e8d6 <mbedtls_ssl_renegotiate+0x32>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
 801e8c2:	4b0d      	ldr	r3, [pc, #52]	; (801e8f8 <mbedtls_ssl_renegotiate+0x54>)
 801e8c4:	9300      	str	r3, [sp, #0]
 801e8c6:	9001      	str	r0, [sp, #4]
 801e8c8:	f641 231c 	movw	r3, #6684	; 0x1a1c
 801e8cc:	4a0b      	ldr	r2, [pc, #44]	; (801e8fc <mbedtls_ssl_renegotiate+0x58>)
 801e8ce:	2101      	movs	r1, #1
 801e8d0:	4628      	mov	r0, r5
 801e8d2:	f7f2 f977 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801e8d6:	4620      	mov	r0, r4
 801e8d8:	b002      	add	sp, #8
 801e8da:	bd70      	pop	{r4, r5, r6, pc}
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e8dc:	f7ff fd88 	bl	801e3f0 <mbedtls_ssl_handshake>
 801e8e0:	4604      	mov	r4, r0
 801e8e2:	2800      	cmp	r0, #0
 801e8e4:	d0f7      	beq.n	801e8d6 <mbedtls_ssl_renegotiate+0x32>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e8e6:	4b06      	ldr	r3, [pc, #24]	; (801e900 <mbedtls_ssl_renegotiate+0x5c>)
 801e8e8:	9300      	str	r3, [sp, #0]
 801e8ea:	9001      	str	r0, [sp, #4]
 801e8ec:	f641 2324 	movw	r3, #6692	; 0x1a24
 801e8f0:	e7ec      	b.n	801e8cc <mbedtls_ssl_renegotiate+0x28>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e8f2:	4c04      	ldr	r4, [pc, #16]	; (801e904 <mbedtls_ssl_renegotiate+0x60>)
 801e8f4:	e7ef      	b.n	801e8d6 <mbedtls_ssl_renegotiate+0x32>
 801e8f6:	bf00      	nop
 801e8f8:	08032ca5 	.word	0x08032ca5
 801e8fc:	08031f4f 	.word	0x08031f4f
 801e900:	08032c80 	.word	0x08032c80
 801e904:	ffff8f00 	.word	0xffff8f00

0801e908 <ssl_check_ctr_renegotiate>:
{
 801e908:	b530      	push	{r4, r5, lr}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
 801e90a:	6843      	ldr	r3, [r0, #4]
 801e90c:	2b10      	cmp	r3, #16
{
 801e90e:	b085      	sub	sp, #20
 801e910:	4604      	mov	r4, r0
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
 801e912:	d127      	bne.n	801e964 <ssl_check_ctr_renegotiate+0x5c>
 801e914:	6883      	ldr	r3, [r0, #8]
 801e916:	2b03      	cmp	r3, #3
 801e918:	d024      	beq.n	801e964 <ssl_check_ctr_renegotiate+0x5c>
        ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED )
 801e91a:	6801      	ldr	r1, [r0, #0]
 801e91c:	f891 306d 	ldrb.w	r3, [r1, #109]	; 0x6d
        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING ||
 801e920:	075b      	lsls	r3, r3, #29
 801e922:	d51f      	bpl.n	801e964 <ssl_check_ctr_renegotiate+0x5c>
                        ssl->conf->renego_period + ep_len, 8 - ep_len );
 801e924:	3160      	adds	r1, #96	; 0x60
    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
 801e926:	2208      	movs	r2, #8
 801e928:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e92a:	9103      	str	r1, [sp, #12]
 801e92c:	f003 fd9a 	bl	8022464 <memcmp>
    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,
 801e930:	9903      	ldr	r1, [sp, #12]
    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
 801e932:	4605      	mov	r5, r0
    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,
 801e934:	2208      	movs	r2, #8
 801e936:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801e93a:	f003 fd93 	bl	8022464 <memcmp>
    if( in_ctr_cmp <= 0 && out_ctr_cmp <= 0 )
 801e93e:	2d00      	cmp	r5, #0
 801e940:	dc01      	bgt.n	801e946 <ssl_check_ctr_renegotiate+0x3e>
 801e942:	2800      	cmp	r0, #0
 801e944:	dd0e      	ble.n	801e964 <ssl_check_ctr_renegotiate+0x5c>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "record counter limit reached: renegotiate" ) );
 801e946:	4b09      	ldr	r3, [pc, #36]	; (801e96c <ssl_check_ctr_renegotiate+0x64>)
 801e948:	9300      	str	r3, [sp, #0]
 801e94a:	4620      	mov	r0, r4
 801e94c:	4a08      	ldr	r2, [pc, #32]	; (801e970 <ssl_check_ctr_renegotiate+0x68>)
 801e94e:	f641 2347 	movw	r3, #6727	; 0x1a47
 801e952:	2101      	movs	r1, #1
 801e954:	f7f2 f906 	bl	8010b64 <mbedtls_debug_print_msg>
    return( mbedtls_ssl_renegotiate( ssl ) );
 801e958:	4620      	mov	r0, r4
}
 801e95a:	b005      	add	sp, #20
 801e95c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return( mbedtls_ssl_renegotiate( ssl ) );
 801e960:	f7ff bfa0 	b.w	801e8a4 <mbedtls_ssl_renegotiate>
}
 801e964:	2000      	movs	r0, #0
 801e966:	b005      	add	sp, #20
 801e968:	bd30      	pop	{r4, r5, pc}
 801e96a:	bf00      	nop
 801e96c:	08032cbd 	.word	0x08032cbd
 801e970:	08031f4f 	.word	0x08031f4f

0801e974 <mbedtls_ssl_write>:
{
 801e974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 801e976:	4b36      	ldr	r3, [pc, #216]	; (801ea50 <mbedtls_ssl_write+0xdc>)
 801e978:	9300      	str	r3, [sp, #0]
{
 801e97a:	4606      	mov	r6, r0
 801e97c:	460f      	mov	r7, r1
 801e97e:	4615      	mov	r5, r2
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 801e980:	f641 33e7 	movw	r3, #7143	; 0x1be7
 801e984:	4a33      	ldr	r2, [pc, #204]	; (801ea54 <mbedtls_ssl_write+0xe0>)
 801e986:	2102      	movs	r1, #2
 801e988:	f7f2 f8ec 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl == NULL || ssl->conf == NULL )
 801e98c:	2e00      	cmp	r6, #0
 801e98e:	d05c      	beq.n	801ea4a <mbedtls_ssl_write+0xd6>
 801e990:	6833      	ldr	r3, [r6, #0]
 801e992:	2b00      	cmp	r3, #0
 801e994:	d059      	beq.n	801ea4a <mbedtls_ssl_write+0xd6>
    if( ( ret = ssl_check_ctr_renegotiate( ssl ) ) != 0 )
 801e996:	4630      	mov	r0, r6
 801e998:	f7ff ffb6 	bl	801e908 <ssl_check_ctr_renegotiate>
 801e99c:	4604      	mov	r4, r0
 801e99e:	b160      	cbz	r0, 801e9ba <mbedtls_ssl_write+0x46>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
 801e9a0:	4b2d      	ldr	r3, [pc, #180]	; (801ea58 <mbedtls_ssl_write+0xe4>)
 801e9a2:	9300      	str	r3, [sp, #0]
 801e9a4:	9001      	str	r0, [sp, #4]
 801e9a6:	f641 33ef 	movw	r3, #7151	; 0x1bef
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e9aa:	4a2a      	ldr	r2, [pc, #168]	; (801ea54 <mbedtls_ssl_write+0xe0>)
 801e9ac:	2101      	movs	r1, #1
 801e9ae:	4630      	mov	r0, r6
 801e9b0:	f7f2 f908 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801e9b4:	4620      	mov	r0, r4
 801e9b6:	b003      	add	sp, #12
 801e9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e9ba:	6873      	ldr	r3, [r6, #4]
 801e9bc:	2b10      	cmp	r3, #16
 801e9be:	d00a      	beq.n	801e9d6 <mbedtls_ssl_write+0x62>
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e9c0:	4630      	mov	r0, r6
 801e9c2:	f7ff fd15 	bl	801e3f0 <mbedtls_ssl_handshake>
 801e9c6:	4604      	mov	r4, r0
 801e9c8:	b128      	cbz	r0, 801e9d6 <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e9ca:	4b24      	ldr	r3, [pc, #144]	; (801ea5c <mbedtls_ssl_write+0xe8>)
 801e9cc:	9300      	str	r3, [sp, #0]
 801e9ce:	9001      	str	r0, [sp, #4]
 801e9d0:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 801e9d4:	e7e9      	b.n	801e9aa <mbedtls_ssl_write+0x36>
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 801e9d6:	4630      	mov	r0, r6
 801e9d8:	f7ff fce2 	bl	801e3a0 <mbedtls_ssl_get_max_frag_len>
    if( ssl->out_left != 0 )
 801e9dc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801e9e0:	4285      	cmp	r5, r0
 801e9e2:	bf28      	it	cs
 801e9e4:	4605      	movcs	r5, r0
 801e9e6:	b1c3      	cbz	r3, 801ea1a <mbedtls_ssl_write+0xa6>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801e9e8:	4630      	mov	r0, r6
 801e9ea:	f7fe f98d 	bl	801cd08 <mbedtls_ssl_flush_output>
 801e9ee:	4604      	mov	r4, r0
 801e9f0:	b348      	cbz	r0, 801ea46 <mbedtls_ssl_write+0xd2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801e9f2:	4b1b      	ldr	r3, [pc, #108]	; (801ea60 <mbedtls_ssl_write+0xec>)
 801e9f4:	9300      	str	r3, [sp, #0]
 801e9f6:	9001      	str	r0, [sp, #4]
 801e9f8:	f641 33a6 	movw	r3, #7078	; 0x1ba6
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801e9fc:	4a15      	ldr	r2, [pc, #84]	; (801ea54 <mbedtls_ssl_write+0xe0>)
 801e9fe:	2101      	movs	r1, #1
 801ea00:	4630      	mov	r0, r6
 801ea02:	f7f2 f8df 	bl	8010bc4 <mbedtls_debug_print_ret>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 801ea06:	4b17      	ldr	r3, [pc, #92]	; (801ea64 <mbedtls_ssl_write+0xf0>)
 801ea08:	9300      	str	r3, [sp, #0]
 801ea0a:	4a12      	ldr	r2, [pc, #72]	; (801ea54 <mbedtls_ssl_write+0xe0>)
 801ea0c:	f641 4303 	movw	r3, #7171	; 0x1c03
 801ea10:	2102      	movs	r1, #2
 801ea12:	4630      	mov	r0, r6
 801ea14:	f7f2 f8a6 	bl	8010b64 <mbedtls_debug_print_msg>
    return( ret );
 801ea18:	e7cc      	b.n	801e9b4 <mbedtls_ssl_write+0x40>
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 801ea1a:	2317      	movs	r3, #23
 801ea1c:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
        memcpy( ssl->out_msg, buf, len );
 801ea20:	462a      	mov	r2, r5
 801ea22:	4639      	mov	r1, r7
 801ea24:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
        ssl->out_msglen  = len;
 801ea28:	f8c6 50a8 	str.w	r5, [r6, #168]	; 0xa8
        memcpy( ssl->out_msg, buf, len );
 801ea2c:	f003 fd28 	bl	8022480 <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801ea30:	4630      	mov	r0, r6
 801ea32:	f7fe f9f5 	bl	801ce20 <mbedtls_ssl_write_record>
 801ea36:	4604      	mov	r4, r0
 801ea38:	b128      	cbz	r0, 801ea46 <mbedtls_ssl_write+0xd2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801ea3a:	4b0b      	ldr	r3, [pc, #44]	; (801ea68 <mbedtls_ssl_write+0xf4>)
 801ea3c:	9300      	str	r3, [sp, #0]
 801ea3e:	9001      	str	r0, [sp, #4]
 801ea40:	f641 33b2 	movw	r3, #7090	; 0x1bb2
 801ea44:	e7da      	b.n	801e9fc <mbedtls_ssl_write+0x88>
    return( (int) len );
 801ea46:	462c      	mov	r4, r5
 801ea48:	e7dd      	b.n	801ea06 <mbedtls_ssl_write+0x92>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801ea4a:	4c08      	ldr	r4, [pc, #32]	; (801ea6c <mbedtls_ssl_write+0xf8>)
 801ea4c:	e7b2      	b.n	801e9b4 <mbedtls_ssl_write+0x40>
 801ea4e:	bf00      	nop
 801ea50:	08032ce7 	.word	0x08032ce7
 801ea54:	08031f4f 	.word	0x08031f4f
 801ea58:	08032cf0 	.word	0x08032cf0
 801ea5c:	08032c80 	.word	0x08032c80
 801ea60:	080324d4 	.word	0x080324d4
 801ea64:	08032d0a 	.word	0x08032d0a
 801ea68:	080313e7 	.word	0x080313e7
 801ea6c:	ffff8f00 	.word	0xffff8f00

0801ea70 <mbedtls_ssl_read>:
{
 801ea70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea72:	460f      	mov	r7, r1
 801ea74:	4616      	mov	r6, r2
    if( ssl == NULL || ssl->conf == NULL )
 801ea76:	4604      	mov	r4, r0
 801ea78:	2800      	cmp	r0, #0
 801ea7a:	f000 810d 	beq.w	801ec98 <mbedtls_ssl_read+0x228>
 801ea7e:	6803      	ldr	r3, [r0, #0]
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	f000 8109 	beq.w	801ec98 <mbedtls_ssl_read+0x228>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 801ea86:	4b85      	ldr	r3, [pc, #532]	; (801ec9c <mbedtls_ssl_read+0x22c>)
 801ea88:	4a85      	ldr	r2, [pc, #532]	; (801eca0 <mbedtls_ssl_read+0x230>)
 801ea8a:	9300      	str	r3, [sp, #0]
 801ea8c:	2102      	movs	r1, #2
 801ea8e:	f641 2357 	movw	r3, #6743	; 0x1a57
 801ea92:	f7f2 f867 	bl	8010b64 <mbedtls_debug_print_msg>
    ret = ssl_check_ctr_renegotiate( ssl );
 801ea96:	4620      	mov	r0, r4
 801ea98:	f7ff ff36 	bl	801e908 <ssl_check_ctr_renegotiate>
    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ea9c:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
    ret = ssl_check_ctr_renegotiate( ssl );
 801eaa0:	4605      	mov	r5, r0
    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801eaa2:	d00d      	beq.n	801eac0 <mbedtls_ssl_read+0x50>
 801eaa4:	b160      	cbz	r0, 801eac0 <mbedtls_ssl_read+0x50>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
 801eaa6:	4b7f      	ldr	r3, [pc, #508]	; (801eca4 <mbedtls_ssl_read+0x234>)
 801eaa8:	9300      	str	r3, [sp, #0]
 801eaaa:	9001      	str	r0, [sp, #4]
 801eaac:	f641 2379 	movw	r3, #6777	; 0x1a79
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801eab0:	4a7b      	ldr	r2, [pc, #492]	; (801eca0 <mbedtls_ssl_read+0x230>)
 801eab2:	2101      	movs	r1, #1
 801eab4:	4620      	mov	r0, r4
 801eab6:	f7f2 f885 	bl	8010bc4 <mbedtls_debug_print_ret>
}
 801eaba:	4628      	mov	r0, r5
 801eabc:	b003      	add	sp, #12
 801eabe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801eac0:	6863      	ldr	r3, [r4, #4]
 801eac2:	2b10      	cmp	r3, #16
 801eac4:	d00d      	beq.n	801eae2 <mbedtls_ssl_read+0x72>
        ret = mbedtls_ssl_handshake( ssl );
 801eac6:	4620      	mov	r0, r4
 801eac8:	f7ff fc92 	bl	801e3f0 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801eacc:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
        ret = mbedtls_ssl_handshake( ssl );
 801ead0:	4605      	mov	r5, r0
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ead2:	d006      	beq.n	801eae2 <mbedtls_ssl_read+0x72>
 801ead4:	b128      	cbz	r0, 801eae2 <mbedtls_ssl_read+0x72>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801ead6:	4b74      	ldr	r3, [pc, #464]	; (801eca8 <mbedtls_ssl_read+0x238>)
 801ead8:	9300      	str	r3, [sp, #0]
 801eada:	9001      	str	r0, [sp, #4]
 801eadc:	f641 2384 	movw	r3, #6788	; 0x1a84
 801eae0:	e7e6      	b.n	801eab0 <mbedtls_ssl_read+0x40>
    if( ssl->in_offt == NULL )
 801eae2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	f040 80b9 	bne.w	801ec5c <mbedtls_ssl_read+0x1ec>
        if( ssl->f_get_timer != NULL &&
 801eaea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801eaec:	b143      	cbz	r3, 801eb00 <mbedtls_ssl_read+0x90>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 801eaee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801eaf0:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
 801eaf2:	3001      	adds	r0, #1
 801eaf4:	d104      	bne.n	801eb00 <mbedtls_ssl_read+0x90>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 801eaf6:	6823      	ldr	r3, [r4, #0]
 801eaf8:	4620      	mov	r0, r4
 801eafa:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801eafc:	f7fd fd9c 	bl	801c638 <ssl_set_timer>
        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801eb00:	4620      	mov	r0, r4
 801eb02:	f7ff f8db 	bl	801dcbc <mbedtls_ssl_read_record>
 801eb06:	4605      	mov	r5, r0
 801eb08:	b150      	cbz	r0, 801eb20 <mbedtls_ssl_read+0xb0>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 801eb0a:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 801eb0e:	d101      	bne.n	801eb14 <mbedtls_ssl_read+0xa4>
                return( 0 );
 801eb10:	2500      	movs	r5, #0
 801eb12:	e7d2      	b.n	801eaba <mbedtls_ssl_read+0x4a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801eb14:	4b65      	ldr	r3, [pc, #404]	; (801ecac <mbedtls_ssl_read+0x23c>)
 801eb16:	9300      	str	r3, [sp, #0]
 801eb18:	9001      	str	r0, [sp, #4]
 801eb1a:	f641 23ba 	movw	r3, #6842	; 0x1aba
 801eb1e:	e7c7      	b.n	801eab0 <mbedtls_ssl_read+0x40>
        if( ssl->in_msglen  == 0 &&
 801eb20:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801eb22:	b983      	cbnz	r3, 801eb46 <mbedtls_ssl_read+0xd6>
 801eb24:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801eb26:	2b17      	cmp	r3, #23
 801eb28:	d10d      	bne.n	801eb46 <mbedtls_ssl_read+0xd6>
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801eb2a:	4620      	mov	r0, r4
 801eb2c:	f7ff f8c6 	bl	801dcbc <mbedtls_ssl_read_record>
 801eb30:	4605      	mov	r5, r0
 801eb32:	b140      	cbz	r0, 801eb46 <mbedtls_ssl_read+0xd6>
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 801eb34:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 801eb38:	d0ea      	beq.n	801eb10 <mbedtls_ssl_read+0xa0>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801eb3a:	4b5c      	ldr	r3, [pc, #368]	; (801ecac <mbedtls_ssl_read+0x23c>)
 801eb3c:	9300      	str	r3, [sp, #0]
 801eb3e:	9001      	str	r0, [sp, #4]
 801eb40:	f641 23c9 	movw	r3, #6857	; 0x1ac9
 801eb44:	e7b4      	b.n	801eab0 <mbedtls_ssl_read+0x40>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801eb46:	6f62      	ldr	r2, [r4, #116]	; 0x74
 801eb48:	2a16      	cmp	r2, #22
 801eb4a:	d15a      	bne.n	801ec02 <mbedtls_ssl_read+0x192>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 801eb4c:	4b58      	ldr	r3, [pc, #352]	; (801ecb0 <mbedtls_ssl_read+0x240>)
 801eb4e:	4a54      	ldr	r2, [pc, #336]	; (801eca0 <mbedtls_ssl_read+0x230>)
 801eb50:	9300      	str	r3, [sp, #0]
 801eb52:	2101      	movs	r1, #1
 801eb54:	f641 23d1 	movw	r3, #6865	; 0x1ad1
 801eb58:	4620      	mov	r0, r4
 801eb5a:	f7f2 f803 	bl	8010b64 <mbedtls_debug_print_msg>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801eb5e:	6822      	ldr	r2, [r4, #0]
 801eb60:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801eb64:	07d9      	lsls	r1, r3, #31
 801eb66:	d411      	bmi.n	801eb8c <mbedtls_ssl_read+0x11c>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801eb68:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801eb6a:	7809      	ldrb	r1, [r1, #0]
 801eb6c:	b919      	cbnz	r1, 801eb76 <mbedtls_ssl_read+0x106>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801eb6e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 801eb72:	2904      	cmp	r1, #4
 801eb74:	d00a      	beq.n	801eb8c <mbedtls_ssl_read+0x11c>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 801eb76:	4b4f      	ldr	r3, [pc, #316]	; (801ecb4 <mbedtls_ssl_read+0x244>)
 801eb78:	9300      	str	r3, [sp, #0]
 801eb7a:	f641 23de 	movw	r3, #6878	; 0x1ade
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801eb7e:	4a48      	ldr	r2, [pc, #288]	; (801eca0 <mbedtls_ssl_read+0x230>)
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801eb80:	4d4d      	ldr	r5, [pc, #308]	; (801ecb8 <mbedtls_ssl_read+0x248>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801eb82:	2101      	movs	r1, #1
 801eb84:	4620      	mov	r0, r4
 801eb86:	f7f1 ffed 	bl	8010b64 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801eb8a:	e796      	b.n	801eaba <mbedtls_ssl_read+0x4a>
            if( ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED ||
 801eb8c:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 801eb90:	0752      	lsls	r2, r2, #29
 801eb92:	d505      	bpl.n	801eba0 <mbedtls_ssl_read+0x130>
 801eb94:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 801eb98:	bb22      	cbnz	r2, 801ebe4 <mbedtls_ssl_read+0x174>
                ( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801eb9a:	f013 0f30 	tst.w	r3, #48	; 0x30
 801eb9e:	d121      	bne.n	801ebe4 <mbedtls_ssl_read+0x174>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 801eba0:	4b46      	ldr	r3, [pc, #280]	; (801ecbc <mbedtls_ssl_read+0x24c>)
 801eba2:	9300      	str	r3, [sp, #0]
 801eba4:	4a3e      	ldr	r2, [pc, #248]	; (801eca0 <mbedtls_ssl_read+0x230>)
 801eba6:	f641 3303 	movw	r3, #6915	; 0x1b03
 801ebaa:	2103      	movs	r1, #3
 801ebac:	4620      	mov	r0, r4
 801ebae:	f7f1 ffd9 	bl	8010b64 <mbedtls_debug_print_msg>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801ebb2:	6963      	ldr	r3, [r4, #20]
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	dd0a      	ble.n	801ebce <mbedtls_ssl_read+0x15e>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 801ebb8:	2264      	movs	r2, #100	; 0x64
 801ebba:	2101      	movs	r1, #1
 801ebbc:	4620      	mov	r0, r4
 801ebbe:	f7fe fc67 	bl	801d490 <mbedtls_ssl_send_alert_message>
 801ebc2:	4605      	mov	r5, r0
 801ebc4:	2800      	cmp	r0, #0
 801ebc6:	f47f af78 	bne.w	801eaba <mbedtls_ssl_read+0x4a>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 801ebca:	4d3d      	ldr	r5, [pc, #244]	; (801ecc0 <mbedtls_ssl_read+0x250>)
 801ebcc:	e775      	b.n	801eaba <mbedtls_ssl_read+0x4a>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ebce:	4b3d      	ldr	r3, [pc, #244]	; (801ecc4 <mbedtls_ssl_read+0x254>)
 801ebd0:	9300      	str	r3, [sp, #0]
 801ebd2:	4a33      	ldr	r2, [pc, #204]	; (801eca0 <mbedtls_ssl_read+0x230>)
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801ebd4:	4d3c      	ldr	r5, [pc, #240]	; (801ecc8 <mbedtls_ssl_read+0x258>)
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ebd6:	f641 331f 	movw	r3, #6943	; 0x1b1f
 801ebda:	2101      	movs	r1, #1
 801ebdc:	4620      	mov	r0, r4
 801ebde:	f7f1 ffc1 	bl	8010b64 <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801ebe2:	e76a      	b.n	801eaba <mbedtls_ssl_read+0x4a>
                ret = ssl_start_renegotiation( ssl );
 801ebe4:	4620      	mov	r0, r4
 801ebe6:	f7ff fe27 	bl	801e838 <ssl_start_renegotiation>
                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ebea:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
                ret = ssl_start_renegotiation( ssl );
 801ebee:	4605      	mov	r5, r0
                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ebf0:	d0eb      	beq.n	801ebca <mbedtls_ssl_read+0x15a>
 801ebf2:	2800      	cmp	r0, #0
 801ebf4:	d0e9      	beq.n	801ebca <mbedtls_ssl_read+0x15a>
                    MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
 801ebf6:	4b35      	ldr	r3, [pc, #212]	; (801eccc <mbedtls_ssl_read+0x25c>)
 801ebf8:	9300      	str	r3, [sp, #0]
 801ebfa:	9001      	str	r0, [sp, #4]
 801ebfc:	f641 3335 	movw	r3, #6965	; 0x1b35
 801ec00:	e756      	b.n	801eab0 <mbedtls_ssl_read+0x40>
        else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
 801ec02:	68a3      	ldr	r3, [r4, #8]
 801ec04:	2b03      	cmp	r3, #3
 801ec06:	d10d      	bne.n	801ec24 <mbedtls_ssl_read+0x1b4>
            if( ssl->conf->renego_max_records >= 0 )
 801ec08:	6823      	ldr	r3, [r4, #0]
 801ec0a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ec0c:	2900      	cmp	r1, #0
 801ec0e:	db09      	blt.n	801ec24 <mbedtls_ssl_read+0x1b4>
                if( ++ssl->renego_records_seen > ssl->conf->renego_max_records )
 801ec10:	68e3      	ldr	r3, [r4, #12]
 801ec12:	3301      	adds	r3, #1
 801ec14:	4299      	cmp	r1, r3
 801ec16:	60e3      	str	r3, [r4, #12]
 801ec18:	da04      	bge.n	801ec24 <mbedtls_ssl_read+0x1b4>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
 801ec1a:	4b2d      	ldr	r3, [pc, #180]	; (801ecd0 <mbedtls_ssl_read+0x260>)
 801ec1c:	9300      	str	r3, [sp, #0]
 801ec1e:	f641 3342 	movw	r3, #6978	; 0x1b42
 801ec22:	e7ac      	b.n	801eb7e <mbedtls_ssl_read+0x10e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 801ec24:	2a15      	cmp	r2, #21
 801ec26:	d109      	bne.n	801ec3c <mbedtls_ssl_read+0x1cc>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 801ec28:	4b2a      	ldr	r3, [pc, #168]	; (801ecd4 <mbedtls_ssl_read+0x264>)
 801ec2a:	9300      	str	r3, [sp, #0]
 801ec2c:	4a1c      	ldr	r2, [pc, #112]	; (801eca0 <mbedtls_ssl_read+0x230>)
 801ec2e:	f641 334d 	movw	r3, #6989	; 0x1b4d
 801ec32:	2102      	movs	r1, #2
 801ec34:	4620      	mov	r0, r4
 801ec36:	f7f1 ff95 	bl	8010b64 <mbedtls_debug_print_msg>
 801ec3a:	e7c6      	b.n	801ebca <mbedtls_ssl_read+0x15a>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 801ec3c:	2a17      	cmp	r2, #23
 801ec3e:	d004      	beq.n	801ec4a <mbedtls_ssl_read+0x1da>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801ec40:	4b25      	ldr	r3, [pc, #148]	; (801ecd8 <mbedtls_ssl_read+0x268>)
 801ec42:	9300      	str	r3, [sp, #0]
 801ec44:	f641 3353 	movw	r3, #6995	; 0x1b53
 801ec48:	e799      	b.n	801eb7e <mbedtls_ssl_read+0x10e>
        ssl->in_offt = ssl->in_msg;
 801ec4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801ec4c:	6723      	str	r3, [r4, #112]	; 0x70
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801ec4e:	6863      	ldr	r3, [r4, #4]
 801ec50:	2b10      	cmp	r3, #16
 801ec52:	d103      	bne.n	801ec5c <mbedtls_ssl_read+0x1ec>
            ssl_set_timer( ssl, 0 );
 801ec54:	2100      	movs	r1, #0
 801ec56:	4620      	mov	r0, r4
 801ec58:	f7fd fcee 	bl	801c638 <ssl_set_timer>
    n = ( len < ssl->in_msglen )
 801ec5c:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    memcpy( buf, ssl->in_offt, n );
 801ec5e:	6f21      	ldr	r1, [r4, #112]	; 0x70
    n = ( len < ssl->in_msglen )
 801ec60:	42b5      	cmp	r5, r6
 801ec62:	bf28      	it	cs
 801ec64:	4635      	movcs	r5, r6
    memcpy( buf, ssl->in_offt, n );
 801ec66:	462a      	mov	r2, r5
 801ec68:	4638      	mov	r0, r7
 801ec6a:	f003 fc09 	bl	8022480 <memcpy>
    ssl->in_msglen -= n;
 801ec6e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801ec70:	1b5b      	subs	r3, r3, r5
 801ec72:	67a3      	str	r3, [r4, #120]	; 0x78
    if( ssl->in_msglen == 0 )
 801ec74:	b963      	cbnz	r3, 801ec90 <mbedtls_ssl_read+0x220>
        ssl->in_offt = NULL;
 801ec76:	6723      	str	r3, [r4, #112]	; 0x70
        ssl->keep_current_message = 0;
 801ec78:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 801ec7c:	4b17      	ldr	r3, [pc, #92]	; (801ecdc <mbedtls_ssl_read+0x26c>)
 801ec7e:	9300      	str	r3, [sp, #0]
 801ec80:	4a07      	ldr	r2, [pc, #28]	; (801eca0 <mbedtls_ssl_read+0x230>)
 801ec82:	f641 3382 	movw	r3, #7042	; 0x1b82
 801ec86:	2102      	movs	r1, #2
 801ec88:	4620      	mov	r0, r4
 801ec8a:	f7f1 ff6b 	bl	8010b64 <mbedtls_debug_print_msg>
    return( (int) n );
 801ec8e:	e714      	b.n	801eaba <mbedtls_ssl_read+0x4a>
        ssl->in_offt += n;
 801ec90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ec92:	442b      	add	r3, r5
 801ec94:	6723      	str	r3, [r4, #112]	; 0x70
 801ec96:	e7f1      	b.n	801ec7c <mbedtls_ssl_read+0x20c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801ec98:	4d11      	ldr	r5, [pc, #68]	; (801ece0 <mbedtls_ssl_read+0x270>)
 801ec9a:	e70e      	b.n	801eaba <mbedtls_ssl_read+0x4a>
 801ec9c:	08032d13 	.word	0x08032d13
 801eca0:	08031f4f 	.word	0x08031f4f
 801eca4:	08032cf0 	.word	0x08032cf0
 801eca8:	08032c80 	.word	0x08032c80
 801ecac:	08031440 	.word	0x08031440
 801ecb0:	08032d1b 	.word	0x08032d1b
 801ecb4:	08032d36 	.word	0x08032d36
 801ecb8:	ffff8900 	.word	0xffff8900
 801ecbc:	08032d5c 	.word	0x08032d5c
 801ecc0:	ffff9700 	.word	0xffff9700
 801ecc4:	08031a7f 	.word	0x08031a7f
 801ecc8:	ffff9400 	.word	0xffff9400
 801eccc:	08032ca5 	.word	0x08032ca5
 801ecd0:	08032d82 	.word	0x08032d82
 801ecd4:	08032db5 	.word	0x08032db5
 801ecd8:	08032dda 	.word	0x08032dda
 801ecdc:	08032df7 	.word	0x08032df7
 801ece0:	ffff8f00 	.word	0xffff8f00

0801ece4 <mbedtls_ssl_free>:
{
 801ece4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL )
 801ece6:	4604      	mov	r4, r0
 801ece8:	2800      	cmp	r0, #0
 801ecea:	d060      	beq.n	801edae <mbedtls_ssl_free+0xca>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
 801ecec:	4b31      	ldr	r3, [pc, #196]	; (801edb4 <mbedtls_ssl_free+0xd0>)
 801ecee:	9300      	str	r3, [sp, #0]
 801ecf0:	4a31      	ldr	r2, [pc, #196]	; (801edb8 <mbedtls_ssl_free+0xd4>)
 801ecf2:	f641 43b0 	movw	r3, #7344	; 0x1cb0
 801ecf6:	2102      	movs	r1, #2
 801ecf8:	f7f1 ff34 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ssl->out_buf != NULL )
 801ecfc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801ed00:	b140      	cbz	r0, 801ed14 <mbedtls_ssl_free+0x30>
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 801ed02:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801ed06:	f7fd fa4b 	bl	801c1a0 <mbedtls_zeroize>
        mbedtls_free( ssl->out_buf );
 801ed0a:	4b2c      	ldr	r3, [pc, #176]	; (801edbc <mbedtls_ssl_free+0xd8>)
 801ed0c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	4798      	blx	r3
    if( ssl->in_buf != NULL )
 801ed14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed16:	b138      	cbz	r0, 801ed28 <mbedtls_ssl_free+0x44>
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 801ed18:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801ed1c:	f7fd fa40 	bl	801c1a0 <mbedtls_zeroize>
        mbedtls_free( ssl->in_buf );
 801ed20:	4b26      	ldr	r3, [pc, #152]	; (801edbc <mbedtls_ssl_free+0xd8>)
 801ed22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	4798      	blx	r3
    if( ssl->transform )
 801ed28:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801ed2a:	b128      	cbz	r0, 801ed38 <mbedtls_ssl_free+0x54>
        mbedtls_ssl_transform_free( ssl->transform );
 801ed2c:	f7ff fbd2 	bl	801e4d4 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 801ed30:	4b22      	ldr	r3, [pc, #136]	; (801edbc <mbedtls_ssl_free+0xd8>)
 801ed32:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	4798      	blx	r3
    if( ssl->handshake )
 801ed38:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801ed3a:	b188      	cbz	r0, 801ed60 <mbedtls_ssl_free+0x7c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 801ed3c:	f7ff fbe4 	bl	801e508 <mbedtls_ssl_handshake_free>
        mbedtls_free( ssl->handshake );
 801ed40:	4d1e      	ldr	r5, [pc, #120]	; (801edbc <mbedtls_ssl_free+0xd8>)
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 801ed42:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ed44:	f7ff fbc6 	bl	801e4d4 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 801ed48:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ed4a:	f7ff fc03 	bl	801e554 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
 801ed4e:	682b      	ldr	r3, [r5, #0]
 801ed50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801ed52:	4798      	blx	r3
        mbedtls_free( ssl->transform_negotiate );
 801ed54:	682b      	ldr	r3, [r5, #0]
 801ed56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ed58:	4798      	blx	r3
        mbedtls_free( ssl->session_negotiate );
 801ed5a:	682b      	ldr	r3, [r5, #0]
 801ed5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ed5e:	4798      	blx	r3
    if( ssl->session )
 801ed60:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ed62:	b128      	cbz	r0, 801ed70 <mbedtls_ssl_free+0x8c>
        mbedtls_ssl_session_free( ssl->session );
 801ed64:	f7ff fbf6 	bl	801e554 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 801ed68:	4b14      	ldr	r3, [pc, #80]	; (801edbc <mbedtls_ssl_free+0xd8>)
 801ed6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	4798      	blx	r3
    if( ssl->hostname != NULL )
 801ed70:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 801ed74:	b15d      	cbz	r5, 801ed8e <mbedtls_ssl_free+0xaa>
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 801ed76:	4628      	mov	r0, r5
 801ed78:	f7e1 fa34 	bl	80001e4 <strlen>
 801ed7c:	4601      	mov	r1, r0
 801ed7e:	4628      	mov	r0, r5
 801ed80:	f7fd fa0e 	bl	801c1a0 <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 801ed84:	4b0d      	ldr	r3, [pc, #52]	; (801edbc <mbedtls_ssl_free+0xd8>)
 801ed86:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
 801ed8e:	4b0c      	ldr	r3, [pc, #48]	; (801edc0 <mbedtls_ssl_free+0xdc>)
 801ed90:	9300      	str	r3, [sp, #0]
 801ed92:	4620      	mov	r0, r4
 801ed94:	4a08      	ldr	r2, [pc, #32]	; (801edb8 <mbedtls_ssl_free+0xd4>)
 801ed96:	f641 43f1 	movw	r3, #7409	; 0x1cf1
 801ed9a:	2102      	movs	r1, #2
 801ed9c:	f7f1 fee2 	bl	8010b64 <mbedtls_debug_print_msg>
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 801eda0:	21dc      	movs	r1, #220	; 0xdc
 801eda2:	4620      	mov	r0, r4
}
 801eda4:	b003      	add	sp, #12
 801eda6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 801edaa:	f7fd b9f9 	b.w	801c1a0 <mbedtls_zeroize>
}
 801edae:	b003      	add	sp, #12
 801edb0:	bd30      	pop	{r4, r5, pc}
 801edb2:	bf00      	nop
 801edb4:	08032dff 	.word	0x08032dff
 801edb8:	08031f4f 	.word	0x08031f4f
 801edbc:	200005a4 	.word	0x200005a4
 801edc0:	08032e07 	.word	0x08032e07

0801edc4 <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 801edc4:	2270      	movs	r2, #112	; 0x70
 801edc6:	2100      	movs	r1, #0
 801edc8:	f003 bb82 	b.w	80224d0 <memset>

0801edcc <mbedtls_ssl_config_defaults>:
{
 801edcc:	b510      	push	{r4, lr}
 801edce:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
 801edd0:	f002 0201 	and.w	r2, r2, #1
 801edd4:	f001 0001 	and.w	r0, r1, #1
 801edd8:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
 801eddc:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 801ede0:	f020 0003 	bic.w	r0, r0, #3
 801ede4:	4302      	orrs	r2, r0
 801ede6:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 801edea:	b959      	cbnz	r1, 801ee04 <mbedtls_ssl_config_defaults+0x38>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 801edec:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 801edf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801edf4:	f022 020c 	bic.w	r2, r2, #12
 801edf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801edfc:	f042 0208 	orr.w	r2, r2, #8
 801ee00:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
    conf->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
 801ee04:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 801ee08:	f042 0202 	orr.w	r2, r2, #2
 801ee0c:	f884 206d 	strb.w	r2, [r4, #109]	; 0x6d
    conf->renego_max_records = MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT;
 801ee10:	2210      	movs	r2, #16
 801ee12:	65e2      	str	r2, [r4, #92]	; 0x5c
    memset( conf->renego_period,     0x00, 2 );
 801ee14:	2200      	movs	r2, #0
 801ee16:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    switch( preset )
 801ee1a:	2b02      	cmp	r3, #2
    memset( conf->renego_period + 2, 0xFF, 6 );
 801ee1c:	f04f 32ff 	mov.w	r2, #4294967295
 801ee20:	f8c4 2062 	str.w	r2, [r4, #98]	; 0x62
 801ee24:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    switch( preset )
 801ee28:	d110      	bne.n	801ee4c <mbedtls_ssl_config_defaults+0x80>
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801ee2a:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
 801ee2e:	66a3      	str	r3, [r4, #104]	; 0x68
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 801ee30:	4b0e      	ldr	r3, [pc, #56]	; (801ee6c <mbedtls_ssl_config_defaults+0xa0>)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 801ee32:	4a0f      	ldr	r2, [pc, #60]	; (801ee70 <mbedtls_ssl_config_defaults+0xa4>)
 801ee34:	63e2      	str	r2, [r4, #60]	; 0x3c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 801ee36:	e9c4 3302 	strd	r3, r3, [r4, #8]
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 801ee3a:	f103 020c 	add.w	r2, r3, #12
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 801ee3e:	e9c4 3300 	strd	r3, r3, [r4]
            conf->curve_list = ssl_preset_suiteb_curves;
 801ee42:	3318      	adds	r3, #24
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 801ee44:	64e2      	str	r2, [r4, #76]	; 0x4c
            conf->curve_list = ssl_preset_suiteb_curves;
 801ee46:	6523      	str	r3, [r4, #80]	; 0x50
}
 801ee48:	2000      	movs	r0, #0
 801ee4a:	bd10      	pop	{r4, pc}
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801ee4c:	4b09      	ldr	r3, [pc, #36]	; (801ee74 <mbedtls_ssl_config_defaults+0xa8>)
 801ee4e:	66a3      	str	r3, [r4, #104]	; 0x68
                                   mbedtls_ssl_list_ciphersuites();
 801ee50:	f7fb fa06 	bl	801a260 <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 801ee54:	4b08      	ldr	r3, [pc, #32]	; (801ee78 <mbedtls_ssl_config_defaults+0xac>)
 801ee56:	63e3      	str	r3, [r4, #60]	; 0x3c
            conf->sig_hashes = ssl_preset_default_hashes;
 801ee58:	4b08      	ldr	r3, [pc, #32]	; (801ee7c <mbedtls_ssl_config_defaults+0xb0>)
 801ee5a:	64e3      	str	r3, [r4, #76]	; 0x4c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 801ee5c:	e9c4 0002 	strd	r0, r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 801ee60:	e9c4 0000 	strd	r0, r0, [r4]
            conf->curve_list = mbedtls_ecp_grp_id_list();
 801ee64:	f7f3 f8f8 	bl	8012058 <mbedtls_ecp_grp_id_list>
 801ee68:	6520      	str	r0, [r4, #80]	; 0x50
 801ee6a:	e7ed      	b.n	801ee48 <mbedtls_ssl_config_defaults+0x7c>
 801ee6c:	200005a8 	.word	0x200005a8
 801ee70:	0802d708 	.word	0x0802d708
 801ee74:	01030303 	.word	0x01030303
 801ee78:	0802d6f8 	.word	0x0802d6f8
 801ee7c:	200005c4 	.word	0x200005c4

0801ee80 <mbedtls_ssl_config_free>:
{
 801ee80:	b570      	push	{r4, r5, r6, lr}
 801ee82:	4604      	mov	r4, r0
        mbedtls_free( cur );
 801ee84:	4d06      	ldr	r5, [pc, #24]	; (801eea0 <mbedtls_ssl_config_free+0x20>)
    ssl_key_cert_free( conf->key_cert );
 801ee86:	6c00      	ldr	r0, [r0, #64]	; 0x40
    while( cur != NULL )
 801ee88:	b928      	cbnz	r0, 801ee96 <mbedtls_ssl_config_free+0x16>
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 801ee8a:	4620      	mov	r0, r4
 801ee8c:	2170      	movs	r1, #112	; 0x70
}
 801ee8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 801ee92:	f7fd b985 	b.w	801c1a0 <mbedtls_zeroize>
        next = cur->next;
 801ee96:	6886      	ldr	r6, [r0, #8]
        mbedtls_free( cur );
 801ee98:	682b      	ldr	r3, [r5, #0]
 801ee9a:	4798      	blx	r3
        cur = next;
 801ee9c:	4630      	mov	r0, r6
 801ee9e:	e7f3      	b.n	801ee88 <mbedtls_ssl_config_free+0x8>
 801eea0:	200005a4 	.word	0x200005a4

0801eea4 <mbedtls_ssl_sig_from_pk>:
{
 801eea4:	b510      	push	{r4, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 801eea6:	2101      	movs	r1, #1
{
 801eea8:	4604      	mov	r4, r0
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 801eeaa:	f7f6 fe61 	bl	8015b70 <mbedtls_pk_can_do>
 801eeae:	b940      	cbnz	r0, 801eec2 <mbedtls_ssl_sig_from_pk+0x1e>
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
 801eeb0:	2104      	movs	r1, #4
 801eeb2:	4620      	mov	r0, r4
 801eeb4:	f7f6 fe5c 	bl	8015b70 <mbedtls_pk_can_do>
 801eeb8:	2800      	cmp	r0, #0
        return( MBEDTLS_SSL_SIG_ECDSA );
 801eeba:	bf0c      	ite	eq
 801eebc:	2000      	moveq	r0, #0
 801eebe:	2003      	movne	r0, #3
}
 801eec0:	bd10      	pop	{r4, pc}
        return( MBEDTLS_SSL_SIG_RSA );
 801eec2:	2001      	movs	r0, #1
 801eec4:	e7fc      	b.n	801eec0 <mbedtls_ssl_sig_from_pk+0x1c>

0801eec6 <mbedtls_ssl_pk_alg_from_sig>:
    switch( sig )
 801eec6:	2801      	cmp	r0, #1
 801eec8:	d003      	beq.n	801eed2 <mbedtls_ssl_pk_alg_from_sig+0xc>
 801eeca:	2803      	cmp	r0, #3
 801eecc:	bf14      	ite	ne
 801eece:	2000      	movne	r0, #0
 801eed0:	2004      	moveq	r0, #4
}
 801eed2:	4770      	bx	lr

0801eed4 <mbedtls_ssl_md_alg_from_hash>:
    switch( hash )
 801eed4:	1e43      	subs	r3, r0, #1
 801eed6:	2b05      	cmp	r3, #5
 801eed8:	bf9a      	itte	ls
 801eeda:	3002      	addls	r0, #2
 801eedc:	b2c0      	uxtbls	r0, r0
{
 801eede:	2000      	movhi	r0, #0
}
 801eee0:	4770      	bx	lr

0801eee2 <mbedtls_ssl_hash_from_md_alg>:
    switch( md )
 801eee2:	1ec3      	subs	r3, r0, #3
 801eee4:	2b05      	cmp	r3, #5
 801eee6:	bf9a      	itte	ls
 801eee8:	3802      	subls	r0, #2
 801eeea:	b2c0      	uxtbls	r0, r0
 801eeec:	2000      	movhi	r0, #0
}
 801eeee:	4770      	bx	lr

0801eef0 <mbedtls_ssl_check_curve>:
    if( ssl->conf->curve_list == NULL )
 801eef0:	6803      	ldr	r3, [r0, #0]
 801eef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eef4:	b11b      	cbz	r3, 801eefe <mbedtls_ssl_check_curve+0xe>
 801eef6:	3b01      	subs	r3, #1
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
 801eef8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801eefc:	b912      	cbnz	r2, 801ef04 <mbedtls_ssl_check_curve+0x14>
        return( -1 );
 801eefe:	f04f 30ff 	mov.w	r0, #4294967295
 801ef02:	4770      	bx	lr
        if( *gid == grp_id )
 801ef04:	428a      	cmp	r2, r1
 801ef06:	d1f7      	bne.n	801eef8 <mbedtls_ssl_check_curve+0x8>
            return( 0 );
 801ef08:	2000      	movs	r0, #0
}
 801ef0a:	4770      	bx	lr

0801ef0c <mbedtls_ssl_check_sig_hash>:
    if( ssl->conf->sig_hashes == NULL )
 801ef0c:	6803      	ldr	r3, [r0, #0]
 801ef0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ef10:	b11b      	cbz	r3, 801ef1a <mbedtls_ssl_check_sig_hash+0xe>
 801ef12:	3b04      	subs	r3, #4
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
 801ef14:	f853 2f04 	ldr.w	r2, [r3, #4]!
 801ef18:	b912      	cbnz	r2, 801ef20 <mbedtls_ssl_check_sig_hash+0x14>
        return( -1 );
 801ef1a:	f04f 30ff 	mov.w	r0, #4294967295
 801ef1e:	4770      	bx	lr
        if( *cur == (int) md )
 801ef20:	4291      	cmp	r1, r2
 801ef22:	d1f7      	bne.n	801ef14 <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
 801ef24:	2000      	movs	r0, #0
}
 801ef26:	4770      	bx	lr

0801ef28 <mbedtls_ssl_check_cert_usage>:
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 801ef28:	2a01      	cmp	r2, #1
{
 801ef2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef2c:	4606      	mov	r6, r0
 801ef2e:	4617      	mov	r7, r2
 801ef30:	461d      	mov	r5, r3
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 801ef32:	d12a      	bne.n	801ef8a <mbedtls_ssl_check_cert_usage+0x62>
        switch( ciphersuite->key_exchange )
 801ef34:	7a8b      	ldrb	r3, [r1, #10]
 801ef36:	3b01      	subs	r3, #1
 801ef38:	2b09      	cmp	r3, #9
 801ef3a:	d828      	bhi.n	801ef8e <mbedtls_ssl_check_cert_usage+0x66>
 801ef3c:	e8df f003 	tbb	[pc, r3]
 801ef40:	25252505 	.word	0x25252505
 801ef44:	27052727 	.word	0x27052727
 801ef48:	2323      	.short	0x2323
 801ef4a:	2120      	movs	r1, #32
    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 801ef4c:	4630      	mov	r0, r6
 801ef4e:	f001 fd9f 	bl	8020a90 <mbedtls_x509_crt_check_key_usage>
 801ef52:	4604      	mov	r4, r0
 801ef54:	b128      	cbz	r0, 801ef62 <mbedtls_ssl_check_cert_usage+0x3a>
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 801ef56:	682b      	ldr	r3, [r5, #0]
 801ef58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ef5c:	602b      	str	r3, [r5, #0]
        ret = -1;
 801ef5e:	f04f 34ff 	mov.w	r4, #4294967295
    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
 801ef62:	490c      	ldr	r1, [pc, #48]	; (801ef94 <mbedtls_ssl_check_cert_usage+0x6c>)
 801ef64:	4b0c      	ldr	r3, [pc, #48]	; (801ef98 <mbedtls_ssl_check_cert_usage+0x70>)
 801ef66:	2208      	movs	r2, #8
 801ef68:	2f01      	cmp	r7, #1
 801ef6a:	bf18      	it	ne
 801ef6c:	4619      	movne	r1, r3
 801ef6e:	4630      	mov	r0, r6
 801ef70:	f001 fdd6 	bl	8020b20 <mbedtls_x509_crt_check_extended_key_usage>
 801ef74:	b128      	cbz	r0, 801ef82 <mbedtls_ssl_check_cert_usage+0x5a>
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
 801ef76:	682b      	ldr	r3, [r5, #0]
 801ef78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801ef7c:	602b      	str	r3, [r5, #0]
        ret = -1;
 801ef7e:	f04f 34ff 	mov.w	r4, #4294967295
}
 801ef82:	4620      	mov	r0, r4
 801ef84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 801ef86:	2108      	movs	r1, #8
                break;
 801ef88:	e7e0      	b.n	801ef4c <mbedtls_ssl_check_cert_usage+0x24>
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 801ef8a:	2180      	movs	r1, #128	; 0x80
 801ef8c:	e7de      	b.n	801ef4c <mbedtls_ssl_check_cert_usage+0x24>
    int usage = 0;
 801ef8e:	2100      	movs	r1, #0
 801ef90:	e7dc      	b.n	801ef4c <mbedtls_ssl_check_cert_usage+0x24>
 801ef92:	bf00      	nop
 801ef94:	080306db 	.word	0x080306db
 801ef98:	08030713 	.word	0x08030713

0801ef9c <mbedtls_ssl_parse_certificate>:
{
 801ef9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801efa0:	6c83      	ldr	r3, [r0, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801efa2:	4a8f      	ldr	r2, [pc, #572]	; (801f1e0 <mbedtls_ssl_parse_certificate+0x244>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801efa4:	681f      	ldr	r7, [r3, #0]
    int authmode = ssl->conf->authmode;
 801efa6:	6803      	ldr	r3, [r0, #0]
 801efa8:	f893 606c 	ldrb.w	r6, [r3, #108]	; 0x6c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801efac:	4b8d      	ldr	r3, [pc, #564]	; (801f1e4 <mbedtls_ssl_parse_certificate+0x248>)
 801efae:	9300      	str	r3, [sp, #0]
 801efb0:	2102      	movs	r1, #2
 801efb2:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
{
 801efb6:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801efb8:	f7f1 fdd4 	bl	8010b64 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801efbc:	7abb      	ldrb	r3, [r7, #10]
 801efbe:	2b0b      	cmp	r3, #11
    int authmode = ssl->conf->authmode;
 801efc0:	f3c6 0681 	ubfx	r6, r6, #2, #2
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801efc4:	d816      	bhi.n	801eff4 <mbedtls_ssl_parse_certificate+0x58>
 801efc6:	f44f 6516 	mov.w	r5, #2400	; 0x960
 801efca:	40dd      	lsrs	r5, r3
 801efcc:	43ed      	mvns	r5, r5
 801efce:	f015 0501 	ands.w	r5, r5, #1
 801efd2:	d10f      	bne.n	801eff4 <mbedtls_ssl_parse_certificate+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 801efd4:	4b84      	ldr	r3, [pc, #528]	; (801f1e8 <mbedtls_ssl_parse_certificate+0x24c>)
 801efd6:	9300      	str	r3, [sp, #0]
 801efd8:	4a81      	ldr	r2, [pc, #516]	; (801f1e0 <mbedtls_ssl_parse_certificate+0x244>)
 801efda:	f241 03e7 	movw	r3, #4327	; 0x10e7
 801efde:	2102      	movs	r1, #2
 801efe0:	4620      	mov	r0, r4
 801efe2:	f7f1 fdbf 	bl	8010b64 <mbedtls_debug_print_msg>
        ssl->state++;
 801efe6:	6863      	ldr	r3, [r4, #4]
 801efe8:	3301      	adds	r3, #1
 801efea:	6063      	str	r3, [r4, #4]
}
 801efec:	4628      	mov	r0, r5
 801efee:	b004      	add	sp, #16
 801eff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801eff4:	4620      	mov	r0, r4
 801eff6:	f7fe fe61 	bl	801dcbc <mbedtls_ssl_read_record>
 801effa:	4605      	mov	r5, r0
 801effc:	b150      	cbz	r0, 801f014 <mbedtls_ssl_parse_certificate+0x78>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801effe:	4b7b      	ldr	r3, [pc, #492]	; (801f1ec <mbedtls_ssl_parse_certificate+0x250>)
 801f000:	9300      	str	r3, [sp, #0]
 801f002:	9001      	str	r0, [sp, #4]
 801f004:	f241 1308 	movw	r3, #4360	; 0x1108
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 801f008:	4a75      	ldr	r2, [pc, #468]	; (801f1e0 <mbedtls_ssl_parse_certificate+0x244>)
 801f00a:	2101      	movs	r1, #1
 801f00c:	4620      	mov	r0, r4
 801f00e:	f7f1 fdd9 	bl	8010bc4 <mbedtls_debug_print_ret>
            return( ret );
 801f012:	e7eb      	b.n	801efec <mbedtls_ssl_parse_certificate+0x50>
    ssl->state++;
 801f014:	6863      	ldr	r3, [r4, #4]
 801f016:	3301      	adds	r3, #1
 801f018:	6063      	str	r3, [r4, #4]
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801f01a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801f01c:	2b16      	cmp	r3, #22
 801f01e:	d00f      	beq.n	801f040 <mbedtls_ssl_parse_certificate+0xa4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801f020:	4b73      	ldr	r3, [pc, #460]	; (801f1f0 <mbedtls_ssl_parse_certificate+0x254>)
 801f022:	4a6f      	ldr	r2, [pc, #444]	; (801f1e0 <mbedtls_ssl_parse_certificate+0x244>)
 801f024:	9300      	str	r3, [sp, #0]
 801f026:	2101      	movs	r1, #1
 801f028:	f241 1345 	movw	r3, #4421	; 0x1145
 801f02c:	4620      	mov	r0, r4
 801f02e:	f7f1 fd99 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f032:	220a      	movs	r2, #10
 801f034:	2102      	movs	r1, #2
 801f036:	4620      	mov	r0, r4
 801f038:	f7fe fa2a 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801f03c:	4d6d      	ldr	r5, [pc, #436]	; (801f1f4 <mbedtls_ssl_parse_certificate+0x258>)
 801f03e:	e7d5      	b.n	801efec <mbedtls_ssl_parse_certificate+0x50>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 801f040:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801f042:	7813      	ldrb	r3, [r2, #0]
 801f044:	2b0b      	cmp	r3, #11
 801f046:	d103      	bne.n	801f050 <mbedtls_ssl_parse_certificate+0xb4>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 801f048:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 801f04c:	2909      	cmp	r1, #9
 801f04e:	d80f      	bhi.n	801f070 <mbedtls_ssl_parse_certificate+0xd4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801f050:	4b67      	ldr	r3, [pc, #412]	; (801f1f0 <mbedtls_ssl_parse_certificate+0x254>)
 801f052:	9300      	str	r3, [sp, #0]
 801f054:	f241 134e 	movw	r3, #4430	; 0x114e
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801f058:	4a61      	ldr	r2, [pc, #388]	; (801f1e0 <mbedtls_ssl_parse_certificate+0x244>)
 801f05a:	2101      	movs	r1, #1
 801f05c:	4620      	mov	r0, r4
 801f05e:	f7f1 fd81 	bl	8010b64 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f062:	2232      	movs	r2, #50	; 0x32
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f064:	2102      	movs	r1, #2
 801f066:	4620      	mov	r0, r4
 801f068:	f7fe fa12 	bl	801d490 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 801f06c:	4d62      	ldr	r5, [pc, #392]	; (801f1f8 <mbedtls_ssl_parse_certificate+0x25c>)
 801f06e:	e7bd      	b.n	801efec <mbedtls_ssl_parse_certificate+0x50>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 801f070:	f8b2 3005 	ldrh.w	r3, [r2, #5]
    if( ssl->in_msg[i] != 0 ||
 801f074:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 801f076:	ba5b      	rev16	r3, r3
 801f078:	b29b      	uxth	r3, r3
    if( ssl->in_msg[i] != 0 ||
 801f07a:	b912      	cbnz	r2, 801f082 <mbedtls_ssl_parse_certificate+0xe6>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 801f07c:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
 801f07e:	4299      	cmp	r1, r3
 801f080:	d004      	beq.n	801f08c <mbedtls_ssl_parse_certificate+0xf0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801f082:	4b5b      	ldr	r3, [pc, #364]	; (801f1f0 <mbedtls_ssl_parse_certificate+0x254>)
 801f084:	9300      	str	r3, [sp, #0]
 801f086:	f241 135e 	movw	r3, #4446	; 0x115e
 801f08a:	e7e5      	b.n	801f058 <mbedtls_ssl_parse_certificate+0xbc>
    if( ssl->session_negotiate->peer_cert != NULL )
 801f08c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f08e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801f090:	b130      	cbz	r0, 801f0a0 <mbedtls_ssl_parse_certificate+0x104>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 801f092:	f002 f8fb 	bl	802128c <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 801f096:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801f098:	4b58      	ldr	r3, [pc, #352]	; (801f1fc <mbedtls_ssl_parse_certificate+0x260>)
 801f09a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 801f09c:	681b      	ldr	r3, [r3, #0]
 801f09e:	4798      	blx	r3
    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 801f0a0:	4b57      	ldr	r3, [pc, #348]	; (801f200 <mbedtls_ssl_parse_certificate+0x264>)
 801f0a2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	f44f 719a 	mov.w	r1, #308	; 0x134
 801f0aa:	2001      	movs	r0, #1
 801f0ac:	4798      	blx	r3
 801f0ae:	6668      	str	r0, [r5, #100]	; 0x64
 801f0b0:	b990      	cbnz	r0, 801f0d8 <mbedtls_ssl_parse_certificate+0x13c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 801f0b2:	f44f 739a 	mov.w	r3, #308	; 0x134
 801f0b6:	9301      	str	r3, [sp, #4]
 801f0b8:	4b52      	ldr	r3, [pc, #328]	; (801f204 <mbedtls_ssl_parse_certificate+0x268>)
 801f0ba:	4a49      	ldr	r2, [pc, #292]	; (801f1e0 <mbedtls_ssl_parse_certificate+0x244>)
 801f0bc:	9300      	str	r3, [sp, #0]
 801f0be:	2101      	movs	r1, #1
 801f0c0:	f241 136e 	movw	r3, #4462	; 0x116e
 801f0c4:	4620      	mov	r0, r4
 801f0c6:	f7f1 fd4d 	bl	8010b64 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f0ca:	2250      	movs	r2, #80	; 0x50
 801f0cc:	2102      	movs	r1, #2
 801f0ce:	4620      	mov	r0, r4
 801f0d0:	f7fe f9de 	bl	801d490 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801f0d4:	4d4c      	ldr	r5, [pc, #304]	; (801f208 <mbedtls_ssl_parse_certificate+0x26c>)
 801f0d6:	e789      	b.n	801efec <mbedtls_ssl_parse_certificate+0x50>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801f0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
        switch( ret )
 801f0da:	f8df 9140 	ldr.w	r9, [pc, #320]	; 801f21c <mbedtls_ssl_parse_certificate+0x280>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801f0de:	6e58      	ldr	r0, [r3, #100]	; 0x64
        switch( ret )
 801f0e0:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801f220 <mbedtls_ssl_parse_certificate+0x284>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801f0e4:	f002 f8cc 	bl	8021280 <mbedtls_x509_crt_init>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801f0e8:	2500      	movs	r5, #0
    i += 3;
 801f0ea:	f04f 0807 	mov.w	r8, #7
    while( i < ssl->in_hslen )
 801f0ee:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801f0f2:	4543      	cmp	r3, r8
 801f0f4:	d824      	bhi.n	801f140 <mbedtls_ssl_parse_certificate+0x1a4>
    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 801f0f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f0f8:	4a39      	ldr	r2, [pc, #228]	; (801f1e0 <mbedtls_ssl_parse_certificate+0x244>)
 801f0fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f0fc:	9301      	str	r3, [sp, #4]
 801f0fe:	4b43      	ldr	r3, [pc, #268]	; (801f20c <mbedtls_ssl_parse_certificate+0x270>)
 801f100:	9300      	str	r3, [sp, #0]
 801f102:	2103      	movs	r1, #3
 801f104:	f241 13ac 	movw	r3, #4524	; 0x11ac
 801f108:	4620      	mov	r0, r4
 801f10a:	f7f1 fe85 	bl	8010e18 <mbedtls_debug_print_crt>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801f10e:	f8d4 8000 	ldr.w	r8, [r4]
 801f112:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
 801f116:	07db      	lsls	r3, r3, #31
 801f118:	f100 8084 	bmi.w	801f224 <mbedtls_ssl_parse_certificate+0x288>
 801f11c:	68a1      	ldr	r1, [r4, #8]
 801f11e:	2901      	cmp	r1, #1
 801f120:	f040 8080 	bne.w	801f224 <mbedtls_ssl_parse_certificate+0x288>
        if( ssl->session->peer_cert == NULL )
 801f124:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f128:	2b00      	cmp	r3, #0
 801f12a:	d147      	bne.n	801f1bc <mbedtls_ssl_parse_certificate+0x220>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "new server cert during renegotiation" ) );
 801f12c:	4b38      	ldr	r3, [pc, #224]	; (801f210 <mbedtls_ssl_parse_certificate+0x274>)
 801f12e:	4a2c      	ldr	r2, [pc, #176]	; (801f1e0 <mbedtls_ssl_parse_certificate+0x244>)
 801f130:	9300      	str	r3, [sp, #0]
 801f132:	f241 13b8 	movw	r3, #4536	; 0x11b8
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
 801f136:	4620      	mov	r0, r4
 801f138:	f7f1 fd14 	bl	8010b64 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f13c:	2231      	movs	r2, #49	; 0x31
 801f13e:	e791      	b.n	801f064 <mbedtls_ssl_parse_certificate+0xc8>
        if( ssl->in_msg[i] != 0 )
 801f140:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801f142:	f811 2008 	ldrb.w	r2, [r1, r8]
 801f146:	b122      	cbz	r2, 801f152 <mbedtls_ssl_parse_certificate+0x1b6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801f148:	4b29      	ldr	r3, [pc, #164]	; (801f1f0 <mbedtls_ssl_parse_certificate+0x254>)
 801f14a:	9300      	str	r3, [sp, #0]
 801f14c:	f241 137d 	movw	r3, #4477	; 0x117d
 801f150:	e782      	b.n	801f058 <mbedtls_ssl_parse_certificate+0xbc>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801f152:	eb01 0008 	add.w	r0, r1, r8
 801f156:	7845      	ldrb	r5, [r0, #1]
            | (unsigned int) ssl->in_msg[i + 2];
 801f158:	7882      	ldrb	r2, [r0, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801f15a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
 801f15e:	2a7f      	cmp	r2, #127	; 0x7f
        i += 3;
 801f160:	f108 0003 	add.w	r0, r8, #3
        if( n < 128 || i + n > ssl->in_hslen )
 801f164:	d903      	bls.n	801f16e <mbedtls_ssl_parse_certificate+0x1d2>
 801f166:	eb02 0800 	add.w	r8, r2, r0
 801f16a:	4598      	cmp	r8, r3
 801f16c:	d904      	bls.n	801f178 <mbedtls_ssl_parse_certificate+0x1dc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801f16e:	4b20      	ldr	r3, [pc, #128]	; (801f1f0 <mbedtls_ssl_parse_certificate+0x254>)
 801f170:	9300      	str	r3, [sp, #0]
 801f172:	f241 1389 	movw	r3, #4489	; 0x1189
 801f176:	e76f      	b.n	801f058 <mbedtls_ssl_parse_certificate+0xbc>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 801f178:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f17a:	4401      	add	r1, r0
 801f17c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801f17e:	f002 f8f1 	bl	8021364 <mbedtls_x509_crt_parse_der>
        switch( ret )
 801f182:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 801f186:	4605      	mov	r5, r0
        switch( ret )
 801f188:	d014      	beq.n	801f1b4 <mbedtls_ssl_parse_certificate+0x218>
 801f18a:	4548      	cmp	r0, r9
 801f18c:	da0f      	bge.n	801f1ae <mbedtls_ssl_parse_certificate+0x212>
 801f18e:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 801f192:	d011      	beq.n	801f1b8 <mbedtls_ssl_parse_certificate+0x21c>
 801f194:	4550      	cmp	r0, sl
 801f196:	d0aa      	beq.n	801f0ee <mbedtls_ssl_parse_certificate+0x152>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 801f198:	222a      	movs	r2, #42	; 0x2a
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 801f19a:	2102      	movs	r1, #2
 801f19c:	4620      	mov	r0, r4
 801f19e:	f7fe f977 	bl	801d490 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 801f1a2:	4b1c      	ldr	r3, [pc, #112]	; (801f214 <mbedtls_ssl_parse_certificate+0x278>)
 801f1a4:	9300      	str	r3, [sp, #0]
 801f1a6:	9501      	str	r5, [sp, #4]
 801f1a8:	f241 13a5 	movw	r3, #4517	; 0x11a5
 801f1ac:	e72c      	b.n	801f008 <mbedtls_ssl_parse_certificate+0x6c>
        switch( ret )
 801f1ae:	2800      	cmp	r0, #0
 801f1b0:	d09d      	beq.n	801f0ee <mbedtls_ssl_parse_certificate+0x152>
 801f1b2:	e7f1      	b.n	801f198 <mbedtls_ssl_parse_certificate+0x1fc>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801f1b4:	222b      	movs	r2, #43	; 0x2b
 801f1b6:	e7f0      	b.n	801f19a <mbedtls_ssl_parse_certificate+0x1fe>
        switch( ret )
 801f1b8:	2250      	movs	r2, #80	; 0x50
 801f1ba:	e7ee      	b.n	801f19a <mbedtls_ssl_parse_certificate+0x1fe>
            ssl->session_negotiate->peer_cert->raw.len ||
 801f1bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
        if( ssl->session->peer_cert->raw.len !=
 801f1be:	685a      	ldr	r2, [r3, #4]
            ssl->session_negotiate->peer_cert->raw.len ||
 801f1c0:	6e49      	ldr	r1, [r1, #100]	; 0x64
        if( ssl->session->peer_cert->raw.len !=
 801f1c2:	6848      	ldr	r0, [r1, #4]
 801f1c4:	4282      	cmp	r2, r0
 801f1c6:	d104      	bne.n	801f1d2 <mbedtls_ssl_parse_certificate+0x236>
            memcmp( ssl->session->peer_cert->raw.p,
 801f1c8:	6889      	ldr	r1, [r1, #8]
 801f1ca:	6898      	ldr	r0, [r3, #8]
 801f1cc:	f003 f94a 	bl	8022464 <memcmp>
            ssl->session_negotiate->peer_cert->raw.len ||
 801f1d0:	b340      	cbz	r0, 801f224 <mbedtls_ssl_parse_certificate+0x288>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
 801f1d2:	4b11      	ldr	r3, [pc, #68]	; (801f218 <mbedtls_ssl_parse_certificate+0x27c>)
 801f1d4:	9300      	str	r3, [sp, #0]
 801f1d6:	4a02      	ldr	r2, [pc, #8]	; (801f1e0 <mbedtls_ssl_parse_certificate+0x244>)
 801f1d8:	f241 13c4 	movw	r3, #4548	; 0x11c4
 801f1dc:	2101      	movs	r1, #1
 801f1de:	e7aa      	b.n	801f136 <mbedtls_ssl_parse_certificate+0x19a>
 801f1e0:	08031f4f 	.word	0x08031f4f
 801f1e4:	08032e0f 	.word	0x08032e0f
 801f1e8:	08032e24 	.word	0x08032e24
 801f1ec:	08031440 	.word	0x08031440
 801f1f0:	08032e3e 	.word	0x08032e3e
 801f1f4:	ffff8900 	.word	0xffff8900
 801f1f8:	ffff8600 	.word	0xffff8600
 801f1fc:	200005a4 	.word	0x200005a4
 801f200:	200005a0 	.word	0x200005a0
 801f204:	08032c5a 	.word	0x08032c5a
 801f208:	ffff8100 	.word	0xffff8100
 801f20c:	08032e72 	.word	0x08032e72
 801f210:	08032e83 	.word	0x08032e83
 801f214:	08032e56 	.word	0x08032e56
 801f218:	08032ea8 	.word	0x08032ea8
 801f21c:	ffffda81 	.word	0xffffda81
 801f220:	ffffd9d2 	.word	0xffffd9d2
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 801f224:	2e00      	cmp	r6, #0
 801f226:	d06d      	beq.n	801f304 <mbedtls_ssl_parse_certificate+0x368>
        if( ssl->handshake->sni_ca_chain != NULL )
 801f228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f22a:	f8d3 9148 	ldr.w	r9, [r3, #328]	; 0x148
 801f22e:	f1b9 0f00 	cmp.w	r9, #0
 801f232:	d071      	beq.n	801f318 <mbedtls_ssl_parse_certificate+0x37c>
            ca_crl   = ssl->handshake->sni_ca_crl;
 801f234:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
        ret = mbedtls_x509_crt_verify_with_profile(
 801f238:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801f23c:	9303      	str	r3, [sp, #12]
                                ssl->session_negotiate->peer_cert,
 801f23e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ret = mbedtls_x509_crt_verify_with_profile(
 801f240:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 801f244:	9302      	str	r3, [sp, #8]
 801f246:	f100 0368 	add.w	r3, r0, #104	; 0x68
 801f24a:	9301      	str	r3, [sp, #4]
 801f24c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801f250:	9300      	str	r3, [sp, #0]
 801f252:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 801f256:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f258:	4649      	mov	r1, r9
 801f25a:	f001 ff35 	bl	80210c8 <mbedtls_x509_crt_verify_with_profile>
        if( ret != 0 )
 801f25e:	4605      	mov	r5, r0
 801f260:	b148      	cbz	r0, 801f276 <mbedtls_ssl_parse_certificate+0x2da>
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 801f262:	4b58      	ldr	r3, [pc, #352]	; (801f3c4 <mbedtls_ssl_parse_certificate+0x428>)
 801f264:	9001      	str	r0, [sp, #4]
 801f266:	9300      	str	r3, [sp, #0]
 801f268:	4a57      	ldr	r2, [pc, #348]	; (801f3c8 <mbedtls_ssl_parse_certificate+0x42c>)
 801f26a:	f241 13eb 	movw	r3, #4587	; 0x11eb
 801f26e:	2101      	movs	r1, #1
 801f270:	4620      	mov	r0, r4
 801f272:	f7f1 fca7 	bl	8010bc4 <mbedtls_debug_print_ret>
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
 801f276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f278:	f8d3 8064 	ldr.w	r8, [r3, #100]	; 0x64
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 801f27c:	2102      	movs	r1, #2
 801f27e:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
 801f282:	f7f6 fc75 	bl	8015b70 <mbedtls_pk_can_do>
 801f286:	b1c0      	cbz	r0, 801f2ba <mbedtls_ssl_parse_certificate+0x31e>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
 801f288:	f8d8 30c0 	ldr.w	r3, [r8, #192]	; 0xc0
 801f28c:	4620      	mov	r0, r4
 801f28e:	7819      	ldrb	r1, [r3, #0]
 801f290:	f7ff fe2e 	bl	801eef0 <mbedtls_ssl_check_curve>
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 801f294:	b188      	cbz	r0, 801f2ba <mbedtls_ssl_parse_certificate+0x31e>
 801f296:	6b62      	ldr	r2, [r4, #52]	; 0x34
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801f298:	6e93      	ldr	r3, [r2, #104]	; 0x68
 801f29a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f29e:	6693      	str	r3, [r2, #104]	; 0x68
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
 801f2a0:	4b4a      	ldr	r3, [pc, #296]	; (801f3cc <mbedtls_ssl_parse_certificate+0x430>)
 801f2a2:	9300      	str	r3, [sp, #0]
 801f2a4:	4a48      	ldr	r2, [pc, #288]	; (801f3c8 <mbedtls_ssl_parse_certificate+0x42c>)
 801f2a6:	f241 13fc 	movw	r3, #4604	; 0x11fc
 801f2aa:	2101      	movs	r1, #1
 801f2ac:	4620      	mov	r0, r4
 801f2ae:	f7f1 fc59 	bl	8010b64 <mbedtls_debug_print_msg>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 801f2b2:	4b47      	ldr	r3, [pc, #284]	; (801f3d0 <mbedtls_ssl_parse_certificate+0x434>)
 801f2b4:	2d00      	cmp	r5, #0
 801f2b6:	bf08      	it	eq
 801f2b8:	461d      	moveq	r5, r3
                                 ! ssl->conf->endpoint,
 801f2ba:	6823      	ldr	r3, [r4, #0]
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 801f2bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f2be:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801f2c2:	43d2      	mvns	r2, r2
 801f2c4:	f100 0368 	add.w	r3, r0, #104	; 0x68
 801f2c8:	f002 0201 	and.w	r2, r2, #1
 801f2cc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f2ce:	4639      	mov	r1, r7
 801f2d0:	f7ff fe2a 	bl	801ef28 <mbedtls_ssl_check_cert_usage>
 801f2d4:	bb18      	cbnz	r0, 801f31e <mbedtls_ssl_parse_certificate+0x382>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 801f2d6:	2e01      	cmp	r6, #1
 801f2d8:	d133      	bne.n	801f342 <mbedtls_ssl_parse_certificate+0x3a6>
 801f2da:	f515 5f1c 	cmn.w	r5, #9984	; 0x2700
 801f2de:	d002      	beq.n	801f2e6 <mbedtls_ssl_parse_certificate+0x34a>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 801f2e0:	f515 4ff4 	cmn.w	r5, #31232	; 0x7a00
 801f2e4:	d12d      	bne.n	801f342 <mbedtls_ssl_parse_certificate+0x3a6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 801f2e6:	2500      	movs	r5, #0
        if( ssl->session_negotiate->verify_result != 0 )
 801f2e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f2ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d05b      	beq.n	801f3a8 <mbedtls_ssl_parse_certificate+0x40c>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 801f2f0:	9301      	str	r3, [sp, #4]
 801f2f2:	4b38      	ldr	r3, [pc, #224]	; (801f3d4 <mbedtls_ssl_parse_certificate+0x438>)
 801f2f4:	9300      	str	r3, [sp, #0]
 801f2f6:	4a34      	ldr	r2, [pc, #208]	; (801f3c8 <mbedtls_ssl_parse_certificate+0x42c>)
 801f2f8:	f241 2342 	movw	r3, #4674	; 0x1242
 801f2fc:	2103      	movs	r1, #3
 801f2fe:	4620      	mov	r0, r4
 801f300:	f7f1 fc30 	bl	8010b64 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 801f304:	4b34      	ldr	r3, [pc, #208]	; (801f3d8 <mbedtls_ssl_parse_certificate+0x43c>)
 801f306:	9300      	str	r3, [sp, #0]
 801f308:	4a2f      	ldr	r2, [pc, #188]	; (801f3c8 <mbedtls_ssl_parse_certificate+0x42c>)
 801f30a:	f241 234c 	movw	r3, #4684	; 0x124c
 801f30e:	2102      	movs	r1, #2
 801f310:	4620      	mov	r0, r4
 801f312:	f7f1 fc27 	bl	8010b64 <mbedtls_debug_print_msg>
    return( ret );
 801f316:	e669      	b.n	801efec <mbedtls_ssl_parse_certificate+0x50>
            ca_crl   = ssl->conf->ca_crl;
 801f318:	e9d8 9211 	ldrd	r9, r2, [r8, #68]	; 0x44
 801f31c:	e78c      	b.n	801f238 <mbedtls_ssl_parse_certificate+0x29c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
 801f31e:	4b2f      	ldr	r3, [pc, #188]	; (801f3dc <mbedtls_ssl_parse_certificate+0x440>)
 801f320:	9300      	str	r3, [sp, #0]
 801f322:	4a29      	ldr	r2, [pc, #164]	; (801f3c8 <mbedtls_ssl_parse_certificate+0x42c>)
 801f324:	f241 2308 	movw	r3, #4616	; 0x1208
 801f328:	2101      	movs	r1, #1
 801f32a:	4620      	mov	r0, r4
 801f32c:	f7f1 fc1a 	bl	8010b64 <mbedtls_debug_print_msg>
            if( ret == 0 )
 801f330:	2d00      	cmp	r5, #0
 801f332:	d1d0      	bne.n	801f2d6 <mbedtls_ssl_parse_certificate+0x33a>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 801f334:	2e01      	cmp	r6, #1
 801f336:	d0d6      	beq.n	801f2e6 <mbedtls_ssl_parse_certificate+0x34a>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f338:	f1b9 0f00 	cmp.w	r9, #0
 801f33c:	d03e      	beq.n	801f3bc <mbedtls_ssl_parse_certificate+0x420>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 801f33e:	4d24      	ldr	r5, [pc, #144]	; (801f3d0 <mbedtls_ssl_parse_certificate+0x434>)
 801f340:	e00e      	b.n	801f360 <mbedtls_ssl_parse_certificate+0x3c4>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f342:	f1b9 0f00 	cmp.w	r9, #0
 801f346:	d122      	bne.n	801f38e <mbedtls_ssl_parse_certificate+0x3f2>
 801f348:	2e02      	cmp	r6, #2
 801f34a:	d120      	bne.n	801f38e <mbedtls_ssl_parse_certificate+0x3f2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801f34c:	4b24      	ldr	r3, [pc, #144]	; (801f3e0 <mbedtls_ssl_parse_certificate+0x444>)
 801f34e:	9300      	str	r3, [sp, #0]
 801f350:	4a1d      	ldr	r2, [pc, #116]	; (801f3c8 <mbedtls_ssl_parse_certificate+0x42c>)
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 801f352:	4d24      	ldr	r5, [pc, #144]	; (801f3e4 <mbedtls_ssl_parse_certificate+0x448>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801f354:	f241 231c 	movw	r3, #4636	; 0x121c
 801f358:	2101      	movs	r1, #1
 801f35a:	4620      	mov	r0, r4
 801f35c:	f7f1 fc02 	bl	8010b64 <mbedtls_debug_print_msg>
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 801f360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f364:	05df      	lsls	r7, r3, #23
 801f366:	d415      	bmi.n	801f394 <mbedtls_ssl_parse_certificate+0x3f8>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 801f368:	075e      	lsls	r6, r3, #29
 801f36a:	d415      	bmi.n	801f398 <mbedtls_ssl_parse_certificate+0x3fc>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 801f36c:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 801f370:	d114      	bne.n	801f39c <mbedtls_ssl_parse_certificate+0x400>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 801f372:	07d8      	lsls	r0, r3, #31
 801f374:	d414      	bmi.n	801f3a0 <mbedtls_ssl_parse_certificate+0x404>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 801f376:	0799      	lsls	r1, r3, #30
 801f378:	d414      	bmi.n	801f3a4 <mbedtls_ssl_parse_certificate+0x408>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 801f37a:	f013 0f08 	tst.w	r3, #8
 801f37e:	bf14      	ite	ne
 801f380:	2230      	movne	r2, #48	; 0x30
 801f382:	222e      	moveq	r2, #46	; 0x2e
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f384:	2102      	movs	r1, #2
 801f386:	4620      	mov	r0, r4
 801f388:	f7fe f882 	bl	801d490 <mbedtls_ssl_send_alert_message>
 801f38c:	e7ac      	b.n	801f2e8 <mbedtls_ssl_parse_certificate+0x34c>
        if( ret != 0 )
 801f38e:	2d00      	cmp	r5, #0
 801f390:	d1e6      	bne.n	801f360 <mbedtls_ssl_parse_certificate+0x3c4>
 801f392:	e7a8      	b.n	801f2e6 <mbedtls_ssl_parse_certificate+0x34a>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 801f394:	2231      	movs	r2, #49	; 0x31
 801f396:	e7f5      	b.n	801f384 <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 801f398:	222a      	movs	r2, #42	; 0x2a
 801f39a:	e7f3      	b.n	801f384 <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801f39c:	222b      	movs	r2, #43	; 0x2b
 801f39e:	e7f1      	b.n	801f384 <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 801f3a0:	222d      	movs	r2, #45	; 0x2d
 801f3a2:	e7ef      	b.n	801f384 <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 801f3a4:	222c      	movs	r2, #44	; 0x2c
 801f3a6:	e7ed      	b.n	801f384 <mbedtls_ssl_parse_certificate+0x3e8>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 801f3a8:	4b0f      	ldr	r3, [pc, #60]	; (801f3e8 <mbedtls_ssl_parse_certificate+0x44c>)
 801f3aa:	9300      	str	r3, [sp, #0]
 801f3ac:	4a06      	ldr	r2, [pc, #24]	; (801f3c8 <mbedtls_ssl_parse_certificate+0x42c>)
 801f3ae:	f241 2347 	movw	r3, #4679	; 0x1247
 801f3b2:	2103      	movs	r1, #3
 801f3b4:	4620      	mov	r0, r4
 801f3b6:	f7f1 fbd5 	bl	8010b64 <mbedtls_debug_print_msg>
 801f3ba:	e7a3      	b.n	801f304 <mbedtls_ssl_parse_certificate+0x368>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f3bc:	2e02      	cmp	r6, #2
 801f3be:	d1be      	bne.n	801f33e <mbedtls_ssl_parse_certificate+0x3a2>
 801f3c0:	e7c4      	b.n	801f34c <mbedtls_ssl_parse_certificate+0x3b0>
 801f3c2:	bf00      	nop
 801f3c4:	08032ed1 	.word	0x08032ed1
 801f3c8:	08031f4f 	.word	0x08031f4f
 801f3cc:	08032ee2 	.word	0x08032ee2
 801f3d0:	ffff8600 	.word	0xffff8600
 801f3d4:	08032f34 	.word	0x08032f34
 801f3d8:	08032f7d 	.word	0x08032f7d
 801f3dc:	08032f01 	.word	0x08032f01
 801f3e0:	08032f24 	.word	0x08032f24
 801f3e4:	ffff8980 	.word	0xffff8980
 801f3e8:	08032f58 	.word	0x08032f58

0801f3ec <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
 801f3ec:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 801f3ee:	7059      	strb	r1, [r3, #1]
}
 801f3f0:	4770      	bx	lr

0801f3f2 <mbedtls_ssl_read_version>:
        *major = ver[0];
 801f3f2:	781a      	ldrb	r2, [r3, #0]
 801f3f4:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 801f3f6:	785b      	ldrb	r3, [r3, #1]
 801f3f8:	600b      	str	r3, [r1, #0]
    }
}
 801f3fa:	4770      	bx	lr

0801f3fc <x509_parse_int>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 801f3fc:	2300      	movs	r3, #0
{
 801f3fe:	b570      	push	{r4, r5, r6, lr}
    *res = 0;
 801f400:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 801f402:	260a      	movs	r6, #10
        if( ( **p < '0') || ( **p > '9' ) )
 801f404:	6805      	ldr	r5, [r0, #0]
 801f406:	782b      	ldrb	r3, [r5, #0]
 801f408:	3b30      	subs	r3, #48	; 0x30
 801f40a:	2b09      	cmp	r3, #9
 801f40c:	d80d      	bhi.n	801f42a <x509_parse_int+0x2e>
        *res *= 10;
 801f40e:	6813      	ldr	r3, [r2, #0]
 801f410:	fb06 f403 	mul.w	r4, r6, r3
        *res += ( *(*p)++ - '0' );
 801f414:	1c6b      	adds	r3, r5, #1
        *res *= 10;
 801f416:	6014      	str	r4, [r2, #0]
        *res += ( *(*p)++ - '0' );
 801f418:	6003      	str	r3, [r0, #0]
 801f41a:	782b      	ldrb	r3, [r5, #0]
 801f41c:	3b30      	subs	r3, #48	; 0x30
 801f41e:	4423      	add	r3, r4
    for( ; n > 0; --n )
 801f420:	3901      	subs	r1, #1
        *res += ( *(*p)++ - '0' );
 801f422:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
 801f424:	d1ee      	bne.n	801f404 <x509_parse_int+0x8>
    }

    return( 0 );
 801f426:	4608      	mov	r0, r1
}
 801f428:	bd70      	pop	{r4, r5, r6, pc}
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 801f42a:	4801      	ldr	r0, [pc, #4]	; (801f430 <x509_parse_int+0x34>)
 801f42c:	e7fc      	b.n	801f428 <x509_parse_int+0x2c>
 801f42e:	bf00      	nop
 801f430:	ffffdc00 	.word	0xffffdc00

0801f434 <x509_check_time>:
/*
 * Return 0 if before <= after, 1 otherwise
 */
static int x509_check_time( const mbedtls_x509_time *before, const mbedtls_x509_time *after )
{
    if( before->year  > after->year )
 801f434:	6802      	ldr	r2, [r0, #0]
 801f436:	680b      	ldr	r3, [r1, #0]
 801f438:	429a      	cmp	r2, r3
{
 801f43a:	b530      	push	{r4, r5, lr}
    if( before->year  > after->year )
 801f43c:	dc29      	bgt.n	801f492 <x509_check_time+0x5e>
        return( 1 );

    if( before->year == after->year &&
 801f43e:	d12a      	bne.n	801f496 <x509_check_time+0x62>
        before->mon   > after->mon )
 801f440:	6842      	ldr	r2, [r0, #4]
 801f442:	684b      	ldr	r3, [r1, #4]
    if( before->year == after->year &&
 801f444:	429a      	cmp	r2, r3
 801f446:	dc24      	bgt.n	801f492 <x509_check_time+0x5e>
        return( 1 );

    if( before->year == after->year &&
 801f448:	d125      	bne.n	801f496 <x509_check_time+0x62>
        before->mon  == after->mon  &&
 801f44a:	6882      	ldr	r2, [r0, #8]
 801f44c:	688b      	ldr	r3, [r1, #8]
 801f44e:	429a      	cmp	r2, r3
 801f450:	dc1f      	bgt.n	801f492 <x509_check_time+0x5e>
        before->day   > after->day )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f452:	d103      	bne.n	801f45c <x509_check_time+0x28>
        before->day  == after->day  &&
 801f454:	68c5      	ldr	r5, [r0, #12]
 801f456:	68cc      	ldr	r4, [r1, #12]
 801f458:	42a5      	cmp	r5, r4
 801f45a:	dc1a      	bgt.n	801f492 <x509_check_time+0x5e>
        before->hour  > after->hour )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f45c:	429a      	cmp	r2, r3
 801f45e:	d11a      	bne.n	801f496 <x509_check_time+0x62>
        before->day  == after->day  &&
 801f460:	68c5      	ldr	r5, [r0, #12]
 801f462:	68cc      	ldr	r4, [r1, #12]
 801f464:	42a5      	cmp	r5, r4
 801f466:	d103      	bne.n	801f470 <x509_check_time+0x3c>
        before->hour == after->hour &&
 801f468:	6905      	ldr	r5, [r0, #16]
 801f46a:	690c      	ldr	r4, [r1, #16]
 801f46c:	42a5      	cmp	r5, r4
 801f46e:	dc10      	bgt.n	801f492 <x509_check_time+0x5e>
        before->min   > after->min  )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f470:	429a      	cmp	r2, r3
 801f472:	d110      	bne.n	801f496 <x509_check_time+0x62>
        before->day  == after->day  &&
 801f474:	68c2      	ldr	r2, [r0, #12]
 801f476:	68cb      	ldr	r3, [r1, #12]
 801f478:	429a      	cmp	r2, r3
 801f47a:	d10c      	bne.n	801f496 <x509_check_time+0x62>
        before->hour == after->hour &&
 801f47c:	6902      	ldr	r2, [r0, #16]
 801f47e:	690b      	ldr	r3, [r1, #16]
 801f480:	429a      	cmp	r2, r3
 801f482:	d108      	bne.n	801f496 <x509_check_time+0x62>
        before->min  == after->min  &&
 801f484:	6940      	ldr	r0, [r0, #20]
 801f486:	694b      	ldr	r3, [r1, #20]
 801f488:	4298      	cmp	r0, r3
 801f48a:	bfd4      	ite	le
 801f48c:	2000      	movle	r0, #0
 801f48e:	2001      	movgt	r0, #1
        before->sec   > after->sec  )
        return( 1 );

    return( 0 );
}
 801f490:	bd30      	pop	{r4, r5, pc}
        return( 1 );
 801f492:	2001      	movs	r0, #1
 801f494:	e7fc      	b.n	801f490 <x509_check_time+0x5c>
    return( 0 );
 801f496:	2000      	movs	r0, #0
 801f498:	e7fa      	b.n	801f490 <x509_check_time+0x5c>

0801f49a <x509_get_current_time>:
{
 801f49a:	b513      	push	{r0, r1, r4, lr}
 801f49c:	4604      	mov	r4, r0
    tt = mbedtls_time( NULL );
 801f49e:	2000      	movs	r0, #0
 801f4a0:	f7e3 fedc 	bl	800325c <time>
 801f4a4:	e9cd 0100 	strd	r0, r1, [sp]
    lt = gmtime( &tt );
 801f4a8:	4668      	mov	r0, sp
 801f4aa:	f002 fed1 	bl	8022250 <gmtime>
    if( lt == NULL )
 801f4ae:	b188      	cbz	r0, 801f4d4 <x509_get_current_time+0x3a>
        now->year = lt->tm_year + 1900;
 801f4b0:	6943      	ldr	r3, [r0, #20]
 801f4b2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f4b6:	6023      	str	r3, [r4, #0]
        now->mon  = lt->tm_mon  + 1;
 801f4b8:	6903      	ldr	r3, [r0, #16]
 801f4ba:	3301      	adds	r3, #1
 801f4bc:	6063      	str	r3, [r4, #4]
        now->day  = lt->tm_mday;
 801f4be:	68c3      	ldr	r3, [r0, #12]
 801f4c0:	60a3      	str	r3, [r4, #8]
        now->hour = lt->tm_hour;
 801f4c2:	6883      	ldr	r3, [r0, #8]
 801f4c4:	60e3      	str	r3, [r4, #12]
        now->min  = lt->tm_min;
 801f4c6:	6843      	ldr	r3, [r0, #4]
 801f4c8:	6123      	str	r3, [r4, #16]
        now->sec  = lt->tm_sec;
 801f4ca:	6803      	ldr	r3, [r0, #0]
 801f4cc:	6163      	str	r3, [r4, #20]
    int ret = 0;
 801f4ce:	2000      	movs	r0, #0
}
 801f4d0:	b002      	add	sp, #8
 801f4d2:	bd10      	pop	{r4, pc}
        ret = -1;
 801f4d4:	f04f 30ff 	mov.w	r0, #4294967295
    return( ret );
 801f4d8:	e7fa      	b.n	801f4d0 <x509_get_current_time+0x36>
	...

0801f4dc <mbedtls_x509_get_serial>:
{
 801f4dc:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
 801f4de:	6803      	ldr	r3, [r0, #0]
{
 801f4e0:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 801f4e2:	1aca      	subs	r2, r1, r3
 801f4e4:	2a00      	cmp	r2, #0
{
 801f4e6:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 801f4e8:	dd16      	ble.n	801f518 <mbedtls_x509_get_serial+0x3c>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 801f4ea:	781a      	ldrb	r2, [r3, #0]
 801f4ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801f4f0:	2a02      	cmp	r2, #2
 801f4f2:	d113      	bne.n	801f51c <mbedtls_x509_get_serial+0x40>
    serial->tag = *(*p)++;
 801f4f4:	1c5a      	adds	r2, r3, #1
 801f4f6:	6002      	str	r2, [r0, #0]
 801f4f8:	462a      	mov	r2, r5
 801f4fa:	781b      	ldrb	r3, [r3, #0]
 801f4fc:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 801f500:	f7ee fdfe 	bl	800e100 <mbedtls_asn1_get_len>
 801f504:	b110      	cbz	r0, 801f50c <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 801f506:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
}
 801f50a:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
 801f50c:	6823      	ldr	r3, [r4, #0]
    *p += serial->len;
 801f50e:	686a      	ldr	r2, [r5, #4]
    serial->p = *p;
 801f510:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 801f512:	4413      	add	r3, r2
 801f514:	6023      	str	r3, [r4, #0]
    return( 0 );
 801f516:	e7f8      	b.n	801f50a <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 801f518:	4801      	ldr	r0, [pc, #4]	; (801f520 <mbedtls_x509_get_serial+0x44>)
 801f51a:	e7f6      	b.n	801f50a <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 801f51c:	4801      	ldr	r0, [pc, #4]	; (801f524 <mbedtls_x509_get_serial+0x48>)
 801f51e:	e7f4      	b.n	801f50a <mbedtls_x509_get_serial+0x2e>
 801f520:	ffffdd20 	.word	0xffffdd20
 801f524:	ffffdd1e 	.word	0xffffdd1e

0801f528 <mbedtls_x509_get_alg_null>:
{
 801f528:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
 801f52a:	f7ee ff57 	bl	800e3dc <mbedtls_asn1_get_alg_null>
 801f52e:	b108      	cbz	r0, 801f534 <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f530:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 801f534:	bd08      	pop	{r3, pc}

0801f536 <mbedtls_x509_get_alg>:
{
 801f536:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 801f538:	f7ee ff02 	bl	800e340 <mbedtls_asn1_get_alg>
 801f53c:	b108      	cbz	r0, 801f542 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f53e:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 801f542:	bd08      	pop	{r3, pc}

0801f544 <mbedtls_x509_get_rsassa_pss_params>:
{
 801f544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f548:	461d      	mov	r5, r3
    *md_alg = MBEDTLS_MD_SHA1;
 801f54a:	2304      	movs	r3, #4
 801f54c:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
 801f54e:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
 801f550:	2314      	movs	r3, #20
 801f552:	602b      	str	r3, [r5, #0]
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f554:	6803      	ldr	r3, [r0, #0]
 801f556:	2b30      	cmp	r3, #48	; 0x30
{
 801f558:	b08e      	sub	sp, #56	; 0x38
 801f55a:	4688      	mov	r8, r1
 801f55c:	4616      	mov	r6, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f55e:	d14e      	bne.n	801f5fe <mbedtls_x509_get_rsassa_pss_params+0xba>
    p = (unsigned char *) params->p;
 801f560:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
 801f562:	6844      	ldr	r4, [r0, #4]
    p = (unsigned char *) params->p;
 801f564:	9301      	str	r3, [sp, #4]
    end = p + params->len;
 801f566:	441c      	add	r4, r3
    if( p == end )
 801f568:	42a3      	cmp	r3, r4
 801f56a:	d103      	bne.n	801f574 <mbedtls_x509_get_rsassa_pss_params+0x30>
        return( 0 );
 801f56c:	2000      	movs	r0, #0
}
 801f56e:	b00e      	add	sp, #56	; 0x38
 801f570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f574:	23a0      	movs	r3, #160	; 0xa0
 801f576:	aa02      	add	r2, sp, #8
 801f578:	4621      	mov	r1, r4
 801f57a:	a801      	add	r0, sp, #4
 801f57c:	f7ee fe08 	bl	800e190 <mbedtls_asn1_get_tag>
 801f580:	b9b0      	cbnz	r0, 801f5b0 <mbedtls_x509_get_rsassa_pss_params+0x6c>
        end2 = p + len;
 801f582:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
 801f586:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
 801f588:	aa05      	add	r2, sp, #20
 801f58a:	4639      	mov	r1, r7
 801f58c:	a801      	add	r0, sp, #4
 801f58e:	f7ff ffcb 	bl	801f528 <mbedtls_x509_get_alg_null>
 801f592:	2800      	cmp	r0, #0
 801f594:	d1eb      	bne.n	801f56e <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
 801f596:	4641      	mov	r1, r8
 801f598:	a805      	add	r0, sp, #20
 801f59a:	f7f6 f897 	bl	80156cc <mbedtls_oid_get_md_alg>
 801f59e:	b110      	cbz	r0, 801f5a6 <mbedtls_x509_get_rsassa_pss_params+0x62>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f5a0:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
 801f5a4:	e7e3      	b.n	801f56e <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( p != end2 )
 801f5a6:	9b01      	ldr	r3, [sp, #4]
 801f5a8:	42bb      	cmp	r3, r7
 801f5aa:	d004      	beq.n	801f5b6 <mbedtls_x509_get_rsassa_pss_params+0x72>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f5ac:	4853      	ldr	r0, [pc, #332]	; (801f6fc <mbedtls_x509_get_rsassa_pss_params+0x1b8>)
 801f5ae:	e7de      	b.n	801f56e <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f5b0:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f5b4:	d1f4      	bne.n	801f5a0 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    if( p == end )
 801f5b6:	9b01      	ldr	r3, [sp, #4]
 801f5b8:	42a3      	cmp	r3, r4
 801f5ba:	d0d7      	beq.n	801f56c <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f5bc:	23a1      	movs	r3, #161	; 0xa1
 801f5be:	aa02      	add	r2, sp, #8
 801f5c0:	4621      	mov	r1, r4
 801f5c2:	a801      	add	r0, sp, #4
 801f5c4:	f7ee fde4 	bl	800e190 <mbedtls_asn1_get_tag>
 801f5c8:	2800      	cmp	r0, #0
 801f5ca:	f040 8087 	bne.w	801f6dc <mbedtls_x509_get_rsassa_pss_params+0x198>
        end2 = p + len;
 801f5ce:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
 801f5d2:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
 801f5d4:	aa05      	add	r2, sp, #20
 801f5d6:	ab08      	add	r3, sp, #32
 801f5d8:	4639      	mov	r1, r7
 801f5da:	a801      	add	r0, sp, #4
 801f5dc:	f7ff ffab 	bl	801f536 <mbedtls_x509_get_alg>
 801f5e0:	2800      	cmp	r0, #0
 801f5e2:	d1c4      	bne.n	801f56e <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
 801f5e4:	9a06      	ldr	r2, [sp, #24]
 801f5e6:	2a09      	cmp	r2, #9
 801f5e8:	f040 8086 	bne.w	801f6f8 <mbedtls_x509_get_rsassa_pss_params+0x1b4>
 801f5ec:	9907      	ldr	r1, [sp, #28]
 801f5ee:	4844      	ldr	r0, [pc, #272]	; (801f700 <mbedtls_x509_get_rsassa_pss_params+0x1bc>)
 801f5f0:	f002 ff38 	bl	8022464 <memcmp>
 801f5f4:	2800      	cmp	r0, #0
 801f5f6:	d17f      	bne.n	801f6f8 <mbedtls_x509_get_rsassa_pss_params+0x1b4>
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f5f8:	9b08      	ldr	r3, [sp, #32]
 801f5fa:	2b30      	cmp	r3, #48	; 0x30
 801f5fc:	d001      	beq.n	801f602 <mbedtls_x509_get_rsassa_pss_params+0xbe>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f5fe:	4841      	ldr	r0, [pc, #260]	; (801f704 <mbedtls_x509_get_rsassa_pss_params+0x1c0>)
 801f600:	e7b5      	b.n	801f56e <mbedtls_x509_get_rsassa_pss_params+0x2a>
    p = (unsigned char *) alg->p;
 801f602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
 801f604:	9a09      	ldr	r2, [sp, #36]	; 0x24
    p = (unsigned char *) alg->p;
 801f606:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
 801f608:	eb03 0802 	add.w	r8, r3, r2
    if( p >= end )
 801f60c:	4543      	cmp	r3, r8
 801f60e:	d263      	bcs.n	801f6d8 <mbedtls_x509_get_rsassa_pss_params+0x194>
    md_oid.tag = *p;
 801f610:	781b      	ldrb	r3, [r3, #0]
 801f612:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 801f614:	aa0c      	add	r2, sp, #48	; 0x30
 801f616:	2306      	movs	r3, #6
 801f618:	4641      	mov	r1, r8
 801f61a:	a803      	add	r0, sp, #12
 801f61c:	f7ee fdb8 	bl	800e190 <mbedtls_asn1_get_tag>
 801f620:	2800      	cmp	r0, #0
 801f622:	d03e      	beq.n	801f6a2 <mbedtls_x509_get_rsassa_pss_params+0x15e>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f624:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
 801f628:	2800      	cmp	r0, #0
 801f62a:	d1a0      	bne.n	801f56e <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( p != end2 )
 801f62c:	9b01      	ldr	r3, [sp, #4]
 801f62e:	42bb      	cmp	r3, r7
 801f630:	d1bc      	bne.n	801f5ac <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
 801f632:	9b01      	ldr	r3, [sp, #4]
 801f634:	42a3      	cmp	r3, r4
 801f636:	d099      	beq.n	801f56c <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f638:	23a2      	movs	r3, #162	; 0xa2
 801f63a:	aa02      	add	r2, sp, #8
 801f63c:	4621      	mov	r1, r4
 801f63e:	a801      	add	r0, sp, #4
 801f640:	f7ee fda6 	bl	800e190 <mbedtls_asn1_get_tag>
 801f644:	2800      	cmp	r0, #0
 801f646:	d14d      	bne.n	801f6e4 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
        end2 = p + len;
 801f648:	e9dd 6101 	ldrd	r6, r1, [sp, #4]
 801f64c:	440e      	add	r6, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
 801f64e:	462a      	mov	r2, r5
 801f650:	4631      	mov	r1, r6
 801f652:	a801      	add	r0, sp, #4
 801f654:	f7ee fdc8 	bl	800e1e8 <mbedtls_asn1_get_int>
 801f658:	2800      	cmp	r0, #0
 801f65a:	d1a1      	bne.n	801f5a0 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
 801f65c:	9b01      	ldr	r3, [sp, #4]
 801f65e:	42b3      	cmp	r3, r6
 801f660:	d1a4      	bne.n	801f5ac <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
 801f662:	9b01      	ldr	r3, [sp, #4]
 801f664:	42a3      	cmp	r3, r4
 801f666:	d081      	beq.n	801f56c <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f668:	23a3      	movs	r3, #163	; 0xa3
 801f66a:	aa02      	add	r2, sp, #8
 801f66c:	4621      	mov	r1, r4
 801f66e:	a801      	add	r0, sp, #4
 801f670:	f7ee fd8e 	bl	800e190 <mbedtls_asn1_get_tag>
 801f674:	2800      	cmp	r0, #0
 801f676:	d13b      	bne.n	801f6f0 <mbedtls_x509_get_rsassa_pss_params+0x1ac>
        end2 = p + len;
 801f678:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
 801f67c:	440d      	add	r5, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
 801f67e:	aa0b      	add	r2, sp, #44	; 0x2c
 801f680:	4629      	mov	r1, r5
 801f682:	a801      	add	r0, sp, #4
 801f684:	f7ee fdb0 	bl	800e1e8 <mbedtls_asn1_get_int>
 801f688:	2800      	cmp	r0, #0
 801f68a:	d189      	bne.n	801f5a0 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
 801f68c:	9b01      	ldr	r3, [sp, #4]
 801f68e:	42ab      	cmp	r3, r5
 801f690:	d18c      	bne.n	801f5ac <mbedtls_x509_get_rsassa_pss_params+0x68>
        if( trailer_field != 1 )
 801f692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f694:	2b01      	cmp	r3, #1
 801f696:	d129      	bne.n	801f6ec <mbedtls_x509_get_rsassa_pss_params+0x1a8>
    if( p != end )
 801f698:	9b01      	ldr	r3, [sp, #4]
 801f69a:	42a3      	cmp	r3, r4
 801f69c:	f43f af66 	beq.w	801f56c <mbedtls_x509_get_rsassa_pss_params+0x28>
 801f6a0:	e784      	b.n	801f5ac <mbedtls_x509_get_rsassa_pss_params+0x68>
    md_oid.p = p;
 801f6a2:	9b03      	ldr	r3, [sp, #12]
    p += md_oid.len;
 801f6a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    md_oid.p = p;
 801f6a6:	930d      	str	r3, [sp, #52]	; 0x34
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f6a8:	4631      	mov	r1, r6
    p += md_oid.len;
 801f6aa:	4413      	add	r3, r2
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f6ac:	a80b      	add	r0, sp, #44	; 0x2c
    p += md_oid.len;
 801f6ae:	9303      	str	r3, [sp, #12]
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f6b0:	f7f6 f80c 	bl	80156cc <mbedtls_oid_get_md_alg>
 801f6b4:	2800      	cmp	r0, #0
 801f6b6:	d1b5      	bne.n	801f624 <mbedtls_x509_get_rsassa_pss_params+0xe0>
    if( p == end )
 801f6b8:	9b03      	ldr	r3, [sp, #12]
 801f6ba:	4598      	cmp	r8, r3
 801f6bc:	d0b6      	beq.n	801f62c <mbedtls_x509_get_rsassa_pss_params+0xe8>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
 801f6be:	2305      	movs	r3, #5
 801f6c0:	aa04      	add	r2, sp, #16
 801f6c2:	4641      	mov	r1, r8
 801f6c4:	a803      	add	r0, sp, #12
 801f6c6:	f7ee fd63 	bl	800e190 <mbedtls_asn1_get_tag>
 801f6ca:	9b04      	ldr	r3, [sp, #16]
 801f6cc:	4303      	orrs	r3, r0
 801f6ce:	d1a9      	bne.n	801f624 <mbedtls_x509_get_rsassa_pss_params+0xe0>
    if( p != end )
 801f6d0:	9b03      	ldr	r3, [sp, #12]
 801f6d2:	4598      	cmp	r8, r3
 801f6d4:	d0aa      	beq.n	801f62c <mbedtls_x509_get_rsassa_pss_params+0xe8>
 801f6d6:	e769      	b.n	801f5ac <mbedtls_x509_get_rsassa_pss_params+0x68>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f6d8:	480b      	ldr	r0, [pc, #44]	; (801f708 <mbedtls_x509_get_rsassa_pss_params+0x1c4>)
 801f6da:	e748      	b.n	801f56e <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f6dc:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f6e0:	d0a7      	beq.n	801f632 <mbedtls_x509_get_rsassa_pss_params+0xee>
 801f6e2:	e75d      	b.n	801f5a0 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f6e4:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f6e8:	d0bb      	beq.n	801f662 <mbedtls_x509_get_rsassa_pss_params+0x11e>
 801f6ea:	e759      	b.n	801f5a0 <mbedtls_x509_get_rsassa_pss_params+0x5c>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f6ec:	4807      	ldr	r0, [pc, #28]	; (801f70c <mbedtls_x509_get_rsassa_pss_params+0x1c8>)
 801f6ee:	e73e      	b.n	801f56e <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f6f0:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f6f4:	d0d0      	beq.n	801f698 <mbedtls_x509_get_rsassa_pss_params+0x154>
 801f6f6:	e753      	b.n	801f5a0 <mbedtls_x509_get_rsassa_pss_params+0x5c>
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
 801f6f8:	4805      	ldr	r0, [pc, #20]	; (801f710 <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
 801f6fa:	e738      	b.n	801f56e <mbedtls_x509_get_rsassa_pss_params+0x2a>
 801f6fc:	ffffdc9a 	.word	0xffffdc9a
 801f700:	08032fb2 	.word	0x08032fb2
 801f704:	ffffdc9e 	.word	0xffffdc9e
 801f708:	ffffdca0 	.word	0xffffdca0
 801f70c:	ffffdd00 	.word	0xffffdd00
 801f710:	ffffdf52 	.word	0xffffdf52

0801f714 <mbedtls_x509_get_name>:
{
 801f714:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 801f718:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801f80c <mbedtls_x509_get_name+0xf8>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f71c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 801f810 <mbedtls_x509_get_name+0xfc>
{
 801f720:	4604      	mov	r4, r0
 801f722:	460f      	mov	r7, r1
 801f724:	4692      	mov	sl, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 801f726:	2331      	movs	r3, #49	; 0x31
 801f728:	466a      	mov	r2, sp
 801f72a:	4639      	mov	r1, r7
 801f72c:	4620      	mov	r0, r4
 801f72e:	f7ee fd2f 	bl	800e190 <mbedtls_asn1_get_tag>
 801f732:	b120      	cbz	r0, 801f73e <mbedtls_x509_get_name+0x2a>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 801f734:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
 801f738:	b002      	add	sp, #8
 801f73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        end_set  = *p + set_len;
 801f73e:	6826      	ldr	r6, [r4, #0]
 801f740:	9b00      	ldr	r3, [sp, #0]
 801f742:	4655      	mov	r5, sl
 801f744:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801f746:	2330      	movs	r3, #48	; 0x30
 801f748:	aa01      	add	r2, sp, #4
 801f74a:	4631      	mov	r1, r6
 801f74c:	4620      	mov	r0, r4
 801f74e:	f7ee fd1f 	bl	800e190 <mbedtls_asn1_get_tag>
 801f752:	b190      	cbz	r0, 801f77a <mbedtls_x509_get_name+0x66>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 801f754:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 801f758:	2800      	cmp	r0, #0
 801f75a:	d1ed      	bne.n	801f738 <mbedtls_x509_get_name+0x24>
            if( *p == end_set )
 801f75c:	6823      	ldr	r3, [r4, #0]
 801f75e:	42b3      	cmp	r3, r6
 801f760:	d040      	beq.n	801f7e4 <mbedtls_x509_get_name+0xd0>
            cur->next_merged = 1;
 801f762:	2001      	movs	r0, #1
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f764:	f8d8 3000 	ldr.w	r3, [r8]
            cur->next_merged = 1;
 801f768:	7728      	strb	r0, [r5, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f76a:	2120      	movs	r1, #32
 801f76c:	4798      	blx	r3
 801f76e:	61a8      	str	r0, [r5, #24]
            if( cur->next == NULL )
 801f770:	b908      	cbnz	r0, 801f776 <mbedtls_x509_get_name+0x62>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801f772:	4823      	ldr	r0, [pc, #140]	; (801f800 <mbedtls_x509_get_name+0xec>)
 801f774:	e7e0      	b.n	801f738 <mbedtls_x509_get_name+0x24>
 801f776:	4605      	mov	r5, r0
 801f778:	e7e5      	b.n	801f746 <mbedtls_x509_get_name+0x32>
    if( ( end - *p ) < 1 )
 801f77a:	6823      	ldr	r3, [r4, #0]
 801f77c:	1af2      	subs	r2, r6, r3
 801f77e:	2a00      	cmp	r2, #0
 801f780:	dc01      	bgt.n	801f786 <mbedtls_x509_get_name+0x72>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 801f782:	4820      	ldr	r0, [pc, #128]	; (801f804 <mbedtls_x509_get_name+0xf0>)
 801f784:	e7d8      	b.n	801f738 <mbedtls_x509_get_name+0x24>
    oid->tag = **p;
 801f786:	462a      	mov	r2, r5
 801f788:	781b      	ldrb	r3, [r3, #0]
 801f78a:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 801f78e:	4631      	mov	r1, r6
 801f790:	2306      	movs	r3, #6
 801f792:	4620      	mov	r0, r4
 801f794:	f7ee fcfc 	bl	800e190 <mbedtls_asn1_get_tag>
 801f798:	2800      	cmp	r0, #0
 801f79a:	d1db      	bne.n	801f754 <mbedtls_x509_get_name+0x40>
    oid->p = *p;
 801f79c:	6822      	ldr	r2, [r4, #0]
    *p += oid->len;
 801f79e:	6868      	ldr	r0, [r5, #4]
    oid->p = *p;
 801f7a0:	60aa      	str	r2, [r5, #8]
    *p += oid->len;
 801f7a2:	1813      	adds	r3, r2, r0
    if( ( end - *p ) < 1 )
 801f7a4:	1af1      	subs	r1, r6, r3
 801f7a6:	2900      	cmp	r1, #0
    *p += oid->len;
 801f7a8:	6023      	str	r3, [r4, #0]
    if( ( end - *p ) < 1 )
 801f7aa:	ddea      	ble.n	801f782 <mbedtls_x509_get_name+0x6e>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 801f7ac:	5c11      	ldrb	r1, [r2, r0]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 801f7ae:	291e      	cmp	r1, #30
 801f7b0:	d816      	bhi.n	801f7e0 <mbedtls_x509_get_name+0xcc>
 801f7b2:	fa29 f101 	lsr.w	r1, r9, r1
 801f7b6:	07c9      	lsls	r1, r1, #31
 801f7b8:	d512      	bpl.n	801f7e0 <mbedtls_x509_get_name+0xcc>
    val->tag = *(*p)++;
 801f7ba:	3301      	adds	r3, #1
 801f7bc:	6023      	str	r3, [r4, #0]
 801f7be:	5c13      	ldrb	r3, [r2, r0]
 801f7c0:	60eb      	str	r3, [r5, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 801f7c2:	f105 0210 	add.w	r2, r5, #16
 801f7c6:	4631      	mov	r1, r6
 801f7c8:	4620      	mov	r0, r4
 801f7ca:	f7ee fc99 	bl	800e100 <mbedtls_asn1_get_len>
 801f7ce:	2800      	cmp	r0, #0
 801f7d0:	d1c0      	bne.n	801f754 <mbedtls_x509_get_name+0x40>
    val->p = *p;
 801f7d2:	6823      	ldr	r3, [r4, #0]
    *p += val->len;
 801f7d4:	692a      	ldr	r2, [r5, #16]
    val->p = *p;
 801f7d6:	616b      	str	r3, [r5, #20]
    *p += val->len;
 801f7d8:	4413      	add	r3, r2
 801f7da:	6023      	str	r3, [r4, #0]
    cur->next = NULL;
 801f7dc:	61a8      	str	r0, [r5, #24]
    return( 0 );
 801f7de:	e7bd      	b.n	801f75c <mbedtls_x509_get_name+0x48>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 801f7e0:	4809      	ldr	r0, [pc, #36]	; (801f808 <mbedtls_x509_get_name+0xf4>)
 801f7e2:	e7a9      	b.n	801f738 <mbedtls_x509_get_name+0x24>
        if( *p == end )
 801f7e4:	42b7      	cmp	r7, r6
 801f7e6:	d009      	beq.n	801f7fc <mbedtls_x509_get_name+0xe8>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f7e8:	f8d8 3000 	ldr.w	r3, [r8]
 801f7ec:	2120      	movs	r1, #32
 801f7ee:	2001      	movs	r0, #1
 801f7f0:	4798      	blx	r3
 801f7f2:	4682      	mov	sl, r0
 801f7f4:	61a8      	str	r0, [r5, #24]
        if( cur->next == NULL )
 801f7f6:	2800      	cmp	r0, #0
 801f7f8:	d195      	bne.n	801f726 <mbedtls_x509_get_name+0x12>
 801f7fa:	e7ba      	b.n	801f772 <mbedtls_x509_get_name+0x5e>
            return( 0 );
 801f7fc:	2000      	movs	r0, #0
 801f7fe:	e79b      	b.n	801f738 <mbedtls_x509_get_name+0x24>
 801f800:	ffffd780 	.word	0xffffd780
 801f804:	ffffdc20 	.word	0xffffdc20
 801f808:	ffffdc1e 	.word	0xffffdc1e
 801f80c:	50581008 	.word	0x50581008
 801f810:	200005a0 	.word	0x200005a0

0801f814 <mbedtls_x509_get_time>:
    if( ( end - *p ) < 1 )
 801f814:	6803      	ldr	r3, [r0, #0]
{
 801f816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f818:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
 801f81a:	1aca      	subs	r2, r1, r3
 801f81c:	2a00      	cmp	r2, #0
{
 801f81e:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 801f820:	f340 809b 	ble.w	801f95a <mbedtls_x509_get_time+0x146>
    tag = **p;
 801f824:	781a      	ldrb	r2, [r3, #0]
    if( tag == MBEDTLS_ASN1_UTC_TIME )
 801f826:	2a17      	cmp	r2, #23
 801f828:	d00e      	beq.n	801f848 <mbedtls_x509_get_time+0x34>
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 801f82a:	2a18      	cmp	r2, #24
 801f82c:	f040 8097 	bne.w	801f95e <mbedtls_x509_get_time+0x14a>
        year_len = 4;
 801f830:	2604      	movs	r6, #4
    (*p)++;
 801f832:	3301      	adds	r3, #1
 801f834:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 801f836:	aa01      	add	r2, sp, #4
 801f838:	4628      	mov	r0, r5
 801f83a:	f7ee fc61 	bl	800e100 <mbedtls_asn1_get_len>
    if( ret != 0 )
 801f83e:	b128      	cbz	r0, 801f84c <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 801f840:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
}
 801f844:	b003      	add	sp, #12
 801f846:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
 801f848:	2602      	movs	r6, #2
 801f84a:	e7f2      	b.n	801f832 <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
 801f84c:	9f01      	ldr	r7, [sp, #4]
    if ( len < yearlen + 8 )
 801f84e:	f106 0308 	add.w	r3, r6, #8
 801f852:	429f      	cmp	r7, r3
 801f854:	d201      	bcs.n	801f85a <mbedtls_x509_get_time+0x46>
 801f856:	4843      	ldr	r0, [pc, #268]	; (801f964 <mbedtls_x509_get_time+0x150>)
 801f858:	e7f4      	b.n	801f844 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 801f85a:	4622      	mov	r2, r4
 801f85c:	4631      	mov	r1, r6
 801f85e:	4628      	mov	r0, r5
 801f860:	f7ff fdcc 	bl	801f3fc <x509_parse_int>
 801f864:	2800      	cmp	r0, #0
 801f866:	d1ed      	bne.n	801f844 <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
 801f868:	2e02      	cmp	r6, #2
 801f86a:	d108      	bne.n	801f87e <mbedtls_x509_get_time+0x6a>
        if ( tm->year < 50 )
 801f86c:	6823      	ldr	r3, [r4, #0]
 801f86e:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 801f870:	bfdc      	itt	le
 801f872:	3364      	addle	r3, #100	; 0x64
 801f874:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
 801f876:	6823      	ldr	r3, [r4, #0]
 801f878:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f87c:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 801f87e:	1d22      	adds	r2, r4, #4
 801f880:	2102      	movs	r1, #2
 801f882:	4628      	mov	r0, r5
 801f884:	f7ff fdba 	bl	801f3fc <x509_parse_int>
 801f888:	2800      	cmp	r0, #0
 801f88a:	d1db      	bne.n	801f844 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 801f88c:	f104 0208 	add.w	r2, r4, #8
 801f890:	2102      	movs	r1, #2
 801f892:	4628      	mov	r0, r5
 801f894:	f7ff fdb2 	bl	801f3fc <x509_parse_int>
 801f898:	2800      	cmp	r0, #0
 801f89a:	d1d3      	bne.n	801f844 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 801f89c:	f104 020c 	add.w	r2, r4, #12
 801f8a0:	2102      	movs	r1, #2
 801f8a2:	4628      	mov	r0, r5
 801f8a4:	f7ff fdaa 	bl	801f3fc <x509_parse_int>
 801f8a8:	2800      	cmp	r0, #0
 801f8aa:	d1cb      	bne.n	801f844 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 801f8ac:	f104 0210 	add.w	r2, r4, #16
 801f8b0:	2102      	movs	r1, #2
 801f8b2:	4628      	mov	r0, r5
 801f8b4:	f7ff fda2 	bl	801f3fc <x509_parse_int>
 801f8b8:	2800      	cmp	r0, #0
 801f8ba:	d1c3      	bne.n	801f844 <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
 801f8bc:	1bbe      	subs	r6, r7, r6
 801f8be:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
 801f8c2:	2b01      	cmp	r3, #1
 801f8c4:	d9c7      	bls.n	801f856 <mbedtls_x509_get_time+0x42>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 801f8c6:	f104 0214 	add.w	r2, r4, #20
 801f8ca:	2102      	movs	r1, #2
 801f8cc:	4628      	mov	r0, r5
 801f8ce:	f7ff fd95 	bl	801f3fc <x509_parse_int>
 801f8d2:	2800      	cmp	r0, #0
 801f8d4:	d1b6      	bne.n	801f844 <mbedtls_x509_get_time+0x30>
    if ( 1 == len && 'Z' == **p )
 801f8d6:	2e0b      	cmp	r6, #11
        len -= 2;
 801f8d8:	f1a6 030a 	sub.w	r3, r6, #10
    if ( 1 == len && 'Z' == **p )
 801f8dc:	d11f      	bne.n	801f91e <mbedtls_x509_get_time+0x10a>
 801f8de:	682b      	ldr	r3, [r5, #0]
 801f8e0:	781a      	ldrb	r2, [r3, #0]
 801f8e2:	2a5a      	cmp	r2, #90	; 0x5a
 801f8e4:	d1b7      	bne.n	801f856 <mbedtls_x509_get_time+0x42>
        (*p)++;
 801f8e6:	3301      	adds	r3, #1
 801f8e8:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
 801f8ea:	6822      	ldr	r2, [r4, #0]
 801f8ec:	f242 730f 	movw	r3, #9999	; 0x270f
 801f8f0:	429a      	cmp	r2, r3
 801f8f2:	d8b0      	bhi.n	801f856 <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 23,   t->hour );
 801f8f4:	68e3      	ldr	r3, [r4, #12]
 801f8f6:	2b17      	cmp	r3, #23
 801f8f8:	d8ad      	bhi.n	801f856 <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->min  );
 801f8fa:	6923      	ldr	r3, [r4, #16]
 801f8fc:	2b3b      	cmp	r3, #59	; 0x3b
 801f8fe:	d8aa      	bhi.n	801f856 <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->sec  );
 801f900:	6963      	ldr	r3, [r4, #20]
 801f902:	2b3b      	cmp	r3, #59	; 0x3b
 801f904:	d8a7      	bhi.n	801f856 <mbedtls_x509_get_time+0x42>
    switch( t->mon )
 801f906:	6863      	ldr	r3, [r4, #4]
 801f908:	3b01      	subs	r3, #1
 801f90a:	2b0b      	cmp	r3, #11
 801f90c:	d8a3      	bhi.n	801f856 <mbedtls_x509_get_time+0x42>
 801f90e:	e8df f003 	tbb	[pc, r3]
 801f912:	1709      	.short	0x1709
 801f914:	10091009 	.word	0x10091009
 801f918:	09100909 	.word	0x09100909
 801f91c:	0910      	.short	0x0910
    if ( 0 != len )
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d0e3      	beq.n	801f8ea <mbedtls_x509_get_time+0xd6>
 801f922:	e798      	b.n	801f856 <mbedtls_x509_get_time+0x42>
            CHECK_RANGE( 1, 31, t->day );
 801f924:	68a3      	ldr	r3, [r4, #8]
 801f926:	4a0f      	ldr	r2, [pc, #60]	; (801f964 <mbedtls_x509_get_time+0x150>)
 801f928:	3b01      	subs	r3, #1
 801f92a:	2b1e      	cmp	r3, #30
 801f92c:	bf88      	it	hi
 801f92e:	4610      	movhi	r0, r2
 801f930:	e788      	b.n	801f844 <mbedtls_x509_get_time+0x30>
            CHECK_RANGE( 1, 30, t->day );
 801f932:	68a3      	ldr	r3, [r4, #8]
 801f934:	4a0b      	ldr	r2, [pc, #44]	; (801f964 <mbedtls_x509_get_time+0x150>)
 801f936:	3b01      	subs	r3, #1
 801f938:	2b1d      	cmp	r3, #29
 801f93a:	bf88      	it	hi
 801f93c:	4610      	movhi	r0, r2
 801f93e:	e781      	b.n	801f844 <mbedtls_x509_get_time+0x30>
            CHECK_RANGE( 1, 28 + (t->year % 4 == 0), t->day );
 801f940:	68a3      	ldr	r3, [r4, #8]
 801f942:	2b00      	cmp	r3, #0
 801f944:	dd87      	ble.n	801f856 <mbedtls_x509_get_time+0x42>
 801f946:	f012 0f03 	tst.w	r2, #3
 801f94a:	4a06      	ldr	r2, [pc, #24]	; (801f964 <mbedtls_x509_get_time+0x150>)
 801f94c:	bf0c      	ite	eq
 801f94e:	211d      	moveq	r1, #29
 801f950:	211c      	movne	r1, #28
 801f952:	428b      	cmp	r3, r1
 801f954:	bfc8      	it	gt
 801f956:	4610      	movgt	r0, r2
 801f958:	e774      	b.n	801f844 <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801f95a:	4803      	ldr	r0, [pc, #12]	; (801f968 <mbedtls_x509_get_time+0x154>)
 801f95c:	e772      	b.n	801f844 <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801f95e:	4803      	ldr	r0, [pc, #12]	; (801f96c <mbedtls_x509_get_time+0x158>)
 801f960:	e770      	b.n	801f844 <mbedtls_x509_get_time+0x30>
 801f962:	bf00      	nop
 801f964:	ffffdc00 	.word	0xffffdc00
 801f968:	ffffdba0 	.word	0xffffdba0
 801f96c:	ffffdb9e 	.word	0xffffdb9e

0801f970 <mbedtls_x509_get_sig>:
{
 801f970:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f972:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 801f974:	6802      	ldr	r2, [r0, #0]
 801f976:	1a8b      	subs	r3, r1, r2
 801f978:	2b00      	cmp	r3, #0
{
 801f97a:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 801f97c:	dd11      	ble.n	801f9a2 <mbedtls_x509_get_sig+0x32>
    tag_type = **p;
 801f97e:	7816      	ldrb	r6, [r2, #0]
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801f980:	aa01      	add	r2, sp, #4
 801f982:	f7ee fc89 	bl	800e298 <mbedtls_asn1_get_bitstring_null>
 801f986:	b118      	cbz	r0, 801f990 <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 801f988:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
}
 801f98c:	b002      	add	sp, #8
 801f98e:	bd70      	pop	{r4, r5, r6, pc}
    sig->p = *p;
 801f990:	6823      	ldr	r3, [r4, #0]
 801f992:	60ab      	str	r3, [r5, #8]
    sig->len = len;
 801f994:	9a01      	ldr	r2, [sp, #4]
    *p += len;
 801f996:	6823      	ldr	r3, [r4, #0]
    tag_type = **p;
 801f998:	602e      	str	r6, [r5, #0]
    *p += len;
 801f99a:	4413      	add	r3, r2
    sig->len = len;
 801f99c:	606a      	str	r2, [r5, #4]
    *p += len;
 801f99e:	6023      	str	r3, [r4, #0]
    return( 0 );
 801f9a0:	e7f4      	b.n	801f98c <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 801f9a2:	4801      	ldr	r0, [pc, #4]	; (801f9a8 <mbedtls_x509_get_sig+0x38>)
 801f9a4:	e7f2      	b.n	801f98c <mbedtls_x509_get_sig+0x1c>
 801f9a6:	bf00      	nop
 801f9a8:	ffffdb20 	.word	0xffffdb20

0801f9ac <mbedtls_x509_get_sig_alg>:
{
 801f9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f9b4:	461d      	mov	r5, r3
    if( *sig_opts != NULL )
 801f9b6:	f8d8 3000 	ldr.w	r3, [r8]
{
 801f9ba:	460e      	mov	r6, r1
 801f9bc:	4617      	mov	r7, r2
    if( *sig_opts != NULL )
 801f9be:	bb73      	cbnz	r3, 801fa1e <mbedtls_x509_get_sig_alg+0x72>
    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 801f9c0:	462a      	mov	r2, r5
 801f9c2:	4639      	mov	r1, r7
 801f9c4:	f7f5 fe3d 	bl	8015642 <mbedtls_oid_get_sig_alg>
 801f9c8:	4604      	mov	r4, r0
 801f9ca:	b120      	cbz	r0, 801f9d6 <mbedtls_x509_get_sig_alg+0x2a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 801f9cc:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
}
 801f9d0:	4620      	mov	r0, r4
 801f9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801f9d6:	782b      	ldrb	r3, [r5, #0]
 801f9d8:	2b06      	cmp	r3, #6
 801f9da:	d116      	bne.n	801fa0a <mbedtls_x509_get_sig_alg+0x5e>
        pss_opts = mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
 801f9dc:	4b13      	ldr	r3, [pc, #76]	; (801fa2c <mbedtls_x509_get_sig_alg+0x80>)
 801f9de:	2108      	movs	r1, #8
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	2001      	movs	r0, #1
 801f9e4:	4798      	blx	r3
        if( pss_opts == NULL )
 801f9e6:	4605      	mov	r5, r0
 801f9e8:	b1d8      	cbz	r0, 801fa22 <mbedtls_x509_get_sig_alg+0x76>
        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
 801f9ea:	1d03      	adds	r3, r0, #4
 801f9ec:	4602      	mov	r2, r0
 801f9ee:	4639      	mov	r1, r7
 801f9f0:	4630      	mov	r0, r6
 801f9f2:	f7ff fda7 	bl	801f544 <mbedtls_x509_get_rsassa_pss_params>
        if( ret != 0 )
 801f9f6:	4604      	mov	r4, r0
 801f9f8:	b120      	cbz	r0, 801fa04 <mbedtls_x509_get_sig_alg+0x58>
            mbedtls_free( pss_opts );
 801f9fa:	4b0d      	ldr	r3, [pc, #52]	; (801fa30 <mbedtls_x509_get_sig_alg+0x84>)
 801f9fc:	4628      	mov	r0, r5
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	4798      	blx	r3
            return( ret );
 801fa02:	e7e5      	b.n	801f9d0 <mbedtls_x509_get_sig_alg+0x24>
        *sig_opts = (void *) pss_opts;
 801fa04:	f8c8 5000 	str.w	r5, [r8]
 801fa08:	e7e2      	b.n	801f9d0 <mbedtls_x509_get_sig_alg+0x24>
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 801fa0a:	6833      	ldr	r3, [r6, #0]
 801fa0c:	2b05      	cmp	r3, #5
 801fa0e:	d000      	beq.n	801fa12 <mbedtls_x509_get_sig_alg+0x66>
 801fa10:	b94b      	cbnz	r3, 801fa26 <mbedtls_x509_get_sig_alg+0x7a>
 801fa12:	6872      	ldr	r2, [r6, #4]
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801fa14:	4b07      	ldr	r3, [pc, #28]	; (801fa34 <mbedtls_x509_get_sig_alg+0x88>)
 801fa16:	2a00      	cmp	r2, #0
 801fa18:	bf18      	it	ne
 801fa1a:	461c      	movne	r4, r3
 801fa1c:	e7d8      	b.n	801f9d0 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801fa1e:	4c06      	ldr	r4, [pc, #24]	; (801fa38 <mbedtls_x509_get_sig_alg+0x8c>)
 801fa20:	e7d6      	b.n	801f9d0 <mbedtls_x509_get_sig_alg+0x24>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801fa22:	4c06      	ldr	r4, [pc, #24]	; (801fa3c <mbedtls_x509_get_sig_alg+0x90>)
 801fa24:	e7d4      	b.n	801f9d0 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801fa26:	4c03      	ldr	r4, [pc, #12]	; (801fa34 <mbedtls_x509_get_sig_alg+0x88>)
 801fa28:	e7d2      	b.n	801f9d0 <mbedtls_x509_get_sig_alg+0x24>
 801fa2a:	bf00      	nop
 801fa2c:	200005a0 	.word	0x200005a0
 801fa30:	200005a4 	.word	0x200005a4
 801fa34:	ffffdd00 	.word	0xffffdd00
 801fa38:	ffffd800 	.word	0xffffd800
 801fa3c:	ffffd780 	.word	0xffffd780

0801fa40 <mbedtls_x509_get_ext>:
{
 801fa40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fa42:	4616      	mov	r6, r2
    if( *p == end )
 801fa44:	6802      	ldr	r2, [r0, #0]
 801fa46:	428a      	cmp	r2, r1
{
 801fa48:	4604      	mov	r4, r0
    if( *p == end )
 801fa4a:	d102      	bne.n	801fa52 <mbedtls_x509_get_ext+0x12>
        return( 0 );
 801fa4c:	2000      	movs	r0, #0
}
 801fa4e:	b002      	add	sp, #8
 801fa50:	bd70      	pop	{r4, r5, r6, pc}
    ext->tag = **p;
 801fa52:	7815      	ldrb	r5, [r2, #0]
 801fa54:	4632      	mov	r2, r6
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801fa56:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    ext->tag = **p;
 801fa5a:	f842 5b04 	str.w	r5, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801fa5e:	f7ee fb97 	bl	800e190 <mbedtls_asn1_get_tag>
 801fa62:	2800      	cmp	r0, #0
 801fa64:	d1f3      	bne.n	801fa4e <mbedtls_x509_get_ext+0xe>
    ext->p = *p;
 801fa66:	6825      	ldr	r5, [r4, #0]
    end = *p + ext->len;
 801fa68:	6871      	ldr	r1, [r6, #4]
    ext->p = *p;
 801fa6a:	60b5      	str	r5, [r6, #8]
    end = *p + ext->len;
 801fa6c:	440d      	add	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801fa6e:	2330      	movs	r3, #48	; 0x30
 801fa70:	aa01      	add	r2, sp, #4
 801fa72:	4629      	mov	r1, r5
 801fa74:	4620      	mov	r0, r4
 801fa76:	f7ee fb8b 	bl	800e190 <mbedtls_asn1_get_tag>
 801fa7a:	b110      	cbz	r0, 801fa82 <mbedtls_x509_get_ext+0x42>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801fa7c:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 801fa80:	e7e5      	b.n	801fa4e <mbedtls_x509_get_ext+0xe>
    if( end != *p + len )
 801fa82:	6823      	ldr	r3, [r4, #0]
 801fa84:	9a01      	ldr	r2, [sp, #4]
 801fa86:	4413      	add	r3, r2
 801fa88:	429d      	cmp	r5, r3
 801fa8a:	d0df      	beq.n	801fa4c <mbedtls_x509_get_ext+0xc>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801fa8c:	4800      	ldr	r0, [pc, #0]	; (801fa90 <mbedtls_x509_get_ext+0x50>)
 801fa8e:	e7de      	b.n	801fa4e <mbedtls_x509_get_ext+0xe>
 801fa90:	ffffda9a 	.word	0xffffda9a

0801fa94 <mbedtls_x509_dn_gets>:
{
 801fa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa98:	b0c3      	sub	sp, #268	; 0x10c
    const char *short_name = NULL;
 801fa9a:	f04f 0a00 	mov.w	sl, #0
    memset( s, 0, sizeof( s ) );
 801fa9e:	f10d 0908 	add.w	r9, sp, #8
{
 801faa2:	460f      	mov	r7, r1
 801faa4:	4690      	mov	r8, r2
    memset( s, 0, sizeof( s ) );
 801faa6:	4651      	mov	r1, sl
{
 801faa8:	4604      	mov	r4, r0
    memset( s, 0, sizeof( s ) );
 801faaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 801faae:	4648      	mov	r0, r9
    const char *short_name = NULL;
 801fab0:	f8cd a004 	str.w	sl, [sp, #4]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 801fab4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801fb90 <mbedtls_x509_dn_gets+0xfc>
    memset( s, 0, sizeof( s ) );
 801fab8:	f002 fd0a 	bl	80224d0 <memset>
    unsigned char c, merge = 0;
 801fabc:	4651      	mov	r1, sl
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 801fabe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801fb94 <mbedtls_x509_dn_gets+0x100>
    name = dn;
 801fac2:	4646      	mov	r6, r8
    n = size;
 801fac4:	463d      	mov	r5, r7
    while( name != NULL )
 801fac6:	b90e      	cbnz	r6, 801facc <mbedtls_x509_dn_gets+0x38>
    return( (int) ( size - n ) );
 801fac8:	1b78      	subs	r0, r7, r5
 801faca:	e011      	b.n	801faf0 <mbedtls_x509_dn_gets+0x5c>
        if( !name->oid.p )
 801facc:	68b3      	ldr	r3, [r6, #8]
 801face:	b90b      	cbnz	r3, 801fad4 <mbedtls_x509_dn_gets+0x40>
        name = name->next;
 801fad0:	69b6      	ldr	r6, [r6, #24]
 801fad2:	e7f8      	b.n	801fac6 <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
 801fad4:	4546      	cmp	r6, r8
 801fad6:	d012      	beq.n	801fafe <mbedtls_x509_dn_gets+0x6a>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 801fad8:	4b29      	ldr	r3, [pc, #164]	; (801fb80 <mbedtls_x509_dn_gets+0xec>)
 801fada:	4a2a      	ldr	r2, [pc, #168]	; (801fb84 <mbedtls_x509_dn_gets+0xf0>)
 801fadc:	4620      	mov	r0, r4
 801fade:	2900      	cmp	r1, #0
 801fae0:	bf08      	it	eq
 801fae2:	461a      	moveq	r2, r3
 801fae4:	4629      	mov	r1, r5
 801fae6:	f003 fee1 	bl	80238ac <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 801faea:	2800      	cmp	r0, #0
 801faec:	da03      	bge.n	801faf6 <mbedtls_x509_dn_gets+0x62>
 801faee:	4826      	ldr	r0, [pc, #152]	; (801fb88 <mbedtls_x509_dn_gets+0xf4>)
}
 801faf0:	b043      	add	sp, #268	; 0x10c
 801faf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
 801faf6:	42a8      	cmp	r0, r5
 801faf8:	d2f9      	bcs.n	801faee <mbedtls_x509_dn_gets+0x5a>
 801fafa:	1a2d      	subs	r5, r5, r0
 801fafc:	4404      	add	r4, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 801fafe:	a901      	add	r1, sp, #4
 801fb00:	4630      	mov	r0, r6
 801fb02:	f7f5 fd43 	bl	801558c <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
 801fb06:	bb08      	cbnz	r0, 801fb4c <mbedtls_x509_dn_gets+0xb8>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 801fb08:	9b01      	ldr	r3, [sp, #4]
 801fb0a:	465a      	mov	r2, fp
 801fb0c:	4629      	mov	r1, r5
 801fb0e:	4620      	mov	r0, r4
 801fb10:	f003 fecc 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fb14:	2800      	cmp	r0, #0
 801fb16:	dbea      	blt.n	801faee <mbedtls_x509_dn_gets+0x5a>
 801fb18:	42a8      	cmp	r0, r5
 801fb1a:	d2e8      	bcs.n	801faee <mbedtls_x509_dn_gets+0x5a>
 801fb1c:	1a2d      	subs	r5, r5, r0
 801fb1e:	4404      	add	r4, r0
        for( i = 0; i < name->val.len; i++ )
 801fb20:	2200      	movs	r2, #0
 801fb22:	4648      	mov	r0, r9
 801fb24:	6933      	ldr	r3, [r6, #16]
 801fb26:	4293      	cmp	r3, r2
 801fb28:	d816      	bhi.n	801fb58 <mbedtls_x509_dn_gets+0xc4>
        s[i] = '\0';
 801fb2a:	2300      	movs	r3, #0
 801fb2c:	f809 3002 	strb.w	r3, [r9, r2]
        ret = mbedtls_snprintf( p, n, "%s", s );
 801fb30:	4629      	mov	r1, r5
 801fb32:	4a16      	ldr	r2, [pc, #88]	; (801fb8c <mbedtls_x509_dn_gets+0xf8>)
 801fb34:	464b      	mov	r3, r9
 801fb36:	4620      	mov	r0, r4
 801fb38:	f003 feb8 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fb3c:	2800      	cmp	r0, #0
 801fb3e:	dbd6      	blt.n	801faee <mbedtls_x509_dn_gets+0x5a>
 801fb40:	42a8      	cmp	r0, r5
 801fb42:	d2d4      	bcs.n	801faee <mbedtls_x509_dn_gets+0x5a>
        merge = name->next_merged;
 801fb44:	7f31      	ldrb	r1, [r6, #28]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fb46:	1a2d      	subs	r5, r5, r0
 801fb48:	4404      	add	r4, r0
        merge = name->next_merged;
 801fb4a:	e7c1      	b.n	801fad0 <mbedtls_x509_dn_gets+0x3c>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 801fb4c:	4652      	mov	r2, sl
 801fb4e:	4629      	mov	r1, r5
 801fb50:	4620      	mov	r0, r4
 801fb52:	f003 feab 	bl	80238ac <sniprintf>
 801fb56:	e7dd      	b.n	801fb14 <mbedtls_x509_dn_gets+0x80>
            if( i >= sizeof( s ) - 1 )
 801fb58:	2aff      	cmp	r2, #255	; 0xff
 801fb5a:	d0e6      	beq.n	801fb2a <mbedtls_x509_dn_gets+0x96>
            c = name->val.p[i];
 801fb5c:	6973      	ldr	r3, [r6, #20]
 801fb5e:	5c9b      	ldrb	r3, [r3, r2]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 801fb60:	2b1f      	cmp	r3, #31
 801fb62:	d90b      	bls.n	801fb7c <mbedtls_x509_dn_gets+0xe8>
 801fb64:	2b7f      	cmp	r3, #127	; 0x7f
 801fb66:	d009      	beq.n	801fb7c <mbedtls_x509_dn_gets+0xe8>
 801fb68:	f103 017f 	add.w	r1, r3, #127	; 0x7f
 801fb6c:	b2c9      	uxtb	r1, r1
                 s[i] = '?';
 801fb6e:	291e      	cmp	r1, #30
 801fb70:	bf98      	it	ls
 801fb72:	233f      	movls	r3, #63	; 0x3f
 801fb74:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < name->val.len; i++ )
 801fb78:	3201      	adds	r2, #1
 801fb7a:	e7d3      	b.n	801fb24 <mbedtls_x509_dn_gets+0x90>
                 s[i] = '?';
 801fb7c:	233f      	movs	r3, #63	; 0x3f
 801fb7e:	e7f9      	b.n	801fb74 <mbedtls_x509_dn_gets+0xe0>
 801fb80:	08032fc0 	.word	0x08032fc0
 801fb84:	08032fbc 	.word	0x08032fbc
 801fb88:	ffffd680 	.word	0xffffd680
 801fb8c:	08031683 	.word	0x08031683
 801fb90:	08032fc3 	.word	0x08032fc3
 801fb94:	08032fc7 	.word	0x08032fc7

0801fb98 <mbedtls_x509_serial_gets>:
{
 801fb98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    nr = ( serial->len <= 32 )
 801fb9c:	f8d2 8004 	ldr.w	r8, [r2, #4]
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801fba0:	f8df a088 	ldr.w	sl, [pc, #136]	; 801fc2c <mbedtls_x509_serial_gets+0x94>
 801fba4:	f8df b088 	ldr.w	fp, [pc, #136]	; 801fc30 <mbedtls_x509_serial_gets+0x98>
{
 801fba8:	4691      	mov	r9, r2
        ? serial->len  : 28;
 801fbaa:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801fbae:	4a1c      	ldr	r2, [pc, #112]	; (801fc20 <mbedtls_x509_serial_gets+0x88>)
{
 801fbb0:	4607      	mov	r7, r0
 801fbb2:	460d      	mov	r5, r1
        ? serial->len  : 28;
 801fbb4:	bf28      	it	cs
 801fbb6:	f04f 081c 	movcs.w	r8, #28
    n = size;
 801fbba:	460c      	mov	r4, r1
    for( i = 0; i < nr; i++ )
 801fbbc:	2600      	movs	r6, #0
 801fbbe:	4546      	cmp	r6, r8
 801fbc0:	d10d      	bne.n	801fbde <mbedtls_x509_serial_gets+0x46>
    if( nr != serial->len )
 801fbc2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801fbc6:	42b3      	cmp	r3, r6
 801fbc8:	d007      	beq.n	801fbda <mbedtls_x509_serial_gets+0x42>
        ret = mbedtls_snprintf( p, n, "...." );
 801fbca:	4a16      	ldr	r2, [pc, #88]	; (801fc24 <mbedtls_x509_serial_gets+0x8c>)
 801fbcc:	4621      	mov	r1, r4
 801fbce:	4638      	mov	r0, r7
 801fbd0:	f003 fe6c 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fbd4:	2c04      	cmp	r4, #4
 801fbd6:	d919      	bls.n	801fc0c <mbedtls_x509_serial_gets+0x74>
 801fbd8:	3c04      	subs	r4, #4
    return( (int) ( size - n ) );
 801fbda:	1b28      	subs	r0, r5, r4
 801fbdc:	e017      	b.n	801fc0e <mbedtls_x509_serial_gets+0x76>
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 801fbde:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801fbe2:	b926      	cbnz	r6, 801fbee <mbedtls_x509_serial_gets+0x56>
 801fbe4:	f1b8 0f01 	cmp.w	r8, #1
 801fbe8:	d001      	beq.n	801fbee <mbedtls_x509_serial_gets+0x56>
 801fbea:	7819      	ldrb	r1, [r3, #0]
 801fbec:	b1b1      	cbz	r1, 801fc1c <mbedtls_x509_serial_gets+0x84>
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 801fbee:	f108 31ff 	add.w	r1, r8, #4294967295
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801fbf2:	42b1      	cmp	r1, r6
 801fbf4:	bf8c      	ite	hi
 801fbf6:	4651      	movhi	r1, sl
 801fbf8:	4659      	movls	r1, fp
 801fbfa:	5d9b      	ldrb	r3, [r3, r6]
 801fbfc:	9100      	str	r1, [sp, #0]
 801fbfe:	4638      	mov	r0, r7
 801fc00:	4621      	mov	r1, r4
 801fc02:	f003 fe53 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fc06:	2800      	cmp	r0, #0
 801fc08:	4a05      	ldr	r2, [pc, #20]	; (801fc20 <mbedtls_x509_serial_gets+0x88>)
 801fc0a:	da03      	bge.n	801fc14 <mbedtls_x509_serial_gets+0x7c>
 801fc0c:	4806      	ldr	r0, [pc, #24]	; (801fc28 <mbedtls_x509_serial_gets+0x90>)
}
 801fc0e:	b003      	add	sp, #12
 801fc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fc14:	42a0      	cmp	r0, r4
 801fc16:	d2f9      	bcs.n	801fc0c <mbedtls_x509_serial_gets+0x74>
 801fc18:	1a24      	subs	r4, r4, r0
 801fc1a:	4407      	add	r7, r0
    for( i = 0; i < nr; i++ )
 801fc1c:	3601      	adds	r6, #1
 801fc1e:	e7ce      	b.n	801fbbe <mbedtls_x509_serial_gets+0x26>
 801fc20:	08032fcb 	.word	0x08032fcb
 801fc24:	0802dedc 	.word	0x0802dedc
 801fc28:	ffffd680 	.word	0xffffd680
 801fc2c:	0802fe0a 	.word	0x0802fe0a
 801fc30:	08030466 	.word	0x08030466

0801fc34 <mbedtls_x509_sig_alg_gets>:
{
 801fc34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fc38:	4607      	mov	r7, r0
 801fc3a:	460c      	mov	r4, r1
 801fc3c:	4698      	mov	r8, r3
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801fc3e:	a903      	add	r1, sp, #12
    const char *desc = NULL;
 801fc40:	2300      	movs	r3, #0
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801fc42:	4610      	mov	r0, r2
{
 801fc44:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    const char *desc = NULL;
 801fc48:	9303      	str	r3, [sp, #12]
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801fc4a:	f7f5 fced 	bl	8015628 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 801fc4e:	b158      	cbz	r0, 801fc68 <mbedtls_x509_sig_alg_gets+0x34>
        ret = mbedtls_snprintf( p, n, "???"  );
 801fc50:	4a23      	ldr	r2, [pc, #140]	; (801fce0 <mbedtls_x509_sig_alg_gets+0xac>)
 801fc52:	4621      	mov	r1, r4
 801fc54:	4638      	mov	r0, r7
 801fc56:	f003 fe29 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fc5a:	2800      	cmp	r0, #0
        ret = mbedtls_snprintf( p, n, "%s", desc );
 801fc5c:	4605      	mov	r5, r0
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fc5e:	da0a      	bge.n	801fc76 <mbedtls_x509_sig_alg_gets+0x42>
 801fc60:	4820      	ldr	r0, [pc, #128]	; (801fce4 <mbedtls_x509_sig_alg_gets+0xb0>)
}
 801fc62:	b004      	add	sp, #16
 801fc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = mbedtls_snprintf( p, n, "%s", desc );
 801fc68:	9b03      	ldr	r3, [sp, #12]
 801fc6a:	4a1f      	ldr	r2, [pc, #124]	; (801fce8 <mbedtls_x509_sig_alg_gets+0xb4>)
 801fc6c:	4621      	mov	r1, r4
 801fc6e:	4638      	mov	r0, r7
 801fc70:	f003 fe1c 	bl	80238ac <sniprintf>
 801fc74:	e7f1      	b.n	801fc5a <mbedtls_x509_sig_alg_gets+0x26>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fc76:	42a0      	cmp	r0, r4
 801fc78:	d2f2      	bcs.n	801fc60 <mbedtls_x509_sig_alg_gets+0x2c>
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801fc7a:	f1b8 0f06 	cmp.w	r8, #6
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fc7e:	eba4 0600 	sub.w	r6, r4, r0
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801fc82:	d125      	bne.n	801fcd0 <mbedtls_x509_sig_alg_gets+0x9c>
        md_info = mbedtls_md_info_from_type( md_alg );
 801fc84:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801fc88:	f7f4 fe58 	bl	801493c <mbedtls_md_info_from_type>
 801fc8c:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
 801fc8e:	f899 0000 	ldrb.w	r0, [r9]
 801fc92:	f7f4 fe53 	bl	801493c <mbedtls_md_info_from_type>
 801fc96:	4682      	mov	sl, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fc98:	f1b8 0f00 	cmp.w	r8, #0
 801fc9c:	d01a      	beq.n	801fcd4 <mbedtls_x509_sig_alg_gets+0xa0>
                              md_info ? mbedtls_md_get_name( md_info ) : "???",
 801fc9e:	4640      	mov	r0, r8
 801fca0:	f7f4 ff9f 	bl	8014be2 <mbedtls_md_get_name>
 801fca4:	4680      	mov	r8, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fca6:	f1ba 0f00 	cmp.w	sl, #0
 801fcaa:	d016      	beq.n	801fcda <mbedtls_x509_sig_alg_gets+0xa6>
                              mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
 801fcac:	4650      	mov	r0, sl
 801fcae:	f7f4 ff98 	bl	8014be2 <mbedtls_md_get_name>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fcb2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801fcb6:	4a0d      	ldr	r2, [pc, #52]	; (801fcec <mbedtls_x509_sig_alg_gets+0xb8>)
 801fcb8:	e9cd 0300 	strd	r0, r3, [sp]
 801fcbc:	4631      	mov	r1, r6
 801fcbe:	4643      	mov	r3, r8
 801fcc0:	1978      	adds	r0, r7, r5
 801fcc2:	f003 fdf3 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fcc6:	2800      	cmp	r0, #0
 801fcc8:	dbca      	blt.n	801fc60 <mbedtls_x509_sig_alg_gets+0x2c>
 801fcca:	42b0      	cmp	r0, r6
 801fccc:	d2c8      	bcs.n	801fc60 <mbedtls_x509_sig_alg_gets+0x2c>
 801fcce:	1a36      	subs	r6, r6, r0
    return( (int)( size - n ) );
 801fcd0:	1ba0      	subs	r0, r4, r6
 801fcd2:	e7c6      	b.n	801fc62 <mbedtls_x509_sig_alg_gets+0x2e>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fcd4:	f8df 8008 	ldr.w	r8, [pc, #8]	; 801fce0 <mbedtls_x509_sig_alg_gets+0xac>
 801fcd8:	e7e5      	b.n	801fca6 <mbedtls_x509_sig_alg_gets+0x72>
 801fcda:	4801      	ldr	r0, [pc, #4]	; (801fce0 <mbedtls_x509_sig_alg_gets+0xac>)
 801fcdc:	e7e9      	b.n	801fcb2 <mbedtls_x509_sig_alg_gets+0x7e>
 801fcde:	bf00      	nop
 801fce0:	08032fd2 	.word	0x08032fd2
 801fce4:	ffffd680 	.word	0xffffd680
 801fce8:	08031683 	.word	0x08031683
 801fcec:	08032fd6 	.word	0x08032fd6

0801fcf0 <mbedtls_x509_key_size_helper>:
{
 801fcf0:	b510      	push	{r4, lr}
 801fcf2:	4613      	mov	r3, r2
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801fcf4:	4a06      	ldr	r2, [pc, #24]	; (801fd10 <mbedtls_x509_key_size_helper+0x20>)
{
 801fcf6:	460c      	mov	r4, r1
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801fcf8:	f003 fdd8 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fcfc:	2800      	cmp	r0, #0
 801fcfe:	db05      	blt.n	801fd0c <mbedtls_x509_key_size_helper+0x1c>
    return( 0 );
 801fd00:	4b04      	ldr	r3, [pc, #16]	; (801fd14 <mbedtls_x509_key_size_helper+0x24>)
 801fd02:	42a0      	cmp	r0, r4
 801fd04:	bf2c      	ite	cs
 801fd06:	4618      	movcs	r0, r3
 801fd08:	2000      	movcc	r0, #0
}
 801fd0a:	bd10      	pop	{r4, pc}
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fd0c:	4801      	ldr	r0, [pc, #4]	; (801fd14 <mbedtls_x509_key_size_helper+0x24>)
 801fd0e:	e7fc      	b.n	801fd0a <mbedtls_x509_key_size_helper+0x1a>
 801fd10:	08032fed 	.word	0x08032fed
 801fd14:	ffffd680 	.word	0xffffd680

0801fd18 <mbedtls_x509_time_is_past>:

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
 801fd18:	b500      	push	{lr}
 801fd1a:	b089      	sub	sp, #36	; 0x24
 801fd1c:	9001      	str	r0, [sp, #4]
    mbedtls_x509_time now;

    if( x509_get_current_time( &now ) != 0 )
 801fd1e:	a802      	add	r0, sp, #8
 801fd20:	f7ff fbbb 	bl	801f49a <x509_get_current_time>
 801fd24:	b930      	cbnz	r0, 801fd34 <mbedtls_x509_time_is_past+0x1c>
        return( 1 );

    return( x509_check_time( &now, to ) );
 801fd26:	9901      	ldr	r1, [sp, #4]
 801fd28:	a802      	add	r0, sp, #8
 801fd2a:	f7ff fb83 	bl	801f434 <x509_check_time>
}
 801fd2e:	b009      	add	sp, #36	; 0x24
 801fd30:	f85d fb04 	ldr.w	pc, [sp], #4
        return( 1 );
 801fd34:	2001      	movs	r0, #1
 801fd36:	e7fa      	b.n	801fd2e <mbedtls_x509_time_is_past+0x16>

0801fd38 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
 801fd38:	b510      	push	{r4, lr}
 801fd3a:	b086      	sub	sp, #24
 801fd3c:	4604      	mov	r4, r0
    mbedtls_x509_time now;

    if( x509_get_current_time( &now ) != 0 )
 801fd3e:	4668      	mov	r0, sp
 801fd40:	f7ff fbab 	bl	801f49a <x509_get_current_time>
 801fd44:	b928      	cbnz	r0, 801fd52 <mbedtls_x509_time_is_future+0x1a>
        return( 1 );

    return( x509_check_time( from, &now ) );
 801fd46:	4669      	mov	r1, sp
 801fd48:	4620      	mov	r0, r4
 801fd4a:	f7ff fb73 	bl	801f434 <x509_check_time>
}
 801fd4e:	b006      	add	sp, #24
 801fd50:	bd10      	pop	{r4, pc}
        return( 1 );
 801fd52:	2001      	movs	r0, #1
 801fd54:	e7fb      	b.n	801fd4e <mbedtls_x509_time_is_future+0x16>

0801fd56 <mbedtls_x509_crl_init>:
/*
 * Initialize a CRL chain
 */
void mbedtls_x509_crl_init( mbedtls_x509_crl *crl )
{
    memset( crl, 0, sizeof(mbedtls_x509_crl) );
 801fd56:	22f4      	movs	r2, #244	; 0xf4
 801fd58:	2100      	movs	r1, #0
 801fd5a:	f002 bbb9 	b.w	80224d0 <memset>
	...

0801fd60 <mbedtls_x509_crl_free>:

/*
 * Unallocate all CRL data
 */
void mbedtls_x509_crl_free( mbedtls_x509_crl *crl )
{
 801fd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_crl_entry *entry_cur;
    mbedtls_x509_crl_entry *entry_prv;

    if( crl == NULL )
 801fd64:	4605      	mov	r5, r0
 801fd66:	b350      	cbz	r0, 801fdbe <mbedtls_x509_crl_free+0x5e>
        return;

    do
    {
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( crl_cur->sig_opts );
 801fd68:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801fe08 <mbedtls_x509_crl_free+0xa8>
 801fd6c:	4604      	mov	r4, r0
 801fd6e:	4646      	mov	r6, r8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fd70:	2700      	movs	r7, #0
        mbedtls_free( crl_cur->sig_opts );
 801fd72:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 801fd76:	f8d8 3000 	ldr.w	r3, [r8]
 801fd7a:	4798      	blx	r3
#endif

        name_cur = crl_cur->issuer.next;
 801fd7c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        while( name_cur != NULL )
 801fd7e:	bb00      	cbnz	r0, 801fdc2 <mbedtls_x509_crl_free+0x62>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        entry_cur = crl_cur->entry.next;
 801fd80:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
        while( entry_cur != NULL )
 801fd84:	bb58      	cbnz	r0, 801fdde <mbedtls_x509_crl_free+0x7e>
            entry_cur = entry_cur->next;
            mbedtls_zeroize( entry_prv, sizeof( mbedtls_x509_crl_entry ) );
            mbedtls_free( entry_prv );
        }

        if( crl_cur->raw.p != NULL )
 801fd86:	68a3      	ldr	r3, [r4, #8]
 801fd88:	b133      	cbz	r3, 801fd98 <mbedtls_x509_crl_free+0x38>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fd8a:	6862      	ldr	r2, [r4, #4]
 801fd8c:	441a      	add	r2, r3
 801fd8e:	4293      	cmp	r3, r2
 801fd90:	d133      	bne.n	801fdfa <mbedtls_x509_crl_free+0x9a>
        {
            mbedtls_zeroize( crl_cur->raw.p, crl_cur->raw.len );
            mbedtls_free( crl_cur->raw.p );
 801fd92:	6833      	ldr	r3, [r6, #0]
 801fd94:	68a0      	ldr	r0, [r4, #8]
 801fd96:	4798      	blx	r3
        }

        crl_cur = crl_cur->next;
 801fd98:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
    }
    while( crl_cur != NULL );
 801fd9c:	2c00      	cmp	r4, #0
 801fd9e:	d1e8      	bne.n	801fd72 <mbedtls_x509_crl_free+0x12>
 801fda0:	462f      	mov	r7, r5

    crl_cur = crl;
    do
    {
        crl_prv = crl_cur;
        crl_cur = crl_cur->next;
 801fda2:	4638      	mov	r0, r7
 801fda4:	f8d7 70f0 	ldr.w	r7, [r7, #240]	; 0xf0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fda8:	f100 02f4 	add.w	r2, r0, #244	; 0xf4
 801fdac:	4603      	mov	r3, r0
 801fdae:	4293      	cmp	r3, r2
 801fdb0:	d126      	bne.n	801fe00 <mbedtls_x509_crl_free+0xa0>

        mbedtls_zeroize( crl_prv, sizeof( mbedtls_x509_crl ) );
        if( crl_prv != crl )
 801fdb2:	4285      	cmp	r5, r0
 801fdb4:	d001      	beq.n	801fdba <mbedtls_x509_crl_free+0x5a>
            mbedtls_free( crl_prv );
 801fdb6:	6833      	ldr	r3, [r6, #0]
 801fdb8:	4798      	blx	r3
    }
    while( crl_cur != NULL );
 801fdba:	2f00      	cmp	r7, #0
 801fdbc:	d1f1      	bne.n	801fda2 <mbedtls_x509_crl_free+0x42>
}
 801fdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            name_cur = name_cur->next;
 801fdc2:	f8d0 9018 	ldr.w	r9, [r0, #24]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fdc6:	f100 0220 	add.w	r2, r0, #32
 801fdca:	4603      	mov	r3, r0
 801fdcc:	4293      	cmp	r3, r2
 801fdce:	d103      	bne.n	801fdd8 <mbedtls_x509_crl_free+0x78>
            mbedtls_free( name_prv );
 801fdd0:	6833      	ldr	r3, [r6, #0]
 801fdd2:	4798      	blx	r3
            name_cur = name_cur->next;
 801fdd4:	4648      	mov	r0, r9
 801fdd6:	e7d2      	b.n	801fd7e <mbedtls_x509_crl_free+0x1e>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fdd8:	f803 7b01 	strb.w	r7, [r3], #1
 801fddc:	e7f6      	b.n	801fdcc <mbedtls_x509_crl_free+0x6c>
            entry_cur = entry_cur->next;
 801fdde:	f8d0 903c 	ldr.w	r9, [r0, #60]	; 0x3c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fde2:	f100 0240 	add.w	r2, r0, #64	; 0x40
 801fde6:	4603      	mov	r3, r0
 801fde8:	4293      	cmp	r3, r2
 801fdea:	d103      	bne.n	801fdf4 <mbedtls_x509_crl_free+0x94>
            mbedtls_free( entry_prv );
 801fdec:	6833      	ldr	r3, [r6, #0]
 801fdee:	4798      	blx	r3
            entry_cur = entry_cur->next;
 801fdf0:	4648      	mov	r0, r9
 801fdf2:	e7c7      	b.n	801fd84 <mbedtls_x509_crl_free+0x24>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fdf4:	f803 7b01 	strb.w	r7, [r3], #1
 801fdf8:	e7f6      	b.n	801fde8 <mbedtls_x509_crl_free+0x88>
 801fdfa:	f803 7b01 	strb.w	r7, [r3], #1
 801fdfe:	e7c6      	b.n	801fd8e <mbedtls_x509_crl_free+0x2e>
 801fe00:	f803 4b01 	strb.w	r4, [r3], #1
 801fe04:	e7d3      	b.n	801fdae <mbedtls_x509_crl_free+0x4e>
 801fe06:	bf00      	nop
 801fe08:	200005a4 	.word	0x200005a4

0801fe0c <mbedtls_x509_crl_parse_der>:
{
 801fe0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe10:	460f      	mov	r7, r1
 801fe12:	b092      	sub	sp, #72	; 0x48
 801fe14:	4614      	mov	r4, r2
    if( crl == NULL || buf == NULL )
 801fe16:	4605      	mov	r5, r0
 801fe18:	2800      	cmp	r0, #0
 801fe1a:	f000 81bb 	beq.w	8020194 <mbedtls_x509_crl_parse_der+0x388>
 801fe1e:	2900      	cmp	r1, #0
 801fe20:	f000 81b8 	beq.w	8020194 <mbedtls_x509_crl_parse_der+0x388>
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 801fe24:	2300      	movs	r3, #0
 801fe26:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 801fe2a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 801fe2e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 801fe32:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 801fe36:	9311      	str	r3, [sp, #68]	; 0x44
    while( crl->version != 0 && crl->next != NULL )
 801fe38:	69ab      	ldr	r3, [r5, #24]
 801fe3a:	b1ab      	cbz	r3, 801fe68 <mbedtls_x509_crl_parse_der+0x5c>
 801fe3c:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 801fe40:	b963      	cbnz	r3, 801fe5c <mbedtls_x509_crl_parse_der+0x50>
        crl->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl ) );
 801fe42:	4ba8      	ldr	r3, [pc, #672]	; (80200e4 <mbedtls_x509_crl_parse_der+0x2d8>)
 801fe44:	21f4      	movs	r1, #244	; 0xf4
 801fe46:	681b      	ldr	r3, [r3, #0]
 801fe48:	2001      	movs	r0, #1
 801fe4a:	4798      	blx	r3
 801fe4c:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
        if( crl->next == NULL )
 801fe50:	b930      	cbnz	r0, 801fe60 <mbedtls_x509_crl_parse_der+0x54>
            mbedtls_x509_crl_free( crl );
 801fe52:	4628      	mov	r0, r5
 801fe54:	f7ff ff84 	bl	801fd60 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801fe58:	4ca3      	ldr	r4, [pc, #652]	; (80200e8 <mbedtls_x509_crl_parse_der+0x2dc>)
 801fe5a:	e021      	b.n	801fea0 <mbedtls_x509_crl_parse_der+0x94>
 801fe5c:	461d      	mov	r5, r3
 801fe5e:	e7eb      	b.n	801fe38 <mbedtls_x509_crl_parse_der+0x2c>
        mbedtls_x509_crl_init( crl->next );
 801fe60:	f7ff ff79 	bl	801fd56 <mbedtls_x509_crl_init>
        crl = crl->next;
 801fe64:	f8d5 50f0 	ldr.w	r5, [r5, #240]	; 0xf0
    if( ( p = mbedtls_calloc( 1, buflen ) ) == NULL )
 801fe68:	4e9e      	ldr	r6, [pc, #632]	; (80200e4 <mbedtls_x509_crl_parse_der+0x2d8>)
 801fe6a:	4621      	mov	r1, r4
 801fe6c:	6833      	ldr	r3, [r6, #0]
 801fe6e:	2001      	movs	r0, #1
 801fe70:	4798      	blx	r3
 801fe72:	9005      	str	r0, [sp, #20]
 801fe74:	2800      	cmp	r0, #0
 801fe76:	d0ef      	beq.n	801fe58 <mbedtls_x509_crl_parse_der+0x4c>
    memcpy( p, buf, buflen );
 801fe78:	4622      	mov	r2, r4
 801fe7a:	4639      	mov	r1, r7
 801fe7c:	f002 fb00 	bl	8022480 <memcpy>
    crl->raw.p = p;
 801fe80:	9905      	ldr	r1, [sp, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fe82:	2330      	movs	r3, #48	; 0x30
    crl->raw.len = buflen;
 801fe84:	e9c5 4101 	strd	r4, r1, [r5, #4]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fe88:	aa04      	add	r2, sp, #16
    end = p + buflen;
 801fe8a:	4421      	add	r1, r4
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fe8c:	a805      	add	r0, sp, #20
 801fe8e:	9103      	str	r1, [sp, #12]
 801fe90:	f7ee f97e 	bl	800e190 <mbedtls_asn1_get_tag>
 801fe94:	9903      	ldr	r1, [sp, #12]
 801fe96:	b138      	cbz	r0, 801fea8 <mbedtls_x509_crl_parse_der+0x9c>
        mbedtls_x509_crl_free( crl );
 801fe98:	4628      	mov	r0, r5
 801fe9a:	f7ff ff61 	bl	801fd60 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 801fe9e:	4c93      	ldr	r4, [pc, #588]	; (80200ec <mbedtls_x509_crl_parse_der+0x2e0>)
}
 801fea0:	4620      	mov	r0, r4
 801fea2:	b012      	add	sp, #72	; 0x48
 801fea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( len != (size_t) ( end - p ) )
 801fea8:	9b05      	ldr	r3, [sp, #20]
 801feaa:	9a04      	ldr	r2, [sp, #16]
 801feac:	1ac8      	subs	r0, r1, r3
 801feae:	4290      	cmp	r0, r2
 801feb0:	d004      	beq.n	801febc <mbedtls_x509_crl_parse_der+0xb0>
        mbedtls_x509_crl_free( crl );
 801feb2:	4628      	mov	r0, r5
 801feb4:	f7ff ff54 	bl	801fd60 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801feb8:	4c8d      	ldr	r4, [pc, #564]	; (80200f0 <mbedtls_x509_crl_parse_der+0x2e4>)
 801feba:	e7f1      	b.n	801fea0 <mbedtls_x509_crl_parse_der+0x94>
    crl->tbs.p = p;
 801febc:	616b      	str	r3, [r5, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801febe:	aa04      	add	r2, sp, #16
 801fec0:	2330      	movs	r3, #48	; 0x30
 801fec2:	a805      	add	r0, sp, #20
 801fec4:	f7ee f964 	bl	800e190 <mbedtls_asn1_get_tag>
 801fec8:	4604      	mov	r4, r0
 801feca:	b128      	cbz	r0, 801fed8 <mbedtls_x509_crl_parse_der+0xcc>
        mbedtls_x509_crl_free( crl );
 801fecc:	4628      	mov	r0, r5
 801fece:	f7ff ff47 	bl	801fd60 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801fed2:	f5a4 5406 	sub.w	r4, r4, #8576	; 0x2180
 801fed6:	e7e3      	b.n	801fea0 <mbedtls_x509_crl_parse_der+0x94>
    end = p + len;
 801fed8:	e9dd 3704 	ldrd	r3, r7, [sp, #16]
 801fedc:	441f      	add	r7, r3
    crl->tbs.len = end - crl->tbs.p;
 801fede:	696b      	ldr	r3, [r5, #20]
 801fee0:	1afb      	subs	r3, r7, r3
 801fee2:	612b      	str	r3, [r5, #16]
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 801fee4:	f105 0218 	add.w	r2, r5, #24
 801fee8:	4639      	mov	r1, r7
 801feea:	a805      	add	r0, sp, #20
 801feec:	f7ee f97c 	bl	800e1e8 <mbedtls_asn1_get_int>
 801fef0:	b118      	cbz	r0, 801fefa <mbedtls_x509_crl_parse_der+0xee>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fef2:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fef6:	d112      	bne.n	801ff1e <mbedtls_x509_crl_parse_der+0x112>
            *ver = 0;
 801fef8:	61ac      	str	r4, [r5, #24]
        ( ret = mbedtls_x509_get_alg( &p, end, &crl->sig_oid, &sig_params1 ) ) != 0 )
 801fefa:	f105 081c 	add.w	r8, r5, #28
 801fefe:	ab09      	add	r3, sp, #36	; 0x24
 801ff00:	4642      	mov	r2, r8
 801ff02:	4639      	mov	r1, r7
 801ff04:	a805      	add	r0, sp, #20
 801ff06:	f7ff fb16 	bl	801f536 <mbedtls_x509_get_alg>
    if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
 801ff0a:	4604      	mov	r4, r0
 801ff0c:	b950      	cbnz	r0, 801ff24 <mbedtls_x509_crl_parse_der+0x118>
    if( crl->version < 0 || crl->version > 1 )
 801ff0e:	69ab      	ldr	r3, [r5, #24]
 801ff10:	2b01      	cmp	r3, #1
 801ff12:	d90b      	bls.n	801ff2c <mbedtls_x509_crl_parse_der+0x120>
        mbedtls_x509_crl_free( crl );
 801ff14:	4628      	mov	r0, r5
 801ff16:	f7ff ff23 	bl	801fd60 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 801ff1a:	4c76      	ldr	r4, [pc, #472]	; (80200f4 <mbedtls_x509_crl_parse_der+0x2e8>)
 801ff1c:	e7c0      	b.n	801fea0 <mbedtls_x509_crl_parse_der+0x94>
    if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
 801ff1e:	f5b0 5408 	subs.w	r4, r0, #8704	; 0x2200
 801ff22:	d0ea      	beq.n	801fefa <mbedtls_x509_crl_parse_der+0xee>
        mbedtls_x509_crl_free( crl );
 801ff24:	4628      	mov	r0, r5
 801ff26:	f7ff ff1b 	bl	801fd60 <mbedtls_x509_crl_free>
        return( ret );
 801ff2a:	e7b9      	b.n	801fea0 <mbedtls_x509_crl_parse_der+0x94>
    crl->version++;
 801ff2c:	3301      	adds	r3, #1
 801ff2e:	61ab      	str	r3, [r5, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crl->sig_oid, &sig_params1,
 801ff30:	f105 03ec 	add.w	r3, r5, #236	; 0xec
 801ff34:	9300      	str	r3, [sp, #0]
 801ff36:	f105 02e8 	add.w	r2, r5, #232	; 0xe8
 801ff3a:	f105 03e9 	add.w	r3, r5, #233	; 0xe9
 801ff3e:	a909      	add	r1, sp, #36	; 0x24
 801ff40:	4640      	mov	r0, r8
 801ff42:	f7ff fd33 	bl	801f9ac <mbedtls_x509_get_sig_alg>
 801ff46:	b120      	cbz	r0, 801ff52 <mbedtls_x509_crl_parse_der+0x146>
        mbedtls_x509_crl_free( crl );
 801ff48:	4628      	mov	r0, r5
 801ff4a:	f7ff ff09 	bl	801fd60 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG );
 801ff4e:	4c6a      	ldr	r4, [pc, #424]	; (80200f8 <mbedtls_x509_crl_parse_der+0x2ec>)
 801ff50:	e7a6      	b.n	801fea0 <mbedtls_x509_crl_parse_der+0x94>
    crl->issuer_raw.p = p;
 801ff52:	9b05      	ldr	r3, [sp, #20]
 801ff54:	632b      	str	r3, [r5, #48]	; 0x30
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801ff56:	aa04      	add	r2, sp, #16
 801ff58:	2330      	movs	r3, #48	; 0x30
 801ff5a:	4639      	mov	r1, r7
 801ff5c:	a805      	add	r0, sp, #20
 801ff5e:	f7ee f917 	bl	800e190 <mbedtls_asn1_get_tag>
 801ff62:	4604      	mov	r4, r0
 801ff64:	2800      	cmp	r0, #0
 801ff66:	d1b1      	bne.n	801fecc <mbedtls_x509_crl_parse_der+0xc0>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crl->issuer ) ) != 0 )
 801ff68:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801ff6c:	f105 0234 	add.w	r2, r5, #52	; 0x34
 801ff70:	4419      	add	r1, r3
 801ff72:	a805      	add	r0, sp, #20
 801ff74:	f7ff fbce 	bl	801f714 <mbedtls_x509_get_name>
 801ff78:	4604      	mov	r4, r0
 801ff7a:	2800      	cmp	r0, #0
 801ff7c:	d1d2      	bne.n	801ff24 <mbedtls_x509_crl_parse_der+0x118>
    crl->issuer_raw.len = p - crl->issuer_raw.p;
 801ff7e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801ff80:	9b05      	ldr	r3, [sp, #20]
 801ff82:	1a9b      	subs	r3, r3, r2
 801ff84:	62eb      	str	r3, [r5, #44]	; 0x2c
    if( ( ret = mbedtls_x509_get_time( &p, end, &crl->this_update ) ) != 0 )
 801ff86:	f105 0254 	add.w	r2, r5, #84	; 0x54
 801ff8a:	4639      	mov	r1, r7
 801ff8c:	a805      	add	r0, sp, #20
 801ff8e:	f7ff fc41 	bl	801f814 <mbedtls_x509_get_time>
 801ff92:	4604      	mov	r4, r0
 801ff94:	2800      	cmp	r0, #0
 801ff96:	d1c5      	bne.n	801ff24 <mbedtls_x509_crl_parse_der+0x118>
    if( ( ret = mbedtls_x509_get_time( &p, end, &crl->next_update ) ) != 0 )
 801ff98:	f105 026c 	add.w	r2, r5, #108	; 0x6c
 801ff9c:	4639      	mov	r1, r7
 801ff9e:	a805      	add	r0, sp, #20
 801ffa0:	f7ff fc38 	bl	801f814 <mbedtls_x509_get_time>
 801ffa4:	4604      	mov	r4, r0
 801ffa6:	b128      	cbz	r0, 801ffb4 <mbedtls_x509_crl_parse_der+0x1a8>
        if( ret != ( MBEDTLS_ERR_X509_INVALID_DATE +
 801ffa8:	4b54      	ldr	r3, [pc, #336]	; (80200fc <mbedtls_x509_crl_parse_der+0x2f0>)
 801ffaa:	4298      	cmp	r0, r3
 801ffac:	d002      	beq.n	801ffb4 <mbedtls_x509_crl_parse_der+0x1a8>
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) &&
 801ffae:	3302      	adds	r3, #2
 801ffb0:	4298      	cmp	r0, r3
 801ffb2:	d1b7      	bne.n	801ff24 <mbedtls_x509_crl_parse_der+0x118>
    if( *p == end )
 801ffb4:	9b05      	ldr	r3, [sp, #20]
 801ffb6:	429f      	cmp	r7, r3
 801ffb8:	d116      	bne.n	801ffe8 <mbedtls_x509_crl_parse_der+0x1dc>
    if( crl->version == 2 )
 801ffba:	69ab      	ldr	r3, [r5, #24]
 801ffbc:	2b02      	cmp	r3, #2
 801ffbe:	d10e      	bne.n	801ffde <mbedtls_x509_crl_parse_der+0x1d2>
    size_t len = 0;
 801ffc0:	2300      	movs	r3, #0
    if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0) ) != 0 )
 801ffc2:	f105 02c4 	add.w	r2, r5, #196	; 0xc4
 801ffc6:	4639      	mov	r1, r7
 801ffc8:	a805      	add	r0, sp, #20
    size_t len = 0;
 801ffca:	9308      	str	r3, [sp, #32]
    if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0) ) != 0 )
 801ffcc:	f7ff fd38 	bl	801fa40 <mbedtls_x509_get_ext>
 801ffd0:	4604      	mov	r4, r0
 801ffd2:	2800      	cmp	r0, #0
 801ffd4:	f000 80a6 	beq.w	8020124 <mbedtls_x509_crl_parse_der+0x318>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801ffd8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801ffdc:	d1a2      	bne.n	801ff24 <mbedtls_x509_crl_parse_der+0x118>
    if( p != end )
 801ffde:	9b05      	ldr	r3, [sp, #20]
 801ffe0:	42bb      	cmp	r3, r7
 801ffe2:	f000 80a3 	beq.w	802012c <mbedtls_x509_crl_parse_der+0x320>
 801ffe6:	e764      	b.n	801feb2 <mbedtls_x509_crl_parse_der+0xa6>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &entry_len,
 801ffe8:	2330      	movs	r3, #48	; 0x30
 801ffea:	aa06      	add	r2, sp, #24
 801ffec:	4639      	mov	r1, r7
 801ffee:	a805      	add	r0, sp, #20
 801fff0:	f7ee f8ce 	bl	800e190 <mbedtls_asn1_get_tag>
 801fff4:	4604      	mov	r4, r0
 801fff6:	b118      	cbz	r0, 8020000 <mbedtls_x509_crl_parse_der+0x1f4>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fff8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fffc:	d192      	bne.n	801ff24 <mbedtls_x509_crl_parse_der+0x118>
 801fffe:	e7dc      	b.n	801ffba <mbedtls_x509_crl_parse_der+0x1ae>
    end = *p + entry_len;
 8020000:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    if( ( ret = x509_get_entries( &p, end, &crl->entry ) ) != 0 )
 8020004:	f105 0884 	add.w	r8, r5, #132	; 0x84
    end = *p + entry_len;
 8020008:	eb02 0903 	add.w	r9, r2, r3
    while( *p < end )
 802000c:	9b05      	ldr	r3, [sp, #20]
 802000e:	4599      	cmp	r9, r3
 8020010:	d9d3      	bls.n	801ffba <mbedtls_x509_crl_parse_der+0x1ae>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len2,
 8020012:	2330      	movs	r3, #48	; 0x30
 8020014:	aa07      	add	r2, sp, #28
 8020016:	4649      	mov	r1, r9
 8020018:	a805      	add	r0, sp, #20
 802001a:	f7ee f8b9 	bl	800e190 <mbedtls_asn1_get_tag>
 802001e:	4604      	mov	r4, r0
 8020020:	2800      	cmp	r0, #0
 8020022:	f47f af7f 	bne.w	801ff24 <mbedtls_x509_crl_parse_der+0x118>
        cur_entry->raw.tag = **p;
 8020026:	9905      	ldr	r1, [sp, #20]
 8020028:	780b      	ldrb	r3, [r1, #0]
 802002a:	f8c8 3000 	str.w	r3, [r8]
        cur_entry->raw.len = len2;
 802002e:	9b07      	ldr	r3, [sp, #28]
        cur_entry->raw.p = *p;
 8020030:	f8c8 1008 	str.w	r1, [r8, #8]
        cur_entry->raw.len = len2;
 8020034:	f8c8 3004 	str.w	r3, [r8, #4]
        end2 = *p + len2;
 8020038:	4419      	add	r1, r3
        if( ( ret = mbedtls_x509_get_serial( p, end2, &cur_entry->serial ) ) != 0 )
 802003a:	f108 020c 	add.w	r2, r8, #12
 802003e:	a805      	add	r0, sp, #20
 8020040:	9103      	str	r1, [sp, #12]
 8020042:	f7ff fa4b 	bl	801f4dc <mbedtls_x509_get_serial>
 8020046:	4604      	mov	r4, r0
 8020048:	2800      	cmp	r0, #0
 802004a:	f47f af6b 	bne.w	801ff24 <mbedtls_x509_crl_parse_der+0x118>
        if( ( ret = mbedtls_x509_get_time( p, end2,
 802004e:	9903      	ldr	r1, [sp, #12]
 8020050:	f108 0218 	add.w	r2, r8, #24
 8020054:	a805      	add	r0, sp, #20
 8020056:	f7ff fbdd 	bl	801f814 <mbedtls_x509_get_time>
 802005a:	4604      	mov	r4, r0
 802005c:	2800      	cmp	r0, #0
 802005e:	f47f af61 	bne.w	801ff24 <mbedtls_x509_crl_parse_der+0x118>
    if( end <= *p )
 8020062:	9b05      	ldr	r3, [sp, #20]
 8020064:	9903      	ldr	r1, [sp, #12]
    size_t len = 0;
 8020066:	9008      	str	r0, [sp, #32]
    if( end <= *p )
 8020068:	4299      	cmp	r1, r3
 802006a:	d910      	bls.n	802008e <mbedtls_x509_crl_parse_der+0x282>
    ext->tag = **p;
 802006c:	781a      	ldrb	r2, [r3, #0]
 802006e:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
    ext->p = *p;
 8020072:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8020076:	f108 0234 	add.w	r2, r8, #52	; 0x34
 802007a:	2330      	movs	r3, #48	; 0x30
 802007c:	a805      	add	r0, sp, #20
 802007e:	f7ee f887 	bl	800e190 <mbedtls_asn1_get_tag>
 8020082:	b180      	cbz	r0, 80200a6 <mbedtls_x509_crl_parse_der+0x29a>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8020084:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8020088:	d11f      	bne.n	80200ca <mbedtls_x509_crl_parse_der+0x2be>
            ext->p = NULL;
 802008a:	f8c8 4038 	str.w	r4, [r8, #56]	; 0x38
        if( *p < end )
 802008e:	9b05      	ldr	r3, [sp, #20]
 8020090:	4599      	cmp	r9, r3
 8020092:	d9bb      	bls.n	802000c <mbedtls_x509_crl_parse_der+0x200>
            cur_entry->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl_entry ) );
 8020094:	6833      	ldr	r3, [r6, #0]
 8020096:	2140      	movs	r1, #64	; 0x40
 8020098:	2001      	movs	r0, #1
 802009a:	4798      	blx	r3
 802009c:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
            if( cur_entry->next == NULL )
 80200a0:	b1e8      	cbz	r0, 80200de <mbedtls_x509_crl_parse_der+0x2d2>
 80200a2:	4680      	mov	r8, r0
 80200a4:	e7b2      	b.n	802000c <mbedtls_x509_crl_parse_der+0x200>
    end = *p + ext->len;
 80200a6:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
 80200aa:	9b05      	ldr	r3, [sp, #20]
 80200ac:	eb03 0a01 	add.w	sl, r3, r1
    while( *p < end )
 80200b0:	9b05      	ldr	r3, [sp, #20]
 80200b2:	459a      	cmp	sl, r3
 80200b4:	d802      	bhi.n	80200bc <mbedtls_x509_crl_parse_der+0x2b0>
    if( *p != end )
 80200b6:	d0ea      	beq.n	802008e <mbedtls_x509_crl_parse_der+0x282>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80200b8:	4c11      	ldr	r4, [pc, #68]	; (8020100 <mbedtls_x509_crl_parse_der+0x2f4>)
            mbedtls_x509_crl_free( crl );
 80200ba:	e733      	b.n	801ff24 <mbedtls_x509_crl_parse_der+0x118>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80200bc:	2330      	movs	r3, #48	; 0x30
 80200be:	aa08      	add	r2, sp, #32
 80200c0:	4651      	mov	r1, sl
 80200c2:	a805      	add	r0, sp, #20
 80200c4:	f7ee f864 	bl	800e190 <mbedtls_asn1_get_tag>
 80200c8:	b120      	cbz	r0, 80200d4 <mbedtls_x509_crl_parse_der+0x2c8>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80200ca:	f5a0 5414 	sub.w	r4, r0, #9472	; 0x2500
        if( ( ret = x509_get_crl_entry_ext( p, end2,
 80200ce:	2c00      	cmp	r4, #0
 80200d0:	d0dd      	beq.n	802008e <mbedtls_x509_crl_parse_der+0x282>
 80200d2:	e727      	b.n	801ff24 <mbedtls_x509_crl_parse_der+0x118>
        *p += len;
 80200d4:	9b05      	ldr	r3, [sp, #20]
 80200d6:	9a08      	ldr	r2, [sp, #32]
 80200d8:	4413      	add	r3, r2
 80200da:	9305      	str	r3, [sp, #20]
 80200dc:	e7e8      	b.n	80200b0 <mbedtls_x509_crl_parse_der+0x2a4>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80200de:	4c02      	ldr	r4, [pc, #8]	; (80200e8 <mbedtls_x509_crl_parse_der+0x2dc>)
 80200e0:	e720      	b.n	801ff24 <mbedtls_x509_crl_parse_der+0x118>
 80200e2:	bf00      	nop
 80200e4:	200005a0 	.word	0x200005a0
 80200e8:	ffffd780 	.word	0xffffd780
 80200ec:	ffffde80 	.word	0xffffde80
 80200f0:	ffffde1a 	.word	0xffffde1a
 80200f4:	ffffda80 	.word	0xffffda80
 80200f8:	ffffda00 	.word	0xffffda00
 80200fc:	ffffdb9e 	.word	0xffffdb9e
 8020100:	ffffda9a 	.word	0xffffda9a
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8020104:	2330      	movs	r3, #48	; 0x30
 8020106:	aa08      	add	r2, sp, #32
 8020108:	4639      	mov	r1, r7
 802010a:	a805      	add	r0, sp, #20
 802010c:	f7ee f840 	bl	800e190 <mbedtls_asn1_get_tag>
 8020110:	b120      	cbz	r0, 802011c <mbedtls_x509_crl_parse_der+0x310>
        if( ret != 0 )
 8020112:	f5b0 5414 	subs.w	r4, r0, #9472	; 0x2500
 8020116:	f43f af62 	beq.w	801ffde <mbedtls_x509_crl_parse_der+0x1d2>
 802011a:	e703      	b.n	801ff24 <mbedtls_x509_crl_parse_der+0x118>
        *p += len;
 802011c:	9b05      	ldr	r3, [sp, #20]
 802011e:	9a08      	ldr	r2, [sp, #32]
 8020120:	4413      	add	r3, r2
 8020122:	9305      	str	r3, [sp, #20]
    while( *p < end )
 8020124:	9b05      	ldr	r3, [sp, #20]
 8020126:	429f      	cmp	r7, r3
 8020128:	d8ec      	bhi.n	8020104 <mbedtls_x509_crl_parse_der+0x2f8>
    if( *p != end )
 802012a:	d1c5      	bne.n	80200b8 <mbedtls_x509_crl_parse_der+0x2ac>
    end = crl->raw.p + crl->raw.len;
 802012c:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 8020130:	441e      	add	r6, r3
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 8020132:	aa0f      	add	r2, sp, #60	; 0x3c
 8020134:	ab0c      	add	r3, sp, #48	; 0x30
 8020136:	4631      	mov	r1, r6
 8020138:	a805      	add	r0, sp, #20
 802013a:	f7ff f9fc 	bl	801f536 <mbedtls_x509_get_alg>
 802013e:	4604      	mov	r4, r0
 8020140:	2800      	cmp	r0, #0
 8020142:	f47f aeef 	bne.w	801ff24 <mbedtls_x509_crl_parse_der+0x118>
    if( crl->sig_oid.len != sig_oid2.len ||
 8020146:	6a2a      	ldr	r2, [r5, #32]
 8020148:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802014a:	429a      	cmp	r2, r3
 802014c:	d10e      	bne.n	802016c <mbedtls_x509_crl_parse_der+0x360>
        memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
 802014e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020150:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8020152:	f002 f987 	bl	8022464 <memcmp>
    if( crl->sig_oid.len != sig_oid2.len ||
 8020156:	b948      	cbnz	r0, 802016c <mbedtls_x509_crl_parse_der+0x360>
        sig_params1.len != sig_params2.len ||
 8020158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
 802015a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802015c:	429a      	cmp	r2, r3
 802015e:	d105      	bne.n	802016c <mbedtls_x509_crl_parse_der+0x360>
        sig_params1.len != sig_params2.len ||
 8020160:	b14a      	cbz	r2, 8020176 <mbedtls_x509_crl_parse_der+0x36a>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 8020162:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020164:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020166:	f002 f97d 	bl	8022464 <memcmp>
        ( sig_params1.len != 0 &&
 802016a:	b120      	cbz	r0, 8020176 <mbedtls_x509_crl_parse_der+0x36a>
        mbedtls_x509_crl_free( crl );
 802016c:	4628      	mov	r0, r5
 802016e:	f7ff fdf7 	bl	801fd60 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8020172:	4c09      	ldr	r4, [pc, #36]	; (8020198 <mbedtls_x509_crl_parse_der+0x38c>)
 8020174:	e694      	b.n	801fea0 <mbedtls_x509_crl_parse_der+0x94>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crl->sig ) ) != 0 )
 8020176:	f105 02dc 	add.w	r2, r5, #220	; 0xdc
 802017a:	4631      	mov	r1, r6
 802017c:	a805      	add	r0, sp, #20
 802017e:	f7ff fbf7 	bl	801f970 <mbedtls_x509_get_sig>
 8020182:	4604      	mov	r4, r0
 8020184:	2800      	cmp	r0, #0
 8020186:	f47f aecd 	bne.w	801ff24 <mbedtls_x509_crl_parse_der+0x118>
    if( p != end )
 802018a:	9b05      	ldr	r3, [sp, #20]
 802018c:	42b3      	cmp	r3, r6
 802018e:	f43f ae87 	beq.w	801fea0 <mbedtls_x509_crl_parse_der+0x94>
 8020192:	e68e      	b.n	801feb2 <mbedtls_x509_crl_parse_der+0xa6>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020194:	4c01      	ldr	r4, [pc, #4]	; (802019c <mbedtls_x509_crl_parse_der+0x390>)
 8020196:	e683      	b.n	801fea0 <mbedtls_x509_crl_parse_der+0x94>
 8020198:	ffffd980 	.word	0xffffd980
 802019c:	ffffd800 	.word	0xffffd800

080201a0 <mbedtls_x509_crl_parse>:
{
 80201a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a4:	460d      	mov	r5, r1
 80201a6:	b089      	sub	sp, #36	; 0x24
 80201a8:	4616      	mov	r6, r2
    if( chain == NULL || buf == NULL )
 80201aa:	4607      	mov	r7, r0
 80201ac:	2800      	cmp	r0, #0
 80201ae:	d03f      	beq.n	8020230 <mbedtls_x509_crl_parse+0x90>
 80201b0:	2900      	cmp	r1, #0
 80201b2:	d03d      	beq.n	8020230 <mbedtls_x509_crl_parse+0x90>
            ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 80201b4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8020248 <mbedtls_x509_crl_parse+0xa8>
            ret = mbedtls_pem_read_buffer( &pem,
 80201b8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802024c <mbedtls_x509_crl_parse+0xac>
 80201bc:	f8df a090 	ldr.w	sl, [pc, #144]	; 8020250 <mbedtls_x509_crl_parse+0xb0>
    int is_pem = 0;
 80201c0:	f04f 0b00 	mov.w	fp, #0
        mbedtls_pem_init( &pem );
 80201c4:	a805      	add	r0, sp, #20
 80201c6:	f7f5 fb26 	bl	8015816 <mbedtls_pem_init>
        if( buflen == 0 || buf[buflen - 1] != '\0' )
 80201ca:	b306      	cbz	r6, 802020e <mbedtls_x509_crl_parse+0x6e>
 80201cc:	19ab      	adds	r3, r5, r6
 80201ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80201d2:	b9e3      	cbnz	r3, 802020e <mbedtls_x509_crl_parse+0x6e>
            ret = mbedtls_pem_read_buffer( &pem,
 80201d4:	aa04      	add	r2, sp, #16
 80201d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80201da:	9300      	str	r3, [sp, #0]
 80201dc:	464a      	mov	r2, r9
 80201de:	462b      	mov	r3, r5
 80201e0:	4651      	mov	r1, sl
 80201e2:	a805      	add	r0, sp, #20
 80201e4:	f7f5 fb1c 	bl	8015820 <mbedtls_pem_read_buffer>
        if( ret == 0 )
 80201e8:	4604      	mov	r4, r0
 80201ea:	b988      	cbnz	r0, 8020210 <mbedtls_x509_crl_parse+0x70>
            buflen -= use_len;
 80201ec:	9b04      	ldr	r3, [sp, #16]
            if( ( ret = mbedtls_x509_crl_parse_der( chain,
 80201ee:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80201f2:	4638      	mov	r0, r7
            buflen -= use_len;
 80201f4:	1af6      	subs	r6, r6, r3
            buf += use_len;
 80201f6:	441d      	add	r5, r3
            if( ( ret = mbedtls_x509_crl_parse_der( chain,
 80201f8:	f7ff fe08 	bl	801fe0c <mbedtls_x509_crl_parse_der>
 80201fc:	4604      	mov	r4, r0
 80201fe:	b1a0      	cbz	r0, 802022a <mbedtls_x509_crl_parse+0x8a>
            mbedtls_pem_free( &pem );
 8020200:	a805      	add	r0, sp, #20
 8020202:	f7f5 fc69 	bl	8015ad8 <mbedtls_pem_free>
}
 8020206:	4620      	mov	r0, r4
 8020208:	b009      	add	sp, #36	; 0x24
 802020a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 802020e:	4644      	mov	r4, r8
        else if( is_pem )
 8020210:	f1bb 0f00 	cmp.w	fp, #0
 8020214:	d1f4      	bne.n	8020200 <mbedtls_x509_crl_parse+0x60>
        mbedtls_pem_free( &pem );
 8020216:	a805      	add	r0, sp, #20
 8020218:	f7f5 fc5e 	bl	8015ad8 <mbedtls_pem_free>
    while( is_pem && buflen > 1 );
 802021c:	f1bb 0f00 	cmp.w	fp, #0
 8020220:	d008      	beq.n	8020234 <mbedtls_x509_crl_parse+0x94>
 8020222:	2e01      	cmp	r6, #1
 8020224:	d8ce      	bhi.n	80201c4 <mbedtls_x509_crl_parse+0x24>
        return( 0 );
 8020226:	2400      	movs	r4, #0
 8020228:	e7ed      	b.n	8020206 <mbedtls_x509_crl_parse+0x66>
            is_pem = 1;
 802022a:	f04f 0b01 	mov.w	fp, #1
 802022e:	e7f2      	b.n	8020216 <mbedtls_x509_crl_parse+0x76>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020230:	4c04      	ldr	r4, [pc, #16]	; (8020244 <mbedtls_x509_crl_parse+0xa4>)
 8020232:	e7e8      	b.n	8020206 <mbedtls_x509_crl_parse+0x66>
        return( mbedtls_x509_crl_parse_der( chain, buf, buflen ) );
 8020234:	4632      	mov	r2, r6
 8020236:	4629      	mov	r1, r5
 8020238:	4638      	mov	r0, r7
 802023a:	f7ff fde7 	bl	801fe0c <mbedtls_x509_crl_parse_der>
 802023e:	4604      	mov	r4, r0
 8020240:	e7e1      	b.n	8020206 <mbedtls_x509_crl_parse+0x66>
 8020242:	bf00      	nop
 8020244:	ffffd800 	.word	0xffffd800
 8020248:	ffffef80 	.word	0xffffef80
 802024c:	080330f4 	.word	0x080330f4
 8020250:	0803310b 	.word	0x0803310b

08020254 <mbedtls_zeroize>:
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8020254:	4401      	add	r1, r0
 8020256:	2300      	movs	r3, #0
 8020258:	4288      	cmp	r0, r1
 802025a:	d100      	bne.n	802025e <mbedtls_zeroize+0xa>
}
 802025c:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 802025e:	f800 3b01 	strb.w	r3, [r0], #1
 8020262:	e7f9      	b.n	8020258 <mbedtls_zeroize+0x4>

08020264 <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 8020264:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;

    for( i = 0; i < len; i++ )
 8020266:	2400      	movs	r4, #0
 8020268:	4294      	cmp	r4, r2
 802026a:	d101      	bne.n	8020270 <x509_memcasecmp+0xc>
        }

        return( -1 );
    }

    return( 0 );
 802026c:	2000      	movs	r0, #0
}
 802026e:	bd70      	pop	{r4, r5, r6, pc}
        diff = n1[i] ^ n2[i];
 8020270:	5d03      	ldrb	r3, [r0, r4]
 8020272:	5d0d      	ldrb	r5, [r1, r4]
        if( diff == 0 )
 8020274:	42ab      	cmp	r3, r5
        diff = n1[i] ^ n2[i];
 8020276:	ea83 0605 	eor.w	r6, r3, r5
        if( diff == 0 )
 802027a:	d006      	beq.n	802028a <x509_memcasecmp+0x26>
        if( diff == 32 &&
 802027c:	2e20      	cmp	r6, #32
 802027e:	d106      	bne.n	802028e <x509_memcasecmp+0x2a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 8020280:	f023 0320 	bic.w	r3, r3, #32
 8020284:	3b41      	subs	r3, #65	; 0x41
 8020286:	2b19      	cmp	r3, #25
 8020288:	d801      	bhi.n	802028e <x509_memcasecmp+0x2a>
    for( i = 0; i < len; i++ )
 802028a:	3401      	adds	r4, #1
 802028c:	e7ec      	b.n	8020268 <x509_memcasecmp+0x4>
        return( -1 );
 802028e:	f04f 30ff 	mov.w	r0, #4294967295
 8020292:	e7ec      	b.n	802026e <x509_memcasecmp+0xa>

08020294 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 8020294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020296:	4605      	mov	r5, r0
 8020298:	460c      	mov	r4, r1
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 802029a:	682a      	ldr	r2, [r5, #0]
 802029c:	6823      	ldr	r3, [r4, #0]
 802029e:	429a      	cmp	r2, r3
 80202a0:	d134      	bne.n	802030c <x509_name_cmp+0x78>
            a->oid.len != b->oid.len ||
 80202a2:	6863      	ldr	r3, [r4, #4]
        if( a->oid.tag != b->oid.tag ||
 80202a4:	686a      	ldr	r2, [r5, #4]
 80202a6:	429a      	cmp	r2, r3
 80202a8:	d130      	bne.n	802030c <x509_name_cmp+0x78>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 80202aa:	68a1      	ldr	r1, [r4, #8]
 80202ac:	68a8      	ldr	r0, [r5, #8]
 80202ae:	f002 f8d9 	bl	8022464 <memcmp>
            a->oid.len != b->oid.len ||
 80202b2:	bb58      	cbnz	r0, 802030c <x509_name_cmp+0x78>
    if( a->tag == b->tag &&
 80202b4:	68ef      	ldr	r7, [r5, #12]
 80202b6:	68e6      	ldr	r6, [r4, #12]
 80202b8:	42b7      	cmp	r7, r6
 80202ba:	d108      	bne.n	80202ce <x509_name_cmp+0x3a>
        a->len == b->len &&
 80202bc:	6923      	ldr	r3, [r4, #16]
    if( a->tag == b->tag &&
 80202be:	692a      	ldr	r2, [r5, #16]
 80202c0:	429a      	cmp	r2, r3
 80202c2:	d104      	bne.n	80202ce <x509_name_cmp+0x3a>
        memcmp( a->p, b->p, b->len ) == 0 )
 80202c4:	6961      	ldr	r1, [r4, #20]
 80202c6:	6968      	ldr	r0, [r5, #20]
 80202c8:	f002 f8cc 	bl	8022464 <memcmp>
        a->len == b->len &&
 80202cc:	b180      	cbz	r0, 80202f0 <x509_name_cmp+0x5c>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80202ce:	2f0c      	cmp	r7, #12
 80202d0:	d001      	beq.n	80202d6 <x509_name_cmp+0x42>
 80202d2:	2f13      	cmp	r7, #19
 80202d4:	d11a      	bne.n	802030c <x509_name_cmp+0x78>
 80202d6:	2e0c      	cmp	r6, #12
 80202d8:	d001      	beq.n	80202de <x509_name_cmp+0x4a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80202da:	2e13      	cmp	r6, #19
 80202dc:	d116      	bne.n	802030c <x509_name_cmp+0x78>
        a->len == b->len &&
 80202de:	6923      	ldr	r3, [r4, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80202e0:	692a      	ldr	r2, [r5, #16]
 80202e2:	429a      	cmp	r2, r3
 80202e4:	d112      	bne.n	802030c <x509_name_cmp+0x78>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 80202e6:	6961      	ldr	r1, [r4, #20]
 80202e8:	6968      	ldr	r0, [r5, #20]
 80202ea:	f7ff ffbb 	bl	8020264 <x509_memcasecmp>
        a->len == b->len &&
 80202ee:	b968      	cbnz	r0, 802030c <x509_name_cmp+0x78>
        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 80202f0:	7f2a      	ldrb	r2, [r5, #28]
 80202f2:	7f23      	ldrb	r3, [r4, #28]
 80202f4:	429a      	cmp	r2, r3
 80202f6:	d109      	bne.n	802030c <x509_name_cmp+0x78>
            return( -1 );

        a = a->next;
 80202f8:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 80202fa:	69a4      	ldr	r4, [r4, #24]
    while( a != NULL || b != NULL )
 80202fc:	b925      	cbnz	r5, 8020308 <x509_name_cmp+0x74>
 80202fe:	1e20      	subs	r0, r4, #0
 8020300:	bf18      	it	ne
 8020302:	2001      	movne	r0, #1
 8020304:	4240      	negs	r0, r0
    }

    /* a == NULL == b */
    return( 0 );
}
 8020306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( a == NULL || b == NULL )
 8020308:	2c00      	cmp	r4, #0
 802030a:	d1c6      	bne.n	802029a <x509_name_cmp+0x6>
            return( -1 );
 802030c:	f04f 30ff 	mov.w	r0, #4294967295
 8020310:	e7f9      	b.n	8020306 <x509_name_cmp+0x72>

08020312 <x509_check_wildcard>:
{
 8020312:	b570      	push	{r4, r5, r6, lr}
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8020314:	684d      	ldr	r5, [r1, #4]
 8020316:	2d02      	cmp	r5, #2
{
 8020318:	4604      	mov	r4, r0
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 802031a:	d924      	bls.n	8020366 <x509_check_wildcard+0x54>
 802031c:	688e      	ldr	r6, [r1, #8]
 802031e:	7833      	ldrb	r3, [r6, #0]
 8020320:	2b2a      	cmp	r3, #42	; 0x2a
 8020322:	d120      	bne.n	8020366 <x509_check_wildcard+0x54>
 8020324:	7873      	ldrb	r3, [r6, #1]
 8020326:	2b2e      	cmp	r3, #46	; 0x2e
 8020328:	d11d      	bne.n	8020366 <x509_check_wildcard+0x54>
    size_t cn_idx = 0, cn_len = strlen( cn );
 802032a:	f7df ff5b 	bl	80001e4 <strlen>
 802032e:	4623      	mov	r3, r4
    for( i = 0; i < cn_len; ++i )
 8020330:	2200      	movs	r2, #0
 8020332:	4282      	cmp	r2, r0
 8020334:	d102      	bne.n	802033c <x509_check_wildcard+0x2a>
        return( -1 );
 8020336:	f04f 30ff 	mov.w	r0, #4294967295
 802033a:	e013      	b.n	8020364 <x509_check_wildcard+0x52>
        if( cn[i] == '.' )
 802033c:	4619      	mov	r1, r3
 802033e:	3301      	adds	r3, #1
 8020340:	780c      	ldrb	r4, [r1, #0]
 8020342:	2c2e      	cmp	r4, #46	; 0x2e
 8020344:	d001      	beq.n	802034a <x509_check_wildcard+0x38>
    for( i = 0; i < cn_len; ++i )
 8020346:	3201      	adds	r2, #1
 8020348:	e7f3      	b.n	8020332 <x509_check_wildcard+0x20>
    if( cn_idx == 0 )
 802034a:	2a00      	cmp	r2, #0
 802034c:	d0f3      	beq.n	8020336 <x509_check_wildcard+0x24>
    if( cn_len - cn_idx == name->len - 1 &&
 802034e:	3d01      	subs	r5, #1
 8020350:	1a82      	subs	r2, r0, r2
 8020352:	42aa      	cmp	r2, r5
 8020354:	d1ef      	bne.n	8020336 <x509_check_wildcard+0x24>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 8020356:	1c70      	adds	r0, r6, #1
 8020358:	f7ff ff84 	bl	8020264 <x509_memcasecmp>
    if( cn_len - cn_idx == name->len - 1 &&
 802035c:	3800      	subs	r0, #0
 802035e:	bf18      	it	ne
 8020360:	2001      	movne	r0, #1
 8020362:	4240      	negs	r0, r0
}
 8020364:	bd70      	pop	{r4, r5, r6, pc}
        return( 0 );
 8020366:	2000      	movs	r0, #0
 8020368:	e7fc      	b.n	8020364 <x509_check_wildcard+0x52>

0802036a <x509_profile_check_key>:
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 802036a:	2901      	cmp	r1, #1
{
 802036c:	b510      	push	{r4, lr}
 802036e:	4604      	mov	r4, r0
 8020370:	4610      	mov	r0, r2
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8020372:	d001      	beq.n	8020378 <x509_profile_check_key+0xe>
 8020374:	2906      	cmp	r1, #6
 8020376:	d108      	bne.n	802038a <x509_profile_check_key+0x20>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 8020378:	f7f5 fc74 	bl	8015c64 <mbedtls_pk_get_bitlen>
 802037c:	68e3      	ldr	r3, [r4, #12]
 802037e:	4298      	cmp	r0, r3
 8020380:	f04f 30ff 	mov.w	r0, #4294967295
 8020384:	bf28      	it	cs
 8020386:	2000      	movcs	r0, #0
}
 8020388:	bd10      	pop	{r4, pc}
    if( pk_alg == MBEDTLS_PK_ECDSA ||
 802038a:	3902      	subs	r1, #2
 802038c:	2902      	cmp	r1, #2
 802038e:	d80b      	bhi.n	80203a8 <x509_profile_check_key+0x3e>
        mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
 8020390:	6853      	ldr	r3, [r2, #4]
        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
 8020392:	781b      	ldrb	r3, [r3, #0]
 8020394:	1e5a      	subs	r2, r3, #1
 8020396:	2301      	movs	r3, #1
 8020398:	4093      	lsls	r3, r2
 802039a:	68a2      	ldr	r2, [r4, #8]
 802039c:	4213      	tst	r3, r2
 802039e:	bf0c      	ite	eq
 80203a0:	f04f 30ff 	moveq.w	r0, #4294967295
 80203a4:	2000      	movne	r0, #0
 80203a6:	e7ef      	b.n	8020388 <x509_profile_check_key+0x1e>
    return( -1 );
 80203a8:	f04f 30ff 	mov.w	r0, #4294967295
 80203ac:	e7ec      	b.n	8020388 <x509_profile_check_key+0x1e>
	...

080203b0 <mbedtls_x509_crt_info>:
{
 80203b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203b4:	4680      	mov	r8, r0
 80203b6:	b08d      	sub	sp, #52	; 0x34
 80203b8:	468a      	mov	sl, r1
 80203ba:	4691      	mov	r9, r2
    if( NULL == crt )
 80203bc:	461f      	mov	r7, r3
 80203be:	b95b      	cbnz	r3, 80203d8 <mbedtls_x509_crt_info+0x28>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 80203c0:	4a9a      	ldr	r2, [pc, #616]	; (802062c <mbedtls_x509_crt_info+0x27c>)
 80203c2:	f003 fa73 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80203c6:	2800      	cmp	r0, #0
 80203c8:	da01      	bge.n	80203ce <mbedtls_x509_crt_info+0x1e>
 80203ca:	4899      	ldr	r0, [pc, #612]	; (8020630 <mbedtls_x509_crt_info+0x280>)
 80203cc:	e001      	b.n	80203d2 <mbedtls_x509_crt_info+0x22>
 80203ce:	4550      	cmp	r0, sl
 80203d0:	d2fb      	bcs.n	80203ca <mbedtls_x509_crt_info+0x1a>
}
 80203d2:	b00d      	add	sp, #52	; 0x34
 80203d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 80203d8:	699b      	ldr	r3, [r3, #24]
 80203da:	9300      	str	r3, [sp, #0]
 80203dc:	4613      	mov	r3, r2
 80203de:	4a95      	ldr	r2, [pc, #596]	; (8020634 <mbedtls_x509_crt_info+0x284>)
 80203e0:	f003 fa64 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80203e4:	2800      	cmp	r0, #0
 80203e6:	dbf0      	blt.n	80203ca <mbedtls_x509_crt_info+0x1a>
 80203e8:	4550      	cmp	r0, sl
 80203ea:	d2ee      	bcs.n	80203ca <mbedtls_x509_crt_info+0x1a>
 80203ec:	ebaa 0500 	sub.w	r5, sl, r0
 80203f0:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 80203f2:	4a91      	ldr	r2, [pc, #580]	; (8020638 <mbedtls_x509_crt_info+0x288>)
 80203f4:	464b      	mov	r3, r9
 80203f6:	4629      	mov	r1, r5
 80203f8:	4640      	mov	r0, r8
 80203fa:	f003 fa57 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80203fe:	2800      	cmp	r0, #0
 8020400:	dbe3      	blt.n	80203ca <mbedtls_x509_crt_info+0x1a>
 8020402:	4285      	cmp	r5, r0
 8020404:	d9e1      	bls.n	80203ca <mbedtls_x509_crt_info+0x1a>
 8020406:	1a2d      	subs	r5, r5, r0
 8020408:	4480      	add	r8, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 802040a:	f107 021c 	add.w	r2, r7, #28
 802040e:	4629      	mov	r1, r5
 8020410:	4640      	mov	r0, r8
 8020412:	f7ff fbc1 	bl	801fb98 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020416:	2800      	cmp	r0, #0
 8020418:	dbd7      	blt.n	80203ca <mbedtls_x509_crt_info+0x1a>
 802041a:	4285      	cmp	r5, r0
 802041c:	d9d5      	bls.n	80203ca <mbedtls_x509_crt_info+0x1a>
 802041e:	1a2d      	subs	r5, r5, r0
 8020420:	eb08 0600 	add.w	r6, r8, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 8020424:	4a85      	ldr	r2, [pc, #532]	; (802063c <mbedtls_x509_crt_info+0x28c>)
 8020426:	464b      	mov	r3, r9
 8020428:	4629      	mov	r1, r5
 802042a:	4630      	mov	r0, r6
 802042c:	f003 fa3e 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020430:	2800      	cmp	r0, #0
 8020432:	dbca      	blt.n	80203ca <mbedtls_x509_crt_info+0x1a>
 8020434:	4285      	cmp	r5, r0
 8020436:	d9c8      	bls.n	80203ca <mbedtls_x509_crt_info+0x1a>
 8020438:	1a2d      	subs	r5, r5, r0
 802043a:	4406      	add	r6, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 802043c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8020440:	4629      	mov	r1, r5
 8020442:	4630      	mov	r0, r6
 8020444:	f7ff fb26 	bl	801fa94 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020448:	2800      	cmp	r0, #0
 802044a:	dbbe      	blt.n	80203ca <mbedtls_x509_crt_info+0x1a>
 802044c:	4285      	cmp	r5, r0
 802044e:	d9bc      	bls.n	80203ca <mbedtls_x509_crt_info+0x1a>
 8020450:	1a2d      	subs	r5, r5, r0
 8020452:	1834      	adds	r4, r6, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 8020454:	4a7a      	ldr	r2, [pc, #488]	; (8020640 <mbedtls_x509_crt_info+0x290>)
 8020456:	464b      	mov	r3, r9
 8020458:	4629      	mov	r1, r5
 802045a:	4620      	mov	r0, r4
 802045c:	f003 fa26 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020460:	2800      	cmp	r0, #0
 8020462:	dbb2      	blt.n	80203ca <mbedtls_x509_crt_info+0x1a>
 8020464:	4285      	cmp	r5, r0
 8020466:	d9b0      	bls.n	80203ca <mbedtls_x509_crt_info+0x1a>
 8020468:	1a2d      	subs	r5, r5, r0
 802046a:	4404      	add	r4, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 802046c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8020470:	4629      	mov	r1, r5
 8020472:	4620      	mov	r0, r4
 8020474:	f7ff fb0e 	bl	801fa94 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020478:	2800      	cmp	r0, #0
 802047a:	dba6      	blt.n	80203ca <mbedtls_x509_crt_info+0x1a>
 802047c:	4285      	cmp	r5, r0
 802047e:	d9a4      	bls.n	80203ca <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 8020480:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020484:	9305      	str	r3, [sp, #20]
 8020486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802048a:	9304      	str	r3, [sp, #16]
 802048c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020490:	9303      	str	r3, [sp, #12]
 8020492:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8020496:	9302      	str	r3, [sp, #8]
 8020498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802049c:	9301      	str	r3, [sp, #4]
 802049e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80204a2:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 80204a4:	1a2d      	subs	r5, r5, r0
 80204a6:	4404      	add	r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 80204a8:	4a66      	ldr	r2, [pc, #408]	; (8020644 <mbedtls_x509_crt_info+0x294>)
 80204aa:	464b      	mov	r3, r9
 80204ac:	4629      	mov	r1, r5
 80204ae:	4620      	mov	r0, r4
 80204b0:	f003 f9fc 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80204b4:	2800      	cmp	r0, #0
 80204b6:	db88      	blt.n	80203ca <mbedtls_x509_crt_info+0x1a>
 80204b8:	4285      	cmp	r5, r0
 80204ba:	d986      	bls.n	80203ca <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 80204bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80204c0:	9305      	str	r3, [sp, #20]
 80204c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80204c6:	9304      	str	r3, [sp, #16]
 80204c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80204cc:	9303      	str	r3, [sp, #12]
 80204ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80204d2:	9302      	str	r3, [sp, #8]
 80204d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80204d8:	9301      	str	r3, [sp, #4]
 80204da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80204de:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 80204e0:	1a2d      	subs	r5, r5, r0
 80204e2:	eb04 0800 	add.w	r8, r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 80204e6:	4a58      	ldr	r2, [pc, #352]	; (8020648 <mbedtls_x509_crt_info+0x298>)
 80204e8:	464b      	mov	r3, r9
 80204ea:	4629      	mov	r1, r5
 80204ec:	4640      	mov	r0, r8
 80204ee:	f003 f9dd 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80204f2:	2800      	cmp	r0, #0
 80204f4:	f6ff af69 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80204f8:	4285      	cmp	r5, r0
 80204fa:	f67f af66 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80204fe:	1a2d      	subs	r5, r5, r0
 8020500:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 8020502:	4a52      	ldr	r2, [pc, #328]	; (802064c <mbedtls_x509_crt_info+0x29c>)
 8020504:	464b      	mov	r3, r9
 8020506:	4629      	mov	r1, r5
 8020508:	4640      	mov	r0, r8
 802050a:	f003 f9cf 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802050e:	2800      	cmp	r0, #0
 8020510:	f6ff af5b 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020514:	4285      	cmp	r5, r0
 8020516:	f67f af58 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 802051a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802051e:	9301      	str	r3, [sp, #4]
 8020520:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8020524:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020526:	1a2d      	subs	r5, r5, r0
 8020528:	4480      	add	r8, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 802052a:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 802052e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8020532:	4629      	mov	r1, r5
 8020534:	4640      	mov	r0, r8
 8020536:	f7ff fb7d 	bl	801fc34 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802053a:	1e06      	subs	r6, r0, #0
 802053c:	f6ff af45 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020540:	42b5      	cmp	r5, r6
 8020542:	f67f af42 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 8020546:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 802054a:	4620      	mov	r0, r4
 802054c:	f7f5 fbfe 	bl	8015d4c <mbedtls_pk_get_name>
 8020550:	f10d 0b1c 	add.w	fp, sp, #28
 8020554:	4602      	mov	r2, r0
 8020556:	2112      	movs	r1, #18
 8020558:	4658      	mov	r0, fp
 802055a:	f7ff fbc9 	bl	801fcf0 <mbedtls_x509_key_size_helper>
 802055e:	2800      	cmp	r0, #0
 8020560:	f47f af37 	bne.w	80203d2 <mbedtls_x509_crt_info+0x22>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 8020564:	4620      	mov	r0, r4
 8020566:	f7f5 fb7d 	bl	8015c64 <mbedtls_pk_get_bitlen>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802056a:	1bad      	subs	r5, r5, r6
 802056c:	44b0      	add	r8, r6
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 802056e:	e9cd b000 	strd	fp, r0, [sp]
 8020572:	4a37      	ldr	r2, [pc, #220]	; (8020650 <mbedtls_x509_crt_info+0x2a0>)
 8020574:	464b      	mov	r3, r9
 8020576:	4629      	mov	r1, r5
 8020578:	4640      	mov	r0, r8
 802057a:	f003 f997 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802057e:	2800      	cmp	r0, #0
 8020580:	f6ff af23 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020584:	4285      	cmp	r5, r0
 8020586:	f67f af20 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 802058a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802058e:	05de      	lsls	r6, r3, #23
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020590:	eba5 0400 	sub.w	r4, r5, r0
 8020594:	eb08 0500 	add.w	r5, r8, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8020598:	d528      	bpl.n	80205ec <mbedtls_x509_crt_info+0x23c>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 802059a:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 802059e:	4a2d      	ldr	r2, [pc, #180]	; (8020654 <mbedtls_x509_crt_info+0x2a4>)
 80205a0:	4b2d      	ldr	r3, [pc, #180]	; (8020658 <mbedtls_x509_crt_info+0x2a8>)
 80205a2:	2900      	cmp	r1, #0
 80205a4:	bf08      	it	eq
 80205a6:	4613      	moveq	r3, r2
 80205a8:	9300      	str	r3, [sp, #0]
 80205aa:	4a2c      	ldr	r2, [pc, #176]	; (802065c <mbedtls_x509_crt_info+0x2ac>)
 80205ac:	464b      	mov	r3, r9
 80205ae:	4621      	mov	r1, r4
 80205b0:	4628      	mov	r0, r5
 80205b2:	f003 f97b 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80205b6:	2800      	cmp	r0, #0
 80205b8:	f6ff af07 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80205bc:	4284      	cmp	r4, r0
 80205be:	f67f af04 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
        if( crt->max_pathlen > 0 )
 80205c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80205c6:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 80205c8:	eba4 0400 	sub.w	r4, r4, r0
 80205cc:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
 80205ce:	dd0d      	ble.n	80205ec <mbedtls_x509_crt_info+0x23c>
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 80205d0:	4a23      	ldr	r2, [pc, #140]	; (8020660 <mbedtls_x509_crt_info+0x2b0>)
 80205d2:	3b01      	subs	r3, #1
 80205d4:	4621      	mov	r1, r4
 80205d6:	4628      	mov	r0, r5
 80205d8:	f003 f968 	bl	80238ac <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 80205dc:	2800      	cmp	r0, #0
 80205de:	f6ff aef4 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80205e2:	4284      	cmp	r4, r0
 80205e4:	f67f aef1 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80205e8:	1a24      	subs	r4, r4, r0
 80205ea:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80205ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80205f0:	0698      	lsls	r0, r3, #26
 80205f2:	d54e      	bpl.n	8020692 <mbedtls_x509_crt_info+0x2e2>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 80205f4:	4a1b      	ldr	r2, [pc, #108]	; (8020664 <mbedtls_x509_crt_info+0x2b4>)
 80205f6:	464b      	mov	r3, r9
 80205f8:	4621      	mov	r1, r4
 80205fa:	4628      	mov	r0, r5
 80205fc:	f003 f956 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020600:	2800      	cmp	r0, #0
 8020602:	f6ff aee2 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020606:	42a0      	cmp	r0, r4
 8020608:	f4bf aedf 	bcs.w	80203ca <mbedtls_x509_crt_info+0x1a>
 802060c:	1a24      	subs	r4, r4, r0
 802060e:	4405      	add	r5, r0
    size_t sep_len = 0;
 8020610:	2100      	movs	r1, #0
    const char *sep = "";
 8020612:	f8df c058 	ldr.w	ip, [pc, #88]	; 802066c <mbedtls_x509_crt_info+0x2bc>
        sep = ", ";
 8020616:	4814      	ldr	r0, [pc, #80]	; (8020668 <mbedtls_x509_crt_info+0x2b8>)
        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8020618:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
    while( cur != NULL )
 802061c:	460e      	mov	r6, r1
        if( cur->buf.len + sep_len >= n )
 802061e:	6853      	ldr	r3, [r2, #4]
 8020620:	440b      	add	r3, r1
 8020622:	42a3      	cmp	r3, r4
 8020624:	d324      	bcc.n	8020670 <mbedtls_x509_crt_info+0x2c0>
            *p = '\0';
 8020626:	702e      	strb	r6, [r5, #0]
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 8020628:	e6cf      	b.n	80203ca <mbedtls_x509_crt_info+0x1a>
 802062a:	bf00      	nop
 802062c:	08033124 	.word	0x08033124
 8020630:	ffffd680 	.word	0xffffd680
 8020634:	08033144 	.word	0x08033144
 8020638:	0803315e 	.word	0x0803315e
 802063c:	08033175 	.word	0x08033175
 8020640:	0803318d 	.word	0x0803318d
 8020644:	080331a5 	.word	0x080331a5
 8020648:	080331da 	.word	0x080331da
 802064c:	0803320f 	.word	0x0803320f
 8020650:	08033227 	.word	0x08033227
 8020654:	0802f1bd 	.word	0x0802f1bd
 8020658:	0802f1b8 	.word	0x0802f1b8
 802065c:	08033239 	.word	0x08033239
 8020660:	08033256 	.word	0x08033256
 8020664:	08033267 	.word	0x08033267
 8020668:	08032fc0 	.word	0x08032fc0
 802066c:	08030466 	.word	0x08030466
        n -= cur->buf.len + sep_len;
 8020670:	1ae4      	subs	r4, r4, r3
        for( i = 0; i < sep_len; i++ )
 8020672:	2300      	movs	r3, #0
 8020674:	428b      	cmp	r3, r1
 8020676:	f040 818d 	bne.w	8020994 <mbedtls_x509_crt_info+0x5e4>
 802067a:	441d      	add	r5, r3
        for( i = 0; i < cur->buf.len; i++ )
 802067c:	2300      	movs	r3, #0
 802067e:	6851      	ldr	r1, [r2, #4]
 8020680:	428b      	cmp	r3, r1
 8020682:	f0c0 818d 	bcc.w	80209a0 <mbedtls_x509_crt_info+0x5f0>
        cur = cur->next;
 8020686:	68d2      	ldr	r2, [r2, #12]
        sep_len = 2;
 8020688:	2102      	movs	r1, #2
        sep = ", ";
 802068a:	4684      	mov	ip, r0
    while( cur != NULL )
 802068c:	2a00      	cmp	r2, #0
 802068e:	d1c6      	bne.n	802061e <mbedtls_x509_crt_info+0x26e>
    *p = '\0';
 8020690:	702a      	strb	r2, [r5, #0]
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 8020692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020696:	03d9      	lsls	r1, r3, #15
 8020698:	f140 8093 	bpl.w	80207c2 <mbedtls_x509_crt_info+0x412>
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 802069c:	4ac3      	ldr	r2, [pc, #780]	; (80209ac <mbedtls_x509_crt_info+0x5fc>)
 802069e:	464b      	mov	r3, r9
 80206a0:	4621      	mov	r1, r4
 80206a2:	4628      	mov	r0, r5
 80206a4:	f003 f902 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80206a8:	2800      	cmp	r0, #0
 80206aa:	f6ff ae8e 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80206ae:	42a0      	cmp	r0, r4
 80206b0:	f4bf ae8b 	bcs.w	80203ca <mbedtls_x509_crt_info+0x1a>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80206b4:	f997 3118 	ldrsb.w	r3, [r7, #280]	; 0x118
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 80206b8:	f897 6118 	ldrb.w	r6, [r7, #280]	; 0x118
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80206bc:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 80206be:	eba4 0400 	sub.w	r4, r4, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80206c2:	4bbb      	ldr	r3, [pc, #748]	; (80209b0 <mbedtls_x509_crt_info+0x600>)
        MBEDTLS_X509_SAFE_SNPRINTF;
 80206c4:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80206c6:	da0d      	bge.n	80206e4 <mbedtls_x509_crt_info+0x334>
 80206c8:	4aba      	ldr	r2, [pc, #744]	; (80209b4 <mbedtls_x509_crt_info+0x604>)
 80206ca:	4621      	mov	r1, r4
 80206cc:	4628      	mov	r0, r5
 80206ce:	f003 f8ed 	bl	80238ac <sniprintf>
 80206d2:	2800      	cmp	r0, #0
 80206d4:	f6ff ae79 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80206d8:	4284      	cmp	r4, r0
 80206da:	f67f ae76 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80206de:	4bb6      	ldr	r3, [pc, #728]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 80206e0:	1a24      	subs	r4, r4, r0
 80206e2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 80206e4:	0672      	lsls	r2, r6, #25
 80206e6:	d50d      	bpl.n	8020704 <mbedtls_x509_crt_info+0x354>
 80206e8:	4ab4      	ldr	r2, [pc, #720]	; (80209bc <mbedtls_x509_crt_info+0x60c>)
 80206ea:	4621      	mov	r1, r4
 80206ec:	4628      	mov	r0, r5
 80206ee:	f003 f8dd 	bl	80238ac <sniprintf>
 80206f2:	2800      	cmp	r0, #0
 80206f4:	f6ff ae69 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80206f8:	4284      	cmp	r4, r0
 80206fa:	f67f ae66 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80206fe:	4bae      	ldr	r3, [pc, #696]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 8020700:	1a24      	subs	r4, r4, r0
 8020702:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 8020704:	06b0      	lsls	r0, r6, #26
 8020706:	d50d      	bpl.n	8020724 <mbedtls_x509_crt_info+0x374>
 8020708:	4aad      	ldr	r2, [pc, #692]	; (80209c0 <mbedtls_x509_crt_info+0x610>)
 802070a:	4621      	mov	r1, r4
 802070c:	4628      	mov	r0, r5
 802070e:	f003 f8cd 	bl	80238ac <sniprintf>
 8020712:	2800      	cmp	r0, #0
 8020714:	f6ff ae59 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020718:	4284      	cmp	r4, r0
 802071a:	f67f ae56 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 802071e:	4ba6      	ldr	r3, [pc, #664]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 8020720:	1a24      	subs	r4, r4, r0
 8020722:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 8020724:	06f1      	lsls	r1, r6, #27
 8020726:	d50d      	bpl.n	8020744 <mbedtls_x509_crt_info+0x394>
 8020728:	4aa6      	ldr	r2, [pc, #664]	; (80209c4 <mbedtls_x509_crt_info+0x614>)
 802072a:	4621      	mov	r1, r4
 802072c:	4628      	mov	r0, r5
 802072e:	f003 f8bd 	bl	80238ac <sniprintf>
 8020732:	2800      	cmp	r0, #0
 8020734:	f6ff ae49 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020738:	4284      	cmp	r4, r0
 802073a:	f67f ae46 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 802073e:	4b9e      	ldr	r3, [pc, #632]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 8020740:	1a24      	subs	r4, r4, r0
 8020742:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 8020744:	0732      	lsls	r2, r6, #28
 8020746:	d50d      	bpl.n	8020764 <mbedtls_x509_crt_info+0x3b4>
 8020748:	4a9f      	ldr	r2, [pc, #636]	; (80209c8 <mbedtls_x509_crt_info+0x618>)
 802074a:	4621      	mov	r1, r4
 802074c:	4628      	mov	r0, r5
 802074e:	f003 f8ad 	bl	80238ac <sniprintf>
 8020752:	2800      	cmp	r0, #0
 8020754:	f6ff ae39 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020758:	4284      	cmp	r4, r0
 802075a:	f67f ae36 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 802075e:	4b96      	ldr	r3, [pc, #600]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 8020760:	1a24      	subs	r4, r4, r0
 8020762:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 8020764:	0770      	lsls	r0, r6, #29
 8020766:	d50d      	bpl.n	8020784 <mbedtls_x509_crt_info+0x3d4>
 8020768:	4a98      	ldr	r2, [pc, #608]	; (80209cc <mbedtls_x509_crt_info+0x61c>)
 802076a:	4621      	mov	r1, r4
 802076c:	4628      	mov	r0, r5
 802076e:	f003 f89d 	bl	80238ac <sniprintf>
 8020772:	2800      	cmp	r0, #0
 8020774:	f6ff ae29 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020778:	4284      	cmp	r4, r0
 802077a:	f67f ae26 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 802077e:	4b8e      	ldr	r3, [pc, #568]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 8020780:	1a24      	subs	r4, r4, r0
 8020782:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 8020784:	07b1      	lsls	r1, r6, #30
 8020786:	d50d      	bpl.n	80207a4 <mbedtls_x509_crt_info+0x3f4>
 8020788:	4a91      	ldr	r2, [pc, #580]	; (80209d0 <mbedtls_x509_crt_info+0x620>)
 802078a:	4621      	mov	r1, r4
 802078c:	4628      	mov	r0, r5
 802078e:	f003 f88d 	bl	80238ac <sniprintf>
 8020792:	2800      	cmp	r0, #0
 8020794:	f6ff ae19 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020798:	4284      	cmp	r4, r0
 802079a:	f67f ae16 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 802079e:	4b86      	ldr	r3, [pc, #536]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 80207a0:	1a24      	subs	r4, r4, r0
 80207a2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 80207a4:	07f2      	lsls	r2, r6, #31
 80207a6:	d50c      	bpl.n	80207c2 <mbedtls_x509_crt_info+0x412>
 80207a8:	4a8a      	ldr	r2, [pc, #552]	; (80209d4 <mbedtls_x509_crt_info+0x624>)
 80207aa:	4621      	mov	r1, r4
 80207ac:	4628      	mov	r0, r5
 80207ae:	f003 f87d 	bl	80238ac <sniprintf>
 80207b2:	2800      	cmp	r0, #0
 80207b4:	f6ff ae09 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80207b8:	4284      	cmp	r4, r0
 80207ba:	f67f ae06 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80207be:	1a24      	subs	r4, r4, r0
 80207c0:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 80207c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80207c6:	075e      	lsls	r6, r3, #29
 80207c8:	f140 80a0 	bpl.w	802090c <mbedtls_x509_crt_info+0x55c>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 80207cc:	4a82      	ldr	r2, [pc, #520]	; (80209d8 <mbedtls_x509_crt_info+0x628>)
 80207ce:	464b      	mov	r3, r9
 80207d0:	4621      	mov	r1, r4
 80207d2:	4628      	mov	r0, r5
 80207d4:	f003 f86a 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80207d8:	2800      	cmp	r0, #0
 80207da:	f6ff adf6 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80207de:	42a0      	cmp	r0, r4
 80207e0:	f4bf adf3 	bcs.w	80203ca <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 80207e4:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 80207e8:	4b71      	ldr	r3, [pc, #452]	; (80209b0 <mbedtls_x509_crt_info+0x600>)
        MBEDTLS_X509_SAFE_SNPRINTF;
 80207ea:	1a24      	subs	r4, r4, r0
 80207ec:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 80207ee:	0630      	lsls	r0, r6, #24
 80207f0:	d50d      	bpl.n	802080e <mbedtls_x509_crt_info+0x45e>
 80207f2:	4a7a      	ldr	r2, [pc, #488]	; (80209dc <mbedtls_x509_crt_info+0x62c>)
 80207f4:	4621      	mov	r1, r4
 80207f6:	4628      	mov	r0, r5
 80207f8:	f003 f858 	bl	80238ac <sniprintf>
 80207fc:	2800      	cmp	r0, #0
 80207fe:	f6ff ade4 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020802:	4284      	cmp	r4, r0
 8020804:	f67f ade1 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020808:	4b6b      	ldr	r3, [pc, #428]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 802080a:	1a24      	subs	r4, r4, r0
 802080c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 802080e:	0671      	lsls	r1, r6, #25
 8020810:	d50d      	bpl.n	802082e <mbedtls_x509_crt_info+0x47e>
 8020812:	4a73      	ldr	r2, [pc, #460]	; (80209e0 <mbedtls_x509_crt_info+0x630>)
 8020814:	4621      	mov	r1, r4
 8020816:	4628      	mov	r0, r5
 8020818:	f003 f848 	bl	80238ac <sniprintf>
 802081c:	2800      	cmp	r0, #0
 802081e:	f6ff add4 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020822:	4284      	cmp	r4, r0
 8020824:	f67f add1 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020828:	4b63      	ldr	r3, [pc, #396]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 802082a:	1a24      	subs	r4, r4, r0
 802082c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 802082e:	06b2      	lsls	r2, r6, #26
 8020830:	d50d      	bpl.n	802084e <mbedtls_x509_crt_info+0x49e>
 8020832:	4a6c      	ldr	r2, [pc, #432]	; (80209e4 <mbedtls_x509_crt_info+0x634>)
 8020834:	4621      	mov	r1, r4
 8020836:	4628      	mov	r0, r5
 8020838:	f003 f838 	bl	80238ac <sniprintf>
 802083c:	2800      	cmp	r0, #0
 802083e:	f6ff adc4 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020842:	4284      	cmp	r4, r0
 8020844:	f67f adc1 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020848:	4b5b      	ldr	r3, [pc, #364]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 802084a:	1a24      	subs	r4, r4, r0
 802084c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 802084e:	06f0      	lsls	r0, r6, #27
 8020850:	d50d      	bpl.n	802086e <mbedtls_x509_crt_info+0x4be>
 8020852:	4a65      	ldr	r2, [pc, #404]	; (80209e8 <mbedtls_x509_crt_info+0x638>)
 8020854:	4621      	mov	r1, r4
 8020856:	4628      	mov	r0, r5
 8020858:	f003 f828 	bl	80238ac <sniprintf>
 802085c:	2800      	cmp	r0, #0
 802085e:	f6ff adb4 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020862:	4284      	cmp	r4, r0
 8020864:	f67f adb1 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020868:	4b53      	ldr	r3, [pc, #332]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 802086a:	1a24      	subs	r4, r4, r0
 802086c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 802086e:	0731      	lsls	r1, r6, #28
 8020870:	d50d      	bpl.n	802088e <mbedtls_x509_crt_info+0x4de>
 8020872:	4a5e      	ldr	r2, [pc, #376]	; (80209ec <mbedtls_x509_crt_info+0x63c>)
 8020874:	4621      	mov	r1, r4
 8020876:	4628      	mov	r0, r5
 8020878:	f003 f818 	bl	80238ac <sniprintf>
 802087c:	2800      	cmp	r0, #0
 802087e:	f6ff ada4 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020882:	4284      	cmp	r4, r0
 8020884:	f67f ada1 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020888:	4b4b      	ldr	r3, [pc, #300]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 802088a:	1a24      	subs	r4, r4, r0
 802088c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 802088e:	0772      	lsls	r2, r6, #29
 8020890:	d50d      	bpl.n	80208ae <mbedtls_x509_crt_info+0x4fe>
 8020892:	4a57      	ldr	r2, [pc, #348]	; (80209f0 <mbedtls_x509_crt_info+0x640>)
 8020894:	4621      	mov	r1, r4
 8020896:	4628      	mov	r0, r5
 8020898:	f003 f808 	bl	80238ac <sniprintf>
 802089c:	2800      	cmp	r0, #0
 802089e:	f6ff ad94 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80208a2:	4284      	cmp	r4, r0
 80208a4:	f67f ad91 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80208a8:	4b43      	ldr	r3, [pc, #268]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 80208aa:	1a24      	subs	r4, r4, r0
 80208ac:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 80208ae:	07b0      	lsls	r0, r6, #30
 80208b0:	d50d      	bpl.n	80208ce <mbedtls_x509_crt_info+0x51e>
 80208b2:	4a50      	ldr	r2, [pc, #320]	; (80209f4 <mbedtls_x509_crt_info+0x644>)
 80208b4:	4621      	mov	r1, r4
 80208b6:	4628      	mov	r0, r5
 80208b8:	f002 fff8 	bl	80238ac <sniprintf>
 80208bc:	2800      	cmp	r0, #0
 80208be:	f6ff ad84 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80208c2:	4284      	cmp	r4, r0
 80208c4:	f67f ad81 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80208c8:	4b3b      	ldr	r3, [pc, #236]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 80208ca:	1a24      	subs	r4, r4, r0
 80208cc:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 80208ce:	07f1      	lsls	r1, r6, #31
 80208d0:	d50d      	bpl.n	80208ee <mbedtls_x509_crt_info+0x53e>
 80208d2:	4a49      	ldr	r2, [pc, #292]	; (80209f8 <mbedtls_x509_crt_info+0x648>)
 80208d4:	4621      	mov	r1, r4
 80208d6:	4628      	mov	r0, r5
 80208d8:	f002 ffe8 	bl	80238ac <sniprintf>
 80208dc:	2800      	cmp	r0, #0
 80208de:	f6ff ad74 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80208e2:	4284      	cmp	r4, r0
 80208e4:	f67f ad71 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 80208e8:	4b33      	ldr	r3, [pc, #204]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
 80208ea:	1a24      	subs	r4, r4, r0
 80208ec:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 80208ee:	0432      	lsls	r2, r6, #16
 80208f0:	d50c      	bpl.n	802090c <mbedtls_x509_crt_info+0x55c>
 80208f2:	4a42      	ldr	r2, [pc, #264]	; (80209fc <mbedtls_x509_crt_info+0x64c>)
 80208f4:	4621      	mov	r1, r4
 80208f6:	4628      	mov	r0, r5
 80208f8:	f002 ffd8 	bl	80238ac <sniprintf>
 80208fc:	2800      	cmp	r0, #0
 80208fe:	f6ff ad64 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020902:	4284      	cmp	r4, r0
 8020904:	f67f ad61 	bls.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020908:	1a24      	subs	r4, r4, r0
 802090a:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 802090c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020910:	051b      	lsls	r3, r3, #20
 8020912:	d531      	bpl.n	8020978 <mbedtls_x509_crt_info+0x5c8>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 8020914:	4a3a      	ldr	r2, [pc, #232]	; (8020a00 <mbedtls_x509_crt_info+0x650>)
 8020916:	464b      	mov	r3, r9
 8020918:	4621      	mov	r1, r4
 802091a:	4628      	mov	r0, r5
 802091c:	f002 ffc6 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020920:	2800      	cmp	r0, #0
 8020922:	f6ff ad52 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020926:	42a0      	cmp	r0, r4
 8020928:	f4bf ad4f 	bcs.w	80203ca <mbedtls_x509_crt_info+0x1a>
    const char *sep = "";
 802092c:	f8df b080 	ldr.w	fp, [pc, #128]	; 80209b0 <mbedtls_x509_crt_info+0x600>
            desc = "???";
 8020930:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8020a08 <mbedtls_x509_crt_info+0x658>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8020934:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8020a0c <mbedtls_x509_crt_info+0x65c>
        sep = ", ";
 8020938:	4e1f      	ldr	r6, [pc, #124]	; (80209b8 <mbedtls_x509_crt_info+0x608>)
        MBEDTLS_X509_SAFE_SNPRINTF;
 802093a:	1a24      	subs	r4, r4, r0
 802093c:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
 802093e:	f507 7784 	add.w	r7, r7, #264	; 0x108
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 8020942:	a906      	add	r1, sp, #24
 8020944:	4638      	mov	r0, r7
 8020946:	f7f4 fe55 	bl	80155f4 <mbedtls_oid_get_extended_key_usage>
 802094a:	b108      	cbz	r0, 8020950 <mbedtls_x509_crt_info+0x5a0>
            desc = "???";
 802094c:	f8cd 8018 	str.w	r8, [sp, #24]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8020950:	9b06      	ldr	r3, [sp, #24]
 8020952:	9300      	str	r3, [sp, #0]
 8020954:	464a      	mov	r2, r9
 8020956:	465b      	mov	r3, fp
 8020958:	4621      	mov	r1, r4
 802095a:	4628      	mov	r0, r5
 802095c:	f002 ffa6 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020960:	2800      	cmp	r0, #0
 8020962:	f6ff ad32 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020966:	42a0      	cmp	r0, r4
 8020968:	f4bf ad2f 	bcs.w	80203ca <mbedtls_x509_crt_info+0x1a>
        cur = cur->next;
 802096c:	68ff      	ldr	r7, [r7, #12]
        MBEDTLS_X509_SAFE_SNPRINTF;
 802096e:	1a24      	subs	r4, r4, r0
 8020970:	4405      	add	r5, r0
        sep = ", ";
 8020972:	46b3      	mov	fp, r6
    while( cur != NULL )
 8020974:	2f00      	cmp	r7, #0
 8020976:	d1e4      	bne.n	8020942 <mbedtls_x509_crt_info+0x592>
    ret = mbedtls_snprintf( p, n, "\n" );
 8020978:	4a22      	ldr	r2, [pc, #136]	; (8020a04 <mbedtls_x509_crt_info+0x654>)
 802097a:	4621      	mov	r1, r4
 802097c:	4628      	mov	r0, r5
 802097e:	f002 ff95 	bl	80238ac <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020982:	2800      	cmp	r0, #0
 8020984:	f6ff ad21 	blt.w	80203ca <mbedtls_x509_crt_info+0x1a>
 8020988:	42a0      	cmp	r0, r4
 802098a:	f4bf ad1e 	bcs.w	80203ca <mbedtls_x509_crt_info+0x1a>
    return( (int) ( size - n ) );
 802098e:	1b00      	subs	r0, r0, r4
 8020990:	4450      	add	r0, sl
 8020992:	e51e      	b.n	80203d2 <mbedtls_x509_crt_info+0x22>
            *p++ = sep[i];
 8020994:	f81c e003 	ldrb.w	lr, [ip, r3]
 8020998:	f805 e003 	strb.w	lr, [r5, r3]
        for( i = 0; i < sep_len; i++ )
 802099c:	3301      	adds	r3, #1
 802099e:	e669      	b.n	8020674 <mbedtls_x509_crt_info+0x2c4>
            *p++ = cur->buf.p[i];
 80209a0:	6891      	ldr	r1, [r2, #8]
 80209a2:	5cc9      	ldrb	r1, [r1, r3]
 80209a4:	f805 1b01 	strb.w	r1, [r5], #1
        for( i = 0; i < cur->buf.len; i++ )
 80209a8:	3301      	adds	r3, #1
 80209aa:	e668      	b.n	802067e <mbedtls_x509_crt_info+0x2ce>
 80209ac:	0803327f 	.word	0x0803327f
 80209b0:	08030466 	.word	0x08030466
 80209b4:	08033297 	.word	0x08033297
 80209b8:	08032fc0 	.word	0x08032fc0
 80209bc:	080332a4 	.word	0x080332a4
 80209c0:	080332b1 	.word	0x080332b1
 80209c4:	080332b9 	.word	0x080332b9
 80209c8:	080332ca 	.word	0x080332ca
 80209cc:	080332d5 	.word	0x080332d5
 80209d0:	080332de 	.word	0x080332de
 80209d4:	080332e9 	.word	0x080332e9
 80209d8:	080332fd 	.word	0x080332fd
 80209dc:	08033315 	.word	0x08033315
 80209e0:	08033329 	.word	0x08033329
 80209e4:	0803333b 	.word	0x0803333b
 80209e8:	0803334e 	.word	0x0803334e
 80209ec:	08033362 	.word	0x08033362
 80209f0:	08033372 	.word	0x08033372
 80209f4:	08033382 	.word	0x08033382
 80209f8:	0803338d 	.word	0x0803338d
 80209fc:	0803339d 	.word	0x0803339d
 8020a00:	080333ad 	.word	0x080333ad
 8020a04:	080306ce 	.word	0x080306ce
 8020a08:	08032fd2 	.word	0x08032fd2
 8020a0c:	08030157 	.word	0x08030157

08020a10 <mbedtls_x509_crt_verify_info>:
{
 8020a10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8020a14:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8020a88 <mbedtls_x509_crt_verify_info+0x78>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8020a18:	f8df a070 	ldr.w	sl, [pc, #112]	; 8020a8c <mbedtls_x509_crt_verify_info+0x7c>
{
 8020a1c:	4606      	mov	r6, r0
 8020a1e:	460d      	mov	r5, r1
 8020a20:	4691      	mov	r9, r2
 8020a22:	461f      	mov	r7, r3
    size_t n = size;
 8020a24:	460c      	mov	r4, r1
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8020a26:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8020a2a:	b96b      	cbnz	r3, 8020a48 <mbedtls_x509_crt_verify_info+0x38>
    if( flags != 0 )
 8020a2c:	b157      	cbz	r7, 8020a44 <mbedtls_x509_crt_verify_info+0x34>
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
 8020a2e:	4a14      	ldr	r2, [pc, #80]	; (8020a80 <mbedtls_x509_crt_verify_info+0x70>)
 8020a30:	464b      	mov	r3, r9
 8020a32:	4621      	mov	r1, r4
 8020a34:	4630      	mov	r0, r6
 8020a36:	f002 ff39 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020a3a:	2800      	cmp	r0, #0
 8020a3c:	db11      	blt.n	8020a62 <mbedtls_x509_crt_verify_info+0x52>
 8020a3e:	42a0      	cmp	r0, r4
 8020a40:	d20f      	bcs.n	8020a62 <mbedtls_x509_crt_verify_info+0x52>
 8020a42:	1a24      	subs	r4, r4, r0
    return( (int) ( size - n ) );
 8020a44:	1b28      	subs	r0, r5, r4
 8020a46:	e00d      	b.n	8020a64 <mbedtls_x509_crt_verify_info+0x54>
        if( ( flags & cur->code ) == 0 )
 8020a48:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8020a4c:	4217      	tst	r7, r2
 8020a4e:	d013      	beq.n	8020a78 <mbedtls_x509_crt_verify_info+0x68>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8020a50:	9300      	str	r3, [sp, #0]
 8020a52:	4652      	mov	r2, sl
 8020a54:	464b      	mov	r3, r9
 8020a56:	4621      	mov	r1, r4
 8020a58:	4630      	mov	r0, r6
 8020a5a:	f002 ff27 	bl	80238ac <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020a5e:	2800      	cmp	r0, #0
 8020a60:	da03      	bge.n	8020a6a <mbedtls_x509_crt_verify_info+0x5a>
 8020a62:	4808      	ldr	r0, [pc, #32]	; (8020a84 <mbedtls_x509_crt_verify_info+0x74>)
}
 8020a64:	b002      	add	sp, #8
 8020a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020a6a:	42a0      	cmp	r0, r4
 8020a6c:	d2f9      	bcs.n	8020a62 <mbedtls_x509_crt_verify_info+0x52>
        flags ^= cur->code;
 8020a6e:	f858 3c08 	ldr.w	r3, [r8, #-8]
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020a72:	1a24      	subs	r4, r4, r0
 8020a74:	4406      	add	r6, r0
        flags ^= cur->code;
 8020a76:	405f      	eors	r7, r3
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8020a78:	f108 0808 	add.w	r8, r8, #8
 8020a7c:	e7d3      	b.n	8020a26 <mbedtls_x509_crt_verify_info+0x16>
 8020a7e:	bf00      	nop
 8020a80:	080333c5 	.word	0x080333c5
 8020a84:	ffffd680 	.word	0xffffd680
 8020a88:	0802d650 	.word	0x0802d650
 8020a8c:	08033ba3 	.word	0x08033ba3

08020a90 <mbedtls_x509_crt_check_key_usage>:
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8020a90:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
 8020a94:	4602      	mov	r2, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8020a96:	f013 0004 	ands.w	r0, r3, #4
{
 8020a9a:	b510      	push	{r4, lr}
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8020a9c:	d011      	beq.n	8020ac2 <mbedtls_x509_crt_check_key_usage+0x32>
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 8020a9e:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    usage_must = usage & ~may_mask;
 8020aa2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
 8020aa6:	f023 0301 	bic.w	r3, r3, #1
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 8020aaa:	4393      	bics	r3, r2
 8020aac:	d10a      	bne.n	8020ac4 <mbedtls_x509_crt_check_key_usage+0x34>
    usage_may = usage & may_mask;
 8020aae:	f248 0301 	movw	r3, #32769	; 0x8001
 8020ab2:	ea01 0403 	and.w	r4, r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020ab6:	4804      	ldr	r0, [pc, #16]	; (8020ac8 <mbedtls_x509_crt_check_key_usage+0x38>)
    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8020ab8:	4311      	orrs	r1, r2
 8020aba:	4019      	ands	r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020abc:	428c      	cmp	r4, r1
 8020abe:	bf08      	it	eq
 8020ac0:	2000      	moveq	r0, #0
}
 8020ac2:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020ac4:	4800      	ldr	r0, [pc, #0]	; (8020ac8 <mbedtls_x509_crt_check_key_usage+0x38>)
 8020ac6:	e7fc      	b.n	8020ac2 <mbedtls_x509_crt_check_key_usage+0x32>
 8020ac8:	ffffd800 	.word	0xffffd800

08020acc <x509_crt_check_parent>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8020acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ace:	4605      	mov	r5, r0
 8020ad0:	460c      	mov	r4, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8020ad2:	304c      	adds	r0, #76	; 0x4c
 8020ad4:	316c      	adds	r1, #108	; 0x6c
{
 8020ad6:	4617      	mov	r7, r2
 8020ad8:	461e      	mov	r6, r3
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8020ada:	f7ff fbdb 	bl	8020294 <x509_name_cmp>
 8020ade:	b9d8      	cbnz	r0, 8020b18 <x509_crt_check_parent+0x4c>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 8020ae0:	b167      	cbz	r7, 8020afc <x509_crt_check_parent+0x30>
 8020ae2:	69a7      	ldr	r7, [r4, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 8020ae4:	b146      	cbz	r6, 8020af8 <x509_crt_check_parent+0x2c>
        child->raw.len == parent->raw.len &&
 8020ae6:	686a      	ldr	r2, [r5, #4]
    if( top && bottom &&
 8020ae8:	6863      	ldr	r3, [r4, #4]
 8020aea:	429a      	cmp	r2, r3
 8020aec:	d104      	bne.n	8020af8 <x509_crt_check_parent+0x2c>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 8020aee:	68a1      	ldr	r1, [r4, #8]
 8020af0:	68a8      	ldr	r0, [r5, #8]
 8020af2:	f001 fcb7 	bl	8022464 <memcmp>
        child->raw.len == parent->raw.len &&
 8020af6:	b160      	cbz	r0, 8020b12 <x509_crt_check_parent+0x46>
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 8020af8:	2f02      	cmp	r7, #2
 8020afa:	dd0b      	ble.n	8020b14 <x509_crt_check_parent+0x48>
 8020afc:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8020b00:	b153      	cbz	r3, 8020b18 <x509_crt_check_parent+0x4c>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 8020b02:	2104      	movs	r1, #4
 8020b04:	4620      	mov	r0, r4
 8020b06:	f7ff ffc3 	bl	8020a90 <mbedtls_x509_crt_check_key_usage>
    if( need_ca_bit &&
 8020b0a:	3800      	subs	r0, #0
 8020b0c:	bf18      	it	ne
 8020b0e:	2001      	movne	r0, #1
 8020b10:	4240      	negs	r0, r0
        return( -1 );
    }
#endif

    return( 0 );
}
 8020b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
 8020b14:	2000      	movs	r0, #0
 8020b16:	e7fc      	b.n	8020b12 <x509_crt_check_parent+0x46>
        return( -1 );
 8020b18:	f04f 30ff 	mov.w	r0, #4294967295
 8020b1c:	e7f9      	b.n	8020b12 <x509_crt_check_parent+0x46>
	...

08020b20 <mbedtls_x509_crt_check_extended_key_usage>:
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 8020b20:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
 8020b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b28:	4604      	mov	r4, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 8020b2a:	f413 6000 	ands.w	r0, r3, #2048	; 0x800
{
 8020b2e:	460e      	mov	r6, r1
 8020b30:	4615      	mov	r5, r2
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 8020b32:	d018      	beq.n	8020b66 <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
 8020b34:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8020b70 <mbedtls_x509_crt_check_extended_key_usage+0x50>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 8020b38:	f504 7484 	add.w	r4, r4, #264	; 0x108
        if( cur_oid->len == usage_len &&
 8020b3c:	6867      	ldr	r7, [r4, #4]
 8020b3e:	42af      	cmp	r7, r5
 8020b40:	d105      	bne.n	8020b4e <mbedtls_x509_crt_check_extended_key_usage+0x2e>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
 8020b42:	68a0      	ldr	r0, [r4, #8]
 8020b44:	462a      	mov	r2, r5
 8020b46:	4631      	mov	r1, r6
 8020b48:	f001 fc8c 	bl	8022464 <memcmp>
        if( cur_oid->len == usage_len &&
 8020b4c:	b158      	cbz	r0, 8020b66 <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
 8020b4e:	2f04      	cmp	r7, #4
 8020b50:	d105      	bne.n	8020b5e <mbedtls_x509_crt_check_extended_key_usage+0x3e>
 8020b52:	68a1      	ldr	r1, [r4, #8]
 8020b54:	463a      	mov	r2, r7
 8020b56:	4640      	mov	r0, r8
 8020b58:	f001 fc84 	bl	8022464 <memcmp>
 8020b5c:	b118      	cbz	r0, 8020b66 <mbedtls_x509_crt_check_extended_key_usage+0x46>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 8020b5e:	68e4      	ldr	r4, [r4, #12]
 8020b60:	2c00      	cmp	r4, #0
 8020b62:	d1eb      	bne.n	8020b3c <mbedtls_x509_crt_check_extended_key_usage+0x1c>
    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020b64:	4801      	ldr	r0, [pc, #4]	; (8020b6c <mbedtls_x509_crt_check_extended_key_usage+0x4c>)
}
 8020b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b6a:	bf00      	nop
 8020b6c:	ffffd800 	.word	0xffffd800
 8020b70:	0802d6f0 	.word	0x0802d6f0

08020b74 <mbedtls_x509_crt_is_revoked>:
{
 8020b74:	b538      	push	{r3, r4, r5, lr}
 8020b76:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 8020b78:	f101 0484 	add.w	r4, r1, #132	; 0x84
    while( cur != NULL && cur->serial.len != 0 )
 8020b7c:	6923      	ldr	r3, [r4, #16]
 8020b7e:	b12b      	cbz	r3, 8020b8c <mbedtls_x509_crt_is_revoked+0x18>
        if( crt->serial.len == cur->serial.len &&
 8020b80:	6a2a      	ldr	r2, [r5, #32]
 8020b82:	429a      	cmp	r2, r3
 8020b84:	d004      	beq.n	8020b90 <mbedtls_x509_crt_is_revoked+0x1c>
        cur = cur->next;
 8020b86:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    while( cur != NULL && cur->serial.len != 0 )
 8020b88:	2c00      	cmp	r4, #0
 8020b8a:	d1f7      	bne.n	8020b7c <mbedtls_x509_crt_is_revoked+0x8>
    return( 0 );
 8020b8c:	2000      	movs	r0, #0
}
 8020b8e:	bd38      	pop	{r3, r4, r5, pc}
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 8020b90:	6961      	ldr	r1, [r4, #20]
 8020b92:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8020b94:	f001 fc66 	bl	8022464 <memcmp>
        if( crt->serial.len == cur->serial.len &&
 8020b98:	2800      	cmp	r0, #0
 8020b9a:	d1f4      	bne.n	8020b86 <mbedtls_x509_crt_is_revoked+0x12>
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 8020b9c:	f104 0018 	add.w	r0, r4, #24
 8020ba0:	f7ff f8ba 	bl	801fd18 <mbedtls_x509_time_is_past>
 8020ba4:	2800      	cmp	r0, #0
 8020ba6:	d0ee      	beq.n	8020b86 <mbedtls_x509_crt_is_revoked+0x12>
                return( 1 );
 8020ba8:	2001      	movs	r0, #1
 8020baa:	e7f0      	b.n	8020b8e <mbedtls_x509_crt_is_revoked+0x1a>

08020bac <x509_crt_verifycrl.part.0>:
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
 8020bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bb0:	ed2d 8b02 	vpush	{d8}
 8020bb4:	ee08 0a10 	vmov	s16, r0
 8020bb8:	b099      	sub	sp, #100	; 0x64
 8020bba:	460e      	mov	r6, r1
 8020bbc:	4614      	mov	r4, r2
 8020bbe:	461f      	mov	r7, r3
    int flags = 0;
 8020bc0:	2500      	movs	r5, #0
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020bc2:	f04f 0901 	mov.w	r9, #1
    while( crl_list != NULL )
 8020bc6:	b1a4      	cbz	r4, 8020bf2 <x509_crt_verifycrl.part.0+0x46>
        if( crl_list->version == 0 ||
 8020bc8:	69a3      	ldr	r3, [r4, #24]
 8020bca:	b143      	cbz	r3, 8020bde <x509_crt_verifycrl.part.0+0x32>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8020bcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        if( crl_list->version == 0 ||
 8020bce:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8020bd0:	429a      	cmp	r2, r3
 8020bd2:	d104      	bne.n	8020bde <x509_crt_verifycrl.part.0+0x32>
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 8020bd4:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8020bd6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8020bd8:	f001 fc44 	bl	8022464 <memcmp>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8020bdc:	b110      	cbz	r0, 8020be4 <x509_crt_verifycrl.part.0+0x38>
        crl_list = crl_list->next;
 8020bde:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8020be2:	e7f0      	b.n	8020bc6 <x509_crt_verifycrl.part.0+0x1a>
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 8020be4:	2102      	movs	r1, #2
 8020be6:	4630      	mov	r0, r6
 8020be8:	f7ff ff52 	bl	8020a90 <mbedtls_x509_crt_check_key_usage>
 8020bec:	b138      	cbz	r0, 8020bfe <x509_crt_verifycrl.part.0+0x52>
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 8020bee:	f045 0510 	orr.w	r5, r5, #16
}
 8020bf2:	4628      	mov	r0, r5
 8020bf4:	b019      	add	sp, #100	; 0x64
 8020bf6:	ecbd 8b02 	vpop	{d8}
 8020bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8020bfe:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020c02:	683a      	ldr	r2, [r7, #0]
 8020c04:	1e43      	subs	r3, r0, #1
 8020c06:	fa09 f303 	lsl.w	r3, r9, r3
 8020c0a:	4213      	tst	r3, r2
 8020c0c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8020c10:	f04f 0201 	mov.w	r2, #1
 8020c14:	f103 33ff 	add.w	r3, r3, #4294967295
 8020c18:	fa02 f303 	lsl.w	r3, r2, r3
 8020c1c:	687a      	ldr	r2, [r7, #4]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 8020c1e:	bf08      	it	eq
 8020c20:	f445 3500 	orreq.w	r5, r5, #131072	; 0x20000
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020c24:	4213      	tst	r3, r2
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 8020c26:	bf08      	it	eq
 8020c28:	f445 2580 	orreq.w	r5, r5, #262144	; 0x40000
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8020c2c:	f7f3 fe86 	bl	801493c <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8020c30:	4680      	mov	r8, r0
 8020c32:	2800      	cmp	r0, #0
 8020c34:	d0db      	beq.n	8020bee <x509_crt_verifycrl.part.0+0x42>
        mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash );
 8020c36:	f10d 0b20 	add.w	fp, sp, #32
 8020c3a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020c3e:	465b      	mov	r3, fp
 8020c40:	f7f3 fefe 	bl	8014a40 <mbedtls_md>
        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 8020c44:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020c48:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 8020c4c:	9205      	str	r2, [sp, #20]
 8020c4e:	4638      	mov	r0, r7
 8020c50:	f7ff fb8b 	bl	802036a <x509_profile_check_key>
 8020c54:	9a05      	ldr	r2, [sp, #20]
 8020c56:	b108      	cbz	r0, 8020c5c <x509_crt_verifycrl.part.0+0xb0>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020c58:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020c5c:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8020c60:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8020c64:	f894 a0e9 	ldrb.w	sl, [r4, #233]	; 0xe9
 8020c68:	9207      	str	r2, [sp, #28]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020c6a:	4640      	mov	r0, r8
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020c6c:	9106      	str	r1, [sp, #24]
 8020c6e:	9305      	str	r3, [sp, #20]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020c70:	f7f3 ffb4 	bl	8014bdc <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020c74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8020c78:	9303      	str	r3, [sp, #12]
 8020c7a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8020c7e:	f8cd b000 	str.w	fp, [sp]
 8020c82:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8020c86:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8020c8a:	9b05      	ldr	r3, [sp, #20]
 8020c8c:	4650      	mov	r0, sl
 8020c8e:	f7f4 fff1 	bl	8015c74 <mbedtls_pk_verify_ext>
 8020c92:	2800      	cmp	r0, #0
 8020c94:	d1ab      	bne.n	8020bee <x509_crt_verifycrl.part.0+0x42>
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 8020c96:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8020c9a:	f7ff f83d 	bl	801fd18 <mbedtls_x509_time_is_past>
 8020c9e:	b108      	cbz	r0, 8020ca4 <x509_crt_verifycrl.part.0+0xf8>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 8020ca0:	f045 0520 	orr.w	r5, r5, #32
        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 8020ca4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8020ca8:	f7ff f846 	bl	801fd38 <mbedtls_x509_time_is_future>
 8020cac:	b108      	cbz	r0, 8020cb2 <x509_crt_verifycrl.part.0+0x106>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 8020cae:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 8020cb2:	ee18 0a10 	vmov	r0, s16
 8020cb6:	4621      	mov	r1, r4
 8020cb8:	f7ff ff5c 	bl	8020b74 <mbedtls_x509_crt_is_revoked>
 8020cbc:	2800      	cmp	r0, #0
 8020cbe:	d08e      	beq.n	8020bde <x509_crt_verifycrl.part.0+0x32>
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 8020cc0:	f045 0502 	orr.w	r5, r5, #2
            break;
 8020cc4:	e795      	b.n	8020bf2 <x509_crt_verifycrl.part.0+0x46>

08020cc6 <x509_crt_verify_top>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8020cc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cca:	ed2d 8b02 	vpush	{d8}
 8020cce:	b09b      	sub	sp, #108	; 0x6c
 8020cd0:	4604      	mov	r4, r0
 8020cd2:	4698      	mov	r8, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020cd4:	30a4      	adds	r0, #164	; 0xa4
    uint32_t ca_flags = 0;
 8020cd6:	2300      	movs	r3, #0
{
 8020cd8:	ee08 2a10 	vmov	s16, r2
 8020cdc:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8020ce0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    uint32_t ca_flags = 0;
 8020ce2:	9309      	str	r3, [sp, #36]	; 0x24
{
 8020ce4:	460e      	mov	r6, r1
    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020ce6:	f7ff f817 	bl	801fd18 <mbedtls_x509_time_is_past>
 8020cea:	b118      	cbz	r0, 8020cf4 <x509_crt_verify_top+0x2e>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020cec:	682b      	ldr	r3, [r5, #0]
 8020cee:	f043 0301 	orr.w	r3, r3, #1
 8020cf2:	602b      	str	r3, [r5, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8020cf4:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8020cf8:	f7ff f81e 	bl	801fd38 <mbedtls_x509_time_is_future>
 8020cfc:	b118      	cbz	r0, 8020d06 <x509_crt_verify_top+0x40>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020cfe:	682b      	ldr	r3, [r5, #0]
 8020d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020d04:	602b      	str	r3, [r5, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8020d06:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020d0a:	2301      	movs	r3, #1
 8020d0c:	1e42      	subs	r2, r0, #1
 8020d0e:	4093      	lsls	r3, r2
 8020d10:	f8d8 2000 	ldr.w	r2, [r8]
 8020d14:	4213      	tst	r3, r2
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8020d16:	bf02      	ittt	eq
 8020d18:	682b      	ldreq	r3, [r5, #0]
 8020d1a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8020d1e:	602b      	streq	r3, [r5, #0]
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020d20:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8020d24:	1e5a      	subs	r2, r3, #1
 8020d26:	2301      	movs	r3, #1
 8020d28:	4093      	lsls	r3, r2
 8020d2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020d2e:	4213      	tst	r3, r2

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020d30:	bf02      	ittt	eq
 8020d32:	682b      	ldreq	r3, [r5, #0]
 8020d34:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8020d38:	602b      	streq	r3, [r5, #0]

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020d3a:	682b      	ldr	r3, [r5, #0]
 8020d3c:	f043 0308 	orr.w	r3, r3, #8
 8020d40:	602b      	str	r3, [r5, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8020d42:	f7f3 fdfb 	bl	801493c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8020d46:	4682      	mov	sl, r0
 8020d48:	b160      	cbz	r0, 8020d64 <x509_crt_verify_top+0x9e>
         * Cannot check 'unknown', no need to try any CA
         */
        trust_ca = NULL;
    }
    else
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 8020d4a:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8020d4e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020d52:	465b      	mov	r3, fp
 8020d54:	f7f3 fe74 	bl	8014a40 <mbedtls_md>
 8020d58:	2700      	movs	r7, #0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020d5a:	f8cd b014 	str.w	fp, [sp, #20]
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8020d5e:	b936      	cbnz	r6, 8020d6e <x509_crt_verify_top+0xa8>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 8020d60:	2f00      	cmp	r7, #0
 8020d62:	d153      	bne.n	8020e0c <x509_crt_verify_top+0x146>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 8020d64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	f040 809c 	bne.w	8020ea4 <x509_crt_verify_top+0x1de>
 8020d6c:	e087      	b.n	8020e7e <x509_crt_verify_top+0x1b8>
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 8020d6e:	fab9 f389 	clz	r3, r9
 8020d72:	095b      	lsrs	r3, r3, #5
 8020d74:	2201      	movs	r2, #1
 8020d76:	4631      	mov	r1, r6
 8020d78:	4620      	mov	r0, r4
 8020d7a:	f7ff fea7 	bl	8020acc <x509_crt_check_parent>
 8020d7e:	2800      	cmp	r0, #0
 8020d80:	d13a      	bne.n	8020df8 <x509_crt_verify_top+0x132>
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8020d82:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020d84:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8020d86:	429a      	cmp	r2, r3
        check_path_cnt = path_cnt + 1;
 8020d88:	f109 0b01 	add.w	fp, r9, #1
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8020d8c:	d107      	bne.n	8020d9e <x509_crt_verify_top+0xd8>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8020d8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8020d90:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8020d92:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8020d94:	f001 fb66 	bl	8022464 <memcmp>
            check_path_cnt--;
 8020d98:	2800      	cmp	r0, #0
 8020d9a:	bf08      	it	eq
 8020d9c:	46cb      	moveq	fp, r9
        if( trust_ca->max_pathlen > 0 &&
 8020d9e:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	dd04      	ble.n	8020db0 <x509_crt_verify_top+0xea>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
 8020da6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020da8:	ebab 0b02 	sub.w	fp, fp, r2
        if( trust_ca->max_pathlen > 0 &&
 8020dac:	455b      	cmp	r3, fp
 8020dae:	db23      	blt.n	8020df8 <x509_crt_verify_top+0x132>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020db0:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8020db4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8020db8:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 8020dbc:	9107      	str	r1, [sp, #28]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020dbe:	4650      	mov	r0, sl
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020dc0:	9306      	str	r3, [sp, #24]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020dc2:	f7f3 ff0b 	bl	8014bdc <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020dc6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8020dca:	9203      	str	r2, [sp, #12]
 8020dcc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8020dd0:	9b05      	ldr	r3, [sp, #20]
 8020dd2:	9300      	str	r3, [sp, #0]
 8020dd4:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8020dd8:	9b06      	ldr	r3, [sp, #24]
 8020dda:	9907      	ldr	r1, [sp, #28]
 8020ddc:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020de0:	4658      	mov	r0, fp
 8020de2:	f7f4 ff47 	bl	8015c74 <mbedtls_pk_verify_ext>
 8020de6:	b938      	cbnz	r0, 8020df8 <x509_crt_verify_top+0x132>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8020de8:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 8020dec:	f7fe ff94 	bl	801fd18 <mbedtls_x509_time_is_past>
 8020df0:	b128      	cbz	r0, 8020dfe <x509_crt_verify_top+0x138>
            if ( future_past_ca == NULL )
 8020df2:	2f00      	cmp	r7, #0
 8020df4:	bf08      	it	eq
 8020df6:	4637      	moveq	r7, r6
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8020df8:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8020dfc:	e7af      	b.n	8020d5e <x509_crt_verify_top+0x98>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8020dfe:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 8020e02:	f7fe ff99 	bl	801fd38 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8020e06:	2800      	cmp	r0, #0
 8020e08:	d1f3      	bne.n	8020df2 <x509_crt_verify_top+0x12c>
 8020e0a:	4637      	mov	r7, r6
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020e0c:	682b      	ldr	r3, [r5, #0]
 8020e0e:	f023 0308 	bic.w	r3, r3, #8
 8020e12:	602b      	str	r3, [r5, #0]
        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8020e14:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8020e18:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8020e1c:	4640      	mov	r0, r8
 8020e1e:	f7ff faa4 	bl	802036a <x509_profile_check_key>
 8020e22:	b118      	cbz	r0, 8020e2c <x509_crt_verify_top+0x166>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020e24:	682b      	ldr	r3, [r5, #0]
 8020e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020e2a:	602b      	str	r3, [r5, #0]
    if( trust_ca != NULL &&
 8020e2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020e30:	429a      	cmp	r2, r3
 8020e32:	d106      	bne.n	8020e42 <x509_crt_verify_top+0x17c>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8020e34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8020e36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8020e38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8020e3a:	f001 fb13 	bl	8022464 <memcmp>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8020e3e:	2800      	cmp	r0, #0
 8020e40:	d090      	beq.n	8020d64 <x509_crt_verify_top+0x9e>
    if( ca == NULL )
 8020e42:	4643      	mov	r3, r8
 8020e44:	ee18 2a10 	vmov	r2, s16
 8020e48:	4639      	mov	r1, r7
 8020e4a:	4620      	mov	r0, r4
 8020e4c:	f7ff feae 	bl	8020bac <x509_crt_verifycrl.part.0>
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 8020e50:	682b      	ldr	r3, [r5, #0]
 8020e52:	4318      	orrs	r0, r3
 8020e54:	6028      	str	r0, [r5, #0]
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 8020e56:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8020e5a:	f7fe ff5d 	bl	801fd18 <mbedtls_x509_time_is_past>
 8020e5e:	b118      	cbz	r0, 8020e68 <x509_crt_verify_top+0x1a2>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e62:	f043 0301 	orr.w	r3, r3, #1
 8020e66:	9309      	str	r3, [sp, #36]	; 0x24
        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8020e68:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8020e6c:	f7fe ff64 	bl	801fd38 <mbedtls_x509_time_is_future>
 8020e70:	b118      	cbz	r0, 8020e7a <x509_crt_verify_top+0x1b4>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020e78:	9309      	str	r3, [sp, #36]	; 0x24
        if( NULL != f_vrfy )
 8020e7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020e7c:	b94b      	cbnz	r3, 8020e92 <x509_crt_verify_top+0x1cc>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8020e7e:	682b      	ldr	r3, [r5, #0]
 8020e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e82:	4313      	orrs	r3, r2
 8020e84:	602b      	str	r3, [r5, #0]

    return( 0 );
 8020e86:	2000      	movs	r0, #0
}
 8020e88:	b01b      	add	sp, #108	; 0x6c
 8020e8a:	ecbd 8b02 	vpop	{d8}
 8020e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 8020e92:	e9dd 6029 	ldrd	r6, r0, [sp, #164]	; 0xa4
 8020e96:	ab09      	add	r3, sp, #36	; 0x24
 8020e98:	f109 0201 	add.w	r2, r9, #1
 8020e9c:	4639      	mov	r1, r7
 8020e9e:	47b0      	blx	r6
 8020ea0:	2800      	cmp	r0, #0
 8020ea2:	d1f1      	bne.n	8020e88 <x509_crt_verify_top+0x1c2>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8020ea4:	4621      	mov	r1, r4
 8020ea6:	462b      	mov	r3, r5
 8020ea8:	e9dd 4029 	ldrd	r4, r0, [sp, #164]	; 0xa4
 8020eac:	464a      	mov	r2, r9
 8020eae:	47a0      	blx	r4
 8020eb0:	2800      	cmp	r0, #0
 8020eb2:	d0e4      	beq.n	8020e7e <x509_crt_verify_top+0x1b8>
 8020eb4:	e7e8      	b.n	8020e88 <x509_crt_verify_top+0x1c2>
	...

08020eb8 <x509_crt_verify_child>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8020eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ebc:	ed2d 8b02 	vpush	{d8}
 8020ec0:	b09d      	sub	sp, #116	; 0x74
 8020ec2:	e9dd 8728 	ldrd	r8, r7, [sp, #160]	; 0xa0
 8020ec6:	4699      	mov	r9, r3
    int ret;
    uint32_t parent_flags = 0;
 8020ec8:	2300      	movs	r3, #0
{
 8020eca:	ee08 2a10 	vmov	s16, r2
 8020ece:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    uint32_t parent_flags = 0;
 8020ed0:	930b      	str	r3, [sp, #44]	; 0x2c
{
 8020ed2:	4605      	mov	r5, r0
 8020ed4:	460e      	mov	r6, r1
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 8020ed6:	b15f      	cbz	r7, 8020ef0 <x509_crt_verify_child+0x38>
 8020ed8:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 8020edc:	304c      	adds	r0, #76	; 0x4c
 8020ede:	f7ff f9d9 	bl	8020294 <x509_name_cmp>
 8020ee2:	b910      	cbnz	r0, 8020eea <x509_crt_verify_child+0x32>
        self_cnt++;
 8020ee4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ee6:	3301      	adds	r3, #1
 8020ee8:	932a      	str	r3, [sp, #168]	; 0xa8

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 8020eea:	2f08      	cmp	r7, #8
 8020eec:	f000 80b9 	beq.w	8021062 <x509_crt_verify_child+0x1aa>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020ef0:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8020ef4:	f7fe ff10 	bl	801fd18 <mbedtls_x509_time_is_past>
 8020ef8:	b118      	cbz	r0, 8020f02 <x509_crt_verify_child+0x4a>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020efa:	6823      	ldr	r3, [r4, #0]
 8020efc:	f043 0301 	orr.w	r3, r3, #1
 8020f00:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8020f02:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8020f06:	f7fe ff17 	bl	801fd38 <mbedtls_x509_time_is_future>
 8020f0a:	b118      	cbz	r0, 8020f14 <x509_crt_verify_child+0x5c>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020f0c:	6823      	ldr	r3, [r4, #0]
 8020f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020f12:	6023      	str	r3, [r4, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8020f14:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020f18:	2301      	movs	r3, #1
 8020f1a:	1e42      	subs	r2, r0, #1
 8020f1c:	4093      	lsls	r3, r2
 8020f1e:	f8d8 2000 	ldr.w	r2, [r8]
 8020f22:	4213      	tst	r3, r2
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8020f24:	bf02      	ittt	eq
 8020f26:	6823      	ldreq	r3, [r4, #0]
 8020f28:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8020f2c:	6023      	streq	r3, [r4, #0]
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020f2e:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8020f32:	1e5a      	subs	r2, r3, #1
 8020f34:	2301      	movs	r3, #1
 8020f36:	4093      	lsls	r3, r2
 8020f38:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020f3c:	4213      	tst	r3, r2

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020f3e:	bf02      	ittt	eq
 8020f40:	6823      	ldreq	r3, [r4, #0]
 8020f42:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8020f46:	6023      	streq	r3, [r4, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8020f48:	f7f3 fcf8 	bl	801493c <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8020f4c:	4682      	mov	sl, r0
 8020f4e:	b920      	cbnz	r0, 8020f5a <x509_crt_verify_child+0xa2>

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020f50:	6823      	ldr	r3, [r4, #0]
 8020f52:	f043 0308 	orr.w	r3, r3, #8
 8020f56:	6023      	str	r3, [r4, #0]
 8020f58:	e02f      	b.n	8020fba <x509_crt_verify_child+0x102>
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 8020f5a:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8020f5e:	ab0c      	add	r3, sp, #48	; 0x30
 8020f60:	f7f3 fd6e 	bl	8014a40 <mbedtls_md>
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 8020f64:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020f68:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 8020f6c:	9207      	str	r2, [sp, #28]
 8020f6e:	4640      	mov	r0, r8
 8020f70:	f7ff f9fb 	bl	802036a <x509_profile_check_key>
 8020f74:	9a07      	ldr	r2, [sp, #28]
 8020f76:	b118      	cbz	r0, 8020f80 <x509_crt_verify_child+0xc8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020f78:	6823      	ldr	r3, [r4, #0]
 8020f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020f7e:	6023      	str	r3, [r4, #0]
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020f80:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 8020f84:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 8020f88:	f895 b129 	ldrb.w	fp, [r5, #297]	; 0x129
 8020f8c:	9209      	str	r2, [sp, #36]	; 0x24
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020f8e:	4650      	mov	r0, sl
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020f90:	9108      	str	r1, [sp, #32]
 8020f92:	9307      	str	r3, [sp, #28]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020f94:	f7f3 fe22 	bl	8014bdc <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020f98:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8020f9c:	9303      	str	r3, [sp, #12]
 8020f9e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8020fa2:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8020fa6:	a80c      	add	r0, sp, #48	; 0x30
 8020fa8:	9000      	str	r0, [sp, #0]
 8020faa:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8020fae:	9b07      	ldr	r3, [sp, #28]
 8020fb0:	4658      	mov	r0, fp
 8020fb2:	f7f4 fe5f 	bl	8015c74 <mbedtls_pk_verify_ext>
 8020fb6:	2800      	cmp	r0, #0
 8020fb8:	d1ca      	bne.n	8020f50 <x509_crt_verify_child+0x98>
    if( ca == NULL )
 8020fba:	b1ae      	cbz	r6, 8020fe8 <x509_crt_verify_child+0x130>
 8020fbc:	4643      	mov	r3, r8
 8020fbe:	464a      	mov	r2, r9
 8020fc0:	4631      	mov	r1, r6
 8020fc2:	4628      	mov	r0, r5
 8020fc4:	f7ff fdf2 	bl	8020bac <x509_crt_verifycrl.part.0>
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8020fc8:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 8020fca:	ee18 aa10 	vmov	sl, s16
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8020fce:	4318      	orrs	r0, r3
 8020fd0:	6020      	str	r0, [r4, #0]
    for( grandparent = trust_ca;
 8020fd2:	f1ba 0f00 	cmp.w	sl, #0
 8020fd6:	d109      	bne.n	8020fec <x509_crt_verify_child+0x134>
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 8020fd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        for( grandparent = parent->next;
 8020fda:	f8d6 b130 	ldr.w	fp, [r6, #304]	; 0x130
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 8020fde:	f107 0a02 	add.w	sl, r7, #2
 8020fe2:	ebaa 0a03 	sub.w	sl, sl, r3
        for( grandparent = parent->next;
 8020fe6:	e01f      	b.n	8021028 <x509_crt_verify_child+0x170>
        return( flags );
 8020fe8:	4630      	mov	r0, r6
 8020fea:	e7ed      	b.n	8020fc8 <x509_crt_verify_child+0x110>
        if( x509_crt_check_parent( parent, grandparent,
 8020fec:	fab7 f387 	clz	r3, r7
 8020ff0:	095b      	lsrs	r3, r3, #5
 8020ff2:	2200      	movs	r2, #0
 8020ff4:	4651      	mov	r1, sl
 8020ff6:	4630      	mov	r0, r6
 8020ff8:	f7ff fd68 	bl	8020acc <x509_crt_check_parent>
 8020ffc:	2800      	cmp	r0, #0
 8020ffe:	d052      	beq.n	80210a6 <x509_crt_verify_child+0x1ee>
         grandparent = grandparent->next )
 8021000:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
 8021004:	e7e5      	b.n	8020fd2 <x509_crt_verify_child+0x11a>
            if( grandparent->max_pathlen > 0 &&
 8021006:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
 802100a:	2b00      	cmp	r3, #0
 802100c:	dd01      	ble.n	8021012 <x509_crt_verify_child+0x15a>
 802100e:	4553      	cmp	r3, sl
 8021010:	db08      	blt.n	8021024 <x509_crt_verify_child+0x16c>
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 8021012:	fab7 f387 	clz	r3, r7
 8021016:	095b      	lsrs	r3, r3, #5
 8021018:	2200      	movs	r2, #0
 802101a:	4659      	mov	r1, fp
 802101c:	4630      	mov	r0, r6
 802101e:	f7ff fd55 	bl	8020acc <x509_crt_check_parent>
 8021022:	b300      	cbz	r0, 8021066 <x509_crt_verify_child+0x1ae>
             grandparent = grandparent->next )
 8021024:	f8db b130 	ldr.w	fp, [fp, #304]	; 0x130
        for( grandparent = parent->next;
 8021028:	f1bb 0f00 	cmp.w	fp, #0
 802102c:	d1eb      	bne.n	8021006 <x509_crt_verify_child+0x14e>
            if( ret != 0 )
                return( ret );
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 802102e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021030:	9304      	str	r3, [sp, #16]
 8021032:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021034:	9303      	str	r3, [sp, #12]
 8021036:	ab0b      	add	r3, sp, #44	; 0x2c
 8021038:	9302      	str	r3, [sp, #8]
 802103a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802103c:	9301      	str	r3, [sp, #4]
 802103e:	ee18 1a10 	vmov	r1, s16
 8021042:	1c7b      	adds	r3, r7, #1
 8021044:	9300      	str	r3, [sp, #0]
 8021046:	464a      	mov	r2, r9
 8021048:	4643      	mov	r3, r8
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 802104a:	4630      	mov	r0, r6
 802104c:	f7ff fe3b 	bl	8020cc6 <x509_crt_verify_top>
 8021050:	e01b      	b.n	802108a <x509_crt_verify_child+0x1d2>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8021052:	4629      	mov	r1, r5
 8021054:	4623      	mov	r3, r4
 8021056:	e9dd 502c 	ldrd	r5, r0, [sp, #176]	; 0xb0
 802105a:	463a      	mov	r2, r7
 802105c:	47a8      	blx	r5
 802105e:	b1c0      	cbz	r0, 8021092 <x509_crt_verify_child+0x1da>
 8021060:	e01c      	b.n	802109c <x509_crt_verify_child+0x1e4>
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8021062:	4818      	ldr	r0, [pc, #96]	; (80210c4 <x509_crt_verify_child+0x20c>)
 8021064:	e01a      	b.n	802109c <x509_crt_verify_child+0x1e4>
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
 8021066:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021068:	9305      	str	r3, [sp, #20]
 802106a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802106c:	9304      	str	r3, [sp, #16]
 802106e:	ab0b      	add	r3, sp, #44	; 0x2c
 8021070:	9303      	str	r3, [sp, #12]
 8021072:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021074:	9302      	str	r3, [sp, #8]
 8021076:	1c7b      	adds	r3, r7, #1
 8021078:	e9cd 8300 	strd	r8, r3, [sp]
 802107c:	ee18 2a10 	vmov	r2, s16
 8021080:	464b      	mov	r3, r9
 8021082:	4659      	mov	r1, fp
 8021084:	4630      	mov	r0, r6
 8021086:	f7ff ff17 	bl	8020eb8 <x509_crt_verify_child>
        if( ret != 0 )
 802108a:	b938      	cbnz	r0, 802109c <x509_crt_verify_child+0x1e4>
    if( NULL != f_vrfy )
 802108c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802108e:	2b00      	cmp	r3, #0
 8021090:	d1df      	bne.n	8021052 <x509_crt_verify_child+0x19a>
            return( ret );

    *flags |= parent_flags;
 8021092:	6823      	ldr	r3, [r4, #0]
 8021094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021096:	4313      	orrs	r3, r2
 8021098:	6023      	str	r3, [r4, #0]

    return( 0 );
 802109a:	2000      	movs	r0, #0
}
 802109c:	b01d      	add	sp, #116	; 0x74
 802109e:	ecbd 8b02 	vpop	{d8}
 80210a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 80210a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80210a8:	9304      	str	r3, [sp, #16]
 80210aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80210ac:	9303      	str	r3, [sp, #12]
 80210ae:	ab0b      	add	r3, sp, #44	; 0x2c
 80210b0:	9302      	str	r3, [sp, #8]
 80210b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80210b4:	9301      	str	r3, [sp, #4]
 80210b6:	1c7b      	adds	r3, r7, #1
 80210b8:	9300      	str	r3, [sp, #0]
 80210ba:	464a      	mov	r2, r9
 80210bc:	4643      	mov	r3, r8
 80210be:	4651      	mov	r1, sl
 80210c0:	e7c3      	b.n	802104a <x509_crt_verify_child+0x192>
 80210c2:	bf00      	nop
 80210c4:	ffffd000 	.word	0xffffd000

080210c8 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80210c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210cc:	b089      	sub	sp, #36	; 0x24
 80210ce:	e9dd 8512 	ldrd	r8, r5, [sp, #72]	; 0x48
 80210d2:	4692      	mov	sl, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 80210d4:	2200      	movs	r2, #0
{
 80210d6:	4604      	mov	r4, r0
 80210d8:	4689      	mov	r9, r1
    *flags = 0;
 80210da:	602a      	str	r2, [r5, #0]

    if( profile == NULL )
 80210dc:	461e      	mov	r6, r3
 80210de:	2b00      	cmp	r3, #0
 80210e0:	f000 8096 	beq.w	8021210 <mbedtls_x509_crt_verify_with_profile+0x148>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 80210e4:	f1b8 0f00 	cmp.w	r8, #0
 80210e8:	d026      	beq.n	8021138 <mbedtls_x509_crt_verify_with_profile+0x70>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 80210ea:	4640      	mov	r0, r8
 80210ec:	f7df f87a 	bl	80001e4 <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80210f0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80210f4:	069b      	lsls	r3, r3, #26
        cn_len = strlen( cn );
 80210f6:	4683      	mov	fp, r0
        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80210f8:	d53d      	bpl.n	8021176 <mbedtls_x509_crt_verify_with_profile+0xae>
        {
            cur = &crt->subject_alt_names;
 80210fa:	f104 07e8 	add.w	r7, r4, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 80210fe:	687b      	ldr	r3, [r7, #4]
 8021100:	455b      	cmp	r3, fp
 8021102:	d107      	bne.n	8021114 <mbedtls_x509_crt_verify_with_profile+0x4c>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 8021104:	68b9      	ldr	r1, [r7, #8]
 8021106:	9307      	str	r3, [sp, #28]
 8021108:	465a      	mov	r2, fp
 802110a:	4640      	mov	r0, r8
 802110c:	f7ff f8aa 	bl	8020264 <x509_memcasecmp>
                if( cur->buf.len == cn_len &&
 8021110:	9b07      	ldr	r3, [sp, #28]
 8021112:	b188      	cbz	r0, 8021138 <mbedtls_x509_crt_verify_with_profile+0x70>
                    break;

                if( cur->buf.len > 2 &&
 8021114:	2b02      	cmp	r3, #2
 8021116:	d90a      	bls.n	802112e <mbedtls_x509_crt_verify_with_profile+0x66>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8021118:	4954      	ldr	r1, [pc, #336]	; (802126c <mbedtls_x509_crt_verify_with_profile+0x1a4>)
 802111a:	68b8      	ldr	r0, [r7, #8]
 802111c:	2202      	movs	r2, #2
 802111e:	f001 f9a1 	bl	8022464 <memcmp>
                if( cur->buf.len > 2 &&
 8021122:	b920      	cbnz	r0, 802112e <mbedtls_x509_crt_verify_with_profile+0x66>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 8021124:	4639      	mov	r1, r7
 8021126:	4640      	mov	r0, r8
 8021128:	f7ff f8f3 	bl	8020312 <x509_check_wildcard>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 802112c:	b120      	cbz	r0, 8021138 <mbedtls_x509_crt_verify_with_profile+0x70>
                {
                    break;
                }

                cur = cur->next;
 802112e:	68ff      	ldr	r7, [r7, #12]
            while( cur != NULL )
 8021130:	2f00      	cmp	r7, #0
 8021132:	d1e4      	bne.n	80210fe <mbedtls_x509_crt_verify_with_profile+0x36>
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8021134:	2304      	movs	r3, #4
 8021136:	602b      	str	r3, [r5, #0]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8021138:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 802113c:	4610      	mov	r0, r2
 802113e:	9207      	str	r2, [sp, #28]
 8021140:	f7f4 fe0e 	bl	8015d60 <mbedtls_pk_get_type>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8021144:	2301      	movs	r3, #1
 8021146:	1e41      	subs	r1, r0, #1
 8021148:	408b      	lsls	r3, r1
 802114a:	6871      	ldr	r1, [r6, #4]
 802114c:	9a07      	ldr	r2, [sp, #28]
 802114e:	420b      	tst	r3, r1

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8021150:	bf02      	ittt	eq
 8021152:	682b      	ldreq	r3, [r5, #0]
 8021154:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8021158:	602b      	streq	r3, [r5, #0]

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 802115a:	4601      	mov	r1, r0
 802115c:	4630      	mov	r0, r6
 802115e:	f7ff f904 	bl	802036a <x509_profile_check_key>
 8021162:	b118      	cbz	r0, 802116c <mbedtls_x509_crt_verify_with_profile+0xa4>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8021164:	682b      	ldr	r3, [r5, #0]
 8021166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802116a:	602b      	str	r3, [r5, #0]
{
 802116c:	464f      	mov	r7, r9

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 802116e:	bb5f      	cbnz	r7, 80211c8 <mbedtls_x509_crt_verify_with_profile+0x100>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8021170:	f8d4 7130 	ldr.w	r7, [r4, #304]	; 0x130
 8021174:	e03c      	b.n	80211f0 <mbedtls_x509_crt_verify_with_profile+0x128>
        name = &crt->subject;
 8021176:	f104 076c 	add.w	r7, r4, #108	; 0x6c
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 802117a:	687a      	ldr	r2, [r7, #4]
 802117c:	2a03      	cmp	r2, #3
 802117e:	d11f      	bne.n	80211c0 <mbedtls_x509_crt_verify_with_profile+0xf8>
 8021180:	68b9      	ldr	r1, [r7, #8]
 8021182:	483b      	ldr	r0, [pc, #236]	; (8021270 <mbedtls_x509_crt_verify_with_profile+0x1a8>)
 8021184:	f001 f96e 	bl	8022464 <memcmp>
 8021188:	b9d0      	cbnz	r0, 80211c0 <mbedtls_x509_crt_verify_with_profile+0xf8>
                    if( name->val.len == cn_len &&
 802118a:	693b      	ldr	r3, [r7, #16]
 802118c:	455b      	cmp	r3, fp
 802118e:	d108      	bne.n	80211a2 <mbedtls_x509_crt_verify_with_profile+0xda>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 8021190:	6978      	ldr	r0, [r7, #20]
 8021192:	9307      	str	r3, [sp, #28]
 8021194:	465a      	mov	r2, fp
 8021196:	4641      	mov	r1, r8
 8021198:	f7ff f864 	bl	8020264 <x509_memcasecmp>
                    if( name->val.len == cn_len &&
 802119c:	9b07      	ldr	r3, [sp, #28]
 802119e:	2800      	cmp	r0, #0
 80211a0:	d0ca      	beq.n	8021138 <mbedtls_x509_crt_verify_with_profile+0x70>
                    if( name->val.len > 2 &&
 80211a2:	2b02      	cmp	r3, #2
 80211a4:	d90c      	bls.n	80211c0 <mbedtls_x509_crt_verify_with_profile+0xf8>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 80211a6:	4931      	ldr	r1, [pc, #196]	; (802126c <mbedtls_x509_crt_verify_with_profile+0x1a4>)
 80211a8:	6978      	ldr	r0, [r7, #20]
 80211aa:	2202      	movs	r2, #2
 80211ac:	f001 f95a 	bl	8022464 <memcmp>
                    if( name->val.len > 2 &&
 80211b0:	b930      	cbnz	r0, 80211c0 <mbedtls_x509_crt_verify_with_profile+0xf8>
                        x509_check_wildcard( cn, &name->val ) == 0 )
 80211b2:	f107 010c 	add.w	r1, r7, #12
 80211b6:	4640      	mov	r0, r8
 80211b8:	f7ff f8ab 	bl	8020312 <x509_check_wildcard>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 80211bc:	2800      	cmp	r0, #0
 80211be:	d0bb      	beq.n	8021138 <mbedtls_x509_crt_verify_with_profile+0x70>
                name = name->next;
 80211c0:	69bf      	ldr	r7, [r7, #24]
            while( name != NULL )
 80211c2:	2f00      	cmp	r7, #0
 80211c4:	d1d9      	bne.n	802117a <mbedtls_x509_crt_verify_with_profile+0xb2>
 80211c6:	e7b5      	b.n	8021134 <mbedtls_x509_crt_verify_with_profile+0x6c>
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80211c8:	2301      	movs	r3, #1
 80211ca:	2200      	movs	r2, #0
 80211cc:	4639      	mov	r1, r7
 80211ce:	4620      	mov	r0, r4
 80211d0:	f7ff fc7c 	bl	8020acc <x509_crt_check_parent>
 80211d4:	2800      	cmp	r0, #0
 80211d6:	d03e      	beq.n	8021256 <mbedtls_x509_crt_verify_with_profile+0x18e>
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80211d8:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
 80211dc:	e7c7      	b.n	802116e <mbedtls_x509_crt_verify_with_profile+0xa6>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80211de:	2301      	movs	r3, #1
 80211e0:	2200      	movs	r2, #0
 80211e2:	4639      	mov	r1, r7
 80211e4:	4620      	mov	r0, r4
 80211e6:	f7ff fc71 	bl	8020acc <x509_crt_check_parent>
 80211ea:	b1d8      	cbz	r0, 8021224 <mbedtls_x509_crt_verify_with_profile+0x15c>
        for( parent = crt->next; parent != NULL; parent = parent->next )
 80211ec:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
 80211f0:	2f00      	cmp	r7, #0
 80211f2:	d1f4      	bne.n	80211de <mbedtls_x509_crt_verify_with_profile+0x116>
            if( ret != 0 )
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 80211f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80211f6:	9304      	str	r3, [sp, #16]
 80211f8:	e9cd 7700 	strd	r7, r7, [sp]
 80211fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80211fe:	4652      	mov	r2, sl
 8021200:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8021204:	4649      	mov	r1, r9
 8021206:	4633      	mov	r3, r6
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 8021208:	4620      	mov	r0, r4
 802120a:	f7ff fd5c 	bl	8020cc6 <x509_crt_verify_top>
        if( ret != 0 )
 802120e:	e017      	b.n	8021240 <mbedtls_x509_crt_verify_with_profile+0x178>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 8021210:	4818      	ldr	r0, [pc, #96]	; (8021274 <mbedtls_x509_crt_verify_with_profile+0x1ac>)
 8021212:	e01a      	b.n	802124a <mbedtls_x509_crt_verify_with_profile+0x182>
exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 8021214:	4818      	ldr	r0, [pc, #96]	; (8021278 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 8021216:	e018      	b.n	802124a <mbedtls_x509_crt_verify_with_profile+0x182>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 8021218:	682a      	ldr	r2, [r5, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 802121a:	4b18      	ldr	r3, [pc, #96]	; (802127c <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 802121c:	2a00      	cmp	r2, #0
 802121e:	bf18      	it	ne
 8021220:	4618      	movne	r0, r3
 8021222:	e015      	b.n	8021250 <mbedtls_x509_crt_verify_with_profile+0x188>
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
 8021224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021226:	9305      	str	r3, [sp, #20]
 8021228:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802122a:	9600      	str	r6, [sp, #0]
 802122c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8021230:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8021234:	4653      	mov	r3, sl
 8021236:	464a      	mov	r2, r9
 8021238:	4639      	mov	r1, r7
 802123a:	4620      	mov	r0, r4
 802123c:	f7ff fe3c 	bl	8020eb8 <x509_crt_verify_child>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 8021240:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 8021244:	d0e6      	beq.n	8021214 <mbedtls_x509_crt_verify_with_profile+0x14c>
    if( ret != 0 )
 8021246:	2800      	cmp	r0, #0
 8021248:	d0e6      	beq.n	8021218 <mbedtls_x509_crt_verify_with_profile+0x150>
        *flags = (uint32_t) -1;
 802124a:	f04f 33ff 	mov.w	r3, #4294967295
 802124e:	602b      	str	r3, [r5, #0]

    return( 0 );
}
 8021250:	b009      	add	sp, #36	; 0x24
 8021252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 8021256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021258:	9304      	str	r3, [sp, #16]
 802125a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802125c:	e9cd 0000 	strd	r0, r0, [sp]
 8021260:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8021264:	4652      	mov	r2, sl
 8021266:	4633      	mov	r3, r6
 8021268:	4639      	mov	r1, r7
 802126a:	e7cd      	b.n	8021208 <mbedtls_x509_crt_verify_with_profile+0x140>
 802126c:	080333f0 	.word	0x080333f0
 8021270:	080308c2 	.word	0x080308c2
 8021274:	ffffd800 	.word	0xffffd800
 8021278:	ffffd000 	.word	0xffffd000
 802127c:	ffffd900 	.word	0xffffd900

08021280 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 8021280:	f44f 729a 	mov.w	r2, #308	; 0x134
 8021284:	2100      	movs	r1, #0
 8021286:	f001 b923 	b.w	80224d0 <memset>
	...

0802128c <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 802128c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 8021290:	4605      	mov	r5, r0
 8021292:	2800      	cmp	r0, #0
 8021294:	d034      	beq.n	8021300 <mbedtls_x509_crt_free+0x74>
    do
    {
        mbedtls_pk_free( &cert_cur->pk );

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
 8021296:	4f32      	ldr	r7, [pc, #200]	; (8021360 <mbedtls_x509_crt_free+0xd4>)
 8021298:	4604      	mov	r4, r0
 802129a:	463e      	mov	r6, r7
        mbedtls_pk_free( &cert_cur->pk );
 802129c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80212a0:	f7f4 fc33 	bl	8015b0a <mbedtls_pk_free>
        mbedtls_free( cert_cur->sig_opts );
 80212a4:	683b      	ldr	r3, [r7, #0]
 80212a6:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80212aa:	4798      	blx	r3
#endif

        name_cur = cert_cur->issuer.next;
 80212ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 80212ae:	bb52      	cbnz	r2, 8021306 <mbedtls_x509_crt_free+0x7a>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 80212b0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 80212b4:	2a00      	cmp	r2, #0
 80212b6:	d131      	bne.n	802131c <mbedtls_x509_crt_free+0x90>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 80212b8:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 80212bc:	2a00      	cmp	r2, #0
 80212be:	d138      	bne.n	8021332 <mbedtls_x509_crt_free+0xa6>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 80212c0:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 80212c4:	2a00      	cmp	r2, #0
 80212c6:	d13f      	bne.n	8021348 <mbedtls_x509_crt_free+0xbc>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 80212c8:	68a0      	ldr	r0, [r4, #8]
 80212ca:	b128      	cbz	r0, 80212d8 <mbedtls_x509_crt_free+0x4c>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 80212cc:	6861      	ldr	r1, [r4, #4]
 80212ce:	f7fe ffc1 	bl	8020254 <mbedtls_zeroize>
            mbedtls_free( cert_cur->raw.p );
 80212d2:	6833      	ldr	r3, [r6, #0]
 80212d4:	68a0      	ldr	r0, [r4, #8]
 80212d6:	4798      	blx	r3
        }

        cert_cur = cert_cur->next;
 80212d8:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 80212dc:	2c00      	cmp	r4, #0
 80212de:	d1dd      	bne.n	802129c <mbedtls_x509_crt_free+0x10>
 80212e0:	462c      	mov	r4, r5

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 80212e2:	4620      	mov	r0, r4

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80212e4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80212e8:	9001      	str	r0, [sp, #4]
        cert_cur = cert_cur->next;
 80212ea:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80212ee:	f7fe ffb1 	bl	8020254 <mbedtls_zeroize>
        if( cert_prv != crt )
 80212f2:	9801      	ldr	r0, [sp, #4]
 80212f4:	4285      	cmp	r5, r0
 80212f6:	d001      	beq.n	80212fc <mbedtls_x509_crt_free+0x70>
            mbedtls_free( cert_prv );
 80212f8:	6833      	ldr	r3, [r6, #0]
 80212fa:	4798      	blx	r3
    }
    while( cert_cur != NULL );
 80212fc:	2c00      	cmp	r4, #0
 80212fe:	d1f0      	bne.n	80212e2 <mbedtls_x509_crt_free+0x56>
}
 8021300:	b002      	add	sp, #8
 8021302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8021306:	4610      	mov	r0, r2
 8021308:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 802130a:	f8d2 8018 	ldr.w	r8, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802130e:	f7fe ffa1 	bl	8020254 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 8021312:	6833      	ldr	r3, [r6, #0]
 8021314:	4610      	mov	r0, r2
 8021316:	4798      	blx	r3
            name_cur = name_cur->next;
 8021318:	4642      	mov	r2, r8
 802131a:	e7c8      	b.n	80212ae <mbedtls_x509_crt_free+0x22>
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802131c:	4610      	mov	r0, r2
 802131e:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 8021320:	f8d2 8018 	ldr.w	r8, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8021324:	f7fe ff96 	bl	8020254 <mbedtls_zeroize>
            mbedtls_free( name_prv );
 8021328:	6833      	ldr	r3, [r6, #0]
 802132a:	4610      	mov	r0, r2
 802132c:	4798      	blx	r3
            name_cur = name_cur->next;
 802132e:	4642      	mov	r2, r8
 8021330:	e7c0      	b.n	80212b4 <mbedtls_x509_crt_free+0x28>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8021332:	4610      	mov	r0, r2
 8021334:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 8021336:	f8d2 800c 	ldr.w	r8, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 802133a:	f7fe ff8b 	bl	8020254 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 802133e:	6833      	ldr	r3, [r6, #0]
 8021340:	4610      	mov	r0, r2
 8021342:	4798      	blx	r3
            seq_cur = seq_cur->next;
 8021344:	4642      	mov	r2, r8
 8021346:	e7b9      	b.n	80212bc <mbedtls_x509_crt_free+0x30>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8021348:	4610      	mov	r0, r2
 802134a:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 802134c:	f8d2 800c 	ldr.w	r8, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8021350:	f7fe ff80 	bl	8020254 <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 8021354:	6833      	ldr	r3, [r6, #0]
 8021356:	4610      	mov	r0, r2
 8021358:	4798      	blx	r3
            seq_cur = seq_cur->next;
 802135a:	4642      	mov	r2, r8
 802135c:	e7b2      	b.n	80212c4 <mbedtls_x509_crt_free+0x38>
 802135e:	bf00      	nop
 8021360:	200005a4 	.word	0x200005a4

08021364 <mbedtls_x509_crt_parse_der>:
{
 8021364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021368:	460d      	mov	r5, r1
 802136a:	b09b      	sub	sp, #108	; 0x6c
 802136c:	4616      	mov	r6, r2
    if( crt == NULL || buf == NULL )
 802136e:	4683      	mov	fp, r0
 8021370:	2800      	cmp	r0, #0
 8021372:	f000 8323 	beq.w	80219bc <mbedtls_x509_crt_parse_der+0x658>
 8021376:	2900      	cmp	r1, #0
 8021378:	f000 8320 	beq.w	80219bc <mbedtls_x509_crt_parse_der+0x658>
 802137c:	4604      	mov	r4, r0
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 802137e:	f04f 0a00 	mov.w	sl, #0
    while( crt->version != 0 && crt->next != NULL )
 8021382:	69a3      	ldr	r3, [r4, #24]
 8021384:	b1ab      	cbz	r3, 80213b2 <mbedtls_x509_crt_parse_der+0x4e>
 8021386:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 802138a:	46a2      	mov	sl, r4
 802138c:	b953      	cbnz	r3, 80213a4 <mbedtls_x509_crt_parse_der+0x40>
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 802138e:	4ba7      	ldr	r3, [pc, #668]	; (802162c <mbedtls_x509_crt_parse_der+0x2c8>)
 8021390:	f44f 719a 	mov.w	r1, #308	; 0x134
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	2001      	movs	r0, #1
 8021398:	4798      	blx	r3
 802139a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
 802139e:	b918      	cbnz	r0, 80213a8 <mbedtls_x509_crt_parse_der+0x44>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80213a0:	4ea3      	ldr	r6, [pc, #652]	; (8021630 <mbedtls_x509_crt_parse_der+0x2cc>)
 80213a2:	e2fa      	b.n	802199a <mbedtls_x509_crt_parse_der+0x636>
 80213a4:	461c      	mov	r4, r3
 80213a6:	e7ec      	b.n	8021382 <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
 80213a8:	f7ff ff6a 	bl	8021280 <mbedtls_x509_crt_init>
        crt = crt->next;
 80213ac:	46a2      	mov	sl, r4
 80213ae:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80213b2:	2300      	movs	r3, #0
 80213b4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80213b8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80213bc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80213c0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80213c4:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
 80213c6:	2c00      	cmp	r4, #0
 80213c8:	f000 82eb 	beq.w	80219a2 <mbedtls_x509_crt_parse_der+0x63e>
    len = buflen;
 80213cc:	e9cd 6505 	strd	r6, r5, [sp, #20]
    end = p + len;
 80213d0:	442e      	add	r6, r5
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80213d2:	2330      	movs	r3, #48	; 0x30
 80213d4:	aa05      	add	r2, sp, #20
 80213d6:	4631      	mov	r1, r6
 80213d8:	a806      	add	r0, sp, #24
 80213da:	f7ec fed9 	bl	800e190 <mbedtls_asn1_get_tag>
 80213de:	b158      	cbz	r0, 80213f8 <mbedtls_x509_crt_parse_der+0x94>
        mbedtls_x509_crt_free( crt );
 80213e0:	4620      	mov	r0, r4
 80213e2:	f7ff ff53 	bl	802128c <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 80213e6:	4e93      	ldr	r6, [pc, #588]	; (8021634 <mbedtls_x509_crt_parse_der+0x2d0>)
        if( prev )
 80213e8:	f1ba 0f00 	cmp.w	sl, #0
 80213ec:	f040 82e2 	bne.w	80219b4 <mbedtls_x509_crt_parse_der+0x650>
        if( crt != chain )
 80213f0:	45a3      	cmp	fp, r4
 80213f2:	f040 82da 	bne.w	80219aa <mbedtls_x509_crt_parse_der+0x646>
 80213f6:	e2d0      	b.n	802199a <mbedtls_x509_crt_parse_der+0x636>
    if( len > (size_t) ( end - p ) )
 80213f8:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80213fc:	1af6      	subs	r6, r6, r3
 80213fe:	428e      	cmp	r6, r1
 8021400:	d204      	bcs.n	802140c <mbedtls_x509_crt_parse_der+0xa8>
        mbedtls_x509_crt_free( crt );
 8021402:	4620      	mov	r0, r4
 8021404:	f7ff ff42 	bl	802128c <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 8021408:	4e8b      	ldr	r6, [pc, #556]	; (8021638 <mbedtls_x509_crt_parse_der+0x2d4>)
 802140a:	e7ed      	b.n	80213e8 <mbedtls_x509_crt_parse_der+0x84>
    crt_end = p + len;
 802140c:	440b      	add	r3, r1
    crt->raw.len = crt_end - buf;
 802140e:	1b59      	subs	r1, r3, r5
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 8021410:	4b86      	ldr	r3, [pc, #536]	; (802162c <mbedtls_x509_crt_parse_der+0x2c8>)
    crt->raw.len = crt_end - buf;
 8021412:	6061      	str	r1, [r4, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 8021414:	681b      	ldr	r3, [r3, #0]
 8021416:	2001      	movs	r0, #1
 8021418:	4798      	blx	r3
 802141a:	9006      	str	r0, [sp, #24]
 802141c:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 802141e:	b908      	cbnz	r0, 8021424 <mbedtls_x509_crt_parse_der+0xc0>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8021420:	4e83      	ldr	r6, [pc, #524]	; (8021630 <mbedtls_x509_crt_parse_der+0x2cc>)
 8021422:	e7e1      	b.n	80213e8 <mbedtls_x509_crt_parse_der+0x84>
    memcpy( p, buf, crt->raw.len );
 8021424:	6862      	ldr	r2, [r4, #4]
 8021426:	4629      	mov	r1, r5
 8021428:	f001 f82a 	bl	8022480 <memcpy>
    p += crt->raw.len - len;
 802142c:	6862      	ldr	r2, [r4, #4]
 802142e:	9b05      	ldr	r3, [sp, #20]
 8021430:	9906      	ldr	r1, [sp, #24]
 8021432:	1ad3      	subs	r3, r2, r3
 8021434:	440b      	add	r3, r1
    end = crt_end = p + len;
 8021436:	eb01 0802 	add.w	r8, r1, r2
    p += crt->raw.len - len;
 802143a:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
 802143c:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802143e:	aa05      	add	r2, sp, #20
 8021440:	2330      	movs	r3, #48	; 0x30
 8021442:	4641      	mov	r1, r8
 8021444:	a806      	add	r0, sp, #24
 8021446:	f7ec fea3 	bl	800e190 <mbedtls_asn1_get_tag>
 802144a:	4607      	mov	r7, r0
 802144c:	b140      	cbz	r0, 8021460 <mbedtls_x509_crt_parse_der+0xfc>
        mbedtls_x509_crt_free( crt );
 802144e:	4620      	mov	r0, r4
 8021450:	f7ff ff1c 	bl	802128c <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8021454:	f5a7 5606 	sub.w	r6, r7, #8576	; 0x2180
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 8021458:	2e00      	cmp	r6, #0
 802145a:	f000 829e 	beq.w	802199a <mbedtls_x509_crt_parse_der+0x636>
 802145e:	e7c3      	b.n	80213e8 <mbedtls_x509_crt_parse_der+0x84>
    end = p + len;
 8021460:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
 8021464:	441d      	add	r5, r3
    crt->tbs.len = end - crt->tbs.p;
 8021466:	6963      	ldr	r3, [r4, #20]
 8021468:	1aeb      	subs	r3, r5, r3
 802146a:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802146c:	aa17      	add	r2, sp, #92	; 0x5c
 802146e:	23a0      	movs	r3, #160	; 0xa0
 8021470:	4629      	mov	r1, r5
 8021472:	a806      	add	r0, sp, #24
 8021474:	f7ec fe8c 	bl	800e190 <mbedtls_asn1_get_tag>
 8021478:	4606      	mov	r6, r0
 802147a:	b1e8      	cbz	r0, 80214b8 <mbedtls_x509_crt_parse_der+0x154>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 802147c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021480:	d127      	bne.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
            *ver = 0;
 8021482:	61a7      	str	r7, [r4, #24]
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8021484:	f104 021c 	add.w	r2, r4, #28
 8021488:	4629      	mov	r1, r5
 802148a:	a806      	add	r0, sp, #24
 802148c:	f7fe f826 	bl	801f4dc <mbedtls_x509_get_serial>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8021490:	4606      	mov	r6, r0
 8021492:	b9f0      	cbnz	r0, 80214d2 <mbedtls_x509_crt_parse_der+0x16e>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 8021494:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8021498:	ab0b      	add	r3, sp, #44	; 0x2c
 802149a:	463a      	mov	r2, r7
 802149c:	4629      	mov	r1, r5
 802149e:	a806      	add	r0, sp, #24
 80214a0:	f7fe f849 	bl	801f536 <mbedtls_x509_get_alg>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80214a4:	4606      	mov	r6, r0
 80214a6:	b9a0      	cbnz	r0, 80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->version < 0 || crt->version > 2 )
 80214a8:	69a3      	ldr	r3, [r4, #24]
 80214aa:	2b02      	cmp	r3, #2
 80214ac:	d91a      	bls.n	80214e4 <mbedtls_x509_crt_parse_der+0x180>
        mbedtls_x509_crt_free( crt );
 80214ae:	4620      	mov	r0, r4
 80214b0:	f7ff feec 	bl	802128c <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 80214b4:	4e61      	ldr	r6, [pc, #388]	; (802163c <mbedtls_x509_crt_parse_der+0x2d8>)
 80214b6:	e797      	b.n	80213e8 <mbedtls_x509_crt_parse_der+0x84>
    end = *p + len;
 80214b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80214ba:	9e06      	ldr	r6, [sp, #24]
 80214bc:	440e      	add	r6, r1
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 80214be:	f104 0218 	add.w	r2, r4, #24
 80214c2:	4631      	mov	r1, r6
 80214c4:	a806      	add	r0, sp, #24
 80214c6:	f7ec fe8f 	bl	800e1e8 <mbedtls_asn1_get_int>
 80214ca:	b130      	cbz	r0, 80214da <mbedtls_x509_crt_parse_der+0x176>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80214cc:	f5b0 5608 	subs.w	r6, r0, #8704	; 0x2200
 80214d0:	d0d8      	beq.n	8021484 <mbedtls_x509_crt_parse_der+0x120>
        mbedtls_x509_crt_free( crt );
 80214d2:	4620      	mov	r0, r4
 80214d4:	f7ff feda 	bl	802128c <mbedtls_x509_crt_free>
        return( ret );
 80214d8:	e786      	b.n	80213e8 <mbedtls_x509_crt_parse_der+0x84>
    if( *p != end )
 80214da:	9b06      	ldr	r3, [sp, #24]
 80214dc:	429e      	cmp	r6, r3
 80214de:	d0d1      	beq.n	8021484 <mbedtls_x509_crt_parse_der+0x120>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 80214e0:	4e57      	ldr	r6, [pc, #348]	; (8021640 <mbedtls_x509_crt_parse_der+0x2dc>)
 80214e2:	e7f6      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    crt->version++;
 80214e4:	3301      	adds	r3, #1
 80214e6:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 80214e8:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 80214ec:	9300      	str	r3, [sp, #0]
 80214ee:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80214f2:	f204 1329 	addw	r3, r4, #297	; 0x129
 80214f6:	a90b      	add	r1, sp, #44	; 0x2c
 80214f8:	4638      	mov	r0, r7
 80214fa:	f7fe fa57 	bl	801f9ac <mbedtls_x509_get_sig_alg>
 80214fe:	4606      	mov	r6, r0
 8021500:	2800      	cmp	r0, #0
 8021502:	d1e6      	bne.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    crt->issuer_raw.p = p;
 8021504:	9b06      	ldr	r3, [sp, #24]
 8021506:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8021508:	aa05      	add	r2, sp, #20
 802150a:	2330      	movs	r3, #48	; 0x30
 802150c:	4629      	mov	r1, r5
 802150e:	a806      	add	r0, sp, #24
 8021510:	f7ec fe3e 	bl	800e190 <mbedtls_asn1_get_tag>
 8021514:	4606      	mov	r6, r0
 8021516:	b128      	cbz	r0, 8021524 <mbedtls_x509_crt_parse_der+0x1c0>
        mbedtls_x509_crt_free( crt );
 8021518:	4620      	mov	r0, r4
 802151a:	f7ff feb7 	bl	802128c <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 802151e:	f5a6 5606 	sub.w	r6, r6, #8576	; 0x2180
 8021522:	e799      	b.n	8021458 <mbedtls_x509_crt_parse_der+0xf4>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 8021524:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8021528:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 802152c:	4419      	add	r1, r3
 802152e:	a806      	add	r0, sp, #24
 8021530:	f7fe f8f0 	bl	801f714 <mbedtls_x509_get_name>
 8021534:	4606      	mov	r6, r0
 8021536:	2800      	cmp	r0, #0
 8021538:	d1cb      	bne.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 802153a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 802153c:	9b06      	ldr	r3, [sp, #24]
 802153e:	1a9b      	subs	r3, r3, r2
 8021540:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8021542:	aa17      	add	r2, sp, #92	; 0x5c
 8021544:	2330      	movs	r3, #48	; 0x30
 8021546:	4629      	mov	r1, r5
 8021548:	a806      	add	r0, sp, #24
 802154a:	f7ec fe21 	bl	800e190 <mbedtls_asn1_get_tag>
 802154e:	2800      	cmp	r0, #0
 8021550:	d07a      	beq.n	8021648 <mbedtls_x509_crt_parse_der+0x2e4>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 8021552:	f5b0 5610 	subs.w	r6, r0, #9216	; 0x2400
 8021556:	d1bc      	bne.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    crt->subject_raw.p = p;
 8021558:	9b06      	ldr	r3, [sp, #24]
 802155a:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802155c:	aa05      	add	r2, sp, #20
 802155e:	2330      	movs	r3, #48	; 0x30
 8021560:	4629      	mov	r1, r5
 8021562:	a806      	add	r0, sp, #24
 8021564:	f7ec fe14 	bl	800e190 <mbedtls_asn1_get_tag>
 8021568:	4606      	mov	r6, r0
 802156a:	2800      	cmp	r0, #0
 802156c:	d1d4      	bne.n	8021518 <mbedtls_x509_crt_parse_der+0x1b4>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 802156e:	9b05      	ldr	r3, [sp, #20]
 8021570:	b14b      	cbz	r3, 8021586 <mbedtls_x509_crt_parse_der+0x222>
 8021572:	9906      	ldr	r1, [sp, #24]
 8021574:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8021578:	4419      	add	r1, r3
 802157a:	a806      	add	r0, sp, #24
 802157c:	f7fe f8ca 	bl	801f714 <mbedtls_x509_get_name>
 8021580:	4606      	mov	r6, r0
 8021582:	2800      	cmp	r0, #0
 8021584:	d1a5      	bne.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    crt->subject_raw.len = p - crt->subject_raw.p;
 8021586:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8021588:	9b06      	ldr	r3, [sp, #24]
 802158a:	1a9b      	subs	r3, r3, r2
 802158c:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 802158e:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8021592:	4629      	mov	r1, r5
 8021594:	a806      	add	r0, sp, #24
 8021596:	f7f4 ff19 	bl	80163cc <mbedtls_pk_parse_subpubkey>
 802159a:	4606      	mov	r6, r0
 802159c:	2800      	cmp	r0, #0
 802159e:	d198      	bne.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->version == 2 || crt->version == 3 )
 80215a0:	69a3      	ldr	r3, [r4, #24]
 80215a2:	3b02      	subs	r3, #2
 80215a4:	2b01      	cmp	r3, #1
 80215a6:	d806      	bhi.n	80215b6 <mbedtls_x509_crt_parse_der+0x252>
    if( *p == end )
 80215a8:	9b06      	ldr	r3, [sp, #24]
 80215aa:	429d      	cmp	r5, r3
 80215ac:	d169      	bne.n	8021682 <mbedtls_x509_crt_parse_der+0x31e>
 80215ae:	9b06      	ldr	r3, [sp, #24]
 80215b0:	429d      	cmp	r5, r3
 80215b2:	f040 8083 	bne.w	80216bc <mbedtls_x509_crt_parse_der+0x358>
    if( crt->version == 3 )
 80215b6:	69a3      	ldr	r3, [r4, #24]
 80215b8:	2b03      	cmp	r3, #3
 80215ba:	f040 809c 	bne.w	80216f6 <mbedtls_x509_crt_parse_der+0x392>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 80215be:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 80215c2:	4629      	mov	r1, r5
 80215c4:	a806      	add	r0, sp, #24
 80215c6:	f7fe fa3b 	bl	801fa40 <mbedtls_x509_get_ext>
 80215ca:	4606      	mov	r6, r0
 80215cc:	2800      	cmp	r0, #0
 80215ce:	f040 808e 	bne.w	80216ee <mbedtls_x509_crt_parse_der+0x38a>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80215d2:	4681      	mov	r9, r0
    while( *p < end )
 80215d4:	9b06      	ldr	r3, [sp, #24]
 80215d6:	429d      	cmp	r5, r3
 80215d8:	f200 8092 	bhi.w	8021700 <mbedtls_x509_crt_parse_der+0x39c>
    if( *p != end )
 80215dc:	f040 8194 	bne.w	8021908 <mbedtls_x509_crt_parse_der+0x5a4>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 80215e0:	ab0e      	add	r3, sp, #56	; 0x38
 80215e2:	aa11      	add	r2, sp, #68	; 0x44
 80215e4:	4641      	mov	r1, r8
 80215e6:	a806      	add	r0, sp, #24
 80215e8:	f7fd ffa5 	bl	801f536 <mbedtls_x509_get_alg>
 80215ec:	4606      	mov	r6, r0
 80215ee:	2800      	cmp	r0, #0
 80215f0:	f47f af6f 	bne.w	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->sig_oid.len != sig_oid2.len ||
 80215f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80215f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80215f8:	429a      	cmp	r2, r3
 80215fa:	d112      	bne.n	8021622 <mbedtls_x509_crt_parse_der+0x2be>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80215fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80215fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8021600:	f000 ff30 	bl	8022464 <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 8021604:	b968      	cbnz	r0, 8021622 <mbedtls_x509_crt_parse_der+0x2be>
        sig_params1.len != sig_params2.len ||
 8021606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8021608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802160a:	429a      	cmp	r2, r3
 802160c:	d109      	bne.n	8021622 <mbedtls_x509_crt_parse_der+0x2be>
        sig_params1.len != sig_params2.len ||
 802160e:	2a00      	cmp	r2, #0
 8021610:	f000 81b5 	beq.w	802197e <mbedtls_x509_crt_parse_der+0x61a>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 8021614:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021616:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021618:	f000 ff24 	bl	8022464 <memcmp>
        ( sig_params1.len != 0 &&
 802161c:	2800      	cmp	r0, #0
 802161e:	f000 81ae 	beq.w	802197e <mbedtls_x509_crt_parse_der+0x61a>
        mbedtls_x509_crt_free( crt );
 8021622:	4620      	mov	r0, r4
 8021624:	f7ff fe32 	bl	802128c <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8021628:	4e06      	ldr	r6, [pc, #24]	; (8021644 <mbedtls_x509_crt_parse_der+0x2e0>)
 802162a:	e6dd      	b.n	80213e8 <mbedtls_x509_crt_parse_der+0x84>
 802162c:	200005a0 	.word	0x200005a0
 8021630:	ffffd780 	.word	0xffffd780
 8021634:	ffffde80 	.word	0xffffde80
 8021638:	ffffde1a 	.word	0xffffde1a
 802163c:	ffffda80 	.word	0xffffda80
 8021640:	ffffdd9a 	.word	0xffffdd9a
 8021644:	ffffd980 	.word	0xffffd980
    end = *p + len;
 8021648:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802164a:	9f06      	ldr	r7, [sp, #24]
 802164c:	440f      	add	r7, r1
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 802164e:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8021652:	4639      	mov	r1, r7
 8021654:	a806      	add	r0, sp, #24
 8021656:	f7fe f8dd 	bl	801f814 <mbedtls_x509_get_time>
 802165a:	4606      	mov	r6, r0
 802165c:	2800      	cmp	r0, #0
 802165e:	f47f af38 	bne.w	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8021662:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 8021666:	4639      	mov	r1, r7
 8021668:	a806      	add	r0, sp, #24
 802166a:	f7fe f8d3 	bl	801f814 <mbedtls_x509_get_time>
 802166e:	4606      	mov	r6, r0
 8021670:	2800      	cmp	r0, #0
 8021672:	f47f af2e 	bne.w	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( *p != end )
 8021676:	9b06      	ldr	r3, [sp, #24]
 8021678:	429f      	cmp	r7, r3
 802167a:	f43f af6d 	beq.w	8021558 <mbedtls_x509_crt_parse_der+0x1f4>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 802167e:	4ea3      	ldr	r6, [pc, #652]	; (802190c <mbedtls_x509_crt_parse_der+0x5a8>)
        mbedtls_x509_crt_free( crt );
 8021680:	e727      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    uid->tag = **p;
 8021682:	781b      	ldrb	r3, [r3, #0]
 8021684:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8021688:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
 802168c:	23a1      	movs	r3, #161	; 0xa1
 802168e:	4629      	mov	r1, r5
 8021690:	a806      	add	r0, sp, #24
 8021692:	f7ec fd7d 	bl	800e190 <mbedtls_asn1_get_tag>
 8021696:	4606      	mov	r6, r0
 8021698:	b140      	cbz	r0, 80216ac <mbedtls_x509_crt_parse_der+0x348>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 802169a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802169e:	f47f af18 	bne.w	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->version == 2 || crt->version == 3 )
 80216a2:	69a3      	ldr	r3, [r4, #24]
 80216a4:	3b02      	subs	r3, #2
 80216a6:	2b01      	cmp	r3, #1
 80216a8:	d981      	bls.n	80215ae <mbedtls_x509_crt_parse_der+0x24a>
 80216aa:	e784      	b.n	80215b6 <mbedtls_x509_crt_parse_der+0x252>
    uid->p = *p;
 80216ac:	9b06      	ldr	r3, [sp, #24]
    *p += uid->len;
 80216ae:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    uid->p = *p;
 80216b2:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    *p += uid->len;
 80216b6:	4413      	add	r3, r2
 80216b8:	9306      	str	r3, [sp, #24]
        if( ret != 0 )
 80216ba:	e7f2      	b.n	80216a2 <mbedtls_x509_crt_parse_der+0x33e>
    uid->tag = **p;
 80216bc:	781b      	ldrb	r3, [r3, #0]
 80216be:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80216c2:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 80216c6:	23a2      	movs	r3, #162	; 0xa2
 80216c8:	4629      	mov	r1, r5
 80216ca:	a806      	add	r0, sp, #24
 80216cc:	f7ec fd60 	bl	800e190 <mbedtls_asn1_get_tag>
 80216d0:	4606      	mov	r6, r0
 80216d2:	b120      	cbz	r0, 80216de <mbedtls_x509_crt_parse_der+0x37a>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80216d4:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80216d8:	f47f aefb 	bne.w	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
 80216dc:	e76b      	b.n	80215b6 <mbedtls_x509_crt_parse_der+0x252>
    uid->p = *p;
 80216de:	9b06      	ldr	r3, [sp, #24]
    *p += uid->len;
 80216e0:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
    uid->p = *p;
 80216e4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    *p += uid->len;
 80216e8:	4413      	add	r3, r2
 80216ea:	9306      	str	r3, [sp, #24]
        if( ret != 0 )
 80216ec:	e763      	b.n	80215b6 <mbedtls_x509_crt_parse_der+0x252>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80216ee:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80216f2:	f47f aeee 	bne.w	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( p != end )
 80216f6:	9b06      	ldr	r3, [sp, #24]
 80216f8:	429d      	cmp	r5, r3
 80216fa:	f43f af71 	beq.w	80215e0 <mbedtls_x509_crt_parse_der+0x27c>
 80216fe:	e680      	b.n	8021402 <mbedtls_x509_crt_parse_der+0x9e>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8021700:	2330      	movs	r3, #48	; 0x30
 8021702:	aa07      	add	r2, sp, #28
 8021704:	4629      	mov	r1, r5
 8021706:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8021708:	e9cd 9914 	strd	r9, r9, [sp, #80]	; 0x50
        int ext_type = 0;
 802170c:	e9cd 9908 	strd	r9, r9, [sp, #32]
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8021710:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8021714:	f7ec fd3c 	bl	800e190 <mbedtls_asn1_get_tag>
 8021718:	b120      	cbz	r0, 8021724 <mbedtls_x509_crt_parse_der+0x3c0>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802171a:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
        if( ret != 0 )
 802171e:	2e00      	cmp	r6, #0
 8021720:	d0e9      	beq.n	80216f6 <mbedtls_x509_crt_parse_der+0x392>
 8021722:	e6d6      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
        end_ext_data = *p + len;
 8021724:	e9dd 3706 	ldrd	r3, r7, [sp, #24]
 8021728:	441f      	add	r7, r3
        extn_oid.tag = **p;
 802172a:	781b      	ldrb	r3, [r3, #0]
 802172c:	9314      	str	r3, [sp, #80]	; 0x50
        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 802172e:	aa15      	add	r2, sp, #84	; 0x54
 8021730:	2306      	movs	r3, #6
 8021732:	4629      	mov	r1, r5
 8021734:	a806      	add	r0, sp, #24
 8021736:	f7ec fd2b 	bl	800e190 <mbedtls_asn1_get_tag>
 802173a:	2800      	cmp	r0, #0
 802173c:	d1ed      	bne.n	802171a <mbedtls_x509_crt_parse_der+0x3b6>
        extn_oid.p = *p;
 802173e:	9b06      	ldr	r3, [sp, #24]
        *p += extn_oid.len;
 8021740:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.p = *p;
 8021742:	9316      	str	r3, [sp, #88]	; 0x58
        *p += extn_oid.len;
 8021744:	4413      	add	r3, r2
 8021746:	9306      	str	r3, [sp, #24]
        if( ( end - *p ) < 1 )
 8021748:	1aeb      	subs	r3, r5, r3
 802174a:	2b00      	cmp	r3, #0
 802174c:	f340 813a 	ble.w	80219c4 <mbedtls_x509_crt_parse_der+0x660>
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8021750:	aa08      	add	r2, sp, #32
 8021752:	4639      	mov	r1, r7
 8021754:	a806      	add	r0, sp, #24
 8021756:	f7ec fd2f 	bl	800e1b8 <mbedtls_asn1_get_bool>
 802175a:	b110      	cbz	r0, 8021762 <mbedtls_x509_crt_parse_der+0x3fe>
 802175c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021760:	d1db      	bne.n	802171a <mbedtls_x509_crt_parse_der+0x3b6>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 8021762:	2304      	movs	r3, #4
 8021764:	aa07      	add	r2, sp, #28
 8021766:	4639      	mov	r1, r7
 8021768:	a806      	add	r0, sp, #24
 802176a:	f7ec fd11 	bl	800e190 <mbedtls_asn1_get_tag>
 802176e:	2800      	cmp	r0, #0
 8021770:	d1d3      	bne.n	802171a <mbedtls_x509_crt_parse_der+0x3b6>
        end_ext_octet = *p + len;
 8021772:	e9dd 6306 	ldrd	r6, r3, [sp, #24]
 8021776:	441e      	add	r6, r3
        if( end_ext_octet != end_ext_data )
 8021778:	42b7      	cmp	r7, r6
 802177a:	f040 80c5 	bne.w	8021908 <mbedtls_x509_crt_parse_der+0x5a4>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 802177e:	a909      	add	r1, sp, #36	; 0x24
 8021780:	a814      	add	r0, sp, #80	; 0x50
 8021782:	f7f3 ff1d 	bl	80155c0 <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 8021786:	b130      	cbz	r0, 8021796 <mbedtls_x509_crt_parse_der+0x432>
            if( is_critical )
 8021788:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
 802178a:	9706      	str	r7, [sp, #24]
            if( is_critical )
 802178c:	2b00      	cmp	r3, #0
 802178e:	f43f af21 	beq.w	80215d4 <mbedtls_x509_crt_parse_der+0x270>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8021792:	4e5f      	ldr	r6, [pc, #380]	; (8021910 <mbedtls_x509_crt_parse_der+0x5ac>)
 8021794:	e69d      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
        if( ( crt->ext_types & ext_type ) != 0 )
 8021796:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 802179a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802179c:	ea11 0302 	ands.w	r3, r1, r2
 80217a0:	f040 8112 	bne.w	80219c8 <mbedtls_x509_crt_parse_der+0x664>
        crt->ext_types |= ext_type;
 80217a4:	4311      	orrs	r1, r2
        switch( ext_type )
 80217a6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
 80217aa:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
 80217ae:	d020      	beq.n	80217f2 <mbedtls_x509_crt_parse_der+0x48e>
 80217b0:	dc06      	bgt.n	80217c0 <mbedtls_x509_crt_parse_der+0x45c>
 80217b2:	2a04      	cmp	r2, #4
 80217b4:	d05d      	beq.n	8021872 <mbedtls_x509_crt_parse_der+0x50e>
 80217b6:	2a20      	cmp	r2, #32
 80217b8:	f000 8090 	beq.w	80218dc <mbedtls_x509_crt_parse_der+0x578>
        if( ret != 0 )
 80217bc:	4e55      	ldr	r6, [pc, #340]	; (8021914 <mbedtls_x509_crt_parse_der+0x5b0>)
 80217be:	e688      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
        switch( ext_type )
 80217c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80217c4:	d07b      	beq.n	80218be <mbedtls_x509_crt_parse_der+0x55a>
 80217c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80217ca:	d1f7      	bne.n	80217bc <mbedtls_x509_crt_parse_der+0x458>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80217cc:	aa17      	add	r2, sp, #92	; 0x5c
 80217ce:	4639      	mov	r1, r7
 80217d0:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80217d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80217d4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80217d8:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80217da:	f7ec fd3c 	bl	800e256 <mbedtls_asn1_get_bitstring>
 80217de:	2800      	cmp	r0, #0
 80217e0:	d151      	bne.n	8021886 <mbedtls_x509_crt_parse_der+0x522>
    if( bs.len != 1 )
 80217e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80217e4:	2b01      	cmp	r3, #1
 80217e6:	d155      	bne.n	8021894 <mbedtls_x509_crt_parse_der+0x530>
    *ns_cert_type = *bs.p;
 80217e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80217ea:	781b      	ldrb	r3, [r3, #0]
 80217ec:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            continue;
 80217f0:	e6f0      	b.n	80215d4 <mbedtls_x509_crt_parse_der+0x270>
    *max_pathlen = 0; /* endless */
 80217f2:	e9c4 333f 	strd	r3, r3, [r4, #252]	; 0xfc
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80217f6:	aa17      	add	r2, sp, #92	; 0x5c
 80217f8:	2330      	movs	r3, #48	; 0x30
 80217fa:	4639      	mov	r1, r7
 80217fc:	a806      	add	r0, sp, #24
 80217fe:	f7ec fcc7 	bl	800e190 <mbedtls_asn1_get_tag>
 8021802:	b128      	cbz	r0, 8021810 <mbedtls_x509_crt_parse_der+0x4ac>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8021804:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8021808:	2e00      	cmp	r6, #0
 802180a:	f43f aee3 	beq.w	80215d4 <mbedtls_x509_crt_parse_der+0x270>
 802180e:	e660      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( *p == end )
 8021810:	9b06      	ldr	r3, [sp, #24]
 8021812:	429e      	cmp	r6, r3
 8021814:	f43f aede 	beq.w	80215d4 <mbedtls_x509_crt_parse_der+0x270>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8021818:	f104 02fc 	add.w	r2, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 802181c:	4631      	mov	r1, r6
 802181e:	a806      	add	r0, sp, #24
 8021820:	9203      	str	r2, [sp, #12]
 8021822:	f7ec fcc9 	bl	800e1b8 <mbedtls_asn1_get_bool>
 8021826:	b178      	cbz	r0, 8021848 <mbedtls_x509_crt_parse_der+0x4e4>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8021828:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802182c:	9a03      	ldr	r2, [sp, #12]
 802182e:	d1e9      	bne.n	8021804 <mbedtls_x509_crt_parse_der+0x4a0>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8021830:	4631      	mov	r1, r6
 8021832:	a806      	add	r0, sp, #24
 8021834:	f7ec fcd8 	bl	800e1e8 <mbedtls_asn1_get_int>
        if( ret != 0 )
 8021838:	2800      	cmp	r0, #0
 802183a:	d1e3      	bne.n	8021804 <mbedtls_x509_crt_parse_der+0x4a0>
        if( *ca_istrue != 0 )
 802183c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8021840:	b113      	cbz	r3, 8021848 <mbedtls_x509_crt_parse_der+0x4e4>
            *ca_istrue = 1;
 8021842:	2301      	movs	r3, #1
 8021844:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
 8021848:	9b06      	ldr	r3, [sp, #24]
 802184a:	429e      	cmp	r6, r3
 802184c:	f43f aec2 	beq.w	80215d4 <mbedtls_x509_crt_parse_der+0x270>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 8021850:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8021854:	4631      	mov	r1, r6
 8021856:	a806      	add	r0, sp, #24
 8021858:	f7ec fcc6 	bl	800e1e8 <mbedtls_asn1_get_int>
 802185c:	2800      	cmp	r0, #0
 802185e:	d1d1      	bne.n	8021804 <mbedtls_x509_crt_parse_der+0x4a0>
    if( *p != end )
 8021860:	9b06      	ldr	r3, [sp, #24]
 8021862:	429e      	cmp	r6, r3
 8021864:	d150      	bne.n	8021908 <mbedtls_x509_crt_parse_der+0x5a4>
    (*max_pathlen)++;
 8021866:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 802186a:	3301      	adds	r3, #1
 802186c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    return( 0 );
 8021870:	e6b0      	b.n	80215d4 <mbedtls_x509_crt_parse_der+0x270>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8021872:	aa17      	add	r2, sp, #92	; 0x5c
 8021874:	4639      	mov	r1, r7
 8021876:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8021878:	9317      	str	r3, [sp, #92]	; 0x5c
 802187a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 802187e:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8021880:	f7ec fce9 	bl	800e256 <mbedtls_asn1_get_bitstring>
 8021884:	b120      	cbz	r0, 8021890 <mbedtls_x509_crt_parse_der+0x52c>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 8021886:	f5b0 5614 	subs.w	r6, r0, #9472	; 0x2500
 802188a:	f43f aea3 	beq.w	80215d4 <mbedtls_x509_crt_parse_der+0x270>
 802188e:	e620      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( bs.len < 1 )
 8021890:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021892:	b909      	cbnz	r1, 8021898 <mbedtls_x509_crt_parse_der+0x534>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8021894:	4e20      	ldr	r6, [pc, #128]	; (8021918 <mbedtls_x509_crt_parse_der+0x5b4>)
        if( ret != 0 )
 8021896:	e61c      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8021898:	9e19      	ldr	r6, [sp, #100]	; 0x64
    *key_usage = 0;
 802189a:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 802189e:	5c33      	ldrb	r3, [r6, r0]
 80218a0:	00c2      	lsls	r2, r0, #3
 80218a2:	fa03 f202 	lsl.w	r2, r3, r2
 80218a6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80218aa:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80218ac:	4313      	orrs	r3, r2
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80218ae:	4281      	cmp	r1, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80218b0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80218b4:	f43f ae8e 	beq.w	80215d4 <mbedtls_x509_crt_parse_der+0x270>
 80218b8:	2804      	cmp	r0, #4
 80218ba:	d1f0      	bne.n	802189e <mbedtls_x509_crt_parse_der+0x53a>
 80218bc:	e68a      	b.n	80215d4 <mbedtls_x509_crt_parse_der+0x270>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80218be:	2306      	movs	r3, #6
 80218c0:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80218c4:	4639      	mov	r1, r7
 80218c6:	a806      	add	r0, sp, #24
 80218c8:	f7ec fcfa 	bl	800e2c0 <mbedtls_asn1_get_sequence_of>
 80218cc:	2800      	cmp	r0, #0
 80218ce:	d1da      	bne.n	8021886 <mbedtls_x509_crt_parse_der+0x522>
    if( ext_key_usage->buf.p == NULL )
 80218d0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	f47f ae7d 	bne.w	80215d4 <mbedtls_x509_crt_parse_der+0x270>
 80218da:	e7db      	b.n	8021894 <mbedtls_x509_crt_parse_der+0x530>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80218dc:	2330      	movs	r3, #48	; 0x30
 80218de:	aa0a      	add	r2, sp, #40	; 0x28
 80218e0:	4639      	mov	r1, r7
 80218e2:	a806      	add	r0, sp, #24
 80218e4:	f7ec fc54 	bl	800e190 <mbedtls_asn1_get_tag>
 80218e8:	2800      	cmp	r0, #0
 80218ea:	d18b      	bne.n	8021804 <mbedtls_x509_crt_parse_der+0x4a0>
    if( *p + len != end )
 80218ec:	9b06      	ldr	r3, [sp, #24]
 80218ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80218f0:	4413      	add	r3, r2
 80218f2:	429e      	cmp	r6, r3
 80218f4:	d108      	bne.n	8021908 <mbedtls_x509_crt_parse_der+0x5a4>
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80218f6:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
    while( *p < end )
 80218fa:	9b06      	ldr	r3, [sp, #24]
 80218fc:	429e      	cmp	r6, r3
 80218fe:	d80f      	bhi.n	8021920 <mbedtls_x509_crt_parse_der+0x5bc>
    cur->next = NULL;
 8021900:	f8c7 900c 	str.w	r9, [r7, #12]
    if( *p != end )
 8021904:	f43f ae66 	beq.w	80215d4 <mbedtls_x509_crt_parse_der+0x270>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8021908:	4e04      	ldr	r6, [pc, #16]	; (802191c <mbedtls_x509_crt_parse_der+0x5b8>)
            mbedtls_x509_crt_free( crt );
 802190a:	e5e2      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
 802190c:	ffffdb9a 	.word	0xffffdb9a
 8021910:	ffffda9e 	.word	0xffffda9e
 8021914:	ffffdf80 	.word	0xffffdf80
 8021918:	ffffda9c 	.word	0xffffda9c
 802191c:	ffffda9a 	.word	0xffffda9a
        if( ( end - *p ) < 1 )
 8021920:	1af2      	subs	r2, r6, r3
 8021922:	2a00      	cmp	r2, #0
 8021924:	dd4e      	ble.n	80219c4 <mbedtls_x509_crt_parse_der+0x660>
        tag = **p;
 8021926:	461a      	mov	r2, r3
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8021928:	4631      	mov	r1, r6
        tag = **p;
 802192a:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
 802192e:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8021930:	a806      	add	r0, sp, #24
 8021932:	aa17      	add	r2, sp, #92	; 0x5c
        tag = **p;
 8021934:	9303      	str	r3, [sp, #12]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8021936:	f7ec fbe3 	bl	800e100 <mbedtls_asn1_get_len>
 802193a:	9b03      	ldr	r3, [sp, #12]
 802193c:	2800      	cmp	r0, #0
 802193e:	f47f af61 	bne.w	8021804 <mbedtls_x509_crt_parse_der+0x4a0>
        if( ( tag & MBEDTLS_ASN1_CONTEXT_SPECIFIC ) != MBEDTLS_ASN1_CONTEXT_SPECIFIC )
 8021942:	061a      	lsls	r2, r3, #24
 8021944:	f57f af25 	bpl.w	8021792 <mbedtls_x509_crt_parse_der+0x42e>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8021948:	2b82      	cmp	r3, #130	; 0x82
 802194a:	d004      	beq.n	8021956 <mbedtls_x509_crt_parse_der+0x5f2>
            *p += tag_len;
 802194c:	9b06      	ldr	r3, [sp, #24]
 802194e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        *p += buf->len;
 8021950:	4413      	add	r3, r2
 8021952:	9306      	str	r3, [sp, #24]
 8021954:	e7d1      	b.n	80218fa <mbedtls_x509_crt_parse_der+0x596>
        if( cur->buf.p != NULL )
 8021956:	68bb      	ldr	r3, [r7, #8]
 8021958:	b153      	cbz	r3, 8021970 <mbedtls_x509_crt_parse_der+0x60c>
            if( cur->next != NULL )
 802195a:	68fb      	ldr	r3, [r7, #12]
 802195c:	2b00      	cmp	r3, #0
 802195e:	d133      	bne.n	80219c8 <mbedtls_x509_crt_parse_der+0x664>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8021960:	4b1a      	ldr	r3, [pc, #104]	; (80219cc <mbedtls_x509_crt_parse_der+0x668>)
 8021962:	2110      	movs	r1, #16
 8021964:	681b      	ldr	r3, [r3, #0]
 8021966:	2001      	movs	r0, #1
 8021968:	4798      	blx	r3
 802196a:	60f8      	str	r0, [r7, #12]
            if( cur->next == NULL )
 802196c:	b340      	cbz	r0, 80219c0 <mbedtls_x509_crt_parse_der+0x65c>
 802196e:	4607      	mov	r7, r0
        buf->tag = tag;
 8021970:	2382      	movs	r3, #130	; 0x82
 8021972:	603b      	str	r3, [r7, #0]
        buf->len = tag_len;
 8021974:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        buf->p = *p;
 8021976:	9b06      	ldr	r3, [sp, #24]
 8021978:	60bb      	str	r3, [r7, #8]
        buf->len = tag_len;
 802197a:	607a      	str	r2, [r7, #4]
 802197c:	e7e8      	b.n	8021950 <mbedtls_x509_crt_parse_der+0x5ec>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 802197e:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8021982:	4641      	mov	r1, r8
 8021984:	a806      	add	r0, sp, #24
 8021986:	f7fd fff3 	bl	801f970 <mbedtls_x509_get_sig>
 802198a:	4606      	mov	r6, r0
 802198c:	2800      	cmp	r0, #0
 802198e:	f47f ada0 	bne.w	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
    if( p != end )
 8021992:	9b06      	ldr	r3, [sp, #24]
 8021994:	4598      	cmp	r8, r3
 8021996:	f47f ad34 	bne.w	8021402 <mbedtls_x509_crt_parse_der+0x9e>
}
 802199a:	4630      	mov	r0, r6
 802199c:	b01b      	add	sp, #108	; 0x6c
 802199e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80219a2:	4e0b      	ldr	r6, [pc, #44]	; (80219d0 <mbedtls_x509_crt_parse_der+0x66c>)
        if( prev )
 80219a4:	f1ba 0f00 	cmp.w	sl, #0
 80219a8:	d104      	bne.n	80219b4 <mbedtls_x509_crt_parse_der+0x650>
            mbedtls_free( crt );
 80219aa:	4b0a      	ldr	r3, [pc, #40]	; (80219d4 <mbedtls_x509_crt_parse_der+0x670>)
 80219ac:	4620      	mov	r0, r4
 80219ae:	681b      	ldr	r3, [r3, #0]
 80219b0:	4798      	blx	r3
 80219b2:	e7f2      	b.n	802199a <mbedtls_x509_crt_parse_der+0x636>
            prev->next = NULL;
 80219b4:	2300      	movs	r3, #0
 80219b6:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 80219ba:	e519      	b.n	80213f0 <mbedtls_x509_crt_parse_der+0x8c>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80219bc:	4e04      	ldr	r6, [pc, #16]	; (80219d0 <mbedtls_x509_crt_parse_der+0x66c>)
 80219be:	e7ec      	b.n	802199a <mbedtls_x509_crt_parse_der+0x636>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80219c0:	4e05      	ldr	r6, [pc, #20]	; (80219d8 <mbedtls_x509_crt_parse_der+0x674>)
 80219c2:	e586      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80219c4:	4e05      	ldr	r6, [pc, #20]	; (80219dc <mbedtls_x509_crt_parse_der+0x678>)
 80219c6:	e584      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 80219c8:	4e05      	ldr	r6, [pc, #20]	; (80219e0 <mbedtls_x509_crt_parse_der+0x67c>)
 80219ca:	e582      	b.n	80214d2 <mbedtls_x509_crt_parse_der+0x16e>
 80219cc:	200005a0 	.word	0x200005a0
 80219d0:	ffffd800 	.word	0xffffd800
 80219d4:	200005a4 	.word	0x200005a4
 80219d8:	ffffda96 	.word	0xffffda96
 80219dc:	ffffdaa0 	.word	0xffffdaa0
 80219e0:	ffffdb00 	.word	0xffffdb00

080219e4 <mbedtls_x509_crt_parse>:
{
 80219e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219e8:	468a      	mov	sl, r1
 80219ea:	b089      	sub	sp, #36	; 0x24
 80219ec:	4617      	mov	r7, r2
    if( chain == NULL || buf == NULL )
 80219ee:	4680      	mov	r8, r0
 80219f0:	2800      	cmp	r0, #0
 80219f2:	d05a      	beq.n	8021aaa <mbedtls_x509_crt_parse+0xc6>
 80219f4:	2900      	cmp	r1, #0
 80219f6:	d058      	beq.n	8021aaa <mbedtls_x509_crt_parse+0xc6>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 80219f8:	b14a      	cbz	r2, 8021a0e <mbedtls_x509_crt_parse+0x2a>
 80219fa:	188a      	adds	r2, r1, r2
 80219fc:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 8021a00:	b92e      	cbnz	r6, 8021a0e <mbedtls_x509_crt_parse+0x2a>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 8021a02:	492c      	ldr	r1, [pc, #176]	; (8021ab4 <mbedtls_x509_crt_parse+0xd0>)
 8021a04:	4650      	mov	r0, sl
 8021a06:	f002 f850 	bl	8023aaa <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8021a0a:	2800      	cmp	r0, #0
 8021a0c:	d148      	bne.n	8021aa0 <mbedtls_x509_crt_parse+0xbc>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 8021a0e:	463a      	mov	r2, r7
 8021a10:	4651      	mov	r1, sl
 8021a12:	4640      	mov	r0, r8
 8021a14:	f7ff fca6 	bl	8021364 <mbedtls_x509_crt_parse_der>
 8021a18:	4604      	mov	r4, r0
}
 8021a1a:	4620      	mov	r0, r4
 8021a1c:	b009      	add	sp, #36	; 0x24
 8021a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            mbedtls_pem_init( &pem );
 8021a22:	a805      	add	r0, sp, #20
 8021a24:	f7f3 fef7 	bl	8015816 <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
 8021a28:	aa04      	add	r2, sp, #16
 8021a2a:	9202      	str	r2, [sp, #8]
 8021a2c:	2200      	movs	r2, #0
 8021a2e:	e9cd 2200 	strd	r2, r2, [sp]
 8021a32:	4653      	mov	r3, sl
 8021a34:	4a20      	ldr	r2, [pc, #128]	; (8021ab8 <mbedtls_x509_crt_parse+0xd4>)
 8021a36:	4659      	mov	r1, fp
 8021a38:	a805      	add	r0, sp, #20
 8021a3a:	f7f3 fef1 	bl	8015820 <mbedtls_pem_read_buffer>
            if( ret == 0 )
 8021a3e:	4605      	mov	r5, r0
 8021a40:	b978      	cbnz	r0, 8021a62 <mbedtls_x509_crt_parse+0x7e>
                buflen -= use_len;
 8021a42:	9a04      	ldr	r2, [sp, #16]
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8021a44:	4640      	mov	r0, r8
                buflen -= use_len;
 8021a46:	1abf      	subs	r7, r7, r2
                buf += use_len;
 8021a48:	4492      	add	sl, r2
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8021a4a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8021a4e:	f7ff fc89 	bl	8021364 <mbedtls_x509_crt_parse_der>
 8021a52:	4605      	mov	r5, r0
            mbedtls_pem_free( &pem );
 8021a54:	a805      	add	r0, sp, #20
 8021a56:	f7f4 f83f 	bl	8015ad8 <mbedtls_pem_free>
            if( ret != 0 )
 8021a5a:	b9e5      	cbnz	r5, 8021a96 <mbedtls_x509_crt_parse+0xb2>
            success = 1;
 8021a5c:	f04f 0901 	mov.w	r9, #1
 8021a60:	e00f      	b.n	8021a82 <mbedtls_x509_crt_parse+0x9e>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 8021a62:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 8021a66:	d019      	beq.n	8021a9c <mbedtls_x509_crt_parse+0xb8>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8021a68:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8021a6c:	d00b      	beq.n	8021a86 <mbedtls_x509_crt_parse+0xa2>
                mbedtls_pem_free( &pem );
 8021a6e:	a805      	add	r0, sp, #20
 8021a70:	f7f4 f832 	bl	8015ad8 <mbedtls_pem_free>
                buflen -= use_len;
 8021a74:	9a04      	ldr	r2, [sp, #16]
 8021a76:	1abf      	subs	r7, r7, r2
                buf += use_len;
 8021a78:	4492      	add	sl, r2
                if( first_error == 0 )
 8021a7a:	2c00      	cmp	r4, #0
 8021a7c:	bf08      	it	eq
 8021a7e:	462c      	moveq	r4, r5
                total_failed++;
 8021a80:	3601      	adds	r6, #1
        while( buflen > 1 )
 8021a82:	2f01      	cmp	r7, #1
 8021a84:	d8cd      	bhi.n	8021a22 <mbedtls_x509_crt_parse+0x3e>
    if( success )
 8021a86:	f1b9 0f00 	cmp.w	r9, #0
 8021a8a:	d110      	bne.n	8021aae <mbedtls_x509_crt_parse+0xca>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 8021a8c:	4b0b      	ldr	r3, [pc, #44]	; (8021abc <mbedtls_x509_crt_parse+0xd8>)
 8021a8e:	2c00      	cmp	r4, #0
 8021a90:	bf08      	it	eq
 8021a92:	461c      	moveq	r4, r3
 8021a94:	e7c1      	b.n	8021a1a <mbedtls_x509_crt_parse+0x36>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 8021a96:	f515 5f22 	cmn.w	r5, #10368	; 0x2880
 8021a9a:	d1ee      	bne.n	8021a7a <mbedtls_x509_crt_parse+0x96>
 8021a9c:	462c      	mov	r4, r5
 8021a9e:	e7bc      	b.n	8021a1a <mbedtls_x509_crt_parse+0x36>
            ret = mbedtls_pem_read_buffer( &pem,
 8021aa0:	f8df b010 	ldr.w	fp, [pc, #16]	; 8021ab4 <mbedtls_x509_crt_parse+0xd0>
    int success = 0, first_error = 0, total_failed = 0;
 8021aa4:	4634      	mov	r4, r6
 8021aa6:	46b1      	mov	r9, r6
 8021aa8:	e7eb      	b.n	8021a82 <mbedtls_x509_crt_parse+0x9e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8021aaa:	4c05      	ldr	r4, [pc, #20]	; (8021ac0 <mbedtls_x509_crt_parse+0xdc>)
 8021aac:	e7b5      	b.n	8021a1a <mbedtls_x509_crt_parse+0x36>
 8021aae:	4634      	mov	r4, r6
 8021ab0:	e7b3      	b.n	8021a1a <mbedtls_x509_crt_parse+0x36>
 8021ab2:	bf00      	nop
 8021ab4:	0802de20 	.word	0x0802de20
 8021ab8:	0802debe 	.word	0x0802debe
 8021abc:	ffffd880 	.word	0xffffd880
 8021ac0:	ffffd800 	.word	0xffffd800

08021ac4 <parse_hex4>:
static unsigned parse_hex4(const unsigned char * const input)
{
    unsigned int h = 0;
    size_t i = 0;

    for (i = 0; i < 4; i++)
 8021ac4:	2200      	movs	r2, #0
{
 8021ac6:	b510      	push	{r4, lr}
 8021ac8:	4604      	mov	r4, r0
    unsigned int h = 0;
 8021aca:	4610      	mov	r0, r2
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8021acc:	5ca1      	ldrb	r1, [r4, r2]
 8021ace:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8021ad2:	2b09      	cmp	r3, #9
 8021ad4:	d80b      	bhi.n	8021aee <parse_hex4+0x2a>
        {
            h += (unsigned int) input[i] - '0';
 8021ad6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
 8021ada:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
 8021adc:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
 8021ae0:	f102 0201 	add.w	r2, r2, #1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8021ae4:	bf18      	it	ne
 8021ae6:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
 8021ae8:	2a04      	cmp	r2, #4
 8021aea:	d1ef      	bne.n	8021acc <parse_hex4+0x8>
        }
    }

    return h;
}
 8021aec:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8021aee:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8021af2:	2b05      	cmp	r3, #5
 8021af4:	d802      	bhi.n	8021afc <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
 8021af6:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
 8021afa:	e7ee      	b.n	8021ada <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8021afc:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8021b00:	2b05      	cmp	r3, #5
 8021b02:	d802      	bhi.n	8021b0a <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
 8021b04:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
 8021b08:	e7e7      	b.n	8021ada <parse_hex4+0x16>
            return 0;
 8021b0a:	2000      	movs	r0, #0
 8021b0c:	e7ee      	b.n	8021aec <parse_hex4+0x28>
	...

08021b10 <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8021b10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021b14:	680a      	ldr	r2, [r1, #0]
 8021b16:	688b      	ldr	r3, [r1, #8]
{
 8021b18:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021b1a:	1c5d      	adds	r5, r3, #1
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8021b1c:	18d0      	adds	r0, r2, r3
 8021b1e:	5cd3      	ldrb	r3, [r2, r3]
 8021b20:	2b22      	cmp	r3, #34	; 0x22
{
 8021b22:	468a      	mov	sl, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021b24:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8021b26:	d10a      	bne.n	8021b3e <parse_string+0x2e>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021b28:	462f      	mov	r7, r5
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
 8021b2a:	2300      	movs	r3, #0
        while ((*input_end != '\"') && ((size_t)(input_end - input_buffer->content) < input_buffer->length))
 8021b2c:	783c      	ldrb	r4, [r7, #0]
 8021b2e:	2c22      	cmp	r4, #34	; 0x22
 8021b30:	f000 80ca 	beq.w	8021cc8 <parse_string+0x1b8>
 8021b34:	f8da 1004 	ldr.w	r1, [sl, #4]
 8021b38:	1abe      	subs	r6, r7, r2
 8021b3a:	428e      	cmp	r6, r1
 8021b3c:	d302      	bcc.n	8021b44 <parse_string+0x34>
    if (output != NULL)
    {
        input_buffer->hooks.deallocate(output);
    }

    if (input_pointer != NULL)
 8021b3e:	bbad      	cbnz	r5, 8021bac <parse_string+0x9c>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    }

    return false;
 8021b40:	2000      	movs	r0, #0
 8021b42:	e01c      	b.n	8021b7e <parse_string+0x6e>
            if (input_end[0] == '\\')
 8021b44:	2c5c      	cmp	r4, #92	; 0x5c
 8021b46:	d104      	bne.n	8021b52 <parse_string+0x42>
 8021b48:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8021b4a:	1abc      	subs	r4, r7, r2
 8021b4c:	428c      	cmp	r4, r1
 8021b4e:	d2f6      	bcs.n	8021b3e <parse_string+0x2e>
                skipped_bytes++;
 8021b50:	3301      	adds	r3, #1
            input_end++;
 8021b52:	3701      	adds	r7, #1
 8021b54:	e7ea      	b.n	8021b2c <parse_string+0x1c>
        if (*input_pointer != '\\')
 8021b56:	782b      	ldrb	r3, [r5, #0]
 8021b58:	2b5c      	cmp	r3, #92	; 0x5c
 8021b5a:	d012      	beq.n	8021b82 <parse_string+0x72>
            *output_pointer++ = *input_pointer++;
 8021b5c:	f804 3b01 	strb.w	r3, [r4], #1
 8021b60:	3501      	adds	r5, #1
    while (input_pointer < input_end)
 8021b62:	42bd      	cmp	r5, r7
 8021b64:	d3f7      	bcc.n	8021b56 <parse_string+0x46>
    *output_pointer = '\0';
 8021b66:	2300      	movs	r3, #0
 8021b68:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
 8021b6a:	2310      	movs	r3, #16
    item->valuestring = (char*)output;
 8021b6c:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8021b70:	f8da 3000 	ldr.w	r3, [sl]
 8021b74:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
 8021b76:	3701      	adds	r7, #1
 8021b78:	f8ca 7008 	str.w	r7, [sl, #8]
    return true;
 8021b7c:	2001      	movs	r0, #1
}
 8021b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
 8021b82:	1b7a      	subs	r2, r7, r5
 8021b84:	2a00      	cmp	r2, #0
 8021b86:	dd0d      	ble.n	8021ba4 <parse_string+0x94>
            switch (input_pointer[1])
 8021b88:	786b      	ldrb	r3, [r5, #1]
 8021b8a:	2b75      	cmp	r3, #117	; 0x75
 8021b8c:	d80a      	bhi.n	8021ba4 <parse_string+0x94>
 8021b8e:	2b6d      	cmp	r3, #109	; 0x6d
 8021b90:	d812      	bhi.n	8021bb8 <parse_string+0xa8>
 8021b92:	2b62      	cmp	r3, #98	; 0x62
 8021b94:	d02a      	beq.n	8021bec <parse_string+0xdc>
 8021b96:	d825      	bhi.n	8021be4 <parse_string+0xd4>
 8021b98:	2b2f      	cmp	r3, #47	; 0x2f
 8021b9a:	d028      	beq.n	8021bee <parse_string+0xde>
 8021b9c:	2b5c      	cmp	r3, #92	; 0x5c
 8021b9e:	d026      	beq.n	8021bee <parse_string+0xde>
 8021ba0:	2b22      	cmp	r3, #34	; 0x22
 8021ba2:	d024      	beq.n	8021bee <parse_string+0xde>
        input_buffer->hooks.deallocate(output);
 8021ba4:	f8da 3014 	ldr.w	r3, [sl, #20]
 8021ba8:	4658      	mov	r0, fp
 8021baa:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8021bac:	f8da 0000 	ldr.w	r0, [sl]
 8021bb0:	1a28      	subs	r0, r5, r0
 8021bb2:	f8ca 0008 	str.w	r0, [sl, #8]
 8021bb6:	e7c3      	b.n	8021b40 <parse_string+0x30>
 8021bb8:	3b6e      	subs	r3, #110	; 0x6e
 8021bba:	2b07      	cmp	r3, #7
 8021bbc:	d8f2      	bhi.n	8021ba4 <parse_string+0x94>
 8021bbe:	a101      	add	r1, pc, #4	; (adr r1, 8021bc4 <parse_string+0xb4>)
 8021bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021bc4:	08021bf9 	.word	0x08021bf9
 8021bc8:	08021ba5 	.word	0x08021ba5
 8021bcc:	08021ba5 	.word	0x08021ba5
 8021bd0:	08021ba5 	.word	0x08021ba5
 8021bd4:	08021bfd 	.word	0x08021bfd
 8021bd8:	08021ba5 	.word	0x08021ba5
 8021bdc:	08021c01 	.word	0x08021c01
 8021be0:	08021c05 	.word	0x08021c05
            switch (input_pointer[1])
 8021be4:	2b66      	cmp	r3, #102	; 0x66
 8021be6:	d1dd      	bne.n	8021ba4 <parse_string+0x94>
                    *output_pointer++ = '\f';
 8021be8:	230c      	movs	r3, #12
 8021bea:	e000      	b.n	8021bee <parse_string+0xde>
                    *output_pointer++ = '\b';
 8021bec:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
 8021bee:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
 8021bf2:	2302      	movs	r3, #2
            input_pointer += sequence_length;
 8021bf4:	441d      	add	r5, r3
 8021bf6:	e7b4      	b.n	8021b62 <parse_string+0x52>
                    *output_pointer++ = '\n';
 8021bf8:	230a      	movs	r3, #10
 8021bfa:	e7f8      	b.n	8021bee <parse_string+0xde>
                    *output_pointer++ = '\r';
 8021bfc:	230d      	movs	r3, #13
 8021bfe:	e7f6      	b.n	8021bee <parse_string+0xde>
                    *output_pointer++ = '\t';
 8021c00:	2309      	movs	r3, #9
 8021c02:	e7f4      	b.n	8021bee <parse_string+0xde>
    if ((input_end - first_sequence) < 6)
 8021c04:	2a05      	cmp	r2, #5
 8021c06:	ddcd      	ble.n	8021ba4 <parse_string+0x94>
    first_code = parse_hex4(first_sequence + 2);
 8021c08:	1ca8      	adds	r0, r5, #2
 8021c0a:	f7ff ff5b 	bl	8021ac4 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8021c0e:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 8021c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
 8021c16:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8021c18:	d3c4      	bcc.n	8021ba4 <parse_string+0x94>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8021c1a:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 8021c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021c22:	d22d      	bcs.n	8021c80 <parse_string+0x170>
        const unsigned char *second_sequence = first_sequence + 6;
 8021c24:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
 8021c26:	1afb      	subs	r3, r7, r3
 8021c28:	2b05      	cmp	r3, #5
 8021c2a:	ddbb      	ble.n	8021ba4 <parse_string+0x94>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8021c2c:	79ab      	ldrb	r3, [r5, #6]
 8021c2e:	2b5c      	cmp	r3, #92	; 0x5c
 8021c30:	d1b8      	bne.n	8021ba4 <parse_string+0x94>
 8021c32:	79eb      	ldrb	r3, [r5, #7]
 8021c34:	2b75      	cmp	r3, #117	; 0x75
 8021c36:	d1b5      	bne.n	8021ba4 <parse_string+0x94>
        second_code = parse_hex4(second_sequence + 2);
 8021c38:	f105 0008 	add.w	r0, r5, #8
 8021c3c:	f7ff ff42 	bl	8021ac4 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8021c40:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 8021c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021c48:	d2ac      	bcs.n	8021ba4 <parse_string+0x94>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8021c4a:	ea09 2686 	and.w	r6, r9, r6, lsl #10
 8021c4e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8021c52:	4330      	orrs	r0, r6
 8021c54:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        sequence_length = 12; /* \uXXXX\uXXXX */
 8021c58:	230c      	movs	r3, #12
        first_byte_mark = 0xF0; /* 11110000 */
 8021c5a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
 8021c5e:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8021c60:	f100 3eff 	add.w	lr, r0, #4294967295
 8021c64:	fa54 fe8e 	uxtab	lr, r4, lr
 8021c68:	45a6      	cmp	lr, r4
 8021c6a:	b2f2      	uxtb	r2, r6
 8021c6c:	d124      	bne.n	8021cb8 <parse_string+0x1a8>
    if (utf8_length > 1)
 8021c6e:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8021c70:	bf14      	ite	ne
 8021c72:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8021c76:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
 8021c7a:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
 8021c7c:	4404      	add	r4, r0
                    if (sequence_length == 0)
 8021c7e:	e7b9      	b.n	8021bf4 <parse_string+0xe4>
    if (codepoint < 0x80)
 8021c80:	287f      	cmp	r0, #127	; 0x7f
 8021c82:	d90a      	bls.n	8021c9a <parse_string+0x18a>
    else if (codepoint < 0x800)
 8021c84:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8021c88:	d30c      	bcc.n	8021ca4 <parse_string+0x194>
    else if (codepoint < 0x10000)
 8021c8a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8021c8e:	d30e      	bcc.n	8021cae <parse_string+0x19e>
    else if (codepoint <= 0x10FFFF)
 8021c90:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8021c94:	d286      	bcs.n	8021ba4 <parse_string+0x94>
        sequence_length = 6; /* \uXXXX */
 8021c96:	2306      	movs	r3, #6
 8021c98:	e7df      	b.n	8021c5a <parse_string+0x14a>
 8021c9a:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
 8021c9c:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
 8021ca0:	2001      	movs	r0, #1
 8021ca2:	e7dd      	b.n	8021c60 <parse_string+0x150>
        sequence_length = 6; /* \uXXXX */
 8021ca4:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
 8021ca6:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
 8021caa:	2002      	movs	r0, #2
 8021cac:	e7d8      	b.n	8021c60 <parse_string+0x150>
        sequence_length = 6; /* \uXXXX */
 8021cae:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
 8021cb0:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
 8021cb4:	2003      	movs	r0, #3
 8021cb6:	e7d3      	b.n	8021c60 <parse_string+0x150>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8021cb8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8021cbc:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8021cc0:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
 8021cc4:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8021cc6:	e7cf      	b.n	8021c68 <parse_string+0x158>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8021cc8:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8021ccc:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8021cce:	f8da 2010 	ldr.w	r2, [sl, #16]
 8021cd2:	4418      	add	r0, r3
 8021cd4:	4790      	blx	r2
        if (output == NULL)
 8021cd6:	4683      	mov	fp, r0
 8021cd8:	2800      	cmp	r0, #0
 8021cda:	f43f af30 	beq.w	8021b3e <parse_string+0x2e>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8021cde:	f8df 9008 	ldr.w	r9, [pc, #8]	; 8021ce8 <parse_string+0x1d8>
 8021ce2:	4604      	mov	r4, r0
 8021ce4:	e73d      	b.n	8021b62 <parse_string+0x52>
 8021ce6:	bf00      	nop
 8021ce8:	000ffc00 	.word	0x000ffc00

08021cec <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8021cec:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
 8021cee:	b140      	cbz	r0, 8021d02 <buffer_skip_whitespace+0x16>
 8021cf0:	6801      	ldr	r1, [r0, #0]
 8021cf2:	b171      	cbz	r1, 8021d12 <buffer_skip_whitespace+0x26>
    {
        return NULL;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8021cf4:	6842      	ldr	r2, [r0, #4]
 8021cf6:	6883      	ldr	r3, [r0, #8]
 8021cf8:	4293      	cmp	r3, r2
 8021cfa:	d206      	bcs.n	8021d0a <buffer_skip_whitespace+0x1e>
 8021cfc:	5ccc      	ldrb	r4, [r1, r3]
 8021cfe:	2c20      	cmp	r4, #32
 8021d00:	d900      	bls.n	8021d04 <buffer_skip_whitespace+0x18>
    {
        buffer->offset--;
    }

    return buffer;
}
 8021d02:	bd10      	pop	{r4, pc}
       buffer->offset++;
 8021d04:	3301      	adds	r3, #1
 8021d06:	6083      	str	r3, [r0, #8]
 8021d08:	e7f5      	b.n	8021cf6 <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
 8021d0a:	d1fa      	bne.n	8021d02 <buffer_skip_whitespace+0x16>
        buffer->offset--;
 8021d0c:	3a01      	subs	r2, #1
 8021d0e:	6082      	str	r2, [r0, #8]
 8021d10:	e7f7      	b.n	8021d02 <buffer_skip_whitespace+0x16>
        return NULL;
 8021d12:	4608      	mov	r0, r1
 8021d14:	e7f5      	b.n	8021d02 <buffer_skip_whitespace+0x16>
	...

08021d18 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8021d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d1a:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
 8021d1c:	4604      	mov	r4, r0
 8021d1e:	b348      	cbz	r0, 8021d74 <get_object_item+0x5c>
 8021d20:	b369      	cbz	r1, 8021d7e <get_object_item+0x66>
    {
        return NULL;
    }

    current_element = object->child;
 8021d22:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
 8021d24:	b9fa      	cbnz	r2, 8021d66 <get_object_item+0x4e>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8021d26:	4e17      	ldr	r6, [pc, #92]	; (8021d84 <get_object_item+0x6c>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8021d28:	b324      	cbz	r4, 8021d74 <get_object_item+0x5c>
 8021d2a:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
 8021d2c:	b1c3      	cbz	r3, 8021d60 <get_object_item+0x48>
    if (string1 == string2)
 8021d2e:	42ab      	cmp	r3, r5
 8021d30:	d020      	beq.n	8021d74 <get_object_item+0x5c>
 8021d32:	f105 3cff 	add.w	ip, r5, #4294967295
 8021d36:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8021d38:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8021d3c:	5d8a      	ldrb	r2, [r1, r6]
 8021d3e:	f002 0203 	and.w	r2, r2, #3
 8021d42:	2a01      	cmp	r2, #1
 8021d44:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8021d48:	5cb0      	ldrb	r0, [r6, r2]
 8021d4a:	f000 0003 	and.w	r0, r0, #3
 8021d4e:	460f      	mov	r7, r1
 8021d50:	bf08      	it	eq
 8021d52:	f101 0720 	addeq.w	r7, r1, #32
 8021d56:	2801      	cmp	r0, #1
 8021d58:	bf08      	it	eq
 8021d5a:	3220      	addeq	r2, #32
 8021d5c:	4297      	cmp	r7, r2
 8021d5e:	d00b      	beq.n	8021d78 <get_object_item+0x60>
        {
            current_element = current_element->next;
 8021d60:	6824      	ldr	r4, [r4, #0]
 8021d62:	e7e1      	b.n	8021d28 <get_object_item+0x10>
            current_element = current_element->next;
 8021d64:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8021d66:	b12c      	cbz	r4, 8021d74 <get_object_item+0x5c>
 8021d68:	6a21      	ldr	r1, [r4, #32]
 8021d6a:	4628      	mov	r0, r5
 8021d6c:	f7de fa30 	bl	80001d0 <strcmp>
 8021d70:	2800      	cmp	r0, #0
 8021d72:	d1f7      	bne.n	8021d64 <get_object_item+0x4c>
        }
    }

    return current_element;
}
 8021d74:	4620      	mov	r0, r4
 8021d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
 8021d78:	2900      	cmp	r1, #0
 8021d7a:	d1dd      	bne.n	8021d38 <get_object_item+0x20>
 8021d7c:	e7fa      	b.n	8021d74 <get_object_item+0x5c>
        return NULL;
 8021d7e:	460c      	mov	r4, r1
 8021d80:	e7f8      	b.n	8021d74 <get_object_item+0x5c>
 8021d82:	bf00      	nop
 8021d84:	080337ff 	.word	0x080337ff

08021d88 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
 8021d88:	b510      	push	{r4, lr}
 8021d8a:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8021d8c:	2028      	movs	r0, #40	; 0x28
 8021d8e:	4798      	blx	r3
    if (node)
 8021d90:	4604      	mov	r4, r0
 8021d92:	b118      	cbz	r0, 8021d9c <cJSON_New_Item.isra.0+0x14>
        memset(node, '\0', sizeof(cJSON));
 8021d94:	2228      	movs	r2, #40	; 0x28
 8021d96:	2100      	movs	r1, #0
 8021d98:	f000 fb9a 	bl	80224d0 <memset>
}
 8021d9c:	4620      	mov	r0, r4
 8021d9e:	bd10      	pop	{r4, pc}

08021da0 <cJSON_Delete>:
{
 8021da0:	b570      	push	{r4, r5, r6, lr}
 8021da2:	4d10      	ldr	r5, [pc, #64]	; (8021de4 <cJSON_Delete+0x44>)
 8021da4:	4604      	mov	r4, r0
    while (item != NULL)
 8021da6:	b904      	cbnz	r4, 8021daa <cJSON_Delete+0xa>
}
 8021da8:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8021daa:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
 8021dac:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8021dae:	05d9      	lsls	r1, r3, #23
 8021db0:	d403      	bmi.n	8021dba <cJSON_Delete+0x1a>
 8021db2:	68a0      	ldr	r0, [r4, #8]
 8021db4:	b968      	cbnz	r0, 8021dd2 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8021db6:	6920      	ldr	r0, [r4, #16]
 8021db8:	b988      	cbnz	r0, 8021dde <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8021dba:	68e3      	ldr	r3, [r4, #12]
 8021dbc:	059b      	lsls	r3, r3, #22
 8021dbe:	d403      	bmi.n	8021dc8 <cJSON_Delete+0x28>
 8021dc0:	6a20      	ldr	r0, [r4, #32]
 8021dc2:	b108      	cbz	r0, 8021dc8 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
 8021dc4:	686b      	ldr	r3, [r5, #4]
 8021dc6:	4798      	blx	r3
        global_hooks.deallocate(item);
 8021dc8:	4620      	mov	r0, r4
 8021dca:	686b      	ldr	r3, [r5, #4]
 8021dcc:	4798      	blx	r3
        item = next;
 8021dce:	4634      	mov	r4, r6
 8021dd0:	e7e9      	b.n	8021da6 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
 8021dd2:	f7ff ffe5 	bl	8021da0 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8021dd6:	68e3      	ldr	r3, [r4, #12]
 8021dd8:	05da      	lsls	r2, r3, #23
 8021dda:	d5ec      	bpl.n	8021db6 <cJSON_Delete+0x16>
 8021ddc:	e7ed      	b.n	8021dba <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
 8021dde:	686b      	ldr	r3, [r5, #4]
 8021de0:	4798      	blx	r3
 8021de2:	e7ea      	b.n	8021dba <cJSON_Delete+0x1a>
 8021de4:	200005d8 	.word	0x200005d8

08021de8 <parse_value>:
{
 8021de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021dec:	4605      	mov	r5, r0
 8021dee:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021df0:	460c      	mov	r4, r1
 8021df2:	b909      	cbnz	r1, 8021df8 <parse_value+0x10>
    return false;
 8021df4:	2000      	movs	r0, #0
 8021df6:	e023      	b.n	8021e40 <parse_value+0x58>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021df8:	680f      	ldr	r7, [r1, #0]
 8021dfa:	2f00      	cmp	r7, #0
 8021dfc:	d0fa      	beq.n	8021df4 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8021dfe:	688e      	ldr	r6, [r1, #8]
 8021e00:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8021e04:	f106 0904 	add.w	r9, r6, #4
 8021e08:	45c1      	cmp	r9, r8
 8021e0a:	d80b      	bhi.n	8021e24 <parse_value+0x3c>
 8021e0c:	4990      	ldr	r1, [pc, #576]	; (8022050 <parse_value+0x268>)
 8021e0e:	2204      	movs	r2, #4
 8021e10:	19b8      	adds	r0, r7, r6
 8021e12:	f001 fe25 	bl	8023a60 <strncmp>
 8021e16:	b928      	cbnz	r0, 8021e24 <parse_value+0x3c>
        item->type = cJSON_NULL;
 8021e18:	2304      	movs	r3, #4
 8021e1a:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
 8021e1c:	f8c4 9008 	str.w	r9, [r4, #8]
    return true;
 8021e20:	2001      	movs	r0, #1
 8021e22:	e00d      	b.n	8021e40 <parse_value+0x58>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8021e24:	f106 0a05 	add.w	sl, r6, #5
 8021e28:	45d0      	cmp	r8, sl
 8021e2a:	d30c      	bcc.n	8021e46 <parse_value+0x5e>
 8021e2c:	4989      	ldr	r1, [pc, #548]	; (8022054 <parse_value+0x26c>)
 8021e2e:	2205      	movs	r2, #5
 8021e30:	19b8      	adds	r0, r7, r6
 8021e32:	f001 fe15 	bl	8023a60 <strncmp>
 8021e36:	b930      	cbnz	r0, 8021e46 <parse_value+0x5e>
        item->type = cJSON_False;
 8021e38:	2001      	movs	r0, #1
 8021e3a:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
 8021e3c:	f8c4 a008 	str.w	sl, [r4, #8]
}
 8021e40:	b012      	add	sp, #72	; 0x48
 8021e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8021e46:	45c1      	cmp	r9, r8
 8021e48:	d80c      	bhi.n	8021e64 <parse_value+0x7c>
 8021e4a:	4983      	ldr	r1, [pc, #524]	; (8022058 <parse_value+0x270>)
 8021e4c:	2204      	movs	r2, #4
 8021e4e:	19b8      	adds	r0, r7, r6
 8021e50:	f001 fe06 	bl	8023a60 <strncmp>
 8021e54:	b930      	cbnz	r0, 8021e64 <parse_value+0x7c>
        item->type = cJSON_True;
 8021e56:	2302      	movs	r3, #2
        item->valueint = 1;
 8021e58:	2001      	movs	r0, #1
        item->type = cJSON_True;
 8021e5a:	60eb      	str	r3, [r5, #12]
        item->valueint = 1;
 8021e5c:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
 8021e5e:	f8c4 9008 	str.w	r9, [r4, #8]
        return true;
 8021e62:	e7ed      	b.n	8021e40 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8021e64:	4546      	cmp	r6, r8
 8021e66:	d2c5      	bcs.n	8021df4 <parse_value+0xc>
 8021e68:	5dbb      	ldrb	r3, [r7, r6]
 8021e6a:	2b22      	cmp	r3, #34	; 0x22
 8021e6c:	d104      	bne.n	8021e78 <parse_value+0x90>
        return parse_string(item, input_buffer);
 8021e6e:	4621      	mov	r1, r4
 8021e70:	4628      	mov	r0, r5
 8021e72:	f7ff fe4d 	bl	8021b10 <parse_string>
 8021e76:	e7e3      	b.n	8021e40 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8021e78:	2b2d      	cmp	r3, #45	; 0x2d
 8021e7a:	d003      	beq.n	8021e84 <parse_value+0x9c>
 8021e7c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021e80:	2a09      	cmp	r2, #9
 8021e82:	d868      	bhi.n	8021f56 <parse_value+0x16e>
    unsigned char *after_end = NULL;
 8021e84:	2600      	movs	r6, #0
 8021e86:	9601      	str	r6, [sp, #4]
    struct lconv *lconv = localeconv();
 8021e88:	f000 fad8 	bl	802243c <localeconv>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021e8c:	6822      	ldr	r2, [r4, #0]
 8021e8e:	2a00      	cmp	r2, #0
 8021e90:	d0b0      	beq.n	8021df4 <parse_value+0xc>
    return (unsigned char) lconv->decimal_point[0];
 8021e92:	6803      	ldr	r3, [r0, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021e94:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
    return (unsigned char) lconv->decimal_point[0];
 8021e98:	f893 c000 	ldrb.w	ip, [r3]
 8021e9c:	4402      	add	r2, r0
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021e9e:	4633      	mov	r3, r6
 8021ea0:	f10d 0808 	add.w	r8, sp, #8
 8021ea4:	18c1      	adds	r1, r0, r3
 8021ea6:	428f      	cmp	r7, r1
 8021ea8:	d91c      	bls.n	8021ee4 <parse_value+0xfc>
        switch (buffer_at_offset(input_buffer)[i])
 8021eaa:	f812 1b01 	ldrb.w	r1, [r2], #1
 8021eae:	2939      	cmp	r1, #57	; 0x39
 8021eb0:	d80f      	bhi.n	8021ed2 <parse_value+0xea>
 8021eb2:	292a      	cmp	r1, #42	; 0x2a
 8021eb4:	d916      	bls.n	8021ee4 <parse_value+0xfc>
 8021eb6:	f1a1 062b 	sub.w	r6, r1, #43	; 0x2b
 8021eba:	2e0e      	cmp	r6, #14
 8021ebc:	d812      	bhi.n	8021ee4 <parse_value+0xfc>
 8021ebe:	e8df f006 	tbb	[pc, r6]
 8021ec2:	110c      	.short	0x110c
 8021ec4:	0c11370c 	.word	0x0c11370c
 8021ec8:	0c0c0c0c 	.word	0x0c0c0c0c
 8021ecc:	0c0c0c0c 	.word	0x0c0c0c0c
 8021ed0:	0c          	.byte	0x0c
 8021ed1:	00          	.byte	0x00
 8021ed2:	f001 06df 	and.w	r6, r1, #223	; 0xdf
 8021ed6:	2e45      	cmp	r6, #69	; 0x45
 8021ed8:	d104      	bne.n	8021ee4 <parse_value+0xfc>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8021eda:	f808 1003 	strb.w	r1, [r8, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021ede:	3301      	adds	r3, #1
 8021ee0:	2b3f      	cmp	r3, #63	; 0x3f
 8021ee2:	d1df      	bne.n	8021ea4 <parse_value+0xbc>
    number_c_string[i] = '\0';
 8021ee4:	aa12      	add	r2, sp, #72	; 0x48
 8021ee6:	4413      	add	r3, r2
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021ee8:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
 8021eea:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021eec:	4640      	mov	r0, r8
    number_c_string[i] = '\0';
 8021eee:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021ef2:	f002 fc17 	bl	8024724 <strtod>
    if (number_c_string == after_end)
 8021ef6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021efa:	45c1      	cmp	r9, r8
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021efc:	ec57 6b10 	vmov	r6, r7, d0
    if (number_c_string == after_end)
 8021f00:	f43f af78 	beq.w	8021df4 <parse_value+0xc>
    item->valuedouble = number;
 8021f04:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
 8021f08:	a34f      	add	r3, pc, #316	; (adr r3, 8022048 <parse_value+0x260>)
 8021f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f0e:	ee10 0a10 	vmov	r0, s0
 8021f12:	4639      	mov	r1, r7
 8021f14:	f7de fe06 	bl	8000b24 <__aeabi_dcmpge>
 8021f18:	b168      	cbz	r0, 8021f36 <parse_value+0x14e>
        item->valueint = INT_MAX;
 8021f1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
 8021f1e:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
 8021f20:	2308      	movs	r3, #8
 8021f22:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8021f24:	68a3      	ldr	r3, [r4, #8]
 8021f26:	eba9 0808 	sub.w	r8, r9, r8
 8021f2a:	4443      	add	r3, r8
    input_buffer->offset++;
 8021f2c:	60a3      	str	r3, [r4, #8]
 8021f2e:	e777      	b.n	8021e20 <parse_value+0x38>
                number_c_string[i] = decimal_point;
 8021f30:	f808 c003 	strb.w	ip, [r8, r3]
                break;
 8021f34:	e7d3      	b.n	8021ede <parse_value+0xf6>
    else if (number <= INT_MIN)
 8021f36:	4b49      	ldr	r3, [pc, #292]	; (802205c <parse_value+0x274>)
 8021f38:	2200      	movs	r2, #0
 8021f3a:	4630      	mov	r0, r6
 8021f3c:	4639      	mov	r1, r7
 8021f3e:	f7de fde7 	bl	8000b10 <__aeabi_dcmple>
 8021f42:	b110      	cbz	r0, 8021f4a <parse_value+0x162>
        item->valueint = INT_MIN;
 8021f44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021f48:	e7e9      	b.n	8021f1e <parse_value+0x136>
        item->valueint = (int)number;
 8021f4a:	4630      	mov	r0, r6
 8021f4c:	4639      	mov	r1, r7
 8021f4e:	f7de fe13 	bl	8000b78 <__aeabi_d2iz>
 8021f52:	6168      	str	r0, [r5, #20]
 8021f54:	e7e4      	b.n	8021f20 <parse_value+0x138>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8021f56:	2b5b      	cmp	r3, #91	; 0x5b
 8021f58:	d150      	bne.n	8021ffc <parse_value+0x214>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8021f5a:	68e3      	ldr	r3, [r4, #12]
 8021f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021f60:	f4bf af48 	bcs.w	8021df4 <parse_value+0xc>
    input_buffer->depth++;
 8021f64:	3301      	adds	r3, #1
 8021f66:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
 8021f68:	5dbb      	ldrb	r3, [r7, r6]
 8021f6a:	2b5b      	cmp	r3, #91	; 0x5b
 8021f6c:	f47f af42 	bne.w	8021df4 <parse_value+0xc>
    input_buffer->offset++;
 8021f70:	3601      	adds	r6, #1
 8021f72:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 8021f74:	4620      	mov	r0, r4
 8021f76:	f7ff feb9 	bl	8021cec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8021f7a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021f7e:	4293      	cmp	r3, r2
 8021f80:	d25d      	bcs.n	802203e <parse_value+0x256>
 8021f82:	6822      	ldr	r2, [r4, #0]
 8021f84:	5cd2      	ldrb	r2, [r2, r3]
 8021f86:	2a5d      	cmp	r2, #93	; 0x5d
 8021f88:	d109      	bne.n	8021f9e <parse_value+0x1b6>
    cJSON *head = NULL; /* head of the linked list */
 8021f8a:	2700      	movs	r7, #0
    input_buffer->depth--;
 8021f8c:	68e3      	ldr	r3, [r4, #12]
 8021f8e:	3b01      	subs	r3, #1
 8021f90:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
 8021f92:	2320      	movs	r3, #32
    item->child = head;
 8021f94:	e9c5 7302 	strd	r7, r3, [r5, #8]
    input_buffer->offset++;
 8021f98:	68a3      	ldr	r3, [r4, #8]
 8021f9a:	3301      	adds	r3, #1
 8021f9c:	e7c6      	b.n	8021f2c <parse_value+0x144>
    input_buffer->offset--;
 8021f9e:	3b01      	subs	r3, #1
    cJSON *current_item = NULL;
 8021fa0:	2600      	movs	r6, #0
    input_buffer->offset--;
 8021fa2:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* head of the linked list */
 8021fa4:	4637      	mov	r7, r6
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8021fa6:	6920      	ldr	r0, [r4, #16]
 8021fa8:	f7ff feee 	bl	8021d88 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 8021fac:	46b0      	mov	r8, r6
 8021fae:	4606      	mov	r6, r0
 8021fb0:	2800      	cmp	r0, #0
 8021fb2:	f000 809a 	beq.w	80220ea <parse_value+0x302>
        if (head == NULL)
 8021fb6:	b1ff      	cbz	r7, 8021ff8 <parse_value+0x210>
            current_item->next = new_item;
 8021fb8:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
 8021fbc:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
 8021fc0:	68a3      	ldr	r3, [r4, #8]
 8021fc2:	3301      	adds	r3, #1
 8021fc4:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8021fc6:	4620      	mov	r0, r4
 8021fc8:	f7ff fe90 	bl	8021cec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8021fcc:	4621      	mov	r1, r4
 8021fce:	4630      	mov	r0, r6
 8021fd0:	f7ff ff0a 	bl	8021de8 <parse_value>
 8021fd4:	2800      	cmp	r0, #0
 8021fd6:	f000 808b 	beq.w	80220f0 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
 8021fda:	4620      	mov	r0, r4
 8021fdc:	f7ff fe86 	bl	8021cec <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8021fe0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021fe4:	4293      	cmp	r3, r2
 8021fe6:	f080 8083 	bcs.w	80220f0 <parse_value+0x308>
 8021fea:	6822      	ldr	r2, [r4, #0]
 8021fec:	5cd3      	ldrb	r3, [r2, r3]
 8021fee:	2b2c      	cmp	r3, #44	; 0x2c
 8021ff0:	d0d9      	beq.n	8021fa6 <parse_value+0x1be>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8021ff2:	2b5d      	cmp	r3, #93	; 0x5d
 8021ff4:	d17c      	bne.n	80220f0 <parse_value+0x308>
 8021ff6:	e7c9      	b.n	8021f8c <parse_value+0x1a4>
 8021ff8:	4607      	mov	r7, r0
 8021ffa:	e7e1      	b.n	8021fc0 <parse_value+0x1d8>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8021ffc:	2b7b      	cmp	r3, #123	; 0x7b
 8021ffe:	f47f aef9 	bne.w	8021df4 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8022002:	68e3      	ldr	r3, [r4, #12]
 8022004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8022008:	f4bf aef4 	bcs.w	8021df4 <parse_value+0xc>
    input_buffer->depth++;
 802200c:	3301      	adds	r3, #1
 802200e:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8022010:	5dbb      	ldrb	r3, [r7, r6]
 8022012:	2b7b      	cmp	r3, #123	; 0x7b
 8022014:	f47f aeee 	bne.w	8021df4 <parse_value+0xc>
    input_buffer->offset++;
 8022018:	3601      	adds	r6, #1
 802201a:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 802201c:	4620      	mov	r0, r4
 802201e:	f7ff fe65 	bl	8021cec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8022022:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8022026:	4293      	cmp	r3, r2
 8022028:	d209      	bcs.n	802203e <parse_value+0x256>
 802202a:	6822      	ldr	r2, [r4, #0]
 802202c:	5cd2      	ldrb	r2, [r2, r3]
 802202e:	2a7d      	cmp	r2, #125	; 0x7d
 8022030:	d116      	bne.n	8022060 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
 8022032:	2700      	movs	r7, #0
    input_buffer->depth--;
 8022034:	68e3      	ldr	r3, [r4, #12]
 8022036:	3b01      	subs	r3, #1
 8022038:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
 802203a:	2340      	movs	r3, #64	; 0x40
 802203c:	e7aa      	b.n	8021f94 <parse_value+0x1ac>
        input_buffer->offset--;
 802203e:	3b01      	subs	r3, #1
 8022040:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
 8022042:	e6d7      	b.n	8021df4 <parse_value+0xc>
 8022044:	f3af 8000 	nop.w
 8022048:	ffc00000 	.word	0xffc00000
 802204c:	41dfffff 	.word	0x41dfffff
 8022050:	080337de 	.word	0x080337de
 8022054:	0802f1bd 	.word	0x0802f1bd
 8022058:	0802f1b8 	.word	0x0802f1b8
 802205c:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
 8022060:	2600      	movs	r6, #0
    input_buffer->offset--;
 8022062:	3b01      	subs	r3, #1
 8022064:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* linked list head */
 8022066:	4637      	mov	r7, r6
        current_item->valuestring = NULL;
 8022068:	46b0      	mov	r8, r6
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 802206a:	6920      	ldr	r0, [r4, #16]
 802206c:	f7ff fe8c 	bl	8021d88 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 8022070:	46b1      	mov	r9, r6
 8022072:	4606      	mov	r6, r0
 8022074:	2800      	cmp	r0, #0
 8022076:	d038      	beq.n	80220ea <parse_value+0x302>
        if (head == NULL)
 8022078:	b3af      	cbz	r7, 80220e6 <parse_value+0x2fe>
            current_item->next = new_item;
 802207a:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
 802207e:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
 8022082:	68a3      	ldr	r3, [r4, #8]
 8022084:	3301      	adds	r3, #1
 8022086:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8022088:	4620      	mov	r0, r4
 802208a:	f7ff fe2f 	bl	8021cec <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 802208e:	4621      	mov	r1, r4
 8022090:	4630      	mov	r0, r6
 8022092:	f7ff fd3d 	bl	8021b10 <parse_string>
 8022096:	b358      	cbz	r0, 80220f0 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
 8022098:	4620      	mov	r0, r4
 802209a:	f7ff fe27 	bl	8021cec <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
 802209e:	6933      	ldr	r3, [r6, #16]
 80220a0:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80220a2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80220a6:	4293      	cmp	r3, r2
        current_item->valuestring = NULL;
 80220a8:	f8c6 8010 	str.w	r8, [r6, #16]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80220ac:	d220      	bcs.n	80220f0 <parse_value+0x308>
 80220ae:	6822      	ldr	r2, [r4, #0]
 80220b0:	5cd2      	ldrb	r2, [r2, r3]
 80220b2:	2a3a      	cmp	r2, #58	; 0x3a
 80220b4:	d11c      	bne.n	80220f0 <parse_value+0x308>
        input_buffer->offset++;
 80220b6:	3301      	adds	r3, #1
 80220b8:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 80220ba:	4620      	mov	r0, r4
 80220bc:	f7ff fe16 	bl	8021cec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80220c0:	4621      	mov	r1, r4
 80220c2:	4630      	mov	r0, r6
 80220c4:	f7ff fe90 	bl	8021de8 <parse_value>
 80220c8:	b190      	cbz	r0, 80220f0 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
 80220ca:	4620      	mov	r0, r4
 80220cc:	f7ff fe0e 	bl	8021cec <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80220d0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80220d4:	4293      	cmp	r3, r2
 80220d6:	d20b      	bcs.n	80220f0 <parse_value+0x308>
 80220d8:	6822      	ldr	r2, [r4, #0]
 80220da:	5cd3      	ldrb	r3, [r2, r3]
 80220dc:	2b2c      	cmp	r3, #44	; 0x2c
 80220de:	d0c4      	beq.n	802206a <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80220e0:	2b7d      	cmp	r3, #125	; 0x7d
 80220e2:	d105      	bne.n	80220f0 <parse_value+0x308>
 80220e4:	e7a6      	b.n	8022034 <parse_value+0x24c>
 80220e6:	4607      	mov	r7, r0
 80220e8:	e7cb      	b.n	8022082 <parse_value+0x29a>
    if (head != NULL)
 80220ea:	2f00      	cmp	r7, #0
 80220ec:	f43f ae82 	beq.w	8021df4 <parse_value+0xc>
        cJSON_Delete(head);
 80220f0:	4638      	mov	r0, r7
 80220f2:	f7ff fe55 	bl	8021da0 <cJSON_Delete>
 80220f6:	e67d      	b.n	8021df4 <parse_value+0xc>

080220f8 <cJSON_ParseWithOpts>:
{
 80220f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    global_error.json = NULL;
 80220fc:	4f29      	ldr	r7, [pc, #164]	; (80221a4 <cJSON_ParseWithOpts+0xac>)
{
 80220fe:	b088      	sub	sp, #32
 8022100:	4605      	mov	r5, r0
 8022102:	460e      	mov	r6, r1
 8022104:	4690      	mov	r8, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8022106:	2100      	movs	r1, #0
 8022108:	221c      	movs	r2, #28
 802210a:	a801      	add	r0, sp, #4
    global_error.json = NULL;
 802210c:	2400      	movs	r4, #0
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 802210e:	f000 f9df 	bl	80224d0 <memset>
    global_error.position = 0;
 8022112:	e9c7 4400 	strd	r4, r4, [r7]
    if (value == NULL)
 8022116:	2d00      	cmp	r5, #0
 8022118:	d037      	beq.n	802218a <cJSON_ParseWithOpts+0x92>
    buffer.length = strlen((const char*)value) + sizeof("");
 802211a:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
 802211c:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
 802211e:	f7de f861 	bl	80001e4 <strlen>
    buffer.hooks = global_hooks;
 8022122:	4b21      	ldr	r3, [pc, #132]	; (80221a8 <cJSON_ParseWithOpts+0xb0>)
    buffer.length = strlen((const char*)value) + sizeof("");
 8022124:	3001      	adds	r0, #1
    buffer.offset = 0;
 8022126:	e9cd 0402 	strd	r0, r4, [sp, #8]
    buffer.hooks = global_hooks;
 802212a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802212e:	ab08      	add	r3, sp, #32
 8022130:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
 8022134:	f7ff fe28 	bl	8021d88 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
 8022138:	4604      	mov	r4, r0
 802213a:	b1e8      	cbz	r0, 8022178 <cJSON_ParseWithOpts+0x80>
    if (!parse_value(item, buffer_skip_whitespace(&buffer)))
 802213c:	a801      	add	r0, sp, #4
 802213e:	f7ff fdd5 	bl	8021cec <buffer_skip_whitespace>
 8022142:	4601      	mov	r1, r0
 8022144:	4620      	mov	r0, r4
 8022146:	f7ff fe4f 	bl	8021de8 <parse_value>
 802214a:	b190      	cbz	r0, 8022172 <cJSON_ParseWithOpts+0x7a>
    if (require_null_terminated)
 802214c:	f1b8 0f00 	cmp.w	r8, #0
 8022150:	d104      	bne.n	802215c <cJSON_ParseWithOpts+0x64>
    if (return_parse_end)
 8022152:	b9e6      	cbnz	r6, 802218e <cJSON_ParseWithOpts+0x96>
}
 8022154:	4620      	mov	r0, r4
 8022156:	b008      	add	sp, #32
 8022158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        buffer_skip_whitespace(&buffer);
 802215c:	a801      	add	r0, sp, #4
 802215e:	f7ff fdc5 	bl	8021cec <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8022162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022166:	4293      	cmp	r3, r2
 8022168:	d203      	bcs.n	8022172 <cJSON_ParseWithOpts+0x7a>
 802216a:	9a01      	ldr	r2, [sp, #4]
 802216c:	5cd3      	ldrb	r3, [r2, r3]
 802216e:	2b00      	cmp	r3, #0
 8022170:	d0ef      	beq.n	8022152 <cJSON_ParseWithOpts+0x5a>
        cJSON_Delete(item);
 8022172:	4620      	mov	r0, r4
 8022174:	f7ff fe14 	bl	8021da0 <cJSON_Delete>
        if (buffer.offset < buffer.length)
 8022178:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
 802217c:	4282      	cmp	r2, r0
 802217e:	d30b      	bcc.n	8022198 <cJSON_ParseWithOpts+0xa0>
        else if (buffer.length > 0)
 8022180:	b100      	cbz	r0, 8022184 <cJSON_ParseWithOpts+0x8c>
            local_error.position = buffer.length - 1;
 8022182:	3801      	subs	r0, #1
        if (return_parse_end != NULL)
 8022184:	b156      	cbz	r6, 802219c <cJSON_ParseWithOpts+0xa4>
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8022186:	4428      	add	r0, r5
 8022188:	6030      	str	r0, [r6, #0]
    return NULL;
 802218a:	2400      	movs	r4, #0
 802218c:	e7e2      	b.n	8022154 <cJSON_ParseWithOpts+0x5c>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 802218e:	9b01      	ldr	r3, [sp, #4]
 8022190:	9a03      	ldr	r2, [sp, #12]
 8022192:	4413      	add	r3, r2
 8022194:	6033      	str	r3, [r6, #0]
 8022196:	e7dd      	b.n	8022154 <cJSON_ParseWithOpts+0x5c>
 8022198:	4610      	mov	r0, r2
 802219a:	e7f3      	b.n	8022184 <cJSON_ParseWithOpts+0x8c>
            global_error = local_error;
 802219c:	e9c7 5000 	strd	r5, r0, [r7]
 80221a0:	e7f3      	b.n	802218a <cJSON_ParseWithOpts+0x92>
 80221a2:	bf00      	nop
 80221a4:	20001130 	.word	0x20001130
 80221a8:	200005d8 	.word	0x200005d8

080221ac <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
 80221ac:	2200      	movs	r2, #0
 80221ae:	4611      	mov	r1, r2
 80221b0:	f7ff bfa2 	b.w	80220f8 <cJSON_ParseWithOpts>

080221b4 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
    return get_object_item(object, string, true);
 80221b4:	2201      	movs	r2, #1
 80221b6:	f7ff bdaf 	b.w	8021d18 <get_object_item>

080221ba <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
 80221ba:	b118      	cbz	r0, 80221c4 <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
 80221bc:	7b00      	ldrb	r0, [r0, #12]
 80221be:	1e83      	subs	r3, r0, #2
 80221c0:	4258      	negs	r0, r3
 80221c2:	4158      	adcs	r0, r3
}
 80221c4:	4770      	bx	lr

080221c6 <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
 80221c6:	b120      	cbz	r0, 80221d2 <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 80221c8:	68c0      	ldr	r0, [r0, #12]
 80221ca:	f010 0003 	ands.w	r0, r0, #3
 80221ce:	bf18      	it	ne
 80221d0:	2001      	movne	r0, #1
}
 80221d2:	4770      	bx	lr

080221d4 <cJSON_IsNumber>:
    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
 80221d4:	b120      	cbz	r0, 80221e0 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
 80221d6:	7b00      	ldrb	r0, [r0, #12]
 80221d8:	f1a0 0308 	sub.w	r3, r0, #8
 80221dc:	4258      	negs	r0, r3
 80221de:	4158      	adcs	r0, r3
}
 80221e0:	4770      	bx	lr

080221e2 <atoi>:
 80221e2:	220a      	movs	r2, #10
 80221e4:	2100      	movs	r1, #0
 80221e6:	f002 bb8b 	b.w	8024900 <strtol>
	...

080221ec <calloc>:
 80221ec:	4b02      	ldr	r3, [pc, #8]	; (80221f8 <calloc+0xc>)
 80221ee:	460a      	mov	r2, r1
 80221f0:	4601      	mov	r1, r0
 80221f2:	6818      	ldr	r0, [r3, #0]
 80221f4:	f000 bbf2 	b.w	80229dc <_calloc_r>
 80221f8:	200005e4 	.word	0x200005e4

080221fc <__errno>:
 80221fc:	4b01      	ldr	r3, [pc, #4]	; (8022204 <__errno+0x8>)
 80221fe:	6818      	ldr	r0, [r3, #0]
 8022200:	4770      	bx	lr
 8022202:	bf00      	nop
 8022204:	200005e4 	.word	0x200005e4

08022208 <fiprintf>:
 8022208:	b40e      	push	{r1, r2, r3}
 802220a:	b503      	push	{r0, r1, lr}
 802220c:	4601      	mov	r1, r0
 802220e:	ab03      	add	r3, sp, #12
 8022210:	4805      	ldr	r0, [pc, #20]	; (8022228 <fiprintf+0x20>)
 8022212:	f853 2b04 	ldr.w	r2, [r3], #4
 8022216:	6800      	ldr	r0, [r0, #0]
 8022218:	9301      	str	r3, [sp, #4]
 802221a:	f000 fcc3 	bl	8022ba4 <_vfiprintf_r>
 802221e:	b002      	add	sp, #8
 8022220:	f85d eb04 	ldr.w	lr, [sp], #4
 8022224:	b003      	add	sp, #12
 8022226:	4770      	bx	lr
 8022228:	200005e4 	.word	0x200005e4

0802222c <getchar>:
 802222c:	4b07      	ldr	r3, [pc, #28]	; (802224c <getchar+0x20>)
 802222e:	b510      	push	{r4, lr}
 8022230:	681c      	ldr	r4, [r3, #0]
 8022232:	b124      	cbz	r4, 802223e <getchar+0x12>
 8022234:	69a3      	ldr	r3, [r4, #24]
 8022236:	b913      	cbnz	r3, 802223e <getchar+0x12>
 8022238:	4620      	mov	r0, r4
 802223a:	f003 fe95 	bl	8025f68 <__sinit>
 802223e:	6861      	ldr	r1, [r4, #4]
 8022240:	4620      	mov	r0, r4
 8022242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022246:	f004 bab9 	b.w	80267bc <_getc_r>
 802224a:	bf00      	nop
 802224c:	200005e4 	.word	0x200005e4

08022250 <gmtime>:
 8022250:	b538      	push	{r3, r4, r5, lr}
 8022252:	4b0b      	ldr	r3, [pc, #44]	; (8022280 <gmtime+0x30>)
 8022254:	681d      	ldr	r5, [r3, #0]
 8022256:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8022258:	4604      	mov	r4, r0
 802225a:	b953      	cbnz	r3, 8022272 <gmtime+0x22>
 802225c:	2024      	movs	r0, #36	; 0x24
 802225e:	f000 f8f1 	bl	8022444 <malloc>
 8022262:	4602      	mov	r2, r0
 8022264:	63e8      	str	r0, [r5, #60]	; 0x3c
 8022266:	b920      	cbnz	r0, 8022272 <gmtime+0x22>
 8022268:	4b06      	ldr	r3, [pc, #24]	; (8022284 <gmtime+0x34>)
 802226a:	4807      	ldr	r0, [pc, #28]	; (8022288 <gmtime+0x38>)
 802226c:	2139      	movs	r1, #57	; 0x39
 802226e:	f002 fe93 	bl	8024f98 <__assert_func>
 8022272:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8022274:	4620      	mov	r0, r4
 8022276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802227a:	f000 b807 	b.w	802228c <gmtime_r>
 802227e:	bf00      	nop
 8022280:	200005e4 	.word	0x200005e4
 8022284:	080338ff 	.word	0x080338ff
 8022288:	08033916 	.word	0x08033916

0802228c <gmtime_r>:
 802228c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022290:	e9d0 6700 	ldrd	r6, r7, [r0]
 8022294:	460c      	mov	r4, r1
 8022296:	4a51      	ldr	r2, [pc, #324]	; (80223dc <gmtime_r+0x150>)
 8022298:	2300      	movs	r3, #0
 802229a:	4630      	mov	r0, r6
 802229c:	4639      	mov	r1, r7
 802229e:	f7de fcb3 	bl	8000c08 <__aeabi_ldivmod>
 80222a2:	4639      	mov	r1, r7
 80222a4:	4605      	mov	r5, r0
 80222a6:	4a4d      	ldr	r2, [pc, #308]	; (80223dc <gmtime_r+0x150>)
 80222a8:	4630      	mov	r0, r6
 80222aa:	2300      	movs	r3, #0
 80222ac:	f7de fcac 	bl	8000c08 <__aeabi_ldivmod>
 80222b0:	2a00      	cmp	r2, #0
 80222b2:	bfbc      	itt	lt
 80222b4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80222b8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80222bc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80222c0:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80222c4:	fbb2 f3f1 	udiv	r3, r2, r1
 80222c8:	fb01 2213 	mls	r2, r1, r3, r2
 80222cc:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80222d0:	bfac      	ite	ge
 80222d2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80222d6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80222da:	60a3      	str	r3, [r4, #8]
 80222dc:	fbb2 f3f1 	udiv	r3, r2, r1
 80222e0:	fb01 2213 	mls	r2, r1, r3, r2
 80222e4:	6063      	str	r3, [r4, #4]
 80222e6:	6022      	str	r2, [r4, #0]
 80222e8:	1cc3      	adds	r3, r0, #3
 80222ea:	2207      	movs	r2, #7
 80222ec:	fb93 f2f2 	sdiv	r2, r3, r2
 80222f0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80222f4:	1a9b      	subs	r3, r3, r2
 80222f6:	bf48      	it	mi
 80222f8:	3307      	addmi	r3, #7
 80222fa:	2800      	cmp	r0, #0
 80222fc:	61a3      	str	r3, [r4, #24]
 80222fe:	bfb8      	it	lt
 8022300:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8022304:	4936      	ldr	r1, [pc, #216]	; (80223e0 <gmtime_r+0x154>)
 8022306:	bfae      	itee	ge
 8022308:	fb90 f1f1 	sdivge	r1, r0, r1
 802230c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022310:	fb93 f1f1 	sdivlt	r1, r3, r1
 8022314:	4b33      	ldr	r3, [pc, #204]	; (80223e4 <gmtime_r+0x158>)
 8022316:	fb03 0001 	mla	r0, r3, r1, r0
 802231a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802231e:	fbb0 f2f2 	udiv	r2, r0, r2
 8022322:	4402      	add	r2, r0
 8022324:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8022328:	fbb0 f3fc 	udiv	r3, r0, ip
 802232c:	1ad2      	subs	r2, r2, r3
 802232e:	f240 176d 	movw	r7, #365	; 0x16d
 8022332:	4b2d      	ldr	r3, [pc, #180]	; (80223e8 <gmtime_r+0x15c>)
 8022334:	fbb0 f3f3 	udiv	r3, r0, r3
 8022338:	2664      	movs	r6, #100	; 0x64
 802233a:	1ad3      	subs	r3, r2, r3
 802233c:	fbb3 f5f7 	udiv	r5, r3, r7
 8022340:	fbb3 f3fc 	udiv	r3, r3, ip
 8022344:	fbb5 f2f6 	udiv	r2, r5, r6
 8022348:	1ad3      	subs	r3, r2, r3
 802234a:	4403      	add	r3, r0
 802234c:	fb07 3315 	mls	r3, r7, r5, r3
 8022350:	2099      	movs	r0, #153	; 0x99
 8022352:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8022356:	f10c 0c02 	add.w	ip, ip, #2
 802235a:	f103 0e01 	add.w	lr, r3, #1
 802235e:	fbbc f7f0 	udiv	r7, ip, r0
 8022362:	4378      	muls	r0, r7
 8022364:	3002      	adds	r0, #2
 8022366:	f04f 0805 	mov.w	r8, #5
 802236a:	fbb0 f0f8 	udiv	r0, r0, r8
 802236e:	ebae 0000 	sub.w	r0, lr, r0
 8022372:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8022376:	45f4      	cmp	ip, lr
 8022378:	bf94      	ite	ls
 802237a:	f04f 0c02 	movls.w	ip, #2
 802237e:	f06f 0c09 	mvnhi.w	ip, #9
 8022382:	4467      	add	r7, ip
 8022384:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8022388:	fb0c 5101 	mla	r1, ip, r1, r5
 802238c:	2f01      	cmp	r7, #1
 802238e:	bf98      	it	ls
 8022390:	3101      	addls	r1, #1
 8022392:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8022396:	d30c      	bcc.n	80223b2 <gmtime_r+0x126>
 8022398:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 802239c:	61e3      	str	r3, [r4, #28]
 802239e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80223a2:	2300      	movs	r3, #0
 80223a4:	60e0      	str	r0, [r4, #12]
 80223a6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80223aa:	6223      	str	r3, [r4, #32]
 80223ac:	4620      	mov	r0, r4
 80223ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80223b2:	f015 0f03 	tst.w	r5, #3
 80223b6:	d102      	bne.n	80223be <gmtime_r+0x132>
 80223b8:	fb06 5212 	mls	r2, r6, r2, r5
 80223bc:	b95a      	cbnz	r2, 80223d6 <gmtime_r+0x14a>
 80223be:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80223c2:	fbb5 f2f6 	udiv	r2, r5, r6
 80223c6:	fb06 5212 	mls	r2, r6, r2, r5
 80223ca:	fab2 f282 	clz	r2, r2
 80223ce:	0952      	lsrs	r2, r2, #5
 80223d0:	333b      	adds	r3, #59	; 0x3b
 80223d2:	4413      	add	r3, r2
 80223d4:	e7e2      	b.n	802239c <gmtime_r+0x110>
 80223d6:	2201      	movs	r2, #1
 80223d8:	e7fa      	b.n	80223d0 <gmtime_r+0x144>
 80223da:	bf00      	nop
 80223dc:	00015180 	.word	0x00015180
 80223e0:	00023ab1 	.word	0x00023ab1
 80223e4:	fffdc54f 	.word	0xfffdc54f
 80223e8:	00023ab0 	.word	0x00023ab0

080223ec <__libc_init_array>:
 80223ec:	b570      	push	{r4, r5, r6, lr}
 80223ee:	4d0d      	ldr	r5, [pc, #52]	; (8022424 <__libc_init_array+0x38>)
 80223f0:	4c0d      	ldr	r4, [pc, #52]	; (8022428 <__libc_init_array+0x3c>)
 80223f2:	1b64      	subs	r4, r4, r5
 80223f4:	10a4      	asrs	r4, r4, #2
 80223f6:	2600      	movs	r6, #0
 80223f8:	42a6      	cmp	r6, r4
 80223fa:	d109      	bne.n	8022410 <__libc_init_array+0x24>
 80223fc:	4d0b      	ldr	r5, [pc, #44]	; (802242c <__libc_init_array+0x40>)
 80223fe:	4c0c      	ldr	r4, [pc, #48]	; (8022430 <__libc_init_array+0x44>)
 8022400:	f005 ff04 	bl	802820c <_init>
 8022404:	1b64      	subs	r4, r4, r5
 8022406:	10a4      	asrs	r4, r4, #2
 8022408:	2600      	movs	r6, #0
 802240a:	42a6      	cmp	r6, r4
 802240c:	d105      	bne.n	802241a <__libc_init_array+0x2e>
 802240e:	bd70      	pop	{r4, r5, r6, pc}
 8022410:	f855 3b04 	ldr.w	r3, [r5], #4
 8022414:	4798      	blx	r3
 8022416:	3601      	adds	r6, #1
 8022418:	e7ee      	b.n	80223f8 <__libc_init_array+0xc>
 802241a:	f855 3b04 	ldr.w	r3, [r5], #4
 802241e:	4798      	blx	r3
 8022420:	3601      	adds	r6, #1
 8022422:	e7f2      	b.n	802240a <__libc_init_array+0x1e>
 8022424:	08033ee8 	.word	0x08033ee8
 8022428:	08033ee8 	.word	0x08033ee8
 802242c:	08033ee8 	.word	0x08033ee8
 8022430:	08033eec 	.word	0x08033eec

08022434 <_localeconv_r>:
 8022434:	4800      	ldr	r0, [pc, #0]	; (8022438 <_localeconv_r+0x4>)
 8022436:	4770      	bx	lr
 8022438:	2000079c 	.word	0x2000079c

0802243c <localeconv>:
 802243c:	4800      	ldr	r0, [pc, #0]	; (8022440 <localeconv+0x4>)
 802243e:	4770      	bx	lr
 8022440:	2000079c 	.word	0x2000079c

08022444 <malloc>:
 8022444:	4b02      	ldr	r3, [pc, #8]	; (8022450 <malloc+0xc>)
 8022446:	4601      	mov	r1, r0
 8022448:	6818      	ldr	r0, [r3, #0]
 802244a:	f000 bb27 	b.w	8022a9c <_malloc_r>
 802244e:	bf00      	nop
 8022450:	200005e4 	.word	0x200005e4

08022454 <free>:
 8022454:	4b02      	ldr	r3, [pc, #8]	; (8022460 <free+0xc>)
 8022456:	4601      	mov	r1, r0
 8022458:	6818      	ldr	r0, [r3, #0]
 802245a:	f000 bacf 	b.w	80229fc <_free_r>
 802245e:	bf00      	nop
 8022460:	200005e4 	.word	0x200005e4

08022464 <memcmp>:
 8022464:	b530      	push	{r4, r5, lr}
 8022466:	3901      	subs	r1, #1
 8022468:	2400      	movs	r4, #0
 802246a:	42a2      	cmp	r2, r4
 802246c:	d101      	bne.n	8022472 <memcmp+0xe>
 802246e:	2000      	movs	r0, #0
 8022470:	e005      	b.n	802247e <memcmp+0x1a>
 8022472:	5d03      	ldrb	r3, [r0, r4]
 8022474:	3401      	adds	r4, #1
 8022476:	5d0d      	ldrb	r5, [r1, r4]
 8022478:	42ab      	cmp	r3, r5
 802247a:	d0f6      	beq.n	802246a <memcmp+0x6>
 802247c:	1b58      	subs	r0, r3, r5
 802247e:	bd30      	pop	{r4, r5, pc}

08022480 <memcpy>:
 8022480:	440a      	add	r2, r1
 8022482:	4291      	cmp	r1, r2
 8022484:	f100 33ff 	add.w	r3, r0, #4294967295
 8022488:	d100      	bne.n	802248c <memcpy+0xc>
 802248a:	4770      	bx	lr
 802248c:	b510      	push	{r4, lr}
 802248e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022492:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022496:	4291      	cmp	r1, r2
 8022498:	d1f9      	bne.n	802248e <memcpy+0xe>
 802249a:	bd10      	pop	{r4, pc}

0802249c <memmove>:
 802249c:	4288      	cmp	r0, r1
 802249e:	b510      	push	{r4, lr}
 80224a0:	eb01 0402 	add.w	r4, r1, r2
 80224a4:	d902      	bls.n	80224ac <memmove+0x10>
 80224a6:	4284      	cmp	r4, r0
 80224a8:	4623      	mov	r3, r4
 80224aa:	d807      	bhi.n	80224bc <memmove+0x20>
 80224ac:	1e43      	subs	r3, r0, #1
 80224ae:	42a1      	cmp	r1, r4
 80224b0:	d008      	beq.n	80224c4 <memmove+0x28>
 80224b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80224b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80224ba:	e7f8      	b.n	80224ae <memmove+0x12>
 80224bc:	4402      	add	r2, r0
 80224be:	4601      	mov	r1, r0
 80224c0:	428a      	cmp	r2, r1
 80224c2:	d100      	bne.n	80224c6 <memmove+0x2a>
 80224c4:	bd10      	pop	{r4, pc}
 80224c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80224ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80224ce:	e7f7      	b.n	80224c0 <memmove+0x24>

080224d0 <memset>:
 80224d0:	4402      	add	r2, r0
 80224d2:	4603      	mov	r3, r0
 80224d4:	4293      	cmp	r3, r2
 80224d6:	d100      	bne.n	80224da <memset+0xa>
 80224d8:	4770      	bx	lr
 80224da:	f803 1b01 	strb.w	r1, [r3], #1
 80224de:	e7f9      	b.n	80224d4 <memset+0x4>

080224e0 <validate_structure>:
 80224e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80224e2:	6801      	ldr	r1, [r0, #0]
 80224e4:	293b      	cmp	r1, #59	; 0x3b
 80224e6:	4604      	mov	r4, r0
 80224e8:	d911      	bls.n	802250e <validate_structure+0x2e>
 80224ea:	223c      	movs	r2, #60	; 0x3c
 80224ec:	4668      	mov	r0, sp
 80224ee:	f002 fd81 	bl	8024ff4 <div>
 80224f2:	9a01      	ldr	r2, [sp, #4]
 80224f4:	6863      	ldr	r3, [r4, #4]
 80224f6:	9900      	ldr	r1, [sp, #0]
 80224f8:	2a00      	cmp	r2, #0
 80224fa:	440b      	add	r3, r1
 80224fc:	6063      	str	r3, [r4, #4]
 80224fe:	bfbb      	ittet	lt
 8022500:	323c      	addlt	r2, #60	; 0x3c
 8022502:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022506:	6022      	strge	r2, [r4, #0]
 8022508:	6022      	strlt	r2, [r4, #0]
 802250a:	bfb8      	it	lt
 802250c:	6063      	strlt	r3, [r4, #4]
 802250e:	6861      	ldr	r1, [r4, #4]
 8022510:	293b      	cmp	r1, #59	; 0x3b
 8022512:	d911      	bls.n	8022538 <validate_structure+0x58>
 8022514:	223c      	movs	r2, #60	; 0x3c
 8022516:	4668      	mov	r0, sp
 8022518:	f002 fd6c 	bl	8024ff4 <div>
 802251c:	9a01      	ldr	r2, [sp, #4]
 802251e:	68a3      	ldr	r3, [r4, #8]
 8022520:	9900      	ldr	r1, [sp, #0]
 8022522:	2a00      	cmp	r2, #0
 8022524:	440b      	add	r3, r1
 8022526:	60a3      	str	r3, [r4, #8]
 8022528:	bfbb      	ittet	lt
 802252a:	323c      	addlt	r2, #60	; 0x3c
 802252c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022530:	6062      	strge	r2, [r4, #4]
 8022532:	6062      	strlt	r2, [r4, #4]
 8022534:	bfb8      	it	lt
 8022536:	60a3      	strlt	r3, [r4, #8]
 8022538:	68a1      	ldr	r1, [r4, #8]
 802253a:	2917      	cmp	r1, #23
 802253c:	d911      	bls.n	8022562 <validate_structure+0x82>
 802253e:	2218      	movs	r2, #24
 8022540:	4668      	mov	r0, sp
 8022542:	f002 fd57 	bl	8024ff4 <div>
 8022546:	9a01      	ldr	r2, [sp, #4]
 8022548:	68e3      	ldr	r3, [r4, #12]
 802254a:	9900      	ldr	r1, [sp, #0]
 802254c:	2a00      	cmp	r2, #0
 802254e:	440b      	add	r3, r1
 8022550:	60e3      	str	r3, [r4, #12]
 8022552:	bfbb      	ittet	lt
 8022554:	3218      	addlt	r2, #24
 8022556:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802255a:	60a2      	strge	r2, [r4, #8]
 802255c:	60a2      	strlt	r2, [r4, #8]
 802255e:	bfb8      	it	lt
 8022560:	60e3      	strlt	r3, [r4, #12]
 8022562:	6921      	ldr	r1, [r4, #16]
 8022564:	290b      	cmp	r1, #11
 8022566:	d911      	bls.n	802258c <validate_structure+0xac>
 8022568:	220c      	movs	r2, #12
 802256a:	4668      	mov	r0, sp
 802256c:	f002 fd42 	bl	8024ff4 <div>
 8022570:	9a01      	ldr	r2, [sp, #4]
 8022572:	6963      	ldr	r3, [r4, #20]
 8022574:	9900      	ldr	r1, [sp, #0]
 8022576:	2a00      	cmp	r2, #0
 8022578:	440b      	add	r3, r1
 802257a:	6163      	str	r3, [r4, #20]
 802257c:	bfbb      	ittet	lt
 802257e:	320c      	addlt	r2, #12
 8022580:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022584:	6122      	strge	r2, [r4, #16]
 8022586:	6122      	strlt	r2, [r4, #16]
 8022588:	bfb8      	it	lt
 802258a:	6163      	strlt	r3, [r4, #20]
 802258c:	6963      	ldr	r3, [r4, #20]
 802258e:	0799      	lsls	r1, r3, #30
 8022590:	d120      	bne.n	80225d4 <validate_structure+0xf4>
 8022592:	2164      	movs	r1, #100	; 0x64
 8022594:	fb93 f2f1 	sdiv	r2, r3, r1
 8022598:	fb01 3212 	mls	r2, r1, r2, r3
 802259c:	b9e2      	cbnz	r2, 80225d8 <validate_structure+0xf8>
 802259e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80225a2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80225a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80225aa:	fb01 3312 	mls	r3, r1, r2, r3
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	bf14      	ite	ne
 80225b2:	231c      	movne	r3, #28
 80225b4:	231d      	moveq	r3, #29
 80225b6:	68e2      	ldr	r2, [r4, #12]
 80225b8:	2a00      	cmp	r2, #0
 80225ba:	dc0f      	bgt.n	80225dc <validate_structure+0xfc>
 80225bc:	4f33      	ldr	r7, [pc, #204]	; (802268c <validate_structure+0x1ac>)
 80225be:	260b      	movs	r6, #11
 80225c0:	2064      	movs	r0, #100	; 0x64
 80225c2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80225c6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80225ca:	f1bc 0f00 	cmp.w	ip, #0
 80225ce:	dd31      	ble.n	8022634 <validate_structure+0x154>
 80225d0:	b003      	add	sp, #12
 80225d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225d4:	231c      	movs	r3, #28
 80225d6:	e7ee      	b.n	80225b6 <validate_structure+0xd6>
 80225d8:	231d      	movs	r3, #29
 80225da:	e7ec      	b.n	80225b6 <validate_structure+0xd6>
 80225dc:	4f2b      	ldr	r7, [pc, #172]	; (802268c <validate_structure+0x1ac>)
 80225de:	f04f 0c00 	mov.w	ip, #0
 80225e2:	2564      	movs	r5, #100	; 0x64
 80225e4:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80225e8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80225ec:	2a01      	cmp	r2, #1
 80225ee:	bf14      	ite	ne
 80225f0:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80225f4:	4618      	moveq	r0, r3
 80225f6:	4281      	cmp	r1, r0
 80225f8:	ddea      	ble.n	80225d0 <validate_structure+0xf0>
 80225fa:	3201      	adds	r2, #1
 80225fc:	1a09      	subs	r1, r1, r0
 80225fe:	2a0c      	cmp	r2, #12
 8022600:	60e1      	str	r1, [r4, #12]
 8022602:	6122      	str	r2, [r4, #16]
 8022604:	d1f0      	bne.n	80225e8 <validate_structure+0x108>
 8022606:	6963      	ldr	r3, [r4, #20]
 8022608:	1c5a      	adds	r2, r3, #1
 802260a:	0791      	lsls	r1, r2, #30
 802260c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8022610:	d137      	bne.n	8022682 <validate_structure+0x1a2>
 8022612:	fb92 f1f5 	sdiv	r1, r2, r5
 8022616:	fb05 2211 	mls	r2, r5, r1, r2
 802261a:	2a00      	cmp	r2, #0
 802261c:	d133      	bne.n	8022686 <validate_structure+0x1a6>
 802261e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8022622:	fb93 f2f6 	sdiv	r2, r3, r6
 8022626:	fb06 3312 	mls	r3, r6, r2, r3
 802262a:	2b00      	cmp	r3, #0
 802262c:	bf14      	ite	ne
 802262e:	231c      	movne	r3, #28
 8022630:	231d      	moveq	r3, #29
 8022632:	e7d9      	b.n	80225e8 <validate_structure+0x108>
 8022634:	6921      	ldr	r1, [r4, #16]
 8022636:	3901      	subs	r1, #1
 8022638:	6121      	str	r1, [r4, #16]
 802263a:	3101      	adds	r1, #1
 802263c:	d114      	bne.n	8022668 <validate_structure+0x188>
 802263e:	6963      	ldr	r3, [r4, #20]
 8022640:	1e59      	subs	r1, r3, #1
 8022642:	078a      	lsls	r2, r1, #30
 8022644:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8022648:	d117      	bne.n	802267a <validate_structure+0x19a>
 802264a:	fb91 f2f0 	sdiv	r2, r1, r0
 802264e:	fb00 1112 	mls	r1, r0, r2, r1
 8022652:	b9a1      	cbnz	r1, 802267e <validate_structure+0x19e>
 8022654:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8022658:	fb93 f2f5 	sdiv	r2, r3, r5
 802265c:	fb05 3312 	mls	r3, r5, r2, r3
 8022660:	2b00      	cmp	r3, #0
 8022662:	bf14      	ite	ne
 8022664:	231c      	movne	r3, #28
 8022666:	231d      	moveq	r3, #29
 8022668:	6922      	ldr	r2, [r4, #16]
 802266a:	2a01      	cmp	r2, #1
 802266c:	bf14      	ite	ne
 802266e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8022672:	461a      	moveq	r2, r3
 8022674:	4462      	add	r2, ip
 8022676:	60e2      	str	r2, [r4, #12]
 8022678:	e7a5      	b.n	80225c6 <validate_structure+0xe6>
 802267a:	231c      	movs	r3, #28
 802267c:	e7f4      	b.n	8022668 <validate_structure+0x188>
 802267e:	231d      	movs	r3, #29
 8022680:	e7f2      	b.n	8022668 <validate_structure+0x188>
 8022682:	231c      	movs	r3, #28
 8022684:	e7b0      	b.n	80225e8 <validate_structure+0x108>
 8022686:	231d      	movs	r3, #29
 8022688:	e7ae      	b.n	80225e8 <validate_structure+0x108>
 802268a:	bf00      	nop
 802268c:	0803397c 	.word	0x0803397c

08022690 <mktime>:
 8022690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022694:	b08b      	sub	sp, #44	; 0x2c
 8022696:	4605      	mov	r5, r0
 8022698:	f004 f912 	bl	80268c0 <__gettzinfo>
 802269c:	4607      	mov	r7, r0
 802269e:	4628      	mov	r0, r5
 80226a0:	f7ff ff1e 	bl	80224e0 <validate_structure>
 80226a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80226a8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80226ac:	68a8      	ldr	r0, [r5, #8]
 80226ae:	696e      	ldr	r6, [r5, #20]
 80226b0:	fb0a 2303 	mla	r3, sl, r3, r2
 80226b4:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80226b8:	fb0a 3a00 	mla	sl, sl, r0, r3
 80226bc:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80226c0:	4ac3      	ldr	r2, [pc, #780]	; (80229d0 <mktime+0x340>)
 80226c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80226c6:	3c01      	subs	r4, #1
 80226c8:	2b01      	cmp	r3, #1
 80226ca:	4414      	add	r4, r2
 80226cc:	dd11      	ble.n	80226f2 <mktime+0x62>
 80226ce:	07b1      	lsls	r1, r6, #30
 80226d0:	d10f      	bne.n	80226f2 <mktime+0x62>
 80226d2:	2264      	movs	r2, #100	; 0x64
 80226d4:	fb96 f3f2 	sdiv	r3, r6, r2
 80226d8:	fb02 6313 	mls	r3, r2, r3, r6
 80226dc:	b943      	cbnz	r3, 80226f0 <mktime+0x60>
 80226de:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80226e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80226e6:	fb91 f3f2 	sdiv	r3, r1, r2
 80226ea:	fb02 1313 	mls	r3, r2, r3, r1
 80226ee:	b903      	cbnz	r3, 80226f2 <mktime+0x62>
 80226f0:	3401      	adds	r4, #1
 80226f2:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80226f6:	3310      	adds	r3, #16
 80226f8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80226fc:	4293      	cmp	r3, r2
 80226fe:	61ec      	str	r4, [r5, #28]
 8022700:	f200 8161 	bhi.w	80229c6 <mktime+0x336>
 8022704:	2e46      	cmp	r6, #70	; 0x46
 8022706:	dd77      	ble.n	80227f8 <mktime+0x168>
 8022708:	2346      	movs	r3, #70	; 0x46
 802270a:	f240 1e6d 	movw	lr, #365	; 0x16d
 802270e:	2164      	movs	r1, #100	; 0x64
 8022710:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8022714:	079a      	lsls	r2, r3, #30
 8022716:	d169      	bne.n	80227ec <mktime+0x15c>
 8022718:	fb93 f2f1 	sdiv	r2, r3, r1
 802271c:	fb01 3212 	mls	r2, r1, r2, r3
 8022720:	2a00      	cmp	r2, #0
 8022722:	d166      	bne.n	80227f2 <mktime+0x162>
 8022724:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8022728:	fb9c f2f0 	sdiv	r2, ip, r0
 802272c:	fb00 c212 	mls	r2, r0, r2, ip
 8022730:	2a00      	cmp	r2, #0
 8022732:	bf14      	ite	ne
 8022734:	4672      	movne	r2, lr
 8022736:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802273a:	3301      	adds	r3, #1
 802273c:	429e      	cmp	r6, r3
 802273e:	4414      	add	r4, r2
 8022740:	d1e8      	bne.n	8022714 <mktime+0x84>
 8022742:	4ba4      	ldr	r3, [pc, #656]	; (80229d4 <mktime+0x344>)
 8022744:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8022748:	fbc3 ab04 	smlal	sl, fp, r3, r4
 802274c:	f002 f98a 	bl	8024a64 <__tz_lock>
 8022750:	f002 f994 	bl	8024a7c <_tzset_unlocked>
 8022754:	4ba0      	ldr	r3, [pc, #640]	; (80229d8 <mktime+0x348>)
 8022756:	f8d3 9000 	ldr.w	r9, [r3]
 802275a:	f1b9 0f00 	cmp.w	r9, #0
 802275e:	d03f      	beq.n	80227e0 <mktime+0x150>
 8022760:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8022764:	6968      	ldr	r0, [r5, #20]
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	f1b9 0f01 	cmp.w	r9, #1
 802276c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022770:	46c8      	mov	r8, r9
 8022772:	bfa8      	it	ge
 8022774:	f04f 0801 	movge.w	r8, #1
 8022778:	4283      	cmp	r3, r0
 802277a:	d17f      	bne.n	802287c <mktime+0x1ec>
 802277c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802277e:	4619      	mov	r1, r3
 8022780:	17da      	asrs	r2, r3, #31
 8022782:	e9cd 1200 	strd	r1, r2, [sp]
 8022786:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 802278a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 802278e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022794:	1a80      	subs	r0, r0, r2
 8022796:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 802279a:	4582      	cmp	sl, r0
 802279c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80227a0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80227a4:	da71      	bge.n	802288a <mktime+0x1fa>
 80227a6:	9800      	ldr	r0, [sp, #0]
 80227a8:	6a39      	ldr	r1, [r7, #32]
 80227aa:	1a09      	subs	r1, r1, r0
 80227ac:	9104      	str	r1, [sp, #16]
 80227ae:	9801      	ldr	r0, [sp, #4]
 80227b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80227b2:	eb61 0100 	sbc.w	r1, r1, r0
 80227b6:	9105      	str	r1, [sp, #20]
 80227b8:	6839      	ldr	r1, [r7, #0]
 80227ba:	2900      	cmp	r1, #0
 80227bc:	d075      	beq.n	80228aa <mktime+0x21a>
 80227be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80227c2:	4582      	cmp	sl, r0
 80227c4:	eb7b 0101 	sbcs.w	r1, fp, r1
 80227c8:	db05      	blt.n	80227d6 <mktime+0x146>
 80227ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80227ce:	4582      	cmp	sl, r0
 80227d0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80227d4:	db6f      	blt.n	80228b6 <mktime+0x226>
 80227d6:	f1b9 0f00 	cmp.w	r9, #0
 80227da:	f04f 0900 	mov.w	r9, #0
 80227de:	da6f      	bge.n	80228c0 <mktime+0x230>
 80227e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80227e2:	eb1a 0a03 	adds.w	sl, sl, r3
 80227e6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80227ea:	e0ae      	b.n	802294a <mktime+0x2ba>
 80227ec:	f240 126d 	movw	r2, #365	; 0x16d
 80227f0:	e7a3      	b.n	802273a <mktime+0xaa>
 80227f2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80227f6:	e7a0      	b.n	802273a <mktime+0xaa>
 80227f8:	d0a3      	beq.n	8022742 <mktime+0xb2>
 80227fa:	2345      	movs	r3, #69	; 0x45
 80227fc:	f240 1e6d 	movw	lr, #365	; 0x16d
 8022800:	2164      	movs	r1, #100	; 0x64
 8022802:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8022806:	e012      	b.n	802282e <mktime+0x19e>
 8022808:	bb62      	cbnz	r2, 8022864 <mktime+0x1d4>
 802280a:	fb93 f2f1 	sdiv	r2, r3, r1
 802280e:	fb01 3212 	mls	r2, r1, r2, r3
 8022812:	bb52      	cbnz	r2, 802286a <mktime+0x1da>
 8022814:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8022818:	fb9c f2f0 	sdiv	r2, ip, r0
 802281c:	fb00 c212 	mls	r2, r0, r2, ip
 8022820:	2a00      	cmp	r2, #0
 8022822:	bf14      	ite	ne
 8022824:	4672      	movne	r2, lr
 8022826:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802282a:	1aa4      	subs	r4, r4, r2
 802282c:	3b01      	subs	r3, #1
 802282e:	429e      	cmp	r6, r3
 8022830:	f003 0203 	and.w	r2, r3, #3
 8022834:	dbe8      	blt.n	8022808 <mktime+0x178>
 8022836:	b9da      	cbnz	r2, 8022870 <mktime+0x1e0>
 8022838:	2264      	movs	r2, #100	; 0x64
 802283a:	fb96 f3f2 	sdiv	r3, r6, r2
 802283e:	fb02 6313 	mls	r3, r2, r3, r6
 8022842:	b9c3      	cbnz	r3, 8022876 <mktime+0x1e6>
 8022844:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8022848:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802284c:	fb91 f3f2 	sdiv	r3, r1, r2
 8022850:	fb02 1313 	mls	r3, r2, r3, r1
 8022854:	2b00      	cmp	r3, #0
 8022856:	f240 136d 	movw	r3, #365	; 0x16d
 802285a:	bf08      	it	eq
 802285c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8022860:	1ae4      	subs	r4, r4, r3
 8022862:	e76e      	b.n	8022742 <mktime+0xb2>
 8022864:	f240 126d 	movw	r2, #365	; 0x16d
 8022868:	e7df      	b.n	802282a <mktime+0x19a>
 802286a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802286e:	e7dc      	b.n	802282a <mktime+0x19a>
 8022870:	f240 136d 	movw	r3, #365	; 0x16d
 8022874:	e7f4      	b.n	8022860 <mktime+0x1d0>
 8022876:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 802287a:	e7f1      	b.n	8022860 <mktime+0x1d0>
 802287c:	f002 f84a 	bl	8024914 <__tzcalc_limits>
 8022880:	2800      	cmp	r0, #0
 8022882:	f47f af7b 	bne.w	802277c <mktime+0xec>
 8022886:	46c1      	mov	r9, r8
 8022888:	e054      	b.n	8022934 <mktime+0x2a4>
 802288a:	9800      	ldr	r0, [sp, #0]
 802288c:	9902      	ldr	r1, [sp, #8]
 802288e:	1a09      	subs	r1, r1, r0
 8022890:	9108      	str	r1, [sp, #32]
 8022892:	9801      	ldr	r0, [sp, #4]
 8022894:	9903      	ldr	r1, [sp, #12]
 8022896:	eb61 0100 	sbc.w	r1, r1, r0
 802289a:	9109      	str	r1, [sp, #36]	; 0x24
 802289c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80228a0:	4582      	cmp	sl, r0
 80228a2:	eb7b 0101 	sbcs.w	r1, fp, r1
 80228a6:	dbee      	blt.n	8022886 <mktime+0x1f6>
 80228a8:	e77d      	b.n	80227a6 <mktime+0x116>
 80228aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80228ae:	4582      	cmp	sl, r0
 80228b0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80228b4:	db89      	blt.n	80227ca <mktime+0x13a>
 80228b6:	f1b9 0f00 	cmp.w	r9, #0
 80228ba:	db3f      	blt.n	802293c <mktime+0x2ac>
 80228bc:	f04f 0901 	mov.w	r9, #1
 80228c0:	ea88 0809 	eor.w	r8, r8, r9
 80228c4:	f1b8 0f01 	cmp.w	r8, #1
 80228c8:	d134      	bne.n	8022934 <mktime+0x2a4>
 80228ca:	f1b9 0f00 	cmp.w	r9, #0
 80228ce:	d04f      	beq.n	8022970 <mktime+0x2e0>
 80228d0:	1ad3      	subs	r3, r2, r3
 80228d2:	682a      	ldr	r2, [r5, #0]
 80228d4:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80228d8:	441a      	add	r2, r3
 80228da:	eb1a 0a03 	adds.w	sl, sl, r3
 80228de:	602a      	str	r2, [r5, #0]
 80228e0:	4628      	mov	r0, r5
 80228e2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80228e6:	f7ff fdfb 	bl	80224e0 <validate_structure>
 80228ea:	68ea      	ldr	r2, [r5, #12]
 80228ec:	ebb2 0208 	subs.w	r2, r2, r8
 80228f0:	d020      	beq.n	8022934 <mktime+0x2a4>
 80228f2:	2a01      	cmp	r2, #1
 80228f4:	dc3e      	bgt.n	8022974 <mktime+0x2e4>
 80228f6:	1c90      	adds	r0, r2, #2
 80228f8:	bfd8      	it	le
 80228fa:	2201      	movle	r2, #1
 80228fc:	69eb      	ldr	r3, [r5, #28]
 80228fe:	18d3      	adds	r3, r2, r3
 8022900:	4414      	add	r4, r2
 8022902:	d540      	bpl.n	8022986 <mktime+0x2f6>
 8022904:	1e72      	subs	r2, r6, #1
 8022906:	0791      	lsls	r1, r2, #30
 8022908:	d137      	bne.n	802297a <mktime+0x2ea>
 802290a:	2164      	movs	r1, #100	; 0x64
 802290c:	fb92 f3f1 	sdiv	r3, r2, r1
 8022910:	fb01 2313 	mls	r3, r1, r3, r2
 8022914:	bba3      	cbnz	r3, 8022980 <mktime+0x2f0>
 8022916:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 802291a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802291e:	fb96 f3f2 	sdiv	r3, r6, r2
 8022922:	fb02 6613 	mls	r6, r2, r3, r6
 8022926:	2e00      	cmp	r6, #0
 8022928:	f240 136d 	movw	r3, #365	; 0x16d
 802292c:	bf18      	it	ne
 802292e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8022932:	61eb      	str	r3, [r5, #28]
 8022934:	f1b9 0f01 	cmp.w	r9, #1
 8022938:	f47f af52 	bne.w	80227e0 <mktime+0x150>
 802293c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802293e:	eb1a 0a03 	adds.w	sl, sl, r3
 8022942:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8022946:	f04f 0901 	mov.w	r9, #1
 802294a:	f002 f891 	bl	8024a70 <__tz_unlock>
 802294e:	3404      	adds	r4, #4
 8022950:	2307      	movs	r3, #7
 8022952:	fb94 f3f3 	sdiv	r3, r4, r3
 8022956:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802295a:	1ae4      	subs	r4, r4, r3
 802295c:	bf48      	it	mi
 802295e:	3407      	addmi	r4, #7
 8022960:	f8c5 9020 	str.w	r9, [r5, #32]
 8022964:	61ac      	str	r4, [r5, #24]
 8022966:	4650      	mov	r0, sl
 8022968:	4659      	mov	r1, fp
 802296a:	b00b      	add	sp, #44	; 0x2c
 802296c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022970:	1a9b      	subs	r3, r3, r2
 8022972:	e7ae      	b.n	80228d2 <mktime+0x242>
 8022974:	f04f 32ff 	mov.w	r2, #4294967295
 8022978:	e7c0      	b.n	80228fc <mktime+0x26c>
 802297a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 802297e:	e7d8      	b.n	8022932 <mktime+0x2a2>
 8022980:	f240 136d 	movw	r3, #365	; 0x16d
 8022984:	e7d5      	b.n	8022932 <mktime+0x2a2>
 8022986:	07b2      	lsls	r2, r6, #30
 8022988:	d117      	bne.n	80229ba <mktime+0x32a>
 802298a:	2164      	movs	r1, #100	; 0x64
 802298c:	fb96 f2f1 	sdiv	r2, r6, r1
 8022990:	fb01 6212 	mls	r2, r1, r2, r6
 8022994:	b9a2      	cbnz	r2, 80229c0 <mktime+0x330>
 8022996:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 802299a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802299e:	fb96 f2f1 	sdiv	r2, r6, r1
 80229a2:	fb01 6612 	mls	r6, r1, r2, r6
 80229a6:	2e00      	cmp	r6, #0
 80229a8:	f240 126d 	movw	r2, #365	; 0x16d
 80229ac:	bf08      	it	eq
 80229ae:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80229b2:	4293      	cmp	r3, r2
 80229b4:	bfa8      	it	ge
 80229b6:	1a9b      	subge	r3, r3, r2
 80229b8:	e7bb      	b.n	8022932 <mktime+0x2a2>
 80229ba:	f240 126d 	movw	r2, #365	; 0x16d
 80229be:	e7f8      	b.n	80229b2 <mktime+0x322>
 80229c0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80229c4:	e7f5      	b.n	80229b2 <mktime+0x322>
 80229c6:	f04f 3aff 	mov.w	sl, #4294967295
 80229ca:	f04f 3bff 	mov.w	fp, #4294967295
 80229ce:	e7ca      	b.n	8022966 <mktime+0x2d6>
 80229d0:	080339ac 	.word	0x080339ac
 80229d4:	00015180 	.word	0x00015180
 80229d8:	2000116c 	.word	0x2000116c

080229dc <_calloc_r>:
 80229dc:	b513      	push	{r0, r1, r4, lr}
 80229de:	434a      	muls	r2, r1
 80229e0:	4611      	mov	r1, r2
 80229e2:	9201      	str	r2, [sp, #4]
 80229e4:	f000 f85a 	bl	8022a9c <_malloc_r>
 80229e8:	4604      	mov	r4, r0
 80229ea:	b118      	cbz	r0, 80229f4 <_calloc_r+0x18>
 80229ec:	9a01      	ldr	r2, [sp, #4]
 80229ee:	2100      	movs	r1, #0
 80229f0:	f7ff fd6e 	bl	80224d0 <memset>
 80229f4:	4620      	mov	r0, r4
 80229f6:	b002      	add	sp, #8
 80229f8:	bd10      	pop	{r4, pc}
	...

080229fc <_free_r>:
 80229fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80229fe:	2900      	cmp	r1, #0
 8022a00:	d048      	beq.n	8022a94 <_free_r+0x98>
 8022a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022a06:	9001      	str	r0, [sp, #4]
 8022a08:	2b00      	cmp	r3, #0
 8022a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8022a0e:	bfb8      	it	lt
 8022a10:	18e4      	addlt	r4, r4, r3
 8022a12:	f003 ffe7 	bl	80269e4 <__malloc_lock>
 8022a16:	4a20      	ldr	r2, [pc, #128]	; (8022a98 <_free_r+0x9c>)
 8022a18:	9801      	ldr	r0, [sp, #4]
 8022a1a:	6813      	ldr	r3, [r2, #0]
 8022a1c:	4615      	mov	r5, r2
 8022a1e:	b933      	cbnz	r3, 8022a2e <_free_r+0x32>
 8022a20:	6063      	str	r3, [r4, #4]
 8022a22:	6014      	str	r4, [r2, #0]
 8022a24:	b003      	add	sp, #12
 8022a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022a2a:	f003 bfe1 	b.w	80269f0 <__malloc_unlock>
 8022a2e:	42a3      	cmp	r3, r4
 8022a30:	d90b      	bls.n	8022a4a <_free_r+0x4e>
 8022a32:	6821      	ldr	r1, [r4, #0]
 8022a34:	1862      	adds	r2, r4, r1
 8022a36:	4293      	cmp	r3, r2
 8022a38:	bf04      	itt	eq
 8022a3a:	681a      	ldreq	r2, [r3, #0]
 8022a3c:	685b      	ldreq	r3, [r3, #4]
 8022a3e:	6063      	str	r3, [r4, #4]
 8022a40:	bf04      	itt	eq
 8022a42:	1852      	addeq	r2, r2, r1
 8022a44:	6022      	streq	r2, [r4, #0]
 8022a46:	602c      	str	r4, [r5, #0]
 8022a48:	e7ec      	b.n	8022a24 <_free_r+0x28>
 8022a4a:	461a      	mov	r2, r3
 8022a4c:	685b      	ldr	r3, [r3, #4]
 8022a4e:	b10b      	cbz	r3, 8022a54 <_free_r+0x58>
 8022a50:	42a3      	cmp	r3, r4
 8022a52:	d9fa      	bls.n	8022a4a <_free_r+0x4e>
 8022a54:	6811      	ldr	r1, [r2, #0]
 8022a56:	1855      	adds	r5, r2, r1
 8022a58:	42a5      	cmp	r5, r4
 8022a5a:	d10b      	bne.n	8022a74 <_free_r+0x78>
 8022a5c:	6824      	ldr	r4, [r4, #0]
 8022a5e:	4421      	add	r1, r4
 8022a60:	1854      	adds	r4, r2, r1
 8022a62:	42a3      	cmp	r3, r4
 8022a64:	6011      	str	r1, [r2, #0]
 8022a66:	d1dd      	bne.n	8022a24 <_free_r+0x28>
 8022a68:	681c      	ldr	r4, [r3, #0]
 8022a6a:	685b      	ldr	r3, [r3, #4]
 8022a6c:	6053      	str	r3, [r2, #4]
 8022a6e:	4421      	add	r1, r4
 8022a70:	6011      	str	r1, [r2, #0]
 8022a72:	e7d7      	b.n	8022a24 <_free_r+0x28>
 8022a74:	d902      	bls.n	8022a7c <_free_r+0x80>
 8022a76:	230c      	movs	r3, #12
 8022a78:	6003      	str	r3, [r0, #0]
 8022a7a:	e7d3      	b.n	8022a24 <_free_r+0x28>
 8022a7c:	6825      	ldr	r5, [r4, #0]
 8022a7e:	1961      	adds	r1, r4, r5
 8022a80:	428b      	cmp	r3, r1
 8022a82:	bf04      	itt	eq
 8022a84:	6819      	ldreq	r1, [r3, #0]
 8022a86:	685b      	ldreq	r3, [r3, #4]
 8022a88:	6063      	str	r3, [r4, #4]
 8022a8a:	bf04      	itt	eq
 8022a8c:	1949      	addeq	r1, r1, r5
 8022a8e:	6021      	streq	r1, [r4, #0]
 8022a90:	6054      	str	r4, [r2, #4]
 8022a92:	e7c7      	b.n	8022a24 <_free_r+0x28>
 8022a94:	b003      	add	sp, #12
 8022a96:	bd30      	pop	{r4, r5, pc}
 8022a98:	20001148 	.word	0x20001148

08022a9c <_malloc_r>:
 8022a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a9e:	1ccd      	adds	r5, r1, #3
 8022aa0:	f025 0503 	bic.w	r5, r5, #3
 8022aa4:	3508      	adds	r5, #8
 8022aa6:	2d0c      	cmp	r5, #12
 8022aa8:	bf38      	it	cc
 8022aaa:	250c      	movcc	r5, #12
 8022aac:	2d00      	cmp	r5, #0
 8022aae:	4606      	mov	r6, r0
 8022ab0:	db01      	blt.n	8022ab6 <_malloc_r+0x1a>
 8022ab2:	42a9      	cmp	r1, r5
 8022ab4:	d903      	bls.n	8022abe <_malloc_r+0x22>
 8022ab6:	230c      	movs	r3, #12
 8022ab8:	6033      	str	r3, [r6, #0]
 8022aba:	2000      	movs	r0, #0
 8022abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022abe:	f003 ff91 	bl	80269e4 <__malloc_lock>
 8022ac2:	4921      	ldr	r1, [pc, #132]	; (8022b48 <_malloc_r+0xac>)
 8022ac4:	680a      	ldr	r2, [r1, #0]
 8022ac6:	4614      	mov	r4, r2
 8022ac8:	b99c      	cbnz	r4, 8022af2 <_malloc_r+0x56>
 8022aca:	4f20      	ldr	r7, [pc, #128]	; (8022b4c <_malloc_r+0xb0>)
 8022acc:	683b      	ldr	r3, [r7, #0]
 8022ace:	b923      	cbnz	r3, 8022ada <_malloc_r+0x3e>
 8022ad0:	4621      	mov	r1, r4
 8022ad2:	4630      	mov	r0, r6
 8022ad4:	f000 feda 	bl	802388c <_sbrk_r>
 8022ad8:	6038      	str	r0, [r7, #0]
 8022ada:	4629      	mov	r1, r5
 8022adc:	4630      	mov	r0, r6
 8022ade:	f000 fed5 	bl	802388c <_sbrk_r>
 8022ae2:	1c43      	adds	r3, r0, #1
 8022ae4:	d123      	bne.n	8022b2e <_malloc_r+0x92>
 8022ae6:	230c      	movs	r3, #12
 8022ae8:	6033      	str	r3, [r6, #0]
 8022aea:	4630      	mov	r0, r6
 8022aec:	f003 ff80 	bl	80269f0 <__malloc_unlock>
 8022af0:	e7e3      	b.n	8022aba <_malloc_r+0x1e>
 8022af2:	6823      	ldr	r3, [r4, #0]
 8022af4:	1b5b      	subs	r3, r3, r5
 8022af6:	d417      	bmi.n	8022b28 <_malloc_r+0x8c>
 8022af8:	2b0b      	cmp	r3, #11
 8022afa:	d903      	bls.n	8022b04 <_malloc_r+0x68>
 8022afc:	6023      	str	r3, [r4, #0]
 8022afe:	441c      	add	r4, r3
 8022b00:	6025      	str	r5, [r4, #0]
 8022b02:	e004      	b.n	8022b0e <_malloc_r+0x72>
 8022b04:	6863      	ldr	r3, [r4, #4]
 8022b06:	42a2      	cmp	r2, r4
 8022b08:	bf0c      	ite	eq
 8022b0a:	600b      	streq	r3, [r1, #0]
 8022b0c:	6053      	strne	r3, [r2, #4]
 8022b0e:	4630      	mov	r0, r6
 8022b10:	f003 ff6e 	bl	80269f0 <__malloc_unlock>
 8022b14:	f104 000b 	add.w	r0, r4, #11
 8022b18:	1d23      	adds	r3, r4, #4
 8022b1a:	f020 0007 	bic.w	r0, r0, #7
 8022b1e:	1ac2      	subs	r2, r0, r3
 8022b20:	d0cc      	beq.n	8022abc <_malloc_r+0x20>
 8022b22:	1a1b      	subs	r3, r3, r0
 8022b24:	50a3      	str	r3, [r4, r2]
 8022b26:	e7c9      	b.n	8022abc <_malloc_r+0x20>
 8022b28:	4622      	mov	r2, r4
 8022b2a:	6864      	ldr	r4, [r4, #4]
 8022b2c:	e7cc      	b.n	8022ac8 <_malloc_r+0x2c>
 8022b2e:	1cc4      	adds	r4, r0, #3
 8022b30:	f024 0403 	bic.w	r4, r4, #3
 8022b34:	42a0      	cmp	r0, r4
 8022b36:	d0e3      	beq.n	8022b00 <_malloc_r+0x64>
 8022b38:	1a21      	subs	r1, r4, r0
 8022b3a:	4630      	mov	r0, r6
 8022b3c:	f000 fea6 	bl	802388c <_sbrk_r>
 8022b40:	3001      	adds	r0, #1
 8022b42:	d1dd      	bne.n	8022b00 <_malloc_r+0x64>
 8022b44:	e7cf      	b.n	8022ae6 <_malloc_r+0x4a>
 8022b46:	bf00      	nop
 8022b48:	20001148 	.word	0x20001148
 8022b4c:	2000114c 	.word	0x2000114c

08022b50 <__sfputc_r>:
 8022b50:	6893      	ldr	r3, [r2, #8]
 8022b52:	3b01      	subs	r3, #1
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	b410      	push	{r4}
 8022b58:	6093      	str	r3, [r2, #8]
 8022b5a:	da08      	bge.n	8022b6e <__sfputc_r+0x1e>
 8022b5c:	6994      	ldr	r4, [r2, #24]
 8022b5e:	42a3      	cmp	r3, r4
 8022b60:	db01      	blt.n	8022b66 <__sfputc_r+0x16>
 8022b62:	290a      	cmp	r1, #10
 8022b64:	d103      	bne.n	8022b6e <__sfputc_r+0x1e>
 8022b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b6a:	f002 b943 	b.w	8024df4 <__swbuf_r>
 8022b6e:	6813      	ldr	r3, [r2, #0]
 8022b70:	1c58      	adds	r0, r3, #1
 8022b72:	6010      	str	r0, [r2, #0]
 8022b74:	7019      	strb	r1, [r3, #0]
 8022b76:	4608      	mov	r0, r1
 8022b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b7c:	4770      	bx	lr

08022b7e <__sfputs_r>:
 8022b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b80:	4606      	mov	r6, r0
 8022b82:	460f      	mov	r7, r1
 8022b84:	4614      	mov	r4, r2
 8022b86:	18d5      	adds	r5, r2, r3
 8022b88:	42ac      	cmp	r4, r5
 8022b8a:	d101      	bne.n	8022b90 <__sfputs_r+0x12>
 8022b8c:	2000      	movs	r0, #0
 8022b8e:	e007      	b.n	8022ba0 <__sfputs_r+0x22>
 8022b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b94:	463a      	mov	r2, r7
 8022b96:	4630      	mov	r0, r6
 8022b98:	f7ff ffda 	bl	8022b50 <__sfputc_r>
 8022b9c:	1c43      	adds	r3, r0, #1
 8022b9e:	d1f3      	bne.n	8022b88 <__sfputs_r+0xa>
 8022ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022ba4 <_vfiprintf_r>:
 8022ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ba8:	460d      	mov	r5, r1
 8022baa:	b09d      	sub	sp, #116	; 0x74
 8022bac:	4614      	mov	r4, r2
 8022bae:	4698      	mov	r8, r3
 8022bb0:	4606      	mov	r6, r0
 8022bb2:	b118      	cbz	r0, 8022bbc <_vfiprintf_r+0x18>
 8022bb4:	6983      	ldr	r3, [r0, #24]
 8022bb6:	b90b      	cbnz	r3, 8022bbc <_vfiprintf_r+0x18>
 8022bb8:	f003 f9d6 	bl	8025f68 <__sinit>
 8022bbc:	4b89      	ldr	r3, [pc, #548]	; (8022de4 <_vfiprintf_r+0x240>)
 8022bbe:	429d      	cmp	r5, r3
 8022bc0:	d11b      	bne.n	8022bfa <_vfiprintf_r+0x56>
 8022bc2:	6875      	ldr	r5, [r6, #4]
 8022bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022bc6:	07d9      	lsls	r1, r3, #31
 8022bc8:	d405      	bmi.n	8022bd6 <_vfiprintf_r+0x32>
 8022bca:	89ab      	ldrh	r3, [r5, #12]
 8022bcc:	059a      	lsls	r2, r3, #22
 8022bce:	d402      	bmi.n	8022bd6 <_vfiprintf_r+0x32>
 8022bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022bd2:	f003 fe7b 	bl	80268cc <__retarget_lock_acquire_recursive>
 8022bd6:	89ab      	ldrh	r3, [r5, #12]
 8022bd8:	071b      	lsls	r3, r3, #28
 8022bda:	d501      	bpl.n	8022be0 <_vfiprintf_r+0x3c>
 8022bdc:	692b      	ldr	r3, [r5, #16]
 8022bde:	b9eb      	cbnz	r3, 8022c1c <_vfiprintf_r+0x78>
 8022be0:	4629      	mov	r1, r5
 8022be2:	4630      	mov	r0, r6
 8022be4:	f002 f96a 	bl	8024ebc <__swsetup_r>
 8022be8:	b1c0      	cbz	r0, 8022c1c <_vfiprintf_r+0x78>
 8022bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022bec:	07dc      	lsls	r4, r3, #31
 8022bee:	d50e      	bpl.n	8022c0e <_vfiprintf_r+0x6a>
 8022bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8022bf4:	b01d      	add	sp, #116	; 0x74
 8022bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bfa:	4b7b      	ldr	r3, [pc, #492]	; (8022de8 <_vfiprintf_r+0x244>)
 8022bfc:	429d      	cmp	r5, r3
 8022bfe:	d101      	bne.n	8022c04 <_vfiprintf_r+0x60>
 8022c00:	68b5      	ldr	r5, [r6, #8]
 8022c02:	e7df      	b.n	8022bc4 <_vfiprintf_r+0x20>
 8022c04:	4b79      	ldr	r3, [pc, #484]	; (8022dec <_vfiprintf_r+0x248>)
 8022c06:	429d      	cmp	r5, r3
 8022c08:	bf08      	it	eq
 8022c0a:	68f5      	ldreq	r5, [r6, #12]
 8022c0c:	e7da      	b.n	8022bc4 <_vfiprintf_r+0x20>
 8022c0e:	89ab      	ldrh	r3, [r5, #12]
 8022c10:	0598      	lsls	r0, r3, #22
 8022c12:	d4ed      	bmi.n	8022bf0 <_vfiprintf_r+0x4c>
 8022c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022c16:	f003 fe5b 	bl	80268d0 <__retarget_lock_release_recursive>
 8022c1a:	e7e9      	b.n	8022bf0 <_vfiprintf_r+0x4c>
 8022c1c:	2300      	movs	r3, #0
 8022c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8022c20:	2320      	movs	r3, #32
 8022c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8022c2a:	2330      	movs	r3, #48	; 0x30
 8022c2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022df0 <_vfiprintf_r+0x24c>
 8022c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022c34:	f04f 0901 	mov.w	r9, #1
 8022c38:	4623      	mov	r3, r4
 8022c3a:	469a      	mov	sl, r3
 8022c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022c40:	b10a      	cbz	r2, 8022c46 <_vfiprintf_r+0xa2>
 8022c42:	2a25      	cmp	r2, #37	; 0x25
 8022c44:	d1f9      	bne.n	8022c3a <_vfiprintf_r+0x96>
 8022c46:	ebba 0b04 	subs.w	fp, sl, r4
 8022c4a:	d00b      	beq.n	8022c64 <_vfiprintf_r+0xc0>
 8022c4c:	465b      	mov	r3, fp
 8022c4e:	4622      	mov	r2, r4
 8022c50:	4629      	mov	r1, r5
 8022c52:	4630      	mov	r0, r6
 8022c54:	f7ff ff93 	bl	8022b7e <__sfputs_r>
 8022c58:	3001      	adds	r0, #1
 8022c5a:	f000 80aa 	beq.w	8022db2 <_vfiprintf_r+0x20e>
 8022c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c60:	445a      	add	r2, fp
 8022c62:	9209      	str	r2, [sp, #36]	; 0x24
 8022c64:	f89a 3000 	ldrb.w	r3, [sl]
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	f000 80a2 	beq.w	8022db2 <_vfiprintf_r+0x20e>
 8022c6e:	2300      	movs	r3, #0
 8022c70:	f04f 32ff 	mov.w	r2, #4294967295
 8022c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022c78:	f10a 0a01 	add.w	sl, sl, #1
 8022c7c:	9304      	str	r3, [sp, #16]
 8022c7e:	9307      	str	r3, [sp, #28]
 8022c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022c84:	931a      	str	r3, [sp, #104]	; 0x68
 8022c86:	4654      	mov	r4, sl
 8022c88:	2205      	movs	r2, #5
 8022c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c8e:	4858      	ldr	r0, [pc, #352]	; (8022df0 <_vfiprintf_r+0x24c>)
 8022c90:	f7dd fab6 	bl	8000200 <memchr>
 8022c94:	9a04      	ldr	r2, [sp, #16]
 8022c96:	b9d8      	cbnz	r0, 8022cd0 <_vfiprintf_r+0x12c>
 8022c98:	06d1      	lsls	r1, r2, #27
 8022c9a:	bf44      	itt	mi
 8022c9c:	2320      	movmi	r3, #32
 8022c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022ca2:	0713      	lsls	r3, r2, #28
 8022ca4:	bf44      	itt	mi
 8022ca6:	232b      	movmi	r3, #43	; 0x2b
 8022ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022cac:	f89a 3000 	ldrb.w	r3, [sl]
 8022cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8022cb2:	d015      	beq.n	8022ce0 <_vfiprintf_r+0x13c>
 8022cb4:	9a07      	ldr	r2, [sp, #28]
 8022cb6:	4654      	mov	r4, sl
 8022cb8:	2000      	movs	r0, #0
 8022cba:	f04f 0c0a 	mov.w	ip, #10
 8022cbe:	4621      	mov	r1, r4
 8022cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022cc4:	3b30      	subs	r3, #48	; 0x30
 8022cc6:	2b09      	cmp	r3, #9
 8022cc8:	d94e      	bls.n	8022d68 <_vfiprintf_r+0x1c4>
 8022cca:	b1b0      	cbz	r0, 8022cfa <_vfiprintf_r+0x156>
 8022ccc:	9207      	str	r2, [sp, #28]
 8022cce:	e014      	b.n	8022cfa <_vfiprintf_r+0x156>
 8022cd0:	eba0 0308 	sub.w	r3, r0, r8
 8022cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8022cd8:	4313      	orrs	r3, r2
 8022cda:	9304      	str	r3, [sp, #16]
 8022cdc:	46a2      	mov	sl, r4
 8022cde:	e7d2      	b.n	8022c86 <_vfiprintf_r+0xe2>
 8022ce0:	9b03      	ldr	r3, [sp, #12]
 8022ce2:	1d19      	adds	r1, r3, #4
 8022ce4:	681b      	ldr	r3, [r3, #0]
 8022ce6:	9103      	str	r1, [sp, #12]
 8022ce8:	2b00      	cmp	r3, #0
 8022cea:	bfbb      	ittet	lt
 8022cec:	425b      	neglt	r3, r3
 8022cee:	f042 0202 	orrlt.w	r2, r2, #2
 8022cf2:	9307      	strge	r3, [sp, #28]
 8022cf4:	9307      	strlt	r3, [sp, #28]
 8022cf6:	bfb8      	it	lt
 8022cf8:	9204      	strlt	r2, [sp, #16]
 8022cfa:	7823      	ldrb	r3, [r4, #0]
 8022cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8022cfe:	d10c      	bne.n	8022d1a <_vfiprintf_r+0x176>
 8022d00:	7863      	ldrb	r3, [r4, #1]
 8022d02:	2b2a      	cmp	r3, #42	; 0x2a
 8022d04:	d135      	bne.n	8022d72 <_vfiprintf_r+0x1ce>
 8022d06:	9b03      	ldr	r3, [sp, #12]
 8022d08:	1d1a      	adds	r2, r3, #4
 8022d0a:	681b      	ldr	r3, [r3, #0]
 8022d0c:	9203      	str	r2, [sp, #12]
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	bfb8      	it	lt
 8022d12:	f04f 33ff 	movlt.w	r3, #4294967295
 8022d16:	3402      	adds	r4, #2
 8022d18:	9305      	str	r3, [sp, #20]
 8022d1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022e00 <_vfiprintf_r+0x25c>
 8022d1e:	7821      	ldrb	r1, [r4, #0]
 8022d20:	2203      	movs	r2, #3
 8022d22:	4650      	mov	r0, sl
 8022d24:	f7dd fa6c 	bl	8000200 <memchr>
 8022d28:	b140      	cbz	r0, 8022d3c <_vfiprintf_r+0x198>
 8022d2a:	2340      	movs	r3, #64	; 0x40
 8022d2c:	eba0 000a 	sub.w	r0, r0, sl
 8022d30:	fa03 f000 	lsl.w	r0, r3, r0
 8022d34:	9b04      	ldr	r3, [sp, #16]
 8022d36:	4303      	orrs	r3, r0
 8022d38:	3401      	adds	r4, #1
 8022d3a:	9304      	str	r3, [sp, #16]
 8022d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d40:	482c      	ldr	r0, [pc, #176]	; (8022df4 <_vfiprintf_r+0x250>)
 8022d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022d46:	2206      	movs	r2, #6
 8022d48:	f7dd fa5a 	bl	8000200 <memchr>
 8022d4c:	2800      	cmp	r0, #0
 8022d4e:	d03f      	beq.n	8022dd0 <_vfiprintf_r+0x22c>
 8022d50:	4b29      	ldr	r3, [pc, #164]	; (8022df8 <_vfiprintf_r+0x254>)
 8022d52:	bb1b      	cbnz	r3, 8022d9c <_vfiprintf_r+0x1f8>
 8022d54:	9b03      	ldr	r3, [sp, #12]
 8022d56:	3307      	adds	r3, #7
 8022d58:	f023 0307 	bic.w	r3, r3, #7
 8022d5c:	3308      	adds	r3, #8
 8022d5e:	9303      	str	r3, [sp, #12]
 8022d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d62:	443b      	add	r3, r7
 8022d64:	9309      	str	r3, [sp, #36]	; 0x24
 8022d66:	e767      	b.n	8022c38 <_vfiprintf_r+0x94>
 8022d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8022d6c:	460c      	mov	r4, r1
 8022d6e:	2001      	movs	r0, #1
 8022d70:	e7a5      	b.n	8022cbe <_vfiprintf_r+0x11a>
 8022d72:	2300      	movs	r3, #0
 8022d74:	3401      	adds	r4, #1
 8022d76:	9305      	str	r3, [sp, #20]
 8022d78:	4619      	mov	r1, r3
 8022d7a:	f04f 0c0a 	mov.w	ip, #10
 8022d7e:	4620      	mov	r0, r4
 8022d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022d84:	3a30      	subs	r2, #48	; 0x30
 8022d86:	2a09      	cmp	r2, #9
 8022d88:	d903      	bls.n	8022d92 <_vfiprintf_r+0x1ee>
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d0c5      	beq.n	8022d1a <_vfiprintf_r+0x176>
 8022d8e:	9105      	str	r1, [sp, #20]
 8022d90:	e7c3      	b.n	8022d1a <_vfiprintf_r+0x176>
 8022d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8022d96:	4604      	mov	r4, r0
 8022d98:	2301      	movs	r3, #1
 8022d9a:	e7f0      	b.n	8022d7e <_vfiprintf_r+0x1da>
 8022d9c:	ab03      	add	r3, sp, #12
 8022d9e:	9300      	str	r3, [sp, #0]
 8022da0:	462a      	mov	r2, r5
 8022da2:	4b16      	ldr	r3, [pc, #88]	; (8022dfc <_vfiprintf_r+0x258>)
 8022da4:	a904      	add	r1, sp, #16
 8022da6:	4630      	mov	r0, r6
 8022da8:	f000 f8cc 	bl	8022f44 <_printf_float>
 8022dac:	4607      	mov	r7, r0
 8022dae:	1c78      	adds	r0, r7, #1
 8022db0:	d1d6      	bne.n	8022d60 <_vfiprintf_r+0x1bc>
 8022db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022db4:	07d9      	lsls	r1, r3, #31
 8022db6:	d405      	bmi.n	8022dc4 <_vfiprintf_r+0x220>
 8022db8:	89ab      	ldrh	r3, [r5, #12]
 8022dba:	059a      	lsls	r2, r3, #22
 8022dbc:	d402      	bmi.n	8022dc4 <_vfiprintf_r+0x220>
 8022dbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022dc0:	f003 fd86 	bl	80268d0 <__retarget_lock_release_recursive>
 8022dc4:	89ab      	ldrh	r3, [r5, #12]
 8022dc6:	065b      	lsls	r3, r3, #25
 8022dc8:	f53f af12 	bmi.w	8022bf0 <_vfiprintf_r+0x4c>
 8022dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022dce:	e711      	b.n	8022bf4 <_vfiprintf_r+0x50>
 8022dd0:	ab03      	add	r3, sp, #12
 8022dd2:	9300      	str	r3, [sp, #0]
 8022dd4:	462a      	mov	r2, r5
 8022dd6:	4b09      	ldr	r3, [pc, #36]	; (8022dfc <_vfiprintf_r+0x258>)
 8022dd8:	a904      	add	r1, sp, #16
 8022dda:	4630      	mov	r0, r6
 8022ddc:	f000 fb56 	bl	802348c <_printf_i>
 8022de0:	e7e4      	b.n	8022dac <_vfiprintf_r+0x208>
 8022de2:	bf00      	nop
 8022de4:	08033c48 	.word	0x08033c48
 8022de8:	08033c68 	.word	0x08033c68
 8022dec:	08033c28 	.word	0x08033c28
 8022df0:	080339dc 	.word	0x080339dc
 8022df4:	080339e6 	.word	0x080339e6
 8022df8:	08022f45 	.word	0x08022f45
 8022dfc:	08022b7f 	.word	0x08022b7f
 8022e00:	080339e2 	.word	0x080339e2

08022e04 <__cvt>:
 8022e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022e08:	ec55 4b10 	vmov	r4, r5, d0
 8022e0c:	2d00      	cmp	r5, #0
 8022e0e:	460e      	mov	r6, r1
 8022e10:	4619      	mov	r1, r3
 8022e12:	462b      	mov	r3, r5
 8022e14:	bfbb      	ittet	lt
 8022e16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8022e1a:	461d      	movlt	r5, r3
 8022e1c:	2300      	movge	r3, #0
 8022e1e:	232d      	movlt	r3, #45	; 0x2d
 8022e20:	700b      	strb	r3, [r1, #0]
 8022e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022e28:	4691      	mov	r9, r2
 8022e2a:	f023 0820 	bic.w	r8, r3, #32
 8022e2e:	bfbc      	itt	lt
 8022e30:	4622      	movlt	r2, r4
 8022e32:	4614      	movlt	r4, r2
 8022e34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022e38:	d005      	beq.n	8022e46 <__cvt+0x42>
 8022e3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8022e3e:	d100      	bne.n	8022e42 <__cvt+0x3e>
 8022e40:	3601      	adds	r6, #1
 8022e42:	2102      	movs	r1, #2
 8022e44:	e000      	b.n	8022e48 <__cvt+0x44>
 8022e46:	2103      	movs	r1, #3
 8022e48:	ab03      	add	r3, sp, #12
 8022e4a:	9301      	str	r3, [sp, #4]
 8022e4c:	ab02      	add	r3, sp, #8
 8022e4e:	9300      	str	r3, [sp, #0]
 8022e50:	ec45 4b10 	vmov	d0, r4, r5
 8022e54:	4653      	mov	r3, sl
 8022e56:	4632      	mov	r2, r6
 8022e58:	f002 f96e 	bl	8025138 <_dtoa_r>
 8022e5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8022e60:	4607      	mov	r7, r0
 8022e62:	d102      	bne.n	8022e6a <__cvt+0x66>
 8022e64:	f019 0f01 	tst.w	r9, #1
 8022e68:	d022      	beq.n	8022eb0 <__cvt+0xac>
 8022e6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022e6e:	eb07 0906 	add.w	r9, r7, r6
 8022e72:	d110      	bne.n	8022e96 <__cvt+0x92>
 8022e74:	783b      	ldrb	r3, [r7, #0]
 8022e76:	2b30      	cmp	r3, #48	; 0x30
 8022e78:	d10a      	bne.n	8022e90 <__cvt+0x8c>
 8022e7a:	2200      	movs	r2, #0
 8022e7c:	2300      	movs	r3, #0
 8022e7e:	4620      	mov	r0, r4
 8022e80:	4629      	mov	r1, r5
 8022e82:	f7dd fe31 	bl	8000ae8 <__aeabi_dcmpeq>
 8022e86:	b918      	cbnz	r0, 8022e90 <__cvt+0x8c>
 8022e88:	f1c6 0601 	rsb	r6, r6, #1
 8022e8c:	f8ca 6000 	str.w	r6, [sl]
 8022e90:	f8da 3000 	ldr.w	r3, [sl]
 8022e94:	4499      	add	r9, r3
 8022e96:	2200      	movs	r2, #0
 8022e98:	2300      	movs	r3, #0
 8022e9a:	4620      	mov	r0, r4
 8022e9c:	4629      	mov	r1, r5
 8022e9e:	f7dd fe23 	bl	8000ae8 <__aeabi_dcmpeq>
 8022ea2:	b108      	cbz	r0, 8022ea8 <__cvt+0xa4>
 8022ea4:	f8cd 900c 	str.w	r9, [sp, #12]
 8022ea8:	2230      	movs	r2, #48	; 0x30
 8022eaa:	9b03      	ldr	r3, [sp, #12]
 8022eac:	454b      	cmp	r3, r9
 8022eae:	d307      	bcc.n	8022ec0 <__cvt+0xbc>
 8022eb0:	9b03      	ldr	r3, [sp, #12]
 8022eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022eb4:	1bdb      	subs	r3, r3, r7
 8022eb6:	4638      	mov	r0, r7
 8022eb8:	6013      	str	r3, [r2, #0]
 8022eba:	b004      	add	sp, #16
 8022ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ec0:	1c59      	adds	r1, r3, #1
 8022ec2:	9103      	str	r1, [sp, #12]
 8022ec4:	701a      	strb	r2, [r3, #0]
 8022ec6:	e7f0      	b.n	8022eaa <__cvt+0xa6>

08022ec8 <__exponent>:
 8022ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022eca:	4603      	mov	r3, r0
 8022ecc:	2900      	cmp	r1, #0
 8022ece:	bfb8      	it	lt
 8022ed0:	4249      	neglt	r1, r1
 8022ed2:	f803 2b02 	strb.w	r2, [r3], #2
 8022ed6:	bfb4      	ite	lt
 8022ed8:	222d      	movlt	r2, #45	; 0x2d
 8022eda:	222b      	movge	r2, #43	; 0x2b
 8022edc:	2909      	cmp	r1, #9
 8022ede:	7042      	strb	r2, [r0, #1]
 8022ee0:	dd2a      	ble.n	8022f38 <__exponent+0x70>
 8022ee2:	f10d 0407 	add.w	r4, sp, #7
 8022ee6:	46a4      	mov	ip, r4
 8022ee8:	270a      	movs	r7, #10
 8022eea:	46a6      	mov	lr, r4
 8022eec:	460a      	mov	r2, r1
 8022eee:	fb91 f6f7 	sdiv	r6, r1, r7
 8022ef2:	fb07 1516 	mls	r5, r7, r6, r1
 8022ef6:	3530      	adds	r5, #48	; 0x30
 8022ef8:	2a63      	cmp	r2, #99	; 0x63
 8022efa:	f104 34ff 	add.w	r4, r4, #4294967295
 8022efe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022f02:	4631      	mov	r1, r6
 8022f04:	dcf1      	bgt.n	8022eea <__exponent+0x22>
 8022f06:	3130      	adds	r1, #48	; 0x30
 8022f08:	f1ae 0502 	sub.w	r5, lr, #2
 8022f0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8022f10:	1c44      	adds	r4, r0, #1
 8022f12:	4629      	mov	r1, r5
 8022f14:	4561      	cmp	r1, ip
 8022f16:	d30a      	bcc.n	8022f2e <__exponent+0x66>
 8022f18:	f10d 0209 	add.w	r2, sp, #9
 8022f1c:	eba2 020e 	sub.w	r2, r2, lr
 8022f20:	4565      	cmp	r5, ip
 8022f22:	bf88      	it	hi
 8022f24:	2200      	movhi	r2, #0
 8022f26:	4413      	add	r3, r2
 8022f28:	1a18      	subs	r0, r3, r0
 8022f2a:	b003      	add	sp, #12
 8022f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022f32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8022f36:	e7ed      	b.n	8022f14 <__exponent+0x4c>
 8022f38:	2330      	movs	r3, #48	; 0x30
 8022f3a:	3130      	adds	r1, #48	; 0x30
 8022f3c:	7083      	strb	r3, [r0, #2]
 8022f3e:	70c1      	strb	r1, [r0, #3]
 8022f40:	1d03      	adds	r3, r0, #4
 8022f42:	e7f1      	b.n	8022f28 <__exponent+0x60>

08022f44 <_printf_float>:
 8022f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f48:	ed2d 8b02 	vpush	{d8}
 8022f4c:	b08d      	sub	sp, #52	; 0x34
 8022f4e:	460c      	mov	r4, r1
 8022f50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8022f54:	4616      	mov	r6, r2
 8022f56:	461f      	mov	r7, r3
 8022f58:	4605      	mov	r5, r0
 8022f5a:	f7ff fa6b 	bl	8022434 <_localeconv_r>
 8022f5e:	f8d0 a000 	ldr.w	sl, [r0]
 8022f62:	4650      	mov	r0, sl
 8022f64:	f7dd f93e 	bl	80001e4 <strlen>
 8022f68:	2300      	movs	r3, #0
 8022f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8022f6c:	6823      	ldr	r3, [r4, #0]
 8022f6e:	9305      	str	r3, [sp, #20]
 8022f70:	f8d8 3000 	ldr.w	r3, [r8]
 8022f74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8022f78:	3307      	adds	r3, #7
 8022f7a:	f023 0307 	bic.w	r3, r3, #7
 8022f7e:	f103 0208 	add.w	r2, r3, #8
 8022f82:	f8c8 2000 	str.w	r2, [r8]
 8022f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8022f8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8022f92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022f96:	9307      	str	r3, [sp, #28]
 8022f98:	f8cd 8018 	str.w	r8, [sp, #24]
 8022f9c:	ee08 0a10 	vmov	s16, r0
 8022fa0:	4b9f      	ldr	r3, [pc, #636]	; (8023220 <_printf_float+0x2dc>)
 8022fa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8022faa:	f7dd fdcf 	bl	8000b4c <__aeabi_dcmpun>
 8022fae:	bb88      	cbnz	r0, 8023014 <_printf_float+0xd0>
 8022fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022fb4:	4b9a      	ldr	r3, [pc, #616]	; (8023220 <_printf_float+0x2dc>)
 8022fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8022fba:	f7dd fda9 	bl	8000b10 <__aeabi_dcmple>
 8022fbe:	bb48      	cbnz	r0, 8023014 <_printf_float+0xd0>
 8022fc0:	2200      	movs	r2, #0
 8022fc2:	2300      	movs	r3, #0
 8022fc4:	4640      	mov	r0, r8
 8022fc6:	4649      	mov	r1, r9
 8022fc8:	f7dd fd98 	bl	8000afc <__aeabi_dcmplt>
 8022fcc:	b110      	cbz	r0, 8022fd4 <_printf_float+0x90>
 8022fce:	232d      	movs	r3, #45	; 0x2d
 8022fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022fd4:	4b93      	ldr	r3, [pc, #588]	; (8023224 <_printf_float+0x2e0>)
 8022fd6:	4894      	ldr	r0, [pc, #592]	; (8023228 <_printf_float+0x2e4>)
 8022fd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8022fdc:	bf94      	ite	ls
 8022fde:	4698      	movls	r8, r3
 8022fe0:	4680      	movhi	r8, r0
 8022fe2:	2303      	movs	r3, #3
 8022fe4:	6123      	str	r3, [r4, #16]
 8022fe6:	9b05      	ldr	r3, [sp, #20]
 8022fe8:	f023 0204 	bic.w	r2, r3, #4
 8022fec:	6022      	str	r2, [r4, #0]
 8022fee:	f04f 0900 	mov.w	r9, #0
 8022ff2:	9700      	str	r7, [sp, #0]
 8022ff4:	4633      	mov	r3, r6
 8022ff6:	aa0b      	add	r2, sp, #44	; 0x2c
 8022ff8:	4621      	mov	r1, r4
 8022ffa:	4628      	mov	r0, r5
 8022ffc:	f000 f9d8 	bl	80233b0 <_printf_common>
 8023000:	3001      	adds	r0, #1
 8023002:	f040 8090 	bne.w	8023126 <_printf_float+0x1e2>
 8023006:	f04f 30ff 	mov.w	r0, #4294967295
 802300a:	b00d      	add	sp, #52	; 0x34
 802300c:	ecbd 8b02 	vpop	{d8}
 8023010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023014:	4642      	mov	r2, r8
 8023016:	464b      	mov	r3, r9
 8023018:	4640      	mov	r0, r8
 802301a:	4649      	mov	r1, r9
 802301c:	f7dd fd96 	bl	8000b4c <__aeabi_dcmpun>
 8023020:	b140      	cbz	r0, 8023034 <_printf_float+0xf0>
 8023022:	464b      	mov	r3, r9
 8023024:	2b00      	cmp	r3, #0
 8023026:	bfbc      	itt	lt
 8023028:	232d      	movlt	r3, #45	; 0x2d
 802302a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802302e:	487f      	ldr	r0, [pc, #508]	; (802322c <_printf_float+0x2e8>)
 8023030:	4b7f      	ldr	r3, [pc, #508]	; (8023230 <_printf_float+0x2ec>)
 8023032:	e7d1      	b.n	8022fd8 <_printf_float+0x94>
 8023034:	6863      	ldr	r3, [r4, #4]
 8023036:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802303a:	9206      	str	r2, [sp, #24]
 802303c:	1c5a      	adds	r2, r3, #1
 802303e:	d13f      	bne.n	80230c0 <_printf_float+0x17c>
 8023040:	2306      	movs	r3, #6
 8023042:	6063      	str	r3, [r4, #4]
 8023044:	9b05      	ldr	r3, [sp, #20]
 8023046:	6861      	ldr	r1, [r4, #4]
 8023048:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802304c:	2300      	movs	r3, #0
 802304e:	9303      	str	r3, [sp, #12]
 8023050:	ab0a      	add	r3, sp, #40	; 0x28
 8023052:	e9cd b301 	strd	fp, r3, [sp, #4]
 8023056:	ab09      	add	r3, sp, #36	; 0x24
 8023058:	ec49 8b10 	vmov	d0, r8, r9
 802305c:	9300      	str	r3, [sp, #0]
 802305e:	6022      	str	r2, [r4, #0]
 8023060:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8023064:	4628      	mov	r0, r5
 8023066:	f7ff fecd 	bl	8022e04 <__cvt>
 802306a:	9b06      	ldr	r3, [sp, #24]
 802306c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802306e:	2b47      	cmp	r3, #71	; 0x47
 8023070:	4680      	mov	r8, r0
 8023072:	d108      	bne.n	8023086 <_printf_float+0x142>
 8023074:	1cc8      	adds	r0, r1, #3
 8023076:	db02      	blt.n	802307e <_printf_float+0x13a>
 8023078:	6863      	ldr	r3, [r4, #4]
 802307a:	4299      	cmp	r1, r3
 802307c:	dd41      	ble.n	8023102 <_printf_float+0x1be>
 802307e:	f1ab 0b02 	sub.w	fp, fp, #2
 8023082:	fa5f fb8b 	uxtb.w	fp, fp
 8023086:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802308a:	d820      	bhi.n	80230ce <_printf_float+0x18a>
 802308c:	3901      	subs	r1, #1
 802308e:	465a      	mov	r2, fp
 8023090:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023094:	9109      	str	r1, [sp, #36]	; 0x24
 8023096:	f7ff ff17 	bl	8022ec8 <__exponent>
 802309a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802309c:	1813      	adds	r3, r2, r0
 802309e:	2a01      	cmp	r2, #1
 80230a0:	4681      	mov	r9, r0
 80230a2:	6123      	str	r3, [r4, #16]
 80230a4:	dc02      	bgt.n	80230ac <_printf_float+0x168>
 80230a6:	6822      	ldr	r2, [r4, #0]
 80230a8:	07d2      	lsls	r2, r2, #31
 80230aa:	d501      	bpl.n	80230b0 <_printf_float+0x16c>
 80230ac:	3301      	adds	r3, #1
 80230ae:	6123      	str	r3, [r4, #16]
 80230b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d09c      	beq.n	8022ff2 <_printf_float+0xae>
 80230b8:	232d      	movs	r3, #45	; 0x2d
 80230ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80230be:	e798      	b.n	8022ff2 <_printf_float+0xae>
 80230c0:	9a06      	ldr	r2, [sp, #24]
 80230c2:	2a47      	cmp	r2, #71	; 0x47
 80230c4:	d1be      	bne.n	8023044 <_printf_float+0x100>
 80230c6:	2b00      	cmp	r3, #0
 80230c8:	d1bc      	bne.n	8023044 <_printf_float+0x100>
 80230ca:	2301      	movs	r3, #1
 80230cc:	e7b9      	b.n	8023042 <_printf_float+0xfe>
 80230ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80230d2:	d118      	bne.n	8023106 <_printf_float+0x1c2>
 80230d4:	2900      	cmp	r1, #0
 80230d6:	6863      	ldr	r3, [r4, #4]
 80230d8:	dd0b      	ble.n	80230f2 <_printf_float+0x1ae>
 80230da:	6121      	str	r1, [r4, #16]
 80230dc:	b913      	cbnz	r3, 80230e4 <_printf_float+0x1a0>
 80230de:	6822      	ldr	r2, [r4, #0]
 80230e0:	07d0      	lsls	r0, r2, #31
 80230e2:	d502      	bpl.n	80230ea <_printf_float+0x1a6>
 80230e4:	3301      	adds	r3, #1
 80230e6:	440b      	add	r3, r1
 80230e8:	6123      	str	r3, [r4, #16]
 80230ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80230ec:	f04f 0900 	mov.w	r9, #0
 80230f0:	e7de      	b.n	80230b0 <_printf_float+0x16c>
 80230f2:	b913      	cbnz	r3, 80230fa <_printf_float+0x1b6>
 80230f4:	6822      	ldr	r2, [r4, #0]
 80230f6:	07d2      	lsls	r2, r2, #31
 80230f8:	d501      	bpl.n	80230fe <_printf_float+0x1ba>
 80230fa:	3302      	adds	r3, #2
 80230fc:	e7f4      	b.n	80230e8 <_printf_float+0x1a4>
 80230fe:	2301      	movs	r3, #1
 8023100:	e7f2      	b.n	80230e8 <_printf_float+0x1a4>
 8023102:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8023106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023108:	4299      	cmp	r1, r3
 802310a:	db05      	blt.n	8023118 <_printf_float+0x1d4>
 802310c:	6823      	ldr	r3, [r4, #0]
 802310e:	6121      	str	r1, [r4, #16]
 8023110:	07d8      	lsls	r0, r3, #31
 8023112:	d5ea      	bpl.n	80230ea <_printf_float+0x1a6>
 8023114:	1c4b      	adds	r3, r1, #1
 8023116:	e7e7      	b.n	80230e8 <_printf_float+0x1a4>
 8023118:	2900      	cmp	r1, #0
 802311a:	bfd4      	ite	le
 802311c:	f1c1 0202 	rsble	r2, r1, #2
 8023120:	2201      	movgt	r2, #1
 8023122:	4413      	add	r3, r2
 8023124:	e7e0      	b.n	80230e8 <_printf_float+0x1a4>
 8023126:	6823      	ldr	r3, [r4, #0]
 8023128:	055a      	lsls	r2, r3, #21
 802312a:	d407      	bmi.n	802313c <_printf_float+0x1f8>
 802312c:	6923      	ldr	r3, [r4, #16]
 802312e:	4642      	mov	r2, r8
 8023130:	4631      	mov	r1, r6
 8023132:	4628      	mov	r0, r5
 8023134:	47b8      	blx	r7
 8023136:	3001      	adds	r0, #1
 8023138:	d12c      	bne.n	8023194 <_printf_float+0x250>
 802313a:	e764      	b.n	8023006 <_printf_float+0xc2>
 802313c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023140:	f240 80e0 	bls.w	8023304 <_printf_float+0x3c0>
 8023144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023148:	2200      	movs	r2, #0
 802314a:	2300      	movs	r3, #0
 802314c:	f7dd fccc 	bl	8000ae8 <__aeabi_dcmpeq>
 8023150:	2800      	cmp	r0, #0
 8023152:	d034      	beq.n	80231be <_printf_float+0x27a>
 8023154:	4a37      	ldr	r2, [pc, #220]	; (8023234 <_printf_float+0x2f0>)
 8023156:	2301      	movs	r3, #1
 8023158:	4631      	mov	r1, r6
 802315a:	4628      	mov	r0, r5
 802315c:	47b8      	blx	r7
 802315e:	3001      	adds	r0, #1
 8023160:	f43f af51 	beq.w	8023006 <_printf_float+0xc2>
 8023164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023168:	429a      	cmp	r2, r3
 802316a:	db02      	blt.n	8023172 <_printf_float+0x22e>
 802316c:	6823      	ldr	r3, [r4, #0]
 802316e:	07d8      	lsls	r0, r3, #31
 8023170:	d510      	bpl.n	8023194 <_printf_float+0x250>
 8023172:	ee18 3a10 	vmov	r3, s16
 8023176:	4652      	mov	r2, sl
 8023178:	4631      	mov	r1, r6
 802317a:	4628      	mov	r0, r5
 802317c:	47b8      	blx	r7
 802317e:	3001      	adds	r0, #1
 8023180:	f43f af41 	beq.w	8023006 <_printf_float+0xc2>
 8023184:	f04f 0800 	mov.w	r8, #0
 8023188:	f104 091a 	add.w	r9, r4, #26
 802318c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802318e:	3b01      	subs	r3, #1
 8023190:	4543      	cmp	r3, r8
 8023192:	dc09      	bgt.n	80231a8 <_printf_float+0x264>
 8023194:	6823      	ldr	r3, [r4, #0]
 8023196:	079b      	lsls	r3, r3, #30
 8023198:	f100 8105 	bmi.w	80233a6 <_printf_float+0x462>
 802319c:	68e0      	ldr	r0, [r4, #12]
 802319e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80231a0:	4298      	cmp	r0, r3
 80231a2:	bfb8      	it	lt
 80231a4:	4618      	movlt	r0, r3
 80231a6:	e730      	b.n	802300a <_printf_float+0xc6>
 80231a8:	2301      	movs	r3, #1
 80231aa:	464a      	mov	r2, r9
 80231ac:	4631      	mov	r1, r6
 80231ae:	4628      	mov	r0, r5
 80231b0:	47b8      	blx	r7
 80231b2:	3001      	adds	r0, #1
 80231b4:	f43f af27 	beq.w	8023006 <_printf_float+0xc2>
 80231b8:	f108 0801 	add.w	r8, r8, #1
 80231bc:	e7e6      	b.n	802318c <_printf_float+0x248>
 80231be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231c0:	2b00      	cmp	r3, #0
 80231c2:	dc39      	bgt.n	8023238 <_printf_float+0x2f4>
 80231c4:	4a1b      	ldr	r2, [pc, #108]	; (8023234 <_printf_float+0x2f0>)
 80231c6:	2301      	movs	r3, #1
 80231c8:	4631      	mov	r1, r6
 80231ca:	4628      	mov	r0, r5
 80231cc:	47b8      	blx	r7
 80231ce:	3001      	adds	r0, #1
 80231d0:	f43f af19 	beq.w	8023006 <_printf_float+0xc2>
 80231d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80231d8:	4313      	orrs	r3, r2
 80231da:	d102      	bne.n	80231e2 <_printf_float+0x29e>
 80231dc:	6823      	ldr	r3, [r4, #0]
 80231de:	07d9      	lsls	r1, r3, #31
 80231e0:	d5d8      	bpl.n	8023194 <_printf_float+0x250>
 80231e2:	ee18 3a10 	vmov	r3, s16
 80231e6:	4652      	mov	r2, sl
 80231e8:	4631      	mov	r1, r6
 80231ea:	4628      	mov	r0, r5
 80231ec:	47b8      	blx	r7
 80231ee:	3001      	adds	r0, #1
 80231f0:	f43f af09 	beq.w	8023006 <_printf_float+0xc2>
 80231f4:	f04f 0900 	mov.w	r9, #0
 80231f8:	f104 0a1a 	add.w	sl, r4, #26
 80231fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231fe:	425b      	negs	r3, r3
 8023200:	454b      	cmp	r3, r9
 8023202:	dc01      	bgt.n	8023208 <_printf_float+0x2c4>
 8023204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023206:	e792      	b.n	802312e <_printf_float+0x1ea>
 8023208:	2301      	movs	r3, #1
 802320a:	4652      	mov	r2, sl
 802320c:	4631      	mov	r1, r6
 802320e:	4628      	mov	r0, r5
 8023210:	47b8      	blx	r7
 8023212:	3001      	adds	r0, #1
 8023214:	f43f aef7 	beq.w	8023006 <_printf_float+0xc2>
 8023218:	f109 0901 	add.w	r9, r9, #1
 802321c:	e7ee      	b.n	80231fc <_printf_float+0x2b8>
 802321e:	bf00      	nop
 8023220:	7fefffff 	.word	0x7fefffff
 8023224:	080339ed 	.word	0x080339ed
 8023228:	080339f1 	.word	0x080339f1
 802322c:	080339f9 	.word	0x080339f9
 8023230:	080339f5 	.word	0x080339f5
 8023234:	0803280a 	.word	0x0803280a
 8023238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802323a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802323c:	429a      	cmp	r2, r3
 802323e:	bfa8      	it	ge
 8023240:	461a      	movge	r2, r3
 8023242:	2a00      	cmp	r2, #0
 8023244:	4691      	mov	r9, r2
 8023246:	dc37      	bgt.n	80232b8 <_printf_float+0x374>
 8023248:	f04f 0b00 	mov.w	fp, #0
 802324c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023250:	f104 021a 	add.w	r2, r4, #26
 8023254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023256:	9305      	str	r3, [sp, #20]
 8023258:	eba3 0309 	sub.w	r3, r3, r9
 802325c:	455b      	cmp	r3, fp
 802325e:	dc33      	bgt.n	80232c8 <_printf_float+0x384>
 8023260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023264:	429a      	cmp	r2, r3
 8023266:	db3b      	blt.n	80232e0 <_printf_float+0x39c>
 8023268:	6823      	ldr	r3, [r4, #0]
 802326a:	07da      	lsls	r2, r3, #31
 802326c:	d438      	bmi.n	80232e0 <_printf_float+0x39c>
 802326e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023270:	9b05      	ldr	r3, [sp, #20]
 8023272:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023274:	1ad3      	subs	r3, r2, r3
 8023276:	eba2 0901 	sub.w	r9, r2, r1
 802327a:	4599      	cmp	r9, r3
 802327c:	bfa8      	it	ge
 802327e:	4699      	movge	r9, r3
 8023280:	f1b9 0f00 	cmp.w	r9, #0
 8023284:	dc35      	bgt.n	80232f2 <_printf_float+0x3ae>
 8023286:	f04f 0800 	mov.w	r8, #0
 802328a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802328e:	f104 0a1a 	add.w	sl, r4, #26
 8023292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023296:	1a9b      	subs	r3, r3, r2
 8023298:	eba3 0309 	sub.w	r3, r3, r9
 802329c:	4543      	cmp	r3, r8
 802329e:	f77f af79 	ble.w	8023194 <_printf_float+0x250>
 80232a2:	2301      	movs	r3, #1
 80232a4:	4652      	mov	r2, sl
 80232a6:	4631      	mov	r1, r6
 80232a8:	4628      	mov	r0, r5
 80232aa:	47b8      	blx	r7
 80232ac:	3001      	adds	r0, #1
 80232ae:	f43f aeaa 	beq.w	8023006 <_printf_float+0xc2>
 80232b2:	f108 0801 	add.w	r8, r8, #1
 80232b6:	e7ec      	b.n	8023292 <_printf_float+0x34e>
 80232b8:	4613      	mov	r3, r2
 80232ba:	4631      	mov	r1, r6
 80232bc:	4642      	mov	r2, r8
 80232be:	4628      	mov	r0, r5
 80232c0:	47b8      	blx	r7
 80232c2:	3001      	adds	r0, #1
 80232c4:	d1c0      	bne.n	8023248 <_printf_float+0x304>
 80232c6:	e69e      	b.n	8023006 <_printf_float+0xc2>
 80232c8:	2301      	movs	r3, #1
 80232ca:	4631      	mov	r1, r6
 80232cc:	4628      	mov	r0, r5
 80232ce:	9205      	str	r2, [sp, #20]
 80232d0:	47b8      	blx	r7
 80232d2:	3001      	adds	r0, #1
 80232d4:	f43f ae97 	beq.w	8023006 <_printf_float+0xc2>
 80232d8:	9a05      	ldr	r2, [sp, #20]
 80232da:	f10b 0b01 	add.w	fp, fp, #1
 80232de:	e7b9      	b.n	8023254 <_printf_float+0x310>
 80232e0:	ee18 3a10 	vmov	r3, s16
 80232e4:	4652      	mov	r2, sl
 80232e6:	4631      	mov	r1, r6
 80232e8:	4628      	mov	r0, r5
 80232ea:	47b8      	blx	r7
 80232ec:	3001      	adds	r0, #1
 80232ee:	d1be      	bne.n	802326e <_printf_float+0x32a>
 80232f0:	e689      	b.n	8023006 <_printf_float+0xc2>
 80232f2:	9a05      	ldr	r2, [sp, #20]
 80232f4:	464b      	mov	r3, r9
 80232f6:	4442      	add	r2, r8
 80232f8:	4631      	mov	r1, r6
 80232fa:	4628      	mov	r0, r5
 80232fc:	47b8      	blx	r7
 80232fe:	3001      	adds	r0, #1
 8023300:	d1c1      	bne.n	8023286 <_printf_float+0x342>
 8023302:	e680      	b.n	8023006 <_printf_float+0xc2>
 8023304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023306:	2a01      	cmp	r2, #1
 8023308:	dc01      	bgt.n	802330e <_printf_float+0x3ca>
 802330a:	07db      	lsls	r3, r3, #31
 802330c:	d538      	bpl.n	8023380 <_printf_float+0x43c>
 802330e:	2301      	movs	r3, #1
 8023310:	4642      	mov	r2, r8
 8023312:	4631      	mov	r1, r6
 8023314:	4628      	mov	r0, r5
 8023316:	47b8      	blx	r7
 8023318:	3001      	adds	r0, #1
 802331a:	f43f ae74 	beq.w	8023006 <_printf_float+0xc2>
 802331e:	ee18 3a10 	vmov	r3, s16
 8023322:	4652      	mov	r2, sl
 8023324:	4631      	mov	r1, r6
 8023326:	4628      	mov	r0, r5
 8023328:	47b8      	blx	r7
 802332a:	3001      	adds	r0, #1
 802332c:	f43f ae6b 	beq.w	8023006 <_printf_float+0xc2>
 8023330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023334:	2200      	movs	r2, #0
 8023336:	2300      	movs	r3, #0
 8023338:	f7dd fbd6 	bl	8000ae8 <__aeabi_dcmpeq>
 802333c:	b9d8      	cbnz	r0, 8023376 <_printf_float+0x432>
 802333e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023340:	f108 0201 	add.w	r2, r8, #1
 8023344:	3b01      	subs	r3, #1
 8023346:	4631      	mov	r1, r6
 8023348:	4628      	mov	r0, r5
 802334a:	47b8      	blx	r7
 802334c:	3001      	adds	r0, #1
 802334e:	d10e      	bne.n	802336e <_printf_float+0x42a>
 8023350:	e659      	b.n	8023006 <_printf_float+0xc2>
 8023352:	2301      	movs	r3, #1
 8023354:	4652      	mov	r2, sl
 8023356:	4631      	mov	r1, r6
 8023358:	4628      	mov	r0, r5
 802335a:	47b8      	blx	r7
 802335c:	3001      	adds	r0, #1
 802335e:	f43f ae52 	beq.w	8023006 <_printf_float+0xc2>
 8023362:	f108 0801 	add.w	r8, r8, #1
 8023366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023368:	3b01      	subs	r3, #1
 802336a:	4543      	cmp	r3, r8
 802336c:	dcf1      	bgt.n	8023352 <_printf_float+0x40e>
 802336e:	464b      	mov	r3, r9
 8023370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8023374:	e6dc      	b.n	8023130 <_printf_float+0x1ec>
 8023376:	f04f 0800 	mov.w	r8, #0
 802337a:	f104 0a1a 	add.w	sl, r4, #26
 802337e:	e7f2      	b.n	8023366 <_printf_float+0x422>
 8023380:	2301      	movs	r3, #1
 8023382:	4642      	mov	r2, r8
 8023384:	e7df      	b.n	8023346 <_printf_float+0x402>
 8023386:	2301      	movs	r3, #1
 8023388:	464a      	mov	r2, r9
 802338a:	4631      	mov	r1, r6
 802338c:	4628      	mov	r0, r5
 802338e:	47b8      	blx	r7
 8023390:	3001      	adds	r0, #1
 8023392:	f43f ae38 	beq.w	8023006 <_printf_float+0xc2>
 8023396:	f108 0801 	add.w	r8, r8, #1
 802339a:	68e3      	ldr	r3, [r4, #12]
 802339c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802339e:	1a5b      	subs	r3, r3, r1
 80233a0:	4543      	cmp	r3, r8
 80233a2:	dcf0      	bgt.n	8023386 <_printf_float+0x442>
 80233a4:	e6fa      	b.n	802319c <_printf_float+0x258>
 80233a6:	f04f 0800 	mov.w	r8, #0
 80233aa:	f104 0919 	add.w	r9, r4, #25
 80233ae:	e7f4      	b.n	802339a <_printf_float+0x456>

080233b0 <_printf_common>:
 80233b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80233b4:	4616      	mov	r6, r2
 80233b6:	4699      	mov	r9, r3
 80233b8:	688a      	ldr	r2, [r1, #8]
 80233ba:	690b      	ldr	r3, [r1, #16]
 80233bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80233c0:	4293      	cmp	r3, r2
 80233c2:	bfb8      	it	lt
 80233c4:	4613      	movlt	r3, r2
 80233c6:	6033      	str	r3, [r6, #0]
 80233c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80233cc:	4607      	mov	r7, r0
 80233ce:	460c      	mov	r4, r1
 80233d0:	b10a      	cbz	r2, 80233d6 <_printf_common+0x26>
 80233d2:	3301      	adds	r3, #1
 80233d4:	6033      	str	r3, [r6, #0]
 80233d6:	6823      	ldr	r3, [r4, #0]
 80233d8:	0699      	lsls	r1, r3, #26
 80233da:	bf42      	ittt	mi
 80233dc:	6833      	ldrmi	r3, [r6, #0]
 80233de:	3302      	addmi	r3, #2
 80233e0:	6033      	strmi	r3, [r6, #0]
 80233e2:	6825      	ldr	r5, [r4, #0]
 80233e4:	f015 0506 	ands.w	r5, r5, #6
 80233e8:	d106      	bne.n	80233f8 <_printf_common+0x48>
 80233ea:	f104 0a19 	add.w	sl, r4, #25
 80233ee:	68e3      	ldr	r3, [r4, #12]
 80233f0:	6832      	ldr	r2, [r6, #0]
 80233f2:	1a9b      	subs	r3, r3, r2
 80233f4:	42ab      	cmp	r3, r5
 80233f6:	dc26      	bgt.n	8023446 <_printf_common+0x96>
 80233f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80233fc:	1e13      	subs	r3, r2, #0
 80233fe:	6822      	ldr	r2, [r4, #0]
 8023400:	bf18      	it	ne
 8023402:	2301      	movne	r3, #1
 8023404:	0692      	lsls	r2, r2, #26
 8023406:	d42b      	bmi.n	8023460 <_printf_common+0xb0>
 8023408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802340c:	4649      	mov	r1, r9
 802340e:	4638      	mov	r0, r7
 8023410:	47c0      	blx	r8
 8023412:	3001      	adds	r0, #1
 8023414:	d01e      	beq.n	8023454 <_printf_common+0xa4>
 8023416:	6823      	ldr	r3, [r4, #0]
 8023418:	68e5      	ldr	r5, [r4, #12]
 802341a:	6832      	ldr	r2, [r6, #0]
 802341c:	f003 0306 	and.w	r3, r3, #6
 8023420:	2b04      	cmp	r3, #4
 8023422:	bf08      	it	eq
 8023424:	1aad      	subeq	r5, r5, r2
 8023426:	68a3      	ldr	r3, [r4, #8]
 8023428:	6922      	ldr	r2, [r4, #16]
 802342a:	bf0c      	ite	eq
 802342c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023430:	2500      	movne	r5, #0
 8023432:	4293      	cmp	r3, r2
 8023434:	bfc4      	itt	gt
 8023436:	1a9b      	subgt	r3, r3, r2
 8023438:	18ed      	addgt	r5, r5, r3
 802343a:	2600      	movs	r6, #0
 802343c:	341a      	adds	r4, #26
 802343e:	42b5      	cmp	r5, r6
 8023440:	d11a      	bne.n	8023478 <_printf_common+0xc8>
 8023442:	2000      	movs	r0, #0
 8023444:	e008      	b.n	8023458 <_printf_common+0xa8>
 8023446:	2301      	movs	r3, #1
 8023448:	4652      	mov	r2, sl
 802344a:	4649      	mov	r1, r9
 802344c:	4638      	mov	r0, r7
 802344e:	47c0      	blx	r8
 8023450:	3001      	adds	r0, #1
 8023452:	d103      	bne.n	802345c <_printf_common+0xac>
 8023454:	f04f 30ff 	mov.w	r0, #4294967295
 8023458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802345c:	3501      	adds	r5, #1
 802345e:	e7c6      	b.n	80233ee <_printf_common+0x3e>
 8023460:	18e1      	adds	r1, r4, r3
 8023462:	1c5a      	adds	r2, r3, #1
 8023464:	2030      	movs	r0, #48	; 0x30
 8023466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802346a:	4422      	add	r2, r4
 802346c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023474:	3302      	adds	r3, #2
 8023476:	e7c7      	b.n	8023408 <_printf_common+0x58>
 8023478:	2301      	movs	r3, #1
 802347a:	4622      	mov	r2, r4
 802347c:	4649      	mov	r1, r9
 802347e:	4638      	mov	r0, r7
 8023480:	47c0      	blx	r8
 8023482:	3001      	adds	r0, #1
 8023484:	d0e6      	beq.n	8023454 <_printf_common+0xa4>
 8023486:	3601      	adds	r6, #1
 8023488:	e7d9      	b.n	802343e <_printf_common+0x8e>
	...

0802348c <_printf_i>:
 802348c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023490:	460c      	mov	r4, r1
 8023492:	4691      	mov	r9, r2
 8023494:	7e27      	ldrb	r7, [r4, #24]
 8023496:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023498:	2f78      	cmp	r7, #120	; 0x78
 802349a:	4680      	mov	r8, r0
 802349c:	469a      	mov	sl, r3
 802349e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80234a2:	d807      	bhi.n	80234b4 <_printf_i+0x28>
 80234a4:	2f62      	cmp	r7, #98	; 0x62
 80234a6:	d80a      	bhi.n	80234be <_printf_i+0x32>
 80234a8:	2f00      	cmp	r7, #0
 80234aa:	f000 80d8 	beq.w	802365e <_printf_i+0x1d2>
 80234ae:	2f58      	cmp	r7, #88	; 0x58
 80234b0:	f000 80a3 	beq.w	80235fa <_printf_i+0x16e>
 80234b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80234b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80234bc:	e03a      	b.n	8023534 <_printf_i+0xa8>
 80234be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80234c2:	2b15      	cmp	r3, #21
 80234c4:	d8f6      	bhi.n	80234b4 <_printf_i+0x28>
 80234c6:	a001      	add	r0, pc, #4	; (adr r0, 80234cc <_printf_i+0x40>)
 80234c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80234cc:	08023525 	.word	0x08023525
 80234d0:	08023539 	.word	0x08023539
 80234d4:	080234b5 	.word	0x080234b5
 80234d8:	080234b5 	.word	0x080234b5
 80234dc:	080234b5 	.word	0x080234b5
 80234e0:	080234b5 	.word	0x080234b5
 80234e4:	08023539 	.word	0x08023539
 80234e8:	080234b5 	.word	0x080234b5
 80234ec:	080234b5 	.word	0x080234b5
 80234f0:	080234b5 	.word	0x080234b5
 80234f4:	080234b5 	.word	0x080234b5
 80234f8:	08023645 	.word	0x08023645
 80234fc:	08023569 	.word	0x08023569
 8023500:	08023627 	.word	0x08023627
 8023504:	080234b5 	.word	0x080234b5
 8023508:	080234b5 	.word	0x080234b5
 802350c:	08023667 	.word	0x08023667
 8023510:	080234b5 	.word	0x080234b5
 8023514:	08023569 	.word	0x08023569
 8023518:	080234b5 	.word	0x080234b5
 802351c:	080234b5 	.word	0x080234b5
 8023520:	0802362f 	.word	0x0802362f
 8023524:	680b      	ldr	r3, [r1, #0]
 8023526:	1d1a      	adds	r2, r3, #4
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	600a      	str	r2, [r1, #0]
 802352c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023534:	2301      	movs	r3, #1
 8023536:	e0a3      	b.n	8023680 <_printf_i+0x1f4>
 8023538:	6825      	ldr	r5, [r4, #0]
 802353a:	6808      	ldr	r0, [r1, #0]
 802353c:	062e      	lsls	r6, r5, #24
 802353e:	f100 0304 	add.w	r3, r0, #4
 8023542:	d50a      	bpl.n	802355a <_printf_i+0xce>
 8023544:	6805      	ldr	r5, [r0, #0]
 8023546:	600b      	str	r3, [r1, #0]
 8023548:	2d00      	cmp	r5, #0
 802354a:	da03      	bge.n	8023554 <_printf_i+0xc8>
 802354c:	232d      	movs	r3, #45	; 0x2d
 802354e:	426d      	negs	r5, r5
 8023550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023554:	485e      	ldr	r0, [pc, #376]	; (80236d0 <_printf_i+0x244>)
 8023556:	230a      	movs	r3, #10
 8023558:	e019      	b.n	802358e <_printf_i+0x102>
 802355a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802355e:	6805      	ldr	r5, [r0, #0]
 8023560:	600b      	str	r3, [r1, #0]
 8023562:	bf18      	it	ne
 8023564:	b22d      	sxthne	r5, r5
 8023566:	e7ef      	b.n	8023548 <_printf_i+0xbc>
 8023568:	680b      	ldr	r3, [r1, #0]
 802356a:	6825      	ldr	r5, [r4, #0]
 802356c:	1d18      	adds	r0, r3, #4
 802356e:	6008      	str	r0, [r1, #0]
 8023570:	0628      	lsls	r0, r5, #24
 8023572:	d501      	bpl.n	8023578 <_printf_i+0xec>
 8023574:	681d      	ldr	r5, [r3, #0]
 8023576:	e002      	b.n	802357e <_printf_i+0xf2>
 8023578:	0669      	lsls	r1, r5, #25
 802357a:	d5fb      	bpl.n	8023574 <_printf_i+0xe8>
 802357c:	881d      	ldrh	r5, [r3, #0]
 802357e:	4854      	ldr	r0, [pc, #336]	; (80236d0 <_printf_i+0x244>)
 8023580:	2f6f      	cmp	r7, #111	; 0x6f
 8023582:	bf0c      	ite	eq
 8023584:	2308      	moveq	r3, #8
 8023586:	230a      	movne	r3, #10
 8023588:	2100      	movs	r1, #0
 802358a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802358e:	6866      	ldr	r6, [r4, #4]
 8023590:	60a6      	str	r6, [r4, #8]
 8023592:	2e00      	cmp	r6, #0
 8023594:	bfa2      	ittt	ge
 8023596:	6821      	ldrge	r1, [r4, #0]
 8023598:	f021 0104 	bicge.w	r1, r1, #4
 802359c:	6021      	strge	r1, [r4, #0]
 802359e:	b90d      	cbnz	r5, 80235a4 <_printf_i+0x118>
 80235a0:	2e00      	cmp	r6, #0
 80235a2:	d04d      	beq.n	8023640 <_printf_i+0x1b4>
 80235a4:	4616      	mov	r6, r2
 80235a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80235aa:	fb03 5711 	mls	r7, r3, r1, r5
 80235ae:	5dc7      	ldrb	r7, [r0, r7]
 80235b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80235b4:	462f      	mov	r7, r5
 80235b6:	42bb      	cmp	r3, r7
 80235b8:	460d      	mov	r5, r1
 80235ba:	d9f4      	bls.n	80235a6 <_printf_i+0x11a>
 80235bc:	2b08      	cmp	r3, #8
 80235be:	d10b      	bne.n	80235d8 <_printf_i+0x14c>
 80235c0:	6823      	ldr	r3, [r4, #0]
 80235c2:	07df      	lsls	r7, r3, #31
 80235c4:	d508      	bpl.n	80235d8 <_printf_i+0x14c>
 80235c6:	6923      	ldr	r3, [r4, #16]
 80235c8:	6861      	ldr	r1, [r4, #4]
 80235ca:	4299      	cmp	r1, r3
 80235cc:	bfde      	ittt	le
 80235ce:	2330      	movle	r3, #48	; 0x30
 80235d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80235d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80235d8:	1b92      	subs	r2, r2, r6
 80235da:	6122      	str	r2, [r4, #16]
 80235dc:	f8cd a000 	str.w	sl, [sp]
 80235e0:	464b      	mov	r3, r9
 80235e2:	aa03      	add	r2, sp, #12
 80235e4:	4621      	mov	r1, r4
 80235e6:	4640      	mov	r0, r8
 80235e8:	f7ff fee2 	bl	80233b0 <_printf_common>
 80235ec:	3001      	adds	r0, #1
 80235ee:	d14c      	bne.n	802368a <_printf_i+0x1fe>
 80235f0:	f04f 30ff 	mov.w	r0, #4294967295
 80235f4:	b004      	add	sp, #16
 80235f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235fa:	4835      	ldr	r0, [pc, #212]	; (80236d0 <_printf_i+0x244>)
 80235fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023600:	6823      	ldr	r3, [r4, #0]
 8023602:	680e      	ldr	r6, [r1, #0]
 8023604:	061f      	lsls	r7, r3, #24
 8023606:	f856 5b04 	ldr.w	r5, [r6], #4
 802360a:	600e      	str	r6, [r1, #0]
 802360c:	d514      	bpl.n	8023638 <_printf_i+0x1ac>
 802360e:	07d9      	lsls	r1, r3, #31
 8023610:	bf44      	itt	mi
 8023612:	f043 0320 	orrmi.w	r3, r3, #32
 8023616:	6023      	strmi	r3, [r4, #0]
 8023618:	b91d      	cbnz	r5, 8023622 <_printf_i+0x196>
 802361a:	6823      	ldr	r3, [r4, #0]
 802361c:	f023 0320 	bic.w	r3, r3, #32
 8023620:	6023      	str	r3, [r4, #0]
 8023622:	2310      	movs	r3, #16
 8023624:	e7b0      	b.n	8023588 <_printf_i+0xfc>
 8023626:	6823      	ldr	r3, [r4, #0]
 8023628:	f043 0320 	orr.w	r3, r3, #32
 802362c:	6023      	str	r3, [r4, #0]
 802362e:	2378      	movs	r3, #120	; 0x78
 8023630:	4828      	ldr	r0, [pc, #160]	; (80236d4 <_printf_i+0x248>)
 8023632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023636:	e7e3      	b.n	8023600 <_printf_i+0x174>
 8023638:	065e      	lsls	r6, r3, #25
 802363a:	bf48      	it	mi
 802363c:	b2ad      	uxthmi	r5, r5
 802363e:	e7e6      	b.n	802360e <_printf_i+0x182>
 8023640:	4616      	mov	r6, r2
 8023642:	e7bb      	b.n	80235bc <_printf_i+0x130>
 8023644:	680b      	ldr	r3, [r1, #0]
 8023646:	6826      	ldr	r6, [r4, #0]
 8023648:	6960      	ldr	r0, [r4, #20]
 802364a:	1d1d      	adds	r5, r3, #4
 802364c:	600d      	str	r5, [r1, #0]
 802364e:	0635      	lsls	r5, r6, #24
 8023650:	681b      	ldr	r3, [r3, #0]
 8023652:	d501      	bpl.n	8023658 <_printf_i+0x1cc>
 8023654:	6018      	str	r0, [r3, #0]
 8023656:	e002      	b.n	802365e <_printf_i+0x1d2>
 8023658:	0671      	lsls	r1, r6, #25
 802365a:	d5fb      	bpl.n	8023654 <_printf_i+0x1c8>
 802365c:	8018      	strh	r0, [r3, #0]
 802365e:	2300      	movs	r3, #0
 8023660:	6123      	str	r3, [r4, #16]
 8023662:	4616      	mov	r6, r2
 8023664:	e7ba      	b.n	80235dc <_printf_i+0x150>
 8023666:	680b      	ldr	r3, [r1, #0]
 8023668:	1d1a      	adds	r2, r3, #4
 802366a:	600a      	str	r2, [r1, #0]
 802366c:	681e      	ldr	r6, [r3, #0]
 802366e:	6862      	ldr	r2, [r4, #4]
 8023670:	2100      	movs	r1, #0
 8023672:	4630      	mov	r0, r6
 8023674:	f7dc fdc4 	bl	8000200 <memchr>
 8023678:	b108      	cbz	r0, 802367e <_printf_i+0x1f2>
 802367a:	1b80      	subs	r0, r0, r6
 802367c:	6060      	str	r0, [r4, #4]
 802367e:	6863      	ldr	r3, [r4, #4]
 8023680:	6123      	str	r3, [r4, #16]
 8023682:	2300      	movs	r3, #0
 8023684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023688:	e7a8      	b.n	80235dc <_printf_i+0x150>
 802368a:	6923      	ldr	r3, [r4, #16]
 802368c:	4632      	mov	r2, r6
 802368e:	4649      	mov	r1, r9
 8023690:	4640      	mov	r0, r8
 8023692:	47d0      	blx	sl
 8023694:	3001      	adds	r0, #1
 8023696:	d0ab      	beq.n	80235f0 <_printf_i+0x164>
 8023698:	6823      	ldr	r3, [r4, #0]
 802369a:	079b      	lsls	r3, r3, #30
 802369c:	d413      	bmi.n	80236c6 <_printf_i+0x23a>
 802369e:	68e0      	ldr	r0, [r4, #12]
 80236a0:	9b03      	ldr	r3, [sp, #12]
 80236a2:	4298      	cmp	r0, r3
 80236a4:	bfb8      	it	lt
 80236a6:	4618      	movlt	r0, r3
 80236a8:	e7a4      	b.n	80235f4 <_printf_i+0x168>
 80236aa:	2301      	movs	r3, #1
 80236ac:	4632      	mov	r2, r6
 80236ae:	4649      	mov	r1, r9
 80236b0:	4640      	mov	r0, r8
 80236b2:	47d0      	blx	sl
 80236b4:	3001      	adds	r0, #1
 80236b6:	d09b      	beq.n	80235f0 <_printf_i+0x164>
 80236b8:	3501      	adds	r5, #1
 80236ba:	68e3      	ldr	r3, [r4, #12]
 80236bc:	9903      	ldr	r1, [sp, #12]
 80236be:	1a5b      	subs	r3, r3, r1
 80236c0:	42ab      	cmp	r3, r5
 80236c2:	dcf2      	bgt.n	80236aa <_printf_i+0x21e>
 80236c4:	e7eb      	b.n	802369e <_printf_i+0x212>
 80236c6:	2500      	movs	r5, #0
 80236c8:	f104 0619 	add.w	r6, r4, #25
 80236cc:	e7f5      	b.n	80236ba <_printf_i+0x22e>
 80236ce:	bf00      	nop
 80236d0:	080339fd 	.word	0x080339fd
 80236d4:	08033a0e 	.word	0x08033a0e

080236d8 <iprintf>:
 80236d8:	b40f      	push	{r0, r1, r2, r3}
 80236da:	4b0a      	ldr	r3, [pc, #40]	; (8023704 <iprintf+0x2c>)
 80236dc:	b513      	push	{r0, r1, r4, lr}
 80236de:	681c      	ldr	r4, [r3, #0]
 80236e0:	b124      	cbz	r4, 80236ec <iprintf+0x14>
 80236e2:	69a3      	ldr	r3, [r4, #24]
 80236e4:	b913      	cbnz	r3, 80236ec <iprintf+0x14>
 80236e6:	4620      	mov	r0, r4
 80236e8:	f002 fc3e 	bl	8025f68 <__sinit>
 80236ec:	ab05      	add	r3, sp, #20
 80236ee:	9a04      	ldr	r2, [sp, #16]
 80236f0:	68a1      	ldr	r1, [r4, #8]
 80236f2:	9301      	str	r3, [sp, #4]
 80236f4:	4620      	mov	r0, r4
 80236f6:	f7ff fa55 	bl	8022ba4 <_vfiprintf_r>
 80236fa:	b002      	add	sp, #8
 80236fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023700:	b004      	add	sp, #16
 8023702:	4770      	bx	lr
 8023704:	200005e4 	.word	0x200005e4

08023708 <putchar>:
 8023708:	4b09      	ldr	r3, [pc, #36]	; (8023730 <putchar+0x28>)
 802370a:	b513      	push	{r0, r1, r4, lr}
 802370c:	681c      	ldr	r4, [r3, #0]
 802370e:	4601      	mov	r1, r0
 8023710:	b134      	cbz	r4, 8023720 <putchar+0x18>
 8023712:	69a3      	ldr	r3, [r4, #24]
 8023714:	b923      	cbnz	r3, 8023720 <putchar+0x18>
 8023716:	9001      	str	r0, [sp, #4]
 8023718:	4620      	mov	r0, r4
 802371a:	f002 fc25 	bl	8025f68 <__sinit>
 802371e:	9901      	ldr	r1, [sp, #4]
 8023720:	68a2      	ldr	r2, [r4, #8]
 8023722:	4620      	mov	r0, r4
 8023724:	b002      	add	sp, #8
 8023726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802372a:	f004 bac1 	b.w	8027cb0 <_putc_r>
 802372e:	bf00      	nop
 8023730:	200005e4 	.word	0x200005e4

08023734 <_puts_r>:
 8023734:	b570      	push	{r4, r5, r6, lr}
 8023736:	460e      	mov	r6, r1
 8023738:	4605      	mov	r5, r0
 802373a:	b118      	cbz	r0, 8023744 <_puts_r+0x10>
 802373c:	6983      	ldr	r3, [r0, #24]
 802373e:	b90b      	cbnz	r3, 8023744 <_puts_r+0x10>
 8023740:	f002 fc12 	bl	8025f68 <__sinit>
 8023744:	69ab      	ldr	r3, [r5, #24]
 8023746:	68ac      	ldr	r4, [r5, #8]
 8023748:	b913      	cbnz	r3, 8023750 <_puts_r+0x1c>
 802374a:	4628      	mov	r0, r5
 802374c:	f002 fc0c 	bl	8025f68 <__sinit>
 8023750:	4b2c      	ldr	r3, [pc, #176]	; (8023804 <_puts_r+0xd0>)
 8023752:	429c      	cmp	r4, r3
 8023754:	d120      	bne.n	8023798 <_puts_r+0x64>
 8023756:	686c      	ldr	r4, [r5, #4]
 8023758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802375a:	07db      	lsls	r3, r3, #31
 802375c:	d405      	bmi.n	802376a <_puts_r+0x36>
 802375e:	89a3      	ldrh	r3, [r4, #12]
 8023760:	0598      	lsls	r0, r3, #22
 8023762:	d402      	bmi.n	802376a <_puts_r+0x36>
 8023764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023766:	f003 f8b1 	bl	80268cc <__retarget_lock_acquire_recursive>
 802376a:	89a3      	ldrh	r3, [r4, #12]
 802376c:	0719      	lsls	r1, r3, #28
 802376e:	d51d      	bpl.n	80237ac <_puts_r+0x78>
 8023770:	6923      	ldr	r3, [r4, #16]
 8023772:	b1db      	cbz	r3, 80237ac <_puts_r+0x78>
 8023774:	3e01      	subs	r6, #1
 8023776:	68a3      	ldr	r3, [r4, #8]
 8023778:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802377c:	3b01      	subs	r3, #1
 802377e:	60a3      	str	r3, [r4, #8]
 8023780:	bb39      	cbnz	r1, 80237d2 <_puts_r+0x9e>
 8023782:	2b00      	cmp	r3, #0
 8023784:	da38      	bge.n	80237f8 <_puts_r+0xc4>
 8023786:	4622      	mov	r2, r4
 8023788:	210a      	movs	r1, #10
 802378a:	4628      	mov	r0, r5
 802378c:	f001 fb32 	bl	8024df4 <__swbuf_r>
 8023790:	3001      	adds	r0, #1
 8023792:	d011      	beq.n	80237b8 <_puts_r+0x84>
 8023794:	250a      	movs	r5, #10
 8023796:	e011      	b.n	80237bc <_puts_r+0x88>
 8023798:	4b1b      	ldr	r3, [pc, #108]	; (8023808 <_puts_r+0xd4>)
 802379a:	429c      	cmp	r4, r3
 802379c:	d101      	bne.n	80237a2 <_puts_r+0x6e>
 802379e:	68ac      	ldr	r4, [r5, #8]
 80237a0:	e7da      	b.n	8023758 <_puts_r+0x24>
 80237a2:	4b1a      	ldr	r3, [pc, #104]	; (802380c <_puts_r+0xd8>)
 80237a4:	429c      	cmp	r4, r3
 80237a6:	bf08      	it	eq
 80237a8:	68ec      	ldreq	r4, [r5, #12]
 80237aa:	e7d5      	b.n	8023758 <_puts_r+0x24>
 80237ac:	4621      	mov	r1, r4
 80237ae:	4628      	mov	r0, r5
 80237b0:	f001 fb84 	bl	8024ebc <__swsetup_r>
 80237b4:	2800      	cmp	r0, #0
 80237b6:	d0dd      	beq.n	8023774 <_puts_r+0x40>
 80237b8:	f04f 35ff 	mov.w	r5, #4294967295
 80237bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80237be:	07da      	lsls	r2, r3, #31
 80237c0:	d405      	bmi.n	80237ce <_puts_r+0x9a>
 80237c2:	89a3      	ldrh	r3, [r4, #12]
 80237c4:	059b      	lsls	r3, r3, #22
 80237c6:	d402      	bmi.n	80237ce <_puts_r+0x9a>
 80237c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80237ca:	f003 f881 	bl	80268d0 <__retarget_lock_release_recursive>
 80237ce:	4628      	mov	r0, r5
 80237d0:	bd70      	pop	{r4, r5, r6, pc}
 80237d2:	2b00      	cmp	r3, #0
 80237d4:	da04      	bge.n	80237e0 <_puts_r+0xac>
 80237d6:	69a2      	ldr	r2, [r4, #24]
 80237d8:	429a      	cmp	r2, r3
 80237da:	dc06      	bgt.n	80237ea <_puts_r+0xb6>
 80237dc:	290a      	cmp	r1, #10
 80237de:	d004      	beq.n	80237ea <_puts_r+0xb6>
 80237e0:	6823      	ldr	r3, [r4, #0]
 80237e2:	1c5a      	adds	r2, r3, #1
 80237e4:	6022      	str	r2, [r4, #0]
 80237e6:	7019      	strb	r1, [r3, #0]
 80237e8:	e7c5      	b.n	8023776 <_puts_r+0x42>
 80237ea:	4622      	mov	r2, r4
 80237ec:	4628      	mov	r0, r5
 80237ee:	f001 fb01 	bl	8024df4 <__swbuf_r>
 80237f2:	3001      	adds	r0, #1
 80237f4:	d1bf      	bne.n	8023776 <_puts_r+0x42>
 80237f6:	e7df      	b.n	80237b8 <_puts_r+0x84>
 80237f8:	6823      	ldr	r3, [r4, #0]
 80237fa:	250a      	movs	r5, #10
 80237fc:	1c5a      	adds	r2, r3, #1
 80237fe:	6022      	str	r2, [r4, #0]
 8023800:	701d      	strb	r5, [r3, #0]
 8023802:	e7db      	b.n	80237bc <_puts_r+0x88>
 8023804:	08033c48 	.word	0x08033c48
 8023808:	08033c68 	.word	0x08033c68
 802380c:	08033c28 	.word	0x08033c28

08023810 <puts>:
 8023810:	4b02      	ldr	r3, [pc, #8]	; (802381c <puts+0xc>)
 8023812:	4601      	mov	r1, r0
 8023814:	6818      	ldr	r0, [r3, #0]
 8023816:	f7ff bf8d 	b.w	8023734 <_puts_r>
 802381a:	bf00      	nop
 802381c:	200005e4 	.word	0x200005e4

08023820 <srand>:
 8023820:	b538      	push	{r3, r4, r5, lr}
 8023822:	4b10      	ldr	r3, [pc, #64]	; (8023864 <srand+0x44>)
 8023824:	681d      	ldr	r5, [r3, #0]
 8023826:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8023828:	4604      	mov	r4, r0
 802382a:	b9b3      	cbnz	r3, 802385a <srand+0x3a>
 802382c:	2018      	movs	r0, #24
 802382e:	f7fe fe09 	bl	8022444 <malloc>
 8023832:	4602      	mov	r2, r0
 8023834:	63a8      	str	r0, [r5, #56]	; 0x38
 8023836:	b920      	cbnz	r0, 8023842 <srand+0x22>
 8023838:	4b0b      	ldr	r3, [pc, #44]	; (8023868 <srand+0x48>)
 802383a:	480c      	ldr	r0, [pc, #48]	; (802386c <srand+0x4c>)
 802383c:	2142      	movs	r1, #66	; 0x42
 802383e:	f001 fbab 	bl	8024f98 <__assert_func>
 8023842:	490b      	ldr	r1, [pc, #44]	; (8023870 <srand+0x50>)
 8023844:	4b0b      	ldr	r3, [pc, #44]	; (8023874 <srand+0x54>)
 8023846:	e9c0 1300 	strd	r1, r3, [r0]
 802384a:	4b0b      	ldr	r3, [pc, #44]	; (8023878 <srand+0x58>)
 802384c:	6083      	str	r3, [r0, #8]
 802384e:	230b      	movs	r3, #11
 8023850:	8183      	strh	r3, [r0, #12]
 8023852:	2100      	movs	r1, #0
 8023854:	2001      	movs	r0, #1
 8023856:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802385a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802385c:	2200      	movs	r2, #0
 802385e:	611c      	str	r4, [r3, #16]
 8023860:	615a      	str	r2, [r3, #20]
 8023862:	bd38      	pop	{r3, r4, r5, pc}
 8023864:	200005e4 	.word	0x200005e4
 8023868:	080338ff 	.word	0x080338ff
 802386c:	08033a1f 	.word	0x08033a1f
 8023870:	abcd330e 	.word	0xabcd330e
 8023874:	e66d1234 	.word	0xe66d1234
 8023878:	0005deec 	.word	0x0005deec

0802387c <realloc>:
 802387c:	4b02      	ldr	r3, [pc, #8]	; (8023888 <realloc+0xc>)
 802387e:	460a      	mov	r2, r1
 8023880:	4601      	mov	r1, r0
 8023882:	6818      	ldr	r0, [r3, #0]
 8023884:	f003 bd75 	b.w	8027372 <_realloc_r>
 8023888:	200005e4 	.word	0x200005e4

0802388c <_sbrk_r>:
 802388c:	b538      	push	{r3, r4, r5, lr}
 802388e:	4d06      	ldr	r5, [pc, #24]	; (80238a8 <_sbrk_r+0x1c>)
 8023890:	2300      	movs	r3, #0
 8023892:	4604      	mov	r4, r0
 8023894:	4608      	mov	r0, r1
 8023896:	602b      	str	r3, [r5, #0]
 8023898:	f7e0 fc52 	bl	8004140 <_sbrk>
 802389c:	1c43      	adds	r3, r0, #1
 802389e:	d102      	bne.n	80238a6 <_sbrk_r+0x1a>
 80238a0:	682b      	ldr	r3, [r5, #0]
 80238a2:	b103      	cbz	r3, 80238a6 <_sbrk_r+0x1a>
 80238a4:	6023      	str	r3, [r4, #0]
 80238a6:	bd38      	pop	{r3, r4, r5, pc}
 80238a8:	20001a28 	.word	0x20001a28

080238ac <sniprintf>:
 80238ac:	b40c      	push	{r2, r3}
 80238ae:	b530      	push	{r4, r5, lr}
 80238b0:	4b17      	ldr	r3, [pc, #92]	; (8023910 <sniprintf+0x64>)
 80238b2:	1e0c      	subs	r4, r1, #0
 80238b4:	681d      	ldr	r5, [r3, #0]
 80238b6:	b09d      	sub	sp, #116	; 0x74
 80238b8:	da08      	bge.n	80238cc <sniprintf+0x20>
 80238ba:	238b      	movs	r3, #139	; 0x8b
 80238bc:	602b      	str	r3, [r5, #0]
 80238be:	f04f 30ff 	mov.w	r0, #4294967295
 80238c2:	b01d      	add	sp, #116	; 0x74
 80238c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80238c8:	b002      	add	sp, #8
 80238ca:	4770      	bx	lr
 80238cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80238d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80238d4:	bf14      	ite	ne
 80238d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80238da:	4623      	moveq	r3, r4
 80238dc:	9304      	str	r3, [sp, #16]
 80238de:	9307      	str	r3, [sp, #28]
 80238e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80238e4:	9002      	str	r0, [sp, #8]
 80238e6:	9006      	str	r0, [sp, #24]
 80238e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80238ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80238ee:	ab21      	add	r3, sp, #132	; 0x84
 80238f0:	a902      	add	r1, sp, #8
 80238f2:	4628      	mov	r0, r5
 80238f4:	9301      	str	r3, [sp, #4]
 80238f6:	f003 fdbd 	bl	8027474 <_svfiprintf_r>
 80238fa:	1c43      	adds	r3, r0, #1
 80238fc:	bfbc      	itt	lt
 80238fe:	238b      	movlt	r3, #139	; 0x8b
 8023900:	602b      	strlt	r3, [r5, #0]
 8023902:	2c00      	cmp	r4, #0
 8023904:	d0dd      	beq.n	80238c2 <sniprintf+0x16>
 8023906:	9b02      	ldr	r3, [sp, #8]
 8023908:	2200      	movs	r2, #0
 802390a:	701a      	strb	r2, [r3, #0]
 802390c:	e7d9      	b.n	80238c2 <sniprintf+0x16>
 802390e:	bf00      	nop
 8023910:	200005e4 	.word	0x200005e4

08023914 <siprintf>:
 8023914:	b40e      	push	{r1, r2, r3}
 8023916:	b500      	push	{lr}
 8023918:	b09c      	sub	sp, #112	; 0x70
 802391a:	ab1d      	add	r3, sp, #116	; 0x74
 802391c:	9002      	str	r0, [sp, #8]
 802391e:	9006      	str	r0, [sp, #24]
 8023920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023924:	4809      	ldr	r0, [pc, #36]	; (802394c <siprintf+0x38>)
 8023926:	9107      	str	r1, [sp, #28]
 8023928:	9104      	str	r1, [sp, #16]
 802392a:	4909      	ldr	r1, [pc, #36]	; (8023950 <siprintf+0x3c>)
 802392c:	f853 2b04 	ldr.w	r2, [r3], #4
 8023930:	9105      	str	r1, [sp, #20]
 8023932:	6800      	ldr	r0, [r0, #0]
 8023934:	9301      	str	r3, [sp, #4]
 8023936:	a902      	add	r1, sp, #8
 8023938:	f003 fd9c 	bl	8027474 <_svfiprintf_r>
 802393c:	9b02      	ldr	r3, [sp, #8]
 802393e:	2200      	movs	r2, #0
 8023940:	701a      	strb	r2, [r3, #0]
 8023942:	b01c      	add	sp, #112	; 0x70
 8023944:	f85d eb04 	ldr.w	lr, [sp], #4
 8023948:	b003      	add	sp, #12
 802394a:	4770      	bx	lr
 802394c:	200005e4 	.word	0x200005e4
 8023950:	ffff0208 	.word	0xffff0208

08023954 <siscanf>:
 8023954:	b40e      	push	{r1, r2, r3}
 8023956:	b510      	push	{r4, lr}
 8023958:	b09f      	sub	sp, #124	; 0x7c
 802395a:	ac21      	add	r4, sp, #132	; 0x84
 802395c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8023960:	f854 2b04 	ldr.w	r2, [r4], #4
 8023964:	9201      	str	r2, [sp, #4]
 8023966:	f8ad 101c 	strh.w	r1, [sp, #28]
 802396a:	9004      	str	r0, [sp, #16]
 802396c:	9008      	str	r0, [sp, #32]
 802396e:	f7dc fc39 	bl	80001e4 <strlen>
 8023972:	4b0c      	ldr	r3, [pc, #48]	; (80239a4 <siscanf+0x50>)
 8023974:	9005      	str	r0, [sp, #20]
 8023976:	9009      	str	r0, [sp, #36]	; 0x24
 8023978:	930d      	str	r3, [sp, #52]	; 0x34
 802397a:	480b      	ldr	r0, [pc, #44]	; (80239a8 <siscanf+0x54>)
 802397c:	9a01      	ldr	r2, [sp, #4]
 802397e:	6800      	ldr	r0, [r0, #0]
 8023980:	9403      	str	r4, [sp, #12]
 8023982:	2300      	movs	r3, #0
 8023984:	9311      	str	r3, [sp, #68]	; 0x44
 8023986:	9316      	str	r3, [sp, #88]	; 0x58
 8023988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802398c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023990:	a904      	add	r1, sp, #16
 8023992:	4623      	mov	r3, r4
 8023994:	f003 fec8 	bl	8027728 <__ssvfiscanf_r>
 8023998:	b01f      	add	sp, #124	; 0x7c
 802399a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802399e:	b003      	add	sp, #12
 80239a0:	4770      	bx	lr
 80239a2:	bf00      	nop
 80239a4:	080239cf 	.word	0x080239cf
 80239a8:	200005e4 	.word	0x200005e4

080239ac <__sread>:
 80239ac:	b510      	push	{r4, lr}
 80239ae:	460c      	mov	r4, r1
 80239b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239b4:	f004 f9c4 	bl	8027d40 <_read_r>
 80239b8:	2800      	cmp	r0, #0
 80239ba:	bfab      	itete	ge
 80239bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80239be:	89a3      	ldrhlt	r3, [r4, #12]
 80239c0:	181b      	addge	r3, r3, r0
 80239c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80239c6:	bfac      	ite	ge
 80239c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80239ca:	81a3      	strhlt	r3, [r4, #12]
 80239cc:	bd10      	pop	{r4, pc}

080239ce <__seofread>:
 80239ce:	2000      	movs	r0, #0
 80239d0:	4770      	bx	lr

080239d2 <__swrite>:
 80239d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239d6:	461f      	mov	r7, r3
 80239d8:	898b      	ldrh	r3, [r1, #12]
 80239da:	05db      	lsls	r3, r3, #23
 80239dc:	4605      	mov	r5, r0
 80239de:	460c      	mov	r4, r1
 80239e0:	4616      	mov	r6, r2
 80239e2:	d505      	bpl.n	80239f0 <__swrite+0x1e>
 80239e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239e8:	2302      	movs	r3, #2
 80239ea:	2200      	movs	r2, #0
 80239ec:	f002 ff72 	bl	80268d4 <_lseek_r>
 80239f0:	89a3      	ldrh	r3, [r4, #12]
 80239f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80239f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80239fa:	81a3      	strh	r3, [r4, #12]
 80239fc:	4632      	mov	r2, r6
 80239fe:	463b      	mov	r3, r7
 8023a00:	4628      	mov	r0, r5
 8023a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a06:	f001 ba47 	b.w	8024e98 <_write_r>

08023a0a <__sseek>:
 8023a0a:	b510      	push	{r4, lr}
 8023a0c:	460c      	mov	r4, r1
 8023a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a12:	f002 ff5f 	bl	80268d4 <_lseek_r>
 8023a16:	1c43      	adds	r3, r0, #1
 8023a18:	89a3      	ldrh	r3, [r4, #12]
 8023a1a:	bf15      	itete	ne
 8023a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8023a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023a26:	81a3      	strheq	r3, [r4, #12]
 8023a28:	bf18      	it	ne
 8023a2a:	81a3      	strhne	r3, [r4, #12]
 8023a2c:	bd10      	pop	{r4, pc}

08023a2e <__sclose>:
 8023a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a32:	f001 bacf 	b.w	8024fd4 <_close_r>

08023a36 <strchr>:
 8023a36:	b2c9      	uxtb	r1, r1
 8023a38:	4603      	mov	r3, r0
 8023a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023a3e:	b11a      	cbz	r2, 8023a48 <strchr+0x12>
 8023a40:	428a      	cmp	r2, r1
 8023a42:	d1f9      	bne.n	8023a38 <strchr+0x2>
 8023a44:	4618      	mov	r0, r3
 8023a46:	4770      	bx	lr
 8023a48:	2900      	cmp	r1, #0
 8023a4a:	bf18      	it	ne
 8023a4c:	2300      	movne	r3, #0
 8023a4e:	e7f9      	b.n	8023a44 <strchr+0xe>

08023a50 <strcpy>:
 8023a50:	4603      	mov	r3, r0
 8023a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023a56:	f803 2b01 	strb.w	r2, [r3], #1
 8023a5a:	2a00      	cmp	r2, #0
 8023a5c:	d1f9      	bne.n	8023a52 <strcpy+0x2>
 8023a5e:	4770      	bx	lr

08023a60 <strncmp>:
 8023a60:	b510      	push	{r4, lr}
 8023a62:	b16a      	cbz	r2, 8023a80 <strncmp+0x20>
 8023a64:	3901      	subs	r1, #1
 8023a66:	1884      	adds	r4, r0, r2
 8023a68:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023a6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023a70:	4293      	cmp	r3, r2
 8023a72:	d103      	bne.n	8023a7c <strncmp+0x1c>
 8023a74:	42a0      	cmp	r0, r4
 8023a76:	d001      	beq.n	8023a7c <strncmp+0x1c>
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d1f5      	bne.n	8023a68 <strncmp+0x8>
 8023a7c:	1a98      	subs	r0, r3, r2
 8023a7e:	bd10      	pop	{r4, pc}
 8023a80:	4610      	mov	r0, r2
 8023a82:	e7fc      	b.n	8023a7e <strncmp+0x1e>

08023a84 <strncpy>:
 8023a84:	b510      	push	{r4, lr}
 8023a86:	3901      	subs	r1, #1
 8023a88:	4603      	mov	r3, r0
 8023a8a:	b132      	cbz	r2, 8023a9a <strncpy+0x16>
 8023a8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023a90:	f803 4b01 	strb.w	r4, [r3], #1
 8023a94:	3a01      	subs	r2, #1
 8023a96:	2c00      	cmp	r4, #0
 8023a98:	d1f7      	bne.n	8023a8a <strncpy+0x6>
 8023a9a:	441a      	add	r2, r3
 8023a9c:	2100      	movs	r1, #0
 8023a9e:	4293      	cmp	r3, r2
 8023aa0:	d100      	bne.n	8023aa4 <strncpy+0x20>
 8023aa2:	bd10      	pop	{r4, pc}
 8023aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8023aa8:	e7f9      	b.n	8023a9e <strncpy+0x1a>

08023aaa <strstr>:
 8023aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023aac:	780c      	ldrb	r4, [r1, #0]
 8023aae:	b164      	cbz	r4, 8023aca <strstr+0x20>
 8023ab0:	4603      	mov	r3, r0
 8023ab2:	781a      	ldrb	r2, [r3, #0]
 8023ab4:	4618      	mov	r0, r3
 8023ab6:	1c5e      	adds	r6, r3, #1
 8023ab8:	b90a      	cbnz	r2, 8023abe <strstr+0x14>
 8023aba:	4610      	mov	r0, r2
 8023abc:	e005      	b.n	8023aca <strstr+0x20>
 8023abe:	4294      	cmp	r4, r2
 8023ac0:	d108      	bne.n	8023ad4 <strstr+0x2a>
 8023ac2:	460d      	mov	r5, r1
 8023ac4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8023ac8:	b902      	cbnz	r2, 8023acc <strstr+0x22>
 8023aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023acc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8023ad0:	4297      	cmp	r7, r2
 8023ad2:	d0f7      	beq.n	8023ac4 <strstr+0x1a>
 8023ad4:	4633      	mov	r3, r6
 8023ad6:	e7ec      	b.n	8023ab2 <strstr+0x8>

08023ad8 <sulp>:
 8023ad8:	b570      	push	{r4, r5, r6, lr}
 8023ada:	4604      	mov	r4, r0
 8023adc:	460d      	mov	r5, r1
 8023ade:	ec45 4b10 	vmov	d0, r4, r5
 8023ae2:	4616      	mov	r6, r2
 8023ae4:	f003 faf6 	bl	80270d4 <__ulp>
 8023ae8:	ec51 0b10 	vmov	r0, r1, d0
 8023aec:	b17e      	cbz	r6, 8023b0e <sulp+0x36>
 8023aee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8023af2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	dd09      	ble.n	8023b0e <sulp+0x36>
 8023afa:	051b      	lsls	r3, r3, #20
 8023afc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8023b00:	2400      	movs	r4, #0
 8023b02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8023b06:	4622      	mov	r2, r4
 8023b08:	462b      	mov	r3, r5
 8023b0a:	f7dc fd85 	bl	8000618 <__aeabi_dmul>
 8023b0e:	bd70      	pop	{r4, r5, r6, pc}

08023b10 <_strtod_l>:
 8023b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b14:	b0a3      	sub	sp, #140	; 0x8c
 8023b16:	461f      	mov	r7, r3
 8023b18:	2300      	movs	r3, #0
 8023b1a:	931e      	str	r3, [sp, #120]	; 0x78
 8023b1c:	4ba4      	ldr	r3, [pc, #656]	; (8023db0 <_strtod_l+0x2a0>)
 8023b1e:	9219      	str	r2, [sp, #100]	; 0x64
 8023b20:	681b      	ldr	r3, [r3, #0]
 8023b22:	9307      	str	r3, [sp, #28]
 8023b24:	4604      	mov	r4, r0
 8023b26:	4618      	mov	r0, r3
 8023b28:	4688      	mov	r8, r1
 8023b2a:	f7dc fb5b 	bl	80001e4 <strlen>
 8023b2e:	f04f 0a00 	mov.w	sl, #0
 8023b32:	4605      	mov	r5, r0
 8023b34:	f04f 0b00 	mov.w	fp, #0
 8023b38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8023b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023b3e:	781a      	ldrb	r2, [r3, #0]
 8023b40:	2a2b      	cmp	r2, #43	; 0x2b
 8023b42:	d04c      	beq.n	8023bde <_strtod_l+0xce>
 8023b44:	d839      	bhi.n	8023bba <_strtod_l+0xaa>
 8023b46:	2a0d      	cmp	r2, #13
 8023b48:	d832      	bhi.n	8023bb0 <_strtod_l+0xa0>
 8023b4a:	2a08      	cmp	r2, #8
 8023b4c:	d832      	bhi.n	8023bb4 <_strtod_l+0xa4>
 8023b4e:	2a00      	cmp	r2, #0
 8023b50:	d03c      	beq.n	8023bcc <_strtod_l+0xbc>
 8023b52:	2300      	movs	r3, #0
 8023b54:	930e      	str	r3, [sp, #56]	; 0x38
 8023b56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8023b58:	7833      	ldrb	r3, [r6, #0]
 8023b5a:	2b30      	cmp	r3, #48	; 0x30
 8023b5c:	f040 80b4 	bne.w	8023cc8 <_strtod_l+0x1b8>
 8023b60:	7873      	ldrb	r3, [r6, #1]
 8023b62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023b66:	2b58      	cmp	r3, #88	; 0x58
 8023b68:	d16c      	bne.n	8023c44 <_strtod_l+0x134>
 8023b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b6c:	9301      	str	r3, [sp, #4]
 8023b6e:	ab1e      	add	r3, sp, #120	; 0x78
 8023b70:	9702      	str	r7, [sp, #8]
 8023b72:	9300      	str	r3, [sp, #0]
 8023b74:	4a8f      	ldr	r2, [pc, #572]	; (8023db4 <_strtod_l+0x2a4>)
 8023b76:	ab1f      	add	r3, sp, #124	; 0x7c
 8023b78:	a91d      	add	r1, sp, #116	; 0x74
 8023b7a:	4620      	mov	r0, r4
 8023b7c:	f002 fb16 	bl	80261ac <__gethex>
 8023b80:	f010 0707 	ands.w	r7, r0, #7
 8023b84:	4605      	mov	r5, r0
 8023b86:	d005      	beq.n	8023b94 <_strtod_l+0x84>
 8023b88:	2f06      	cmp	r7, #6
 8023b8a:	d12a      	bne.n	8023be2 <_strtod_l+0xd2>
 8023b8c:	3601      	adds	r6, #1
 8023b8e:	2300      	movs	r3, #0
 8023b90:	961d      	str	r6, [sp, #116]	; 0x74
 8023b92:	930e      	str	r3, [sp, #56]	; 0x38
 8023b94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	f040 8596 	bne.w	80246c8 <_strtod_l+0xbb8>
 8023b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b9e:	b1db      	cbz	r3, 8023bd8 <_strtod_l+0xc8>
 8023ba0:	4652      	mov	r2, sl
 8023ba2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8023ba6:	ec43 2b10 	vmov	d0, r2, r3
 8023baa:	b023      	add	sp, #140	; 0x8c
 8023bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bb0:	2a20      	cmp	r2, #32
 8023bb2:	d1ce      	bne.n	8023b52 <_strtod_l+0x42>
 8023bb4:	3301      	adds	r3, #1
 8023bb6:	931d      	str	r3, [sp, #116]	; 0x74
 8023bb8:	e7c0      	b.n	8023b3c <_strtod_l+0x2c>
 8023bba:	2a2d      	cmp	r2, #45	; 0x2d
 8023bbc:	d1c9      	bne.n	8023b52 <_strtod_l+0x42>
 8023bbe:	2201      	movs	r2, #1
 8023bc0:	920e      	str	r2, [sp, #56]	; 0x38
 8023bc2:	1c5a      	adds	r2, r3, #1
 8023bc4:	921d      	str	r2, [sp, #116]	; 0x74
 8023bc6:	785b      	ldrb	r3, [r3, #1]
 8023bc8:	2b00      	cmp	r3, #0
 8023bca:	d1c4      	bne.n	8023b56 <_strtod_l+0x46>
 8023bcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023bce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8023bd2:	2b00      	cmp	r3, #0
 8023bd4:	f040 8576 	bne.w	80246c4 <_strtod_l+0xbb4>
 8023bd8:	4652      	mov	r2, sl
 8023bda:	465b      	mov	r3, fp
 8023bdc:	e7e3      	b.n	8023ba6 <_strtod_l+0x96>
 8023bde:	2200      	movs	r2, #0
 8023be0:	e7ee      	b.n	8023bc0 <_strtod_l+0xb0>
 8023be2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023be4:	b13a      	cbz	r2, 8023bf6 <_strtod_l+0xe6>
 8023be6:	2135      	movs	r1, #53	; 0x35
 8023be8:	a820      	add	r0, sp, #128	; 0x80
 8023bea:	f003 fb7e 	bl	80272ea <__copybits>
 8023bee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023bf0:	4620      	mov	r0, r4
 8023bf2:	f002 ff43 	bl	8026a7c <_Bfree>
 8023bf6:	3f01      	subs	r7, #1
 8023bf8:	2f05      	cmp	r7, #5
 8023bfa:	d807      	bhi.n	8023c0c <_strtod_l+0xfc>
 8023bfc:	e8df f007 	tbb	[pc, r7]
 8023c00:	1d180b0e 	.word	0x1d180b0e
 8023c04:	030e      	.short	0x030e
 8023c06:	f04f 0b00 	mov.w	fp, #0
 8023c0a:	46da      	mov	sl, fp
 8023c0c:	0728      	lsls	r0, r5, #28
 8023c0e:	d5c1      	bpl.n	8023b94 <_strtod_l+0x84>
 8023c10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8023c14:	e7be      	b.n	8023b94 <_strtod_l+0x84>
 8023c16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8023c1a:	e7f7      	b.n	8023c0c <_strtod_l+0xfc>
 8023c1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8023c20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023c22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8023c26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023c2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8023c2e:	e7ed      	b.n	8023c0c <_strtod_l+0xfc>
 8023c30:	f8df b184 	ldr.w	fp, [pc, #388]	; 8023db8 <_strtod_l+0x2a8>
 8023c34:	f04f 0a00 	mov.w	sl, #0
 8023c38:	e7e8      	b.n	8023c0c <_strtod_l+0xfc>
 8023c3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8023c3e:	f04f 3aff 	mov.w	sl, #4294967295
 8023c42:	e7e3      	b.n	8023c0c <_strtod_l+0xfc>
 8023c44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023c46:	1c5a      	adds	r2, r3, #1
 8023c48:	921d      	str	r2, [sp, #116]	; 0x74
 8023c4a:	785b      	ldrb	r3, [r3, #1]
 8023c4c:	2b30      	cmp	r3, #48	; 0x30
 8023c4e:	d0f9      	beq.n	8023c44 <_strtod_l+0x134>
 8023c50:	2b00      	cmp	r3, #0
 8023c52:	d09f      	beq.n	8023b94 <_strtod_l+0x84>
 8023c54:	2301      	movs	r3, #1
 8023c56:	f04f 0900 	mov.w	r9, #0
 8023c5a:	9304      	str	r3, [sp, #16]
 8023c5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8023c60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8023c64:	464f      	mov	r7, r9
 8023c66:	220a      	movs	r2, #10
 8023c68:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023c6a:	7806      	ldrb	r6, [r0, #0]
 8023c6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8023c70:	b2d9      	uxtb	r1, r3
 8023c72:	2909      	cmp	r1, #9
 8023c74:	d92a      	bls.n	8023ccc <_strtod_l+0x1bc>
 8023c76:	9907      	ldr	r1, [sp, #28]
 8023c78:	462a      	mov	r2, r5
 8023c7a:	f7ff fef1 	bl	8023a60 <strncmp>
 8023c7e:	b398      	cbz	r0, 8023ce8 <_strtod_l+0x1d8>
 8023c80:	2000      	movs	r0, #0
 8023c82:	4633      	mov	r3, r6
 8023c84:	463d      	mov	r5, r7
 8023c86:	9007      	str	r0, [sp, #28]
 8023c88:	4602      	mov	r2, r0
 8023c8a:	2b65      	cmp	r3, #101	; 0x65
 8023c8c:	d001      	beq.n	8023c92 <_strtod_l+0x182>
 8023c8e:	2b45      	cmp	r3, #69	; 0x45
 8023c90:	d118      	bne.n	8023cc4 <_strtod_l+0x1b4>
 8023c92:	b91d      	cbnz	r5, 8023c9c <_strtod_l+0x18c>
 8023c94:	9b04      	ldr	r3, [sp, #16]
 8023c96:	4303      	orrs	r3, r0
 8023c98:	d098      	beq.n	8023bcc <_strtod_l+0xbc>
 8023c9a:	2500      	movs	r5, #0
 8023c9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8023ca0:	f108 0301 	add.w	r3, r8, #1
 8023ca4:	931d      	str	r3, [sp, #116]	; 0x74
 8023ca6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8023caa:	2b2b      	cmp	r3, #43	; 0x2b
 8023cac:	d075      	beq.n	8023d9a <_strtod_l+0x28a>
 8023cae:	2b2d      	cmp	r3, #45	; 0x2d
 8023cb0:	d07b      	beq.n	8023daa <_strtod_l+0x29a>
 8023cb2:	f04f 0c00 	mov.w	ip, #0
 8023cb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8023cba:	2909      	cmp	r1, #9
 8023cbc:	f240 8082 	bls.w	8023dc4 <_strtod_l+0x2b4>
 8023cc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8023cc4:	2600      	movs	r6, #0
 8023cc6:	e09d      	b.n	8023e04 <_strtod_l+0x2f4>
 8023cc8:	2300      	movs	r3, #0
 8023cca:	e7c4      	b.n	8023c56 <_strtod_l+0x146>
 8023ccc:	2f08      	cmp	r7, #8
 8023cce:	bfd8      	it	le
 8023cd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8023cd2:	f100 0001 	add.w	r0, r0, #1
 8023cd6:	bfda      	itte	le
 8023cd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8023cdc:	9309      	strle	r3, [sp, #36]	; 0x24
 8023cde:	fb02 3909 	mlagt	r9, r2, r9, r3
 8023ce2:	3701      	adds	r7, #1
 8023ce4:	901d      	str	r0, [sp, #116]	; 0x74
 8023ce6:	e7bf      	b.n	8023c68 <_strtod_l+0x158>
 8023ce8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023cea:	195a      	adds	r2, r3, r5
 8023cec:	921d      	str	r2, [sp, #116]	; 0x74
 8023cee:	5d5b      	ldrb	r3, [r3, r5]
 8023cf0:	2f00      	cmp	r7, #0
 8023cf2:	d037      	beq.n	8023d64 <_strtod_l+0x254>
 8023cf4:	9007      	str	r0, [sp, #28]
 8023cf6:	463d      	mov	r5, r7
 8023cf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023cfc:	2a09      	cmp	r2, #9
 8023cfe:	d912      	bls.n	8023d26 <_strtod_l+0x216>
 8023d00:	2201      	movs	r2, #1
 8023d02:	e7c2      	b.n	8023c8a <_strtod_l+0x17a>
 8023d04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023d06:	1c5a      	adds	r2, r3, #1
 8023d08:	921d      	str	r2, [sp, #116]	; 0x74
 8023d0a:	785b      	ldrb	r3, [r3, #1]
 8023d0c:	3001      	adds	r0, #1
 8023d0e:	2b30      	cmp	r3, #48	; 0x30
 8023d10:	d0f8      	beq.n	8023d04 <_strtod_l+0x1f4>
 8023d12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8023d16:	2a08      	cmp	r2, #8
 8023d18:	f200 84db 	bhi.w	80246d2 <_strtod_l+0xbc2>
 8023d1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023d1e:	9007      	str	r0, [sp, #28]
 8023d20:	2000      	movs	r0, #0
 8023d22:	920a      	str	r2, [sp, #40]	; 0x28
 8023d24:	4605      	mov	r5, r0
 8023d26:	3b30      	subs	r3, #48	; 0x30
 8023d28:	f100 0201 	add.w	r2, r0, #1
 8023d2c:	d014      	beq.n	8023d58 <_strtod_l+0x248>
 8023d2e:	9907      	ldr	r1, [sp, #28]
 8023d30:	4411      	add	r1, r2
 8023d32:	9107      	str	r1, [sp, #28]
 8023d34:	462a      	mov	r2, r5
 8023d36:	eb00 0e05 	add.w	lr, r0, r5
 8023d3a:	210a      	movs	r1, #10
 8023d3c:	4572      	cmp	r2, lr
 8023d3e:	d113      	bne.n	8023d68 <_strtod_l+0x258>
 8023d40:	182a      	adds	r2, r5, r0
 8023d42:	2a08      	cmp	r2, #8
 8023d44:	f105 0501 	add.w	r5, r5, #1
 8023d48:	4405      	add	r5, r0
 8023d4a:	dc1c      	bgt.n	8023d86 <_strtod_l+0x276>
 8023d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023d4e:	220a      	movs	r2, #10
 8023d50:	fb02 3301 	mla	r3, r2, r1, r3
 8023d54:	9309      	str	r3, [sp, #36]	; 0x24
 8023d56:	2200      	movs	r2, #0
 8023d58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023d5a:	1c59      	adds	r1, r3, #1
 8023d5c:	911d      	str	r1, [sp, #116]	; 0x74
 8023d5e:	785b      	ldrb	r3, [r3, #1]
 8023d60:	4610      	mov	r0, r2
 8023d62:	e7c9      	b.n	8023cf8 <_strtod_l+0x1e8>
 8023d64:	4638      	mov	r0, r7
 8023d66:	e7d2      	b.n	8023d0e <_strtod_l+0x1fe>
 8023d68:	2a08      	cmp	r2, #8
 8023d6a:	dc04      	bgt.n	8023d76 <_strtod_l+0x266>
 8023d6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023d6e:	434e      	muls	r6, r1
 8023d70:	9609      	str	r6, [sp, #36]	; 0x24
 8023d72:	3201      	adds	r2, #1
 8023d74:	e7e2      	b.n	8023d3c <_strtod_l+0x22c>
 8023d76:	f102 0c01 	add.w	ip, r2, #1
 8023d7a:	f1bc 0f10 	cmp.w	ip, #16
 8023d7e:	bfd8      	it	le
 8023d80:	fb01 f909 	mulle.w	r9, r1, r9
 8023d84:	e7f5      	b.n	8023d72 <_strtod_l+0x262>
 8023d86:	2d10      	cmp	r5, #16
 8023d88:	bfdc      	itt	le
 8023d8a:	220a      	movle	r2, #10
 8023d8c:	fb02 3909 	mlale	r9, r2, r9, r3
 8023d90:	e7e1      	b.n	8023d56 <_strtod_l+0x246>
 8023d92:	2300      	movs	r3, #0
 8023d94:	9307      	str	r3, [sp, #28]
 8023d96:	2201      	movs	r2, #1
 8023d98:	e77c      	b.n	8023c94 <_strtod_l+0x184>
 8023d9a:	f04f 0c00 	mov.w	ip, #0
 8023d9e:	f108 0302 	add.w	r3, r8, #2
 8023da2:	931d      	str	r3, [sp, #116]	; 0x74
 8023da4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8023da8:	e785      	b.n	8023cb6 <_strtod_l+0x1a6>
 8023daa:	f04f 0c01 	mov.w	ip, #1
 8023dae:	e7f6      	b.n	8023d9e <_strtod_l+0x28e>
 8023db0:	08033cf0 	.word	0x08033cf0
 8023db4:	08033a80 	.word	0x08033a80
 8023db8:	7ff00000 	.word	0x7ff00000
 8023dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023dbe:	1c59      	adds	r1, r3, #1
 8023dc0:	911d      	str	r1, [sp, #116]	; 0x74
 8023dc2:	785b      	ldrb	r3, [r3, #1]
 8023dc4:	2b30      	cmp	r3, #48	; 0x30
 8023dc6:	d0f9      	beq.n	8023dbc <_strtod_l+0x2ac>
 8023dc8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8023dcc:	2908      	cmp	r1, #8
 8023dce:	f63f af79 	bhi.w	8023cc4 <_strtod_l+0x1b4>
 8023dd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8023dd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023dd8:	9308      	str	r3, [sp, #32]
 8023dda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023ddc:	1c59      	adds	r1, r3, #1
 8023dde:	911d      	str	r1, [sp, #116]	; 0x74
 8023de0:	785b      	ldrb	r3, [r3, #1]
 8023de2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8023de6:	2e09      	cmp	r6, #9
 8023de8:	d937      	bls.n	8023e5a <_strtod_l+0x34a>
 8023dea:	9e08      	ldr	r6, [sp, #32]
 8023dec:	1b89      	subs	r1, r1, r6
 8023dee:	2908      	cmp	r1, #8
 8023df0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8023df4:	dc02      	bgt.n	8023dfc <_strtod_l+0x2ec>
 8023df6:	4576      	cmp	r6, lr
 8023df8:	bfa8      	it	ge
 8023dfa:	4676      	movge	r6, lr
 8023dfc:	f1bc 0f00 	cmp.w	ip, #0
 8023e00:	d000      	beq.n	8023e04 <_strtod_l+0x2f4>
 8023e02:	4276      	negs	r6, r6
 8023e04:	2d00      	cmp	r5, #0
 8023e06:	d14f      	bne.n	8023ea8 <_strtod_l+0x398>
 8023e08:	9904      	ldr	r1, [sp, #16]
 8023e0a:	4301      	orrs	r1, r0
 8023e0c:	f47f aec2 	bne.w	8023b94 <_strtod_l+0x84>
 8023e10:	2a00      	cmp	r2, #0
 8023e12:	f47f aedb 	bne.w	8023bcc <_strtod_l+0xbc>
 8023e16:	2b69      	cmp	r3, #105	; 0x69
 8023e18:	d027      	beq.n	8023e6a <_strtod_l+0x35a>
 8023e1a:	dc24      	bgt.n	8023e66 <_strtod_l+0x356>
 8023e1c:	2b49      	cmp	r3, #73	; 0x49
 8023e1e:	d024      	beq.n	8023e6a <_strtod_l+0x35a>
 8023e20:	2b4e      	cmp	r3, #78	; 0x4e
 8023e22:	f47f aed3 	bne.w	8023bcc <_strtod_l+0xbc>
 8023e26:	499e      	ldr	r1, [pc, #632]	; (80240a0 <_strtod_l+0x590>)
 8023e28:	a81d      	add	r0, sp, #116	; 0x74
 8023e2a:	f002 fc17 	bl	802665c <__match>
 8023e2e:	2800      	cmp	r0, #0
 8023e30:	f43f aecc 	beq.w	8023bcc <_strtod_l+0xbc>
 8023e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023e36:	781b      	ldrb	r3, [r3, #0]
 8023e38:	2b28      	cmp	r3, #40	; 0x28
 8023e3a:	d12d      	bne.n	8023e98 <_strtod_l+0x388>
 8023e3c:	4999      	ldr	r1, [pc, #612]	; (80240a4 <_strtod_l+0x594>)
 8023e3e:	aa20      	add	r2, sp, #128	; 0x80
 8023e40:	a81d      	add	r0, sp, #116	; 0x74
 8023e42:	f002 fc1f 	bl	8026684 <__hexnan>
 8023e46:	2805      	cmp	r0, #5
 8023e48:	d126      	bne.n	8023e98 <_strtod_l+0x388>
 8023e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023e4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8023e50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8023e54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8023e58:	e69c      	b.n	8023b94 <_strtod_l+0x84>
 8023e5a:	210a      	movs	r1, #10
 8023e5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8023e60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8023e64:	e7b9      	b.n	8023dda <_strtod_l+0x2ca>
 8023e66:	2b6e      	cmp	r3, #110	; 0x6e
 8023e68:	e7db      	b.n	8023e22 <_strtod_l+0x312>
 8023e6a:	498f      	ldr	r1, [pc, #572]	; (80240a8 <_strtod_l+0x598>)
 8023e6c:	a81d      	add	r0, sp, #116	; 0x74
 8023e6e:	f002 fbf5 	bl	802665c <__match>
 8023e72:	2800      	cmp	r0, #0
 8023e74:	f43f aeaa 	beq.w	8023bcc <_strtod_l+0xbc>
 8023e78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023e7a:	498c      	ldr	r1, [pc, #560]	; (80240ac <_strtod_l+0x59c>)
 8023e7c:	3b01      	subs	r3, #1
 8023e7e:	a81d      	add	r0, sp, #116	; 0x74
 8023e80:	931d      	str	r3, [sp, #116]	; 0x74
 8023e82:	f002 fbeb 	bl	802665c <__match>
 8023e86:	b910      	cbnz	r0, 8023e8e <_strtod_l+0x37e>
 8023e88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023e8a:	3301      	adds	r3, #1
 8023e8c:	931d      	str	r3, [sp, #116]	; 0x74
 8023e8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80240bc <_strtod_l+0x5ac>
 8023e92:	f04f 0a00 	mov.w	sl, #0
 8023e96:	e67d      	b.n	8023b94 <_strtod_l+0x84>
 8023e98:	4885      	ldr	r0, [pc, #532]	; (80240b0 <_strtod_l+0x5a0>)
 8023e9a:	f003 ff91 	bl	8027dc0 <nan>
 8023e9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8023ea2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8023ea6:	e675      	b.n	8023b94 <_strtod_l+0x84>
 8023ea8:	9b07      	ldr	r3, [sp, #28]
 8023eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023eac:	1af3      	subs	r3, r6, r3
 8023eae:	2f00      	cmp	r7, #0
 8023eb0:	bf08      	it	eq
 8023eb2:	462f      	moveq	r7, r5
 8023eb4:	2d10      	cmp	r5, #16
 8023eb6:	9308      	str	r3, [sp, #32]
 8023eb8:	46a8      	mov	r8, r5
 8023eba:	bfa8      	it	ge
 8023ebc:	f04f 0810 	movge.w	r8, #16
 8023ec0:	f7dc fb30 	bl	8000524 <__aeabi_ui2d>
 8023ec4:	2d09      	cmp	r5, #9
 8023ec6:	4682      	mov	sl, r0
 8023ec8:	468b      	mov	fp, r1
 8023eca:	dd13      	ble.n	8023ef4 <_strtod_l+0x3e4>
 8023ecc:	4b79      	ldr	r3, [pc, #484]	; (80240b4 <_strtod_l+0x5a4>)
 8023ece:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023ed2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8023ed6:	f7dc fb9f 	bl	8000618 <__aeabi_dmul>
 8023eda:	4682      	mov	sl, r0
 8023edc:	4648      	mov	r0, r9
 8023ede:	468b      	mov	fp, r1
 8023ee0:	f7dc fb20 	bl	8000524 <__aeabi_ui2d>
 8023ee4:	4602      	mov	r2, r0
 8023ee6:	460b      	mov	r3, r1
 8023ee8:	4650      	mov	r0, sl
 8023eea:	4659      	mov	r1, fp
 8023eec:	f7dc f9de 	bl	80002ac <__adddf3>
 8023ef0:	4682      	mov	sl, r0
 8023ef2:	468b      	mov	fp, r1
 8023ef4:	2d0f      	cmp	r5, #15
 8023ef6:	dc38      	bgt.n	8023f6a <_strtod_l+0x45a>
 8023ef8:	9b08      	ldr	r3, [sp, #32]
 8023efa:	2b00      	cmp	r3, #0
 8023efc:	f43f ae4a 	beq.w	8023b94 <_strtod_l+0x84>
 8023f00:	dd24      	ble.n	8023f4c <_strtod_l+0x43c>
 8023f02:	2b16      	cmp	r3, #22
 8023f04:	dc0b      	bgt.n	8023f1e <_strtod_l+0x40e>
 8023f06:	4d6b      	ldr	r5, [pc, #428]	; (80240b4 <_strtod_l+0x5a4>)
 8023f08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8023f0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8023f10:	4652      	mov	r2, sl
 8023f12:	465b      	mov	r3, fp
 8023f14:	f7dc fb80 	bl	8000618 <__aeabi_dmul>
 8023f18:	4682      	mov	sl, r0
 8023f1a:	468b      	mov	fp, r1
 8023f1c:	e63a      	b.n	8023b94 <_strtod_l+0x84>
 8023f1e:	9a08      	ldr	r2, [sp, #32]
 8023f20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8023f24:	4293      	cmp	r3, r2
 8023f26:	db20      	blt.n	8023f6a <_strtod_l+0x45a>
 8023f28:	4c62      	ldr	r4, [pc, #392]	; (80240b4 <_strtod_l+0x5a4>)
 8023f2a:	f1c5 050f 	rsb	r5, r5, #15
 8023f2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8023f32:	4652      	mov	r2, sl
 8023f34:	465b      	mov	r3, fp
 8023f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023f3a:	f7dc fb6d 	bl	8000618 <__aeabi_dmul>
 8023f3e:	9b08      	ldr	r3, [sp, #32]
 8023f40:	1b5d      	subs	r5, r3, r5
 8023f42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8023f46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8023f4a:	e7e3      	b.n	8023f14 <_strtod_l+0x404>
 8023f4c:	9b08      	ldr	r3, [sp, #32]
 8023f4e:	3316      	adds	r3, #22
 8023f50:	db0b      	blt.n	8023f6a <_strtod_l+0x45a>
 8023f52:	9b07      	ldr	r3, [sp, #28]
 8023f54:	4a57      	ldr	r2, [pc, #348]	; (80240b4 <_strtod_l+0x5a4>)
 8023f56:	1b9e      	subs	r6, r3, r6
 8023f58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8023f5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023f60:	4650      	mov	r0, sl
 8023f62:	4659      	mov	r1, fp
 8023f64:	f7dc fc82 	bl	800086c <__aeabi_ddiv>
 8023f68:	e7d6      	b.n	8023f18 <_strtod_l+0x408>
 8023f6a:	9b08      	ldr	r3, [sp, #32]
 8023f6c:	eba5 0808 	sub.w	r8, r5, r8
 8023f70:	4498      	add	r8, r3
 8023f72:	f1b8 0f00 	cmp.w	r8, #0
 8023f76:	dd71      	ble.n	802405c <_strtod_l+0x54c>
 8023f78:	f018 030f 	ands.w	r3, r8, #15
 8023f7c:	d00a      	beq.n	8023f94 <_strtod_l+0x484>
 8023f7e:	494d      	ldr	r1, [pc, #308]	; (80240b4 <_strtod_l+0x5a4>)
 8023f80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023f84:	4652      	mov	r2, sl
 8023f86:	465b      	mov	r3, fp
 8023f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023f8c:	f7dc fb44 	bl	8000618 <__aeabi_dmul>
 8023f90:	4682      	mov	sl, r0
 8023f92:	468b      	mov	fp, r1
 8023f94:	f038 080f 	bics.w	r8, r8, #15
 8023f98:	d04d      	beq.n	8024036 <_strtod_l+0x526>
 8023f9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8023f9e:	dd22      	ble.n	8023fe6 <_strtod_l+0x4d6>
 8023fa0:	2500      	movs	r5, #0
 8023fa2:	462e      	mov	r6, r5
 8023fa4:	9509      	str	r5, [sp, #36]	; 0x24
 8023fa6:	9507      	str	r5, [sp, #28]
 8023fa8:	2322      	movs	r3, #34	; 0x22
 8023faa:	f8df b110 	ldr.w	fp, [pc, #272]	; 80240bc <_strtod_l+0x5ac>
 8023fae:	6023      	str	r3, [r4, #0]
 8023fb0:	f04f 0a00 	mov.w	sl, #0
 8023fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	f43f adec 	beq.w	8023b94 <_strtod_l+0x84>
 8023fbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023fbe:	4620      	mov	r0, r4
 8023fc0:	f002 fd5c 	bl	8026a7c <_Bfree>
 8023fc4:	9907      	ldr	r1, [sp, #28]
 8023fc6:	4620      	mov	r0, r4
 8023fc8:	f002 fd58 	bl	8026a7c <_Bfree>
 8023fcc:	4631      	mov	r1, r6
 8023fce:	4620      	mov	r0, r4
 8023fd0:	f002 fd54 	bl	8026a7c <_Bfree>
 8023fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023fd6:	4620      	mov	r0, r4
 8023fd8:	f002 fd50 	bl	8026a7c <_Bfree>
 8023fdc:	4629      	mov	r1, r5
 8023fde:	4620      	mov	r0, r4
 8023fe0:	f002 fd4c 	bl	8026a7c <_Bfree>
 8023fe4:	e5d6      	b.n	8023b94 <_strtod_l+0x84>
 8023fe6:	2300      	movs	r3, #0
 8023fe8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8023fec:	4650      	mov	r0, sl
 8023fee:	4659      	mov	r1, fp
 8023ff0:	4699      	mov	r9, r3
 8023ff2:	f1b8 0f01 	cmp.w	r8, #1
 8023ff6:	dc21      	bgt.n	802403c <_strtod_l+0x52c>
 8023ff8:	b10b      	cbz	r3, 8023ffe <_strtod_l+0x4ee>
 8023ffa:	4682      	mov	sl, r0
 8023ffc:	468b      	mov	fp, r1
 8023ffe:	4b2e      	ldr	r3, [pc, #184]	; (80240b8 <_strtod_l+0x5a8>)
 8024000:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8024004:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8024008:	4652      	mov	r2, sl
 802400a:	465b      	mov	r3, fp
 802400c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8024010:	f7dc fb02 	bl	8000618 <__aeabi_dmul>
 8024014:	4b29      	ldr	r3, [pc, #164]	; (80240bc <_strtod_l+0x5ac>)
 8024016:	460a      	mov	r2, r1
 8024018:	400b      	ands	r3, r1
 802401a:	4929      	ldr	r1, [pc, #164]	; (80240c0 <_strtod_l+0x5b0>)
 802401c:	428b      	cmp	r3, r1
 802401e:	4682      	mov	sl, r0
 8024020:	d8be      	bhi.n	8023fa0 <_strtod_l+0x490>
 8024022:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8024026:	428b      	cmp	r3, r1
 8024028:	bf86      	itte	hi
 802402a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80240c4 <_strtod_l+0x5b4>
 802402e:	f04f 3aff 	movhi.w	sl, #4294967295
 8024032:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8024036:	2300      	movs	r3, #0
 8024038:	9304      	str	r3, [sp, #16]
 802403a:	e081      	b.n	8024140 <_strtod_l+0x630>
 802403c:	f018 0f01 	tst.w	r8, #1
 8024040:	d007      	beq.n	8024052 <_strtod_l+0x542>
 8024042:	4b1d      	ldr	r3, [pc, #116]	; (80240b8 <_strtod_l+0x5a8>)
 8024044:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8024048:	e9d3 2300 	ldrd	r2, r3, [r3]
 802404c:	f7dc fae4 	bl	8000618 <__aeabi_dmul>
 8024050:	2301      	movs	r3, #1
 8024052:	f109 0901 	add.w	r9, r9, #1
 8024056:	ea4f 0868 	mov.w	r8, r8, asr #1
 802405a:	e7ca      	b.n	8023ff2 <_strtod_l+0x4e2>
 802405c:	d0eb      	beq.n	8024036 <_strtod_l+0x526>
 802405e:	f1c8 0800 	rsb	r8, r8, #0
 8024062:	f018 020f 	ands.w	r2, r8, #15
 8024066:	d00a      	beq.n	802407e <_strtod_l+0x56e>
 8024068:	4b12      	ldr	r3, [pc, #72]	; (80240b4 <_strtod_l+0x5a4>)
 802406a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802406e:	4650      	mov	r0, sl
 8024070:	4659      	mov	r1, fp
 8024072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024076:	f7dc fbf9 	bl	800086c <__aeabi_ddiv>
 802407a:	4682      	mov	sl, r0
 802407c:	468b      	mov	fp, r1
 802407e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8024082:	d0d8      	beq.n	8024036 <_strtod_l+0x526>
 8024084:	f1b8 0f1f 	cmp.w	r8, #31
 8024088:	dd1e      	ble.n	80240c8 <_strtod_l+0x5b8>
 802408a:	2500      	movs	r5, #0
 802408c:	462e      	mov	r6, r5
 802408e:	9509      	str	r5, [sp, #36]	; 0x24
 8024090:	9507      	str	r5, [sp, #28]
 8024092:	2322      	movs	r3, #34	; 0x22
 8024094:	f04f 0a00 	mov.w	sl, #0
 8024098:	f04f 0b00 	mov.w	fp, #0
 802409c:	6023      	str	r3, [r4, #0]
 802409e:	e789      	b.n	8023fb4 <_strtod_l+0x4a4>
 80240a0:	0802eb73 	.word	0x0802eb73
 80240a4:	08033a94 	.word	0x08033a94
 80240a8:	080339f2 	.word	0x080339f2
 80240ac:	08033bac 	.word	0x08033bac
 80240b0:	08030466 	.word	0x08030466
 80240b4:	08033df0 	.word	0x08033df0
 80240b8:	08033dc8 	.word	0x08033dc8
 80240bc:	7ff00000 	.word	0x7ff00000
 80240c0:	7ca00000 	.word	0x7ca00000
 80240c4:	7fefffff 	.word	0x7fefffff
 80240c8:	f018 0310 	ands.w	r3, r8, #16
 80240cc:	bf18      	it	ne
 80240ce:	236a      	movne	r3, #106	; 0x6a
 80240d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8024488 <_strtod_l+0x978>
 80240d4:	9304      	str	r3, [sp, #16]
 80240d6:	4650      	mov	r0, sl
 80240d8:	4659      	mov	r1, fp
 80240da:	2300      	movs	r3, #0
 80240dc:	f018 0f01 	tst.w	r8, #1
 80240e0:	d004      	beq.n	80240ec <_strtod_l+0x5dc>
 80240e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80240e6:	f7dc fa97 	bl	8000618 <__aeabi_dmul>
 80240ea:	2301      	movs	r3, #1
 80240ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80240f0:	f109 0908 	add.w	r9, r9, #8
 80240f4:	d1f2      	bne.n	80240dc <_strtod_l+0x5cc>
 80240f6:	b10b      	cbz	r3, 80240fc <_strtod_l+0x5ec>
 80240f8:	4682      	mov	sl, r0
 80240fa:	468b      	mov	fp, r1
 80240fc:	9b04      	ldr	r3, [sp, #16]
 80240fe:	b1bb      	cbz	r3, 8024130 <_strtod_l+0x620>
 8024100:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8024104:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8024108:	2b00      	cmp	r3, #0
 802410a:	4659      	mov	r1, fp
 802410c:	dd10      	ble.n	8024130 <_strtod_l+0x620>
 802410e:	2b1f      	cmp	r3, #31
 8024110:	f340 8128 	ble.w	8024364 <_strtod_l+0x854>
 8024114:	2b34      	cmp	r3, #52	; 0x34
 8024116:	bfde      	ittt	le
 8024118:	3b20      	suble	r3, #32
 802411a:	f04f 32ff 	movle.w	r2, #4294967295
 802411e:	fa02 f303 	lslle.w	r3, r2, r3
 8024122:	f04f 0a00 	mov.w	sl, #0
 8024126:	bfcc      	ite	gt
 8024128:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802412c:	ea03 0b01 	andle.w	fp, r3, r1
 8024130:	2200      	movs	r2, #0
 8024132:	2300      	movs	r3, #0
 8024134:	4650      	mov	r0, sl
 8024136:	4659      	mov	r1, fp
 8024138:	f7dc fcd6 	bl	8000ae8 <__aeabi_dcmpeq>
 802413c:	2800      	cmp	r0, #0
 802413e:	d1a4      	bne.n	802408a <_strtod_l+0x57a>
 8024140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024142:	9300      	str	r3, [sp, #0]
 8024144:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024146:	462b      	mov	r3, r5
 8024148:	463a      	mov	r2, r7
 802414a:	4620      	mov	r0, r4
 802414c:	f002 fd02 	bl	8026b54 <__s2b>
 8024150:	9009      	str	r0, [sp, #36]	; 0x24
 8024152:	2800      	cmp	r0, #0
 8024154:	f43f af24 	beq.w	8023fa0 <_strtod_l+0x490>
 8024158:	9b07      	ldr	r3, [sp, #28]
 802415a:	1b9e      	subs	r6, r3, r6
 802415c:	9b08      	ldr	r3, [sp, #32]
 802415e:	2b00      	cmp	r3, #0
 8024160:	bfb4      	ite	lt
 8024162:	4633      	movlt	r3, r6
 8024164:	2300      	movge	r3, #0
 8024166:	9310      	str	r3, [sp, #64]	; 0x40
 8024168:	9b08      	ldr	r3, [sp, #32]
 802416a:	2500      	movs	r5, #0
 802416c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024170:	9318      	str	r3, [sp, #96]	; 0x60
 8024172:	462e      	mov	r6, r5
 8024174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024176:	4620      	mov	r0, r4
 8024178:	6859      	ldr	r1, [r3, #4]
 802417a:	f002 fc3f 	bl	80269fc <_Balloc>
 802417e:	9007      	str	r0, [sp, #28]
 8024180:	2800      	cmp	r0, #0
 8024182:	f43f af11 	beq.w	8023fa8 <_strtod_l+0x498>
 8024186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024188:	691a      	ldr	r2, [r3, #16]
 802418a:	3202      	adds	r2, #2
 802418c:	f103 010c 	add.w	r1, r3, #12
 8024190:	0092      	lsls	r2, r2, #2
 8024192:	300c      	adds	r0, #12
 8024194:	f7fe f974 	bl	8022480 <memcpy>
 8024198:	ec4b ab10 	vmov	d0, sl, fp
 802419c:	aa20      	add	r2, sp, #128	; 0x80
 802419e:	a91f      	add	r1, sp, #124	; 0x7c
 80241a0:	4620      	mov	r0, r4
 80241a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80241a6:	f003 f811 	bl	80271cc <__d2b>
 80241aa:	901e      	str	r0, [sp, #120]	; 0x78
 80241ac:	2800      	cmp	r0, #0
 80241ae:	f43f aefb 	beq.w	8023fa8 <_strtod_l+0x498>
 80241b2:	2101      	movs	r1, #1
 80241b4:	4620      	mov	r0, r4
 80241b6:	f002 fd67 	bl	8026c88 <__i2b>
 80241ba:	4606      	mov	r6, r0
 80241bc:	2800      	cmp	r0, #0
 80241be:	f43f aef3 	beq.w	8023fa8 <_strtod_l+0x498>
 80241c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80241c4:	9904      	ldr	r1, [sp, #16]
 80241c6:	2b00      	cmp	r3, #0
 80241c8:	bfab      	itete	ge
 80241ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80241cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80241ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80241d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80241d4:	bfac      	ite	ge
 80241d6:	eb03 0902 	addge.w	r9, r3, r2
 80241da:	1ad7      	sublt	r7, r2, r3
 80241dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80241de:	eba3 0801 	sub.w	r8, r3, r1
 80241e2:	4490      	add	r8, r2
 80241e4:	4ba3      	ldr	r3, [pc, #652]	; (8024474 <_strtod_l+0x964>)
 80241e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80241ea:	4598      	cmp	r8, r3
 80241ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80241f0:	f280 80cc 	bge.w	802438c <_strtod_l+0x87c>
 80241f4:	eba3 0308 	sub.w	r3, r3, r8
 80241f8:	2b1f      	cmp	r3, #31
 80241fa:	eba2 0203 	sub.w	r2, r2, r3
 80241fe:	f04f 0101 	mov.w	r1, #1
 8024202:	f300 80b6 	bgt.w	8024372 <_strtod_l+0x862>
 8024206:	fa01 f303 	lsl.w	r3, r1, r3
 802420a:	9311      	str	r3, [sp, #68]	; 0x44
 802420c:	2300      	movs	r3, #0
 802420e:	930c      	str	r3, [sp, #48]	; 0x30
 8024210:	eb09 0802 	add.w	r8, r9, r2
 8024214:	9b04      	ldr	r3, [sp, #16]
 8024216:	45c1      	cmp	r9, r8
 8024218:	4417      	add	r7, r2
 802421a:	441f      	add	r7, r3
 802421c:	464b      	mov	r3, r9
 802421e:	bfa8      	it	ge
 8024220:	4643      	movge	r3, r8
 8024222:	42bb      	cmp	r3, r7
 8024224:	bfa8      	it	ge
 8024226:	463b      	movge	r3, r7
 8024228:	2b00      	cmp	r3, #0
 802422a:	bfc2      	ittt	gt
 802422c:	eba8 0803 	subgt.w	r8, r8, r3
 8024230:	1aff      	subgt	r7, r7, r3
 8024232:	eba9 0903 	subgt.w	r9, r9, r3
 8024236:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024238:	2b00      	cmp	r3, #0
 802423a:	dd17      	ble.n	802426c <_strtod_l+0x75c>
 802423c:	4631      	mov	r1, r6
 802423e:	461a      	mov	r2, r3
 8024240:	4620      	mov	r0, r4
 8024242:	f002 fddd 	bl	8026e00 <__pow5mult>
 8024246:	4606      	mov	r6, r0
 8024248:	2800      	cmp	r0, #0
 802424a:	f43f aead 	beq.w	8023fa8 <_strtod_l+0x498>
 802424e:	4601      	mov	r1, r0
 8024250:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024252:	4620      	mov	r0, r4
 8024254:	f002 fd2e 	bl	8026cb4 <__multiply>
 8024258:	900f      	str	r0, [sp, #60]	; 0x3c
 802425a:	2800      	cmp	r0, #0
 802425c:	f43f aea4 	beq.w	8023fa8 <_strtod_l+0x498>
 8024260:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024262:	4620      	mov	r0, r4
 8024264:	f002 fc0a 	bl	8026a7c <_Bfree>
 8024268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802426a:	931e      	str	r3, [sp, #120]	; 0x78
 802426c:	f1b8 0f00 	cmp.w	r8, #0
 8024270:	f300 8091 	bgt.w	8024396 <_strtod_l+0x886>
 8024274:	9b08      	ldr	r3, [sp, #32]
 8024276:	2b00      	cmp	r3, #0
 8024278:	dd08      	ble.n	802428c <_strtod_l+0x77c>
 802427a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802427c:	9907      	ldr	r1, [sp, #28]
 802427e:	4620      	mov	r0, r4
 8024280:	f002 fdbe 	bl	8026e00 <__pow5mult>
 8024284:	9007      	str	r0, [sp, #28]
 8024286:	2800      	cmp	r0, #0
 8024288:	f43f ae8e 	beq.w	8023fa8 <_strtod_l+0x498>
 802428c:	2f00      	cmp	r7, #0
 802428e:	dd08      	ble.n	80242a2 <_strtod_l+0x792>
 8024290:	9907      	ldr	r1, [sp, #28]
 8024292:	463a      	mov	r2, r7
 8024294:	4620      	mov	r0, r4
 8024296:	f002 fe0d 	bl	8026eb4 <__lshift>
 802429a:	9007      	str	r0, [sp, #28]
 802429c:	2800      	cmp	r0, #0
 802429e:	f43f ae83 	beq.w	8023fa8 <_strtod_l+0x498>
 80242a2:	f1b9 0f00 	cmp.w	r9, #0
 80242a6:	dd08      	ble.n	80242ba <_strtod_l+0x7aa>
 80242a8:	4631      	mov	r1, r6
 80242aa:	464a      	mov	r2, r9
 80242ac:	4620      	mov	r0, r4
 80242ae:	f002 fe01 	bl	8026eb4 <__lshift>
 80242b2:	4606      	mov	r6, r0
 80242b4:	2800      	cmp	r0, #0
 80242b6:	f43f ae77 	beq.w	8023fa8 <_strtod_l+0x498>
 80242ba:	9a07      	ldr	r2, [sp, #28]
 80242bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80242be:	4620      	mov	r0, r4
 80242c0:	f002 fe80 	bl	8026fc4 <__mdiff>
 80242c4:	4605      	mov	r5, r0
 80242c6:	2800      	cmp	r0, #0
 80242c8:	f43f ae6e 	beq.w	8023fa8 <_strtod_l+0x498>
 80242cc:	68c3      	ldr	r3, [r0, #12]
 80242ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80242d0:	2300      	movs	r3, #0
 80242d2:	60c3      	str	r3, [r0, #12]
 80242d4:	4631      	mov	r1, r6
 80242d6:	f002 fe59 	bl	8026f8c <__mcmp>
 80242da:	2800      	cmp	r0, #0
 80242dc:	da65      	bge.n	80243aa <_strtod_l+0x89a>
 80242de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80242e0:	ea53 030a 	orrs.w	r3, r3, sl
 80242e4:	f040 8087 	bne.w	80243f6 <_strtod_l+0x8e6>
 80242e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80242ec:	2b00      	cmp	r3, #0
 80242ee:	f040 8082 	bne.w	80243f6 <_strtod_l+0x8e6>
 80242f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80242f6:	0d1b      	lsrs	r3, r3, #20
 80242f8:	051b      	lsls	r3, r3, #20
 80242fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80242fe:	d97a      	bls.n	80243f6 <_strtod_l+0x8e6>
 8024300:	696b      	ldr	r3, [r5, #20]
 8024302:	b913      	cbnz	r3, 802430a <_strtod_l+0x7fa>
 8024304:	692b      	ldr	r3, [r5, #16]
 8024306:	2b01      	cmp	r3, #1
 8024308:	dd75      	ble.n	80243f6 <_strtod_l+0x8e6>
 802430a:	4629      	mov	r1, r5
 802430c:	2201      	movs	r2, #1
 802430e:	4620      	mov	r0, r4
 8024310:	f002 fdd0 	bl	8026eb4 <__lshift>
 8024314:	4631      	mov	r1, r6
 8024316:	4605      	mov	r5, r0
 8024318:	f002 fe38 	bl	8026f8c <__mcmp>
 802431c:	2800      	cmp	r0, #0
 802431e:	dd6a      	ble.n	80243f6 <_strtod_l+0x8e6>
 8024320:	9904      	ldr	r1, [sp, #16]
 8024322:	4a55      	ldr	r2, [pc, #340]	; (8024478 <_strtod_l+0x968>)
 8024324:	465b      	mov	r3, fp
 8024326:	2900      	cmp	r1, #0
 8024328:	f000 8085 	beq.w	8024436 <_strtod_l+0x926>
 802432c:	ea02 010b 	and.w	r1, r2, fp
 8024330:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8024334:	dc7f      	bgt.n	8024436 <_strtod_l+0x926>
 8024336:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802433a:	f77f aeaa 	ble.w	8024092 <_strtod_l+0x582>
 802433e:	4a4f      	ldr	r2, [pc, #316]	; (802447c <_strtod_l+0x96c>)
 8024340:	2300      	movs	r3, #0
 8024342:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8024346:	4650      	mov	r0, sl
 8024348:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 802434c:	4659      	mov	r1, fp
 802434e:	f7dc f963 	bl	8000618 <__aeabi_dmul>
 8024352:	460b      	mov	r3, r1
 8024354:	4303      	orrs	r3, r0
 8024356:	bf08      	it	eq
 8024358:	2322      	moveq	r3, #34	; 0x22
 802435a:	4682      	mov	sl, r0
 802435c:	468b      	mov	fp, r1
 802435e:	bf08      	it	eq
 8024360:	6023      	streq	r3, [r4, #0]
 8024362:	e62b      	b.n	8023fbc <_strtod_l+0x4ac>
 8024364:	f04f 32ff 	mov.w	r2, #4294967295
 8024368:	fa02 f303 	lsl.w	r3, r2, r3
 802436c:	ea03 0a0a 	and.w	sl, r3, sl
 8024370:	e6de      	b.n	8024130 <_strtod_l+0x620>
 8024372:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8024376:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 802437a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 802437e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8024382:	fa01 f308 	lsl.w	r3, r1, r8
 8024386:	930c      	str	r3, [sp, #48]	; 0x30
 8024388:	9111      	str	r1, [sp, #68]	; 0x44
 802438a:	e741      	b.n	8024210 <_strtod_l+0x700>
 802438c:	2300      	movs	r3, #0
 802438e:	930c      	str	r3, [sp, #48]	; 0x30
 8024390:	2301      	movs	r3, #1
 8024392:	9311      	str	r3, [sp, #68]	; 0x44
 8024394:	e73c      	b.n	8024210 <_strtod_l+0x700>
 8024396:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024398:	4642      	mov	r2, r8
 802439a:	4620      	mov	r0, r4
 802439c:	f002 fd8a 	bl	8026eb4 <__lshift>
 80243a0:	901e      	str	r0, [sp, #120]	; 0x78
 80243a2:	2800      	cmp	r0, #0
 80243a4:	f47f af66 	bne.w	8024274 <_strtod_l+0x764>
 80243a8:	e5fe      	b.n	8023fa8 <_strtod_l+0x498>
 80243aa:	465f      	mov	r7, fp
 80243ac:	d16e      	bne.n	802448c <_strtod_l+0x97c>
 80243ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80243b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80243b4:	b342      	cbz	r2, 8024408 <_strtod_l+0x8f8>
 80243b6:	4a32      	ldr	r2, [pc, #200]	; (8024480 <_strtod_l+0x970>)
 80243b8:	4293      	cmp	r3, r2
 80243ba:	d128      	bne.n	802440e <_strtod_l+0x8fe>
 80243bc:	9b04      	ldr	r3, [sp, #16]
 80243be:	4650      	mov	r0, sl
 80243c0:	b1eb      	cbz	r3, 80243fe <_strtod_l+0x8ee>
 80243c2:	4a2d      	ldr	r2, [pc, #180]	; (8024478 <_strtod_l+0x968>)
 80243c4:	403a      	ands	r2, r7
 80243c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80243ca:	f04f 31ff 	mov.w	r1, #4294967295
 80243ce:	d819      	bhi.n	8024404 <_strtod_l+0x8f4>
 80243d0:	0d12      	lsrs	r2, r2, #20
 80243d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80243d6:	fa01 f303 	lsl.w	r3, r1, r3
 80243da:	4298      	cmp	r0, r3
 80243dc:	d117      	bne.n	802440e <_strtod_l+0x8fe>
 80243de:	4b29      	ldr	r3, [pc, #164]	; (8024484 <_strtod_l+0x974>)
 80243e0:	429f      	cmp	r7, r3
 80243e2:	d102      	bne.n	80243ea <_strtod_l+0x8da>
 80243e4:	3001      	adds	r0, #1
 80243e6:	f43f addf 	beq.w	8023fa8 <_strtod_l+0x498>
 80243ea:	4b23      	ldr	r3, [pc, #140]	; (8024478 <_strtod_l+0x968>)
 80243ec:	403b      	ands	r3, r7
 80243ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80243f2:	f04f 0a00 	mov.w	sl, #0
 80243f6:	9b04      	ldr	r3, [sp, #16]
 80243f8:	2b00      	cmp	r3, #0
 80243fa:	d1a0      	bne.n	802433e <_strtod_l+0x82e>
 80243fc:	e5de      	b.n	8023fbc <_strtod_l+0x4ac>
 80243fe:	f04f 33ff 	mov.w	r3, #4294967295
 8024402:	e7ea      	b.n	80243da <_strtod_l+0x8ca>
 8024404:	460b      	mov	r3, r1
 8024406:	e7e8      	b.n	80243da <_strtod_l+0x8ca>
 8024408:	ea53 030a 	orrs.w	r3, r3, sl
 802440c:	d088      	beq.n	8024320 <_strtod_l+0x810>
 802440e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024410:	b1db      	cbz	r3, 802444a <_strtod_l+0x93a>
 8024412:	423b      	tst	r3, r7
 8024414:	d0ef      	beq.n	80243f6 <_strtod_l+0x8e6>
 8024416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024418:	9a04      	ldr	r2, [sp, #16]
 802441a:	4650      	mov	r0, sl
 802441c:	4659      	mov	r1, fp
 802441e:	b1c3      	cbz	r3, 8024452 <_strtod_l+0x942>
 8024420:	f7ff fb5a 	bl	8023ad8 <sulp>
 8024424:	4602      	mov	r2, r0
 8024426:	460b      	mov	r3, r1
 8024428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802442c:	f7db ff3e 	bl	80002ac <__adddf3>
 8024430:	4682      	mov	sl, r0
 8024432:	468b      	mov	fp, r1
 8024434:	e7df      	b.n	80243f6 <_strtod_l+0x8e6>
 8024436:	4013      	ands	r3, r2
 8024438:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802443c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8024440:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8024444:	f04f 3aff 	mov.w	sl, #4294967295
 8024448:	e7d5      	b.n	80243f6 <_strtod_l+0x8e6>
 802444a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802444c:	ea13 0f0a 	tst.w	r3, sl
 8024450:	e7e0      	b.n	8024414 <_strtod_l+0x904>
 8024452:	f7ff fb41 	bl	8023ad8 <sulp>
 8024456:	4602      	mov	r2, r0
 8024458:	460b      	mov	r3, r1
 802445a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802445e:	f7db ff23 	bl	80002a8 <__aeabi_dsub>
 8024462:	2200      	movs	r2, #0
 8024464:	2300      	movs	r3, #0
 8024466:	4682      	mov	sl, r0
 8024468:	468b      	mov	fp, r1
 802446a:	f7dc fb3d 	bl	8000ae8 <__aeabi_dcmpeq>
 802446e:	2800      	cmp	r0, #0
 8024470:	d0c1      	beq.n	80243f6 <_strtod_l+0x8e6>
 8024472:	e60e      	b.n	8024092 <_strtod_l+0x582>
 8024474:	fffffc02 	.word	0xfffffc02
 8024478:	7ff00000 	.word	0x7ff00000
 802447c:	39500000 	.word	0x39500000
 8024480:	000fffff 	.word	0x000fffff
 8024484:	7fefffff 	.word	0x7fefffff
 8024488:	08033aa8 	.word	0x08033aa8
 802448c:	4631      	mov	r1, r6
 802448e:	4628      	mov	r0, r5
 8024490:	f002 fef8 	bl	8027284 <__ratio>
 8024494:	ec59 8b10 	vmov	r8, r9, d0
 8024498:	ee10 0a10 	vmov	r0, s0
 802449c:	2200      	movs	r2, #0
 802449e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80244a2:	4649      	mov	r1, r9
 80244a4:	f7dc fb34 	bl	8000b10 <__aeabi_dcmple>
 80244a8:	2800      	cmp	r0, #0
 80244aa:	d07c      	beq.n	80245a6 <_strtod_l+0xa96>
 80244ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80244ae:	2b00      	cmp	r3, #0
 80244b0:	d04c      	beq.n	802454c <_strtod_l+0xa3c>
 80244b2:	4b95      	ldr	r3, [pc, #596]	; (8024708 <_strtod_l+0xbf8>)
 80244b4:	2200      	movs	r2, #0
 80244b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80244ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8024708 <_strtod_l+0xbf8>
 80244be:	f04f 0800 	mov.w	r8, #0
 80244c2:	4b92      	ldr	r3, [pc, #584]	; (802470c <_strtod_l+0xbfc>)
 80244c4:	403b      	ands	r3, r7
 80244c6:	9311      	str	r3, [sp, #68]	; 0x44
 80244c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80244ca:	4b91      	ldr	r3, [pc, #580]	; (8024710 <_strtod_l+0xc00>)
 80244cc:	429a      	cmp	r2, r3
 80244ce:	f040 80b2 	bne.w	8024636 <_strtod_l+0xb26>
 80244d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80244d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80244da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80244de:	ec4b ab10 	vmov	d0, sl, fp
 80244e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80244e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80244ea:	f002 fdf3 	bl	80270d4 <__ulp>
 80244ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80244f2:	ec53 2b10 	vmov	r2, r3, d0
 80244f6:	f7dc f88f 	bl	8000618 <__aeabi_dmul>
 80244fa:	4652      	mov	r2, sl
 80244fc:	465b      	mov	r3, fp
 80244fe:	f7db fed5 	bl	80002ac <__adddf3>
 8024502:	460b      	mov	r3, r1
 8024504:	4981      	ldr	r1, [pc, #516]	; (802470c <_strtod_l+0xbfc>)
 8024506:	4a83      	ldr	r2, [pc, #524]	; (8024714 <_strtod_l+0xc04>)
 8024508:	4019      	ands	r1, r3
 802450a:	4291      	cmp	r1, r2
 802450c:	4682      	mov	sl, r0
 802450e:	d95e      	bls.n	80245ce <_strtod_l+0xabe>
 8024510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024512:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8024516:	4293      	cmp	r3, r2
 8024518:	d103      	bne.n	8024522 <_strtod_l+0xa12>
 802451a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802451c:	3301      	adds	r3, #1
 802451e:	f43f ad43 	beq.w	8023fa8 <_strtod_l+0x498>
 8024522:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8024720 <_strtod_l+0xc10>
 8024526:	f04f 3aff 	mov.w	sl, #4294967295
 802452a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802452c:	4620      	mov	r0, r4
 802452e:	f002 faa5 	bl	8026a7c <_Bfree>
 8024532:	9907      	ldr	r1, [sp, #28]
 8024534:	4620      	mov	r0, r4
 8024536:	f002 faa1 	bl	8026a7c <_Bfree>
 802453a:	4631      	mov	r1, r6
 802453c:	4620      	mov	r0, r4
 802453e:	f002 fa9d 	bl	8026a7c <_Bfree>
 8024542:	4629      	mov	r1, r5
 8024544:	4620      	mov	r0, r4
 8024546:	f002 fa99 	bl	8026a7c <_Bfree>
 802454a:	e613      	b.n	8024174 <_strtod_l+0x664>
 802454c:	f1ba 0f00 	cmp.w	sl, #0
 8024550:	d11b      	bne.n	802458a <_strtod_l+0xa7a>
 8024552:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024556:	b9f3      	cbnz	r3, 8024596 <_strtod_l+0xa86>
 8024558:	4b6b      	ldr	r3, [pc, #428]	; (8024708 <_strtod_l+0xbf8>)
 802455a:	2200      	movs	r2, #0
 802455c:	4640      	mov	r0, r8
 802455e:	4649      	mov	r1, r9
 8024560:	f7dc facc 	bl	8000afc <__aeabi_dcmplt>
 8024564:	b9d0      	cbnz	r0, 802459c <_strtod_l+0xa8c>
 8024566:	4640      	mov	r0, r8
 8024568:	4649      	mov	r1, r9
 802456a:	4b6b      	ldr	r3, [pc, #428]	; (8024718 <_strtod_l+0xc08>)
 802456c:	2200      	movs	r2, #0
 802456e:	f7dc f853 	bl	8000618 <__aeabi_dmul>
 8024572:	4680      	mov	r8, r0
 8024574:	4689      	mov	r9, r1
 8024576:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802457a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 802457e:	931b      	str	r3, [sp, #108]	; 0x6c
 8024580:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8024584:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8024588:	e79b      	b.n	80244c2 <_strtod_l+0x9b2>
 802458a:	f1ba 0f01 	cmp.w	sl, #1
 802458e:	d102      	bne.n	8024596 <_strtod_l+0xa86>
 8024590:	2f00      	cmp	r7, #0
 8024592:	f43f ad7e 	beq.w	8024092 <_strtod_l+0x582>
 8024596:	4b61      	ldr	r3, [pc, #388]	; (802471c <_strtod_l+0xc0c>)
 8024598:	2200      	movs	r2, #0
 802459a:	e78c      	b.n	80244b6 <_strtod_l+0x9a6>
 802459c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8024718 <_strtod_l+0xc08>
 80245a0:	f04f 0800 	mov.w	r8, #0
 80245a4:	e7e7      	b.n	8024576 <_strtod_l+0xa66>
 80245a6:	4b5c      	ldr	r3, [pc, #368]	; (8024718 <_strtod_l+0xc08>)
 80245a8:	4640      	mov	r0, r8
 80245aa:	4649      	mov	r1, r9
 80245ac:	2200      	movs	r2, #0
 80245ae:	f7dc f833 	bl	8000618 <__aeabi_dmul>
 80245b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80245b4:	4680      	mov	r8, r0
 80245b6:	4689      	mov	r9, r1
 80245b8:	b933      	cbnz	r3, 80245c8 <_strtod_l+0xab8>
 80245ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80245be:	9012      	str	r0, [sp, #72]	; 0x48
 80245c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80245c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80245c6:	e7dd      	b.n	8024584 <_strtod_l+0xa74>
 80245c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80245cc:	e7f9      	b.n	80245c2 <_strtod_l+0xab2>
 80245ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80245d2:	9b04      	ldr	r3, [sp, #16]
 80245d4:	2b00      	cmp	r3, #0
 80245d6:	d1a8      	bne.n	802452a <_strtod_l+0xa1a>
 80245d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80245dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80245de:	0d1b      	lsrs	r3, r3, #20
 80245e0:	051b      	lsls	r3, r3, #20
 80245e2:	429a      	cmp	r2, r3
 80245e4:	d1a1      	bne.n	802452a <_strtod_l+0xa1a>
 80245e6:	4640      	mov	r0, r8
 80245e8:	4649      	mov	r1, r9
 80245ea:	f7dc fb75 	bl	8000cd8 <__aeabi_d2lz>
 80245ee:	f7db ffe5 	bl	80005bc <__aeabi_l2d>
 80245f2:	4602      	mov	r2, r0
 80245f4:	460b      	mov	r3, r1
 80245f6:	4640      	mov	r0, r8
 80245f8:	4649      	mov	r1, r9
 80245fa:	f7db fe55 	bl	80002a8 <__aeabi_dsub>
 80245fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024600:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024604:	ea43 030a 	orr.w	r3, r3, sl
 8024608:	4313      	orrs	r3, r2
 802460a:	4680      	mov	r8, r0
 802460c:	4689      	mov	r9, r1
 802460e:	d053      	beq.n	80246b8 <_strtod_l+0xba8>
 8024610:	a335      	add	r3, pc, #212	; (adr r3, 80246e8 <_strtod_l+0xbd8>)
 8024612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024616:	f7dc fa71 	bl	8000afc <__aeabi_dcmplt>
 802461a:	2800      	cmp	r0, #0
 802461c:	f47f acce 	bne.w	8023fbc <_strtod_l+0x4ac>
 8024620:	a333      	add	r3, pc, #204	; (adr r3, 80246f0 <_strtod_l+0xbe0>)
 8024622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024626:	4640      	mov	r0, r8
 8024628:	4649      	mov	r1, r9
 802462a:	f7dc fa85 	bl	8000b38 <__aeabi_dcmpgt>
 802462e:	2800      	cmp	r0, #0
 8024630:	f43f af7b 	beq.w	802452a <_strtod_l+0xa1a>
 8024634:	e4c2      	b.n	8023fbc <_strtod_l+0x4ac>
 8024636:	9b04      	ldr	r3, [sp, #16]
 8024638:	b333      	cbz	r3, 8024688 <_strtod_l+0xb78>
 802463a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802463c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8024640:	d822      	bhi.n	8024688 <_strtod_l+0xb78>
 8024642:	a32d      	add	r3, pc, #180	; (adr r3, 80246f8 <_strtod_l+0xbe8>)
 8024644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024648:	4640      	mov	r0, r8
 802464a:	4649      	mov	r1, r9
 802464c:	f7dc fa60 	bl	8000b10 <__aeabi_dcmple>
 8024650:	b1a0      	cbz	r0, 802467c <_strtod_l+0xb6c>
 8024652:	4649      	mov	r1, r9
 8024654:	4640      	mov	r0, r8
 8024656:	f7dc fab7 	bl	8000bc8 <__aeabi_d2uiz>
 802465a:	2801      	cmp	r0, #1
 802465c:	bf38      	it	cc
 802465e:	2001      	movcc	r0, #1
 8024660:	f7db ff60 	bl	8000524 <__aeabi_ui2d>
 8024664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024666:	4680      	mov	r8, r0
 8024668:	4689      	mov	r9, r1
 802466a:	bb13      	cbnz	r3, 80246b2 <_strtod_l+0xba2>
 802466c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024670:	9014      	str	r0, [sp, #80]	; 0x50
 8024672:	9315      	str	r3, [sp, #84]	; 0x54
 8024674:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8024678:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 802467c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802467e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024680:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8024684:	1a9b      	subs	r3, r3, r2
 8024686:	930d      	str	r3, [sp, #52]	; 0x34
 8024688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802468c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8024690:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8024694:	f002 fd1e 	bl	80270d4 <__ulp>
 8024698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802469c:	ec53 2b10 	vmov	r2, r3, d0
 80246a0:	f7db ffba 	bl	8000618 <__aeabi_dmul>
 80246a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80246a8:	f7db fe00 	bl	80002ac <__adddf3>
 80246ac:	4682      	mov	sl, r0
 80246ae:	468b      	mov	fp, r1
 80246b0:	e78f      	b.n	80245d2 <_strtod_l+0xac2>
 80246b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80246b6:	e7dd      	b.n	8024674 <_strtod_l+0xb64>
 80246b8:	a311      	add	r3, pc, #68	; (adr r3, 8024700 <_strtod_l+0xbf0>)
 80246ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80246be:	f7dc fa1d 	bl	8000afc <__aeabi_dcmplt>
 80246c2:	e7b4      	b.n	802462e <_strtod_l+0xb1e>
 80246c4:	2300      	movs	r3, #0
 80246c6:	930e      	str	r3, [sp, #56]	; 0x38
 80246c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80246ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80246cc:	6013      	str	r3, [r2, #0]
 80246ce:	f7ff ba65 	b.w	8023b9c <_strtod_l+0x8c>
 80246d2:	2b65      	cmp	r3, #101	; 0x65
 80246d4:	f43f ab5d 	beq.w	8023d92 <_strtod_l+0x282>
 80246d8:	2b45      	cmp	r3, #69	; 0x45
 80246da:	f43f ab5a 	beq.w	8023d92 <_strtod_l+0x282>
 80246de:	2201      	movs	r2, #1
 80246e0:	f7ff bb92 	b.w	8023e08 <_strtod_l+0x2f8>
 80246e4:	f3af 8000 	nop.w
 80246e8:	94a03595 	.word	0x94a03595
 80246ec:	3fdfffff 	.word	0x3fdfffff
 80246f0:	35afe535 	.word	0x35afe535
 80246f4:	3fe00000 	.word	0x3fe00000
 80246f8:	ffc00000 	.word	0xffc00000
 80246fc:	41dfffff 	.word	0x41dfffff
 8024700:	94a03595 	.word	0x94a03595
 8024704:	3fcfffff 	.word	0x3fcfffff
 8024708:	3ff00000 	.word	0x3ff00000
 802470c:	7ff00000 	.word	0x7ff00000
 8024710:	7fe00000 	.word	0x7fe00000
 8024714:	7c9fffff 	.word	0x7c9fffff
 8024718:	3fe00000 	.word	0x3fe00000
 802471c:	bff00000 	.word	0xbff00000
 8024720:	7fefffff 	.word	0x7fefffff

08024724 <strtod>:
 8024724:	460a      	mov	r2, r1
 8024726:	4601      	mov	r1, r0
 8024728:	4802      	ldr	r0, [pc, #8]	; (8024734 <strtod+0x10>)
 802472a:	4b03      	ldr	r3, [pc, #12]	; (8024738 <strtod+0x14>)
 802472c:	6800      	ldr	r0, [r0, #0]
 802472e:	f7ff b9ef 	b.w	8023b10 <_strtod_l>
 8024732:	bf00      	nop
 8024734:	200005e4 	.word	0x200005e4
 8024738:	200006ac 	.word	0x200006ac

0802473c <strtok>:
 802473c:	4b16      	ldr	r3, [pc, #88]	; (8024798 <strtok+0x5c>)
 802473e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024740:	681e      	ldr	r6, [r3, #0]
 8024742:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8024744:	4605      	mov	r5, r0
 8024746:	b9fc      	cbnz	r4, 8024788 <strtok+0x4c>
 8024748:	2050      	movs	r0, #80	; 0x50
 802474a:	9101      	str	r1, [sp, #4]
 802474c:	f7fd fe7a 	bl	8022444 <malloc>
 8024750:	9901      	ldr	r1, [sp, #4]
 8024752:	65b0      	str	r0, [r6, #88]	; 0x58
 8024754:	4602      	mov	r2, r0
 8024756:	b920      	cbnz	r0, 8024762 <strtok+0x26>
 8024758:	4b10      	ldr	r3, [pc, #64]	; (802479c <strtok+0x60>)
 802475a:	4811      	ldr	r0, [pc, #68]	; (80247a0 <strtok+0x64>)
 802475c:	2157      	movs	r1, #87	; 0x57
 802475e:	f000 fc1b 	bl	8024f98 <__assert_func>
 8024762:	e9c0 4400 	strd	r4, r4, [r0]
 8024766:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802476a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802476e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8024772:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8024776:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802477a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802477e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8024782:	6184      	str	r4, [r0, #24]
 8024784:	7704      	strb	r4, [r0, #28]
 8024786:	6244      	str	r4, [r0, #36]	; 0x24
 8024788:	6db2      	ldr	r2, [r6, #88]	; 0x58
 802478a:	2301      	movs	r3, #1
 802478c:	4628      	mov	r0, r5
 802478e:	b002      	add	sp, #8
 8024790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024794:	f000 b806 	b.w	80247a4 <__strtok_r>
 8024798:	200005e4 	.word	0x200005e4
 802479c:	080338ff 	.word	0x080338ff
 80247a0:	08033ad0 	.word	0x08033ad0

080247a4 <__strtok_r>:
 80247a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80247a6:	b908      	cbnz	r0, 80247ac <__strtok_r+0x8>
 80247a8:	6810      	ldr	r0, [r2, #0]
 80247aa:	b188      	cbz	r0, 80247d0 <__strtok_r+0x2c>
 80247ac:	4604      	mov	r4, r0
 80247ae:	4620      	mov	r0, r4
 80247b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80247b4:	460f      	mov	r7, r1
 80247b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80247ba:	b91e      	cbnz	r6, 80247c4 <__strtok_r+0x20>
 80247bc:	b965      	cbnz	r5, 80247d8 <__strtok_r+0x34>
 80247be:	6015      	str	r5, [r2, #0]
 80247c0:	4628      	mov	r0, r5
 80247c2:	e005      	b.n	80247d0 <__strtok_r+0x2c>
 80247c4:	42b5      	cmp	r5, r6
 80247c6:	d1f6      	bne.n	80247b6 <__strtok_r+0x12>
 80247c8:	2b00      	cmp	r3, #0
 80247ca:	d1f0      	bne.n	80247ae <__strtok_r+0xa>
 80247cc:	6014      	str	r4, [r2, #0]
 80247ce:	7003      	strb	r3, [r0, #0]
 80247d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80247d2:	461c      	mov	r4, r3
 80247d4:	e00c      	b.n	80247f0 <__strtok_r+0x4c>
 80247d6:	b915      	cbnz	r5, 80247de <__strtok_r+0x3a>
 80247d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80247dc:	460e      	mov	r6, r1
 80247de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80247e2:	42ab      	cmp	r3, r5
 80247e4:	d1f7      	bne.n	80247d6 <__strtok_r+0x32>
 80247e6:	2b00      	cmp	r3, #0
 80247e8:	d0f3      	beq.n	80247d2 <__strtok_r+0x2e>
 80247ea:	2300      	movs	r3, #0
 80247ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80247f0:	6014      	str	r4, [r2, #0]
 80247f2:	e7ed      	b.n	80247d0 <__strtok_r+0x2c>

080247f4 <_strtol_l.isra.0>:
 80247f4:	2b01      	cmp	r3, #1
 80247f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80247fa:	d001      	beq.n	8024800 <_strtol_l.isra.0+0xc>
 80247fc:	2b24      	cmp	r3, #36	; 0x24
 80247fe:	d906      	bls.n	802480e <_strtol_l.isra.0+0x1a>
 8024800:	f7fd fcfc 	bl	80221fc <__errno>
 8024804:	2316      	movs	r3, #22
 8024806:	6003      	str	r3, [r0, #0]
 8024808:	2000      	movs	r0, #0
 802480a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802480e:	4f3a      	ldr	r7, [pc, #232]	; (80248f8 <_strtol_l.isra.0+0x104>)
 8024810:	468e      	mov	lr, r1
 8024812:	4676      	mov	r6, lr
 8024814:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8024818:	5de5      	ldrb	r5, [r4, r7]
 802481a:	f015 0508 	ands.w	r5, r5, #8
 802481e:	d1f8      	bne.n	8024812 <_strtol_l.isra.0+0x1e>
 8024820:	2c2d      	cmp	r4, #45	; 0x2d
 8024822:	d134      	bne.n	802488e <_strtol_l.isra.0+0x9a>
 8024824:	f89e 4000 	ldrb.w	r4, [lr]
 8024828:	f04f 0801 	mov.w	r8, #1
 802482c:	f106 0e02 	add.w	lr, r6, #2
 8024830:	2b00      	cmp	r3, #0
 8024832:	d05c      	beq.n	80248ee <_strtol_l.isra.0+0xfa>
 8024834:	2b10      	cmp	r3, #16
 8024836:	d10c      	bne.n	8024852 <_strtol_l.isra.0+0x5e>
 8024838:	2c30      	cmp	r4, #48	; 0x30
 802483a:	d10a      	bne.n	8024852 <_strtol_l.isra.0+0x5e>
 802483c:	f89e 4000 	ldrb.w	r4, [lr]
 8024840:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8024844:	2c58      	cmp	r4, #88	; 0x58
 8024846:	d14d      	bne.n	80248e4 <_strtol_l.isra.0+0xf0>
 8024848:	f89e 4001 	ldrb.w	r4, [lr, #1]
 802484c:	2310      	movs	r3, #16
 802484e:	f10e 0e02 	add.w	lr, lr, #2
 8024852:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8024856:	f10c 3cff 	add.w	ip, ip, #4294967295
 802485a:	2600      	movs	r6, #0
 802485c:	fbbc f9f3 	udiv	r9, ip, r3
 8024860:	4635      	mov	r5, r6
 8024862:	fb03 ca19 	mls	sl, r3, r9, ip
 8024866:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802486a:	2f09      	cmp	r7, #9
 802486c:	d818      	bhi.n	80248a0 <_strtol_l.isra.0+0xac>
 802486e:	463c      	mov	r4, r7
 8024870:	42a3      	cmp	r3, r4
 8024872:	dd24      	ble.n	80248be <_strtol_l.isra.0+0xca>
 8024874:	2e00      	cmp	r6, #0
 8024876:	db1f      	blt.n	80248b8 <_strtol_l.isra.0+0xc4>
 8024878:	45a9      	cmp	r9, r5
 802487a:	d31d      	bcc.n	80248b8 <_strtol_l.isra.0+0xc4>
 802487c:	d101      	bne.n	8024882 <_strtol_l.isra.0+0x8e>
 802487e:	45a2      	cmp	sl, r4
 8024880:	db1a      	blt.n	80248b8 <_strtol_l.isra.0+0xc4>
 8024882:	fb05 4503 	mla	r5, r5, r3, r4
 8024886:	2601      	movs	r6, #1
 8024888:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802488c:	e7eb      	b.n	8024866 <_strtol_l.isra.0+0x72>
 802488e:	2c2b      	cmp	r4, #43	; 0x2b
 8024890:	bf08      	it	eq
 8024892:	f89e 4000 	ldrbeq.w	r4, [lr]
 8024896:	46a8      	mov	r8, r5
 8024898:	bf08      	it	eq
 802489a:	f106 0e02 	addeq.w	lr, r6, #2
 802489e:	e7c7      	b.n	8024830 <_strtol_l.isra.0+0x3c>
 80248a0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80248a4:	2f19      	cmp	r7, #25
 80248a6:	d801      	bhi.n	80248ac <_strtol_l.isra.0+0xb8>
 80248a8:	3c37      	subs	r4, #55	; 0x37
 80248aa:	e7e1      	b.n	8024870 <_strtol_l.isra.0+0x7c>
 80248ac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80248b0:	2f19      	cmp	r7, #25
 80248b2:	d804      	bhi.n	80248be <_strtol_l.isra.0+0xca>
 80248b4:	3c57      	subs	r4, #87	; 0x57
 80248b6:	e7db      	b.n	8024870 <_strtol_l.isra.0+0x7c>
 80248b8:	f04f 36ff 	mov.w	r6, #4294967295
 80248bc:	e7e4      	b.n	8024888 <_strtol_l.isra.0+0x94>
 80248be:	2e00      	cmp	r6, #0
 80248c0:	da05      	bge.n	80248ce <_strtol_l.isra.0+0xda>
 80248c2:	2322      	movs	r3, #34	; 0x22
 80248c4:	6003      	str	r3, [r0, #0]
 80248c6:	4665      	mov	r5, ip
 80248c8:	b942      	cbnz	r2, 80248dc <_strtol_l.isra.0+0xe8>
 80248ca:	4628      	mov	r0, r5
 80248cc:	e79d      	b.n	802480a <_strtol_l.isra.0+0x16>
 80248ce:	f1b8 0f00 	cmp.w	r8, #0
 80248d2:	d000      	beq.n	80248d6 <_strtol_l.isra.0+0xe2>
 80248d4:	426d      	negs	r5, r5
 80248d6:	2a00      	cmp	r2, #0
 80248d8:	d0f7      	beq.n	80248ca <_strtol_l.isra.0+0xd6>
 80248da:	b10e      	cbz	r6, 80248e0 <_strtol_l.isra.0+0xec>
 80248dc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80248e0:	6011      	str	r1, [r2, #0]
 80248e2:	e7f2      	b.n	80248ca <_strtol_l.isra.0+0xd6>
 80248e4:	2430      	movs	r4, #48	; 0x30
 80248e6:	2b00      	cmp	r3, #0
 80248e8:	d1b3      	bne.n	8024852 <_strtol_l.isra.0+0x5e>
 80248ea:	2308      	movs	r3, #8
 80248ec:	e7b1      	b.n	8024852 <_strtol_l.isra.0+0x5e>
 80248ee:	2c30      	cmp	r4, #48	; 0x30
 80248f0:	d0a4      	beq.n	802483c <_strtol_l.isra.0+0x48>
 80248f2:	230a      	movs	r3, #10
 80248f4:	e7ad      	b.n	8024852 <_strtol_l.isra.0+0x5e>
 80248f6:	bf00      	nop
 80248f8:	080337ff 	.word	0x080337ff

080248fc <_strtol_r>:
 80248fc:	f7ff bf7a 	b.w	80247f4 <_strtol_l.isra.0>

08024900 <strtol>:
 8024900:	4613      	mov	r3, r2
 8024902:	460a      	mov	r2, r1
 8024904:	4601      	mov	r1, r0
 8024906:	4802      	ldr	r0, [pc, #8]	; (8024910 <strtol+0x10>)
 8024908:	6800      	ldr	r0, [r0, #0]
 802490a:	f7ff bf73 	b.w	80247f4 <_strtol_l.isra.0>
 802490e:	bf00      	nop
 8024910:	200005e4 	.word	0x200005e4

08024914 <__tzcalc_limits>:
 8024914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024918:	4680      	mov	r8, r0
 802491a:	f001 ffd1 	bl	80268c0 <__gettzinfo>
 802491e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8024922:	4598      	cmp	r8, r3
 8024924:	f340 8098 	ble.w	8024a58 <__tzcalc_limits+0x144>
 8024928:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 802492c:	4443      	add	r3, r8
 802492e:	109b      	asrs	r3, r3, #2
 8024930:	f240 126d 	movw	r2, #365	; 0x16d
 8024934:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8024938:	fb02 3505 	mla	r5, r2, r5, r3
 802493c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8024940:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8024944:	fb93 f3f2 	sdiv	r3, r3, r2
 8024948:	441d      	add	r5, r3
 802494a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802494e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8024952:	fb98 f7f3 	sdiv	r7, r8, r3
 8024956:	fb03 8717 	mls	r7, r3, r7, r8
 802495a:	4442      	add	r2, r8
 802495c:	fab7 fc87 	clz	ip, r7
 8024960:	fbb2 f2f3 	udiv	r2, r2, r3
 8024964:	f008 0303 	and.w	r3, r8, #3
 8024968:	4415      	add	r5, r2
 802496a:	2264      	movs	r2, #100	; 0x64
 802496c:	f8c0 8004 	str.w	r8, [r0, #4]
 8024970:	fb98 f6f2 	sdiv	r6, r8, r2
 8024974:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024978:	fb02 8616 	mls	r6, r2, r6, r8
 802497c:	4604      	mov	r4, r0
 802497e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8024982:	9300      	str	r3, [sp, #0]
 8024984:	f04f 0e07 	mov.w	lr, #7
 8024988:	7a22      	ldrb	r2, [r4, #8]
 802498a:	6963      	ldr	r3, [r4, #20]
 802498c:	2a4a      	cmp	r2, #74	; 0x4a
 802498e:	d128      	bne.n	80249e2 <__tzcalc_limits+0xce>
 8024990:	9900      	ldr	r1, [sp, #0]
 8024992:	18ea      	adds	r2, r5, r3
 8024994:	b901      	cbnz	r1, 8024998 <__tzcalc_limits+0x84>
 8024996:	b906      	cbnz	r6, 802499a <__tzcalc_limits+0x86>
 8024998:	bb0f      	cbnz	r7, 80249de <__tzcalc_limits+0xca>
 802499a:	2b3b      	cmp	r3, #59	; 0x3b
 802499c:	bfd4      	ite	le
 802499e:	2300      	movle	r3, #0
 80249a0:	2301      	movgt	r3, #1
 80249a2:	4413      	add	r3, r2
 80249a4:	1e5a      	subs	r2, r3, #1
 80249a6:	69a3      	ldr	r3, [r4, #24]
 80249a8:	492c      	ldr	r1, [pc, #176]	; (8024a5c <__tzcalc_limits+0x148>)
 80249aa:	fb01 3202 	mla	r2, r1, r2, r3
 80249ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80249b0:	4413      	add	r3, r2
 80249b2:	461a      	mov	r2, r3
 80249b4:	17db      	asrs	r3, r3, #31
 80249b6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80249ba:	3428      	adds	r4, #40	; 0x28
 80249bc:	45a3      	cmp	fp, r4
 80249be:	d1e3      	bne.n	8024988 <__tzcalc_limits+0x74>
 80249c0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80249c4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80249c8:	4294      	cmp	r4, r2
 80249ca:	eb75 0303 	sbcs.w	r3, r5, r3
 80249ce:	bfb4      	ite	lt
 80249d0:	2301      	movlt	r3, #1
 80249d2:	2300      	movge	r3, #0
 80249d4:	6003      	str	r3, [r0, #0]
 80249d6:	2001      	movs	r0, #1
 80249d8:	b003      	add	sp, #12
 80249da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249de:	2300      	movs	r3, #0
 80249e0:	e7df      	b.n	80249a2 <__tzcalc_limits+0x8e>
 80249e2:	2a44      	cmp	r2, #68	; 0x44
 80249e4:	d101      	bne.n	80249ea <__tzcalc_limits+0xd6>
 80249e6:	18ea      	adds	r2, r5, r3
 80249e8:	e7dd      	b.n	80249a6 <__tzcalc_limits+0x92>
 80249ea:	9a00      	ldr	r2, [sp, #0]
 80249ec:	bb72      	cbnz	r2, 8024a4c <__tzcalc_limits+0x138>
 80249ee:	2e00      	cmp	r6, #0
 80249f0:	bf0c      	ite	eq
 80249f2:	46e0      	moveq	r8, ip
 80249f4:	f04f 0801 	movne.w	r8, #1
 80249f8:	4919      	ldr	r1, [pc, #100]	; (8024a60 <__tzcalc_limits+0x14c>)
 80249fa:	68e2      	ldr	r2, [r4, #12]
 80249fc:	9201      	str	r2, [sp, #4]
 80249fe:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8024a02:	fb0a 1808 	mla	r8, sl, r8, r1
 8024a06:	462a      	mov	r2, r5
 8024a08:	f04f 0900 	mov.w	r9, #0
 8024a0c:	f1a8 0804 	sub.w	r8, r8, #4
 8024a10:	9901      	ldr	r1, [sp, #4]
 8024a12:	f109 0901 	add.w	r9, r9, #1
 8024a16:	4549      	cmp	r1, r9
 8024a18:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8024a1c:	dc18      	bgt.n	8024a50 <__tzcalc_limits+0x13c>
 8024a1e:	f102 0804 	add.w	r8, r2, #4
 8024a22:	fb98 f9fe 	sdiv	r9, r8, lr
 8024a26:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8024a2a:	eba8 0909 	sub.w	r9, r8, r9
 8024a2e:	ebb3 0909 	subs.w	r9, r3, r9
 8024a32:	6923      	ldr	r3, [r4, #16]
 8024a34:	f103 33ff 	add.w	r3, r3, #4294967295
 8024a38:	bf48      	it	mi
 8024a3a:	f109 0907 	addmi.w	r9, r9, #7
 8024a3e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8024a42:	444b      	add	r3, r9
 8024a44:	4553      	cmp	r3, sl
 8024a46:	da05      	bge.n	8024a54 <__tzcalc_limits+0x140>
 8024a48:	441a      	add	r2, r3
 8024a4a:	e7ac      	b.n	80249a6 <__tzcalc_limits+0x92>
 8024a4c:	46e0      	mov	r8, ip
 8024a4e:	e7d3      	b.n	80249f8 <__tzcalc_limits+0xe4>
 8024a50:	4452      	add	r2, sl
 8024a52:	e7dd      	b.n	8024a10 <__tzcalc_limits+0xfc>
 8024a54:	3b07      	subs	r3, #7
 8024a56:	e7f5      	b.n	8024a44 <__tzcalc_limits+0x130>
 8024a58:	2000      	movs	r0, #0
 8024a5a:	e7bd      	b.n	80249d8 <__tzcalc_limits+0xc4>
 8024a5c:	00015180 	.word	0x00015180
 8024a60:	08033d04 	.word	0x08033d04

08024a64 <__tz_lock>:
 8024a64:	4801      	ldr	r0, [pc, #4]	; (8024a6c <__tz_lock+0x8>)
 8024a66:	f001 bf30 	b.w	80268ca <__retarget_lock_acquire>
 8024a6a:	bf00      	nop
 8024a6c:	20001a23 	.word	0x20001a23

08024a70 <__tz_unlock>:
 8024a70:	4801      	ldr	r0, [pc, #4]	; (8024a78 <__tz_unlock+0x8>)
 8024a72:	f001 bf2c 	b.w	80268ce <__retarget_lock_release>
 8024a76:	bf00      	nop
 8024a78:	20001a23 	.word	0x20001a23

08024a7c <_tzset_unlocked>:
 8024a7c:	4b01      	ldr	r3, [pc, #4]	; (8024a84 <_tzset_unlocked+0x8>)
 8024a7e:	6818      	ldr	r0, [r3, #0]
 8024a80:	f000 b802 	b.w	8024a88 <_tzset_unlocked_r>
 8024a84:	200005e4 	.word	0x200005e4

08024a88 <_tzset_unlocked_r>:
 8024a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a8c:	b08d      	sub	sp, #52	; 0x34
 8024a8e:	4607      	mov	r7, r0
 8024a90:	f001 ff16 	bl	80268c0 <__gettzinfo>
 8024a94:	49ae      	ldr	r1, [pc, #696]	; (8024d50 <_tzset_unlocked_r+0x2c8>)
 8024a96:	4eaf      	ldr	r6, [pc, #700]	; (8024d54 <_tzset_unlocked_r+0x2cc>)
 8024a98:	4605      	mov	r5, r0
 8024a9a:	4638      	mov	r0, r7
 8024a9c:	f001 ff08 	bl	80268b0 <_getenv_r>
 8024aa0:	4604      	mov	r4, r0
 8024aa2:	b970      	cbnz	r0, 8024ac2 <_tzset_unlocked_r+0x3a>
 8024aa4:	4bac      	ldr	r3, [pc, #688]	; (8024d58 <_tzset_unlocked_r+0x2d0>)
 8024aa6:	4aad      	ldr	r2, [pc, #692]	; (8024d5c <_tzset_unlocked_r+0x2d4>)
 8024aa8:	6018      	str	r0, [r3, #0]
 8024aaa:	4bad      	ldr	r3, [pc, #692]	; (8024d60 <_tzset_unlocked_r+0x2d8>)
 8024aac:	6018      	str	r0, [r3, #0]
 8024aae:	4bad      	ldr	r3, [pc, #692]	; (8024d64 <_tzset_unlocked_r+0x2dc>)
 8024ab0:	6830      	ldr	r0, [r6, #0]
 8024ab2:	e9c3 2200 	strd	r2, r2, [r3]
 8024ab6:	f7fd fccd 	bl	8022454 <free>
 8024aba:	6034      	str	r4, [r6, #0]
 8024abc:	b00d      	add	sp, #52	; 0x34
 8024abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ac2:	6831      	ldr	r1, [r6, #0]
 8024ac4:	2900      	cmp	r1, #0
 8024ac6:	d15f      	bne.n	8024b88 <_tzset_unlocked_r+0x100>
 8024ac8:	6830      	ldr	r0, [r6, #0]
 8024aca:	f7fd fcc3 	bl	8022454 <free>
 8024ace:	4620      	mov	r0, r4
 8024ad0:	f7db fb88 	bl	80001e4 <strlen>
 8024ad4:	1c41      	adds	r1, r0, #1
 8024ad6:	4638      	mov	r0, r7
 8024ad8:	f7fd ffe0 	bl	8022a9c <_malloc_r>
 8024adc:	6030      	str	r0, [r6, #0]
 8024ade:	2800      	cmp	r0, #0
 8024ae0:	d157      	bne.n	8024b92 <_tzset_unlocked_r+0x10a>
 8024ae2:	7823      	ldrb	r3, [r4, #0]
 8024ae4:	4aa0      	ldr	r2, [pc, #640]	; (8024d68 <_tzset_unlocked_r+0x2e0>)
 8024ae6:	49a1      	ldr	r1, [pc, #644]	; (8024d6c <_tzset_unlocked_r+0x2e4>)
 8024ae8:	2b3a      	cmp	r3, #58	; 0x3a
 8024aea:	bf08      	it	eq
 8024aec:	3401      	addeq	r4, #1
 8024aee:	ae0a      	add	r6, sp, #40	; 0x28
 8024af0:	4633      	mov	r3, r6
 8024af2:	4620      	mov	r0, r4
 8024af4:	f7fe ff2e 	bl	8023954 <siscanf>
 8024af8:	2800      	cmp	r0, #0
 8024afa:	dddf      	ble.n	8024abc <_tzset_unlocked_r+0x34>
 8024afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024afe:	18e7      	adds	r7, r4, r3
 8024b00:	5ce3      	ldrb	r3, [r4, r3]
 8024b02:	2b2d      	cmp	r3, #45	; 0x2d
 8024b04:	d149      	bne.n	8024b9a <_tzset_unlocked_r+0x112>
 8024b06:	3701      	adds	r7, #1
 8024b08:	f04f 34ff 	mov.w	r4, #4294967295
 8024b0c:	f10d 0a20 	add.w	sl, sp, #32
 8024b10:	f10d 0b1e 	add.w	fp, sp, #30
 8024b14:	f04f 0800 	mov.w	r8, #0
 8024b18:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8024b1c:	4994      	ldr	r1, [pc, #592]	; (8024d70 <_tzset_unlocked_r+0x2e8>)
 8024b1e:	9603      	str	r6, [sp, #12]
 8024b20:	f8cd b000 	str.w	fp, [sp]
 8024b24:	4633      	mov	r3, r6
 8024b26:	aa07      	add	r2, sp, #28
 8024b28:	4638      	mov	r0, r7
 8024b2a:	f8ad 801e 	strh.w	r8, [sp, #30]
 8024b2e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8024b32:	f7fe ff0f 	bl	8023954 <siscanf>
 8024b36:	4540      	cmp	r0, r8
 8024b38:	ddc0      	ble.n	8024abc <_tzset_unlocked_r+0x34>
 8024b3a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024b3e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024b42:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8024d7c <_tzset_unlocked_r+0x2f4>
 8024b46:	213c      	movs	r1, #60	; 0x3c
 8024b48:	fb01 2203 	mla	r2, r1, r3, r2
 8024b4c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024b50:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024b54:	fb01 2303 	mla	r3, r1, r3, r2
 8024b58:	435c      	muls	r4, r3
 8024b5a:	62ac      	str	r4, [r5, #40]	; 0x28
 8024b5c:	4c81      	ldr	r4, [pc, #516]	; (8024d64 <_tzset_unlocked_r+0x2dc>)
 8024b5e:	4b82      	ldr	r3, [pc, #520]	; (8024d68 <_tzset_unlocked_r+0x2e0>)
 8024b60:	6023      	str	r3, [r4, #0]
 8024b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b64:	4981      	ldr	r1, [pc, #516]	; (8024d6c <_tzset_unlocked_r+0x2e4>)
 8024b66:	441f      	add	r7, r3
 8024b68:	464a      	mov	r2, r9
 8024b6a:	4633      	mov	r3, r6
 8024b6c:	4638      	mov	r0, r7
 8024b6e:	f7fe fef1 	bl	8023954 <siscanf>
 8024b72:	4540      	cmp	r0, r8
 8024b74:	dc16      	bgt.n	8024ba4 <_tzset_unlocked_r+0x11c>
 8024b76:	6823      	ldr	r3, [r4, #0]
 8024b78:	6063      	str	r3, [r4, #4]
 8024b7a:	4b77      	ldr	r3, [pc, #476]	; (8024d58 <_tzset_unlocked_r+0x2d0>)
 8024b7c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8024b7e:	601a      	str	r2, [r3, #0]
 8024b80:	4b77      	ldr	r3, [pc, #476]	; (8024d60 <_tzset_unlocked_r+0x2d8>)
 8024b82:	f8c3 8000 	str.w	r8, [r3]
 8024b86:	e799      	b.n	8024abc <_tzset_unlocked_r+0x34>
 8024b88:	f7db fb22 	bl	80001d0 <strcmp>
 8024b8c:	2800      	cmp	r0, #0
 8024b8e:	d19b      	bne.n	8024ac8 <_tzset_unlocked_r+0x40>
 8024b90:	e794      	b.n	8024abc <_tzset_unlocked_r+0x34>
 8024b92:	4621      	mov	r1, r4
 8024b94:	f7fe ff5c 	bl	8023a50 <strcpy>
 8024b98:	e7a3      	b.n	8024ae2 <_tzset_unlocked_r+0x5a>
 8024b9a:	2b2b      	cmp	r3, #43	; 0x2b
 8024b9c:	bf08      	it	eq
 8024b9e:	3701      	addeq	r7, #1
 8024ba0:	2401      	movs	r4, #1
 8024ba2:	e7b3      	b.n	8024b0c <_tzset_unlocked_r+0x84>
 8024ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ba6:	f8c4 9004 	str.w	r9, [r4, #4]
 8024baa:	18fc      	adds	r4, r7, r3
 8024bac:	5cfb      	ldrb	r3, [r7, r3]
 8024bae:	2b2d      	cmp	r3, #45	; 0x2d
 8024bb0:	f040 808b 	bne.w	8024cca <_tzset_unlocked_r+0x242>
 8024bb4:	3401      	adds	r4, #1
 8024bb6:	f04f 37ff 	mov.w	r7, #4294967295
 8024bba:	2300      	movs	r3, #0
 8024bbc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024bc0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024bc4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8024bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8024bca:	e9cd a602 	strd	sl, r6, [sp, #8]
 8024bce:	e9cd b600 	strd	fp, r6, [sp]
 8024bd2:	4967      	ldr	r1, [pc, #412]	; (8024d70 <_tzset_unlocked_r+0x2e8>)
 8024bd4:	4633      	mov	r3, r6
 8024bd6:	aa07      	add	r2, sp, #28
 8024bd8:	4620      	mov	r0, r4
 8024bda:	f7fe febb 	bl	8023954 <siscanf>
 8024bde:	2800      	cmp	r0, #0
 8024be0:	dc78      	bgt.n	8024cd4 <_tzset_unlocked_r+0x24c>
 8024be2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8024be4:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8024be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024bea:	652f      	str	r7, [r5, #80]	; 0x50
 8024bec:	441c      	add	r4, r3
 8024bee:	462f      	mov	r7, r5
 8024bf0:	f04f 0900 	mov.w	r9, #0
 8024bf4:	7823      	ldrb	r3, [r4, #0]
 8024bf6:	2b2c      	cmp	r3, #44	; 0x2c
 8024bf8:	bf08      	it	eq
 8024bfa:	3401      	addeq	r4, #1
 8024bfc:	f894 8000 	ldrb.w	r8, [r4]
 8024c00:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8024c04:	d178      	bne.n	8024cf8 <_tzset_unlocked_r+0x270>
 8024c06:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8024c0a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8024c0e:	ab09      	add	r3, sp, #36	; 0x24
 8024c10:	9300      	str	r3, [sp, #0]
 8024c12:	4958      	ldr	r1, [pc, #352]	; (8024d74 <_tzset_unlocked_r+0x2ec>)
 8024c14:	9603      	str	r6, [sp, #12]
 8024c16:	4633      	mov	r3, r6
 8024c18:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8024c1c:	4620      	mov	r0, r4
 8024c1e:	f7fe fe99 	bl	8023954 <siscanf>
 8024c22:	2803      	cmp	r0, #3
 8024c24:	f47f af4a 	bne.w	8024abc <_tzset_unlocked_r+0x34>
 8024c28:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8024c2c:	1e4b      	subs	r3, r1, #1
 8024c2e:	2b0b      	cmp	r3, #11
 8024c30:	f63f af44 	bhi.w	8024abc <_tzset_unlocked_r+0x34>
 8024c34:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8024c38:	1e53      	subs	r3, r2, #1
 8024c3a:	2b04      	cmp	r3, #4
 8024c3c:	f63f af3e 	bhi.w	8024abc <_tzset_unlocked_r+0x34>
 8024c40:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8024c44:	2b06      	cmp	r3, #6
 8024c46:	f63f af39 	bhi.w	8024abc <_tzset_unlocked_r+0x34>
 8024c4a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8024c4e:	f887 8008 	strb.w	r8, [r7, #8]
 8024c52:	617b      	str	r3, [r7, #20]
 8024c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024c56:	eb04 0803 	add.w	r8, r4, r3
 8024c5a:	2302      	movs	r3, #2
 8024c5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024c60:	2300      	movs	r3, #0
 8024c62:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024c66:	f8ad 3020 	strh.w	r3, [sp, #32]
 8024c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8024c6c:	f898 3000 	ldrb.w	r3, [r8]
 8024c70:	2b2f      	cmp	r3, #47	; 0x2f
 8024c72:	d109      	bne.n	8024c88 <_tzset_unlocked_r+0x200>
 8024c74:	e9cd a602 	strd	sl, r6, [sp, #8]
 8024c78:	e9cd b600 	strd	fp, r6, [sp]
 8024c7c:	493e      	ldr	r1, [pc, #248]	; (8024d78 <_tzset_unlocked_r+0x2f0>)
 8024c7e:	4633      	mov	r3, r6
 8024c80:	aa07      	add	r2, sp, #28
 8024c82:	4640      	mov	r0, r8
 8024c84:	f7fe fe66 	bl	8023954 <siscanf>
 8024c88:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024c8c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024c90:	213c      	movs	r1, #60	; 0x3c
 8024c92:	fb01 2203 	mla	r2, r1, r3, r2
 8024c96:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024c9a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024c9e:	fb01 2303 	mla	r3, r1, r3, r2
 8024ca2:	61bb      	str	r3, [r7, #24]
 8024ca4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024ca6:	3728      	adds	r7, #40	; 0x28
 8024ca8:	4444      	add	r4, r8
 8024caa:	f1b9 0f00 	cmp.w	r9, #0
 8024cae:	d020      	beq.n	8024cf2 <_tzset_unlocked_r+0x26a>
 8024cb0:	6868      	ldr	r0, [r5, #4]
 8024cb2:	f7ff fe2f 	bl	8024914 <__tzcalc_limits>
 8024cb6:	4b28      	ldr	r3, [pc, #160]	; (8024d58 <_tzset_unlocked_r+0x2d0>)
 8024cb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8024cba:	601a      	str	r2, [r3, #0]
 8024cbc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8024cbe:	1a9b      	subs	r3, r3, r2
 8024cc0:	4a27      	ldr	r2, [pc, #156]	; (8024d60 <_tzset_unlocked_r+0x2d8>)
 8024cc2:	bf18      	it	ne
 8024cc4:	2301      	movne	r3, #1
 8024cc6:	6013      	str	r3, [r2, #0]
 8024cc8:	e6f8      	b.n	8024abc <_tzset_unlocked_r+0x34>
 8024cca:	2b2b      	cmp	r3, #43	; 0x2b
 8024ccc:	bf08      	it	eq
 8024cce:	3401      	addeq	r4, #1
 8024cd0:	2701      	movs	r7, #1
 8024cd2:	e772      	b.n	8024bba <_tzset_unlocked_r+0x132>
 8024cd4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024cd8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024cdc:	213c      	movs	r1, #60	; 0x3c
 8024cde:	fb01 2203 	mla	r2, r1, r3, r2
 8024ce2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024ce6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024cea:	fb01 2303 	mla	r3, r1, r3, r2
 8024cee:	435f      	muls	r7, r3
 8024cf0:	e77a      	b.n	8024be8 <_tzset_unlocked_r+0x160>
 8024cf2:	f04f 0901 	mov.w	r9, #1
 8024cf6:	e77d      	b.n	8024bf4 <_tzset_unlocked_r+0x16c>
 8024cf8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8024cfc:	bf06      	itte	eq
 8024cfe:	3401      	addeq	r4, #1
 8024d00:	4643      	moveq	r3, r8
 8024d02:	2344      	movne	r3, #68	; 0x44
 8024d04:	220a      	movs	r2, #10
 8024d06:	a90b      	add	r1, sp, #44	; 0x2c
 8024d08:	4620      	mov	r0, r4
 8024d0a:	9305      	str	r3, [sp, #20]
 8024d0c:	f003 f918 	bl	8027f40 <strtoul>
 8024d10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8024d14:	9b05      	ldr	r3, [sp, #20]
 8024d16:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8024d1a:	45a0      	cmp	r8, r4
 8024d1c:	d114      	bne.n	8024d48 <_tzset_unlocked_r+0x2c0>
 8024d1e:	234d      	movs	r3, #77	; 0x4d
 8024d20:	f1b9 0f00 	cmp.w	r9, #0
 8024d24:	d107      	bne.n	8024d36 <_tzset_unlocked_r+0x2ae>
 8024d26:	722b      	strb	r3, [r5, #8]
 8024d28:	2103      	movs	r1, #3
 8024d2a:	2302      	movs	r3, #2
 8024d2c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8024d30:	f8c5 9014 	str.w	r9, [r5, #20]
 8024d34:	e791      	b.n	8024c5a <_tzset_unlocked_r+0x1d2>
 8024d36:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8024d3a:	220b      	movs	r2, #11
 8024d3c:	2301      	movs	r3, #1
 8024d3e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8024d42:	2300      	movs	r3, #0
 8024d44:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024d46:	e788      	b.n	8024c5a <_tzset_unlocked_r+0x1d2>
 8024d48:	b280      	uxth	r0, r0
 8024d4a:	723b      	strb	r3, [r7, #8]
 8024d4c:	6178      	str	r0, [r7, #20]
 8024d4e:	e784      	b.n	8024c5a <_tzset_unlocked_r+0x1d2>
 8024d50:	08033b31 	.word	0x08033b31
 8024d54:	20001168 	.word	0x20001168
 8024d58:	20001170 	.word	0x20001170
 8024d5c:	08033b34 	.word	0x08033b34
 8024d60:	2000116c 	.word	0x2000116c
 8024d64:	20000648 	.word	0x20000648
 8024d68:	2000115b 	.word	0x2000115b
 8024d6c:	08033b38 	.word	0x08033b38
 8024d70:	08033b5b 	.word	0x08033b5b
 8024d74:	08033b47 	.word	0x08033b47
 8024d78:	08033b5a 	.word	0x08033b5a
 8024d7c:	20001150 	.word	0x20001150

08024d80 <_vsniprintf_r>:
 8024d80:	b530      	push	{r4, r5, lr}
 8024d82:	1e14      	subs	r4, r2, #0
 8024d84:	4605      	mov	r5, r0
 8024d86:	b09b      	sub	sp, #108	; 0x6c
 8024d88:	4618      	mov	r0, r3
 8024d8a:	da05      	bge.n	8024d98 <_vsniprintf_r+0x18>
 8024d8c:	238b      	movs	r3, #139	; 0x8b
 8024d8e:	602b      	str	r3, [r5, #0]
 8024d90:	f04f 30ff 	mov.w	r0, #4294967295
 8024d94:	b01b      	add	sp, #108	; 0x6c
 8024d96:	bd30      	pop	{r4, r5, pc}
 8024d98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024d9c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024da0:	bf14      	ite	ne
 8024da2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024da6:	4623      	moveq	r3, r4
 8024da8:	9302      	str	r3, [sp, #8]
 8024daa:	9305      	str	r3, [sp, #20]
 8024dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024db0:	9100      	str	r1, [sp, #0]
 8024db2:	9104      	str	r1, [sp, #16]
 8024db4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024db8:	4602      	mov	r2, r0
 8024dba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024dbc:	4669      	mov	r1, sp
 8024dbe:	4628      	mov	r0, r5
 8024dc0:	f002 fb58 	bl	8027474 <_svfiprintf_r>
 8024dc4:	1c43      	adds	r3, r0, #1
 8024dc6:	bfbc      	itt	lt
 8024dc8:	238b      	movlt	r3, #139	; 0x8b
 8024dca:	602b      	strlt	r3, [r5, #0]
 8024dcc:	2c00      	cmp	r4, #0
 8024dce:	d0e1      	beq.n	8024d94 <_vsniprintf_r+0x14>
 8024dd0:	9b00      	ldr	r3, [sp, #0]
 8024dd2:	2200      	movs	r2, #0
 8024dd4:	701a      	strb	r2, [r3, #0]
 8024dd6:	e7dd      	b.n	8024d94 <_vsniprintf_r+0x14>

08024dd8 <vsniprintf>:
 8024dd8:	b507      	push	{r0, r1, r2, lr}
 8024dda:	9300      	str	r3, [sp, #0]
 8024ddc:	4613      	mov	r3, r2
 8024dde:	460a      	mov	r2, r1
 8024de0:	4601      	mov	r1, r0
 8024de2:	4803      	ldr	r0, [pc, #12]	; (8024df0 <vsniprintf+0x18>)
 8024de4:	6800      	ldr	r0, [r0, #0]
 8024de6:	f7ff ffcb 	bl	8024d80 <_vsniprintf_r>
 8024dea:	b003      	add	sp, #12
 8024dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8024df0:	200005e4 	.word	0x200005e4

08024df4 <__swbuf_r>:
 8024df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024df6:	460e      	mov	r6, r1
 8024df8:	4614      	mov	r4, r2
 8024dfa:	4605      	mov	r5, r0
 8024dfc:	b118      	cbz	r0, 8024e06 <__swbuf_r+0x12>
 8024dfe:	6983      	ldr	r3, [r0, #24]
 8024e00:	b90b      	cbnz	r3, 8024e06 <__swbuf_r+0x12>
 8024e02:	f001 f8b1 	bl	8025f68 <__sinit>
 8024e06:	4b21      	ldr	r3, [pc, #132]	; (8024e8c <__swbuf_r+0x98>)
 8024e08:	429c      	cmp	r4, r3
 8024e0a:	d12b      	bne.n	8024e64 <__swbuf_r+0x70>
 8024e0c:	686c      	ldr	r4, [r5, #4]
 8024e0e:	69a3      	ldr	r3, [r4, #24]
 8024e10:	60a3      	str	r3, [r4, #8]
 8024e12:	89a3      	ldrh	r3, [r4, #12]
 8024e14:	071a      	lsls	r2, r3, #28
 8024e16:	d52f      	bpl.n	8024e78 <__swbuf_r+0x84>
 8024e18:	6923      	ldr	r3, [r4, #16]
 8024e1a:	b36b      	cbz	r3, 8024e78 <__swbuf_r+0x84>
 8024e1c:	6923      	ldr	r3, [r4, #16]
 8024e1e:	6820      	ldr	r0, [r4, #0]
 8024e20:	1ac0      	subs	r0, r0, r3
 8024e22:	6963      	ldr	r3, [r4, #20]
 8024e24:	b2f6      	uxtb	r6, r6
 8024e26:	4283      	cmp	r3, r0
 8024e28:	4637      	mov	r7, r6
 8024e2a:	dc04      	bgt.n	8024e36 <__swbuf_r+0x42>
 8024e2c:	4621      	mov	r1, r4
 8024e2e:	4628      	mov	r0, r5
 8024e30:	f000 fff4 	bl	8025e1c <_fflush_r>
 8024e34:	bb30      	cbnz	r0, 8024e84 <__swbuf_r+0x90>
 8024e36:	68a3      	ldr	r3, [r4, #8]
 8024e38:	3b01      	subs	r3, #1
 8024e3a:	60a3      	str	r3, [r4, #8]
 8024e3c:	6823      	ldr	r3, [r4, #0]
 8024e3e:	1c5a      	adds	r2, r3, #1
 8024e40:	6022      	str	r2, [r4, #0]
 8024e42:	701e      	strb	r6, [r3, #0]
 8024e44:	6963      	ldr	r3, [r4, #20]
 8024e46:	3001      	adds	r0, #1
 8024e48:	4283      	cmp	r3, r0
 8024e4a:	d004      	beq.n	8024e56 <__swbuf_r+0x62>
 8024e4c:	89a3      	ldrh	r3, [r4, #12]
 8024e4e:	07db      	lsls	r3, r3, #31
 8024e50:	d506      	bpl.n	8024e60 <__swbuf_r+0x6c>
 8024e52:	2e0a      	cmp	r6, #10
 8024e54:	d104      	bne.n	8024e60 <__swbuf_r+0x6c>
 8024e56:	4621      	mov	r1, r4
 8024e58:	4628      	mov	r0, r5
 8024e5a:	f000 ffdf 	bl	8025e1c <_fflush_r>
 8024e5e:	b988      	cbnz	r0, 8024e84 <__swbuf_r+0x90>
 8024e60:	4638      	mov	r0, r7
 8024e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024e64:	4b0a      	ldr	r3, [pc, #40]	; (8024e90 <__swbuf_r+0x9c>)
 8024e66:	429c      	cmp	r4, r3
 8024e68:	d101      	bne.n	8024e6e <__swbuf_r+0x7a>
 8024e6a:	68ac      	ldr	r4, [r5, #8]
 8024e6c:	e7cf      	b.n	8024e0e <__swbuf_r+0x1a>
 8024e6e:	4b09      	ldr	r3, [pc, #36]	; (8024e94 <__swbuf_r+0xa0>)
 8024e70:	429c      	cmp	r4, r3
 8024e72:	bf08      	it	eq
 8024e74:	68ec      	ldreq	r4, [r5, #12]
 8024e76:	e7ca      	b.n	8024e0e <__swbuf_r+0x1a>
 8024e78:	4621      	mov	r1, r4
 8024e7a:	4628      	mov	r0, r5
 8024e7c:	f000 f81e 	bl	8024ebc <__swsetup_r>
 8024e80:	2800      	cmp	r0, #0
 8024e82:	d0cb      	beq.n	8024e1c <__swbuf_r+0x28>
 8024e84:	f04f 37ff 	mov.w	r7, #4294967295
 8024e88:	e7ea      	b.n	8024e60 <__swbuf_r+0x6c>
 8024e8a:	bf00      	nop
 8024e8c:	08033c48 	.word	0x08033c48
 8024e90:	08033c68 	.word	0x08033c68
 8024e94:	08033c28 	.word	0x08033c28

08024e98 <_write_r>:
 8024e98:	b538      	push	{r3, r4, r5, lr}
 8024e9a:	4d07      	ldr	r5, [pc, #28]	; (8024eb8 <_write_r+0x20>)
 8024e9c:	4604      	mov	r4, r0
 8024e9e:	4608      	mov	r0, r1
 8024ea0:	4611      	mov	r1, r2
 8024ea2:	2200      	movs	r2, #0
 8024ea4:	602a      	str	r2, [r5, #0]
 8024ea6:	461a      	mov	r2, r3
 8024ea8:	f7df f93c 	bl	8004124 <_write>
 8024eac:	1c43      	adds	r3, r0, #1
 8024eae:	d102      	bne.n	8024eb6 <_write_r+0x1e>
 8024eb0:	682b      	ldr	r3, [r5, #0]
 8024eb2:	b103      	cbz	r3, 8024eb6 <_write_r+0x1e>
 8024eb4:	6023      	str	r3, [r4, #0]
 8024eb6:	bd38      	pop	{r3, r4, r5, pc}
 8024eb8:	20001a28 	.word	0x20001a28

08024ebc <__swsetup_r>:
 8024ebc:	4b32      	ldr	r3, [pc, #200]	; (8024f88 <__swsetup_r+0xcc>)
 8024ebe:	b570      	push	{r4, r5, r6, lr}
 8024ec0:	681d      	ldr	r5, [r3, #0]
 8024ec2:	4606      	mov	r6, r0
 8024ec4:	460c      	mov	r4, r1
 8024ec6:	b125      	cbz	r5, 8024ed2 <__swsetup_r+0x16>
 8024ec8:	69ab      	ldr	r3, [r5, #24]
 8024eca:	b913      	cbnz	r3, 8024ed2 <__swsetup_r+0x16>
 8024ecc:	4628      	mov	r0, r5
 8024ece:	f001 f84b 	bl	8025f68 <__sinit>
 8024ed2:	4b2e      	ldr	r3, [pc, #184]	; (8024f8c <__swsetup_r+0xd0>)
 8024ed4:	429c      	cmp	r4, r3
 8024ed6:	d10f      	bne.n	8024ef8 <__swsetup_r+0x3c>
 8024ed8:	686c      	ldr	r4, [r5, #4]
 8024eda:	89a3      	ldrh	r3, [r4, #12]
 8024edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024ee0:	0719      	lsls	r1, r3, #28
 8024ee2:	d42c      	bmi.n	8024f3e <__swsetup_r+0x82>
 8024ee4:	06dd      	lsls	r5, r3, #27
 8024ee6:	d411      	bmi.n	8024f0c <__swsetup_r+0x50>
 8024ee8:	2309      	movs	r3, #9
 8024eea:	6033      	str	r3, [r6, #0]
 8024eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024ef0:	81a3      	strh	r3, [r4, #12]
 8024ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8024ef6:	e03e      	b.n	8024f76 <__swsetup_r+0xba>
 8024ef8:	4b25      	ldr	r3, [pc, #148]	; (8024f90 <__swsetup_r+0xd4>)
 8024efa:	429c      	cmp	r4, r3
 8024efc:	d101      	bne.n	8024f02 <__swsetup_r+0x46>
 8024efe:	68ac      	ldr	r4, [r5, #8]
 8024f00:	e7eb      	b.n	8024eda <__swsetup_r+0x1e>
 8024f02:	4b24      	ldr	r3, [pc, #144]	; (8024f94 <__swsetup_r+0xd8>)
 8024f04:	429c      	cmp	r4, r3
 8024f06:	bf08      	it	eq
 8024f08:	68ec      	ldreq	r4, [r5, #12]
 8024f0a:	e7e6      	b.n	8024eda <__swsetup_r+0x1e>
 8024f0c:	0758      	lsls	r0, r3, #29
 8024f0e:	d512      	bpl.n	8024f36 <__swsetup_r+0x7a>
 8024f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024f12:	b141      	cbz	r1, 8024f26 <__swsetup_r+0x6a>
 8024f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024f18:	4299      	cmp	r1, r3
 8024f1a:	d002      	beq.n	8024f22 <__swsetup_r+0x66>
 8024f1c:	4630      	mov	r0, r6
 8024f1e:	f7fd fd6d 	bl	80229fc <_free_r>
 8024f22:	2300      	movs	r3, #0
 8024f24:	6363      	str	r3, [r4, #52]	; 0x34
 8024f26:	89a3      	ldrh	r3, [r4, #12]
 8024f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024f2c:	81a3      	strh	r3, [r4, #12]
 8024f2e:	2300      	movs	r3, #0
 8024f30:	6063      	str	r3, [r4, #4]
 8024f32:	6923      	ldr	r3, [r4, #16]
 8024f34:	6023      	str	r3, [r4, #0]
 8024f36:	89a3      	ldrh	r3, [r4, #12]
 8024f38:	f043 0308 	orr.w	r3, r3, #8
 8024f3c:	81a3      	strh	r3, [r4, #12]
 8024f3e:	6923      	ldr	r3, [r4, #16]
 8024f40:	b94b      	cbnz	r3, 8024f56 <__swsetup_r+0x9a>
 8024f42:	89a3      	ldrh	r3, [r4, #12]
 8024f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024f4c:	d003      	beq.n	8024f56 <__swsetup_r+0x9a>
 8024f4e:	4621      	mov	r1, r4
 8024f50:	4630      	mov	r0, r6
 8024f52:	f001 fcf5 	bl	8026940 <__smakebuf_r>
 8024f56:	89a0      	ldrh	r0, [r4, #12]
 8024f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024f5c:	f010 0301 	ands.w	r3, r0, #1
 8024f60:	d00a      	beq.n	8024f78 <__swsetup_r+0xbc>
 8024f62:	2300      	movs	r3, #0
 8024f64:	60a3      	str	r3, [r4, #8]
 8024f66:	6963      	ldr	r3, [r4, #20]
 8024f68:	425b      	negs	r3, r3
 8024f6a:	61a3      	str	r3, [r4, #24]
 8024f6c:	6923      	ldr	r3, [r4, #16]
 8024f6e:	b943      	cbnz	r3, 8024f82 <__swsetup_r+0xc6>
 8024f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024f74:	d1ba      	bne.n	8024eec <__swsetup_r+0x30>
 8024f76:	bd70      	pop	{r4, r5, r6, pc}
 8024f78:	0781      	lsls	r1, r0, #30
 8024f7a:	bf58      	it	pl
 8024f7c:	6963      	ldrpl	r3, [r4, #20]
 8024f7e:	60a3      	str	r3, [r4, #8]
 8024f80:	e7f4      	b.n	8024f6c <__swsetup_r+0xb0>
 8024f82:	2000      	movs	r0, #0
 8024f84:	e7f7      	b.n	8024f76 <__swsetup_r+0xba>
 8024f86:	bf00      	nop
 8024f88:	200005e4 	.word	0x200005e4
 8024f8c:	08033c48 	.word	0x08033c48
 8024f90:	08033c68 	.word	0x08033c68
 8024f94:	08033c28 	.word	0x08033c28

08024f98 <__assert_func>:
 8024f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024f9a:	4614      	mov	r4, r2
 8024f9c:	461a      	mov	r2, r3
 8024f9e:	4b09      	ldr	r3, [pc, #36]	; (8024fc4 <__assert_func+0x2c>)
 8024fa0:	681b      	ldr	r3, [r3, #0]
 8024fa2:	4605      	mov	r5, r0
 8024fa4:	68d8      	ldr	r0, [r3, #12]
 8024fa6:	b14c      	cbz	r4, 8024fbc <__assert_func+0x24>
 8024fa8:	4b07      	ldr	r3, [pc, #28]	; (8024fc8 <__assert_func+0x30>)
 8024faa:	9100      	str	r1, [sp, #0]
 8024fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024fb0:	4906      	ldr	r1, [pc, #24]	; (8024fcc <__assert_func+0x34>)
 8024fb2:	462b      	mov	r3, r5
 8024fb4:	f7fd f928 	bl	8022208 <fiprintf>
 8024fb8:	f003 f813 	bl	8027fe2 <abort>
 8024fbc:	4b04      	ldr	r3, [pc, #16]	; (8024fd0 <__assert_func+0x38>)
 8024fbe:	461c      	mov	r4, r3
 8024fc0:	e7f3      	b.n	8024faa <__assert_func+0x12>
 8024fc2:	bf00      	nop
 8024fc4:	200005e4 	.word	0x200005e4
 8024fc8:	08033b6d 	.word	0x08033b6d
 8024fcc:	08033b7a 	.word	0x08033b7a
 8024fd0:	08030466 	.word	0x08030466

08024fd4 <_close_r>:
 8024fd4:	b538      	push	{r3, r4, r5, lr}
 8024fd6:	4d06      	ldr	r5, [pc, #24]	; (8024ff0 <_close_r+0x1c>)
 8024fd8:	2300      	movs	r3, #0
 8024fda:	4604      	mov	r4, r0
 8024fdc:	4608      	mov	r0, r1
 8024fde:	602b      	str	r3, [r5, #0]
 8024fe0:	f7df f8c8 	bl	8004174 <_close>
 8024fe4:	1c43      	adds	r3, r0, #1
 8024fe6:	d102      	bne.n	8024fee <_close_r+0x1a>
 8024fe8:	682b      	ldr	r3, [r5, #0]
 8024fea:	b103      	cbz	r3, 8024fee <_close_r+0x1a>
 8024fec:	6023      	str	r3, [r4, #0]
 8024fee:	bd38      	pop	{r3, r4, r5, pc}
 8024ff0:	20001a28 	.word	0x20001a28

08024ff4 <div>:
 8024ff4:	2900      	cmp	r1, #0
 8024ff6:	b510      	push	{r4, lr}
 8024ff8:	fb91 f4f2 	sdiv	r4, r1, r2
 8024ffc:	fb02 1314 	mls	r3, r2, r4, r1
 8025000:	db06      	blt.n	8025010 <div+0x1c>
 8025002:	2b00      	cmp	r3, #0
 8025004:	da01      	bge.n	802500a <div+0x16>
 8025006:	3401      	adds	r4, #1
 8025008:	1a9b      	subs	r3, r3, r2
 802500a:	e9c0 4300 	strd	r4, r3, [r0]
 802500e:	bd10      	pop	{r4, pc}
 8025010:	2b00      	cmp	r3, #0
 8025012:	bfc4      	itt	gt
 8025014:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8025018:	189b      	addgt	r3, r3, r2
 802501a:	e7f6      	b.n	802500a <div+0x16>

0802501c <quorem>:
 802501c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025020:	6903      	ldr	r3, [r0, #16]
 8025022:	690c      	ldr	r4, [r1, #16]
 8025024:	42a3      	cmp	r3, r4
 8025026:	4607      	mov	r7, r0
 8025028:	f2c0 8081 	blt.w	802512e <quorem+0x112>
 802502c:	3c01      	subs	r4, #1
 802502e:	f101 0814 	add.w	r8, r1, #20
 8025032:	f100 0514 	add.w	r5, r0, #20
 8025036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802503a:	9301      	str	r3, [sp, #4]
 802503c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025044:	3301      	adds	r3, #1
 8025046:	429a      	cmp	r2, r3
 8025048:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802504c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025050:	fbb2 f6f3 	udiv	r6, r2, r3
 8025054:	d331      	bcc.n	80250ba <quorem+0x9e>
 8025056:	f04f 0e00 	mov.w	lr, #0
 802505a:	4640      	mov	r0, r8
 802505c:	46ac      	mov	ip, r5
 802505e:	46f2      	mov	sl, lr
 8025060:	f850 2b04 	ldr.w	r2, [r0], #4
 8025064:	b293      	uxth	r3, r2
 8025066:	fb06 e303 	mla	r3, r6, r3, lr
 802506a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802506e:	b29b      	uxth	r3, r3
 8025070:	ebaa 0303 	sub.w	r3, sl, r3
 8025074:	0c12      	lsrs	r2, r2, #16
 8025076:	f8dc a000 	ldr.w	sl, [ip]
 802507a:	fb06 e202 	mla	r2, r6, r2, lr
 802507e:	fa13 f38a 	uxtah	r3, r3, sl
 8025082:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025086:	fa1f fa82 	uxth.w	sl, r2
 802508a:	f8dc 2000 	ldr.w	r2, [ip]
 802508e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8025092:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025096:	b29b      	uxth	r3, r3
 8025098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802509c:	4581      	cmp	r9, r0
 802509e:	f84c 3b04 	str.w	r3, [ip], #4
 80250a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80250a6:	d2db      	bcs.n	8025060 <quorem+0x44>
 80250a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80250ac:	b92b      	cbnz	r3, 80250ba <quorem+0x9e>
 80250ae:	9b01      	ldr	r3, [sp, #4]
 80250b0:	3b04      	subs	r3, #4
 80250b2:	429d      	cmp	r5, r3
 80250b4:	461a      	mov	r2, r3
 80250b6:	d32e      	bcc.n	8025116 <quorem+0xfa>
 80250b8:	613c      	str	r4, [r7, #16]
 80250ba:	4638      	mov	r0, r7
 80250bc:	f001 ff66 	bl	8026f8c <__mcmp>
 80250c0:	2800      	cmp	r0, #0
 80250c2:	db24      	blt.n	802510e <quorem+0xf2>
 80250c4:	3601      	adds	r6, #1
 80250c6:	4628      	mov	r0, r5
 80250c8:	f04f 0c00 	mov.w	ip, #0
 80250cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80250d0:	f8d0 e000 	ldr.w	lr, [r0]
 80250d4:	b293      	uxth	r3, r2
 80250d6:	ebac 0303 	sub.w	r3, ip, r3
 80250da:	0c12      	lsrs	r2, r2, #16
 80250dc:	fa13 f38e 	uxtah	r3, r3, lr
 80250e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80250e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80250e8:	b29b      	uxth	r3, r3
 80250ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80250ee:	45c1      	cmp	r9, r8
 80250f0:	f840 3b04 	str.w	r3, [r0], #4
 80250f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80250f8:	d2e8      	bcs.n	80250cc <quorem+0xb0>
 80250fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80250fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025102:	b922      	cbnz	r2, 802510e <quorem+0xf2>
 8025104:	3b04      	subs	r3, #4
 8025106:	429d      	cmp	r5, r3
 8025108:	461a      	mov	r2, r3
 802510a:	d30a      	bcc.n	8025122 <quorem+0x106>
 802510c:	613c      	str	r4, [r7, #16]
 802510e:	4630      	mov	r0, r6
 8025110:	b003      	add	sp, #12
 8025112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025116:	6812      	ldr	r2, [r2, #0]
 8025118:	3b04      	subs	r3, #4
 802511a:	2a00      	cmp	r2, #0
 802511c:	d1cc      	bne.n	80250b8 <quorem+0x9c>
 802511e:	3c01      	subs	r4, #1
 8025120:	e7c7      	b.n	80250b2 <quorem+0x96>
 8025122:	6812      	ldr	r2, [r2, #0]
 8025124:	3b04      	subs	r3, #4
 8025126:	2a00      	cmp	r2, #0
 8025128:	d1f0      	bne.n	802510c <quorem+0xf0>
 802512a:	3c01      	subs	r4, #1
 802512c:	e7eb      	b.n	8025106 <quorem+0xea>
 802512e:	2000      	movs	r0, #0
 8025130:	e7ee      	b.n	8025110 <quorem+0xf4>
 8025132:	0000      	movs	r0, r0
 8025134:	0000      	movs	r0, r0
	...

08025138 <_dtoa_r>:
 8025138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802513c:	ed2d 8b02 	vpush	{d8}
 8025140:	ec57 6b10 	vmov	r6, r7, d0
 8025144:	b095      	sub	sp, #84	; 0x54
 8025146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8025148:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802514c:	9105      	str	r1, [sp, #20]
 802514e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8025152:	4604      	mov	r4, r0
 8025154:	9209      	str	r2, [sp, #36]	; 0x24
 8025156:	930f      	str	r3, [sp, #60]	; 0x3c
 8025158:	b975      	cbnz	r5, 8025178 <_dtoa_r+0x40>
 802515a:	2010      	movs	r0, #16
 802515c:	f7fd f972 	bl	8022444 <malloc>
 8025160:	4602      	mov	r2, r0
 8025162:	6260      	str	r0, [r4, #36]	; 0x24
 8025164:	b920      	cbnz	r0, 8025170 <_dtoa_r+0x38>
 8025166:	4bb2      	ldr	r3, [pc, #712]	; (8025430 <_dtoa_r+0x2f8>)
 8025168:	21ea      	movs	r1, #234	; 0xea
 802516a:	48b2      	ldr	r0, [pc, #712]	; (8025434 <_dtoa_r+0x2fc>)
 802516c:	f7ff ff14 	bl	8024f98 <__assert_func>
 8025170:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8025174:	6005      	str	r5, [r0, #0]
 8025176:	60c5      	str	r5, [r0, #12]
 8025178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802517a:	6819      	ldr	r1, [r3, #0]
 802517c:	b151      	cbz	r1, 8025194 <_dtoa_r+0x5c>
 802517e:	685a      	ldr	r2, [r3, #4]
 8025180:	604a      	str	r2, [r1, #4]
 8025182:	2301      	movs	r3, #1
 8025184:	4093      	lsls	r3, r2
 8025186:	608b      	str	r3, [r1, #8]
 8025188:	4620      	mov	r0, r4
 802518a:	f001 fc77 	bl	8026a7c <_Bfree>
 802518e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025190:	2200      	movs	r2, #0
 8025192:	601a      	str	r2, [r3, #0]
 8025194:	1e3b      	subs	r3, r7, #0
 8025196:	bfb9      	ittee	lt
 8025198:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802519c:	9303      	strlt	r3, [sp, #12]
 802519e:	2300      	movge	r3, #0
 80251a0:	f8c8 3000 	strge.w	r3, [r8]
 80251a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80251a8:	4ba3      	ldr	r3, [pc, #652]	; (8025438 <_dtoa_r+0x300>)
 80251aa:	bfbc      	itt	lt
 80251ac:	2201      	movlt	r2, #1
 80251ae:	f8c8 2000 	strlt.w	r2, [r8]
 80251b2:	ea33 0309 	bics.w	r3, r3, r9
 80251b6:	d11b      	bne.n	80251f0 <_dtoa_r+0xb8>
 80251b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80251ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80251be:	6013      	str	r3, [r2, #0]
 80251c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80251c4:	4333      	orrs	r3, r6
 80251c6:	f000 857a 	beq.w	8025cbe <_dtoa_r+0xb86>
 80251ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80251cc:	b963      	cbnz	r3, 80251e8 <_dtoa_r+0xb0>
 80251ce:	4b9b      	ldr	r3, [pc, #620]	; (802543c <_dtoa_r+0x304>)
 80251d0:	e024      	b.n	802521c <_dtoa_r+0xe4>
 80251d2:	4b9b      	ldr	r3, [pc, #620]	; (8025440 <_dtoa_r+0x308>)
 80251d4:	9300      	str	r3, [sp, #0]
 80251d6:	3308      	adds	r3, #8
 80251d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80251da:	6013      	str	r3, [r2, #0]
 80251dc:	9800      	ldr	r0, [sp, #0]
 80251de:	b015      	add	sp, #84	; 0x54
 80251e0:	ecbd 8b02 	vpop	{d8}
 80251e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251e8:	4b94      	ldr	r3, [pc, #592]	; (802543c <_dtoa_r+0x304>)
 80251ea:	9300      	str	r3, [sp, #0]
 80251ec:	3303      	adds	r3, #3
 80251ee:	e7f3      	b.n	80251d8 <_dtoa_r+0xa0>
 80251f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80251f4:	2200      	movs	r2, #0
 80251f6:	ec51 0b17 	vmov	r0, r1, d7
 80251fa:	2300      	movs	r3, #0
 80251fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8025200:	f7db fc72 	bl	8000ae8 <__aeabi_dcmpeq>
 8025204:	4680      	mov	r8, r0
 8025206:	b158      	cbz	r0, 8025220 <_dtoa_r+0xe8>
 8025208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802520a:	2301      	movs	r3, #1
 802520c:	6013      	str	r3, [r2, #0]
 802520e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025210:	2b00      	cmp	r3, #0
 8025212:	f000 8551 	beq.w	8025cb8 <_dtoa_r+0xb80>
 8025216:	488b      	ldr	r0, [pc, #556]	; (8025444 <_dtoa_r+0x30c>)
 8025218:	6018      	str	r0, [r3, #0]
 802521a:	1e43      	subs	r3, r0, #1
 802521c:	9300      	str	r3, [sp, #0]
 802521e:	e7dd      	b.n	80251dc <_dtoa_r+0xa4>
 8025220:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8025224:	aa12      	add	r2, sp, #72	; 0x48
 8025226:	a913      	add	r1, sp, #76	; 0x4c
 8025228:	4620      	mov	r0, r4
 802522a:	f001 ffcf 	bl	80271cc <__d2b>
 802522e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8025232:	4683      	mov	fp, r0
 8025234:	2d00      	cmp	r5, #0
 8025236:	d07c      	beq.n	8025332 <_dtoa_r+0x1fa>
 8025238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802523a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802523e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025242:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8025246:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802524a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802524e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8025252:	4b7d      	ldr	r3, [pc, #500]	; (8025448 <_dtoa_r+0x310>)
 8025254:	2200      	movs	r2, #0
 8025256:	4630      	mov	r0, r6
 8025258:	4639      	mov	r1, r7
 802525a:	f7db f825 	bl	80002a8 <__aeabi_dsub>
 802525e:	a36e      	add	r3, pc, #440	; (adr r3, 8025418 <_dtoa_r+0x2e0>)
 8025260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025264:	f7db f9d8 	bl	8000618 <__aeabi_dmul>
 8025268:	a36d      	add	r3, pc, #436	; (adr r3, 8025420 <_dtoa_r+0x2e8>)
 802526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802526e:	f7db f81d 	bl	80002ac <__adddf3>
 8025272:	4606      	mov	r6, r0
 8025274:	4628      	mov	r0, r5
 8025276:	460f      	mov	r7, r1
 8025278:	f7db f964 	bl	8000544 <__aeabi_i2d>
 802527c:	a36a      	add	r3, pc, #424	; (adr r3, 8025428 <_dtoa_r+0x2f0>)
 802527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025282:	f7db f9c9 	bl	8000618 <__aeabi_dmul>
 8025286:	4602      	mov	r2, r0
 8025288:	460b      	mov	r3, r1
 802528a:	4630      	mov	r0, r6
 802528c:	4639      	mov	r1, r7
 802528e:	f7db f80d 	bl	80002ac <__adddf3>
 8025292:	4606      	mov	r6, r0
 8025294:	460f      	mov	r7, r1
 8025296:	f7db fc6f 	bl	8000b78 <__aeabi_d2iz>
 802529a:	2200      	movs	r2, #0
 802529c:	4682      	mov	sl, r0
 802529e:	2300      	movs	r3, #0
 80252a0:	4630      	mov	r0, r6
 80252a2:	4639      	mov	r1, r7
 80252a4:	f7db fc2a 	bl	8000afc <__aeabi_dcmplt>
 80252a8:	b148      	cbz	r0, 80252be <_dtoa_r+0x186>
 80252aa:	4650      	mov	r0, sl
 80252ac:	f7db f94a 	bl	8000544 <__aeabi_i2d>
 80252b0:	4632      	mov	r2, r6
 80252b2:	463b      	mov	r3, r7
 80252b4:	f7db fc18 	bl	8000ae8 <__aeabi_dcmpeq>
 80252b8:	b908      	cbnz	r0, 80252be <_dtoa_r+0x186>
 80252ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80252be:	f1ba 0f16 	cmp.w	sl, #22
 80252c2:	d854      	bhi.n	802536e <_dtoa_r+0x236>
 80252c4:	4b61      	ldr	r3, [pc, #388]	; (802544c <_dtoa_r+0x314>)
 80252c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80252ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80252d2:	f7db fc13 	bl	8000afc <__aeabi_dcmplt>
 80252d6:	2800      	cmp	r0, #0
 80252d8:	d04b      	beq.n	8025372 <_dtoa_r+0x23a>
 80252da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80252de:	2300      	movs	r3, #0
 80252e0:	930e      	str	r3, [sp, #56]	; 0x38
 80252e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80252e4:	1b5d      	subs	r5, r3, r5
 80252e6:	1e6b      	subs	r3, r5, #1
 80252e8:	9304      	str	r3, [sp, #16]
 80252ea:	bf43      	ittte	mi
 80252ec:	2300      	movmi	r3, #0
 80252ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80252f2:	9304      	strmi	r3, [sp, #16]
 80252f4:	f04f 0800 	movpl.w	r8, #0
 80252f8:	f1ba 0f00 	cmp.w	sl, #0
 80252fc:	db3b      	blt.n	8025376 <_dtoa_r+0x23e>
 80252fe:	9b04      	ldr	r3, [sp, #16]
 8025300:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8025304:	4453      	add	r3, sl
 8025306:	9304      	str	r3, [sp, #16]
 8025308:	2300      	movs	r3, #0
 802530a:	9306      	str	r3, [sp, #24]
 802530c:	9b05      	ldr	r3, [sp, #20]
 802530e:	2b09      	cmp	r3, #9
 8025310:	d869      	bhi.n	80253e6 <_dtoa_r+0x2ae>
 8025312:	2b05      	cmp	r3, #5
 8025314:	bfc4      	itt	gt
 8025316:	3b04      	subgt	r3, #4
 8025318:	9305      	strgt	r3, [sp, #20]
 802531a:	9b05      	ldr	r3, [sp, #20]
 802531c:	f1a3 0302 	sub.w	r3, r3, #2
 8025320:	bfcc      	ite	gt
 8025322:	2500      	movgt	r5, #0
 8025324:	2501      	movle	r5, #1
 8025326:	2b03      	cmp	r3, #3
 8025328:	d869      	bhi.n	80253fe <_dtoa_r+0x2c6>
 802532a:	e8df f003 	tbb	[pc, r3]
 802532e:	4e2c      	.short	0x4e2c
 8025330:	5a4c      	.short	0x5a4c
 8025332:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8025336:	441d      	add	r5, r3
 8025338:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802533c:	2b20      	cmp	r3, #32
 802533e:	bfc1      	itttt	gt
 8025340:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025344:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8025348:	fa09 f303 	lslgt.w	r3, r9, r3
 802534c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8025350:	bfda      	itte	le
 8025352:	f1c3 0320 	rsble	r3, r3, #32
 8025356:	fa06 f003 	lslle.w	r0, r6, r3
 802535a:	4318      	orrgt	r0, r3
 802535c:	f7db f8e2 	bl	8000524 <__aeabi_ui2d>
 8025360:	2301      	movs	r3, #1
 8025362:	4606      	mov	r6, r0
 8025364:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8025368:	3d01      	subs	r5, #1
 802536a:	9310      	str	r3, [sp, #64]	; 0x40
 802536c:	e771      	b.n	8025252 <_dtoa_r+0x11a>
 802536e:	2301      	movs	r3, #1
 8025370:	e7b6      	b.n	80252e0 <_dtoa_r+0x1a8>
 8025372:	900e      	str	r0, [sp, #56]	; 0x38
 8025374:	e7b5      	b.n	80252e2 <_dtoa_r+0x1aa>
 8025376:	f1ca 0300 	rsb	r3, sl, #0
 802537a:	9306      	str	r3, [sp, #24]
 802537c:	2300      	movs	r3, #0
 802537e:	eba8 080a 	sub.w	r8, r8, sl
 8025382:	930d      	str	r3, [sp, #52]	; 0x34
 8025384:	e7c2      	b.n	802530c <_dtoa_r+0x1d4>
 8025386:	2300      	movs	r3, #0
 8025388:	9308      	str	r3, [sp, #32]
 802538a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802538c:	2b00      	cmp	r3, #0
 802538e:	dc39      	bgt.n	8025404 <_dtoa_r+0x2cc>
 8025390:	f04f 0901 	mov.w	r9, #1
 8025394:	f8cd 9004 	str.w	r9, [sp, #4]
 8025398:	464b      	mov	r3, r9
 802539a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 802539e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80253a0:	2200      	movs	r2, #0
 80253a2:	6042      	str	r2, [r0, #4]
 80253a4:	2204      	movs	r2, #4
 80253a6:	f102 0614 	add.w	r6, r2, #20
 80253aa:	429e      	cmp	r6, r3
 80253ac:	6841      	ldr	r1, [r0, #4]
 80253ae:	d92f      	bls.n	8025410 <_dtoa_r+0x2d8>
 80253b0:	4620      	mov	r0, r4
 80253b2:	f001 fb23 	bl	80269fc <_Balloc>
 80253b6:	9000      	str	r0, [sp, #0]
 80253b8:	2800      	cmp	r0, #0
 80253ba:	d14b      	bne.n	8025454 <_dtoa_r+0x31c>
 80253bc:	4b24      	ldr	r3, [pc, #144]	; (8025450 <_dtoa_r+0x318>)
 80253be:	4602      	mov	r2, r0
 80253c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80253c4:	e6d1      	b.n	802516a <_dtoa_r+0x32>
 80253c6:	2301      	movs	r3, #1
 80253c8:	e7de      	b.n	8025388 <_dtoa_r+0x250>
 80253ca:	2300      	movs	r3, #0
 80253cc:	9308      	str	r3, [sp, #32]
 80253ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80253d0:	eb0a 0903 	add.w	r9, sl, r3
 80253d4:	f109 0301 	add.w	r3, r9, #1
 80253d8:	2b01      	cmp	r3, #1
 80253da:	9301      	str	r3, [sp, #4]
 80253dc:	bfb8      	it	lt
 80253de:	2301      	movlt	r3, #1
 80253e0:	e7dd      	b.n	802539e <_dtoa_r+0x266>
 80253e2:	2301      	movs	r3, #1
 80253e4:	e7f2      	b.n	80253cc <_dtoa_r+0x294>
 80253e6:	2501      	movs	r5, #1
 80253e8:	2300      	movs	r3, #0
 80253ea:	9305      	str	r3, [sp, #20]
 80253ec:	9508      	str	r5, [sp, #32]
 80253ee:	f04f 39ff 	mov.w	r9, #4294967295
 80253f2:	2200      	movs	r2, #0
 80253f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80253f8:	2312      	movs	r3, #18
 80253fa:	9209      	str	r2, [sp, #36]	; 0x24
 80253fc:	e7cf      	b.n	802539e <_dtoa_r+0x266>
 80253fe:	2301      	movs	r3, #1
 8025400:	9308      	str	r3, [sp, #32]
 8025402:	e7f4      	b.n	80253ee <_dtoa_r+0x2b6>
 8025404:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8025408:	f8cd 9004 	str.w	r9, [sp, #4]
 802540c:	464b      	mov	r3, r9
 802540e:	e7c6      	b.n	802539e <_dtoa_r+0x266>
 8025410:	3101      	adds	r1, #1
 8025412:	6041      	str	r1, [r0, #4]
 8025414:	0052      	lsls	r2, r2, #1
 8025416:	e7c6      	b.n	80253a6 <_dtoa_r+0x26e>
 8025418:	636f4361 	.word	0x636f4361
 802541c:	3fd287a7 	.word	0x3fd287a7
 8025420:	8b60c8b3 	.word	0x8b60c8b3
 8025424:	3fc68a28 	.word	0x3fc68a28
 8025428:	509f79fb 	.word	0x509f79fb
 802542c:	3fd34413 	.word	0x3fd34413
 8025430:	080338ff 	.word	0x080338ff
 8025434:	08033bb6 	.word	0x08033bb6
 8025438:	7ff00000 	.word	0x7ff00000
 802543c:	08033bb2 	.word	0x08033bb2
 8025440:	08033ba9 	.word	0x08033ba9
 8025444:	0803280b 	.word	0x0803280b
 8025448:	3ff80000 	.word	0x3ff80000
 802544c:	08033df0 	.word	0x08033df0
 8025450:	08033c15 	.word	0x08033c15
 8025454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025456:	9a00      	ldr	r2, [sp, #0]
 8025458:	601a      	str	r2, [r3, #0]
 802545a:	9b01      	ldr	r3, [sp, #4]
 802545c:	2b0e      	cmp	r3, #14
 802545e:	f200 80ad 	bhi.w	80255bc <_dtoa_r+0x484>
 8025462:	2d00      	cmp	r5, #0
 8025464:	f000 80aa 	beq.w	80255bc <_dtoa_r+0x484>
 8025468:	f1ba 0f00 	cmp.w	sl, #0
 802546c:	dd36      	ble.n	80254dc <_dtoa_r+0x3a4>
 802546e:	4ac3      	ldr	r2, [pc, #780]	; (802577c <_dtoa_r+0x644>)
 8025470:	f00a 030f 	and.w	r3, sl, #15
 8025474:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8025478:	ed93 7b00 	vldr	d7, [r3]
 802547c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8025480:	ea4f 172a 	mov.w	r7, sl, asr #4
 8025484:	eeb0 8a47 	vmov.f32	s16, s14
 8025488:	eef0 8a67 	vmov.f32	s17, s15
 802548c:	d016      	beq.n	80254bc <_dtoa_r+0x384>
 802548e:	4bbc      	ldr	r3, [pc, #752]	; (8025780 <_dtoa_r+0x648>)
 8025490:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8025494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025498:	f7db f9e8 	bl	800086c <__aeabi_ddiv>
 802549c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80254a0:	f007 070f 	and.w	r7, r7, #15
 80254a4:	2503      	movs	r5, #3
 80254a6:	4eb6      	ldr	r6, [pc, #728]	; (8025780 <_dtoa_r+0x648>)
 80254a8:	b957      	cbnz	r7, 80254c0 <_dtoa_r+0x388>
 80254aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80254ae:	ec53 2b18 	vmov	r2, r3, d8
 80254b2:	f7db f9db 	bl	800086c <__aeabi_ddiv>
 80254b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80254ba:	e029      	b.n	8025510 <_dtoa_r+0x3d8>
 80254bc:	2502      	movs	r5, #2
 80254be:	e7f2      	b.n	80254a6 <_dtoa_r+0x36e>
 80254c0:	07f9      	lsls	r1, r7, #31
 80254c2:	d508      	bpl.n	80254d6 <_dtoa_r+0x39e>
 80254c4:	ec51 0b18 	vmov	r0, r1, d8
 80254c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80254cc:	f7db f8a4 	bl	8000618 <__aeabi_dmul>
 80254d0:	ec41 0b18 	vmov	d8, r0, r1
 80254d4:	3501      	adds	r5, #1
 80254d6:	107f      	asrs	r7, r7, #1
 80254d8:	3608      	adds	r6, #8
 80254da:	e7e5      	b.n	80254a8 <_dtoa_r+0x370>
 80254dc:	f000 80a6 	beq.w	802562c <_dtoa_r+0x4f4>
 80254e0:	f1ca 0600 	rsb	r6, sl, #0
 80254e4:	4ba5      	ldr	r3, [pc, #660]	; (802577c <_dtoa_r+0x644>)
 80254e6:	4fa6      	ldr	r7, [pc, #664]	; (8025780 <_dtoa_r+0x648>)
 80254e8:	f006 020f 	and.w	r2, r6, #15
 80254ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80254f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80254f8:	f7db f88e 	bl	8000618 <__aeabi_dmul>
 80254fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025500:	1136      	asrs	r6, r6, #4
 8025502:	2300      	movs	r3, #0
 8025504:	2502      	movs	r5, #2
 8025506:	2e00      	cmp	r6, #0
 8025508:	f040 8085 	bne.w	8025616 <_dtoa_r+0x4de>
 802550c:	2b00      	cmp	r3, #0
 802550e:	d1d2      	bne.n	80254b6 <_dtoa_r+0x37e>
 8025510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025512:	2b00      	cmp	r3, #0
 8025514:	f000 808c 	beq.w	8025630 <_dtoa_r+0x4f8>
 8025518:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802551c:	4b99      	ldr	r3, [pc, #612]	; (8025784 <_dtoa_r+0x64c>)
 802551e:	2200      	movs	r2, #0
 8025520:	4630      	mov	r0, r6
 8025522:	4639      	mov	r1, r7
 8025524:	f7db faea 	bl	8000afc <__aeabi_dcmplt>
 8025528:	2800      	cmp	r0, #0
 802552a:	f000 8081 	beq.w	8025630 <_dtoa_r+0x4f8>
 802552e:	9b01      	ldr	r3, [sp, #4]
 8025530:	2b00      	cmp	r3, #0
 8025532:	d07d      	beq.n	8025630 <_dtoa_r+0x4f8>
 8025534:	f1b9 0f00 	cmp.w	r9, #0
 8025538:	dd3c      	ble.n	80255b4 <_dtoa_r+0x47c>
 802553a:	f10a 33ff 	add.w	r3, sl, #4294967295
 802553e:	9307      	str	r3, [sp, #28]
 8025540:	2200      	movs	r2, #0
 8025542:	4b91      	ldr	r3, [pc, #580]	; (8025788 <_dtoa_r+0x650>)
 8025544:	4630      	mov	r0, r6
 8025546:	4639      	mov	r1, r7
 8025548:	f7db f866 	bl	8000618 <__aeabi_dmul>
 802554c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025550:	3501      	adds	r5, #1
 8025552:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8025556:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802555a:	4628      	mov	r0, r5
 802555c:	f7da fff2 	bl	8000544 <__aeabi_i2d>
 8025560:	4632      	mov	r2, r6
 8025562:	463b      	mov	r3, r7
 8025564:	f7db f858 	bl	8000618 <__aeabi_dmul>
 8025568:	4b88      	ldr	r3, [pc, #544]	; (802578c <_dtoa_r+0x654>)
 802556a:	2200      	movs	r2, #0
 802556c:	f7da fe9e 	bl	80002ac <__adddf3>
 8025570:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8025574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025578:	9303      	str	r3, [sp, #12]
 802557a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802557c:	2b00      	cmp	r3, #0
 802557e:	d15c      	bne.n	802563a <_dtoa_r+0x502>
 8025580:	4b83      	ldr	r3, [pc, #524]	; (8025790 <_dtoa_r+0x658>)
 8025582:	2200      	movs	r2, #0
 8025584:	4630      	mov	r0, r6
 8025586:	4639      	mov	r1, r7
 8025588:	f7da fe8e 	bl	80002a8 <__aeabi_dsub>
 802558c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025590:	4606      	mov	r6, r0
 8025592:	460f      	mov	r7, r1
 8025594:	f7db fad0 	bl	8000b38 <__aeabi_dcmpgt>
 8025598:	2800      	cmp	r0, #0
 802559a:	f040 8296 	bne.w	8025aca <_dtoa_r+0x992>
 802559e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80255a2:	4630      	mov	r0, r6
 80255a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80255a8:	4639      	mov	r1, r7
 80255aa:	f7db faa7 	bl	8000afc <__aeabi_dcmplt>
 80255ae:	2800      	cmp	r0, #0
 80255b0:	f040 8288 	bne.w	8025ac4 <_dtoa_r+0x98c>
 80255b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80255b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80255bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80255be:	2b00      	cmp	r3, #0
 80255c0:	f2c0 8158 	blt.w	8025874 <_dtoa_r+0x73c>
 80255c4:	f1ba 0f0e 	cmp.w	sl, #14
 80255c8:	f300 8154 	bgt.w	8025874 <_dtoa_r+0x73c>
 80255cc:	4b6b      	ldr	r3, [pc, #428]	; (802577c <_dtoa_r+0x644>)
 80255ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80255d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80255d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80255d8:	2b00      	cmp	r3, #0
 80255da:	f280 80e3 	bge.w	80257a4 <_dtoa_r+0x66c>
 80255de:	9b01      	ldr	r3, [sp, #4]
 80255e0:	2b00      	cmp	r3, #0
 80255e2:	f300 80df 	bgt.w	80257a4 <_dtoa_r+0x66c>
 80255e6:	f040 826d 	bne.w	8025ac4 <_dtoa_r+0x98c>
 80255ea:	4b69      	ldr	r3, [pc, #420]	; (8025790 <_dtoa_r+0x658>)
 80255ec:	2200      	movs	r2, #0
 80255ee:	4640      	mov	r0, r8
 80255f0:	4649      	mov	r1, r9
 80255f2:	f7db f811 	bl	8000618 <__aeabi_dmul>
 80255f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80255fa:	f7db fa93 	bl	8000b24 <__aeabi_dcmpge>
 80255fe:	9e01      	ldr	r6, [sp, #4]
 8025600:	4637      	mov	r7, r6
 8025602:	2800      	cmp	r0, #0
 8025604:	f040 8243 	bne.w	8025a8e <_dtoa_r+0x956>
 8025608:	9d00      	ldr	r5, [sp, #0]
 802560a:	2331      	movs	r3, #49	; 0x31
 802560c:	f805 3b01 	strb.w	r3, [r5], #1
 8025610:	f10a 0a01 	add.w	sl, sl, #1
 8025614:	e23f      	b.n	8025a96 <_dtoa_r+0x95e>
 8025616:	07f2      	lsls	r2, r6, #31
 8025618:	d505      	bpl.n	8025626 <_dtoa_r+0x4ee>
 802561a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802561e:	f7da fffb 	bl	8000618 <__aeabi_dmul>
 8025622:	3501      	adds	r5, #1
 8025624:	2301      	movs	r3, #1
 8025626:	1076      	asrs	r6, r6, #1
 8025628:	3708      	adds	r7, #8
 802562a:	e76c      	b.n	8025506 <_dtoa_r+0x3ce>
 802562c:	2502      	movs	r5, #2
 802562e:	e76f      	b.n	8025510 <_dtoa_r+0x3d8>
 8025630:	9b01      	ldr	r3, [sp, #4]
 8025632:	f8cd a01c 	str.w	sl, [sp, #28]
 8025636:	930c      	str	r3, [sp, #48]	; 0x30
 8025638:	e78d      	b.n	8025556 <_dtoa_r+0x41e>
 802563a:	9900      	ldr	r1, [sp, #0]
 802563c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802563e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025640:	4b4e      	ldr	r3, [pc, #312]	; (802577c <_dtoa_r+0x644>)
 8025642:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025646:	4401      	add	r1, r0
 8025648:	9102      	str	r1, [sp, #8]
 802564a:	9908      	ldr	r1, [sp, #32]
 802564c:	eeb0 8a47 	vmov.f32	s16, s14
 8025650:	eef0 8a67 	vmov.f32	s17, s15
 8025654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025658:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802565c:	2900      	cmp	r1, #0
 802565e:	d045      	beq.n	80256ec <_dtoa_r+0x5b4>
 8025660:	494c      	ldr	r1, [pc, #304]	; (8025794 <_dtoa_r+0x65c>)
 8025662:	2000      	movs	r0, #0
 8025664:	f7db f902 	bl	800086c <__aeabi_ddiv>
 8025668:	ec53 2b18 	vmov	r2, r3, d8
 802566c:	f7da fe1c 	bl	80002a8 <__aeabi_dsub>
 8025670:	9d00      	ldr	r5, [sp, #0]
 8025672:	ec41 0b18 	vmov	d8, r0, r1
 8025676:	4639      	mov	r1, r7
 8025678:	4630      	mov	r0, r6
 802567a:	f7db fa7d 	bl	8000b78 <__aeabi_d2iz>
 802567e:	900c      	str	r0, [sp, #48]	; 0x30
 8025680:	f7da ff60 	bl	8000544 <__aeabi_i2d>
 8025684:	4602      	mov	r2, r0
 8025686:	460b      	mov	r3, r1
 8025688:	4630      	mov	r0, r6
 802568a:	4639      	mov	r1, r7
 802568c:	f7da fe0c 	bl	80002a8 <__aeabi_dsub>
 8025690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025692:	3330      	adds	r3, #48	; 0x30
 8025694:	f805 3b01 	strb.w	r3, [r5], #1
 8025698:	ec53 2b18 	vmov	r2, r3, d8
 802569c:	4606      	mov	r6, r0
 802569e:	460f      	mov	r7, r1
 80256a0:	f7db fa2c 	bl	8000afc <__aeabi_dcmplt>
 80256a4:	2800      	cmp	r0, #0
 80256a6:	d165      	bne.n	8025774 <_dtoa_r+0x63c>
 80256a8:	4632      	mov	r2, r6
 80256aa:	463b      	mov	r3, r7
 80256ac:	4935      	ldr	r1, [pc, #212]	; (8025784 <_dtoa_r+0x64c>)
 80256ae:	2000      	movs	r0, #0
 80256b0:	f7da fdfa 	bl	80002a8 <__aeabi_dsub>
 80256b4:	ec53 2b18 	vmov	r2, r3, d8
 80256b8:	f7db fa20 	bl	8000afc <__aeabi_dcmplt>
 80256bc:	2800      	cmp	r0, #0
 80256be:	f040 80b9 	bne.w	8025834 <_dtoa_r+0x6fc>
 80256c2:	9b02      	ldr	r3, [sp, #8]
 80256c4:	429d      	cmp	r5, r3
 80256c6:	f43f af75 	beq.w	80255b4 <_dtoa_r+0x47c>
 80256ca:	4b2f      	ldr	r3, [pc, #188]	; (8025788 <_dtoa_r+0x650>)
 80256cc:	ec51 0b18 	vmov	r0, r1, d8
 80256d0:	2200      	movs	r2, #0
 80256d2:	f7da ffa1 	bl	8000618 <__aeabi_dmul>
 80256d6:	4b2c      	ldr	r3, [pc, #176]	; (8025788 <_dtoa_r+0x650>)
 80256d8:	ec41 0b18 	vmov	d8, r0, r1
 80256dc:	2200      	movs	r2, #0
 80256de:	4630      	mov	r0, r6
 80256e0:	4639      	mov	r1, r7
 80256e2:	f7da ff99 	bl	8000618 <__aeabi_dmul>
 80256e6:	4606      	mov	r6, r0
 80256e8:	460f      	mov	r7, r1
 80256ea:	e7c4      	b.n	8025676 <_dtoa_r+0x53e>
 80256ec:	ec51 0b17 	vmov	r0, r1, d7
 80256f0:	f7da ff92 	bl	8000618 <__aeabi_dmul>
 80256f4:	9b02      	ldr	r3, [sp, #8]
 80256f6:	9d00      	ldr	r5, [sp, #0]
 80256f8:	930c      	str	r3, [sp, #48]	; 0x30
 80256fa:	ec41 0b18 	vmov	d8, r0, r1
 80256fe:	4639      	mov	r1, r7
 8025700:	4630      	mov	r0, r6
 8025702:	f7db fa39 	bl	8000b78 <__aeabi_d2iz>
 8025706:	9011      	str	r0, [sp, #68]	; 0x44
 8025708:	f7da ff1c 	bl	8000544 <__aeabi_i2d>
 802570c:	4602      	mov	r2, r0
 802570e:	460b      	mov	r3, r1
 8025710:	4630      	mov	r0, r6
 8025712:	4639      	mov	r1, r7
 8025714:	f7da fdc8 	bl	80002a8 <__aeabi_dsub>
 8025718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802571a:	3330      	adds	r3, #48	; 0x30
 802571c:	f805 3b01 	strb.w	r3, [r5], #1
 8025720:	9b02      	ldr	r3, [sp, #8]
 8025722:	429d      	cmp	r5, r3
 8025724:	4606      	mov	r6, r0
 8025726:	460f      	mov	r7, r1
 8025728:	f04f 0200 	mov.w	r2, #0
 802572c:	d134      	bne.n	8025798 <_dtoa_r+0x660>
 802572e:	4b19      	ldr	r3, [pc, #100]	; (8025794 <_dtoa_r+0x65c>)
 8025730:	ec51 0b18 	vmov	r0, r1, d8
 8025734:	f7da fdba 	bl	80002ac <__adddf3>
 8025738:	4602      	mov	r2, r0
 802573a:	460b      	mov	r3, r1
 802573c:	4630      	mov	r0, r6
 802573e:	4639      	mov	r1, r7
 8025740:	f7db f9fa 	bl	8000b38 <__aeabi_dcmpgt>
 8025744:	2800      	cmp	r0, #0
 8025746:	d175      	bne.n	8025834 <_dtoa_r+0x6fc>
 8025748:	ec53 2b18 	vmov	r2, r3, d8
 802574c:	4911      	ldr	r1, [pc, #68]	; (8025794 <_dtoa_r+0x65c>)
 802574e:	2000      	movs	r0, #0
 8025750:	f7da fdaa 	bl	80002a8 <__aeabi_dsub>
 8025754:	4602      	mov	r2, r0
 8025756:	460b      	mov	r3, r1
 8025758:	4630      	mov	r0, r6
 802575a:	4639      	mov	r1, r7
 802575c:	f7db f9ce 	bl	8000afc <__aeabi_dcmplt>
 8025760:	2800      	cmp	r0, #0
 8025762:	f43f af27 	beq.w	80255b4 <_dtoa_r+0x47c>
 8025766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025768:	1e6b      	subs	r3, r5, #1
 802576a:	930c      	str	r3, [sp, #48]	; 0x30
 802576c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025770:	2b30      	cmp	r3, #48	; 0x30
 8025772:	d0f8      	beq.n	8025766 <_dtoa_r+0x62e>
 8025774:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8025778:	e04a      	b.n	8025810 <_dtoa_r+0x6d8>
 802577a:	bf00      	nop
 802577c:	08033df0 	.word	0x08033df0
 8025780:	08033dc8 	.word	0x08033dc8
 8025784:	3ff00000 	.word	0x3ff00000
 8025788:	40240000 	.word	0x40240000
 802578c:	401c0000 	.word	0x401c0000
 8025790:	40140000 	.word	0x40140000
 8025794:	3fe00000 	.word	0x3fe00000
 8025798:	4baf      	ldr	r3, [pc, #700]	; (8025a58 <_dtoa_r+0x920>)
 802579a:	f7da ff3d 	bl	8000618 <__aeabi_dmul>
 802579e:	4606      	mov	r6, r0
 80257a0:	460f      	mov	r7, r1
 80257a2:	e7ac      	b.n	80256fe <_dtoa_r+0x5c6>
 80257a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80257a8:	9d00      	ldr	r5, [sp, #0]
 80257aa:	4642      	mov	r2, r8
 80257ac:	464b      	mov	r3, r9
 80257ae:	4630      	mov	r0, r6
 80257b0:	4639      	mov	r1, r7
 80257b2:	f7db f85b 	bl	800086c <__aeabi_ddiv>
 80257b6:	f7db f9df 	bl	8000b78 <__aeabi_d2iz>
 80257ba:	9002      	str	r0, [sp, #8]
 80257bc:	f7da fec2 	bl	8000544 <__aeabi_i2d>
 80257c0:	4642      	mov	r2, r8
 80257c2:	464b      	mov	r3, r9
 80257c4:	f7da ff28 	bl	8000618 <__aeabi_dmul>
 80257c8:	4602      	mov	r2, r0
 80257ca:	460b      	mov	r3, r1
 80257cc:	4630      	mov	r0, r6
 80257ce:	4639      	mov	r1, r7
 80257d0:	f7da fd6a 	bl	80002a8 <__aeabi_dsub>
 80257d4:	9e02      	ldr	r6, [sp, #8]
 80257d6:	9f01      	ldr	r7, [sp, #4]
 80257d8:	3630      	adds	r6, #48	; 0x30
 80257da:	f805 6b01 	strb.w	r6, [r5], #1
 80257de:	9e00      	ldr	r6, [sp, #0]
 80257e0:	1bae      	subs	r6, r5, r6
 80257e2:	42b7      	cmp	r7, r6
 80257e4:	4602      	mov	r2, r0
 80257e6:	460b      	mov	r3, r1
 80257e8:	d137      	bne.n	802585a <_dtoa_r+0x722>
 80257ea:	f7da fd5f 	bl	80002ac <__adddf3>
 80257ee:	4642      	mov	r2, r8
 80257f0:	464b      	mov	r3, r9
 80257f2:	4606      	mov	r6, r0
 80257f4:	460f      	mov	r7, r1
 80257f6:	f7db f99f 	bl	8000b38 <__aeabi_dcmpgt>
 80257fa:	b9c8      	cbnz	r0, 8025830 <_dtoa_r+0x6f8>
 80257fc:	4642      	mov	r2, r8
 80257fe:	464b      	mov	r3, r9
 8025800:	4630      	mov	r0, r6
 8025802:	4639      	mov	r1, r7
 8025804:	f7db f970 	bl	8000ae8 <__aeabi_dcmpeq>
 8025808:	b110      	cbz	r0, 8025810 <_dtoa_r+0x6d8>
 802580a:	9b02      	ldr	r3, [sp, #8]
 802580c:	07d9      	lsls	r1, r3, #31
 802580e:	d40f      	bmi.n	8025830 <_dtoa_r+0x6f8>
 8025810:	4620      	mov	r0, r4
 8025812:	4659      	mov	r1, fp
 8025814:	f001 f932 	bl	8026a7c <_Bfree>
 8025818:	2300      	movs	r3, #0
 802581a:	702b      	strb	r3, [r5, #0]
 802581c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802581e:	f10a 0001 	add.w	r0, sl, #1
 8025822:	6018      	str	r0, [r3, #0]
 8025824:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025826:	2b00      	cmp	r3, #0
 8025828:	f43f acd8 	beq.w	80251dc <_dtoa_r+0xa4>
 802582c:	601d      	str	r5, [r3, #0]
 802582e:	e4d5      	b.n	80251dc <_dtoa_r+0xa4>
 8025830:	f8cd a01c 	str.w	sl, [sp, #28]
 8025834:	462b      	mov	r3, r5
 8025836:	461d      	mov	r5, r3
 8025838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802583c:	2a39      	cmp	r2, #57	; 0x39
 802583e:	d108      	bne.n	8025852 <_dtoa_r+0x71a>
 8025840:	9a00      	ldr	r2, [sp, #0]
 8025842:	429a      	cmp	r2, r3
 8025844:	d1f7      	bne.n	8025836 <_dtoa_r+0x6fe>
 8025846:	9a07      	ldr	r2, [sp, #28]
 8025848:	9900      	ldr	r1, [sp, #0]
 802584a:	3201      	adds	r2, #1
 802584c:	9207      	str	r2, [sp, #28]
 802584e:	2230      	movs	r2, #48	; 0x30
 8025850:	700a      	strb	r2, [r1, #0]
 8025852:	781a      	ldrb	r2, [r3, #0]
 8025854:	3201      	adds	r2, #1
 8025856:	701a      	strb	r2, [r3, #0]
 8025858:	e78c      	b.n	8025774 <_dtoa_r+0x63c>
 802585a:	4b7f      	ldr	r3, [pc, #508]	; (8025a58 <_dtoa_r+0x920>)
 802585c:	2200      	movs	r2, #0
 802585e:	f7da fedb 	bl	8000618 <__aeabi_dmul>
 8025862:	2200      	movs	r2, #0
 8025864:	2300      	movs	r3, #0
 8025866:	4606      	mov	r6, r0
 8025868:	460f      	mov	r7, r1
 802586a:	f7db f93d 	bl	8000ae8 <__aeabi_dcmpeq>
 802586e:	2800      	cmp	r0, #0
 8025870:	d09b      	beq.n	80257aa <_dtoa_r+0x672>
 8025872:	e7cd      	b.n	8025810 <_dtoa_r+0x6d8>
 8025874:	9a08      	ldr	r2, [sp, #32]
 8025876:	2a00      	cmp	r2, #0
 8025878:	f000 80c4 	beq.w	8025a04 <_dtoa_r+0x8cc>
 802587c:	9a05      	ldr	r2, [sp, #20]
 802587e:	2a01      	cmp	r2, #1
 8025880:	f300 80a8 	bgt.w	80259d4 <_dtoa_r+0x89c>
 8025884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025886:	2a00      	cmp	r2, #0
 8025888:	f000 80a0 	beq.w	80259cc <_dtoa_r+0x894>
 802588c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8025890:	9e06      	ldr	r6, [sp, #24]
 8025892:	4645      	mov	r5, r8
 8025894:	9a04      	ldr	r2, [sp, #16]
 8025896:	2101      	movs	r1, #1
 8025898:	441a      	add	r2, r3
 802589a:	4620      	mov	r0, r4
 802589c:	4498      	add	r8, r3
 802589e:	9204      	str	r2, [sp, #16]
 80258a0:	f001 f9f2 	bl	8026c88 <__i2b>
 80258a4:	4607      	mov	r7, r0
 80258a6:	2d00      	cmp	r5, #0
 80258a8:	dd0b      	ble.n	80258c2 <_dtoa_r+0x78a>
 80258aa:	9b04      	ldr	r3, [sp, #16]
 80258ac:	2b00      	cmp	r3, #0
 80258ae:	dd08      	ble.n	80258c2 <_dtoa_r+0x78a>
 80258b0:	42ab      	cmp	r3, r5
 80258b2:	9a04      	ldr	r2, [sp, #16]
 80258b4:	bfa8      	it	ge
 80258b6:	462b      	movge	r3, r5
 80258b8:	eba8 0803 	sub.w	r8, r8, r3
 80258bc:	1aed      	subs	r5, r5, r3
 80258be:	1ad3      	subs	r3, r2, r3
 80258c0:	9304      	str	r3, [sp, #16]
 80258c2:	9b06      	ldr	r3, [sp, #24]
 80258c4:	b1fb      	cbz	r3, 8025906 <_dtoa_r+0x7ce>
 80258c6:	9b08      	ldr	r3, [sp, #32]
 80258c8:	2b00      	cmp	r3, #0
 80258ca:	f000 809f 	beq.w	8025a0c <_dtoa_r+0x8d4>
 80258ce:	2e00      	cmp	r6, #0
 80258d0:	dd11      	ble.n	80258f6 <_dtoa_r+0x7be>
 80258d2:	4639      	mov	r1, r7
 80258d4:	4632      	mov	r2, r6
 80258d6:	4620      	mov	r0, r4
 80258d8:	f001 fa92 	bl	8026e00 <__pow5mult>
 80258dc:	465a      	mov	r2, fp
 80258de:	4601      	mov	r1, r0
 80258e0:	4607      	mov	r7, r0
 80258e2:	4620      	mov	r0, r4
 80258e4:	f001 f9e6 	bl	8026cb4 <__multiply>
 80258e8:	4659      	mov	r1, fp
 80258ea:	9007      	str	r0, [sp, #28]
 80258ec:	4620      	mov	r0, r4
 80258ee:	f001 f8c5 	bl	8026a7c <_Bfree>
 80258f2:	9b07      	ldr	r3, [sp, #28]
 80258f4:	469b      	mov	fp, r3
 80258f6:	9b06      	ldr	r3, [sp, #24]
 80258f8:	1b9a      	subs	r2, r3, r6
 80258fa:	d004      	beq.n	8025906 <_dtoa_r+0x7ce>
 80258fc:	4659      	mov	r1, fp
 80258fe:	4620      	mov	r0, r4
 8025900:	f001 fa7e 	bl	8026e00 <__pow5mult>
 8025904:	4683      	mov	fp, r0
 8025906:	2101      	movs	r1, #1
 8025908:	4620      	mov	r0, r4
 802590a:	f001 f9bd 	bl	8026c88 <__i2b>
 802590e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025910:	2b00      	cmp	r3, #0
 8025912:	4606      	mov	r6, r0
 8025914:	dd7c      	ble.n	8025a10 <_dtoa_r+0x8d8>
 8025916:	461a      	mov	r2, r3
 8025918:	4601      	mov	r1, r0
 802591a:	4620      	mov	r0, r4
 802591c:	f001 fa70 	bl	8026e00 <__pow5mult>
 8025920:	9b05      	ldr	r3, [sp, #20]
 8025922:	2b01      	cmp	r3, #1
 8025924:	4606      	mov	r6, r0
 8025926:	dd76      	ble.n	8025a16 <_dtoa_r+0x8de>
 8025928:	2300      	movs	r3, #0
 802592a:	9306      	str	r3, [sp, #24]
 802592c:	6933      	ldr	r3, [r6, #16]
 802592e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8025932:	6918      	ldr	r0, [r3, #16]
 8025934:	f001 f958 	bl	8026be8 <__hi0bits>
 8025938:	f1c0 0020 	rsb	r0, r0, #32
 802593c:	9b04      	ldr	r3, [sp, #16]
 802593e:	4418      	add	r0, r3
 8025940:	f010 001f 	ands.w	r0, r0, #31
 8025944:	f000 8086 	beq.w	8025a54 <_dtoa_r+0x91c>
 8025948:	f1c0 0320 	rsb	r3, r0, #32
 802594c:	2b04      	cmp	r3, #4
 802594e:	dd7f      	ble.n	8025a50 <_dtoa_r+0x918>
 8025950:	f1c0 001c 	rsb	r0, r0, #28
 8025954:	9b04      	ldr	r3, [sp, #16]
 8025956:	4403      	add	r3, r0
 8025958:	4480      	add	r8, r0
 802595a:	4405      	add	r5, r0
 802595c:	9304      	str	r3, [sp, #16]
 802595e:	f1b8 0f00 	cmp.w	r8, #0
 8025962:	dd05      	ble.n	8025970 <_dtoa_r+0x838>
 8025964:	4659      	mov	r1, fp
 8025966:	4642      	mov	r2, r8
 8025968:	4620      	mov	r0, r4
 802596a:	f001 faa3 	bl	8026eb4 <__lshift>
 802596e:	4683      	mov	fp, r0
 8025970:	9b04      	ldr	r3, [sp, #16]
 8025972:	2b00      	cmp	r3, #0
 8025974:	dd05      	ble.n	8025982 <_dtoa_r+0x84a>
 8025976:	4631      	mov	r1, r6
 8025978:	461a      	mov	r2, r3
 802597a:	4620      	mov	r0, r4
 802597c:	f001 fa9a 	bl	8026eb4 <__lshift>
 8025980:	4606      	mov	r6, r0
 8025982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025984:	2b00      	cmp	r3, #0
 8025986:	d069      	beq.n	8025a5c <_dtoa_r+0x924>
 8025988:	4631      	mov	r1, r6
 802598a:	4658      	mov	r0, fp
 802598c:	f001 fafe 	bl	8026f8c <__mcmp>
 8025990:	2800      	cmp	r0, #0
 8025992:	da63      	bge.n	8025a5c <_dtoa_r+0x924>
 8025994:	2300      	movs	r3, #0
 8025996:	4659      	mov	r1, fp
 8025998:	220a      	movs	r2, #10
 802599a:	4620      	mov	r0, r4
 802599c:	f001 f890 	bl	8026ac0 <__multadd>
 80259a0:	9b08      	ldr	r3, [sp, #32]
 80259a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80259a6:	4683      	mov	fp, r0
 80259a8:	2b00      	cmp	r3, #0
 80259aa:	f000 818f 	beq.w	8025ccc <_dtoa_r+0xb94>
 80259ae:	4639      	mov	r1, r7
 80259b0:	2300      	movs	r3, #0
 80259b2:	220a      	movs	r2, #10
 80259b4:	4620      	mov	r0, r4
 80259b6:	f001 f883 	bl	8026ac0 <__multadd>
 80259ba:	f1b9 0f00 	cmp.w	r9, #0
 80259be:	4607      	mov	r7, r0
 80259c0:	f300 808e 	bgt.w	8025ae0 <_dtoa_r+0x9a8>
 80259c4:	9b05      	ldr	r3, [sp, #20]
 80259c6:	2b02      	cmp	r3, #2
 80259c8:	dc50      	bgt.n	8025a6c <_dtoa_r+0x934>
 80259ca:	e089      	b.n	8025ae0 <_dtoa_r+0x9a8>
 80259cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80259ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80259d2:	e75d      	b.n	8025890 <_dtoa_r+0x758>
 80259d4:	9b01      	ldr	r3, [sp, #4]
 80259d6:	1e5e      	subs	r6, r3, #1
 80259d8:	9b06      	ldr	r3, [sp, #24]
 80259da:	42b3      	cmp	r3, r6
 80259dc:	bfbf      	itttt	lt
 80259de:	9b06      	ldrlt	r3, [sp, #24]
 80259e0:	9606      	strlt	r6, [sp, #24]
 80259e2:	1af2      	sublt	r2, r6, r3
 80259e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80259e6:	bfb6      	itet	lt
 80259e8:	189b      	addlt	r3, r3, r2
 80259ea:	1b9e      	subge	r6, r3, r6
 80259ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80259ee:	9b01      	ldr	r3, [sp, #4]
 80259f0:	bfb8      	it	lt
 80259f2:	2600      	movlt	r6, #0
 80259f4:	2b00      	cmp	r3, #0
 80259f6:	bfb5      	itete	lt
 80259f8:	eba8 0503 	sublt.w	r5, r8, r3
 80259fc:	9b01      	ldrge	r3, [sp, #4]
 80259fe:	2300      	movlt	r3, #0
 8025a00:	4645      	movge	r5, r8
 8025a02:	e747      	b.n	8025894 <_dtoa_r+0x75c>
 8025a04:	9e06      	ldr	r6, [sp, #24]
 8025a06:	9f08      	ldr	r7, [sp, #32]
 8025a08:	4645      	mov	r5, r8
 8025a0a:	e74c      	b.n	80258a6 <_dtoa_r+0x76e>
 8025a0c:	9a06      	ldr	r2, [sp, #24]
 8025a0e:	e775      	b.n	80258fc <_dtoa_r+0x7c4>
 8025a10:	9b05      	ldr	r3, [sp, #20]
 8025a12:	2b01      	cmp	r3, #1
 8025a14:	dc18      	bgt.n	8025a48 <_dtoa_r+0x910>
 8025a16:	9b02      	ldr	r3, [sp, #8]
 8025a18:	b9b3      	cbnz	r3, 8025a48 <_dtoa_r+0x910>
 8025a1a:	9b03      	ldr	r3, [sp, #12]
 8025a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025a20:	b9a3      	cbnz	r3, 8025a4c <_dtoa_r+0x914>
 8025a22:	9b03      	ldr	r3, [sp, #12]
 8025a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025a28:	0d1b      	lsrs	r3, r3, #20
 8025a2a:	051b      	lsls	r3, r3, #20
 8025a2c:	b12b      	cbz	r3, 8025a3a <_dtoa_r+0x902>
 8025a2e:	9b04      	ldr	r3, [sp, #16]
 8025a30:	3301      	adds	r3, #1
 8025a32:	9304      	str	r3, [sp, #16]
 8025a34:	f108 0801 	add.w	r8, r8, #1
 8025a38:	2301      	movs	r3, #1
 8025a3a:	9306      	str	r3, [sp, #24]
 8025a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025a3e:	2b00      	cmp	r3, #0
 8025a40:	f47f af74 	bne.w	802592c <_dtoa_r+0x7f4>
 8025a44:	2001      	movs	r0, #1
 8025a46:	e779      	b.n	802593c <_dtoa_r+0x804>
 8025a48:	2300      	movs	r3, #0
 8025a4a:	e7f6      	b.n	8025a3a <_dtoa_r+0x902>
 8025a4c:	9b02      	ldr	r3, [sp, #8]
 8025a4e:	e7f4      	b.n	8025a3a <_dtoa_r+0x902>
 8025a50:	d085      	beq.n	802595e <_dtoa_r+0x826>
 8025a52:	4618      	mov	r0, r3
 8025a54:	301c      	adds	r0, #28
 8025a56:	e77d      	b.n	8025954 <_dtoa_r+0x81c>
 8025a58:	40240000 	.word	0x40240000
 8025a5c:	9b01      	ldr	r3, [sp, #4]
 8025a5e:	2b00      	cmp	r3, #0
 8025a60:	dc38      	bgt.n	8025ad4 <_dtoa_r+0x99c>
 8025a62:	9b05      	ldr	r3, [sp, #20]
 8025a64:	2b02      	cmp	r3, #2
 8025a66:	dd35      	ble.n	8025ad4 <_dtoa_r+0x99c>
 8025a68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8025a6c:	f1b9 0f00 	cmp.w	r9, #0
 8025a70:	d10d      	bne.n	8025a8e <_dtoa_r+0x956>
 8025a72:	4631      	mov	r1, r6
 8025a74:	464b      	mov	r3, r9
 8025a76:	2205      	movs	r2, #5
 8025a78:	4620      	mov	r0, r4
 8025a7a:	f001 f821 	bl	8026ac0 <__multadd>
 8025a7e:	4601      	mov	r1, r0
 8025a80:	4606      	mov	r6, r0
 8025a82:	4658      	mov	r0, fp
 8025a84:	f001 fa82 	bl	8026f8c <__mcmp>
 8025a88:	2800      	cmp	r0, #0
 8025a8a:	f73f adbd 	bgt.w	8025608 <_dtoa_r+0x4d0>
 8025a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a90:	9d00      	ldr	r5, [sp, #0]
 8025a92:	ea6f 0a03 	mvn.w	sl, r3
 8025a96:	f04f 0800 	mov.w	r8, #0
 8025a9a:	4631      	mov	r1, r6
 8025a9c:	4620      	mov	r0, r4
 8025a9e:	f000 ffed 	bl	8026a7c <_Bfree>
 8025aa2:	2f00      	cmp	r7, #0
 8025aa4:	f43f aeb4 	beq.w	8025810 <_dtoa_r+0x6d8>
 8025aa8:	f1b8 0f00 	cmp.w	r8, #0
 8025aac:	d005      	beq.n	8025aba <_dtoa_r+0x982>
 8025aae:	45b8      	cmp	r8, r7
 8025ab0:	d003      	beq.n	8025aba <_dtoa_r+0x982>
 8025ab2:	4641      	mov	r1, r8
 8025ab4:	4620      	mov	r0, r4
 8025ab6:	f000 ffe1 	bl	8026a7c <_Bfree>
 8025aba:	4639      	mov	r1, r7
 8025abc:	4620      	mov	r0, r4
 8025abe:	f000 ffdd 	bl	8026a7c <_Bfree>
 8025ac2:	e6a5      	b.n	8025810 <_dtoa_r+0x6d8>
 8025ac4:	2600      	movs	r6, #0
 8025ac6:	4637      	mov	r7, r6
 8025ac8:	e7e1      	b.n	8025a8e <_dtoa_r+0x956>
 8025aca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025acc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8025ad0:	4637      	mov	r7, r6
 8025ad2:	e599      	b.n	8025608 <_dtoa_r+0x4d0>
 8025ad4:	9b08      	ldr	r3, [sp, #32]
 8025ad6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8025ada:	2b00      	cmp	r3, #0
 8025adc:	f000 80fd 	beq.w	8025cda <_dtoa_r+0xba2>
 8025ae0:	2d00      	cmp	r5, #0
 8025ae2:	dd05      	ble.n	8025af0 <_dtoa_r+0x9b8>
 8025ae4:	4639      	mov	r1, r7
 8025ae6:	462a      	mov	r2, r5
 8025ae8:	4620      	mov	r0, r4
 8025aea:	f001 f9e3 	bl	8026eb4 <__lshift>
 8025aee:	4607      	mov	r7, r0
 8025af0:	9b06      	ldr	r3, [sp, #24]
 8025af2:	2b00      	cmp	r3, #0
 8025af4:	d05c      	beq.n	8025bb0 <_dtoa_r+0xa78>
 8025af6:	6879      	ldr	r1, [r7, #4]
 8025af8:	4620      	mov	r0, r4
 8025afa:	f000 ff7f 	bl	80269fc <_Balloc>
 8025afe:	4605      	mov	r5, r0
 8025b00:	b928      	cbnz	r0, 8025b0e <_dtoa_r+0x9d6>
 8025b02:	4b80      	ldr	r3, [pc, #512]	; (8025d04 <_dtoa_r+0xbcc>)
 8025b04:	4602      	mov	r2, r0
 8025b06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8025b0a:	f7ff bb2e 	b.w	802516a <_dtoa_r+0x32>
 8025b0e:	693a      	ldr	r2, [r7, #16]
 8025b10:	3202      	adds	r2, #2
 8025b12:	0092      	lsls	r2, r2, #2
 8025b14:	f107 010c 	add.w	r1, r7, #12
 8025b18:	300c      	adds	r0, #12
 8025b1a:	f7fc fcb1 	bl	8022480 <memcpy>
 8025b1e:	2201      	movs	r2, #1
 8025b20:	4629      	mov	r1, r5
 8025b22:	4620      	mov	r0, r4
 8025b24:	f001 f9c6 	bl	8026eb4 <__lshift>
 8025b28:	9b00      	ldr	r3, [sp, #0]
 8025b2a:	3301      	adds	r3, #1
 8025b2c:	9301      	str	r3, [sp, #4]
 8025b2e:	9b00      	ldr	r3, [sp, #0]
 8025b30:	444b      	add	r3, r9
 8025b32:	9307      	str	r3, [sp, #28]
 8025b34:	9b02      	ldr	r3, [sp, #8]
 8025b36:	f003 0301 	and.w	r3, r3, #1
 8025b3a:	46b8      	mov	r8, r7
 8025b3c:	9306      	str	r3, [sp, #24]
 8025b3e:	4607      	mov	r7, r0
 8025b40:	9b01      	ldr	r3, [sp, #4]
 8025b42:	4631      	mov	r1, r6
 8025b44:	3b01      	subs	r3, #1
 8025b46:	4658      	mov	r0, fp
 8025b48:	9302      	str	r3, [sp, #8]
 8025b4a:	f7ff fa67 	bl	802501c <quorem>
 8025b4e:	4603      	mov	r3, r0
 8025b50:	3330      	adds	r3, #48	; 0x30
 8025b52:	9004      	str	r0, [sp, #16]
 8025b54:	4641      	mov	r1, r8
 8025b56:	4658      	mov	r0, fp
 8025b58:	9308      	str	r3, [sp, #32]
 8025b5a:	f001 fa17 	bl	8026f8c <__mcmp>
 8025b5e:	463a      	mov	r2, r7
 8025b60:	4681      	mov	r9, r0
 8025b62:	4631      	mov	r1, r6
 8025b64:	4620      	mov	r0, r4
 8025b66:	f001 fa2d 	bl	8026fc4 <__mdiff>
 8025b6a:	68c2      	ldr	r2, [r0, #12]
 8025b6c:	9b08      	ldr	r3, [sp, #32]
 8025b6e:	4605      	mov	r5, r0
 8025b70:	bb02      	cbnz	r2, 8025bb4 <_dtoa_r+0xa7c>
 8025b72:	4601      	mov	r1, r0
 8025b74:	4658      	mov	r0, fp
 8025b76:	f001 fa09 	bl	8026f8c <__mcmp>
 8025b7a:	9b08      	ldr	r3, [sp, #32]
 8025b7c:	4602      	mov	r2, r0
 8025b7e:	4629      	mov	r1, r5
 8025b80:	4620      	mov	r0, r4
 8025b82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8025b86:	f000 ff79 	bl	8026a7c <_Bfree>
 8025b8a:	9b05      	ldr	r3, [sp, #20]
 8025b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025b8e:	9d01      	ldr	r5, [sp, #4]
 8025b90:	ea43 0102 	orr.w	r1, r3, r2
 8025b94:	9b06      	ldr	r3, [sp, #24]
 8025b96:	430b      	orrs	r3, r1
 8025b98:	9b08      	ldr	r3, [sp, #32]
 8025b9a:	d10d      	bne.n	8025bb8 <_dtoa_r+0xa80>
 8025b9c:	2b39      	cmp	r3, #57	; 0x39
 8025b9e:	d029      	beq.n	8025bf4 <_dtoa_r+0xabc>
 8025ba0:	f1b9 0f00 	cmp.w	r9, #0
 8025ba4:	dd01      	ble.n	8025baa <_dtoa_r+0xa72>
 8025ba6:	9b04      	ldr	r3, [sp, #16]
 8025ba8:	3331      	adds	r3, #49	; 0x31
 8025baa:	9a02      	ldr	r2, [sp, #8]
 8025bac:	7013      	strb	r3, [r2, #0]
 8025bae:	e774      	b.n	8025a9a <_dtoa_r+0x962>
 8025bb0:	4638      	mov	r0, r7
 8025bb2:	e7b9      	b.n	8025b28 <_dtoa_r+0x9f0>
 8025bb4:	2201      	movs	r2, #1
 8025bb6:	e7e2      	b.n	8025b7e <_dtoa_r+0xa46>
 8025bb8:	f1b9 0f00 	cmp.w	r9, #0
 8025bbc:	db06      	blt.n	8025bcc <_dtoa_r+0xa94>
 8025bbe:	9905      	ldr	r1, [sp, #20]
 8025bc0:	ea41 0909 	orr.w	r9, r1, r9
 8025bc4:	9906      	ldr	r1, [sp, #24]
 8025bc6:	ea59 0101 	orrs.w	r1, r9, r1
 8025bca:	d120      	bne.n	8025c0e <_dtoa_r+0xad6>
 8025bcc:	2a00      	cmp	r2, #0
 8025bce:	ddec      	ble.n	8025baa <_dtoa_r+0xa72>
 8025bd0:	4659      	mov	r1, fp
 8025bd2:	2201      	movs	r2, #1
 8025bd4:	4620      	mov	r0, r4
 8025bd6:	9301      	str	r3, [sp, #4]
 8025bd8:	f001 f96c 	bl	8026eb4 <__lshift>
 8025bdc:	4631      	mov	r1, r6
 8025bde:	4683      	mov	fp, r0
 8025be0:	f001 f9d4 	bl	8026f8c <__mcmp>
 8025be4:	2800      	cmp	r0, #0
 8025be6:	9b01      	ldr	r3, [sp, #4]
 8025be8:	dc02      	bgt.n	8025bf0 <_dtoa_r+0xab8>
 8025bea:	d1de      	bne.n	8025baa <_dtoa_r+0xa72>
 8025bec:	07da      	lsls	r2, r3, #31
 8025bee:	d5dc      	bpl.n	8025baa <_dtoa_r+0xa72>
 8025bf0:	2b39      	cmp	r3, #57	; 0x39
 8025bf2:	d1d8      	bne.n	8025ba6 <_dtoa_r+0xa6e>
 8025bf4:	9a02      	ldr	r2, [sp, #8]
 8025bf6:	2339      	movs	r3, #57	; 0x39
 8025bf8:	7013      	strb	r3, [r2, #0]
 8025bfa:	462b      	mov	r3, r5
 8025bfc:	461d      	mov	r5, r3
 8025bfe:	3b01      	subs	r3, #1
 8025c00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8025c04:	2a39      	cmp	r2, #57	; 0x39
 8025c06:	d050      	beq.n	8025caa <_dtoa_r+0xb72>
 8025c08:	3201      	adds	r2, #1
 8025c0a:	701a      	strb	r2, [r3, #0]
 8025c0c:	e745      	b.n	8025a9a <_dtoa_r+0x962>
 8025c0e:	2a00      	cmp	r2, #0
 8025c10:	dd03      	ble.n	8025c1a <_dtoa_r+0xae2>
 8025c12:	2b39      	cmp	r3, #57	; 0x39
 8025c14:	d0ee      	beq.n	8025bf4 <_dtoa_r+0xabc>
 8025c16:	3301      	adds	r3, #1
 8025c18:	e7c7      	b.n	8025baa <_dtoa_r+0xa72>
 8025c1a:	9a01      	ldr	r2, [sp, #4]
 8025c1c:	9907      	ldr	r1, [sp, #28]
 8025c1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8025c22:	428a      	cmp	r2, r1
 8025c24:	d02a      	beq.n	8025c7c <_dtoa_r+0xb44>
 8025c26:	4659      	mov	r1, fp
 8025c28:	2300      	movs	r3, #0
 8025c2a:	220a      	movs	r2, #10
 8025c2c:	4620      	mov	r0, r4
 8025c2e:	f000 ff47 	bl	8026ac0 <__multadd>
 8025c32:	45b8      	cmp	r8, r7
 8025c34:	4683      	mov	fp, r0
 8025c36:	f04f 0300 	mov.w	r3, #0
 8025c3a:	f04f 020a 	mov.w	r2, #10
 8025c3e:	4641      	mov	r1, r8
 8025c40:	4620      	mov	r0, r4
 8025c42:	d107      	bne.n	8025c54 <_dtoa_r+0xb1c>
 8025c44:	f000 ff3c 	bl	8026ac0 <__multadd>
 8025c48:	4680      	mov	r8, r0
 8025c4a:	4607      	mov	r7, r0
 8025c4c:	9b01      	ldr	r3, [sp, #4]
 8025c4e:	3301      	adds	r3, #1
 8025c50:	9301      	str	r3, [sp, #4]
 8025c52:	e775      	b.n	8025b40 <_dtoa_r+0xa08>
 8025c54:	f000 ff34 	bl	8026ac0 <__multadd>
 8025c58:	4639      	mov	r1, r7
 8025c5a:	4680      	mov	r8, r0
 8025c5c:	2300      	movs	r3, #0
 8025c5e:	220a      	movs	r2, #10
 8025c60:	4620      	mov	r0, r4
 8025c62:	f000 ff2d 	bl	8026ac0 <__multadd>
 8025c66:	4607      	mov	r7, r0
 8025c68:	e7f0      	b.n	8025c4c <_dtoa_r+0xb14>
 8025c6a:	f1b9 0f00 	cmp.w	r9, #0
 8025c6e:	9a00      	ldr	r2, [sp, #0]
 8025c70:	bfcc      	ite	gt
 8025c72:	464d      	movgt	r5, r9
 8025c74:	2501      	movle	r5, #1
 8025c76:	4415      	add	r5, r2
 8025c78:	f04f 0800 	mov.w	r8, #0
 8025c7c:	4659      	mov	r1, fp
 8025c7e:	2201      	movs	r2, #1
 8025c80:	4620      	mov	r0, r4
 8025c82:	9301      	str	r3, [sp, #4]
 8025c84:	f001 f916 	bl	8026eb4 <__lshift>
 8025c88:	4631      	mov	r1, r6
 8025c8a:	4683      	mov	fp, r0
 8025c8c:	f001 f97e 	bl	8026f8c <__mcmp>
 8025c90:	2800      	cmp	r0, #0
 8025c92:	dcb2      	bgt.n	8025bfa <_dtoa_r+0xac2>
 8025c94:	d102      	bne.n	8025c9c <_dtoa_r+0xb64>
 8025c96:	9b01      	ldr	r3, [sp, #4]
 8025c98:	07db      	lsls	r3, r3, #31
 8025c9a:	d4ae      	bmi.n	8025bfa <_dtoa_r+0xac2>
 8025c9c:	462b      	mov	r3, r5
 8025c9e:	461d      	mov	r5, r3
 8025ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025ca4:	2a30      	cmp	r2, #48	; 0x30
 8025ca6:	d0fa      	beq.n	8025c9e <_dtoa_r+0xb66>
 8025ca8:	e6f7      	b.n	8025a9a <_dtoa_r+0x962>
 8025caa:	9a00      	ldr	r2, [sp, #0]
 8025cac:	429a      	cmp	r2, r3
 8025cae:	d1a5      	bne.n	8025bfc <_dtoa_r+0xac4>
 8025cb0:	f10a 0a01 	add.w	sl, sl, #1
 8025cb4:	2331      	movs	r3, #49	; 0x31
 8025cb6:	e779      	b.n	8025bac <_dtoa_r+0xa74>
 8025cb8:	4b13      	ldr	r3, [pc, #76]	; (8025d08 <_dtoa_r+0xbd0>)
 8025cba:	f7ff baaf 	b.w	802521c <_dtoa_r+0xe4>
 8025cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025cc0:	2b00      	cmp	r3, #0
 8025cc2:	f47f aa86 	bne.w	80251d2 <_dtoa_r+0x9a>
 8025cc6:	4b11      	ldr	r3, [pc, #68]	; (8025d0c <_dtoa_r+0xbd4>)
 8025cc8:	f7ff baa8 	b.w	802521c <_dtoa_r+0xe4>
 8025ccc:	f1b9 0f00 	cmp.w	r9, #0
 8025cd0:	dc03      	bgt.n	8025cda <_dtoa_r+0xba2>
 8025cd2:	9b05      	ldr	r3, [sp, #20]
 8025cd4:	2b02      	cmp	r3, #2
 8025cd6:	f73f aec9 	bgt.w	8025a6c <_dtoa_r+0x934>
 8025cda:	9d00      	ldr	r5, [sp, #0]
 8025cdc:	4631      	mov	r1, r6
 8025cde:	4658      	mov	r0, fp
 8025ce0:	f7ff f99c 	bl	802501c <quorem>
 8025ce4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8025ce8:	f805 3b01 	strb.w	r3, [r5], #1
 8025cec:	9a00      	ldr	r2, [sp, #0]
 8025cee:	1aaa      	subs	r2, r5, r2
 8025cf0:	4591      	cmp	r9, r2
 8025cf2:	ddba      	ble.n	8025c6a <_dtoa_r+0xb32>
 8025cf4:	4659      	mov	r1, fp
 8025cf6:	2300      	movs	r3, #0
 8025cf8:	220a      	movs	r2, #10
 8025cfa:	4620      	mov	r0, r4
 8025cfc:	f000 fee0 	bl	8026ac0 <__multadd>
 8025d00:	4683      	mov	fp, r0
 8025d02:	e7eb      	b.n	8025cdc <_dtoa_r+0xba4>
 8025d04:	08033c15 	.word	0x08033c15
 8025d08:	0803280a 	.word	0x0803280a
 8025d0c:	08033ba9 	.word	0x08033ba9

08025d10 <__sflush_r>:
 8025d10:	898a      	ldrh	r2, [r1, #12]
 8025d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d16:	4605      	mov	r5, r0
 8025d18:	0710      	lsls	r0, r2, #28
 8025d1a:	460c      	mov	r4, r1
 8025d1c:	d458      	bmi.n	8025dd0 <__sflush_r+0xc0>
 8025d1e:	684b      	ldr	r3, [r1, #4]
 8025d20:	2b00      	cmp	r3, #0
 8025d22:	dc05      	bgt.n	8025d30 <__sflush_r+0x20>
 8025d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025d26:	2b00      	cmp	r3, #0
 8025d28:	dc02      	bgt.n	8025d30 <__sflush_r+0x20>
 8025d2a:	2000      	movs	r0, #0
 8025d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025d32:	2e00      	cmp	r6, #0
 8025d34:	d0f9      	beq.n	8025d2a <__sflush_r+0x1a>
 8025d36:	2300      	movs	r3, #0
 8025d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025d3c:	682f      	ldr	r7, [r5, #0]
 8025d3e:	602b      	str	r3, [r5, #0]
 8025d40:	d032      	beq.n	8025da8 <__sflush_r+0x98>
 8025d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025d44:	89a3      	ldrh	r3, [r4, #12]
 8025d46:	075a      	lsls	r2, r3, #29
 8025d48:	d505      	bpl.n	8025d56 <__sflush_r+0x46>
 8025d4a:	6863      	ldr	r3, [r4, #4]
 8025d4c:	1ac0      	subs	r0, r0, r3
 8025d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025d50:	b10b      	cbz	r3, 8025d56 <__sflush_r+0x46>
 8025d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025d54:	1ac0      	subs	r0, r0, r3
 8025d56:	2300      	movs	r3, #0
 8025d58:	4602      	mov	r2, r0
 8025d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025d5c:	6a21      	ldr	r1, [r4, #32]
 8025d5e:	4628      	mov	r0, r5
 8025d60:	47b0      	blx	r6
 8025d62:	1c43      	adds	r3, r0, #1
 8025d64:	89a3      	ldrh	r3, [r4, #12]
 8025d66:	d106      	bne.n	8025d76 <__sflush_r+0x66>
 8025d68:	6829      	ldr	r1, [r5, #0]
 8025d6a:	291d      	cmp	r1, #29
 8025d6c:	d82c      	bhi.n	8025dc8 <__sflush_r+0xb8>
 8025d6e:	4a2a      	ldr	r2, [pc, #168]	; (8025e18 <__sflush_r+0x108>)
 8025d70:	40ca      	lsrs	r2, r1
 8025d72:	07d6      	lsls	r6, r2, #31
 8025d74:	d528      	bpl.n	8025dc8 <__sflush_r+0xb8>
 8025d76:	2200      	movs	r2, #0
 8025d78:	6062      	str	r2, [r4, #4]
 8025d7a:	04d9      	lsls	r1, r3, #19
 8025d7c:	6922      	ldr	r2, [r4, #16]
 8025d7e:	6022      	str	r2, [r4, #0]
 8025d80:	d504      	bpl.n	8025d8c <__sflush_r+0x7c>
 8025d82:	1c42      	adds	r2, r0, #1
 8025d84:	d101      	bne.n	8025d8a <__sflush_r+0x7a>
 8025d86:	682b      	ldr	r3, [r5, #0]
 8025d88:	b903      	cbnz	r3, 8025d8c <__sflush_r+0x7c>
 8025d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8025d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025d8e:	602f      	str	r7, [r5, #0]
 8025d90:	2900      	cmp	r1, #0
 8025d92:	d0ca      	beq.n	8025d2a <__sflush_r+0x1a>
 8025d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025d98:	4299      	cmp	r1, r3
 8025d9a:	d002      	beq.n	8025da2 <__sflush_r+0x92>
 8025d9c:	4628      	mov	r0, r5
 8025d9e:	f7fc fe2d 	bl	80229fc <_free_r>
 8025da2:	2000      	movs	r0, #0
 8025da4:	6360      	str	r0, [r4, #52]	; 0x34
 8025da6:	e7c1      	b.n	8025d2c <__sflush_r+0x1c>
 8025da8:	6a21      	ldr	r1, [r4, #32]
 8025daa:	2301      	movs	r3, #1
 8025dac:	4628      	mov	r0, r5
 8025dae:	47b0      	blx	r6
 8025db0:	1c41      	adds	r1, r0, #1
 8025db2:	d1c7      	bne.n	8025d44 <__sflush_r+0x34>
 8025db4:	682b      	ldr	r3, [r5, #0]
 8025db6:	2b00      	cmp	r3, #0
 8025db8:	d0c4      	beq.n	8025d44 <__sflush_r+0x34>
 8025dba:	2b1d      	cmp	r3, #29
 8025dbc:	d001      	beq.n	8025dc2 <__sflush_r+0xb2>
 8025dbe:	2b16      	cmp	r3, #22
 8025dc0:	d101      	bne.n	8025dc6 <__sflush_r+0xb6>
 8025dc2:	602f      	str	r7, [r5, #0]
 8025dc4:	e7b1      	b.n	8025d2a <__sflush_r+0x1a>
 8025dc6:	89a3      	ldrh	r3, [r4, #12]
 8025dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025dcc:	81a3      	strh	r3, [r4, #12]
 8025dce:	e7ad      	b.n	8025d2c <__sflush_r+0x1c>
 8025dd0:	690f      	ldr	r7, [r1, #16]
 8025dd2:	2f00      	cmp	r7, #0
 8025dd4:	d0a9      	beq.n	8025d2a <__sflush_r+0x1a>
 8025dd6:	0793      	lsls	r3, r2, #30
 8025dd8:	680e      	ldr	r6, [r1, #0]
 8025dda:	bf08      	it	eq
 8025ddc:	694b      	ldreq	r3, [r1, #20]
 8025dde:	600f      	str	r7, [r1, #0]
 8025de0:	bf18      	it	ne
 8025de2:	2300      	movne	r3, #0
 8025de4:	eba6 0807 	sub.w	r8, r6, r7
 8025de8:	608b      	str	r3, [r1, #8]
 8025dea:	f1b8 0f00 	cmp.w	r8, #0
 8025dee:	dd9c      	ble.n	8025d2a <__sflush_r+0x1a>
 8025df0:	6a21      	ldr	r1, [r4, #32]
 8025df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025df4:	4643      	mov	r3, r8
 8025df6:	463a      	mov	r2, r7
 8025df8:	4628      	mov	r0, r5
 8025dfa:	47b0      	blx	r6
 8025dfc:	2800      	cmp	r0, #0
 8025dfe:	dc06      	bgt.n	8025e0e <__sflush_r+0xfe>
 8025e00:	89a3      	ldrh	r3, [r4, #12]
 8025e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025e06:	81a3      	strh	r3, [r4, #12]
 8025e08:	f04f 30ff 	mov.w	r0, #4294967295
 8025e0c:	e78e      	b.n	8025d2c <__sflush_r+0x1c>
 8025e0e:	4407      	add	r7, r0
 8025e10:	eba8 0800 	sub.w	r8, r8, r0
 8025e14:	e7e9      	b.n	8025dea <__sflush_r+0xda>
 8025e16:	bf00      	nop
 8025e18:	20400001 	.word	0x20400001

08025e1c <_fflush_r>:
 8025e1c:	b538      	push	{r3, r4, r5, lr}
 8025e1e:	690b      	ldr	r3, [r1, #16]
 8025e20:	4605      	mov	r5, r0
 8025e22:	460c      	mov	r4, r1
 8025e24:	b913      	cbnz	r3, 8025e2c <_fflush_r+0x10>
 8025e26:	2500      	movs	r5, #0
 8025e28:	4628      	mov	r0, r5
 8025e2a:	bd38      	pop	{r3, r4, r5, pc}
 8025e2c:	b118      	cbz	r0, 8025e36 <_fflush_r+0x1a>
 8025e2e:	6983      	ldr	r3, [r0, #24]
 8025e30:	b90b      	cbnz	r3, 8025e36 <_fflush_r+0x1a>
 8025e32:	f000 f899 	bl	8025f68 <__sinit>
 8025e36:	4b14      	ldr	r3, [pc, #80]	; (8025e88 <_fflush_r+0x6c>)
 8025e38:	429c      	cmp	r4, r3
 8025e3a:	d11b      	bne.n	8025e74 <_fflush_r+0x58>
 8025e3c:	686c      	ldr	r4, [r5, #4]
 8025e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025e42:	2b00      	cmp	r3, #0
 8025e44:	d0ef      	beq.n	8025e26 <_fflush_r+0xa>
 8025e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025e48:	07d0      	lsls	r0, r2, #31
 8025e4a:	d404      	bmi.n	8025e56 <_fflush_r+0x3a>
 8025e4c:	0599      	lsls	r1, r3, #22
 8025e4e:	d402      	bmi.n	8025e56 <_fflush_r+0x3a>
 8025e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025e52:	f000 fd3b 	bl	80268cc <__retarget_lock_acquire_recursive>
 8025e56:	4628      	mov	r0, r5
 8025e58:	4621      	mov	r1, r4
 8025e5a:	f7ff ff59 	bl	8025d10 <__sflush_r>
 8025e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025e60:	07da      	lsls	r2, r3, #31
 8025e62:	4605      	mov	r5, r0
 8025e64:	d4e0      	bmi.n	8025e28 <_fflush_r+0xc>
 8025e66:	89a3      	ldrh	r3, [r4, #12]
 8025e68:	059b      	lsls	r3, r3, #22
 8025e6a:	d4dd      	bmi.n	8025e28 <_fflush_r+0xc>
 8025e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025e6e:	f000 fd2f 	bl	80268d0 <__retarget_lock_release_recursive>
 8025e72:	e7d9      	b.n	8025e28 <_fflush_r+0xc>
 8025e74:	4b05      	ldr	r3, [pc, #20]	; (8025e8c <_fflush_r+0x70>)
 8025e76:	429c      	cmp	r4, r3
 8025e78:	d101      	bne.n	8025e7e <_fflush_r+0x62>
 8025e7a:	68ac      	ldr	r4, [r5, #8]
 8025e7c:	e7df      	b.n	8025e3e <_fflush_r+0x22>
 8025e7e:	4b04      	ldr	r3, [pc, #16]	; (8025e90 <_fflush_r+0x74>)
 8025e80:	429c      	cmp	r4, r3
 8025e82:	bf08      	it	eq
 8025e84:	68ec      	ldreq	r4, [r5, #12]
 8025e86:	e7da      	b.n	8025e3e <_fflush_r+0x22>
 8025e88:	08033c48 	.word	0x08033c48
 8025e8c:	08033c68 	.word	0x08033c68
 8025e90:	08033c28 	.word	0x08033c28

08025e94 <fflush>:
 8025e94:	4601      	mov	r1, r0
 8025e96:	b920      	cbnz	r0, 8025ea2 <fflush+0xe>
 8025e98:	4b04      	ldr	r3, [pc, #16]	; (8025eac <fflush+0x18>)
 8025e9a:	4905      	ldr	r1, [pc, #20]	; (8025eb0 <fflush+0x1c>)
 8025e9c:	6818      	ldr	r0, [r3, #0]
 8025e9e:	f000 b8fe 	b.w	802609e <_fwalk_reent>
 8025ea2:	4b04      	ldr	r3, [pc, #16]	; (8025eb4 <fflush+0x20>)
 8025ea4:	6818      	ldr	r0, [r3, #0]
 8025ea6:	f7ff bfb9 	b.w	8025e1c <_fflush_r>
 8025eaa:	bf00      	nop
 8025eac:	08033978 	.word	0x08033978
 8025eb0:	08025e1d 	.word	0x08025e1d
 8025eb4:	200005e4 	.word	0x200005e4

08025eb8 <std>:
 8025eb8:	2300      	movs	r3, #0
 8025eba:	b510      	push	{r4, lr}
 8025ebc:	4604      	mov	r4, r0
 8025ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8025ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025ec6:	6083      	str	r3, [r0, #8]
 8025ec8:	8181      	strh	r1, [r0, #12]
 8025eca:	6643      	str	r3, [r0, #100]	; 0x64
 8025ecc:	81c2      	strh	r2, [r0, #14]
 8025ece:	6183      	str	r3, [r0, #24]
 8025ed0:	4619      	mov	r1, r3
 8025ed2:	2208      	movs	r2, #8
 8025ed4:	305c      	adds	r0, #92	; 0x5c
 8025ed6:	f7fc fafb 	bl	80224d0 <memset>
 8025eda:	4b05      	ldr	r3, [pc, #20]	; (8025ef0 <std+0x38>)
 8025edc:	6263      	str	r3, [r4, #36]	; 0x24
 8025ede:	4b05      	ldr	r3, [pc, #20]	; (8025ef4 <std+0x3c>)
 8025ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8025ee2:	4b05      	ldr	r3, [pc, #20]	; (8025ef8 <std+0x40>)
 8025ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025ee6:	4b05      	ldr	r3, [pc, #20]	; (8025efc <std+0x44>)
 8025ee8:	6224      	str	r4, [r4, #32]
 8025eea:	6323      	str	r3, [r4, #48]	; 0x30
 8025eec:	bd10      	pop	{r4, pc}
 8025eee:	bf00      	nop
 8025ef0:	080239ad 	.word	0x080239ad
 8025ef4:	080239d3 	.word	0x080239d3
 8025ef8:	08023a0b 	.word	0x08023a0b
 8025efc:	08023a2f 	.word	0x08023a2f

08025f00 <_cleanup_r>:
 8025f00:	4901      	ldr	r1, [pc, #4]	; (8025f08 <_cleanup_r+0x8>)
 8025f02:	f000 b8cc 	b.w	802609e <_fwalk_reent>
 8025f06:	bf00      	nop
 8025f08:	08025e1d 	.word	0x08025e1d

08025f0c <__sfmoreglue>:
 8025f0c:	b570      	push	{r4, r5, r6, lr}
 8025f0e:	1e4a      	subs	r2, r1, #1
 8025f10:	2568      	movs	r5, #104	; 0x68
 8025f12:	4355      	muls	r5, r2
 8025f14:	460e      	mov	r6, r1
 8025f16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025f1a:	f7fc fdbf 	bl	8022a9c <_malloc_r>
 8025f1e:	4604      	mov	r4, r0
 8025f20:	b140      	cbz	r0, 8025f34 <__sfmoreglue+0x28>
 8025f22:	2100      	movs	r1, #0
 8025f24:	e9c0 1600 	strd	r1, r6, [r0]
 8025f28:	300c      	adds	r0, #12
 8025f2a:	60a0      	str	r0, [r4, #8]
 8025f2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025f30:	f7fc face 	bl	80224d0 <memset>
 8025f34:	4620      	mov	r0, r4
 8025f36:	bd70      	pop	{r4, r5, r6, pc}

08025f38 <__sfp_lock_acquire>:
 8025f38:	4801      	ldr	r0, [pc, #4]	; (8025f40 <__sfp_lock_acquire+0x8>)
 8025f3a:	f000 bcc7 	b.w	80268cc <__retarget_lock_acquire_recursive>
 8025f3e:	bf00      	nop
 8025f40:	20001a24 	.word	0x20001a24

08025f44 <__sfp_lock_release>:
 8025f44:	4801      	ldr	r0, [pc, #4]	; (8025f4c <__sfp_lock_release+0x8>)
 8025f46:	f000 bcc3 	b.w	80268d0 <__retarget_lock_release_recursive>
 8025f4a:	bf00      	nop
 8025f4c:	20001a24 	.word	0x20001a24

08025f50 <__sinit_lock_acquire>:
 8025f50:	4801      	ldr	r0, [pc, #4]	; (8025f58 <__sinit_lock_acquire+0x8>)
 8025f52:	f000 bcbb 	b.w	80268cc <__retarget_lock_acquire_recursive>
 8025f56:	bf00      	nop
 8025f58:	20001a1f 	.word	0x20001a1f

08025f5c <__sinit_lock_release>:
 8025f5c:	4801      	ldr	r0, [pc, #4]	; (8025f64 <__sinit_lock_release+0x8>)
 8025f5e:	f000 bcb7 	b.w	80268d0 <__retarget_lock_release_recursive>
 8025f62:	bf00      	nop
 8025f64:	20001a1f 	.word	0x20001a1f

08025f68 <__sinit>:
 8025f68:	b510      	push	{r4, lr}
 8025f6a:	4604      	mov	r4, r0
 8025f6c:	f7ff fff0 	bl	8025f50 <__sinit_lock_acquire>
 8025f70:	69a3      	ldr	r3, [r4, #24]
 8025f72:	b11b      	cbz	r3, 8025f7c <__sinit+0x14>
 8025f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f78:	f7ff bff0 	b.w	8025f5c <__sinit_lock_release>
 8025f7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025f80:	6523      	str	r3, [r4, #80]	; 0x50
 8025f82:	4b13      	ldr	r3, [pc, #76]	; (8025fd0 <__sinit+0x68>)
 8025f84:	4a13      	ldr	r2, [pc, #76]	; (8025fd4 <__sinit+0x6c>)
 8025f86:	681b      	ldr	r3, [r3, #0]
 8025f88:	62a2      	str	r2, [r4, #40]	; 0x28
 8025f8a:	42a3      	cmp	r3, r4
 8025f8c:	bf04      	itt	eq
 8025f8e:	2301      	moveq	r3, #1
 8025f90:	61a3      	streq	r3, [r4, #24]
 8025f92:	4620      	mov	r0, r4
 8025f94:	f000 f820 	bl	8025fd8 <__sfp>
 8025f98:	6060      	str	r0, [r4, #4]
 8025f9a:	4620      	mov	r0, r4
 8025f9c:	f000 f81c 	bl	8025fd8 <__sfp>
 8025fa0:	60a0      	str	r0, [r4, #8]
 8025fa2:	4620      	mov	r0, r4
 8025fa4:	f000 f818 	bl	8025fd8 <__sfp>
 8025fa8:	2200      	movs	r2, #0
 8025faa:	60e0      	str	r0, [r4, #12]
 8025fac:	2104      	movs	r1, #4
 8025fae:	6860      	ldr	r0, [r4, #4]
 8025fb0:	f7ff ff82 	bl	8025eb8 <std>
 8025fb4:	68a0      	ldr	r0, [r4, #8]
 8025fb6:	2201      	movs	r2, #1
 8025fb8:	2109      	movs	r1, #9
 8025fba:	f7ff ff7d 	bl	8025eb8 <std>
 8025fbe:	68e0      	ldr	r0, [r4, #12]
 8025fc0:	2202      	movs	r2, #2
 8025fc2:	2112      	movs	r1, #18
 8025fc4:	f7ff ff78 	bl	8025eb8 <std>
 8025fc8:	2301      	movs	r3, #1
 8025fca:	61a3      	str	r3, [r4, #24]
 8025fcc:	e7d2      	b.n	8025f74 <__sinit+0xc>
 8025fce:	bf00      	nop
 8025fd0:	08033978 	.word	0x08033978
 8025fd4:	08025f01 	.word	0x08025f01

08025fd8 <__sfp>:
 8025fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025fda:	4607      	mov	r7, r0
 8025fdc:	f7ff ffac 	bl	8025f38 <__sfp_lock_acquire>
 8025fe0:	4b1e      	ldr	r3, [pc, #120]	; (802605c <__sfp+0x84>)
 8025fe2:	681e      	ldr	r6, [r3, #0]
 8025fe4:	69b3      	ldr	r3, [r6, #24]
 8025fe6:	b913      	cbnz	r3, 8025fee <__sfp+0x16>
 8025fe8:	4630      	mov	r0, r6
 8025fea:	f7ff ffbd 	bl	8025f68 <__sinit>
 8025fee:	3648      	adds	r6, #72	; 0x48
 8025ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025ff4:	3b01      	subs	r3, #1
 8025ff6:	d503      	bpl.n	8026000 <__sfp+0x28>
 8025ff8:	6833      	ldr	r3, [r6, #0]
 8025ffa:	b30b      	cbz	r3, 8026040 <__sfp+0x68>
 8025ffc:	6836      	ldr	r6, [r6, #0]
 8025ffe:	e7f7      	b.n	8025ff0 <__sfp+0x18>
 8026000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026004:	b9d5      	cbnz	r5, 802603c <__sfp+0x64>
 8026006:	4b16      	ldr	r3, [pc, #88]	; (8026060 <__sfp+0x88>)
 8026008:	60e3      	str	r3, [r4, #12]
 802600a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802600e:	6665      	str	r5, [r4, #100]	; 0x64
 8026010:	f000 fc5a 	bl	80268c8 <__retarget_lock_init_recursive>
 8026014:	f7ff ff96 	bl	8025f44 <__sfp_lock_release>
 8026018:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802601c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026020:	6025      	str	r5, [r4, #0]
 8026022:	61a5      	str	r5, [r4, #24]
 8026024:	2208      	movs	r2, #8
 8026026:	4629      	mov	r1, r5
 8026028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802602c:	f7fc fa50 	bl	80224d0 <memset>
 8026030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026038:	4620      	mov	r0, r4
 802603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802603c:	3468      	adds	r4, #104	; 0x68
 802603e:	e7d9      	b.n	8025ff4 <__sfp+0x1c>
 8026040:	2104      	movs	r1, #4
 8026042:	4638      	mov	r0, r7
 8026044:	f7ff ff62 	bl	8025f0c <__sfmoreglue>
 8026048:	4604      	mov	r4, r0
 802604a:	6030      	str	r0, [r6, #0]
 802604c:	2800      	cmp	r0, #0
 802604e:	d1d5      	bne.n	8025ffc <__sfp+0x24>
 8026050:	f7ff ff78 	bl	8025f44 <__sfp_lock_release>
 8026054:	230c      	movs	r3, #12
 8026056:	603b      	str	r3, [r7, #0]
 8026058:	e7ee      	b.n	8026038 <__sfp+0x60>
 802605a:	bf00      	nop
 802605c:	08033978 	.word	0x08033978
 8026060:	ffff0001 	.word	0xffff0001

08026064 <_fwalk>:
 8026064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026068:	460f      	mov	r7, r1
 802606a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802606e:	2600      	movs	r6, #0
 8026070:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8026074:	f1b8 0801 	subs.w	r8, r8, #1
 8026078:	d505      	bpl.n	8026086 <_fwalk+0x22>
 802607a:	6824      	ldr	r4, [r4, #0]
 802607c:	2c00      	cmp	r4, #0
 802607e:	d1f7      	bne.n	8026070 <_fwalk+0xc>
 8026080:	4630      	mov	r0, r6
 8026082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026086:	89ab      	ldrh	r3, [r5, #12]
 8026088:	2b01      	cmp	r3, #1
 802608a:	d906      	bls.n	802609a <_fwalk+0x36>
 802608c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026090:	3301      	adds	r3, #1
 8026092:	d002      	beq.n	802609a <_fwalk+0x36>
 8026094:	4628      	mov	r0, r5
 8026096:	47b8      	blx	r7
 8026098:	4306      	orrs	r6, r0
 802609a:	3568      	adds	r5, #104	; 0x68
 802609c:	e7ea      	b.n	8026074 <_fwalk+0x10>

0802609e <_fwalk_reent>:
 802609e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80260a2:	4606      	mov	r6, r0
 80260a4:	4688      	mov	r8, r1
 80260a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80260aa:	2700      	movs	r7, #0
 80260ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80260b0:	f1b9 0901 	subs.w	r9, r9, #1
 80260b4:	d505      	bpl.n	80260c2 <_fwalk_reent+0x24>
 80260b6:	6824      	ldr	r4, [r4, #0]
 80260b8:	2c00      	cmp	r4, #0
 80260ba:	d1f7      	bne.n	80260ac <_fwalk_reent+0xe>
 80260bc:	4638      	mov	r0, r7
 80260be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80260c2:	89ab      	ldrh	r3, [r5, #12]
 80260c4:	2b01      	cmp	r3, #1
 80260c6:	d907      	bls.n	80260d8 <_fwalk_reent+0x3a>
 80260c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80260cc:	3301      	adds	r3, #1
 80260ce:	d003      	beq.n	80260d8 <_fwalk_reent+0x3a>
 80260d0:	4629      	mov	r1, r5
 80260d2:	4630      	mov	r0, r6
 80260d4:	47c0      	blx	r8
 80260d6:	4307      	orrs	r7, r0
 80260d8:	3568      	adds	r5, #104	; 0x68
 80260da:	e7e9      	b.n	80260b0 <_fwalk_reent+0x12>

080260dc <rshift>:
 80260dc:	6903      	ldr	r3, [r0, #16]
 80260de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80260e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80260e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80260ea:	f100 0414 	add.w	r4, r0, #20
 80260ee:	dd45      	ble.n	802617c <rshift+0xa0>
 80260f0:	f011 011f 	ands.w	r1, r1, #31
 80260f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80260f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80260fc:	d10c      	bne.n	8026118 <rshift+0x3c>
 80260fe:	f100 0710 	add.w	r7, r0, #16
 8026102:	4629      	mov	r1, r5
 8026104:	42b1      	cmp	r1, r6
 8026106:	d334      	bcc.n	8026172 <rshift+0x96>
 8026108:	1a9b      	subs	r3, r3, r2
 802610a:	009b      	lsls	r3, r3, #2
 802610c:	1eea      	subs	r2, r5, #3
 802610e:	4296      	cmp	r6, r2
 8026110:	bf38      	it	cc
 8026112:	2300      	movcc	r3, #0
 8026114:	4423      	add	r3, r4
 8026116:	e015      	b.n	8026144 <rshift+0x68>
 8026118:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802611c:	f1c1 0820 	rsb	r8, r1, #32
 8026120:	40cf      	lsrs	r7, r1
 8026122:	f105 0e04 	add.w	lr, r5, #4
 8026126:	46a1      	mov	r9, r4
 8026128:	4576      	cmp	r6, lr
 802612a:	46f4      	mov	ip, lr
 802612c:	d815      	bhi.n	802615a <rshift+0x7e>
 802612e:	1a9b      	subs	r3, r3, r2
 8026130:	009a      	lsls	r2, r3, #2
 8026132:	3a04      	subs	r2, #4
 8026134:	3501      	adds	r5, #1
 8026136:	42ae      	cmp	r6, r5
 8026138:	bf38      	it	cc
 802613a:	2200      	movcc	r2, #0
 802613c:	18a3      	adds	r3, r4, r2
 802613e:	50a7      	str	r7, [r4, r2]
 8026140:	b107      	cbz	r7, 8026144 <rshift+0x68>
 8026142:	3304      	adds	r3, #4
 8026144:	1b1a      	subs	r2, r3, r4
 8026146:	42a3      	cmp	r3, r4
 8026148:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802614c:	bf08      	it	eq
 802614e:	2300      	moveq	r3, #0
 8026150:	6102      	str	r2, [r0, #16]
 8026152:	bf08      	it	eq
 8026154:	6143      	streq	r3, [r0, #20]
 8026156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802615a:	f8dc c000 	ldr.w	ip, [ip]
 802615e:	fa0c fc08 	lsl.w	ip, ip, r8
 8026162:	ea4c 0707 	orr.w	r7, ip, r7
 8026166:	f849 7b04 	str.w	r7, [r9], #4
 802616a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802616e:	40cf      	lsrs	r7, r1
 8026170:	e7da      	b.n	8026128 <rshift+0x4c>
 8026172:	f851 cb04 	ldr.w	ip, [r1], #4
 8026176:	f847 cf04 	str.w	ip, [r7, #4]!
 802617a:	e7c3      	b.n	8026104 <rshift+0x28>
 802617c:	4623      	mov	r3, r4
 802617e:	e7e1      	b.n	8026144 <rshift+0x68>

08026180 <__hexdig_fun>:
 8026180:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8026184:	2b09      	cmp	r3, #9
 8026186:	d802      	bhi.n	802618e <__hexdig_fun+0xe>
 8026188:	3820      	subs	r0, #32
 802618a:	b2c0      	uxtb	r0, r0
 802618c:	4770      	bx	lr
 802618e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8026192:	2b05      	cmp	r3, #5
 8026194:	d801      	bhi.n	802619a <__hexdig_fun+0x1a>
 8026196:	3847      	subs	r0, #71	; 0x47
 8026198:	e7f7      	b.n	802618a <__hexdig_fun+0xa>
 802619a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802619e:	2b05      	cmp	r3, #5
 80261a0:	d801      	bhi.n	80261a6 <__hexdig_fun+0x26>
 80261a2:	3827      	subs	r0, #39	; 0x27
 80261a4:	e7f1      	b.n	802618a <__hexdig_fun+0xa>
 80261a6:	2000      	movs	r0, #0
 80261a8:	4770      	bx	lr
	...

080261ac <__gethex>:
 80261ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261b0:	ed2d 8b02 	vpush	{d8}
 80261b4:	b089      	sub	sp, #36	; 0x24
 80261b6:	ee08 0a10 	vmov	s16, r0
 80261ba:	9304      	str	r3, [sp, #16]
 80261bc:	4bbc      	ldr	r3, [pc, #752]	; (80264b0 <__gethex+0x304>)
 80261be:	681b      	ldr	r3, [r3, #0]
 80261c0:	9301      	str	r3, [sp, #4]
 80261c2:	4618      	mov	r0, r3
 80261c4:	468b      	mov	fp, r1
 80261c6:	4690      	mov	r8, r2
 80261c8:	f7da f80c 	bl	80001e4 <strlen>
 80261cc:	9b01      	ldr	r3, [sp, #4]
 80261ce:	f8db 2000 	ldr.w	r2, [fp]
 80261d2:	4403      	add	r3, r0
 80261d4:	4682      	mov	sl, r0
 80261d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80261da:	9305      	str	r3, [sp, #20]
 80261dc:	1c93      	adds	r3, r2, #2
 80261de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80261e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80261e6:	32fe      	adds	r2, #254	; 0xfe
 80261e8:	18d1      	adds	r1, r2, r3
 80261ea:	461f      	mov	r7, r3
 80261ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80261f0:	9100      	str	r1, [sp, #0]
 80261f2:	2830      	cmp	r0, #48	; 0x30
 80261f4:	d0f8      	beq.n	80261e8 <__gethex+0x3c>
 80261f6:	f7ff ffc3 	bl	8026180 <__hexdig_fun>
 80261fa:	4604      	mov	r4, r0
 80261fc:	2800      	cmp	r0, #0
 80261fe:	d13a      	bne.n	8026276 <__gethex+0xca>
 8026200:	9901      	ldr	r1, [sp, #4]
 8026202:	4652      	mov	r2, sl
 8026204:	4638      	mov	r0, r7
 8026206:	f7fd fc2b 	bl	8023a60 <strncmp>
 802620a:	4605      	mov	r5, r0
 802620c:	2800      	cmp	r0, #0
 802620e:	d168      	bne.n	80262e2 <__gethex+0x136>
 8026210:	f817 000a 	ldrb.w	r0, [r7, sl]
 8026214:	eb07 060a 	add.w	r6, r7, sl
 8026218:	f7ff ffb2 	bl	8026180 <__hexdig_fun>
 802621c:	2800      	cmp	r0, #0
 802621e:	d062      	beq.n	80262e6 <__gethex+0x13a>
 8026220:	4633      	mov	r3, r6
 8026222:	7818      	ldrb	r0, [r3, #0]
 8026224:	2830      	cmp	r0, #48	; 0x30
 8026226:	461f      	mov	r7, r3
 8026228:	f103 0301 	add.w	r3, r3, #1
 802622c:	d0f9      	beq.n	8026222 <__gethex+0x76>
 802622e:	f7ff ffa7 	bl	8026180 <__hexdig_fun>
 8026232:	2301      	movs	r3, #1
 8026234:	fab0 f480 	clz	r4, r0
 8026238:	0964      	lsrs	r4, r4, #5
 802623a:	4635      	mov	r5, r6
 802623c:	9300      	str	r3, [sp, #0]
 802623e:	463a      	mov	r2, r7
 8026240:	4616      	mov	r6, r2
 8026242:	3201      	adds	r2, #1
 8026244:	7830      	ldrb	r0, [r6, #0]
 8026246:	f7ff ff9b 	bl	8026180 <__hexdig_fun>
 802624a:	2800      	cmp	r0, #0
 802624c:	d1f8      	bne.n	8026240 <__gethex+0x94>
 802624e:	9901      	ldr	r1, [sp, #4]
 8026250:	4652      	mov	r2, sl
 8026252:	4630      	mov	r0, r6
 8026254:	f7fd fc04 	bl	8023a60 <strncmp>
 8026258:	b980      	cbnz	r0, 802627c <__gethex+0xd0>
 802625a:	b94d      	cbnz	r5, 8026270 <__gethex+0xc4>
 802625c:	eb06 050a 	add.w	r5, r6, sl
 8026260:	462a      	mov	r2, r5
 8026262:	4616      	mov	r6, r2
 8026264:	3201      	adds	r2, #1
 8026266:	7830      	ldrb	r0, [r6, #0]
 8026268:	f7ff ff8a 	bl	8026180 <__hexdig_fun>
 802626c:	2800      	cmp	r0, #0
 802626e:	d1f8      	bne.n	8026262 <__gethex+0xb6>
 8026270:	1bad      	subs	r5, r5, r6
 8026272:	00ad      	lsls	r5, r5, #2
 8026274:	e004      	b.n	8026280 <__gethex+0xd4>
 8026276:	2400      	movs	r4, #0
 8026278:	4625      	mov	r5, r4
 802627a:	e7e0      	b.n	802623e <__gethex+0x92>
 802627c:	2d00      	cmp	r5, #0
 802627e:	d1f7      	bne.n	8026270 <__gethex+0xc4>
 8026280:	7833      	ldrb	r3, [r6, #0]
 8026282:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8026286:	2b50      	cmp	r3, #80	; 0x50
 8026288:	d13b      	bne.n	8026302 <__gethex+0x156>
 802628a:	7873      	ldrb	r3, [r6, #1]
 802628c:	2b2b      	cmp	r3, #43	; 0x2b
 802628e:	d02c      	beq.n	80262ea <__gethex+0x13e>
 8026290:	2b2d      	cmp	r3, #45	; 0x2d
 8026292:	d02e      	beq.n	80262f2 <__gethex+0x146>
 8026294:	1c71      	adds	r1, r6, #1
 8026296:	f04f 0900 	mov.w	r9, #0
 802629a:	7808      	ldrb	r0, [r1, #0]
 802629c:	f7ff ff70 	bl	8026180 <__hexdig_fun>
 80262a0:	1e43      	subs	r3, r0, #1
 80262a2:	b2db      	uxtb	r3, r3
 80262a4:	2b18      	cmp	r3, #24
 80262a6:	d82c      	bhi.n	8026302 <__gethex+0x156>
 80262a8:	f1a0 0210 	sub.w	r2, r0, #16
 80262ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80262b0:	f7ff ff66 	bl	8026180 <__hexdig_fun>
 80262b4:	1e43      	subs	r3, r0, #1
 80262b6:	b2db      	uxtb	r3, r3
 80262b8:	2b18      	cmp	r3, #24
 80262ba:	d91d      	bls.n	80262f8 <__gethex+0x14c>
 80262bc:	f1b9 0f00 	cmp.w	r9, #0
 80262c0:	d000      	beq.n	80262c4 <__gethex+0x118>
 80262c2:	4252      	negs	r2, r2
 80262c4:	4415      	add	r5, r2
 80262c6:	f8cb 1000 	str.w	r1, [fp]
 80262ca:	b1e4      	cbz	r4, 8026306 <__gethex+0x15a>
 80262cc:	9b00      	ldr	r3, [sp, #0]
 80262ce:	2b00      	cmp	r3, #0
 80262d0:	bf14      	ite	ne
 80262d2:	2700      	movne	r7, #0
 80262d4:	2706      	moveq	r7, #6
 80262d6:	4638      	mov	r0, r7
 80262d8:	b009      	add	sp, #36	; 0x24
 80262da:	ecbd 8b02 	vpop	{d8}
 80262de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262e2:	463e      	mov	r6, r7
 80262e4:	4625      	mov	r5, r4
 80262e6:	2401      	movs	r4, #1
 80262e8:	e7ca      	b.n	8026280 <__gethex+0xd4>
 80262ea:	f04f 0900 	mov.w	r9, #0
 80262ee:	1cb1      	adds	r1, r6, #2
 80262f0:	e7d3      	b.n	802629a <__gethex+0xee>
 80262f2:	f04f 0901 	mov.w	r9, #1
 80262f6:	e7fa      	b.n	80262ee <__gethex+0x142>
 80262f8:	230a      	movs	r3, #10
 80262fa:	fb03 0202 	mla	r2, r3, r2, r0
 80262fe:	3a10      	subs	r2, #16
 8026300:	e7d4      	b.n	80262ac <__gethex+0x100>
 8026302:	4631      	mov	r1, r6
 8026304:	e7df      	b.n	80262c6 <__gethex+0x11a>
 8026306:	1bf3      	subs	r3, r6, r7
 8026308:	3b01      	subs	r3, #1
 802630a:	4621      	mov	r1, r4
 802630c:	2b07      	cmp	r3, #7
 802630e:	dc0b      	bgt.n	8026328 <__gethex+0x17c>
 8026310:	ee18 0a10 	vmov	r0, s16
 8026314:	f000 fb72 	bl	80269fc <_Balloc>
 8026318:	4604      	mov	r4, r0
 802631a:	b940      	cbnz	r0, 802632e <__gethex+0x182>
 802631c:	4b65      	ldr	r3, [pc, #404]	; (80264b4 <__gethex+0x308>)
 802631e:	4602      	mov	r2, r0
 8026320:	21de      	movs	r1, #222	; 0xde
 8026322:	4865      	ldr	r0, [pc, #404]	; (80264b8 <__gethex+0x30c>)
 8026324:	f7fe fe38 	bl	8024f98 <__assert_func>
 8026328:	3101      	adds	r1, #1
 802632a:	105b      	asrs	r3, r3, #1
 802632c:	e7ee      	b.n	802630c <__gethex+0x160>
 802632e:	f100 0914 	add.w	r9, r0, #20
 8026332:	f04f 0b00 	mov.w	fp, #0
 8026336:	f1ca 0301 	rsb	r3, sl, #1
 802633a:	f8cd 9008 	str.w	r9, [sp, #8]
 802633e:	f8cd b000 	str.w	fp, [sp]
 8026342:	9306      	str	r3, [sp, #24]
 8026344:	42b7      	cmp	r7, r6
 8026346:	d340      	bcc.n	80263ca <__gethex+0x21e>
 8026348:	9802      	ldr	r0, [sp, #8]
 802634a:	9b00      	ldr	r3, [sp, #0]
 802634c:	f840 3b04 	str.w	r3, [r0], #4
 8026350:	eba0 0009 	sub.w	r0, r0, r9
 8026354:	1080      	asrs	r0, r0, #2
 8026356:	0146      	lsls	r6, r0, #5
 8026358:	6120      	str	r0, [r4, #16]
 802635a:	4618      	mov	r0, r3
 802635c:	f000 fc44 	bl	8026be8 <__hi0bits>
 8026360:	1a30      	subs	r0, r6, r0
 8026362:	f8d8 6000 	ldr.w	r6, [r8]
 8026366:	42b0      	cmp	r0, r6
 8026368:	dd63      	ble.n	8026432 <__gethex+0x286>
 802636a:	1b87      	subs	r7, r0, r6
 802636c:	4639      	mov	r1, r7
 802636e:	4620      	mov	r0, r4
 8026370:	f000 ffde 	bl	8027330 <__any_on>
 8026374:	4682      	mov	sl, r0
 8026376:	b1a8      	cbz	r0, 80263a4 <__gethex+0x1f8>
 8026378:	1e7b      	subs	r3, r7, #1
 802637a:	1159      	asrs	r1, r3, #5
 802637c:	f003 021f 	and.w	r2, r3, #31
 8026380:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8026384:	f04f 0a01 	mov.w	sl, #1
 8026388:	fa0a f202 	lsl.w	r2, sl, r2
 802638c:	420a      	tst	r2, r1
 802638e:	d009      	beq.n	80263a4 <__gethex+0x1f8>
 8026390:	4553      	cmp	r3, sl
 8026392:	dd05      	ble.n	80263a0 <__gethex+0x1f4>
 8026394:	1eb9      	subs	r1, r7, #2
 8026396:	4620      	mov	r0, r4
 8026398:	f000 ffca 	bl	8027330 <__any_on>
 802639c:	2800      	cmp	r0, #0
 802639e:	d145      	bne.n	802642c <__gethex+0x280>
 80263a0:	f04f 0a02 	mov.w	sl, #2
 80263a4:	4639      	mov	r1, r7
 80263a6:	4620      	mov	r0, r4
 80263a8:	f7ff fe98 	bl	80260dc <rshift>
 80263ac:	443d      	add	r5, r7
 80263ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80263b2:	42ab      	cmp	r3, r5
 80263b4:	da4c      	bge.n	8026450 <__gethex+0x2a4>
 80263b6:	ee18 0a10 	vmov	r0, s16
 80263ba:	4621      	mov	r1, r4
 80263bc:	f000 fb5e 	bl	8026a7c <_Bfree>
 80263c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80263c2:	2300      	movs	r3, #0
 80263c4:	6013      	str	r3, [r2, #0]
 80263c6:	27a3      	movs	r7, #163	; 0xa3
 80263c8:	e785      	b.n	80262d6 <__gethex+0x12a>
 80263ca:	1e73      	subs	r3, r6, #1
 80263cc:	9a05      	ldr	r2, [sp, #20]
 80263ce:	9303      	str	r3, [sp, #12]
 80263d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80263d4:	4293      	cmp	r3, r2
 80263d6:	d019      	beq.n	802640c <__gethex+0x260>
 80263d8:	f1bb 0f20 	cmp.w	fp, #32
 80263dc:	d107      	bne.n	80263ee <__gethex+0x242>
 80263de:	9b02      	ldr	r3, [sp, #8]
 80263e0:	9a00      	ldr	r2, [sp, #0]
 80263e2:	f843 2b04 	str.w	r2, [r3], #4
 80263e6:	9302      	str	r3, [sp, #8]
 80263e8:	2300      	movs	r3, #0
 80263ea:	9300      	str	r3, [sp, #0]
 80263ec:	469b      	mov	fp, r3
 80263ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80263f2:	f7ff fec5 	bl	8026180 <__hexdig_fun>
 80263f6:	9b00      	ldr	r3, [sp, #0]
 80263f8:	f000 000f 	and.w	r0, r0, #15
 80263fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8026400:	4303      	orrs	r3, r0
 8026402:	9300      	str	r3, [sp, #0]
 8026404:	f10b 0b04 	add.w	fp, fp, #4
 8026408:	9b03      	ldr	r3, [sp, #12]
 802640a:	e00d      	b.n	8026428 <__gethex+0x27c>
 802640c:	9b03      	ldr	r3, [sp, #12]
 802640e:	9a06      	ldr	r2, [sp, #24]
 8026410:	4413      	add	r3, r2
 8026412:	42bb      	cmp	r3, r7
 8026414:	d3e0      	bcc.n	80263d8 <__gethex+0x22c>
 8026416:	4618      	mov	r0, r3
 8026418:	9901      	ldr	r1, [sp, #4]
 802641a:	9307      	str	r3, [sp, #28]
 802641c:	4652      	mov	r2, sl
 802641e:	f7fd fb1f 	bl	8023a60 <strncmp>
 8026422:	9b07      	ldr	r3, [sp, #28]
 8026424:	2800      	cmp	r0, #0
 8026426:	d1d7      	bne.n	80263d8 <__gethex+0x22c>
 8026428:	461e      	mov	r6, r3
 802642a:	e78b      	b.n	8026344 <__gethex+0x198>
 802642c:	f04f 0a03 	mov.w	sl, #3
 8026430:	e7b8      	b.n	80263a4 <__gethex+0x1f8>
 8026432:	da0a      	bge.n	802644a <__gethex+0x29e>
 8026434:	1a37      	subs	r7, r6, r0
 8026436:	4621      	mov	r1, r4
 8026438:	ee18 0a10 	vmov	r0, s16
 802643c:	463a      	mov	r2, r7
 802643e:	f000 fd39 	bl	8026eb4 <__lshift>
 8026442:	1bed      	subs	r5, r5, r7
 8026444:	4604      	mov	r4, r0
 8026446:	f100 0914 	add.w	r9, r0, #20
 802644a:	f04f 0a00 	mov.w	sl, #0
 802644e:	e7ae      	b.n	80263ae <__gethex+0x202>
 8026450:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026454:	42a8      	cmp	r0, r5
 8026456:	dd72      	ble.n	802653e <__gethex+0x392>
 8026458:	1b45      	subs	r5, r0, r5
 802645a:	42ae      	cmp	r6, r5
 802645c:	dc36      	bgt.n	80264cc <__gethex+0x320>
 802645e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026462:	2b02      	cmp	r3, #2
 8026464:	d02a      	beq.n	80264bc <__gethex+0x310>
 8026466:	2b03      	cmp	r3, #3
 8026468:	d02c      	beq.n	80264c4 <__gethex+0x318>
 802646a:	2b01      	cmp	r3, #1
 802646c:	d115      	bne.n	802649a <__gethex+0x2ee>
 802646e:	42ae      	cmp	r6, r5
 8026470:	d113      	bne.n	802649a <__gethex+0x2ee>
 8026472:	2e01      	cmp	r6, #1
 8026474:	d10b      	bne.n	802648e <__gethex+0x2e2>
 8026476:	9a04      	ldr	r2, [sp, #16]
 8026478:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802647c:	6013      	str	r3, [r2, #0]
 802647e:	2301      	movs	r3, #1
 8026480:	6123      	str	r3, [r4, #16]
 8026482:	f8c9 3000 	str.w	r3, [r9]
 8026486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026488:	2762      	movs	r7, #98	; 0x62
 802648a:	601c      	str	r4, [r3, #0]
 802648c:	e723      	b.n	80262d6 <__gethex+0x12a>
 802648e:	1e71      	subs	r1, r6, #1
 8026490:	4620      	mov	r0, r4
 8026492:	f000 ff4d 	bl	8027330 <__any_on>
 8026496:	2800      	cmp	r0, #0
 8026498:	d1ed      	bne.n	8026476 <__gethex+0x2ca>
 802649a:	ee18 0a10 	vmov	r0, s16
 802649e:	4621      	mov	r1, r4
 80264a0:	f000 faec 	bl	8026a7c <_Bfree>
 80264a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80264a6:	2300      	movs	r3, #0
 80264a8:	6013      	str	r3, [r2, #0]
 80264aa:	2750      	movs	r7, #80	; 0x50
 80264ac:	e713      	b.n	80262d6 <__gethex+0x12a>
 80264ae:	bf00      	nop
 80264b0:	08033cf0 	.word	0x08033cf0
 80264b4:	08033c15 	.word	0x08033c15
 80264b8:	08033c88 	.word	0x08033c88
 80264bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80264be:	2b00      	cmp	r3, #0
 80264c0:	d1eb      	bne.n	802649a <__gethex+0x2ee>
 80264c2:	e7d8      	b.n	8026476 <__gethex+0x2ca>
 80264c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80264c6:	2b00      	cmp	r3, #0
 80264c8:	d1d5      	bne.n	8026476 <__gethex+0x2ca>
 80264ca:	e7e6      	b.n	802649a <__gethex+0x2ee>
 80264cc:	1e6f      	subs	r7, r5, #1
 80264ce:	f1ba 0f00 	cmp.w	sl, #0
 80264d2:	d131      	bne.n	8026538 <__gethex+0x38c>
 80264d4:	b127      	cbz	r7, 80264e0 <__gethex+0x334>
 80264d6:	4639      	mov	r1, r7
 80264d8:	4620      	mov	r0, r4
 80264da:	f000 ff29 	bl	8027330 <__any_on>
 80264de:	4682      	mov	sl, r0
 80264e0:	117b      	asrs	r3, r7, #5
 80264e2:	2101      	movs	r1, #1
 80264e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80264e8:	f007 071f 	and.w	r7, r7, #31
 80264ec:	fa01 f707 	lsl.w	r7, r1, r7
 80264f0:	421f      	tst	r7, r3
 80264f2:	4629      	mov	r1, r5
 80264f4:	4620      	mov	r0, r4
 80264f6:	bf18      	it	ne
 80264f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80264fc:	1b76      	subs	r6, r6, r5
 80264fe:	f7ff fded 	bl	80260dc <rshift>
 8026502:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026506:	2702      	movs	r7, #2
 8026508:	f1ba 0f00 	cmp.w	sl, #0
 802650c:	d048      	beq.n	80265a0 <__gethex+0x3f4>
 802650e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026512:	2b02      	cmp	r3, #2
 8026514:	d015      	beq.n	8026542 <__gethex+0x396>
 8026516:	2b03      	cmp	r3, #3
 8026518:	d017      	beq.n	802654a <__gethex+0x39e>
 802651a:	2b01      	cmp	r3, #1
 802651c:	d109      	bne.n	8026532 <__gethex+0x386>
 802651e:	f01a 0f02 	tst.w	sl, #2
 8026522:	d006      	beq.n	8026532 <__gethex+0x386>
 8026524:	f8d9 0000 	ldr.w	r0, [r9]
 8026528:	ea4a 0a00 	orr.w	sl, sl, r0
 802652c:	f01a 0f01 	tst.w	sl, #1
 8026530:	d10e      	bne.n	8026550 <__gethex+0x3a4>
 8026532:	f047 0710 	orr.w	r7, r7, #16
 8026536:	e033      	b.n	80265a0 <__gethex+0x3f4>
 8026538:	f04f 0a01 	mov.w	sl, #1
 802653c:	e7d0      	b.n	80264e0 <__gethex+0x334>
 802653e:	2701      	movs	r7, #1
 8026540:	e7e2      	b.n	8026508 <__gethex+0x35c>
 8026542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026544:	f1c3 0301 	rsb	r3, r3, #1
 8026548:	9315      	str	r3, [sp, #84]	; 0x54
 802654a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802654c:	2b00      	cmp	r3, #0
 802654e:	d0f0      	beq.n	8026532 <__gethex+0x386>
 8026550:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8026554:	f104 0314 	add.w	r3, r4, #20
 8026558:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802655c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8026560:	f04f 0c00 	mov.w	ip, #0
 8026564:	4618      	mov	r0, r3
 8026566:	f853 2b04 	ldr.w	r2, [r3], #4
 802656a:	f1b2 3fff 	cmp.w	r2, #4294967295
 802656e:	d01c      	beq.n	80265aa <__gethex+0x3fe>
 8026570:	3201      	adds	r2, #1
 8026572:	6002      	str	r2, [r0, #0]
 8026574:	2f02      	cmp	r7, #2
 8026576:	f104 0314 	add.w	r3, r4, #20
 802657a:	d13f      	bne.n	80265fc <__gethex+0x450>
 802657c:	f8d8 2000 	ldr.w	r2, [r8]
 8026580:	3a01      	subs	r2, #1
 8026582:	42b2      	cmp	r2, r6
 8026584:	d10a      	bne.n	802659c <__gethex+0x3f0>
 8026586:	1171      	asrs	r1, r6, #5
 8026588:	2201      	movs	r2, #1
 802658a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802658e:	f006 061f 	and.w	r6, r6, #31
 8026592:	fa02 f606 	lsl.w	r6, r2, r6
 8026596:	421e      	tst	r6, r3
 8026598:	bf18      	it	ne
 802659a:	4617      	movne	r7, r2
 802659c:	f047 0720 	orr.w	r7, r7, #32
 80265a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80265a2:	601c      	str	r4, [r3, #0]
 80265a4:	9b04      	ldr	r3, [sp, #16]
 80265a6:	601d      	str	r5, [r3, #0]
 80265a8:	e695      	b.n	80262d6 <__gethex+0x12a>
 80265aa:	4299      	cmp	r1, r3
 80265ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80265b0:	d8d8      	bhi.n	8026564 <__gethex+0x3b8>
 80265b2:	68a3      	ldr	r3, [r4, #8]
 80265b4:	459b      	cmp	fp, r3
 80265b6:	db19      	blt.n	80265ec <__gethex+0x440>
 80265b8:	6861      	ldr	r1, [r4, #4]
 80265ba:	ee18 0a10 	vmov	r0, s16
 80265be:	3101      	adds	r1, #1
 80265c0:	f000 fa1c 	bl	80269fc <_Balloc>
 80265c4:	4681      	mov	r9, r0
 80265c6:	b918      	cbnz	r0, 80265d0 <__gethex+0x424>
 80265c8:	4b1a      	ldr	r3, [pc, #104]	; (8026634 <__gethex+0x488>)
 80265ca:	4602      	mov	r2, r0
 80265cc:	2184      	movs	r1, #132	; 0x84
 80265ce:	e6a8      	b.n	8026322 <__gethex+0x176>
 80265d0:	6922      	ldr	r2, [r4, #16]
 80265d2:	3202      	adds	r2, #2
 80265d4:	f104 010c 	add.w	r1, r4, #12
 80265d8:	0092      	lsls	r2, r2, #2
 80265da:	300c      	adds	r0, #12
 80265dc:	f7fb ff50 	bl	8022480 <memcpy>
 80265e0:	4621      	mov	r1, r4
 80265e2:	ee18 0a10 	vmov	r0, s16
 80265e6:	f000 fa49 	bl	8026a7c <_Bfree>
 80265ea:	464c      	mov	r4, r9
 80265ec:	6923      	ldr	r3, [r4, #16]
 80265ee:	1c5a      	adds	r2, r3, #1
 80265f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80265f4:	6122      	str	r2, [r4, #16]
 80265f6:	2201      	movs	r2, #1
 80265f8:	615a      	str	r2, [r3, #20]
 80265fa:	e7bb      	b.n	8026574 <__gethex+0x3c8>
 80265fc:	6922      	ldr	r2, [r4, #16]
 80265fe:	455a      	cmp	r2, fp
 8026600:	dd0b      	ble.n	802661a <__gethex+0x46e>
 8026602:	2101      	movs	r1, #1
 8026604:	4620      	mov	r0, r4
 8026606:	f7ff fd69 	bl	80260dc <rshift>
 802660a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802660e:	3501      	adds	r5, #1
 8026610:	42ab      	cmp	r3, r5
 8026612:	f6ff aed0 	blt.w	80263b6 <__gethex+0x20a>
 8026616:	2701      	movs	r7, #1
 8026618:	e7c0      	b.n	802659c <__gethex+0x3f0>
 802661a:	f016 061f 	ands.w	r6, r6, #31
 802661e:	d0fa      	beq.n	8026616 <__gethex+0x46a>
 8026620:	449a      	add	sl, r3
 8026622:	f1c6 0620 	rsb	r6, r6, #32
 8026626:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 802662a:	f000 fadd 	bl	8026be8 <__hi0bits>
 802662e:	42b0      	cmp	r0, r6
 8026630:	dbe7      	blt.n	8026602 <__gethex+0x456>
 8026632:	e7f0      	b.n	8026616 <__gethex+0x46a>
 8026634:	08033c15 	.word	0x08033c15

08026638 <L_shift>:
 8026638:	f1c2 0208 	rsb	r2, r2, #8
 802663c:	0092      	lsls	r2, r2, #2
 802663e:	b570      	push	{r4, r5, r6, lr}
 8026640:	f1c2 0620 	rsb	r6, r2, #32
 8026644:	6843      	ldr	r3, [r0, #4]
 8026646:	6804      	ldr	r4, [r0, #0]
 8026648:	fa03 f506 	lsl.w	r5, r3, r6
 802664c:	432c      	orrs	r4, r5
 802664e:	40d3      	lsrs	r3, r2
 8026650:	6004      	str	r4, [r0, #0]
 8026652:	f840 3f04 	str.w	r3, [r0, #4]!
 8026656:	4288      	cmp	r0, r1
 8026658:	d3f4      	bcc.n	8026644 <L_shift+0xc>
 802665a:	bd70      	pop	{r4, r5, r6, pc}

0802665c <__match>:
 802665c:	b530      	push	{r4, r5, lr}
 802665e:	6803      	ldr	r3, [r0, #0]
 8026660:	3301      	adds	r3, #1
 8026662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026666:	b914      	cbnz	r4, 802666e <__match+0x12>
 8026668:	6003      	str	r3, [r0, #0]
 802666a:	2001      	movs	r0, #1
 802666c:	bd30      	pop	{r4, r5, pc}
 802666e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026672:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8026676:	2d19      	cmp	r5, #25
 8026678:	bf98      	it	ls
 802667a:	3220      	addls	r2, #32
 802667c:	42a2      	cmp	r2, r4
 802667e:	d0f0      	beq.n	8026662 <__match+0x6>
 8026680:	2000      	movs	r0, #0
 8026682:	e7f3      	b.n	802666c <__match+0x10>

08026684 <__hexnan>:
 8026684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026688:	680b      	ldr	r3, [r1, #0]
 802668a:	6801      	ldr	r1, [r0, #0]
 802668c:	115e      	asrs	r6, r3, #5
 802668e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8026692:	f013 031f 	ands.w	r3, r3, #31
 8026696:	b087      	sub	sp, #28
 8026698:	bf18      	it	ne
 802669a:	3604      	addne	r6, #4
 802669c:	2500      	movs	r5, #0
 802669e:	1f37      	subs	r7, r6, #4
 80266a0:	4682      	mov	sl, r0
 80266a2:	4690      	mov	r8, r2
 80266a4:	9301      	str	r3, [sp, #4]
 80266a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80266aa:	46b9      	mov	r9, r7
 80266ac:	463c      	mov	r4, r7
 80266ae:	9502      	str	r5, [sp, #8]
 80266b0:	46ab      	mov	fp, r5
 80266b2:	784a      	ldrb	r2, [r1, #1]
 80266b4:	1c4b      	adds	r3, r1, #1
 80266b6:	9303      	str	r3, [sp, #12]
 80266b8:	b342      	cbz	r2, 802670c <__hexnan+0x88>
 80266ba:	4610      	mov	r0, r2
 80266bc:	9105      	str	r1, [sp, #20]
 80266be:	9204      	str	r2, [sp, #16]
 80266c0:	f7ff fd5e 	bl	8026180 <__hexdig_fun>
 80266c4:	2800      	cmp	r0, #0
 80266c6:	d14f      	bne.n	8026768 <__hexnan+0xe4>
 80266c8:	9a04      	ldr	r2, [sp, #16]
 80266ca:	9905      	ldr	r1, [sp, #20]
 80266cc:	2a20      	cmp	r2, #32
 80266ce:	d818      	bhi.n	8026702 <__hexnan+0x7e>
 80266d0:	9b02      	ldr	r3, [sp, #8]
 80266d2:	459b      	cmp	fp, r3
 80266d4:	dd13      	ble.n	80266fe <__hexnan+0x7a>
 80266d6:	454c      	cmp	r4, r9
 80266d8:	d206      	bcs.n	80266e8 <__hexnan+0x64>
 80266da:	2d07      	cmp	r5, #7
 80266dc:	dc04      	bgt.n	80266e8 <__hexnan+0x64>
 80266de:	462a      	mov	r2, r5
 80266e0:	4649      	mov	r1, r9
 80266e2:	4620      	mov	r0, r4
 80266e4:	f7ff ffa8 	bl	8026638 <L_shift>
 80266e8:	4544      	cmp	r4, r8
 80266ea:	d950      	bls.n	802678e <__hexnan+0x10a>
 80266ec:	2300      	movs	r3, #0
 80266ee:	f1a4 0904 	sub.w	r9, r4, #4
 80266f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80266f6:	f8cd b008 	str.w	fp, [sp, #8]
 80266fa:	464c      	mov	r4, r9
 80266fc:	461d      	mov	r5, r3
 80266fe:	9903      	ldr	r1, [sp, #12]
 8026700:	e7d7      	b.n	80266b2 <__hexnan+0x2e>
 8026702:	2a29      	cmp	r2, #41	; 0x29
 8026704:	d156      	bne.n	80267b4 <__hexnan+0x130>
 8026706:	3102      	adds	r1, #2
 8026708:	f8ca 1000 	str.w	r1, [sl]
 802670c:	f1bb 0f00 	cmp.w	fp, #0
 8026710:	d050      	beq.n	80267b4 <__hexnan+0x130>
 8026712:	454c      	cmp	r4, r9
 8026714:	d206      	bcs.n	8026724 <__hexnan+0xa0>
 8026716:	2d07      	cmp	r5, #7
 8026718:	dc04      	bgt.n	8026724 <__hexnan+0xa0>
 802671a:	462a      	mov	r2, r5
 802671c:	4649      	mov	r1, r9
 802671e:	4620      	mov	r0, r4
 8026720:	f7ff ff8a 	bl	8026638 <L_shift>
 8026724:	4544      	cmp	r4, r8
 8026726:	d934      	bls.n	8026792 <__hexnan+0x10e>
 8026728:	f1a8 0204 	sub.w	r2, r8, #4
 802672c:	4623      	mov	r3, r4
 802672e:	f853 1b04 	ldr.w	r1, [r3], #4
 8026732:	f842 1f04 	str.w	r1, [r2, #4]!
 8026736:	429f      	cmp	r7, r3
 8026738:	d2f9      	bcs.n	802672e <__hexnan+0xaa>
 802673a:	1b3b      	subs	r3, r7, r4
 802673c:	f023 0303 	bic.w	r3, r3, #3
 8026740:	3304      	adds	r3, #4
 8026742:	3401      	adds	r4, #1
 8026744:	3e03      	subs	r6, #3
 8026746:	42b4      	cmp	r4, r6
 8026748:	bf88      	it	hi
 802674a:	2304      	movhi	r3, #4
 802674c:	4443      	add	r3, r8
 802674e:	2200      	movs	r2, #0
 8026750:	f843 2b04 	str.w	r2, [r3], #4
 8026754:	429f      	cmp	r7, r3
 8026756:	d2fb      	bcs.n	8026750 <__hexnan+0xcc>
 8026758:	683b      	ldr	r3, [r7, #0]
 802675a:	b91b      	cbnz	r3, 8026764 <__hexnan+0xe0>
 802675c:	4547      	cmp	r7, r8
 802675e:	d127      	bne.n	80267b0 <__hexnan+0x12c>
 8026760:	2301      	movs	r3, #1
 8026762:	603b      	str	r3, [r7, #0]
 8026764:	2005      	movs	r0, #5
 8026766:	e026      	b.n	80267b6 <__hexnan+0x132>
 8026768:	3501      	adds	r5, #1
 802676a:	2d08      	cmp	r5, #8
 802676c:	f10b 0b01 	add.w	fp, fp, #1
 8026770:	dd06      	ble.n	8026780 <__hexnan+0xfc>
 8026772:	4544      	cmp	r4, r8
 8026774:	d9c3      	bls.n	80266fe <__hexnan+0x7a>
 8026776:	2300      	movs	r3, #0
 8026778:	f844 3c04 	str.w	r3, [r4, #-4]
 802677c:	2501      	movs	r5, #1
 802677e:	3c04      	subs	r4, #4
 8026780:	6822      	ldr	r2, [r4, #0]
 8026782:	f000 000f 	and.w	r0, r0, #15
 8026786:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802678a:	6022      	str	r2, [r4, #0]
 802678c:	e7b7      	b.n	80266fe <__hexnan+0x7a>
 802678e:	2508      	movs	r5, #8
 8026790:	e7b5      	b.n	80266fe <__hexnan+0x7a>
 8026792:	9b01      	ldr	r3, [sp, #4]
 8026794:	2b00      	cmp	r3, #0
 8026796:	d0df      	beq.n	8026758 <__hexnan+0xd4>
 8026798:	f04f 32ff 	mov.w	r2, #4294967295
 802679c:	f1c3 0320 	rsb	r3, r3, #32
 80267a0:	fa22 f303 	lsr.w	r3, r2, r3
 80267a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80267a8:	401a      	ands	r2, r3
 80267aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80267ae:	e7d3      	b.n	8026758 <__hexnan+0xd4>
 80267b0:	3f04      	subs	r7, #4
 80267b2:	e7d1      	b.n	8026758 <__hexnan+0xd4>
 80267b4:	2004      	movs	r0, #4
 80267b6:	b007      	add	sp, #28
 80267b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080267bc <_getc_r>:
 80267bc:	b538      	push	{r3, r4, r5, lr}
 80267be:	460c      	mov	r4, r1
 80267c0:	4605      	mov	r5, r0
 80267c2:	b118      	cbz	r0, 80267cc <_getc_r+0x10>
 80267c4:	6983      	ldr	r3, [r0, #24]
 80267c6:	b90b      	cbnz	r3, 80267cc <_getc_r+0x10>
 80267c8:	f7ff fbce 	bl	8025f68 <__sinit>
 80267cc:	4b18      	ldr	r3, [pc, #96]	; (8026830 <_getc_r+0x74>)
 80267ce:	429c      	cmp	r4, r3
 80267d0:	d11e      	bne.n	8026810 <_getc_r+0x54>
 80267d2:	686c      	ldr	r4, [r5, #4]
 80267d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80267d6:	07d8      	lsls	r0, r3, #31
 80267d8:	d405      	bmi.n	80267e6 <_getc_r+0x2a>
 80267da:	89a3      	ldrh	r3, [r4, #12]
 80267dc:	0599      	lsls	r1, r3, #22
 80267de:	d402      	bmi.n	80267e6 <_getc_r+0x2a>
 80267e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80267e2:	f000 f873 	bl	80268cc <__retarget_lock_acquire_recursive>
 80267e6:	6863      	ldr	r3, [r4, #4]
 80267e8:	3b01      	subs	r3, #1
 80267ea:	2b00      	cmp	r3, #0
 80267ec:	6063      	str	r3, [r4, #4]
 80267ee:	da19      	bge.n	8026824 <_getc_r+0x68>
 80267f0:	4628      	mov	r0, r5
 80267f2:	4621      	mov	r1, r4
 80267f4:	f001 fab6 	bl	8027d64 <__srget_r>
 80267f8:	4605      	mov	r5, r0
 80267fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80267fc:	07da      	lsls	r2, r3, #31
 80267fe:	d405      	bmi.n	802680c <_getc_r+0x50>
 8026800:	89a3      	ldrh	r3, [r4, #12]
 8026802:	059b      	lsls	r3, r3, #22
 8026804:	d402      	bmi.n	802680c <_getc_r+0x50>
 8026806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026808:	f000 f862 	bl	80268d0 <__retarget_lock_release_recursive>
 802680c:	4628      	mov	r0, r5
 802680e:	bd38      	pop	{r3, r4, r5, pc}
 8026810:	4b08      	ldr	r3, [pc, #32]	; (8026834 <_getc_r+0x78>)
 8026812:	429c      	cmp	r4, r3
 8026814:	d101      	bne.n	802681a <_getc_r+0x5e>
 8026816:	68ac      	ldr	r4, [r5, #8]
 8026818:	e7dc      	b.n	80267d4 <_getc_r+0x18>
 802681a:	4b07      	ldr	r3, [pc, #28]	; (8026838 <_getc_r+0x7c>)
 802681c:	429c      	cmp	r4, r3
 802681e:	bf08      	it	eq
 8026820:	68ec      	ldreq	r4, [r5, #12]
 8026822:	e7d7      	b.n	80267d4 <_getc_r+0x18>
 8026824:	6823      	ldr	r3, [r4, #0]
 8026826:	1c5a      	adds	r2, r3, #1
 8026828:	6022      	str	r2, [r4, #0]
 802682a:	781d      	ldrb	r5, [r3, #0]
 802682c:	e7e5      	b.n	80267fa <_getc_r+0x3e>
 802682e:	bf00      	nop
 8026830:	08033c48 	.word	0x08033c48
 8026834:	08033c68 	.word	0x08033c68
 8026838:	08033c28 	.word	0x08033c28

0802683c <_findenv_r>:
 802683c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026840:	4607      	mov	r7, r0
 8026842:	4689      	mov	r9, r1
 8026844:	4616      	mov	r6, r2
 8026846:	f001 fbd3 	bl	8027ff0 <__env_lock>
 802684a:	4b18      	ldr	r3, [pc, #96]	; (80268ac <_findenv_r+0x70>)
 802684c:	681c      	ldr	r4, [r3, #0]
 802684e:	469a      	mov	sl, r3
 8026850:	b134      	cbz	r4, 8026860 <_findenv_r+0x24>
 8026852:	464b      	mov	r3, r9
 8026854:	4698      	mov	r8, r3
 8026856:	f813 1b01 	ldrb.w	r1, [r3], #1
 802685a:	b139      	cbz	r1, 802686c <_findenv_r+0x30>
 802685c:	293d      	cmp	r1, #61	; 0x3d
 802685e:	d1f9      	bne.n	8026854 <_findenv_r+0x18>
 8026860:	4638      	mov	r0, r7
 8026862:	f001 fbcb 	bl	8027ffc <__env_unlock>
 8026866:	2000      	movs	r0, #0
 8026868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802686c:	eba8 0809 	sub.w	r8, r8, r9
 8026870:	46a3      	mov	fp, r4
 8026872:	f854 0b04 	ldr.w	r0, [r4], #4
 8026876:	2800      	cmp	r0, #0
 8026878:	d0f2      	beq.n	8026860 <_findenv_r+0x24>
 802687a:	4642      	mov	r2, r8
 802687c:	4649      	mov	r1, r9
 802687e:	f7fd f8ef 	bl	8023a60 <strncmp>
 8026882:	2800      	cmp	r0, #0
 8026884:	d1f4      	bne.n	8026870 <_findenv_r+0x34>
 8026886:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802688a:	eb03 0508 	add.w	r5, r3, r8
 802688e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8026892:	2b3d      	cmp	r3, #61	; 0x3d
 8026894:	d1ec      	bne.n	8026870 <_findenv_r+0x34>
 8026896:	f8da 3000 	ldr.w	r3, [sl]
 802689a:	ebab 0303 	sub.w	r3, fp, r3
 802689e:	109b      	asrs	r3, r3, #2
 80268a0:	4638      	mov	r0, r7
 80268a2:	6033      	str	r3, [r6, #0]
 80268a4:	f001 fbaa 	bl	8027ffc <__env_unlock>
 80268a8:	1c68      	adds	r0, r5, #1
 80268aa:	e7dd      	b.n	8026868 <_findenv_r+0x2c>
 80268ac:	20000020 	.word	0x20000020

080268b0 <_getenv_r>:
 80268b0:	b507      	push	{r0, r1, r2, lr}
 80268b2:	aa01      	add	r2, sp, #4
 80268b4:	f7ff ffc2 	bl	802683c <_findenv_r>
 80268b8:	b003      	add	sp, #12
 80268ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080268c0 <__gettzinfo>:
 80268c0:	4800      	ldr	r0, [pc, #0]	; (80268c4 <__gettzinfo+0x4>)
 80268c2:	4770      	bx	lr
 80268c4:	20000650 	.word	0x20000650

080268c8 <__retarget_lock_init_recursive>:
 80268c8:	4770      	bx	lr

080268ca <__retarget_lock_acquire>:
 80268ca:	4770      	bx	lr

080268cc <__retarget_lock_acquire_recursive>:
 80268cc:	4770      	bx	lr

080268ce <__retarget_lock_release>:
 80268ce:	4770      	bx	lr

080268d0 <__retarget_lock_release_recursive>:
 80268d0:	4770      	bx	lr
	...

080268d4 <_lseek_r>:
 80268d4:	b538      	push	{r3, r4, r5, lr}
 80268d6:	4d07      	ldr	r5, [pc, #28]	; (80268f4 <_lseek_r+0x20>)
 80268d8:	4604      	mov	r4, r0
 80268da:	4608      	mov	r0, r1
 80268dc:	4611      	mov	r1, r2
 80268de:	2200      	movs	r2, #0
 80268e0:	602a      	str	r2, [r5, #0]
 80268e2:	461a      	mov	r2, r3
 80268e4:	f7dd fc50 	bl	8004188 <_lseek>
 80268e8:	1c43      	adds	r3, r0, #1
 80268ea:	d102      	bne.n	80268f2 <_lseek_r+0x1e>
 80268ec:	682b      	ldr	r3, [r5, #0]
 80268ee:	b103      	cbz	r3, 80268f2 <_lseek_r+0x1e>
 80268f0:	6023      	str	r3, [r4, #0]
 80268f2:	bd38      	pop	{r3, r4, r5, pc}
 80268f4:	20001a28 	.word	0x20001a28

080268f8 <__swhatbuf_r>:
 80268f8:	b570      	push	{r4, r5, r6, lr}
 80268fa:	460e      	mov	r6, r1
 80268fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026900:	2900      	cmp	r1, #0
 8026902:	b096      	sub	sp, #88	; 0x58
 8026904:	4614      	mov	r4, r2
 8026906:	461d      	mov	r5, r3
 8026908:	da07      	bge.n	802691a <__swhatbuf_r+0x22>
 802690a:	2300      	movs	r3, #0
 802690c:	602b      	str	r3, [r5, #0]
 802690e:	89b3      	ldrh	r3, [r6, #12]
 8026910:	061a      	lsls	r2, r3, #24
 8026912:	d410      	bmi.n	8026936 <__swhatbuf_r+0x3e>
 8026914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026918:	e00e      	b.n	8026938 <__swhatbuf_r+0x40>
 802691a:	466a      	mov	r2, sp
 802691c:	f001 fb74 	bl	8028008 <_fstat_r>
 8026920:	2800      	cmp	r0, #0
 8026922:	dbf2      	blt.n	802690a <__swhatbuf_r+0x12>
 8026924:	9a01      	ldr	r2, [sp, #4]
 8026926:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802692a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802692e:	425a      	negs	r2, r3
 8026930:	415a      	adcs	r2, r3
 8026932:	602a      	str	r2, [r5, #0]
 8026934:	e7ee      	b.n	8026914 <__swhatbuf_r+0x1c>
 8026936:	2340      	movs	r3, #64	; 0x40
 8026938:	2000      	movs	r0, #0
 802693a:	6023      	str	r3, [r4, #0]
 802693c:	b016      	add	sp, #88	; 0x58
 802693e:	bd70      	pop	{r4, r5, r6, pc}

08026940 <__smakebuf_r>:
 8026940:	898b      	ldrh	r3, [r1, #12]
 8026942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026944:	079d      	lsls	r5, r3, #30
 8026946:	4606      	mov	r6, r0
 8026948:	460c      	mov	r4, r1
 802694a:	d507      	bpl.n	802695c <__smakebuf_r+0x1c>
 802694c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026950:	6023      	str	r3, [r4, #0]
 8026952:	6123      	str	r3, [r4, #16]
 8026954:	2301      	movs	r3, #1
 8026956:	6163      	str	r3, [r4, #20]
 8026958:	b002      	add	sp, #8
 802695a:	bd70      	pop	{r4, r5, r6, pc}
 802695c:	ab01      	add	r3, sp, #4
 802695e:	466a      	mov	r2, sp
 8026960:	f7ff ffca 	bl	80268f8 <__swhatbuf_r>
 8026964:	9900      	ldr	r1, [sp, #0]
 8026966:	4605      	mov	r5, r0
 8026968:	4630      	mov	r0, r6
 802696a:	f7fc f897 	bl	8022a9c <_malloc_r>
 802696e:	b948      	cbnz	r0, 8026984 <__smakebuf_r+0x44>
 8026970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026974:	059a      	lsls	r2, r3, #22
 8026976:	d4ef      	bmi.n	8026958 <__smakebuf_r+0x18>
 8026978:	f023 0303 	bic.w	r3, r3, #3
 802697c:	f043 0302 	orr.w	r3, r3, #2
 8026980:	81a3      	strh	r3, [r4, #12]
 8026982:	e7e3      	b.n	802694c <__smakebuf_r+0xc>
 8026984:	4b0d      	ldr	r3, [pc, #52]	; (80269bc <__smakebuf_r+0x7c>)
 8026986:	62b3      	str	r3, [r6, #40]	; 0x28
 8026988:	89a3      	ldrh	r3, [r4, #12]
 802698a:	6020      	str	r0, [r4, #0]
 802698c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026990:	81a3      	strh	r3, [r4, #12]
 8026992:	9b00      	ldr	r3, [sp, #0]
 8026994:	6163      	str	r3, [r4, #20]
 8026996:	9b01      	ldr	r3, [sp, #4]
 8026998:	6120      	str	r0, [r4, #16]
 802699a:	b15b      	cbz	r3, 80269b4 <__smakebuf_r+0x74>
 802699c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80269a0:	4630      	mov	r0, r6
 80269a2:	f001 fb43 	bl	802802c <_isatty_r>
 80269a6:	b128      	cbz	r0, 80269b4 <__smakebuf_r+0x74>
 80269a8:	89a3      	ldrh	r3, [r4, #12]
 80269aa:	f023 0303 	bic.w	r3, r3, #3
 80269ae:	f043 0301 	orr.w	r3, r3, #1
 80269b2:	81a3      	strh	r3, [r4, #12]
 80269b4:	89a0      	ldrh	r0, [r4, #12]
 80269b6:	4305      	orrs	r5, r0
 80269b8:	81a5      	strh	r5, [r4, #12]
 80269ba:	e7cd      	b.n	8026958 <__smakebuf_r+0x18>
 80269bc:	08025f01 	.word	0x08025f01

080269c0 <__ascii_mbtowc>:
 80269c0:	b082      	sub	sp, #8
 80269c2:	b901      	cbnz	r1, 80269c6 <__ascii_mbtowc+0x6>
 80269c4:	a901      	add	r1, sp, #4
 80269c6:	b142      	cbz	r2, 80269da <__ascii_mbtowc+0x1a>
 80269c8:	b14b      	cbz	r3, 80269de <__ascii_mbtowc+0x1e>
 80269ca:	7813      	ldrb	r3, [r2, #0]
 80269cc:	600b      	str	r3, [r1, #0]
 80269ce:	7812      	ldrb	r2, [r2, #0]
 80269d0:	1e10      	subs	r0, r2, #0
 80269d2:	bf18      	it	ne
 80269d4:	2001      	movne	r0, #1
 80269d6:	b002      	add	sp, #8
 80269d8:	4770      	bx	lr
 80269da:	4610      	mov	r0, r2
 80269dc:	e7fb      	b.n	80269d6 <__ascii_mbtowc+0x16>
 80269de:	f06f 0001 	mvn.w	r0, #1
 80269e2:	e7f8      	b.n	80269d6 <__ascii_mbtowc+0x16>

080269e4 <__malloc_lock>:
 80269e4:	4801      	ldr	r0, [pc, #4]	; (80269ec <__malloc_lock+0x8>)
 80269e6:	f7ff bf71 	b.w	80268cc <__retarget_lock_acquire_recursive>
 80269ea:	bf00      	nop
 80269ec:	20001a20 	.word	0x20001a20

080269f0 <__malloc_unlock>:
 80269f0:	4801      	ldr	r0, [pc, #4]	; (80269f8 <__malloc_unlock+0x8>)
 80269f2:	f7ff bf6d 	b.w	80268d0 <__retarget_lock_release_recursive>
 80269f6:	bf00      	nop
 80269f8:	20001a20 	.word	0x20001a20

080269fc <_Balloc>:
 80269fc:	b570      	push	{r4, r5, r6, lr}
 80269fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026a00:	4604      	mov	r4, r0
 8026a02:	460d      	mov	r5, r1
 8026a04:	b976      	cbnz	r6, 8026a24 <_Balloc+0x28>
 8026a06:	2010      	movs	r0, #16
 8026a08:	f7fb fd1c 	bl	8022444 <malloc>
 8026a0c:	4602      	mov	r2, r0
 8026a0e:	6260      	str	r0, [r4, #36]	; 0x24
 8026a10:	b920      	cbnz	r0, 8026a1c <_Balloc+0x20>
 8026a12:	4b18      	ldr	r3, [pc, #96]	; (8026a74 <_Balloc+0x78>)
 8026a14:	4818      	ldr	r0, [pc, #96]	; (8026a78 <_Balloc+0x7c>)
 8026a16:	2166      	movs	r1, #102	; 0x66
 8026a18:	f7fe fabe 	bl	8024f98 <__assert_func>
 8026a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026a20:	6006      	str	r6, [r0, #0]
 8026a22:	60c6      	str	r6, [r0, #12]
 8026a24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026a26:	68f3      	ldr	r3, [r6, #12]
 8026a28:	b183      	cbz	r3, 8026a4c <_Balloc+0x50>
 8026a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026a2c:	68db      	ldr	r3, [r3, #12]
 8026a2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026a32:	b9b8      	cbnz	r0, 8026a64 <_Balloc+0x68>
 8026a34:	2101      	movs	r1, #1
 8026a36:	fa01 f605 	lsl.w	r6, r1, r5
 8026a3a:	1d72      	adds	r2, r6, #5
 8026a3c:	0092      	lsls	r2, r2, #2
 8026a3e:	4620      	mov	r0, r4
 8026a40:	f7fb ffcc 	bl	80229dc <_calloc_r>
 8026a44:	b160      	cbz	r0, 8026a60 <_Balloc+0x64>
 8026a46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026a4a:	e00e      	b.n	8026a6a <_Balloc+0x6e>
 8026a4c:	2221      	movs	r2, #33	; 0x21
 8026a4e:	2104      	movs	r1, #4
 8026a50:	4620      	mov	r0, r4
 8026a52:	f7fb ffc3 	bl	80229dc <_calloc_r>
 8026a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026a58:	60f0      	str	r0, [r6, #12]
 8026a5a:	68db      	ldr	r3, [r3, #12]
 8026a5c:	2b00      	cmp	r3, #0
 8026a5e:	d1e4      	bne.n	8026a2a <_Balloc+0x2e>
 8026a60:	2000      	movs	r0, #0
 8026a62:	bd70      	pop	{r4, r5, r6, pc}
 8026a64:	6802      	ldr	r2, [r0, #0]
 8026a66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026a6a:	2300      	movs	r3, #0
 8026a6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026a70:	e7f7      	b.n	8026a62 <_Balloc+0x66>
 8026a72:	bf00      	nop
 8026a74:	080338ff 	.word	0x080338ff
 8026a78:	08033d64 	.word	0x08033d64

08026a7c <_Bfree>:
 8026a7c:	b570      	push	{r4, r5, r6, lr}
 8026a7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026a80:	4605      	mov	r5, r0
 8026a82:	460c      	mov	r4, r1
 8026a84:	b976      	cbnz	r6, 8026aa4 <_Bfree+0x28>
 8026a86:	2010      	movs	r0, #16
 8026a88:	f7fb fcdc 	bl	8022444 <malloc>
 8026a8c:	4602      	mov	r2, r0
 8026a8e:	6268      	str	r0, [r5, #36]	; 0x24
 8026a90:	b920      	cbnz	r0, 8026a9c <_Bfree+0x20>
 8026a92:	4b09      	ldr	r3, [pc, #36]	; (8026ab8 <_Bfree+0x3c>)
 8026a94:	4809      	ldr	r0, [pc, #36]	; (8026abc <_Bfree+0x40>)
 8026a96:	218a      	movs	r1, #138	; 0x8a
 8026a98:	f7fe fa7e 	bl	8024f98 <__assert_func>
 8026a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026aa0:	6006      	str	r6, [r0, #0]
 8026aa2:	60c6      	str	r6, [r0, #12]
 8026aa4:	b13c      	cbz	r4, 8026ab6 <_Bfree+0x3a>
 8026aa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8026aa8:	6862      	ldr	r2, [r4, #4]
 8026aaa:	68db      	ldr	r3, [r3, #12]
 8026aac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026ab0:	6021      	str	r1, [r4, #0]
 8026ab2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026ab6:	bd70      	pop	{r4, r5, r6, pc}
 8026ab8:	080338ff 	.word	0x080338ff
 8026abc:	08033d64 	.word	0x08033d64

08026ac0 <__multadd>:
 8026ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026ac4:	690e      	ldr	r6, [r1, #16]
 8026ac6:	4607      	mov	r7, r0
 8026ac8:	4698      	mov	r8, r3
 8026aca:	460c      	mov	r4, r1
 8026acc:	f101 0014 	add.w	r0, r1, #20
 8026ad0:	2300      	movs	r3, #0
 8026ad2:	6805      	ldr	r5, [r0, #0]
 8026ad4:	b2a9      	uxth	r1, r5
 8026ad6:	fb02 8101 	mla	r1, r2, r1, r8
 8026ada:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8026ade:	0c2d      	lsrs	r5, r5, #16
 8026ae0:	fb02 c505 	mla	r5, r2, r5, ip
 8026ae4:	b289      	uxth	r1, r1
 8026ae6:	3301      	adds	r3, #1
 8026ae8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8026aec:	429e      	cmp	r6, r3
 8026aee:	f840 1b04 	str.w	r1, [r0], #4
 8026af2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8026af6:	dcec      	bgt.n	8026ad2 <__multadd+0x12>
 8026af8:	f1b8 0f00 	cmp.w	r8, #0
 8026afc:	d022      	beq.n	8026b44 <__multadd+0x84>
 8026afe:	68a3      	ldr	r3, [r4, #8]
 8026b00:	42b3      	cmp	r3, r6
 8026b02:	dc19      	bgt.n	8026b38 <__multadd+0x78>
 8026b04:	6861      	ldr	r1, [r4, #4]
 8026b06:	4638      	mov	r0, r7
 8026b08:	3101      	adds	r1, #1
 8026b0a:	f7ff ff77 	bl	80269fc <_Balloc>
 8026b0e:	4605      	mov	r5, r0
 8026b10:	b928      	cbnz	r0, 8026b1e <__multadd+0x5e>
 8026b12:	4602      	mov	r2, r0
 8026b14:	4b0d      	ldr	r3, [pc, #52]	; (8026b4c <__multadd+0x8c>)
 8026b16:	480e      	ldr	r0, [pc, #56]	; (8026b50 <__multadd+0x90>)
 8026b18:	21b5      	movs	r1, #181	; 0xb5
 8026b1a:	f7fe fa3d 	bl	8024f98 <__assert_func>
 8026b1e:	6922      	ldr	r2, [r4, #16]
 8026b20:	3202      	adds	r2, #2
 8026b22:	f104 010c 	add.w	r1, r4, #12
 8026b26:	0092      	lsls	r2, r2, #2
 8026b28:	300c      	adds	r0, #12
 8026b2a:	f7fb fca9 	bl	8022480 <memcpy>
 8026b2e:	4621      	mov	r1, r4
 8026b30:	4638      	mov	r0, r7
 8026b32:	f7ff ffa3 	bl	8026a7c <_Bfree>
 8026b36:	462c      	mov	r4, r5
 8026b38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8026b3c:	3601      	adds	r6, #1
 8026b3e:	f8c3 8014 	str.w	r8, [r3, #20]
 8026b42:	6126      	str	r6, [r4, #16]
 8026b44:	4620      	mov	r0, r4
 8026b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b4a:	bf00      	nop
 8026b4c:	08033c15 	.word	0x08033c15
 8026b50:	08033d64 	.word	0x08033d64

08026b54 <__s2b>:
 8026b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026b58:	460c      	mov	r4, r1
 8026b5a:	4615      	mov	r5, r2
 8026b5c:	461f      	mov	r7, r3
 8026b5e:	2209      	movs	r2, #9
 8026b60:	3308      	adds	r3, #8
 8026b62:	4606      	mov	r6, r0
 8026b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8026b68:	2100      	movs	r1, #0
 8026b6a:	2201      	movs	r2, #1
 8026b6c:	429a      	cmp	r2, r3
 8026b6e:	db09      	blt.n	8026b84 <__s2b+0x30>
 8026b70:	4630      	mov	r0, r6
 8026b72:	f7ff ff43 	bl	80269fc <_Balloc>
 8026b76:	b940      	cbnz	r0, 8026b8a <__s2b+0x36>
 8026b78:	4602      	mov	r2, r0
 8026b7a:	4b19      	ldr	r3, [pc, #100]	; (8026be0 <__s2b+0x8c>)
 8026b7c:	4819      	ldr	r0, [pc, #100]	; (8026be4 <__s2b+0x90>)
 8026b7e:	21ce      	movs	r1, #206	; 0xce
 8026b80:	f7fe fa0a 	bl	8024f98 <__assert_func>
 8026b84:	0052      	lsls	r2, r2, #1
 8026b86:	3101      	adds	r1, #1
 8026b88:	e7f0      	b.n	8026b6c <__s2b+0x18>
 8026b8a:	9b08      	ldr	r3, [sp, #32]
 8026b8c:	6143      	str	r3, [r0, #20]
 8026b8e:	2d09      	cmp	r5, #9
 8026b90:	f04f 0301 	mov.w	r3, #1
 8026b94:	6103      	str	r3, [r0, #16]
 8026b96:	dd16      	ble.n	8026bc6 <__s2b+0x72>
 8026b98:	f104 0909 	add.w	r9, r4, #9
 8026b9c:	46c8      	mov	r8, r9
 8026b9e:	442c      	add	r4, r5
 8026ba0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8026ba4:	4601      	mov	r1, r0
 8026ba6:	3b30      	subs	r3, #48	; 0x30
 8026ba8:	220a      	movs	r2, #10
 8026baa:	4630      	mov	r0, r6
 8026bac:	f7ff ff88 	bl	8026ac0 <__multadd>
 8026bb0:	45a0      	cmp	r8, r4
 8026bb2:	d1f5      	bne.n	8026ba0 <__s2b+0x4c>
 8026bb4:	f1a5 0408 	sub.w	r4, r5, #8
 8026bb8:	444c      	add	r4, r9
 8026bba:	1b2d      	subs	r5, r5, r4
 8026bbc:	1963      	adds	r3, r4, r5
 8026bbe:	42bb      	cmp	r3, r7
 8026bc0:	db04      	blt.n	8026bcc <__s2b+0x78>
 8026bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026bc6:	340a      	adds	r4, #10
 8026bc8:	2509      	movs	r5, #9
 8026bca:	e7f6      	b.n	8026bba <__s2b+0x66>
 8026bcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026bd0:	4601      	mov	r1, r0
 8026bd2:	3b30      	subs	r3, #48	; 0x30
 8026bd4:	220a      	movs	r2, #10
 8026bd6:	4630      	mov	r0, r6
 8026bd8:	f7ff ff72 	bl	8026ac0 <__multadd>
 8026bdc:	e7ee      	b.n	8026bbc <__s2b+0x68>
 8026bde:	bf00      	nop
 8026be0:	08033c15 	.word	0x08033c15
 8026be4:	08033d64 	.word	0x08033d64

08026be8 <__hi0bits>:
 8026be8:	0c03      	lsrs	r3, r0, #16
 8026bea:	041b      	lsls	r3, r3, #16
 8026bec:	b9d3      	cbnz	r3, 8026c24 <__hi0bits+0x3c>
 8026bee:	0400      	lsls	r0, r0, #16
 8026bf0:	2310      	movs	r3, #16
 8026bf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8026bf6:	bf04      	itt	eq
 8026bf8:	0200      	lsleq	r0, r0, #8
 8026bfa:	3308      	addeq	r3, #8
 8026bfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8026c00:	bf04      	itt	eq
 8026c02:	0100      	lsleq	r0, r0, #4
 8026c04:	3304      	addeq	r3, #4
 8026c06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8026c0a:	bf04      	itt	eq
 8026c0c:	0080      	lsleq	r0, r0, #2
 8026c0e:	3302      	addeq	r3, #2
 8026c10:	2800      	cmp	r0, #0
 8026c12:	db05      	blt.n	8026c20 <__hi0bits+0x38>
 8026c14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8026c18:	f103 0301 	add.w	r3, r3, #1
 8026c1c:	bf08      	it	eq
 8026c1e:	2320      	moveq	r3, #32
 8026c20:	4618      	mov	r0, r3
 8026c22:	4770      	bx	lr
 8026c24:	2300      	movs	r3, #0
 8026c26:	e7e4      	b.n	8026bf2 <__hi0bits+0xa>

08026c28 <__lo0bits>:
 8026c28:	6803      	ldr	r3, [r0, #0]
 8026c2a:	f013 0207 	ands.w	r2, r3, #7
 8026c2e:	4601      	mov	r1, r0
 8026c30:	d00b      	beq.n	8026c4a <__lo0bits+0x22>
 8026c32:	07da      	lsls	r2, r3, #31
 8026c34:	d424      	bmi.n	8026c80 <__lo0bits+0x58>
 8026c36:	0798      	lsls	r0, r3, #30
 8026c38:	bf49      	itett	mi
 8026c3a:	085b      	lsrmi	r3, r3, #1
 8026c3c:	089b      	lsrpl	r3, r3, #2
 8026c3e:	2001      	movmi	r0, #1
 8026c40:	600b      	strmi	r3, [r1, #0]
 8026c42:	bf5c      	itt	pl
 8026c44:	600b      	strpl	r3, [r1, #0]
 8026c46:	2002      	movpl	r0, #2
 8026c48:	4770      	bx	lr
 8026c4a:	b298      	uxth	r0, r3
 8026c4c:	b9b0      	cbnz	r0, 8026c7c <__lo0bits+0x54>
 8026c4e:	0c1b      	lsrs	r3, r3, #16
 8026c50:	2010      	movs	r0, #16
 8026c52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8026c56:	bf04      	itt	eq
 8026c58:	0a1b      	lsreq	r3, r3, #8
 8026c5a:	3008      	addeq	r0, #8
 8026c5c:	071a      	lsls	r2, r3, #28
 8026c5e:	bf04      	itt	eq
 8026c60:	091b      	lsreq	r3, r3, #4
 8026c62:	3004      	addeq	r0, #4
 8026c64:	079a      	lsls	r2, r3, #30
 8026c66:	bf04      	itt	eq
 8026c68:	089b      	lsreq	r3, r3, #2
 8026c6a:	3002      	addeq	r0, #2
 8026c6c:	07da      	lsls	r2, r3, #31
 8026c6e:	d403      	bmi.n	8026c78 <__lo0bits+0x50>
 8026c70:	085b      	lsrs	r3, r3, #1
 8026c72:	f100 0001 	add.w	r0, r0, #1
 8026c76:	d005      	beq.n	8026c84 <__lo0bits+0x5c>
 8026c78:	600b      	str	r3, [r1, #0]
 8026c7a:	4770      	bx	lr
 8026c7c:	4610      	mov	r0, r2
 8026c7e:	e7e8      	b.n	8026c52 <__lo0bits+0x2a>
 8026c80:	2000      	movs	r0, #0
 8026c82:	4770      	bx	lr
 8026c84:	2020      	movs	r0, #32
 8026c86:	4770      	bx	lr

08026c88 <__i2b>:
 8026c88:	b510      	push	{r4, lr}
 8026c8a:	460c      	mov	r4, r1
 8026c8c:	2101      	movs	r1, #1
 8026c8e:	f7ff feb5 	bl	80269fc <_Balloc>
 8026c92:	4602      	mov	r2, r0
 8026c94:	b928      	cbnz	r0, 8026ca2 <__i2b+0x1a>
 8026c96:	4b05      	ldr	r3, [pc, #20]	; (8026cac <__i2b+0x24>)
 8026c98:	4805      	ldr	r0, [pc, #20]	; (8026cb0 <__i2b+0x28>)
 8026c9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8026c9e:	f7fe f97b 	bl	8024f98 <__assert_func>
 8026ca2:	2301      	movs	r3, #1
 8026ca4:	6144      	str	r4, [r0, #20]
 8026ca6:	6103      	str	r3, [r0, #16]
 8026ca8:	bd10      	pop	{r4, pc}
 8026caa:	bf00      	nop
 8026cac:	08033c15 	.word	0x08033c15
 8026cb0:	08033d64 	.word	0x08033d64

08026cb4 <__multiply>:
 8026cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cb8:	4614      	mov	r4, r2
 8026cba:	690a      	ldr	r2, [r1, #16]
 8026cbc:	6923      	ldr	r3, [r4, #16]
 8026cbe:	429a      	cmp	r2, r3
 8026cc0:	bfb8      	it	lt
 8026cc2:	460b      	movlt	r3, r1
 8026cc4:	460d      	mov	r5, r1
 8026cc6:	bfbc      	itt	lt
 8026cc8:	4625      	movlt	r5, r4
 8026cca:	461c      	movlt	r4, r3
 8026ccc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8026cd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8026cd4:	68ab      	ldr	r3, [r5, #8]
 8026cd6:	6869      	ldr	r1, [r5, #4]
 8026cd8:	eb0a 0709 	add.w	r7, sl, r9
 8026cdc:	42bb      	cmp	r3, r7
 8026cde:	b085      	sub	sp, #20
 8026ce0:	bfb8      	it	lt
 8026ce2:	3101      	addlt	r1, #1
 8026ce4:	f7ff fe8a 	bl	80269fc <_Balloc>
 8026ce8:	b930      	cbnz	r0, 8026cf8 <__multiply+0x44>
 8026cea:	4602      	mov	r2, r0
 8026cec:	4b42      	ldr	r3, [pc, #264]	; (8026df8 <__multiply+0x144>)
 8026cee:	4843      	ldr	r0, [pc, #268]	; (8026dfc <__multiply+0x148>)
 8026cf0:	f240 115d 	movw	r1, #349	; 0x15d
 8026cf4:	f7fe f950 	bl	8024f98 <__assert_func>
 8026cf8:	f100 0614 	add.w	r6, r0, #20
 8026cfc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8026d00:	4633      	mov	r3, r6
 8026d02:	2200      	movs	r2, #0
 8026d04:	4543      	cmp	r3, r8
 8026d06:	d31e      	bcc.n	8026d46 <__multiply+0x92>
 8026d08:	f105 0c14 	add.w	ip, r5, #20
 8026d0c:	f104 0314 	add.w	r3, r4, #20
 8026d10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8026d14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8026d18:	9202      	str	r2, [sp, #8]
 8026d1a:	ebac 0205 	sub.w	r2, ip, r5
 8026d1e:	3a15      	subs	r2, #21
 8026d20:	f022 0203 	bic.w	r2, r2, #3
 8026d24:	3204      	adds	r2, #4
 8026d26:	f105 0115 	add.w	r1, r5, #21
 8026d2a:	458c      	cmp	ip, r1
 8026d2c:	bf38      	it	cc
 8026d2e:	2204      	movcc	r2, #4
 8026d30:	9201      	str	r2, [sp, #4]
 8026d32:	9a02      	ldr	r2, [sp, #8]
 8026d34:	9303      	str	r3, [sp, #12]
 8026d36:	429a      	cmp	r2, r3
 8026d38:	d808      	bhi.n	8026d4c <__multiply+0x98>
 8026d3a:	2f00      	cmp	r7, #0
 8026d3c:	dc55      	bgt.n	8026dea <__multiply+0x136>
 8026d3e:	6107      	str	r7, [r0, #16]
 8026d40:	b005      	add	sp, #20
 8026d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d46:	f843 2b04 	str.w	r2, [r3], #4
 8026d4a:	e7db      	b.n	8026d04 <__multiply+0x50>
 8026d4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8026d50:	f1ba 0f00 	cmp.w	sl, #0
 8026d54:	d020      	beq.n	8026d98 <__multiply+0xe4>
 8026d56:	f105 0e14 	add.w	lr, r5, #20
 8026d5a:	46b1      	mov	r9, r6
 8026d5c:	2200      	movs	r2, #0
 8026d5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8026d62:	f8d9 b000 	ldr.w	fp, [r9]
 8026d66:	b2a1      	uxth	r1, r4
 8026d68:	fa1f fb8b 	uxth.w	fp, fp
 8026d6c:	fb0a b101 	mla	r1, sl, r1, fp
 8026d70:	4411      	add	r1, r2
 8026d72:	f8d9 2000 	ldr.w	r2, [r9]
 8026d76:	0c24      	lsrs	r4, r4, #16
 8026d78:	0c12      	lsrs	r2, r2, #16
 8026d7a:	fb0a 2404 	mla	r4, sl, r4, r2
 8026d7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8026d82:	b289      	uxth	r1, r1
 8026d84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8026d88:	45f4      	cmp	ip, lr
 8026d8a:	f849 1b04 	str.w	r1, [r9], #4
 8026d8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8026d92:	d8e4      	bhi.n	8026d5e <__multiply+0xaa>
 8026d94:	9901      	ldr	r1, [sp, #4]
 8026d96:	5072      	str	r2, [r6, r1]
 8026d98:	9a03      	ldr	r2, [sp, #12]
 8026d9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8026d9e:	3304      	adds	r3, #4
 8026da0:	f1b9 0f00 	cmp.w	r9, #0
 8026da4:	d01f      	beq.n	8026de6 <__multiply+0x132>
 8026da6:	6834      	ldr	r4, [r6, #0]
 8026da8:	f105 0114 	add.w	r1, r5, #20
 8026dac:	46b6      	mov	lr, r6
 8026dae:	f04f 0a00 	mov.w	sl, #0
 8026db2:	880a      	ldrh	r2, [r1, #0]
 8026db4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8026db8:	fb09 b202 	mla	r2, r9, r2, fp
 8026dbc:	4492      	add	sl, r2
 8026dbe:	b2a4      	uxth	r4, r4
 8026dc0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8026dc4:	f84e 4b04 	str.w	r4, [lr], #4
 8026dc8:	f851 4b04 	ldr.w	r4, [r1], #4
 8026dcc:	f8be 2000 	ldrh.w	r2, [lr]
 8026dd0:	0c24      	lsrs	r4, r4, #16
 8026dd2:	fb09 2404 	mla	r4, r9, r4, r2
 8026dd6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8026dda:	458c      	cmp	ip, r1
 8026ddc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8026de0:	d8e7      	bhi.n	8026db2 <__multiply+0xfe>
 8026de2:	9a01      	ldr	r2, [sp, #4]
 8026de4:	50b4      	str	r4, [r6, r2]
 8026de6:	3604      	adds	r6, #4
 8026de8:	e7a3      	b.n	8026d32 <__multiply+0x7e>
 8026dea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026dee:	2b00      	cmp	r3, #0
 8026df0:	d1a5      	bne.n	8026d3e <__multiply+0x8a>
 8026df2:	3f01      	subs	r7, #1
 8026df4:	e7a1      	b.n	8026d3a <__multiply+0x86>
 8026df6:	bf00      	nop
 8026df8:	08033c15 	.word	0x08033c15
 8026dfc:	08033d64 	.word	0x08033d64

08026e00 <__pow5mult>:
 8026e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026e04:	4615      	mov	r5, r2
 8026e06:	f012 0203 	ands.w	r2, r2, #3
 8026e0a:	4606      	mov	r6, r0
 8026e0c:	460f      	mov	r7, r1
 8026e0e:	d007      	beq.n	8026e20 <__pow5mult+0x20>
 8026e10:	4c25      	ldr	r4, [pc, #148]	; (8026ea8 <__pow5mult+0xa8>)
 8026e12:	3a01      	subs	r2, #1
 8026e14:	2300      	movs	r3, #0
 8026e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026e1a:	f7ff fe51 	bl	8026ac0 <__multadd>
 8026e1e:	4607      	mov	r7, r0
 8026e20:	10ad      	asrs	r5, r5, #2
 8026e22:	d03d      	beq.n	8026ea0 <__pow5mult+0xa0>
 8026e24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8026e26:	b97c      	cbnz	r4, 8026e48 <__pow5mult+0x48>
 8026e28:	2010      	movs	r0, #16
 8026e2a:	f7fb fb0b 	bl	8022444 <malloc>
 8026e2e:	4602      	mov	r2, r0
 8026e30:	6270      	str	r0, [r6, #36]	; 0x24
 8026e32:	b928      	cbnz	r0, 8026e40 <__pow5mult+0x40>
 8026e34:	4b1d      	ldr	r3, [pc, #116]	; (8026eac <__pow5mult+0xac>)
 8026e36:	481e      	ldr	r0, [pc, #120]	; (8026eb0 <__pow5mult+0xb0>)
 8026e38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8026e3c:	f7fe f8ac 	bl	8024f98 <__assert_func>
 8026e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026e44:	6004      	str	r4, [r0, #0]
 8026e46:	60c4      	str	r4, [r0, #12]
 8026e48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026e50:	b94c      	cbnz	r4, 8026e66 <__pow5mult+0x66>
 8026e52:	f240 2171 	movw	r1, #625	; 0x271
 8026e56:	4630      	mov	r0, r6
 8026e58:	f7ff ff16 	bl	8026c88 <__i2b>
 8026e5c:	2300      	movs	r3, #0
 8026e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8026e62:	4604      	mov	r4, r0
 8026e64:	6003      	str	r3, [r0, #0]
 8026e66:	f04f 0900 	mov.w	r9, #0
 8026e6a:	07eb      	lsls	r3, r5, #31
 8026e6c:	d50a      	bpl.n	8026e84 <__pow5mult+0x84>
 8026e6e:	4639      	mov	r1, r7
 8026e70:	4622      	mov	r2, r4
 8026e72:	4630      	mov	r0, r6
 8026e74:	f7ff ff1e 	bl	8026cb4 <__multiply>
 8026e78:	4639      	mov	r1, r7
 8026e7a:	4680      	mov	r8, r0
 8026e7c:	4630      	mov	r0, r6
 8026e7e:	f7ff fdfd 	bl	8026a7c <_Bfree>
 8026e82:	4647      	mov	r7, r8
 8026e84:	106d      	asrs	r5, r5, #1
 8026e86:	d00b      	beq.n	8026ea0 <__pow5mult+0xa0>
 8026e88:	6820      	ldr	r0, [r4, #0]
 8026e8a:	b938      	cbnz	r0, 8026e9c <__pow5mult+0x9c>
 8026e8c:	4622      	mov	r2, r4
 8026e8e:	4621      	mov	r1, r4
 8026e90:	4630      	mov	r0, r6
 8026e92:	f7ff ff0f 	bl	8026cb4 <__multiply>
 8026e96:	6020      	str	r0, [r4, #0]
 8026e98:	f8c0 9000 	str.w	r9, [r0]
 8026e9c:	4604      	mov	r4, r0
 8026e9e:	e7e4      	b.n	8026e6a <__pow5mult+0x6a>
 8026ea0:	4638      	mov	r0, r7
 8026ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026ea6:	bf00      	nop
 8026ea8:	08033eb8 	.word	0x08033eb8
 8026eac:	080338ff 	.word	0x080338ff
 8026eb0:	08033d64 	.word	0x08033d64

08026eb4 <__lshift>:
 8026eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026eb8:	460c      	mov	r4, r1
 8026eba:	6849      	ldr	r1, [r1, #4]
 8026ebc:	6923      	ldr	r3, [r4, #16]
 8026ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026ec2:	68a3      	ldr	r3, [r4, #8]
 8026ec4:	4607      	mov	r7, r0
 8026ec6:	4691      	mov	r9, r2
 8026ec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026ecc:	f108 0601 	add.w	r6, r8, #1
 8026ed0:	42b3      	cmp	r3, r6
 8026ed2:	db0b      	blt.n	8026eec <__lshift+0x38>
 8026ed4:	4638      	mov	r0, r7
 8026ed6:	f7ff fd91 	bl	80269fc <_Balloc>
 8026eda:	4605      	mov	r5, r0
 8026edc:	b948      	cbnz	r0, 8026ef2 <__lshift+0x3e>
 8026ede:	4602      	mov	r2, r0
 8026ee0:	4b28      	ldr	r3, [pc, #160]	; (8026f84 <__lshift+0xd0>)
 8026ee2:	4829      	ldr	r0, [pc, #164]	; (8026f88 <__lshift+0xd4>)
 8026ee4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8026ee8:	f7fe f856 	bl	8024f98 <__assert_func>
 8026eec:	3101      	adds	r1, #1
 8026eee:	005b      	lsls	r3, r3, #1
 8026ef0:	e7ee      	b.n	8026ed0 <__lshift+0x1c>
 8026ef2:	2300      	movs	r3, #0
 8026ef4:	f100 0114 	add.w	r1, r0, #20
 8026ef8:	f100 0210 	add.w	r2, r0, #16
 8026efc:	4618      	mov	r0, r3
 8026efe:	4553      	cmp	r3, sl
 8026f00:	db33      	blt.n	8026f6a <__lshift+0xb6>
 8026f02:	6920      	ldr	r0, [r4, #16]
 8026f04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026f08:	f104 0314 	add.w	r3, r4, #20
 8026f0c:	f019 091f 	ands.w	r9, r9, #31
 8026f10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026f14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026f18:	d02b      	beq.n	8026f72 <__lshift+0xbe>
 8026f1a:	f1c9 0e20 	rsb	lr, r9, #32
 8026f1e:	468a      	mov	sl, r1
 8026f20:	2200      	movs	r2, #0
 8026f22:	6818      	ldr	r0, [r3, #0]
 8026f24:	fa00 f009 	lsl.w	r0, r0, r9
 8026f28:	4302      	orrs	r2, r0
 8026f2a:	f84a 2b04 	str.w	r2, [sl], #4
 8026f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026f32:	459c      	cmp	ip, r3
 8026f34:	fa22 f20e 	lsr.w	r2, r2, lr
 8026f38:	d8f3      	bhi.n	8026f22 <__lshift+0x6e>
 8026f3a:	ebac 0304 	sub.w	r3, ip, r4
 8026f3e:	3b15      	subs	r3, #21
 8026f40:	f023 0303 	bic.w	r3, r3, #3
 8026f44:	3304      	adds	r3, #4
 8026f46:	f104 0015 	add.w	r0, r4, #21
 8026f4a:	4584      	cmp	ip, r0
 8026f4c:	bf38      	it	cc
 8026f4e:	2304      	movcc	r3, #4
 8026f50:	50ca      	str	r2, [r1, r3]
 8026f52:	b10a      	cbz	r2, 8026f58 <__lshift+0xa4>
 8026f54:	f108 0602 	add.w	r6, r8, #2
 8026f58:	3e01      	subs	r6, #1
 8026f5a:	4638      	mov	r0, r7
 8026f5c:	612e      	str	r6, [r5, #16]
 8026f5e:	4621      	mov	r1, r4
 8026f60:	f7ff fd8c 	bl	8026a7c <_Bfree>
 8026f64:	4628      	mov	r0, r5
 8026f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026f6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8026f6e:	3301      	adds	r3, #1
 8026f70:	e7c5      	b.n	8026efe <__lshift+0x4a>
 8026f72:	3904      	subs	r1, #4
 8026f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8026f78:	f841 2f04 	str.w	r2, [r1, #4]!
 8026f7c:	459c      	cmp	ip, r3
 8026f7e:	d8f9      	bhi.n	8026f74 <__lshift+0xc0>
 8026f80:	e7ea      	b.n	8026f58 <__lshift+0xa4>
 8026f82:	bf00      	nop
 8026f84:	08033c15 	.word	0x08033c15
 8026f88:	08033d64 	.word	0x08033d64

08026f8c <__mcmp>:
 8026f8c:	b530      	push	{r4, r5, lr}
 8026f8e:	6902      	ldr	r2, [r0, #16]
 8026f90:	690c      	ldr	r4, [r1, #16]
 8026f92:	1b12      	subs	r2, r2, r4
 8026f94:	d10e      	bne.n	8026fb4 <__mcmp+0x28>
 8026f96:	f100 0314 	add.w	r3, r0, #20
 8026f9a:	3114      	adds	r1, #20
 8026f9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8026fa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8026fa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8026fa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8026fac:	42a5      	cmp	r5, r4
 8026fae:	d003      	beq.n	8026fb8 <__mcmp+0x2c>
 8026fb0:	d305      	bcc.n	8026fbe <__mcmp+0x32>
 8026fb2:	2201      	movs	r2, #1
 8026fb4:	4610      	mov	r0, r2
 8026fb6:	bd30      	pop	{r4, r5, pc}
 8026fb8:	4283      	cmp	r3, r0
 8026fba:	d3f3      	bcc.n	8026fa4 <__mcmp+0x18>
 8026fbc:	e7fa      	b.n	8026fb4 <__mcmp+0x28>
 8026fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8026fc2:	e7f7      	b.n	8026fb4 <__mcmp+0x28>

08026fc4 <__mdiff>:
 8026fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fc8:	460c      	mov	r4, r1
 8026fca:	4606      	mov	r6, r0
 8026fcc:	4611      	mov	r1, r2
 8026fce:	4620      	mov	r0, r4
 8026fd0:	4617      	mov	r7, r2
 8026fd2:	f7ff ffdb 	bl	8026f8c <__mcmp>
 8026fd6:	1e05      	subs	r5, r0, #0
 8026fd8:	d110      	bne.n	8026ffc <__mdiff+0x38>
 8026fda:	4629      	mov	r1, r5
 8026fdc:	4630      	mov	r0, r6
 8026fde:	f7ff fd0d 	bl	80269fc <_Balloc>
 8026fe2:	b930      	cbnz	r0, 8026ff2 <__mdiff+0x2e>
 8026fe4:	4b39      	ldr	r3, [pc, #228]	; (80270cc <__mdiff+0x108>)
 8026fe6:	4602      	mov	r2, r0
 8026fe8:	f240 2132 	movw	r1, #562	; 0x232
 8026fec:	4838      	ldr	r0, [pc, #224]	; (80270d0 <__mdiff+0x10c>)
 8026fee:	f7fd ffd3 	bl	8024f98 <__assert_func>
 8026ff2:	2301      	movs	r3, #1
 8026ff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026ff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ffc:	bfa4      	itt	ge
 8026ffe:	463b      	movge	r3, r7
 8027000:	4627      	movge	r7, r4
 8027002:	4630      	mov	r0, r6
 8027004:	6879      	ldr	r1, [r7, #4]
 8027006:	bfa6      	itte	ge
 8027008:	461c      	movge	r4, r3
 802700a:	2500      	movge	r5, #0
 802700c:	2501      	movlt	r5, #1
 802700e:	f7ff fcf5 	bl	80269fc <_Balloc>
 8027012:	b920      	cbnz	r0, 802701e <__mdiff+0x5a>
 8027014:	4b2d      	ldr	r3, [pc, #180]	; (80270cc <__mdiff+0x108>)
 8027016:	4602      	mov	r2, r0
 8027018:	f44f 7110 	mov.w	r1, #576	; 0x240
 802701c:	e7e6      	b.n	8026fec <__mdiff+0x28>
 802701e:	693e      	ldr	r6, [r7, #16]
 8027020:	60c5      	str	r5, [r0, #12]
 8027022:	6925      	ldr	r5, [r4, #16]
 8027024:	f107 0114 	add.w	r1, r7, #20
 8027028:	f104 0914 	add.w	r9, r4, #20
 802702c:	f100 0e14 	add.w	lr, r0, #20
 8027030:	f107 0210 	add.w	r2, r7, #16
 8027034:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8027038:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802703c:	46f2      	mov	sl, lr
 802703e:	2700      	movs	r7, #0
 8027040:	f859 3b04 	ldr.w	r3, [r9], #4
 8027044:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8027048:	fa1f f883 	uxth.w	r8, r3
 802704c:	fa17 f78b 	uxtah	r7, r7, fp
 8027050:	0c1b      	lsrs	r3, r3, #16
 8027052:	eba7 0808 	sub.w	r8, r7, r8
 8027056:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802705a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802705e:	fa1f f888 	uxth.w	r8, r8
 8027062:	141f      	asrs	r7, r3, #16
 8027064:	454d      	cmp	r5, r9
 8027066:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802706a:	f84a 3b04 	str.w	r3, [sl], #4
 802706e:	d8e7      	bhi.n	8027040 <__mdiff+0x7c>
 8027070:	1b2b      	subs	r3, r5, r4
 8027072:	3b15      	subs	r3, #21
 8027074:	f023 0303 	bic.w	r3, r3, #3
 8027078:	3304      	adds	r3, #4
 802707a:	3415      	adds	r4, #21
 802707c:	42a5      	cmp	r5, r4
 802707e:	bf38      	it	cc
 8027080:	2304      	movcc	r3, #4
 8027082:	4419      	add	r1, r3
 8027084:	4473      	add	r3, lr
 8027086:	469e      	mov	lr, r3
 8027088:	460d      	mov	r5, r1
 802708a:	4565      	cmp	r5, ip
 802708c:	d30e      	bcc.n	80270ac <__mdiff+0xe8>
 802708e:	f10c 0203 	add.w	r2, ip, #3
 8027092:	1a52      	subs	r2, r2, r1
 8027094:	f022 0203 	bic.w	r2, r2, #3
 8027098:	3903      	subs	r1, #3
 802709a:	458c      	cmp	ip, r1
 802709c:	bf38      	it	cc
 802709e:	2200      	movcc	r2, #0
 80270a0:	441a      	add	r2, r3
 80270a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80270a6:	b17b      	cbz	r3, 80270c8 <__mdiff+0x104>
 80270a8:	6106      	str	r6, [r0, #16]
 80270aa:	e7a5      	b.n	8026ff8 <__mdiff+0x34>
 80270ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80270b0:	fa17 f488 	uxtah	r4, r7, r8
 80270b4:	1422      	asrs	r2, r4, #16
 80270b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80270ba:	b2a4      	uxth	r4, r4
 80270bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80270c0:	f84e 4b04 	str.w	r4, [lr], #4
 80270c4:	1417      	asrs	r7, r2, #16
 80270c6:	e7e0      	b.n	802708a <__mdiff+0xc6>
 80270c8:	3e01      	subs	r6, #1
 80270ca:	e7ea      	b.n	80270a2 <__mdiff+0xde>
 80270cc:	08033c15 	.word	0x08033c15
 80270d0:	08033d64 	.word	0x08033d64

080270d4 <__ulp>:
 80270d4:	b082      	sub	sp, #8
 80270d6:	ed8d 0b00 	vstr	d0, [sp]
 80270da:	9b01      	ldr	r3, [sp, #4]
 80270dc:	4912      	ldr	r1, [pc, #72]	; (8027128 <__ulp+0x54>)
 80270de:	4019      	ands	r1, r3
 80270e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80270e4:	2900      	cmp	r1, #0
 80270e6:	dd05      	ble.n	80270f4 <__ulp+0x20>
 80270e8:	2200      	movs	r2, #0
 80270ea:	460b      	mov	r3, r1
 80270ec:	ec43 2b10 	vmov	d0, r2, r3
 80270f0:	b002      	add	sp, #8
 80270f2:	4770      	bx	lr
 80270f4:	4249      	negs	r1, r1
 80270f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80270fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80270fe:	f04f 0200 	mov.w	r2, #0
 8027102:	f04f 0300 	mov.w	r3, #0
 8027106:	da04      	bge.n	8027112 <__ulp+0x3e>
 8027108:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802710c:	fa41 f300 	asr.w	r3, r1, r0
 8027110:	e7ec      	b.n	80270ec <__ulp+0x18>
 8027112:	f1a0 0114 	sub.w	r1, r0, #20
 8027116:	291e      	cmp	r1, #30
 8027118:	bfda      	itte	le
 802711a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802711e:	fa20 f101 	lsrle.w	r1, r0, r1
 8027122:	2101      	movgt	r1, #1
 8027124:	460a      	mov	r2, r1
 8027126:	e7e1      	b.n	80270ec <__ulp+0x18>
 8027128:	7ff00000 	.word	0x7ff00000

0802712c <__b2d>:
 802712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802712e:	6905      	ldr	r5, [r0, #16]
 8027130:	f100 0714 	add.w	r7, r0, #20
 8027134:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8027138:	1f2e      	subs	r6, r5, #4
 802713a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802713e:	4620      	mov	r0, r4
 8027140:	f7ff fd52 	bl	8026be8 <__hi0bits>
 8027144:	f1c0 0320 	rsb	r3, r0, #32
 8027148:	280a      	cmp	r0, #10
 802714a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80271c8 <__b2d+0x9c>
 802714e:	600b      	str	r3, [r1, #0]
 8027150:	dc14      	bgt.n	802717c <__b2d+0x50>
 8027152:	f1c0 0e0b 	rsb	lr, r0, #11
 8027156:	fa24 f10e 	lsr.w	r1, r4, lr
 802715a:	42b7      	cmp	r7, r6
 802715c:	ea41 030c 	orr.w	r3, r1, ip
 8027160:	bf34      	ite	cc
 8027162:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8027166:	2100      	movcs	r1, #0
 8027168:	3015      	adds	r0, #21
 802716a:	fa04 f000 	lsl.w	r0, r4, r0
 802716e:	fa21 f10e 	lsr.w	r1, r1, lr
 8027172:	ea40 0201 	orr.w	r2, r0, r1
 8027176:	ec43 2b10 	vmov	d0, r2, r3
 802717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802717c:	42b7      	cmp	r7, r6
 802717e:	bf3a      	itte	cc
 8027180:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8027184:	f1a5 0608 	subcc.w	r6, r5, #8
 8027188:	2100      	movcs	r1, #0
 802718a:	380b      	subs	r0, #11
 802718c:	d017      	beq.n	80271be <__b2d+0x92>
 802718e:	f1c0 0c20 	rsb	ip, r0, #32
 8027192:	fa04 f500 	lsl.w	r5, r4, r0
 8027196:	42be      	cmp	r6, r7
 8027198:	fa21 f40c 	lsr.w	r4, r1, ip
 802719c:	ea45 0504 	orr.w	r5, r5, r4
 80271a0:	bf8c      	ite	hi
 80271a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80271a6:	2400      	movls	r4, #0
 80271a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80271ac:	fa01 f000 	lsl.w	r0, r1, r0
 80271b0:	fa24 f40c 	lsr.w	r4, r4, ip
 80271b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80271b8:	ea40 0204 	orr.w	r2, r0, r4
 80271bc:	e7db      	b.n	8027176 <__b2d+0x4a>
 80271be:	ea44 030c 	orr.w	r3, r4, ip
 80271c2:	460a      	mov	r2, r1
 80271c4:	e7d7      	b.n	8027176 <__b2d+0x4a>
 80271c6:	bf00      	nop
 80271c8:	3ff00000 	.word	0x3ff00000

080271cc <__d2b>:
 80271cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80271d0:	4689      	mov	r9, r1
 80271d2:	2101      	movs	r1, #1
 80271d4:	ec57 6b10 	vmov	r6, r7, d0
 80271d8:	4690      	mov	r8, r2
 80271da:	f7ff fc0f 	bl	80269fc <_Balloc>
 80271de:	4604      	mov	r4, r0
 80271e0:	b930      	cbnz	r0, 80271f0 <__d2b+0x24>
 80271e2:	4602      	mov	r2, r0
 80271e4:	4b25      	ldr	r3, [pc, #148]	; (802727c <__d2b+0xb0>)
 80271e6:	4826      	ldr	r0, [pc, #152]	; (8027280 <__d2b+0xb4>)
 80271e8:	f240 310a 	movw	r1, #778	; 0x30a
 80271ec:	f7fd fed4 	bl	8024f98 <__assert_func>
 80271f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80271f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80271f8:	bb35      	cbnz	r5, 8027248 <__d2b+0x7c>
 80271fa:	2e00      	cmp	r6, #0
 80271fc:	9301      	str	r3, [sp, #4]
 80271fe:	d028      	beq.n	8027252 <__d2b+0x86>
 8027200:	4668      	mov	r0, sp
 8027202:	9600      	str	r6, [sp, #0]
 8027204:	f7ff fd10 	bl	8026c28 <__lo0bits>
 8027208:	9900      	ldr	r1, [sp, #0]
 802720a:	b300      	cbz	r0, 802724e <__d2b+0x82>
 802720c:	9a01      	ldr	r2, [sp, #4]
 802720e:	f1c0 0320 	rsb	r3, r0, #32
 8027212:	fa02 f303 	lsl.w	r3, r2, r3
 8027216:	430b      	orrs	r3, r1
 8027218:	40c2      	lsrs	r2, r0
 802721a:	6163      	str	r3, [r4, #20]
 802721c:	9201      	str	r2, [sp, #4]
 802721e:	9b01      	ldr	r3, [sp, #4]
 8027220:	61a3      	str	r3, [r4, #24]
 8027222:	2b00      	cmp	r3, #0
 8027224:	bf14      	ite	ne
 8027226:	2202      	movne	r2, #2
 8027228:	2201      	moveq	r2, #1
 802722a:	6122      	str	r2, [r4, #16]
 802722c:	b1d5      	cbz	r5, 8027264 <__d2b+0x98>
 802722e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8027232:	4405      	add	r5, r0
 8027234:	f8c9 5000 	str.w	r5, [r9]
 8027238:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802723c:	f8c8 0000 	str.w	r0, [r8]
 8027240:	4620      	mov	r0, r4
 8027242:	b003      	add	sp, #12
 8027244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802724c:	e7d5      	b.n	80271fa <__d2b+0x2e>
 802724e:	6161      	str	r1, [r4, #20]
 8027250:	e7e5      	b.n	802721e <__d2b+0x52>
 8027252:	a801      	add	r0, sp, #4
 8027254:	f7ff fce8 	bl	8026c28 <__lo0bits>
 8027258:	9b01      	ldr	r3, [sp, #4]
 802725a:	6163      	str	r3, [r4, #20]
 802725c:	2201      	movs	r2, #1
 802725e:	6122      	str	r2, [r4, #16]
 8027260:	3020      	adds	r0, #32
 8027262:	e7e3      	b.n	802722c <__d2b+0x60>
 8027264:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8027268:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802726c:	f8c9 0000 	str.w	r0, [r9]
 8027270:	6918      	ldr	r0, [r3, #16]
 8027272:	f7ff fcb9 	bl	8026be8 <__hi0bits>
 8027276:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802727a:	e7df      	b.n	802723c <__d2b+0x70>
 802727c:	08033c15 	.word	0x08033c15
 8027280:	08033d64 	.word	0x08033d64

08027284 <__ratio>:
 8027284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027288:	4688      	mov	r8, r1
 802728a:	4669      	mov	r1, sp
 802728c:	4681      	mov	r9, r0
 802728e:	f7ff ff4d 	bl	802712c <__b2d>
 8027292:	a901      	add	r1, sp, #4
 8027294:	4640      	mov	r0, r8
 8027296:	ec55 4b10 	vmov	r4, r5, d0
 802729a:	f7ff ff47 	bl	802712c <__b2d>
 802729e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80272a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80272a6:	eba3 0c02 	sub.w	ip, r3, r2
 80272aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80272ae:	1a9b      	subs	r3, r3, r2
 80272b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80272b4:	ec51 0b10 	vmov	r0, r1, d0
 80272b8:	2b00      	cmp	r3, #0
 80272ba:	bfd6      	itet	le
 80272bc:	460a      	movle	r2, r1
 80272be:	462a      	movgt	r2, r5
 80272c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80272c4:	468b      	mov	fp, r1
 80272c6:	462f      	mov	r7, r5
 80272c8:	bfd4      	ite	le
 80272ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80272ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80272d2:	4620      	mov	r0, r4
 80272d4:	ee10 2a10 	vmov	r2, s0
 80272d8:	465b      	mov	r3, fp
 80272da:	4639      	mov	r1, r7
 80272dc:	f7d9 fac6 	bl	800086c <__aeabi_ddiv>
 80272e0:	ec41 0b10 	vmov	d0, r0, r1
 80272e4:	b003      	add	sp, #12
 80272e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080272ea <__copybits>:
 80272ea:	3901      	subs	r1, #1
 80272ec:	b570      	push	{r4, r5, r6, lr}
 80272ee:	1149      	asrs	r1, r1, #5
 80272f0:	6914      	ldr	r4, [r2, #16]
 80272f2:	3101      	adds	r1, #1
 80272f4:	f102 0314 	add.w	r3, r2, #20
 80272f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80272fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8027300:	1f05      	subs	r5, r0, #4
 8027302:	42a3      	cmp	r3, r4
 8027304:	d30c      	bcc.n	8027320 <__copybits+0x36>
 8027306:	1aa3      	subs	r3, r4, r2
 8027308:	3b11      	subs	r3, #17
 802730a:	f023 0303 	bic.w	r3, r3, #3
 802730e:	3211      	adds	r2, #17
 8027310:	42a2      	cmp	r2, r4
 8027312:	bf88      	it	hi
 8027314:	2300      	movhi	r3, #0
 8027316:	4418      	add	r0, r3
 8027318:	2300      	movs	r3, #0
 802731a:	4288      	cmp	r0, r1
 802731c:	d305      	bcc.n	802732a <__copybits+0x40>
 802731e:	bd70      	pop	{r4, r5, r6, pc}
 8027320:	f853 6b04 	ldr.w	r6, [r3], #4
 8027324:	f845 6f04 	str.w	r6, [r5, #4]!
 8027328:	e7eb      	b.n	8027302 <__copybits+0x18>
 802732a:	f840 3b04 	str.w	r3, [r0], #4
 802732e:	e7f4      	b.n	802731a <__copybits+0x30>

08027330 <__any_on>:
 8027330:	f100 0214 	add.w	r2, r0, #20
 8027334:	6900      	ldr	r0, [r0, #16]
 8027336:	114b      	asrs	r3, r1, #5
 8027338:	4298      	cmp	r0, r3
 802733a:	b510      	push	{r4, lr}
 802733c:	db11      	blt.n	8027362 <__any_on+0x32>
 802733e:	dd0a      	ble.n	8027356 <__any_on+0x26>
 8027340:	f011 011f 	ands.w	r1, r1, #31
 8027344:	d007      	beq.n	8027356 <__any_on+0x26>
 8027346:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802734a:	fa24 f001 	lsr.w	r0, r4, r1
 802734e:	fa00 f101 	lsl.w	r1, r0, r1
 8027352:	428c      	cmp	r4, r1
 8027354:	d10b      	bne.n	802736e <__any_on+0x3e>
 8027356:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802735a:	4293      	cmp	r3, r2
 802735c:	d803      	bhi.n	8027366 <__any_on+0x36>
 802735e:	2000      	movs	r0, #0
 8027360:	bd10      	pop	{r4, pc}
 8027362:	4603      	mov	r3, r0
 8027364:	e7f7      	b.n	8027356 <__any_on+0x26>
 8027366:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802736a:	2900      	cmp	r1, #0
 802736c:	d0f5      	beq.n	802735a <__any_on+0x2a>
 802736e:	2001      	movs	r0, #1
 8027370:	e7f6      	b.n	8027360 <__any_on+0x30>

08027372 <_realloc_r>:
 8027372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027374:	4607      	mov	r7, r0
 8027376:	4614      	mov	r4, r2
 8027378:	460e      	mov	r6, r1
 802737a:	b921      	cbnz	r1, 8027386 <_realloc_r+0x14>
 802737c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8027380:	4611      	mov	r1, r2
 8027382:	f7fb bb8b 	b.w	8022a9c <_malloc_r>
 8027386:	b922      	cbnz	r2, 8027392 <_realloc_r+0x20>
 8027388:	f7fb fb38 	bl	80229fc <_free_r>
 802738c:	4625      	mov	r5, r4
 802738e:	4628      	mov	r0, r5
 8027390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027392:	f000 fe5b 	bl	802804c <_malloc_usable_size_r>
 8027396:	42a0      	cmp	r0, r4
 8027398:	d20f      	bcs.n	80273ba <_realloc_r+0x48>
 802739a:	4621      	mov	r1, r4
 802739c:	4638      	mov	r0, r7
 802739e:	f7fb fb7d 	bl	8022a9c <_malloc_r>
 80273a2:	4605      	mov	r5, r0
 80273a4:	2800      	cmp	r0, #0
 80273a6:	d0f2      	beq.n	802738e <_realloc_r+0x1c>
 80273a8:	4631      	mov	r1, r6
 80273aa:	4622      	mov	r2, r4
 80273ac:	f7fb f868 	bl	8022480 <memcpy>
 80273b0:	4631      	mov	r1, r6
 80273b2:	4638      	mov	r0, r7
 80273b4:	f7fb fb22 	bl	80229fc <_free_r>
 80273b8:	e7e9      	b.n	802738e <_realloc_r+0x1c>
 80273ba:	4635      	mov	r5, r6
 80273bc:	e7e7      	b.n	802738e <_realloc_r+0x1c>

080273be <__ssputs_r>:
 80273be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80273c2:	688e      	ldr	r6, [r1, #8]
 80273c4:	429e      	cmp	r6, r3
 80273c6:	4682      	mov	sl, r0
 80273c8:	460c      	mov	r4, r1
 80273ca:	4690      	mov	r8, r2
 80273cc:	461f      	mov	r7, r3
 80273ce:	d838      	bhi.n	8027442 <__ssputs_r+0x84>
 80273d0:	898a      	ldrh	r2, [r1, #12]
 80273d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80273d6:	d032      	beq.n	802743e <__ssputs_r+0x80>
 80273d8:	6825      	ldr	r5, [r4, #0]
 80273da:	6909      	ldr	r1, [r1, #16]
 80273dc:	eba5 0901 	sub.w	r9, r5, r1
 80273e0:	6965      	ldr	r5, [r4, #20]
 80273e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80273e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80273ea:	3301      	adds	r3, #1
 80273ec:	444b      	add	r3, r9
 80273ee:	106d      	asrs	r5, r5, #1
 80273f0:	429d      	cmp	r5, r3
 80273f2:	bf38      	it	cc
 80273f4:	461d      	movcc	r5, r3
 80273f6:	0553      	lsls	r3, r2, #21
 80273f8:	d531      	bpl.n	802745e <__ssputs_r+0xa0>
 80273fa:	4629      	mov	r1, r5
 80273fc:	f7fb fb4e 	bl	8022a9c <_malloc_r>
 8027400:	4606      	mov	r6, r0
 8027402:	b950      	cbnz	r0, 802741a <__ssputs_r+0x5c>
 8027404:	230c      	movs	r3, #12
 8027406:	f8ca 3000 	str.w	r3, [sl]
 802740a:	89a3      	ldrh	r3, [r4, #12]
 802740c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027410:	81a3      	strh	r3, [r4, #12]
 8027412:	f04f 30ff 	mov.w	r0, #4294967295
 8027416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802741a:	6921      	ldr	r1, [r4, #16]
 802741c:	464a      	mov	r2, r9
 802741e:	f7fb f82f 	bl	8022480 <memcpy>
 8027422:	89a3      	ldrh	r3, [r4, #12]
 8027424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802742c:	81a3      	strh	r3, [r4, #12]
 802742e:	6126      	str	r6, [r4, #16]
 8027430:	6165      	str	r5, [r4, #20]
 8027432:	444e      	add	r6, r9
 8027434:	eba5 0509 	sub.w	r5, r5, r9
 8027438:	6026      	str	r6, [r4, #0]
 802743a:	60a5      	str	r5, [r4, #8]
 802743c:	463e      	mov	r6, r7
 802743e:	42be      	cmp	r6, r7
 8027440:	d900      	bls.n	8027444 <__ssputs_r+0x86>
 8027442:	463e      	mov	r6, r7
 8027444:	4632      	mov	r2, r6
 8027446:	6820      	ldr	r0, [r4, #0]
 8027448:	4641      	mov	r1, r8
 802744a:	f7fb f827 	bl	802249c <memmove>
 802744e:	68a3      	ldr	r3, [r4, #8]
 8027450:	6822      	ldr	r2, [r4, #0]
 8027452:	1b9b      	subs	r3, r3, r6
 8027454:	4432      	add	r2, r6
 8027456:	60a3      	str	r3, [r4, #8]
 8027458:	6022      	str	r2, [r4, #0]
 802745a:	2000      	movs	r0, #0
 802745c:	e7db      	b.n	8027416 <__ssputs_r+0x58>
 802745e:	462a      	mov	r2, r5
 8027460:	f7ff ff87 	bl	8027372 <_realloc_r>
 8027464:	4606      	mov	r6, r0
 8027466:	2800      	cmp	r0, #0
 8027468:	d1e1      	bne.n	802742e <__ssputs_r+0x70>
 802746a:	6921      	ldr	r1, [r4, #16]
 802746c:	4650      	mov	r0, sl
 802746e:	f7fb fac5 	bl	80229fc <_free_r>
 8027472:	e7c7      	b.n	8027404 <__ssputs_r+0x46>

08027474 <_svfiprintf_r>:
 8027474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027478:	4698      	mov	r8, r3
 802747a:	898b      	ldrh	r3, [r1, #12]
 802747c:	061b      	lsls	r3, r3, #24
 802747e:	b09d      	sub	sp, #116	; 0x74
 8027480:	4607      	mov	r7, r0
 8027482:	460d      	mov	r5, r1
 8027484:	4614      	mov	r4, r2
 8027486:	d50e      	bpl.n	80274a6 <_svfiprintf_r+0x32>
 8027488:	690b      	ldr	r3, [r1, #16]
 802748a:	b963      	cbnz	r3, 80274a6 <_svfiprintf_r+0x32>
 802748c:	2140      	movs	r1, #64	; 0x40
 802748e:	f7fb fb05 	bl	8022a9c <_malloc_r>
 8027492:	6028      	str	r0, [r5, #0]
 8027494:	6128      	str	r0, [r5, #16]
 8027496:	b920      	cbnz	r0, 80274a2 <_svfiprintf_r+0x2e>
 8027498:	230c      	movs	r3, #12
 802749a:	603b      	str	r3, [r7, #0]
 802749c:	f04f 30ff 	mov.w	r0, #4294967295
 80274a0:	e0d1      	b.n	8027646 <_svfiprintf_r+0x1d2>
 80274a2:	2340      	movs	r3, #64	; 0x40
 80274a4:	616b      	str	r3, [r5, #20]
 80274a6:	2300      	movs	r3, #0
 80274a8:	9309      	str	r3, [sp, #36]	; 0x24
 80274aa:	2320      	movs	r3, #32
 80274ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80274b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80274b4:	2330      	movs	r3, #48	; 0x30
 80274b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8027660 <_svfiprintf_r+0x1ec>
 80274ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80274be:	f04f 0901 	mov.w	r9, #1
 80274c2:	4623      	mov	r3, r4
 80274c4:	469a      	mov	sl, r3
 80274c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80274ca:	b10a      	cbz	r2, 80274d0 <_svfiprintf_r+0x5c>
 80274cc:	2a25      	cmp	r2, #37	; 0x25
 80274ce:	d1f9      	bne.n	80274c4 <_svfiprintf_r+0x50>
 80274d0:	ebba 0b04 	subs.w	fp, sl, r4
 80274d4:	d00b      	beq.n	80274ee <_svfiprintf_r+0x7a>
 80274d6:	465b      	mov	r3, fp
 80274d8:	4622      	mov	r2, r4
 80274da:	4629      	mov	r1, r5
 80274dc:	4638      	mov	r0, r7
 80274de:	f7ff ff6e 	bl	80273be <__ssputs_r>
 80274e2:	3001      	adds	r0, #1
 80274e4:	f000 80aa 	beq.w	802763c <_svfiprintf_r+0x1c8>
 80274e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80274ea:	445a      	add	r2, fp
 80274ec:	9209      	str	r2, [sp, #36]	; 0x24
 80274ee:	f89a 3000 	ldrb.w	r3, [sl]
 80274f2:	2b00      	cmp	r3, #0
 80274f4:	f000 80a2 	beq.w	802763c <_svfiprintf_r+0x1c8>
 80274f8:	2300      	movs	r3, #0
 80274fa:	f04f 32ff 	mov.w	r2, #4294967295
 80274fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027502:	f10a 0a01 	add.w	sl, sl, #1
 8027506:	9304      	str	r3, [sp, #16]
 8027508:	9307      	str	r3, [sp, #28]
 802750a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802750e:	931a      	str	r3, [sp, #104]	; 0x68
 8027510:	4654      	mov	r4, sl
 8027512:	2205      	movs	r2, #5
 8027514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027518:	4851      	ldr	r0, [pc, #324]	; (8027660 <_svfiprintf_r+0x1ec>)
 802751a:	f7d8 fe71 	bl	8000200 <memchr>
 802751e:	9a04      	ldr	r2, [sp, #16]
 8027520:	b9d8      	cbnz	r0, 802755a <_svfiprintf_r+0xe6>
 8027522:	06d0      	lsls	r0, r2, #27
 8027524:	bf44      	itt	mi
 8027526:	2320      	movmi	r3, #32
 8027528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802752c:	0711      	lsls	r1, r2, #28
 802752e:	bf44      	itt	mi
 8027530:	232b      	movmi	r3, #43	; 0x2b
 8027532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027536:	f89a 3000 	ldrb.w	r3, [sl]
 802753a:	2b2a      	cmp	r3, #42	; 0x2a
 802753c:	d015      	beq.n	802756a <_svfiprintf_r+0xf6>
 802753e:	9a07      	ldr	r2, [sp, #28]
 8027540:	4654      	mov	r4, sl
 8027542:	2000      	movs	r0, #0
 8027544:	f04f 0c0a 	mov.w	ip, #10
 8027548:	4621      	mov	r1, r4
 802754a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802754e:	3b30      	subs	r3, #48	; 0x30
 8027550:	2b09      	cmp	r3, #9
 8027552:	d94e      	bls.n	80275f2 <_svfiprintf_r+0x17e>
 8027554:	b1b0      	cbz	r0, 8027584 <_svfiprintf_r+0x110>
 8027556:	9207      	str	r2, [sp, #28]
 8027558:	e014      	b.n	8027584 <_svfiprintf_r+0x110>
 802755a:	eba0 0308 	sub.w	r3, r0, r8
 802755e:	fa09 f303 	lsl.w	r3, r9, r3
 8027562:	4313      	orrs	r3, r2
 8027564:	9304      	str	r3, [sp, #16]
 8027566:	46a2      	mov	sl, r4
 8027568:	e7d2      	b.n	8027510 <_svfiprintf_r+0x9c>
 802756a:	9b03      	ldr	r3, [sp, #12]
 802756c:	1d19      	adds	r1, r3, #4
 802756e:	681b      	ldr	r3, [r3, #0]
 8027570:	9103      	str	r1, [sp, #12]
 8027572:	2b00      	cmp	r3, #0
 8027574:	bfbb      	ittet	lt
 8027576:	425b      	neglt	r3, r3
 8027578:	f042 0202 	orrlt.w	r2, r2, #2
 802757c:	9307      	strge	r3, [sp, #28]
 802757e:	9307      	strlt	r3, [sp, #28]
 8027580:	bfb8      	it	lt
 8027582:	9204      	strlt	r2, [sp, #16]
 8027584:	7823      	ldrb	r3, [r4, #0]
 8027586:	2b2e      	cmp	r3, #46	; 0x2e
 8027588:	d10c      	bne.n	80275a4 <_svfiprintf_r+0x130>
 802758a:	7863      	ldrb	r3, [r4, #1]
 802758c:	2b2a      	cmp	r3, #42	; 0x2a
 802758e:	d135      	bne.n	80275fc <_svfiprintf_r+0x188>
 8027590:	9b03      	ldr	r3, [sp, #12]
 8027592:	1d1a      	adds	r2, r3, #4
 8027594:	681b      	ldr	r3, [r3, #0]
 8027596:	9203      	str	r2, [sp, #12]
 8027598:	2b00      	cmp	r3, #0
 802759a:	bfb8      	it	lt
 802759c:	f04f 33ff 	movlt.w	r3, #4294967295
 80275a0:	3402      	adds	r4, #2
 80275a2:	9305      	str	r3, [sp, #20]
 80275a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8027670 <_svfiprintf_r+0x1fc>
 80275a8:	7821      	ldrb	r1, [r4, #0]
 80275aa:	2203      	movs	r2, #3
 80275ac:	4650      	mov	r0, sl
 80275ae:	f7d8 fe27 	bl	8000200 <memchr>
 80275b2:	b140      	cbz	r0, 80275c6 <_svfiprintf_r+0x152>
 80275b4:	2340      	movs	r3, #64	; 0x40
 80275b6:	eba0 000a 	sub.w	r0, r0, sl
 80275ba:	fa03 f000 	lsl.w	r0, r3, r0
 80275be:	9b04      	ldr	r3, [sp, #16]
 80275c0:	4303      	orrs	r3, r0
 80275c2:	3401      	adds	r4, #1
 80275c4:	9304      	str	r3, [sp, #16]
 80275c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80275ca:	4826      	ldr	r0, [pc, #152]	; (8027664 <_svfiprintf_r+0x1f0>)
 80275cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80275d0:	2206      	movs	r2, #6
 80275d2:	f7d8 fe15 	bl	8000200 <memchr>
 80275d6:	2800      	cmp	r0, #0
 80275d8:	d038      	beq.n	802764c <_svfiprintf_r+0x1d8>
 80275da:	4b23      	ldr	r3, [pc, #140]	; (8027668 <_svfiprintf_r+0x1f4>)
 80275dc:	bb1b      	cbnz	r3, 8027626 <_svfiprintf_r+0x1b2>
 80275de:	9b03      	ldr	r3, [sp, #12]
 80275e0:	3307      	adds	r3, #7
 80275e2:	f023 0307 	bic.w	r3, r3, #7
 80275e6:	3308      	adds	r3, #8
 80275e8:	9303      	str	r3, [sp, #12]
 80275ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275ec:	4433      	add	r3, r6
 80275ee:	9309      	str	r3, [sp, #36]	; 0x24
 80275f0:	e767      	b.n	80274c2 <_svfiprintf_r+0x4e>
 80275f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80275f6:	460c      	mov	r4, r1
 80275f8:	2001      	movs	r0, #1
 80275fa:	e7a5      	b.n	8027548 <_svfiprintf_r+0xd4>
 80275fc:	2300      	movs	r3, #0
 80275fe:	3401      	adds	r4, #1
 8027600:	9305      	str	r3, [sp, #20]
 8027602:	4619      	mov	r1, r3
 8027604:	f04f 0c0a 	mov.w	ip, #10
 8027608:	4620      	mov	r0, r4
 802760a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802760e:	3a30      	subs	r2, #48	; 0x30
 8027610:	2a09      	cmp	r2, #9
 8027612:	d903      	bls.n	802761c <_svfiprintf_r+0x1a8>
 8027614:	2b00      	cmp	r3, #0
 8027616:	d0c5      	beq.n	80275a4 <_svfiprintf_r+0x130>
 8027618:	9105      	str	r1, [sp, #20]
 802761a:	e7c3      	b.n	80275a4 <_svfiprintf_r+0x130>
 802761c:	fb0c 2101 	mla	r1, ip, r1, r2
 8027620:	4604      	mov	r4, r0
 8027622:	2301      	movs	r3, #1
 8027624:	e7f0      	b.n	8027608 <_svfiprintf_r+0x194>
 8027626:	ab03      	add	r3, sp, #12
 8027628:	9300      	str	r3, [sp, #0]
 802762a:	462a      	mov	r2, r5
 802762c:	4b0f      	ldr	r3, [pc, #60]	; (802766c <_svfiprintf_r+0x1f8>)
 802762e:	a904      	add	r1, sp, #16
 8027630:	4638      	mov	r0, r7
 8027632:	f7fb fc87 	bl	8022f44 <_printf_float>
 8027636:	1c42      	adds	r2, r0, #1
 8027638:	4606      	mov	r6, r0
 802763a:	d1d6      	bne.n	80275ea <_svfiprintf_r+0x176>
 802763c:	89ab      	ldrh	r3, [r5, #12]
 802763e:	065b      	lsls	r3, r3, #25
 8027640:	f53f af2c 	bmi.w	802749c <_svfiprintf_r+0x28>
 8027644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027646:	b01d      	add	sp, #116	; 0x74
 8027648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802764c:	ab03      	add	r3, sp, #12
 802764e:	9300      	str	r3, [sp, #0]
 8027650:	462a      	mov	r2, r5
 8027652:	4b06      	ldr	r3, [pc, #24]	; (802766c <_svfiprintf_r+0x1f8>)
 8027654:	a904      	add	r1, sp, #16
 8027656:	4638      	mov	r0, r7
 8027658:	f7fb ff18 	bl	802348c <_printf_i>
 802765c:	e7eb      	b.n	8027636 <_svfiprintf_r+0x1c2>
 802765e:	bf00      	nop
 8027660:	080339dc 	.word	0x080339dc
 8027664:	080339e6 	.word	0x080339e6
 8027668:	08022f45 	.word	0x08022f45
 802766c:	080273bf 	.word	0x080273bf
 8027670:	080339e2 	.word	0x080339e2

08027674 <_sungetc_r>:
 8027674:	b538      	push	{r3, r4, r5, lr}
 8027676:	1c4b      	adds	r3, r1, #1
 8027678:	4614      	mov	r4, r2
 802767a:	d103      	bne.n	8027684 <_sungetc_r+0x10>
 802767c:	f04f 35ff 	mov.w	r5, #4294967295
 8027680:	4628      	mov	r0, r5
 8027682:	bd38      	pop	{r3, r4, r5, pc}
 8027684:	8993      	ldrh	r3, [r2, #12]
 8027686:	f023 0320 	bic.w	r3, r3, #32
 802768a:	8193      	strh	r3, [r2, #12]
 802768c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802768e:	6852      	ldr	r2, [r2, #4]
 8027690:	b2cd      	uxtb	r5, r1
 8027692:	b18b      	cbz	r3, 80276b8 <_sungetc_r+0x44>
 8027694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8027696:	4293      	cmp	r3, r2
 8027698:	dd08      	ble.n	80276ac <_sungetc_r+0x38>
 802769a:	6823      	ldr	r3, [r4, #0]
 802769c:	1e5a      	subs	r2, r3, #1
 802769e:	6022      	str	r2, [r4, #0]
 80276a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80276a4:	6863      	ldr	r3, [r4, #4]
 80276a6:	3301      	adds	r3, #1
 80276a8:	6063      	str	r3, [r4, #4]
 80276aa:	e7e9      	b.n	8027680 <_sungetc_r+0xc>
 80276ac:	4621      	mov	r1, r4
 80276ae:	f000 fc51 	bl	8027f54 <__submore>
 80276b2:	2800      	cmp	r0, #0
 80276b4:	d0f1      	beq.n	802769a <_sungetc_r+0x26>
 80276b6:	e7e1      	b.n	802767c <_sungetc_r+0x8>
 80276b8:	6921      	ldr	r1, [r4, #16]
 80276ba:	6823      	ldr	r3, [r4, #0]
 80276bc:	b151      	cbz	r1, 80276d4 <_sungetc_r+0x60>
 80276be:	4299      	cmp	r1, r3
 80276c0:	d208      	bcs.n	80276d4 <_sungetc_r+0x60>
 80276c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80276c6:	42a9      	cmp	r1, r5
 80276c8:	d104      	bne.n	80276d4 <_sungetc_r+0x60>
 80276ca:	3b01      	subs	r3, #1
 80276cc:	3201      	adds	r2, #1
 80276ce:	6023      	str	r3, [r4, #0]
 80276d0:	6062      	str	r2, [r4, #4]
 80276d2:	e7d5      	b.n	8027680 <_sungetc_r+0xc>
 80276d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80276d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80276dc:	6363      	str	r3, [r4, #52]	; 0x34
 80276de:	2303      	movs	r3, #3
 80276e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80276e2:	4623      	mov	r3, r4
 80276e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80276e8:	6023      	str	r3, [r4, #0]
 80276ea:	2301      	movs	r3, #1
 80276ec:	e7dc      	b.n	80276a8 <_sungetc_r+0x34>

080276ee <__ssrefill_r>:
 80276ee:	b510      	push	{r4, lr}
 80276f0:	460c      	mov	r4, r1
 80276f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80276f4:	b169      	cbz	r1, 8027712 <__ssrefill_r+0x24>
 80276f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80276fa:	4299      	cmp	r1, r3
 80276fc:	d001      	beq.n	8027702 <__ssrefill_r+0x14>
 80276fe:	f7fb f97d 	bl	80229fc <_free_r>
 8027702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027704:	6063      	str	r3, [r4, #4]
 8027706:	2000      	movs	r0, #0
 8027708:	6360      	str	r0, [r4, #52]	; 0x34
 802770a:	b113      	cbz	r3, 8027712 <__ssrefill_r+0x24>
 802770c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802770e:	6023      	str	r3, [r4, #0]
 8027710:	bd10      	pop	{r4, pc}
 8027712:	6923      	ldr	r3, [r4, #16]
 8027714:	6023      	str	r3, [r4, #0]
 8027716:	2300      	movs	r3, #0
 8027718:	6063      	str	r3, [r4, #4]
 802771a:	89a3      	ldrh	r3, [r4, #12]
 802771c:	f043 0320 	orr.w	r3, r3, #32
 8027720:	81a3      	strh	r3, [r4, #12]
 8027722:	f04f 30ff 	mov.w	r0, #4294967295
 8027726:	e7f3      	b.n	8027710 <__ssrefill_r+0x22>

08027728 <__ssvfiscanf_r>:
 8027728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802772c:	460c      	mov	r4, r1
 802772e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8027732:	2100      	movs	r1, #0
 8027734:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8027738:	49b2      	ldr	r1, [pc, #712]	; (8027a04 <__ssvfiscanf_r+0x2dc>)
 802773a:	91a0      	str	r1, [sp, #640]	; 0x280
 802773c:	f10d 0804 	add.w	r8, sp, #4
 8027740:	49b1      	ldr	r1, [pc, #708]	; (8027a08 <__ssvfiscanf_r+0x2e0>)
 8027742:	4fb2      	ldr	r7, [pc, #712]	; (8027a0c <__ssvfiscanf_r+0x2e4>)
 8027744:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8027a10 <__ssvfiscanf_r+0x2e8>
 8027748:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802774c:	4606      	mov	r6, r0
 802774e:	91a1      	str	r1, [sp, #644]	; 0x284
 8027750:	9300      	str	r3, [sp, #0]
 8027752:	f892 a000 	ldrb.w	sl, [r2]
 8027756:	f1ba 0f00 	cmp.w	sl, #0
 802775a:	f000 8151 	beq.w	8027a00 <__ssvfiscanf_r+0x2d8>
 802775e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8027762:	f013 0308 	ands.w	r3, r3, #8
 8027766:	f102 0501 	add.w	r5, r2, #1
 802776a:	d019      	beq.n	80277a0 <__ssvfiscanf_r+0x78>
 802776c:	6863      	ldr	r3, [r4, #4]
 802776e:	2b00      	cmp	r3, #0
 8027770:	dd0f      	ble.n	8027792 <__ssvfiscanf_r+0x6a>
 8027772:	6823      	ldr	r3, [r4, #0]
 8027774:	781a      	ldrb	r2, [r3, #0]
 8027776:	5cba      	ldrb	r2, [r7, r2]
 8027778:	0712      	lsls	r2, r2, #28
 802777a:	d401      	bmi.n	8027780 <__ssvfiscanf_r+0x58>
 802777c:	462a      	mov	r2, r5
 802777e:	e7e8      	b.n	8027752 <__ssvfiscanf_r+0x2a>
 8027780:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8027782:	3201      	adds	r2, #1
 8027784:	9245      	str	r2, [sp, #276]	; 0x114
 8027786:	6862      	ldr	r2, [r4, #4]
 8027788:	3301      	adds	r3, #1
 802778a:	3a01      	subs	r2, #1
 802778c:	6062      	str	r2, [r4, #4]
 802778e:	6023      	str	r3, [r4, #0]
 8027790:	e7ec      	b.n	802776c <__ssvfiscanf_r+0x44>
 8027792:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027794:	4621      	mov	r1, r4
 8027796:	4630      	mov	r0, r6
 8027798:	4798      	blx	r3
 802779a:	2800      	cmp	r0, #0
 802779c:	d0e9      	beq.n	8027772 <__ssvfiscanf_r+0x4a>
 802779e:	e7ed      	b.n	802777c <__ssvfiscanf_r+0x54>
 80277a0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80277a4:	f040 8083 	bne.w	80278ae <__ssvfiscanf_r+0x186>
 80277a8:	9341      	str	r3, [sp, #260]	; 0x104
 80277aa:	9343      	str	r3, [sp, #268]	; 0x10c
 80277ac:	7853      	ldrb	r3, [r2, #1]
 80277ae:	2b2a      	cmp	r3, #42	; 0x2a
 80277b0:	bf02      	ittt	eq
 80277b2:	2310      	moveq	r3, #16
 80277b4:	1c95      	addeq	r5, r2, #2
 80277b6:	9341      	streq	r3, [sp, #260]	; 0x104
 80277b8:	220a      	movs	r2, #10
 80277ba:	46ab      	mov	fp, r5
 80277bc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80277c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80277c4:	2b09      	cmp	r3, #9
 80277c6:	d91d      	bls.n	8027804 <__ssvfiscanf_r+0xdc>
 80277c8:	4891      	ldr	r0, [pc, #580]	; (8027a10 <__ssvfiscanf_r+0x2e8>)
 80277ca:	2203      	movs	r2, #3
 80277cc:	f7d8 fd18 	bl	8000200 <memchr>
 80277d0:	b140      	cbz	r0, 80277e4 <__ssvfiscanf_r+0xbc>
 80277d2:	2301      	movs	r3, #1
 80277d4:	eba0 0009 	sub.w	r0, r0, r9
 80277d8:	fa03 f000 	lsl.w	r0, r3, r0
 80277dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80277de:	4318      	orrs	r0, r3
 80277e0:	9041      	str	r0, [sp, #260]	; 0x104
 80277e2:	465d      	mov	r5, fp
 80277e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80277e8:	2b78      	cmp	r3, #120	; 0x78
 80277ea:	d806      	bhi.n	80277fa <__ssvfiscanf_r+0xd2>
 80277ec:	2b57      	cmp	r3, #87	; 0x57
 80277ee:	d810      	bhi.n	8027812 <__ssvfiscanf_r+0xea>
 80277f0:	2b25      	cmp	r3, #37	; 0x25
 80277f2:	d05c      	beq.n	80278ae <__ssvfiscanf_r+0x186>
 80277f4:	d856      	bhi.n	80278a4 <__ssvfiscanf_r+0x17c>
 80277f6:	2b00      	cmp	r3, #0
 80277f8:	d074      	beq.n	80278e4 <__ssvfiscanf_r+0x1bc>
 80277fa:	2303      	movs	r3, #3
 80277fc:	9347      	str	r3, [sp, #284]	; 0x11c
 80277fe:	230a      	movs	r3, #10
 8027800:	9342      	str	r3, [sp, #264]	; 0x108
 8027802:	e081      	b.n	8027908 <__ssvfiscanf_r+0x1e0>
 8027804:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8027806:	fb02 1303 	mla	r3, r2, r3, r1
 802780a:	3b30      	subs	r3, #48	; 0x30
 802780c:	9343      	str	r3, [sp, #268]	; 0x10c
 802780e:	465d      	mov	r5, fp
 8027810:	e7d3      	b.n	80277ba <__ssvfiscanf_r+0x92>
 8027812:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8027816:	2a20      	cmp	r2, #32
 8027818:	d8ef      	bhi.n	80277fa <__ssvfiscanf_r+0xd2>
 802781a:	a101      	add	r1, pc, #4	; (adr r1, 8027820 <__ssvfiscanf_r+0xf8>)
 802781c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8027820:	080278f3 	.word	0x080278f3
 8027824:	080277fb 	.word	0x080277fb
 8027828:	080277fb 	.word	0x080277fb
 802782c:	08027951 	.word	0x08027951
 8027830:	080277fb 	.word	0x080277fb
 8027834:	080277fb 	.word	0x080277fb
 8027838:	080277fb 	.word	0x080277fb
 802783c:	080277fb 	.word	0x080277fb
 8027840:	080277fb 	.word	0x080277fb
 8027844:	080277fb 	.word	0x080277fb
 8027848:	080277fb 	.word	0x080277fb
 802784c:	08027967 	.word	0x08027967
 8027850:	0802793d 	.word	0x0802793d
 8027854:	080278ab 	.word	0x080278ab
 8027858:	080278ab 	.word	0x080278ab
 802785c:	080278ab 	.word	0x080278ab
 8027860:	080277fb 	.word	0x080277fb
 8027864:	08027941 	.word	0x08027941
 8027868:	080277fb 	.word	0x080277fb
 802786c:	080277fb 	.word	0x080277fb
 8027870:	080277fb 	.word	0x080277fb
 8027874:	080277fb 	.word	0x080277fb
 8027878:	08027977 	.word	0x08027977
 802787c:	08027949 	.word	0x08027949
 8027880:	080278eb 	.word	0x080278eb
 8027884:	080277fb 	.word	0x080277fb
 8027888:	080277fb 	.word	0x080277fb
 802788c:	08027973 	.word	0x08027973
 8027890:	080277fb 	.word	0x080277fb
 8027894:	0802793d 	.word	0x0802793d
 8027898:	080277fb 	.word	0x080277fb
 802789c:	080277fb 	.word	0x080277fb
 80278a0:	080278f3 	.word	0x080278f3
 80278a4:	3b45      	subs	r3, #69	; 0x45
 80278a6:	2b02      	cmp	r3, #2
 80278a8:	d8a7      	bhi.n	80277fa <__ssvfiscanf_r+0xd2>
 80278aa:	2305      	movs	r3, #5
 80278ac:	e02b      	b.n	8027906 <__ssvfiscanf_r+0x1de>
 80278ae:	6863      	ldr	r3, [r4, #4]
 80278b0:	2b00      	cmp	r3, #0
 80278b2:	dd0d      	ble.n	80278d0 <__ssvfiscanf_r+0x1a8>
 80278b4:	6823      	ldr	r3, [r4, #0]
 80278b6:	781a      	ldrb	r2, [r3, #0]
 80278b8:	4552      	cmp	r2, sl
 80278ba:	f040 80a1 	bne.w	8027a00 <__ssvfiscanf_r+0x2d8>
 80278be:	3301      	adds	r3, #1
 80278c0:	6862      	ldr	r2, [r4, #4]
 80278c2:	6023      	str	r3, [r4, #0]
 80278c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80278c6:	3a01      	subs	r2, #1
 80278c8:	3301      	adds	r3, #1
 80278ca:	6062      	str	r2, [r4, #4]
 80278cc:	9345      	str	r3, [sp, #276]	; 0x114
 80278ce:	e755      	b.n	802777c <__ssvfiscanf_r+0x54>
 80278d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80278d2:	4621      	mov	r1, r4
 80278d4:	4630      	mov	r0, r6
 80278d6:	4798      	blx	r3
 80278d8:	2800      	cmp	r0, #0
 80278da:	d0eb      	beq.n	80278b4 <__ssvfiscanf_r+0x18c>
 80278dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80278de:	2800      	cmp	r0, #0
 80278e0:	f040 8084 	bne.w	80279ec <__ssvfiscanf_r+0x2c4>
 80278e4:	f04f 30ff 	mov.w	r0, #4294967295
 80278e8:	e086      	b.n	80279f8 <__ssvfiscanf_r+0x2d0>
 80278ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80278ec:	f042 0220 	orr.w	r2, r2, #32
 80278f0:	9241      	str	r2, [sp, #260]	; 0x104
 80278f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80278f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80278f8:	9241      	str	r2, [sp, #260]	; 0x104
 80278fa:	2210      	movs	r2, #16
 80278fc:	2b6f      	cmp	r3, #111	; 0x6f
 80278fe:	9242      	str	r2, [sp, #264]	; 0x108
 8027900:	bf34      	ite	cc
 8027902:	2303      	movcc	r3, #3
 8027904:	2304      	movcs	r3, #4
 8027906:	9347      	str	r3, [sp, #284]	; 0x11c
 8027908:	6863      	ldr	r3, [r4, #4]
 802790a:	2b00      	cmp	r3, #0
 802790c:	dd41      	ble.n	8027992 <__ssvfiscanf_r+0x26a>
 802790e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027910:	0659      	lsls	r1, r3, #25
 8027912:	d404      	bmi.n	802791e <__ssvfiscanf_r+0x1f6>
 8027914:	6823      	ldr	r3, [r4, #0]
 8027916:	781a      	ldrb	r2, [r3, #0]
 8027918:	5cba      	ldrb	r2, [r7, r2]
 802791a:	0712      	lsls	r2, r2, #28
 802791c:	d440      	bmi.n	80279a0 <__ssvfiscanf_r+0x278>
 802791e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8027920:	2b02      	cmp	r3, #2
 8027922:	dc4f      	bgt.n	80279c4 <__ssvfiscanf_r+0x29c>
 8027924:	466b      	mov	r3, sp
 8027926:	4622      	mov	r2, r4
 8027928:	a941      	add	r1, sp, #260	; 0x104
 802792a:	4630      	mov	r0, r6
 802792c:	f000 f874 	bl	8027a18 <_scanf_chars>
 8027930:	2801      	cmp	r0, #1
 8027932:	d065      	beq.n	8027a00 <__ssvfiscanf_r+0x2d8>
 8027934:	2802      	cmp	r0, #2
 8027936:	f47f af21 	bne.w	802777c <__ssvfiscanf_r+0x54>
 802793a:	e7cf      	b.n	80278dc <__ssvfiscanf_r+0x1b4>
 802793c:	220a      	movs	r2, #10
 802793e:	e7dd      	b.n	80278fc <__ssvfiscanf_r+0x1d4>
 8027940:	2300      	movs	r3, #0
 8027942:	9342      	str	r3, [sp, #264]	; 0x108
 8027944:	2303      	movs	r3, #3
 8027946:	e7de      	b.n	8027906 <__ssvfiscanf_r+0x1de>
 8027948:	2308      	movs	r3, #8
 802794a:	9342      	str	r3, [sp, #264]	; 0x108
 802794c:	2304      	movs	r3, #4
 802794e:	e7da      	b.n	8027906 <__ssvfiscanf_r+0x1de>
 8027950:	4629      	mov	r1, r5
 8027952:	4640      	mov	r0, r8
 8027954:	f000 fa3c 	bl	8027dd0 <__sccl>
 8027958:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802795a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802795e:	9341      	str	r3, [sp, #260]	; 0x104
 8027960:	4605      	mov	r5, r0
 8027962:	2301      	movs	r3, #1
 8027964:	e7cf      	b.n	8027906 <__ssvfiscanf_r+0x1de>
 8027966:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802796c:	9341      	str	r3, [sp, #260]	; 0x104
 802796e:	2300      	movs	r3, #0
 8027970:	e7c9      	b.n	8027906 <__ssvfiscanf_r+0x1de>
 8027972:	2302      	movs	r3, #2
 8027974:	e7c7      	b.n	8027906 <__ssvfiscanf_r+0x1de>
 8027976:	9841      	ldr	r0, [sp, #260]	; 0x104
 8027978:	06c3      	lsls	r3, r0, #27
 802797a:	f53f aeff 	bmi.w	802777c <__ssvfiscanf_r+0x54>
 802797e:	9b00      	ldr	r3, [sp, #0]
 8027980:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8027982:	1d19      	adds	r1, r3, #4
 8027984:	9100      	str	r1, [sp, #0]
 8027986:	681b      	ldr	r3, [r3, #0]
 8027988:	07c0      	lsls	r0, r0, #31
 802798a:	bf4c      	ite	mi
 802798c:	801a      	strhmi	r2, [r3, #0]
 802798e:	601a      	strpl	r2, [r3, #0]
 8027990:	e6f4      	b.n	802777c <__ssvfiscanf_r+0x54>
 8027992:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027994:	4621      	mov	r1, r4
 8027996:	4630      	mov	r0, r6
 8027998:	4798      	blx	r3
 802799a:	2800      	cmp	r0, #0
 802799c:	d0b7      	beq.n	802790e <__ssvfiscanf_r+0x1e6>
 802799e:	e79d      	b.n	80278dc <__ssvfiscanf_r+0x1b4>
 80279a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80279a2:	3201      	adds	r2, #1
 80279a4:	9245      	str	r2, [sp, #276]	; 0x114
 80279a6:	6862      	ldr	r2, [r4, #4]
 80279a8:	3a01      	subs	r2, #1
 80279aa:	2a00      	cmp	r2, #0
 80279ac:	6062      	str	r2, [r4, #4]
 80279ae:	dd02      	ble.n	80279b6 <__ssvfiscanf_r+0x28e>
 80279b0:	3301      	adds	r3, #1
 80279b2:	6023      	str	r3, [r4, #0]
 80279b4:	e7ae      	b.n	8027914 <__ssvfiscanf_r+0x1ec>
 80279b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80279b8:	4621      	mov	r1, r4
 80279ba:	4630      	mov	r0, r6
 80279bc:	4798      	blx	r3
 80279be:	2800      	cmp	r0, #0
 80279c0:	d0a8      	beq.n	8027914 <__ssvfiscanf_r+0x1ec>
 80279c2:	e78b      	b.n	80278dc <__ssvfiscanf_r+0x1b4>
 80279c4:	2b04      	cmp	r3, #4
 80279c6:	dc06      	bgt.n	80279d6 <__ssvfiscanf_r+0x2ae>
 80279c8:	466b      	mov	r3, sp
 80279ca:	4622      	mov	r2, r4
 80279cc:	a941      	add	r1, sp, #260	; 0x104
 80279ce:	4630      	mov	r0, r6
 80279d0:	f000 f87a 	bl	8027ac8 <_scanf_i>
 80279d4:	e7ac      	b.n	8027930 <__ssvfiscanf_r+0x208>
 80279d6:	4b0f      	ldr	r3, [pc, #60]	; (8027a14 <__ssvfiscanf_r+0x2ec>)
 80279d8:	2b00      	cmp	r3, #0
 80279da:	f43f aecf 	beq.w	802777c <__ssvfiscanf_r+0x54>
 80279de:	466b      	mov	r3, sp
 80279e0:	4622      	mov	r2, r4
 80279e2:	a941      	add	r1, sp, #260	; 0x104
 80279e4:	4630      	mov	r0, r6
 80279e6:	f3af 8000 	nop.w
 80279ea:	e7a1      	b.n	8027930 <__ssvfiscanf_r+0x208>
 80279ec:	89a3      	ldrh	r3, [r4, #12]
 80279ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80279f2:	bf18      	it	ne
 80279f4:	f04f 30ff 	movne.w	r0, #4294967295
 80279f8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80279fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a00:	9844      	ldr	r0, [sp, #272]	; 0x110
 8027a02:	e7f9      	b.n	80279f8 <__ssvfiscanf_r+0x2d0>
 8027a04:	08027675 	.word	0x08027675
 8027a08:	080276ef 	.word	0x080276ef
 8027a0c:	080337ff 	.word	0x080337ff
 8027a10:	080339e2 	.word	0x080339e2
 8027a14:	00000000 	.word	0x00000000

08027a18 <_scanf_chars>:
 8027a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027a1c:	4615      	mov	r5, r2
 8027a1e:	688a      	ldr	r2, [r1, #8]
 8027a20:	4680      	mov	r8, r0
 8027a22:	460c      	mov	r4, r1
 8027a24:	b932      	cbnz	r2, 8027a34 <_scanf_chars+0x1c>
 8027a26:	698a      	ldr	r2, [r1, #24]
 8027a28:	2a00      	cmp	r2, #0
 8027a2a:	bf0c      	ite	eq
 8027a2c:	2201      	moveq	r2, #1
 8027a2e:	f04f 32ff 	movne.w	r2, #4294967295
 8027a32:	608a      	str	r2, [r1, #8]
 8027a34:	6822      	ldr	r2, [r4, #0]
 8027a36:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8027ac4 <_scanf_chars+0xac>
 8027a3a:	06d1      	lsls	r1, r2, #27
 8027a3c:	bf5f      	itttt	pl
 8027a3e:	681a      	ldrpl	r2, [r3, #0]
 8027a40:	1d11      	addpl	r1, r2, #4
 8027a42:	6019      	strpl	r1, [r3, #0]
 8027a44:	6816      	ldrpl	r6, [r2, #0]
 8027a46:	2700      	movs	r7, #0
 8027a48:	69a0      	ldr	r0, [r4, #24]
 8027a4a:	b188      	cbz	r0, 8027a70 <_scanf_chars+0x58>
 8027a4c:	2801      	cmp	r0, #1
 8027a4e:	d107      	bne.n	8027a60 <_scanf_chars+0x48>
 8027a50:	682b      	ldr	r3, [r5, #0]
 8027a52:	781a      	ldrb	r2, [r3, #0]
 8027a54:	6963      	ldr	r3, [r4, #20]
 8027a56:	5c9b      	ldrb	r3, [r3, r2]
 8027a58:	b953      	cbnz	r3, 8027a70 <_scanf_chars+0x58>
 8027a5a:	bb27      	cbnz	r7, 8027aa6 <_scanf_chars+0x8e>
 8027a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027a60:	2802      	cmp	r0, #2
 8027a62:	d120      	bne.n	8027aa6 <_scanf_chars+0x8e>
 8027a64:	682b      	ldr	r3, [r5, #0]
 8027a66:	781b      	ldrb	r3, [r3, #0]
 8027a68:	f813 3009 	ldrb.w	r3, [r3, r9]
 8027a6c:	071b      	lsls	r3, r3, #28
 8027a6e:	d41a      	bmi.n	8027aa6 <_scanf_chars+0x8e>
 8027a70:	6823      	ldr	r3, [r4, #0]
 8027a72:	06da      	lsls	r2, r3, #27
 8027a74:	bf5e      	ittt	pl
 8027a76:	682b      	ldrpl	r3, [r5, #0]
 8027a78:	781b      	ldrbpl	r3, [r3, #0]
 8027a7a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8027a7e:	682a      	ldr	r2, [r5, #0]
 8027a80:	686b      	ldr	r3, [r5, #4]
 8027a82:	3201      	adds	r2, #1
 8027a84:	602a      	str	r2, [r5, #0]
 8027a86:	68a2      	ldr	r2, [r4, #8]
 8027a88:	3b01      	subs	r3, #1
 8027a8a:	3a01      	subs	r2, #1
 8027a8c:	606b      	str	r3, [r5, #4]
 8027a8e:	3701      	adds	r7, #1
 8027a90:	60a2      	str	r2, [r4, #8]
 8027a92:	b142      	cbz	r2, 8027aa6 <_scanf_chars+0x8e>
 8027a94:	2b00      	cmp	r3, #0
 8027a96:	dcd7      	bgt.n	8027a48 <_scanf_chars+0x30>
 8027a98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027a9c:	4629      	mov	r1, r5
 8027a9e:	4640      	mov	r0, r8
 8027aa0:	4798      	blx	r3
 8027aa2:	2800      	cmp	r0, #0
 8027aa4:	d0d0      	beq.n	8027a48 <_scanf_chars+0x30>
 8027aa6:	6823      	ldr	r3, [r4, #0]
 8027aa8:	f013 0310 	ands.w	r3, r3, #16
 8027aac:	d105      	bne.n	8027aba <_scanf_chars+0xa2>
 8027aae:	68e2      	ldr	r2, [r4, #12]
 8027ab0:	3201      	adds	r2, #1
 8027ab2:	60e2      	str	r2, [r4, #12]
 8027ab4:	69a2      	ldr	r2, [r4, #24]
 8027ab6:	b102      	cbz	r2, 8027aba <_scanf_chars+0xa2>
 8027ab8:	7033      	strb	r3, [r6, #0]
 8027aba:	6923      	ldr	r3, [r4, #16]
 8027abc:	441f      	add	r7, r3
 8027abe:	6127      	str	r7, [r4, #16]
 8027ac0:	2000      	movs	r0, #0
 8027ac2:	e7cb      	b.n	8027a5c <_scanf_chars+0x44>
 8027ac4:	080337ff 	.word	0x080337ff

08027ac8 <_scanf_i>:
 8027ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027acc:	4698      	mov	r8, r3
 8027ace:	4b74      	ldr	r3, [pc, #464]	; (8027ca0 <_scanf_i+0x1d8>)
 8027ad0:	460c      	mov	r4, r1
 8027ad2:	4682      	mov	sl, r0
 8027ad4:	4616      	mov	r6, r2
 8027ad6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8027ada:	b087      	sub	sp, #28
 8027adc:	ab03      	add	r3, sp, #12
 8027ade:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8027ae2:	4b70      	ldr	r3, [pc, #448]	; (8027ca4 <_scanf_i+0x1dc>)
 8027ae4:	69a1      	ldr	r1, [r4, #24]
 8027ae6:	4a70      	ldr	r2, [pc, #448]	; (8027ca8 <_scanf_i+0x1e0>)
 8027ae8:	2903      	cmp	r1, #3
 8027aea:	bf18      	it	ne
 8027aec:	461a      	movne	r2, r3
 8027aee:	68a3      	ldr	r3, [r4, #8]
 8027af0:	9201      	str	r2, [sp, #4]
 8027af2:	1e5a      	subs	r2, r3, #1
 8027af4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8027af8:	bf88      	it	hi
 8027afa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8027afe:	4627      	mov	r7, r4
 8027b00:	bf82      	ittt	hi
 8027b02:	eb03 0905 	addhi.w	r9, r3, r5
 8027b06:	f240 135d 	movwhi	r3, #349	; 0x15d
 8027b0a:	60a3      	strhi	r3, [r4, #8]
 8027b0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8027b10:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8027b14:	bf98      	it	ls
 8027b16:	f04f 0900 	movls.w	r9, #0
 8027b1a:	6023      	str	r3, [r4, #0]
 8027b1c:	463d      	mov	r5, r7
 8027b1e:	f04f 0b00 	mov.w	fp, #0
 8027b22:	6831      	ldr	r1, [r6, #0]
 8027b24:	ab03      	add	r3, sp, #12
 8027b26:	7809      	ldrb	r1, [r1, #0]
 8027b28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8027b2c:	2202      	movs	r2, #2
 8027b2e:	f7d8 fb67 	bl	8000200 <memchr>
 8027b32:	b328      	cbz	r0, 8027b80 <_scanf_i+0xb8>
 8027b34:	f1bb 0f01 	cmp.w	fp, #1
 8027b38:	d159      	bne.n	8027bee <_scanf_i+0x126>
 8027b3a:	6862      	ldr	r2, [r4, #4]
 8027b3c:	b92a      	cbnz	r2, 8027b4a <_scanf_i+0x82>
 8027b3e:	6822      	ldr	r2, [r4, #0]
 8027b40:	2308      	movs	r3, #8
 8027b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8027b46:	6063      	str	r3, [r4, #4]
 8027b48:	6022      	str	r2, [r4, #0]
 8027b4a:	6822      	ldr	r2, [r4, #0]
 8027b4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8027b50:	6022      	str	r2, [r4, #0]
 8027b52:	68a2      	ldr	r2, [r4, #8]
 8027b54:	1e51      	subs	r1, r2, #1
 8027b56:	60a1      	str	r1, [r4, #8]
 8027b58:	b192      	cbz	r2, 8027b80 <_scanf_i+0xb8>
 8027b5a:	6832      	ldr	r2, [r6, #0]
 8027b5c:	1c51      	adds	r1, r2, #1
 8027b5e:	6031      	str	r1, [r6, #0]
 8027b60:	7812      	ldrb	r2, [r2, #0]
 8027b62:	f805 2b01 	strb.w	r2, [r5], #1
 8027b66:	6872      	ldr	r2, [r6, #4]
 8027b68:	3a01      	subs	r2, #1
 8027b6a:	2a00      	cmp	r2, #0
 8027b6c:	6072      	str	r2, [r6, #4]
 8027b6e:	dc07      	bgt.n	8027b80 <_scanf_i+0xb8>
 8027b70:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8027b74:	4631      	mov	r1, r6
 8027b76:	4650      	mov	r0, sl
 8027b78:	4790      	blx	r2
 8027b7a:	2800      	cmp	r0, #0
 8027b7c:	f040 8085 	bne.w	8027c8a <_scanf_i+0x1c2>
 8027b80:	f10b 0b01 	add.w	fp, fp, #1
 8027b84:	f1bb 0f03 	cmp.w	fp, #3
 8027b88:	d1cb      	bne.n	8027b22 <_scanf_i+0x5a>
 8027b8a:	6863      	ldr	r3, [r4, #4]
 8027b8c:	b90b      	cbnz	r3, 8027b92 <_scanf_i+0xca>
 8027b8e:	230a      	movs	r3, #10
 8027b90:	6063      	str	r3, [r4, #4]
 8027b92:	6863      	ldr	r3, [r4, #4]
 8027b94:	4945      	ldr	r1, [pc, #276]	; (8027cac <_scanf_i+0x1e4>)
 8027b96:	6960      	ldr	r0, [r4, #20]
 8027b98:	1ac9      	subs	r1, r1, r3
 8027b9a:	f000 f919 	bl	8027dd0 <__sccl>
 8027b9e:	f04f 0b00 	mov.w	fp, #0
 8027ba2:	68a3      	ldr	r3, [r4, #8]
 8027ba4:	6822      	ldr	r2, [r4, #0]
 8027ba6:	2b00      	cmp	r3, #0
 8027ba8:	d03d      	beq.n	8027c26 <_scanf_i+0x15e>
 8027baa:	6831      	ldr	r1, [r6, #0]
 8027bac:	6960      	ldr	r0, [r4, #20]
 8027bae:	f891 c000 	ldrb.w	ip, [r1]
 8027bb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8027bb6:	2800      	cmp	r0, #0
 8027bb8:	d035      	beq.n	8027c26 <_scanf_i+0x15e>
 8027bba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8027bbe:	d124      	bne.n	8027c0a <_scanf_i+0x142>
 8027bc0:	0510      	lsls	r0, r2, #20
 8027bc2:	d522      	bpl.n	8027c0a <_scanf_i+0x142>
 8027bc4:	f10b 0b01 	add.w	fp, fp, #1
 8027bc8:	f1b9 0f00 	cmp.w	r9, #0
 8027bcc:	d003      	beq.n	8027bd6 <_scanf_i+0x10e>
 8027bce:	3301      	adds	r3, #1
 8027bd0:	f109 39ff 	add.w	r9, r9, #4294967295
 8027bd4:	60a3      	str	r3, [r4, #8]
 8027bd6:	6873      	ldr	r3, [r6, #4]
 8027bd8:	3b01      	subs	r3, #1
 8027bda:	2b00      	cmp	r3, #0
 8027bdc:	6073      	str	r3, [r6, #4]
 8027bde:	dd1b      	ble.n	8027c18 <_scanf_i+0x150>
 8027be0:	6833      	ldr	r3, [r6, #0]
 8027be2:	3301      	adds	r3, #1
 8027be4:	6033      	str	r3, [r6, #0]
 8027be6:	68a3      	ldr	r3, [r4, #8]
 8027be8:	3b01      	subs	r3, #1
 8027bea:	60a3      	str	r3, [r4, #8]
 8027bec:	e7d9      	b.n	8027ba2 <_scanf_i+0xda>
 8027bee:	f1bb 0f02 	cmp.w	fp, #2
 8027bf2:	d1ae      	bne.n	8027b52 <_scanf_i+0x8a>
 8027bf4:	6822      	ldr	r2, [r4, #0]
 8027bf6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8027bfa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8027bfe:	d1bf      	bne.n	8027b80 <_scanf_i+0xb8>
 8027c00:	2310      	movs	r3, #16
 8027c02:	6063      	str	r3, [r4, #4]
 8027c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8027c08:	e7a2      	b.n	8027b50 <_scanf_i+0x88>
 8027c0a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8027c0e:	6022      	str	r2, [r4, #0]
 8027c10:	780b      	ldrb	r3, [r1, #0]
 8027c12:	f805 3b01 	strb.w	r3, [r5], #1
 8027c16:	e7de      	b.n	8027bd6 <_scanf_i+0x10e>
 8027c18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027c1c:	4631      	mov	r1, r6
 8027c1e:	4650      	mov	r0, sl
 8027c20:	4798      	blx	r3
 8027c22:	2800      	cmp	r0, #0
 8027c24:	d0df      	beq.n	8027be6 <_scanf_i+0x11e>
 8027c26:	6823      	ldr	r3, [r4, #0]
 8027c28:	05d9      	lsls	r1, r3, #23
 8027c2a:	d50d      	bpl.n	8027c48 <_scanf_i+0x180>
 8027c2c:	42bd      	cmp	r5, r7
 8027c2e:	d909      	bls.n	8027c44 <_scanf_i+0x17c>
 8027c30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8027c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027c38:	4632      	mov	r2, r6
 8027c3a:	4650      	mov	r0, sl
 8027c3c:	4798      	blx	r3
 8027c3e:	f105 39ff 	add.w	r9, r5, #4294967295
 8027c42:	464d      	mov	r5, r9
 8027c44:	42bd      	cmp	r5, r7
 8027c46:	d028      	beq.n	8027c9a <_scanf_i+0x1d2>
 8027c48:	6822      	ldr	r2, [r4, #0]
 8027c4a:	f012 0210 	ands.w	r2, r2, #16
 8027c4e:	d113      	bne.n	8027c78 <_scanf_i+0x1b0>
 8027c50:	702a      	strb	r2, [r5, #0]
 8027c52:	6863      	ldr	r3, [r4, #4]
 8027c54:	9e01      	ldr	r6, [sp, #4]
 8027c56:	4639      	mov	r1, r7
 8027c58:	4650      	mov	r0, sl
 8027c5a:	47b0      	blx	r6
 8027c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8027c60:	6821      	ldr	r1, [r4, #0]
 8027c62:	1d1a      	adds	r2, r3, #4
 8027c64:	f8c8 2000 	str.w	r2, [r8]
 8027c68:	f011 0f20 	tst.w	r1, #32
 8027c6c:	681b      	ldr	r3, [r3, #0]
 8027c6e:	d00f      	beq.n	8027c90 <_scanf_i+0x1c8>
 8027c70:	6018      	str	r0, [r3, #0]
 8027c72:	68e3      	ldr	r3, [r4, #12]
 8027c74:	3301      	adds	r3, #1
 8027c76:	60e3      	str	r3, [r4, #12]
 8027c78:	1bed      	subs	r5, r5, r7
 8027c7a:	44ab      	add	fp, r5
 8027c7c:	6925      	ldr	r5, [r4, #16]
 8027c7e:	445d      	add	r5, fp
 8027c80:	6125      	str	r5, [r4, #16]
 8027c82:	2000      	movs	r0, #0
 8027c84:	b007      	add	sp, #28
 8027c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c8a:	f04f 0b00 	mov.w	fp, #0
 8027c8e:	e7ca      	b.n	8027c26 <_scanf_i+0x15e>
 8027c90:	07ca      	lsls	r2, r1, #31
 8027c92:	bf4c      	ite	mi
 8027c94:	8018      	strhmi	r0, [r3, #0]
 8027c96:	6018      	strpl	r0, [r3, #0]
 8027c98:	e7eb      	b.n	8027c72 <_scanf_i+0x1aa>
 8027c9a:	2001      	movs	r0, #1
 8027c9c:	e7f2      	b.n	8027c84 <_scanf_i+0x1bc>
 8027c9e:	bf00      	nop
 8027ca0:	0802d728 	.word	0x0802d728
 8027ca4:	08027f3d 	.word	0x08027f3d
 8027ca8:	080248fd 	.word	0x080248fd
 8027cac:	08033eda 	.word	0x08033eda

08027cb0 <_putc_r>:
 8027cb0:	b570      	push	{r4, r5, r6, lr}
 8027cb2:	460d      	mov	r5, r1
 8027cb4:	4614      	mov	r4, r2
 8027cb6:	4606      	mov	r6, r0
 8027cb8:	b118      	cbz	r0, 8027cc2 <_putc_r+0x12>
 8027cba:	6983      	ldr	r3, [r0, #24]
 8027cbc:	b90b      	cbnz	r3, 8027cc2 <_putc_r+0x12>
 8027cbe:	f7fe f953 	bl	8025f68 <__sinit>
 8027cc2:	4b1c      	ldr	r3, [pc, #112]	; (8027d34 <_putc_r+0x84>)
 8027cc4:	429c      	cmp	r4, r3
 8027cc6:	d124      	bne.n	8027d12 <_putc_r+0x62>
 8027cc8:	6874      	ldr	r4, [r6, #4]
 8027cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027ccc:	07d8      	lsls	r0, r3, #31
 8027cce:	d405      	bmi.n	8027cdc <_putc_r+0x2c>
 8027cd0:	89a3      	ldrh	r3, [r4, #12]
 8027cd2:	0599      	lsls	r1, r3, #22
 8027cd4:	d402      	bmi.n	8027cdc <_putc_r+0x2c>
 8027cd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027cd8:	f7fe fdf8 	bl	80268cc <__retarget_lock_acquire_recursive>
 8027cdc:	68a3      	ldr	r3, [r4, #8]
 8027cde:	3b01      	subs	r3, #1
 8027ce0:	2b00      	cmp	r3, #0
 8027ce2:	60a3      	str	r3, [r4, #8]
 8027ce4:	da05      	bge.n	8027cf2 <_putc_r+0x42>
 8027ce6:	69a2      	ldr	r2, [r4, #24]
 8027ce8:	4293      	cmp	r3, r2
 8027cea:	db1c      	blt.n	8027d26 <_putc_r+0x76>
 8027cec:	b2eb      	uxtb	r3, r5
 8027cee:	2b0a      	cmp	r3, #10
 8027cf0:	d019      	beq.n	8027d26 <_putc_r+0x76>
 8027cf2:	6823      	ldr	r3, [r4, #0]
 8027cf4:	1c5a      	adds	r2, r3, #1
 8027cf6:	6022      	str	r2, [r4, #0]
 8027cf8:	701d      	strb	r5, [r3, #0]
 8027cfa:	b2ed      	uxtb	r5, r5
 8027cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027cfe:	07da      	lsls	r2, r3, #31
 8027d00:	d405      	bmi.n	8027d0e <_putc_r+0x5e>
 8027d02:	89a3      	ldrh	r3, [r4, #12]
 8027d04:	059b      	lsls	r3, r3, #22
 8027d06:	d402      	bmi.n	8027d0e <_putc_r+0x5e>
 8027d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027d0a:	f7fe fde1 	bl	80268d0 <__retarget_lock_release_recursive>
 8027d0e:	4628      	mov	r0, r5
 8027d10:	bd70      	pop	{r4, r5, r6, pc}
 8027d12:	4b09      	ldr	r3, [pc, #36]	; (8027d38 <_putc_r+0x88>)
 8027d14:	429c      	cmp	r4, r3
 8027d16:	d101      	bne.n	8027d1c <_putc_r+0x6c>
 8027d18:	68b4      	ldr	r4, [r6, #8]
 8027d1a:	e7d6      	b.n	8027cca <_putc_r+0x1a>
 8027d1c:	4b07      	ldr	r3, [pc, #28]	; (8027d3c <_putc_r+0x8c>)
 8027d1e:	429c      	cmp	r4, r3
 8027d20:	bf08      	it	eq
 8027d22:	68f4      	ldreq	r4, [r6, #12]
 8027d24:	e7d1      	b.n	8027cca <_putc_r+0x1a>
 8027d26:	4629      	mov	r1, r5
 8027d28:	4622      	mov	r2, r4
 8027d2a:	4630      	mov	r0, r6
 8027d2c:	f7fd f862 	bl	8024df4 <__swbuf_r>
 8027d30:	4605      	mov	r5, r0
 8027d32:	e7e3      	b.n	8027cfc <_putc_r+0x4c>
 8027d34:	08033c48 	.word	0x08033c48
 8027d38:	08033c68 	.word	0x08033c68
 8027d3c:	08033c28 	.word	0x08033c28

08027d40 <_read_r>:
 8027d40:	b538      	push	{r3, r4, r5, lr}
 8027d42:	4d07      	ldr	r5, [pc, #28]	; (8027d60 <_read_r+0x20>)
 8027d44:	4604      	mov	r4, r0
 8027d46:	4608      	mov	r0, r1
 8027d48:	4611      	mov	r1, r2
 8027d4a:	2200      	movs	r2, #0
 8027d4c:	602a      	str	r2, [r5, #0]
 8027d4e:	461a      	mov	r2, r3
 8027d50:	f7dc f9e1 	bl	8004116 <_read>
 8027d54:	1c43      	adds	r3, r0, #1
 8027d56:	d102      	bne.n	8027d5e <_read_r+0x1e>
 8027d58:	682b      	ldr	r3, [r5, #0]
 8027d5a:	b103      	cbz	r3, 8027d5e <_read_r+0x1e>
 8027d5c:	6023      	str	r3, [r4, #0]
 8027d5e:	bd38      	pop	{r3, r4, r5, pc}
 8027d60:	20001a28 	.word	0x20001a28

08027d64 <__srget_r>:
 8027d64:	b538      	push	{r3, r4, r5, lr}
 8027d66:	460c      	mov	r4, r1
 8027d68:	4605      	mov	r5, r0
 8027d6a:	b118      	cbz	r0, 8027d74 <__srget_r+0x10>
 8027d6c:	6983      	ldr	r3, [r0, #24]
 8027d6e:	b90b      	cbnz	r3, 8027d74 <__srget_r+0x10>
 8027d70:	f7fe f8fa 	bl	8025f68 <__sinit>
 8027d74:	4b0e      	ldr	r3, [pc, #56]	; (8027db0 <__srget_r+0x4c>)
 8027d76:	429c      	cmp	r4, r3
 8027d78:	d10d      	bne.n	8027d96 <__srget_r+0x32>
 8027d7a:	686c      	ldr	r4, [r5, #4]
 8027d7c:	4621      	mov	r1, r4
 8027d7e:	4628      	mov	r0, r5
 8027d80:	f000 f976 	bl	8028070 <__srefill_r>
 8027d84:	b988      	cbnz	r0, 8027daa <__srget_r+0x46>
 8027d86:	6863      	ldr	r3, [r4, #4]
 8027d88:	3b01      	subs	r3, #1
 8027d8a:	6063      	str	r3, [r4, #4]
 8027d8c:	6823      	ldr	r3, [r4, #0]
 8027d8e:	1c5a      	adds	r2, r3, #1
 8027d90:	6022      	str	r2, [r4, #0]
 8027d92:	7818      	ldrb	r0, [r3, #0]
 8027d94:	bd38      	pop	{r3, r4, r5, pc}
 8027d96:	4b07      	ldr	r3, [pc, #28]	; (8027db4 <__srget_r+0x50>)
 8027d98:	429c      	cmp	r4, r3
 8027d9a:	d101      	bne.n	8027da0 <__srget_r+0x3c>
 8027d9c:	68ac      	ldr	r4, [r5, #8]
 8027d9e:	e7ed      	b.n	8027d7c <__srget_r+0x18>
 8027da0:	4b05      	ldr	r3, [pc, #20]	; (8027db8 <__srget_r+0x54>)
 8027da2:	429c      	cmp	r4, r3
 8027da4:	bf08      	it	eq
 8027da6:	68ec      	ldreq	r4, [r5, #12]
 8027da8:	e7e8      	b.n	8027d7c <__srget_r+0x18>
 8027daa:	f04f 30ff 	mov.w	r0, #4294967295
 8027dae:	e7f1      	b.n	8027d94 <__srget_r+0x30>
 8027db0:	08033c48 	.word	0x08033c48
 8027db4:	08033c68 	.word	0x08033c68
 8027db8:	08033c28 	.word	0x08033c28
 8027dbc:	00000000 	.word	0x00000000

08027dc0 <nan>:
 8027dc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8027dc8 <nan+0x8>
 8027dc4:	4770      	bx	lr
 8027dc6:	bf00      	nop
 8027dc8:	00000000 	.word	0x00000000
 8027dcc:	7ff80000 	.word	0x7ff80000

08027dd0 <__sccl>:
 8027dd0:	b570      	push	{r4, r5, r6, lr}
 8027dd2:	780b      	ldrb	r3, [r1, #0]
 8027dd4:	4604      	mov	r4, r0
 8027dd6:	2b5e      	cmp	r3, #94	; 0x5e
 8027dd8:	bf0b      	itete	eq
 8027dda:	784b      	ldrbeq	r3, [r1, #1]
 8027ddc:	1c48      	addne	r0, r1, #1
 8027dde:	1c88      	addeq	r0, r1, #2
 8027de0:	2200      	movne	r2, #0
 8027de2:	bf08      	it	eq
 8027de4:	2201      	moveq	r2, #1
 8027de6:	1e61      	subs	r1, r4, #1
 8027de8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8027dec:	f801 2f01 	strb.w	r2, [r1, #1]!
 8027df0:	42a9      	cmp	r1, r5
 8027df2:	d1fb      	bne.n	8027dec <__sccl+0x1c>
 8027df4:	b90b      	cbnz	r3, 8027dfa <__sccl+0x2a>
 8027df6:	3801      	subs	r0, #1
 8027df8:	bd70      	pop	{r4, r5, r6, pc}
 8027dfa:	f082 0101 	eor.w	r1, r2, #1
 8027dfe:	54e1      	strb	r1, [r4, r3]
 8027e00:	1c42      	adds	r2, r0, #1
 8027e02:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8027e06:	2d2d      	cmp	r5, #45	; 0x2d
 8027e08:	f102 36ff 	add.w	r6, r2, #4294967295
 8027e0c:	4610      	mov	r0, r2
 8027e0e:	d006      	beq.n	8027e1e <__sccl+0x4e>
 8027e10:	2d5d      	cmp	r5, #93	; 0x5d
 8027e12:	d0f1      	beq.n	8027df8 <__sccl+0x28>
 8027e14:	b90d      	cbnz	r5, 8027e1a <__sccl+0x4a>
 8027e16:	4630      	mov	r0, r6
 8027e18:	e7ee      	b.n	8027df8 <__sccl+0x28>
 8027e1a:	462b      	mov	r3, r5
 8027e1c:	e7ef      	b.n	8027dfe <__sccl+0x2e>
 8027e1e:	7816      	ldrb	r6, [r2, #0]
 8027e20:	2e5d      	cmp	r6, #93	; 0x5d
 8027e22:	d0fa      	beq.n	8027e1a <__sccl+0x4a>
 8027e24:	42b3      	cmp	r3, r6
 8027e26:	dcf8      	bgt.n	8027e1a <__sccl+0x4a>
 8027e28:	4618      	mov	r0, r3
 8027e2a:	3001      	adds	r0, #1
 8027e2c:	4286      	cmp	r6, r0
 8027e2e:	5421      	strb	r1, [r4, r0]
 8027e30:	dcfb      	bgt.n	8027e2a <__sccl+0x5a>
 8027e32:	43d8      	mvns	r0, r3
 8027e34:	4430      	add	r0, r6
 8027e36:	1c5d      	adds	r5, r3, #1
 8027e38:	42b3      	cmp	r3, r6
 8027e3a:	bfa8      	it	ge
 8027e3c:	2000      	movge	r0, #0
 8027e3e:	182b      	adds	r3, r5, r0
 8027e40:	3202      	adds	r2, #2
 8027e42:	e7de      	b.n	8027e02 <__sccl+0x32>

08027e44 <_strtoul_l.isra.0>:
 8027e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027e48:	4e3b      	ldr	r6, [pc, #236]	; (8027f38 <_strtoul_l.isra.0+0xf4>)
 8027e4a:	4686      	mov	lr, r0
 8027e4c:	468c      	mov	ip, r1
 8027e4e:	4660      	mov	r0, ip
 8027e50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8027e54:	5da5      	ldrb	r5, [r4, r6]
 8027e56:	f015 0508 	ands.w	r5, r5, #8
 8027e5a:	d1f8      	bne.n	8027e4e <_strtoul_l.isra.0+0xa>
 8027e5c:	2c2d      	cmp	r4, #45	; 0x2d
 8027e5e:	d134      	bne.n	8027eca <_strtoul_l.isra.0+0x86>
 8027e60:	f89c 4000 	ldrb.w	r4, [ip]
 8027e64:	f04f 0801 	mov.w	r8, #1
 8027e68:	f100 0c02 	add.w	ip, r0, #2
 8027e6c:	2b00      	cmp	r3, #0
 8027e6e:	d05e      	beq.n	8027f2e <_strtoul_l.isra.0+0xea>
 8027e70:	2b10      	cmp	r3, #16
 8027e72:	d10c      	bne.n	8027e8e <_strtoul_l.isra.0+0x4a>
 8027e74:	2c30      	cmp	r4, #48	; 0x30
 8027e76:	d10a      	bne.n	8027e8e <_strtoul_l.isra.0+0x4a>
 8027e78:	f89c 0000 	ldrb.w	r0, [ip]
 8027e7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8027e80:	2858      	cmp	r0, #88	; 0x58
 8027e82:	d14f      	bne.n	8027f24 <_strtoul_l.isra.0+0xe0>
 8027e84:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8027e88:	2310      	movs	r3, #16
 8027e8a:	f10c 0c02 	add.w	ip, ip, #2
 8027e8e:	f04f 37ff 	mov.w	r7, #4294967295
 8027e92:	2500      	movs	r5, #0
 8027e94:	fbb7 f7f3 	udiv	r7, r7, r3
 8027e98:	fb03 f907 	mul.w	r9, r3, r7
 8027e9c:	ea6f 0909 	mvn.w	r9, r9
 8027ea0:	4628      	mov	r0, r5
 8027ea2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8027ea6:	2e09      	cmp	r6, #9
 8027ea8:	d818      	bhi.n	8027edc <_strtoul_l.isra.0+0x98>
 8027eaa:	4634      	mov	r4, r6
 8027eac:	42a3      	cmp	r3, r4
 8027eae:	dd24      	ble.n	8027efa <_strtoul_l.isra.0+0xb6>
 8027eb0:	2d00      	cmp	r5, #0
 8027eb2:	db1f      	blt.n	8027ef4 <_strtoul_l.isra.0+0xb0>
 8027eb4:	4287      	cmp	r7, r0
 8027eb6:	d31d      	bcc.n	8027ef4 <_strtoul_l.isra.0+0xb0>
 8027eb8:	d101      	bne.n	8027ebe <_strtoul_l.isra.0+0x7a>
 8027eba:	45a1      	cmp	r9, r4
 8027ebc:	db1a      	blt.n	8027ef4 <_strtoul_l.isra.0+0xb0>
 8027ebe:	fb00 4003 	mla	r0, r0, r3, r4
 8027ec2:	2501      	movs	r5, #1
 8027ec4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8027ec8:	e7eb      	b.n	8027ea2 <_strtoul_l.isra.0+0x5e>
 8027eca:	2c2b      	cmp	r4, #43	; 0x2b
 8027ecc:	bf08      	it	eq
 8027ece:	f89c 4000 	ldrbeq.w	r4, [ip]
 8027ed2:	46a8      	mov	r8, r5
 8027ed4:	bf08      	it	eq
 8027ed6:	f100 0c02 	addeq.w	ip, r0, #2
 8027eda:	e7c7      	b.n	8027e6c <_strtoul_l.isra.0+0x28>
 8027edc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8027ee0:	2e19      	cmp	r6, #25
 8027ee2:	d801      	bhi.n	8027ee8 <_strtoul_l.isra.0+0xa4>
 8027ee4:	3c37      	subs	r4, #55	; 0x37
 8027ee6:	e7e1      	b.n	8027eac <_strtoul_l.isra.0+0x68>
 8027ee8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8027eec:	2e19      	cmp	r6, #25
 8027eee:	d804      	bhi.n	8027efa <_strtoul_l.isra.0+0xb6>
 8027ef0:	3c57      	subs	r4, #87	; 0x57
 8027ef2:	e7db      	b.n	8027eac <_strtoul_l.isra.0+0x68>
 8027ef4:	f04f 35ff 	mov.w	r5, #4294967295
 8027ef8:	e7e4      	b.n	8027ec4 <_strtoul_l.isra.0+0x80>
 8027efa:	2d00      	cmp	r5, #0
 8027efc:	da07      	bge.n	8027f0e <_strtoul_l.isra.0+0xca>
 8027efe:	2322      	movs	r3, #34	; 0x22
 8027f00:	f8ce 3000 	str.w	r3, [lr]
 8027f04:	f04f 30ff 	mov.w	r0, #4294967295
 8027f08:	b942      	cbnz	r2, 8027f1c <_strtoul_l.isra.0+0xd8>
 8027f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027f0e:	f1b8 0f00 	cmp.w	r8, #0
 8027f12:	d000      	beq.n	8027f16 <_strtoul_l.isra.0+0xd2>
 8027f14:	4240      	negs	r0, r0
 8027f16:	2a00      	cmp	r2, #0
 8027f18:	d0f7      	beq.n	8027f0a <_strtoul_l.isra.0+0xc6>
 8027f1a:	b10d      	cbz	r5, 8027f20 <_strtoul_l.isra.0+0xdc>
 8027f1c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8027f20:	6011      	str	r1, [r2, #0]
 8027f22:	e7f2      	b.n	8027f0a <_strtoul_l.isra.0+0xc6>
 8027f24:	2430      	movs	r4, #48	; 0x30
 8027f26:	2b00      	cmp	r3, #0
 8027f28:	d1b1      	bne.n	8027e8e <_strtoul_l.isra.0+0x4a>
 8027f2a:	2308      	movs	r3, #8
 8027f2c:	e7af      	b.n	8027e8e <_strtoul_l.isra.0+0x4a>
 8027f2e:	2c30      	cmp	r4, #48	; 0x30
 8027f30:	d0a2      	beq.n	8027e78 <_strtoul_l.isra.0+0x34>
 8027f32:	230a      	movs	r3, #10
 8027f34:	e7ab      	b.n	8027e8e <_strtoul_l.isra.0+0x4a>
 8027f36:	bf00      	nop
 8027f38:	080337ff 	.word	0x080337ff

08027f3c <_strtoul_r>:
 8027f3c:	f7ff bf82 	b.w	8027e44 <_strtoul_l.isra.0>

08027f40 <strtoul>:
 8027f40:	4613      	mov	r3, r2
 8027f42:	460a      	mov	r2, r1
 8027f44:	4601      	mov	r1, r0
 8027f46:	4802      	ldr	r0, [pc, #8]	; (8027f50 <strtoul+0x10>)
 8027f48:	6800      	ldr	r0, [r0, #0]
 8027f4a:	f7ff bf7b 	b.w	8027e44 <_strtoul_l.isra.0>
 8027f4e:	bf00      	nop
 8027f50:	200005e4 	.word	0x200005e4

08027f54 <__submore>:
 8027f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027f58:	460c      	mov	r4, r1
 8027f5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8027f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027f60:	4299      	cmp	r1, r3
 8027f62:	d11d      	bne.n	8027fa0 <__submore+0x4c>
 8027f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8027f68:	f7fa fd98 	bl	8022a9c <_malloc_r>
 8027f6c:	b918      	cbnz	r0, 8027f76 <__submore+0x22>
 8027f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8027f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027f7a:	63a3      	str	r3, [r4, #56]	; 0x38
 8027f7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8027f80:	6360      	str	r0, [r4, #52]	; 0x34
 8027f82:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8027f86:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8027f8a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8027f8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8027f92:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8027f96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8027f9a:	6020      	str	r0, [r4, #0]
 8027f9c:	2000      	movs	r0, #0
 8027f9e:	e7e8      	b.n	8027f72 <__submore+0x1e>
 8027fa0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8027fa2:	0077      	lsls	r7, r6, #1
 8027fa4:	463a      	mov	r2, r7
 8027fa6:	f7ff f9e4 	bl	8027372 <_realloc_r>
 8027faa:	4605      	mov	r5, r0
 8027fac:	2800      	cmp	r0, #0
 8027fae:	d0de      	beq.n	8027f6e <__submore+0x1a>
 8027fb0:	eb00 0806 	add.w	r8, r0, r6
 8027fb4:	4601      	mov	r1, r0
 8027fb6:	4632      	mov	r2, r6
 8027fb8:	4640      	mov	r0, r8
 8027fba:	f7fa fa61 	bl	8022480 <memcpy>
 8027fbe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8027fc2:	f8c4 8000 	str.w	r8, [r4]
 8027fc6:	e7e9      	b.n	8027f9c <__submore+0x48>

08027fc8 <__ascii_wctomb>:
 8027fc8:	b149      	cbz	r1, 8027fde <__ascii_wctomb+0x16>
 8027fca:	2aff      	cmp	r2, #255	; 0xff
 8027fcc:	bf85      	ittet	hi
 8027fce:	238a      	movhi	r3, #138	; 0x8a
 8027fd0:	6003      	strhi	r3, [r0, #0]
 8027fd2:	700a      	strbls	r2, [r1, #0]
 8027fd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8027fd8:	bf98      	it	ls
 8027fda:	2001      	movls	r0, #1
 8027fdc:	4770      	bx	lr
 8027fde:	4608      	mov	r0, r1
 8027fe0:	4770      	bx	lr

08027fe2 <abort>:
 8027fe2:	b508      	push	{r3, lr}
 8027fe4:	2006      	movs	r0, #6
 8027fe6:	f000 f8f5 	bl	80281d4 <raise>
 8027fea:	2001      	movs	r0, #1
 8027fec:	f7dc f88d 	bl	800410a <_exit>

08027ff0 <__env_lock>:
 8027ff0:	4801      	ldr	r0, [pc, #4]	; (8027ff8 <__env_lock+0x8>)
 8027ff2:	f7fe bc6b 	b.w	80268cc <__retarget_lock_acquire_recursive>
 8027ff6:	bf00      	nop
 8027ff8:	20001a1e 	.word	0x20001a1e

08027ffc <__env_unlock>:
 8027ffc:	4801      	ldr	r0, [pc, #4]	; (8028004 <__env_unlock+0x8>)
 8027ffe:	f7fe bc67 	b.w	80268d0 <__retarget_lock_release_recursive>
 8028002:	bf00      	nop
 8028004:	20001a1e 	.word	0x20001a1e

08028008 <_fstat_r>:
 8028008:	b538      	push	{r3, r4, r5, lr}
 802800a:	4d07      	ldr	r5, [pc, #28]	; (8028028 <_fstat_r+0x20>)
 802800c:	2300      	movs	r3, #0
 802800e:	4604      	mov	r4, r0
 8028010:	4608      	mov	r0, r1
 8028012:	4611      	mov	r1, r2
 8028014:	602b      	str	r3, [r5, #0]
 8028016:	f7dc f8b0 	bl	800417a <_fstat>
 802801a:	1c43      	adds	r3, r0, #1
 802801c:	d102      	bne.n	8028024 <_fstat_r+0x1c>
 802801e:	682b      	ldr	r3, [r5, #0]
 8028020:	b103      	cbz	r3, 8028024 <_fstat_r+0x1c>
 8028022:	6023      	str	r3, [r4, #0]
 8028024:	bd38      	pop	{r3, r4, r5, pc}
 8028026:	bf00      	nop
 8028028:	20001a28 	.word	0x20001a28

0802802c <_isatty_r>:
 802802c:	b538      	push	{r3, r4, r5, lr}
 802802e:	4d06      	ldr	r5, [pc, #24]	; (8028048 <_isatty_r+0x1c>)
 8028030:	2300      	movs	r3, #0
 8028032:	4604      	mov	r4, r0
 8028034:	4608      	mov	r0, r1
 8028036:	602b      	str	r3, [r5, #0]
 8028038:	f7dc f8a4 	bl	8004184 <_isatty>
 802803c:	1c43      	adds	r3, r0, #1
 802803e:	d102      	bne.n	8028046 <_isatty_r+0x1a>
 8028040:	682b      	ldr	r3, [r5, #0]
 8028042:	b103      	cbz	r3, 8028046 <_isatty_r+0x1a>
 8028044:	6023      	str	r3, [r4, #0]
 8028046:	bd38      	pop	{r3, r4, r5, pc}
 8028048:	20001a28 	.word	0x20001a28

0802804c <_malloc_usable_size_r>:
 802804c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028050:	1f18      	subs	r0, r3, #4
 8028052:	2b00      	cmp	r3, #0
 8028054:	bfbc      	itt	lt
 8028056:	580b      	ldrlt	r3, [r1, r0]
 8028058:	18c0      	addlt	r0, r0, r3
 802805a:	4770      	bx	lr

0802805c <lflush>:
 802805c:	8983      	ldrh	r3, [r0, #12]
 802805e:	f003 0309 	and.w	r3, r3, #9
 8028062:	2b09      	cmp	r3, #9
 8028064:	d101      	bne.n	802806a <lflush+0xe>
 8028066:	f7fd bf15 	b.w	8025e94 <fflush>
 802806a:	2000      	movs	r0, #0
 802806c:	4770      	bx	lr
	...

08028070 <__srefill_r>:
 8028070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028072:	460c      	mov	r4, r1
 8028074:	4605      	mov	r5, r0
 8028076:	b118      	cbz	r0, 8028080 <__srefill_r+0x10>
 8028078:	6983      	ldr	r3, [r0, #24]
 802807a:	b90b      	cbnz	r3, 8028080 <__srefill_r+0x10>
 802807c:	f7fd ff74 	bl	8025f68 <__sinit>
 8028080:	4b3b      	ldr	r3, [pc, #236]	; (8028170 <__srefill_r+0x100>)
 8028082:	429c      	cmp	r4, r3
 8028084:	d10a      	bne.n	802809c <__srefill_r+0x2c>
 8028086:	686c      	ldr	r4, [r5, #4]
 8028088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802808c:	2300      	movs	r3, #0
 802808e:	6063      	str	r3, [r4, #4]
 8028090:	89a3      	ldrh	r3, [r4, #12]
 8028092:	069e      	lsls	r6, r3, #26
 8028094:	d50c      	bpl.n	80280b0 <__srefill_r+0x40>
 8028096:	f04f 30ff 	mov.w	r0, #4294967295
 802809a:	e066      	b.n	802816a <__srefill_r+0xfa>
 802809c:	4b35      	ldr	r3, [pc, #212]	; (8028174 <__srefill_r+0x104>)
 802809e:	429c      	cmp	r4, r3
 80280a0:	d101      	bne.n	80280a6 <__srefill_r+0x36>
 80280a2:	68ac      	ldr	r4, [r5, #8]
 80280a4:	e7f0      	b.n	8028088 <__srefill_r+0x18>
 80280a6:	4b34      	ldr	r3, [pc, #208]	; (8028178 <__srefill_r+0x108>)
 80280a8:	429c      	cmp	r4, r3
 80280aa:	bf08      	it	eq
 80280ac:	68ec      	ldreq	r4, [r5, #12]
 80280ae:	e7eb      	b.n	8028088 <__srefill_r+0x18>
 80280b0:	0758      	lsls	r0, r3, #29
 80280b2:	d448      	bmi.n	8028146 <__srefill_r+0xd6>
 80280b4:	06d9      	lsls	r1, r3, #27
 80280b6:	d405      	bmi.n	80280c4 <__srefill_r+0x54>
 80280b8:	2309      	movs	r3, #9
 80280ba:	602b      	str	r3, [r5, #0]
 80280bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80280c0:	81a3      	strh	r3, [r4, #12]
 80280c2:	e7e8      	b.n	8028096 <__srefill_r+0x26>
 80280c4:	071a      	lsls	r2, r3, #28
 80280c6:	d50b      	bpl.n	80280e0 <__srefill_r+0x70>
 80280c8:	4621      	mov	r1, r4
 80280ca:	4628      	mov	r0, r5
 80280cc:	f7fd fea6 	bl	8025e1c <_fflush_r>
 80280d0:	2800      	cmp	r0, #0
 80280d2:	d1e0      	bne.n	8028096 <__srefill_r+0x26>
 80280d4:	89a3      	ldrh	r3, [r4, #12]
 80280d6:	60a0      	str	r0, [r4, #8]
 80280d8:	f023 0308 	bic.w	r3, r3, #8
 80280dc:	81a3      	strh	r3, [r4, #12]
 80280de:	61a0      	str	r0, [r4, #24]
 80280e0:	89a3      	ldrh	r3, [r4, #12]
 80280e2:	f043 0304 	orr.w	r3, r3, #4
 80280e6:	81a3      	strh	r3, [r4, #12]
 80280e8:	6923      	ldr	r3, [r4, #16]
 80280ea:	b91b      	cbnz	r3, 80280f4 <__srefill_r+0x84>
 80280ec:	4621      	mov	r1, r4
 80280ee:	4628      	mov	r0, r5
 80280f0:	f7fe fc26 	bl	8026940 <__smakebuf_r>
 80280f4:	89a6      	ldrh	r6, [r4, #12]
 80280f6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80280fa:	07b3      	lsls	r3, r6, #30
 80280fc:	d00f      	beq.n	802811e <__srefill_r+0xae>
 80280fe:	2301      	movs	r3, #1
 8028100:	81a3      	strh	r3, [r4, #12]
 8028102:	4b1e      	ldr	r3, [pc, #120]	; (802817c <__srefill_r+0x10c>)
 8028104:	491e      	ldr	r1, [pc, #120]	; (8028180 <__srefill_r+0x110>)
 8028106:	6818      	ldr	r0, [r3, #0]
 8028108:	f006 0609 	and.w	r6, r6, #9
 802810c:	f7fd ffaa 	bl	8026064 <_fwalk>
 8028110:	2e09      	cmp	r6, #9
 8028112:	81a7      	strh	r7, [r4, #12]
 8028114:	d103      	bne.n	802811e <__srefill_r+0xae>
 8028116:	4621      	mov	r1, r4
 8028118:	4628      	mov	r0, r5
 802811a:	f7fd fdf9 	bl	8025d10 <__sflush_r>
 802811e:	6922      	ldr	r2, [r4, #16]
 8028120:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8028122:	6963      	ldr	r3, [r4, #20]
 8028124:	6a21      	ldr	r1, [r4, #32]
 8028126:	6022      	str	r2, [r4, #0]
 8028128:	4628      	mov	r0, r5
 802812a:	47b0      	blx	r6
 802812c:	2800      	cmp	r0, #0
 802812e:	6060      	str	r0, [r4, #4]
 8028130:	dc1c      	bgt.n	802816c <__srefill_r+0xfc>
 8028132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028136:	bf17      	itett	ne
 8028138:	2200      	movne	r2, #0
 802813a:	f043 0320 	orreq.w	r3, r3, #32
 802813e:	6062      	strne	r2, [r4, #4]
 8028140:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8028144:	e7bc      	b.n	80280c0 <__srefill_r+0x50>
 8028146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028148:	2900      	cmp	r1, #0
 802814a:	d0cd      	beq.n	80280e8 <__srefill_r+0x78>
 802814c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028150:	4299      	cmp	r1, r3
 8028152:	d002      	beq.n	802815a <__srefill_r+0xea>
 8028154:	4628      	mov	r0, r5
 8028156:	f7fa fc51 	bl	80229fc <_free_r>
 802815a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802815c:	6063      	str	r3, [r4, #4]
 802815e:	2000      	movs	r0, #0
 8028160:	6360      	str	r0, [r4, #52]	; 0x34
 8028162:	2b00      	cmp	r3, #0
 8028164:	d0c0      	beq.n	80280e8 <__srefill_r+0x78>
 8028166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028168:	6023      	str	r3, [r4, #0]
 802816a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802816c:	2000      	movs	r0, #0
 802816e:	e7fc      	b.n	802816a <__srefill_r+0xfa>
 8028170:	08033c48 	.word	0x08033c48
 8028174:	08033c68 	.word	0x08033c68
 8028178:	08033c28 	.word	0x08033c28
 802817c:	08033978 	.word	0x08033978
 8028180:	0802805d 	.word	0x0802805d

08028184 <_raise_r>:
 8028184:	291f      	cmp	r1, #31
 8028186:	b538      	push	{r3, r4, r5, lr}
 8028188:	4604      	mov	r4, r0
 802818a:	460d      	mov	r5, r1
 802818c:	d904      	bls.n	8028198 <_raise_r+0x14>
 802818e:	2316      	movs	r3, #22
 8028190:	6003      	str	r3, [r0, #0]
 8028192:	f04f 30ff 	mov.w	r0, #4294967295
 8028196:	bd38      	pop	{r3, r4, r5, pc}
 8028198:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802819a:	b112      	cbz	r2, 80281a2 <_raise_r+0x1e>
 802819c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80281a0:	b94b      	cbnz	r3, 80281b6 <_raise_r+0x32>
 80281a2:	4620      	mov	r0, r4
 80281a4:	f000 f830 	bl	8028208 <_getpid_r>
 80281a8:	462a      	mov	r2, r5
 80281aa:	4601      	mov	r1, r0
 80281ac:	4620      	mov	r0, r4
 80281ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80281b2:	f000 b817 	b.w	80281e4 <_kill_r>
 80281b6:	2b01      	cmp	r3, #1
 80281b8:	d00a      	beq.n	80281d0 <_raise_r+0x4c>
 80281ba:	1c59      	adds	r1, r3, #1
 80281bc:	d103      	bne.n	80281c6 <_raise_r+0x42>
 80281be:	2316      	movs	r3, #22
 80281c0:	6003      	str	r3, [r0, #0]
 80281c2:	2001      	movs	r0, #1
 80281c4:	e7e7      	b.n	8028196 <_raise_r+0x12>
 80281c6:	2400      	movs	r4, #0
 80281c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80281cc:	4628      	mov	r0, r5
 80281ce:	4798      	blx	r3
 80281d0:	2000      	movs	r0, #0
 80281d2:	e7e0      	b.n	8028196 <_raise_r+0x12>

080281d4 <raise>:
 80281d4:	4b02      	ldr	r3, [pc, #8]	; (80281e0 <raise+0xc>)
 80281d6:	4601      	mov	r1, r0
 80281d8:	6818      	ldr	r0, [r3, #0]
 80281da:	f7ff bfd3 	b.w	8028184 <_raise_r>
 80281de:	bf00      	nop
 80281e0:	200005e4 	.word	0x200005e4

080281e4 <_kill_r>:
 80281e4:	b538      	push	{r3, r4, r5, lr}
 80281e6:	4d07      	ldr	r5, [pc, #28]	; (8028204 <_kill_r+0x20>)
 80281e8:	2300      	movs	r3, #0
 80281ea:	4604      	mov	r4, r0
 80281ec:	4608      	mov	r0, r1
 80281ee:	4611      	mov	r1, r2
 80281f0:	602b      	str	r3, [r5, #0]
 80281f2:	f7db ff82 	bl	80040fa <_kill>
 80281f6:	1c43      	adds	r3, r0, #1
 80281f8:	d102      	bne.n	8028200 <_kill_r+0x1c>
 80281fa:	682b      	ldr	r3, [r5, #0]
 80281fc:	b103      	cbz	r3, 8028200 <_kill_r+0x1c>
 80281fe:	6023      	str	r3, [r4, #0]
 8028200:	bd38      	pop	{r3, r4, r5, pc}
 8028202:	bf00      	nop
 8028204:	20001a28 	.word	0x20001a28

08028208 <_getpid_r>:
 8028208:	f7db bf75 	b.w	80040f6 <_getpid>

0802820c <_init>:
 802820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802820e:	bf00      	nop
 8028210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028212:	bc08      	pop	{r3}
 8028214:	469e      	mov	lr, r3
 8028216:	4770      	bx	lr

08028218 <_fini>:
 8028218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802821a:	bf00      	nop
 802821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802821e:	bc08      	pop	{r3}
 8028220:	469e      	mov	lr, r3
 8028222:	4770      	bx	lr
 8028224:	0000      	movs	r0, r0
	...
