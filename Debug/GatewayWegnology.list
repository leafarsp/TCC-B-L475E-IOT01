
GatewayWegnology.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010348  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000142e0  080104d8  080104d8  000204d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080247b8  080247b8  00040264  2**0
                  CONTENTS
  4 .ARM          00000008  080247b8  080247b8  000347b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080247c0  080247c0  00040264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080247c0  080247c0  000347c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080247c4  080247c4  000347c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  080247c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008854  20000264  08024a2c  00040264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008ab8  08024a2c  00048ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040021  00000000  00000000  00040294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061a1  00000000  00000000  000802b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002758  00000000  00000000  00086458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024a0  00000000  00000000  00088bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce85  00000000  00000000  0008b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000298f2  00000000  00000000  000b7ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001047cb  00000000  00000000  000e17c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e5f92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5bc  00000000  00000000  001e5fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080104c0 	.word	0x080104c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	080104c0 	.word	0x080104c0

080001d0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001d0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001d2:	2b01      	cmp	r3, #1
	IT       LS
 80001d4:	bf98      	it	ls
	BXLS     lr
 80001d6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001dc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001ee:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001f0:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001f2:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001f4:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001fe:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000204:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000208:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800020c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000210:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800021a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800022c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800022e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000230:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800023a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800023c:	2b01      	cmp	r3, #1
	IT       LS
 800023e:	bf98      	it	ls
	BXLS     lr
 8000240:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000246:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000252:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000270:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000276:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800027a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000282:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000284:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000286:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b96e 	b.w	8000ffc <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8083 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d947      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b142      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	f1c2 0020 	rsb	r0, r2, #32
 8000d58:	fa24 f000 	lsr.w	r0, r4, r0
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4097      	lsls	r7, r2
 8000d60:	ea40 0c01 	orr.w	ip, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d70:	fa1f fe87 	uxth.w	lr, r7
 8000d74:	fb08 c116 	mls	r1, r8, r6, ip
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 8119 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8116 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	f080 8105 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8102 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d150      	bne.n	8000e8c <__udivmoddi4+0x154>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2601      	movs	r6, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f200 80e9 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d9 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7bf      	b.n	8000dce <__udivmoddi4+0x96>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x12e>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80b1 	beq.w	8000fba <__udivmoddi4+0x282>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x140>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80b8 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	468c      	mov	ip, r1
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0a8      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e8a:	e7a5      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f603 	lsr.w	r6, r0, r3
 8000e94:	4097      	lsls	r7, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	4330      	orrs	r0, r6
 8000ea2:	0c03      	lsrs	r3, r0, #16
 8000ea4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea8:	fa1f f887 	uxth.w	r8, r7
 8000eac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb06 f108 	mul.w	r1, r6, r8
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec6:	f080 808d 	bcs.w	8000fe4 <__udivmoddi4+0x2ac>
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	f240 808a 	bls.w	8000fe4 <__udivmoddi4+0x2ac>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	443b      	add	r3, r7
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b281      	uxth	r1, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef2:	d273      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d971      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c6 0c20 	rsb	ip, r6, #32
 8000f08:	fa03 f406 	lsl.w	r4, r3, r6
 8000f0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f10:	431c      	orrs	r4, r3
 8000f12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f22:	431f      	orrs	r7, r3
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fa1f f884 	uxth.w	r8, r4
 8000f2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f36:	fb09 fa08 	mul.w	sl, r9, r8
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f40:	fa00 f306 	lsl.w	r3, r0, r6
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x220>
 8000f46:	1861      	adds	r1, r4, r1
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f4c:	d248      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f4e:	458a      	cmp	sl, r1
 8000f50:	d946      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4421      	add	r1, r4
 8000f58:	eba1 010a 	sub.w	r1, r1, sl
 8000f5c:	b2bf      	uxth	r7, r7
 8000f5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f6a:	fb00 f808 	mul.w	r8, r0, r8
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x24a>
 8000f72:	19e7      	adds	r7, r4, r7
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f78:	d22e      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d92c      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4427      	add	r7, r4
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	eba7 0708 	sub.w	r7, r7, r8
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	454f      	cmp	r7, r9
 8000f90:	46c6      	mov	lr, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	d31a      	bcc.n	8000fcc <__udivmoddi4+0x294>
 8000f96:	d017      	beq.n	8000fc8 <__udivmoddi4+0x290>
 8000f98:	b15d      	cbz	r5, 8000fb2 <__udivmoddi4+0x27a>
 8000f9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000fa2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fac:	40f7      	lsrs	r7, r6
 8000fae:	e9c5 2700 	strd	r2, r7, [r5]
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e70b      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6fd      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fc8:	4543      	cmp	r3, r8
 8000fca:	d2e5      	bcs.n	8000f98 <__udivmoddi4+0x260>
 8000fcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0x260>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e7d2      	b.n	8000f82 <__udivmoddi4+0x24a>
 8000fdc:	4660      	mov	r0, ip
 8000fde:	e78d      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	e7b9      	b.n	8000f58 <__udivmoddi4+0x220>
 8000fe4:	4666      	mov	r6, ip
 8000fe6:	e775      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	e74a      	b.n	8000e82 <__udivmoddi4+0x14a>
 8000fec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff0:	4439      	add	r1, r7
 8000ff2:	e713      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e724      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <Init_Demo>:
 * @brief  Serial message structure definition
 */


uint8_t Init_Demo(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  uint8_t data;

  /* Disable HP filter if needed */
  if (SensorSetting.hp_filter_available == 1)
 8001006:	4b89      	ldr	r3, [pc, #548]	; (800122c <Init_Demo+0x22c>)
 8001008:	7d1b      	ldrb	r3, [r3, #20]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d11a      	bne.n	8001044 <Init_Demo+0x44>
  {
    if (CUSTOM_MOTION_SENSOR_Read_Register(CUSTOM_LSM6DSL_0, LSM6DSL_CTRL8_XL, &data) != BSP_ERROR_NONE)
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	461a      	mov	r2, r3
 8001012:	2117      	movs	r1, #23
 8001014:	2000      	movs	r0, #0
 8001016:	f00a fe57 	bl	800bcc8 <CUSTOM_MOTION_SENSOR_Read_Register>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <Init_Demo+0x24>
    {
      return 0;
 8001020:	2300      	movs	r3, #0
 8001022:	e0fe      	b.n	8001222 <Init_Demo+0x222>
    }

    data &= LSM6DSL_HP_DISABLE;
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f023 0304 	bic.w	r3, r3, #4
 800102a:	b2db      	uxtb	r3, r3
 800102c:	71fb      	strb	r3, [r7, #7]

    if (CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSL_0, LSM6DSL_CTRL8_XL, data) != BSP_ERROR_NONE)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	461a      	mov	r2, r3
 8001032:	2117      	movs	r1, #23
 8001034:	2000      	movs	r0, #0
 8001036:	f00a fe6f 	bl	800bd18 <CUSTOM_MOTION_SENSOR_Write_Register>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <Init_Demo+0x44>
    {
      return 0;
 8001040:	2300      	movs	r3, #0
 8001042:	e0ee      	b.n	8001222 <Init_Demo+0x222>
    }
  }

  /* Turn-on time delay */
  HAL_Delay(40);
 8001044:	2028      	movs	r0, #40	; 0x28
 8001046:	f006 fcff 	bl	8007a48 <HAL_Delay>

  if (Enable_DRDY() == 0)
 800104a:	f000 fb69 	bl	8001720 <Enable_DRDY>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <Init_Demo+0x58>
  {
    return 0;
 8001054:	2300      	movs	r3, #0
 8001056:	e0e4      	b.n	8001222 <Init_Demo+0x222>
  }

  GuiSettings.switch_HP_to_DC_null = 0;
 8001058:	4b75      	ldr	r3, [pc, #468]	; (8001230 <Init_Demo+0x230>)
 800105a:	2200      	movs	r2, #0
 800105c:	705a      	strb	r2, [r3, #1]
  GuiSettings.hp_filter = 0;
 800105e:	4b74      	ldr	r3, [pc, #464]	; (8001230 <Init_Demo+0x230>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
  fftIsEnabled = 0;
 8001064:	4b73      	ldr	r3, [pc, #460]	; (8001234 <Init_Demo+0x234>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]

  /* Set parameters for MotionSP library */
  MotionSP_Parameters.FftSize = FFT_SIZE_DEFAULT;
 800106a:	4b73      	ldr	r3, [pc, #460]	; (8001238 <Init_Demo+0x238>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	801a      	strh	r2, [r3, #0]
  MotionSP_Parameters.tau = TAU_DEFAULT;
 8001072:	4b71      	ldr	r3, [pc, #452]	; (8001238 <Init_Demo+0x238>)
 8001074:	2232      	movs	r2, #50	; 0x32
 8001076:	805a      	strh	r2, [r3, #2]
  MotionSP_Parameters.window = WINDOW_DEFAULT;
 8001078:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <Init_Demo+0x238>)
 800107a:	2201      	movs	r2, #1
 800107c:	809a      	strh	r2, [r3, #4]
  MotionSP_Parameters.td_type = TD_DEFAULT;
 800107e:	4b6e      	ldr	r3, [pc, #440]	; (8001238 <Init_Demo+0x238>)
 8001080:	2202      	movs	r2, #2
 8001082:	825a      	strh	r2, [r3, #18]
  MotionSP_Parameters.tacq = TACQ_DEFAULT;
 8001084:	4b6c      	ldr	r3, [pc, #432]	; (8001238 <Init_Demo+0x238>)
 8001086:	f241 3288 	movw	r2, #5000	; 0x1388
 800108a:	829a      	strh	r2, [r3, #20]

  /* Create circular buffer and initialize result variables */
  AccCircBuffer.Size = MotionSP_Parameters.FftSize;
 800108c:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <Init_Demo+0x238>)
 800108e:	881a      	ldrh	r2, [r3, #0]
 8001090:	4b6a      	ldr	r3, [pc, #424]	; (800123c <Init_Demo+0x23c>)
 8001092:	801a      	strh	r2, [r3, #0]
  AccCircBuffer.IdPos = 0;
 8001094:	4b69      	ldr	r3, [pc, #420]	; (800123c <Init_Demo+0x23c>)
 8001096:	2200      	movs	r2, #0
 8001098:	805a      	strh	r2, [r3, #2]
  AccCircBuffer.Ovf = 0;
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <Init_Demo+0x23c>)
 800109c:	2200      	movs	r2, #0
 800109e:	711a      	strb	r2, [r3, #4]

  SpeedCircBuffer.Size = MotionSP_Parameters.FftSize;
 80010a0:	4b65      	ldr	r3, [pc, #404]	; (8001238 <Init_Demo+0x238>)
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b66      	ldr	r3, [pc, #408]	; (8001240 <Init_Demo+0x240>)
 80010a6:	801a      	strh	r2, [r3, #0]
  SpeedCircBuffer.IdPos = 0;
 80010a8:	4b65      	ldr	r3, [pc, #404]	; (8001240 <Init_Demo+0x240>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	805a      	strh	r2, [r3, #2]
  SpeedCircBuffer.Ovf=0;
 80010ae:	4b64      	ldr	r3, [pc, #400]	; (8001240 <Init_Demo+0x240>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	711a      	strb	r2, [r3, #4]

  magSize = MotionSP_Parameters.FftSize / 2;
 80010b4:	4b60      	ldr	r3, [pc, #384]	; (8001238 <Init_Demo+0x238>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b61      	ldr	r3, [pc, #388]	; (8001244 <Init_Demo+0x244>)
 80010be:	801a      	strh	r2, [r3, #0]

  /* Reset circular buffer for storing accelerometer values */
  memset(AccCircBuffer.Data.AXIS_X, 0x00, (AccCircBuffer.Size) * (sizeof(float)));
 80010c0:	4b5e      	ldr	r3, [pc, #376]	; (800123c <Init_Demo+0x23c>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	461a      	mov	r2, r3
 80010c8:	2100      	movs	r1, #0
 80010ca:	485f      	ldr	r0, [pc, #380]	; (8001248 <Init_Demo+0x248>)
 80010cc:	f00c fc5d 	bl	800d98a <memset>
  memset(AccCircBuffer.Data.AXIS_Y, 0x00, (AccCircBuffer.Size) * (sizeof(float)));
 80010d0:	4b5a      	ldr	r3, [pc, #360]	; (800123c <Init_Demo+0x23c>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	461a      	mov	r2, r3
 80010d8:	2100      	movs	r1, #0
 80010da:	485c      	ldr	r0, [pc, #368]	; (800124c <Init_Demo+0x24c>)
 80010dc:	f00c fc55 	bl	800d98a <memset>
  memset(AccCircBuffer.Data.AXIS_Z, 0x00, (AccCircBuffer.Size) * (sizeof(float)));
 80010e0:	4b56      	ldr	r3, [pc, #344]	; (800123c <Init_Demo+0x23c>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	461a      	mov	r2, r3
 80010e8:	2100      	movs	r1, #0
 80010ea:	4859      	ldr	r0, [pc, #356]	; (8001250 <Init_Demo+0x250>)
 80010ec:	f00c fc4d 	bl	800d98a <memset>

  /* Reset circular buffer for storing accelerometer values */
  memset(SpeedCircBuffer.Data.AXIS_X, 0x00, (SpeedCircBuffer.Size) * (sizeof(float)));
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <Init_Demo+0x240>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	461a      	mov	r2, r3
 80010f8:	2100      	movs	r1, #0
 80010fa:	4856      	ldr	r0, [pc, #344]	; (8001254 <Init_Demo+0x254>)
 80010fc:	f00c fc45 	bl	800d98a <memset>
  memset(SpeedCircBuffer.Data.AXIS_Y, 0x00, (SpeedCircBuffer.Size) * (sizeof(float)));
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <Init_Demo+0x240>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	461a      	mov	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	4853      	ldr	r0, [pc, #332]	; (8001258 <Init_Demo+0x258>)
 800110c:	f00c fc3d 	bl	800d98a <memset>
  memset(SpeedCircBuffer.Data.AXIS_Z, 0x00, (SpeedCircBuffer.Size) * (sizeof(float)));
 8001110:	4b4b      	ldr	r3, [pc, #300]	; (8001240 <Init_Demo+0x240>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	461a      	mov	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	4850      	ldr	r0, [pc, #320]	; (800125c <Init_Demo+0x25c>)
 800111c:	f00c fc35 	bl	800d98a <memset>

  /* Reset the TimeDomain parameter values */
  sTimeDomain.AccRms.AXIS_X = 0.0f;
 8001120:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <Init_Demo+0x260>)
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
  sTimeDomain.AccRms.AXIS_Y = 0.0f;
 8001128:	4b4d      	ldr	r3, [pc, #308]	; (8001260 <Init_Demo+0x260>)
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  sTimeDomain.AccRms.AXIS_Z = 0.0f;
 8001130:	4b4b      	ldr	r3, [pc, #300]	; (8001260 <Init_Demo+0x260>)
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  sTimeDomain.AccPeak.AXIS_X = 0.0f;
 8001138:	4b49      	ldr	r3, [pc, #292]	; (8001260 <Init_Demo+0x260>)
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  sTimeDomain.AccPeak.AXIS_Y = 0.0f;
 8001140:	4b47      	ldr	r3, [pc, #284]	; (8001260 <Init_Demo+0x260>)
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
  sTimeDomain.AccPeak.AXIS_Z = 0.0f;
 8001148:	4b45      	ldr	r3, [pc, #276]	; (8001260 <Init_Demo+0x260>)
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  sTimeDomain.SpeedRms.AXIS_X = 0.0f;
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <Init_Demo+0x260>)
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  sTimeDomain.SpeedRms.AXIS_Y = 0.0f;
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <Init_Demo+0x260>)
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  sTimeDomain.SpeedRms.AXIS_Z = 0.0f;
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <Init_Demo+0x260>)
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	615a      	str	r2, [r3, #20]

  /* Reset the counters of the number of sums about the calculation of the average */
  AccSumCnt.AXIS_X = 0;
 8001168:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <Init_Demo+0x264>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
  AccSumCnt.AXIS_Y = 0;
 800116e:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <Init_Demo+0x264>)
 8001170:	2200      	movs	r2, #0
 8001172:	805a      	strh	r2, [r3, #2]
  AccSumCnt.AXIS_Z = 0;
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <Init_Demo+0x264>)
 8001176:	2200      	movs	r2, #0
 8001178:	809a      	strh	r2, [r3, #4]

  MotionSP_SetWindFiltArray(Filter_Params, MotionSP_Parameters.FftSize, (Filt_Type_t)MotionSP_Parameters.window);
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <Init_Demo+0x238>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <Init_Demo+0x238>)
 8001180:	8892      	ldrh	r2, [r2, #4]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	4619      	mov	r1, r3
 8001186:	4838      	ldr	r0, [pc, #224]	; (8001268 <Init_Demo+0x268>)
 8001188:	f00b fe90 	bl	800ceac <MotionSP_SetWindFiltArray>

  /* Reset the flag to enable FFT computation */
  fftIsEnabled = 0;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <Init_Demo+0x234>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]

  arm_rfft_fast_init_f32(&fftS, MotionSP_Parameters.FftSize);
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <Init_Demo+0x238>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	4834      	ldr	r0, [pc, #208]	; (800126c <Init_Demo+0x26c>)
 800119a:	f006 faff 	bl	800779c <arm_rfft_fast_init_f32>

  accCircBuffIndexForFft = MotionSP_Parameters.FftSize - 1; /* It is the minimum value to do the first FFT */
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <Init_Demo+0x238>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <Init_Demo+0x270>)
 80011a8:	801a      	strh	r2, [r3, #0]

  /* Enable AXL data to FIFO with no decimation */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, LSM6DSL_FIFO_XL_NO_DEC) != BSP_ERROR_NONE)
 80011aa:	2201      	movs	r2, #1
 80011ac:	2102      	movs	r1, #2
 80011ae:	2000      	movs	r0, #0
 80011b0:	f00a fe02 	bl	800bdb8 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <Init_Demo+0x1be>
  {
    return 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e031      	b.n	8001222 <Init_Demo+0x222>
  }

  /* Set FIFO ODR to highest value */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value(CUSTOM_LSM6DSL_0, 6660.0f) != BSP_ERROR_NONE)
 80011be:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001274 <Init_Demo+0x274>
 80011c2:	2000      	movs	r0, #0
 80011c4:	f00a fe42 	bl	800be4c <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <Init_Demo+0x1d2>
  {
    return 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e027      	b.n	8001222 <Init_Demo+0x222>
  }

  /* Set FIFO watermark level */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level(CUSTOM_LSM6DSL_0, (MotionSP_Parameters.FftSize + 1) * 3) != BSP_ERROR_NONE)
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <Init_Demo+0x238>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b29b      	uxth	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	0052      	lsls	r2, r2, #1
 80011de:	4413      	add	r3, r2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	2000      	movs	r0, #0
 80011e6:	f00a fea9 	bl	800bf3c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <Init_Demo+0x1f4>
  {
    return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e016      	b.n	8001222 <Init_Demo+0x222>
  }

  /* Set FIFO to stop on FIFO threshold */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(CUSTOM_LSM6DSL_0, PROPERTY_ENABLE) != BSP_ERROR_NONE)
 80011f4:	2101      	movs	r1, #1
 80011f6:	2000      	movs	r0, #0
 80011f8:	f00a fec8 	bl	800bf8c <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <Init_Demo+0x206>
  {
    return 0;
 8001202:	2300      	movs	r3, #0
 8001204:	e00d      	b.n	8001222 <Init_Demo+0x222>
  }

  if (SensorSetting.hp_filter_available == 0)
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <Init_Demo+0x22c>)
 8001208:	7d1b      	ldrb	r3, [r3, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <Init_Demo+0x212>
  {
    HP_DC_Changer();
 800120e:	f000 fa41 	bl	8001694 <HP_DC_Changer>
  }

  /* Measure and calculate ODR */
  if (Meas_Odr() == 0)
 8001212:	f000 f831 	bl	8001278 <Meas_Odr>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <Init_Demo+0x220>
  {
    return 0;
 800121c:	2300      	movs	r3, #0
 800121e:	e000      	b.n	8001222 <Init_Demo+0x222>
  }

  return 1;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	080106e8 	.word	0x080106e8
 8001230:	20000284 	.word	0x20000284
 8001234:	2000723c 	.word	0x2000723c
 8001238:	200059b4 	.word	0x200059b4
 800123c:	200059d0 	.word	0x200059d0
 8001240:	20007294 	.word	0x20007294
 8001244:	20000394 	.word	0x20000394
 8001248:	200059d8 	.word	0x200059d8
 800124c:	200061d8 	.word	0x200061d8
 8001250:	200069d8 	.word	0x200069d8
 8001254:	2000729c 	.word	0x2000729c
 8001258:	20007a9c 	.word	0x20007a9c
 800125c:	2000829c 	.word	0x2000829c
 8001260:	200071d8 	.word	0x200071d8
 8001264:	20004d94 	.word	0x20004d94
 8001268:	20004578 	.word	0x20004578
 800126c:	20004d9c 	.word	0x20004d9c
 8001270:	20004550 	.word	0x20004550
 8001274:	45d02000 	.word	0x45d02000

08001278 <Meas_Odr>:
 * @brief  Measure accelerometer real ODR
 * @param  None
 * @retval 1 in case of success 0 otherwise
 */
static uint8_t Meas_Odr(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
  uint8_t  odr_meas_enable = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
  uint16_t odr_meas_iter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	81bb      	strh	r3, [r7, #12]
  uint16_t odr_meas_start_time = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	817b      	strh	r3, [r7, #10]
  uint16_t odr_meas_stop_time = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	813b      	strh	r3, [r7, #8]
  uint16_t odr_meas_samples = 150; /* number of measured samples for calculating ODR */
 800128e:	2396      	movs	r3, #150	; 0x96
 8001290:	80fb      	strh	r3, [r7, #6]
  uint32_t start = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]

  if (!Disable_FIFO())
 8001296:	f000 f9e5 	bl	8001664 <Disable_FIFO>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <Meas_Odr+0x2c>
  {
    return 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e0c5      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  /* Set DRDY pulsed mode */
  if (CUSTOM_MOTION_SENSOR_DRDY_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_DRDY_PULSED) != BSP_ERROR_NONE)
 80012a4:	2101      	movs	r1, #1
 80012a6:	2000      	movs	r0, #0
 80012a8:	f00a ff2c 	bl	800c104 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <Meas_Odr+0x3e>
  {
    return 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e0bc      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  if (!Enable_DRDY())
 80012b6:	f000 fa33 	bl	8001720 <Enable_DRDY>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <Meas_Odr+0x4c>
  {
    return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e0b5      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  start = HAL_GetTick();
 80012c4:	f006 fbb4 	bl	8007a30 <HAL_GetTick>
 80012c8:	6038      	str	r0, [r7, #0]

  while (odr_meas_enable)
 80012ca:	e032      	b.n	8001332 <Meas_Odr+0xba>
  {
    if (((HAL_GetTick() - start) > 1000))
 80012cc:	f006 fbb0 	bl	8007a30 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012da:	d901      	bls.n	80012e0 <Meas_Odr+0x68>
    {
      return 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	e0a7      	b.n	8001430 <Meas_Odr+0x1b8>
    }

    if (AccIntReceived)
 80012e0:	4b55      	ldr	r3, [pc, #340]	; (8001438 <Meas_Odr+0x1c0>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d023      	beq.n	8001332 <Meas_Odr+0xba>
    {
      AccIntReceived = 0;
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <Meas_Odr+0x1c0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]

      /* Get start time */
      if (odr_meas_iter == 0)
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d107      	bne.n	8001306 <Meas_Odr+0x8e>
      {
        IntCurrentTime1 = HAL_GetTick();
 80012f6:	f006 fb9b 	bl	8007a30 <HAL_GetTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <Meas_Odr+0x1c4>)
 80012fe:	6013      	str	r3, [r2, #0]
        odr_meas_start_time = IntCurrentTime1;
 8001300:	4b4e      	ldr	r3, [pc, #312]	; (800143c <Meas_Odr+0x1c4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	817b      	strh	r3, [r7, #10]
      }

      /* Get stop time */
      if (odr_meas_iter == odr_meas_samples - 1)
 8001306:	89ba      	ldrh	r2, [r7, #12]
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	3b01      	subs	r3, #1
 800130c:	429a      	cmp	r2, r3
 800130e:	d109      	bne.n	8001324 <Meas_Odr+0xac>
      {
        IntCurrentTime2 = HAL_GetTick();
 8001310:	f006 fb8e 	bl	8007a30 <HAL_GetTick>
 8001314:	4603      	mov	r3, r0
 8001316:	4a4a      	ldr	r2, [pc, #296]	; (8001440 <Meas_Odr+0x1c8>)
 8001318:	6013      	str	r3, [r2, #0]
        odr_meas_stop_time = IntCurrentTime2;
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <Meas_Odr+0x1c8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	813b      	strh	r3, [r7, #8]
        odr_meas_enable = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
      }

      /* Stop after measuring "odr_meas_samples" values */
      if (odr_meas_iter < odr_meas_samples)
 8001324:	89ba      	ldrh	r2, [r7, #12]
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	429a      	cmp	r2, r3
 800132a:	d202      	bcs.n	8001332 <Meas_Odr+0xba>
      {
        odr_meas_iter++;
 800132c:	89bb      	ldrh	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	81bb      	strh	r3, [r7, #12]
  while (odr_meas_enable)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1c9      	bne.n	80012cc <Meas_Odr+0x54>
      }
    }
  }

  /* Calculate measured ODR */
  AcceleroODR.Frequency = ((float)(1000 * odr_meas_samples) / (odr_meas_stop_time - odr_meas_start_time));
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800134a:	893a      	ldrh	r2, [r7, #8]
 800134c:	897b      	ldrh	r3, [r7, #10]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <Meas_Odr+0x1cc>)
 800135e:	edc3 7a00 	vstr	s15, [r3]

  if (AcceleroODR.Frequency != 0)
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <Meas_Odr+0x1cc>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	eef5 7a40 	vcmp.f32	s15, #0.0
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d009      	beq.n	8001386 <Meas_Odr+0x10e>
  {
    AcceleroODR.Period = 1 / AcceleroODR.Frequency;
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <Meas_Odr+0x1cc>)
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800137c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <Meas_Odr+0x1cc>)
 8001382:	edc3 7a01 	vstr	s15, [r3, #4]
  }

  AcceleroODR.Tau = exp(-(float)(1000 * AcceleroODR.Period) / MotionSP_Parameters.tau);
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <Meas_Odr+0x1cc>)
 8001388:	edd3 7a01 	vldr	s15, [r3, #4]
 800138c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001448 <Meas_Odr+0x1d0>
 8001390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001394:	eeb1 7a67 	vneg.f32	s14, s15
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <Meas_Odr+0x1d4>)
 800139a:	885b      	ldrh	r3, [r3, #2]
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013a8:	ee16 0a90 	vmov	r0, s13
 80013ac:	f7ff f92c 	bl	8000608 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	ec43 2b10 	vmov	d0, r2, r3
 80013b8:	f00e fe86 	bl	80100c8 <exp>
 80013bc:	ec53 2b10 	vmov	r2, r3, d0
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fc50 	bl	8000c68 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <Meas_Odr+0x1cc>)
 80013cc:	6093      	str	r3, [r2, #8]

  /* Disable accelerometer to avoid interrupt conflicts on highest ODRs */
  if (CUSTOM_MOTION_SENSOR_Disable(CUSTOM_LSM6DSL_0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 80013ce:	2102      	movs	r1, #2
 80013d0:	2000      	movs	r0, #0
 80013d2:	f00a faad 	bl	800b930 <CUSTOM_MOTION_SENSOR_Disable>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <Meas_Odr+0x168>
  {
    return 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	e027      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  if (!Disable_DRDY())
 80013e0:	f000 f9c0 	bl	8001764 <Disable_DRDY>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <Meas_Odr+0x176>
  {
    return 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e020      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  /* Set DRDY latched mode */
  if (CUSTOM_MOTION_SENSOR_DRDY_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_DRDY_LATCHED) != BSP_ERROR_NONE)
 80013ee:	2100      	movs	r1, #0
 80013f0:	2000      	movs	r0, #0
 80013f2:	f00a fe87 	bl	800c104 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <Meas_Odr+0x188>
  {
    return 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e017      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  /* Enable accelerometer */
  if (CUSTOM_MOTION_SENSOR_Enable(CUSTOM_LSM6DSL_0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 8001400:	2102      	movs	r1, #2
 8001402:	2000      	movs	r0, #0
 8001404:	f00a fa52 	bl	800b8ac <CUSTOM_MOTION_SENSOR_Enable>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <Meas_Odr+0x19a>
  {
    return 0;
 800140e:	2300      	movs	r3, #0
 8001410:	e00e      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  /* Enable FIFO full flag interrupt */
  if (!Enable_FIFO())
 8001412:	f000 f919 	bl	8001648 <Enable_FIFO>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <Meas_Odr+0x1a8>
  {
    return 0;
 800141c:	2300      	movs	r3, #0
 800141e:	e007      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  if (!Restart_FIFO())
 8001420:	f000 f816 	bl	8001450 <Restart_FIFO>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <Meas_Odr+0x1b6>
  {
    return 0;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  return 1;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000280 	.word	0x20000280
 800143c:	20000288 	.word	0x20000288
 8001440:	2000028c 	.word	0x2000028c
 8001444:	20008a9c 	.word	0x20008a9c
 8001448:	447a0000 	.word	0x447a0000
 800144c:	200059b4 	.word	0x200059b4

08001450 <Restart_FIFO>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
uint8_t Restart_FIFO(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  AccIntReceived = 0;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <Restart_FIFO+0x34>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]

  /* FIFO Bypass Mode */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_BYPASS_MODE) != BSP_ERROR_NONE)
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f00a fdbd 	bl	800bfdc <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <Restart_FIFO+0x1c>
  {
    return 0;
 8001468:	2300      	movs	r3, #0
 800146a:	e009      	b.n	8001480 <Restart_FIFO+0x30>
  }

  /* FIFO Mode*/
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_FIFO_MODE) != BSP_ERROR_NONE)
 800146c:	2101      	movs	r1, #1
 800146e:	2000      	movs	r0, #0
 8001470:	f00a fdb4 	bl	800bfdc <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <Restart_FIFO+0x2e>
  {
    return 0;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <Restart_FIFO+0x30>
  }

  return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000280 	.word	0x20000280

08001488 <Collect_Data>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 otherwise
  */
uint8_t Collect_Data(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
  uint16_t pattern;
  uint16_t samples_in_fifo = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	83bb      	strh	r3, [r7, #28]
  int32_t acceleration;
  uint32_t start = HAL_GetTick();
 8001492:	f006 facd 	bl	8007a30 <HAL_GetTick>
 8001496:	6238      	str	r0, [r7, #32]
  SensorVal_f_t single_data;
  SensorVal_f_t single_data_no_dc;
  uint8_t exit_cond = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  //printf("FinishAvgFlag = %d, fftIsEnabled = %d, AccIntReceived = %d\n",FinishAvgFlag, fftIsEnabled, AccIntReceived);
  if (FinishAvgFlag == 0 && fftIsEnabled == 0 && AccIntReceived == 1)
 800149e:	4b5f      	ldr	r3, [pc, #380]	; (800161c <Collect_Data+0x194>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 80b5 	bne.w	8001612 <Collect_Data+0x18a>
 80014a8:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <Collect_Data+0x198>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 80b0 	bne.w	8001612 <Collect_Data+0x18a>
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <Collect_Data+0x19c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	f040 80aa 	bne.w	8001612 <Collect_Data+0x18a>
  {
    AccIntReceived = 0;
 80014be:	4b59      	ldr	r3, [pc, #356]	; (8001624 <Collect_Data+0x19c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]

    CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples(CUSTOM_LSM6DSL_0, &samples_in_fifo);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	2000      	movs	r0, #0
 80014cc:	f00a fc4e 	bl	800bd6c <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples>

    if ((samples_in_fifo / 3U) < MotionSP_Parameters.FftSize)
 80014d0:	8bbb      	ldrh	r3, [r7, #28]
 80014d2:	4a55      	ldr	r2, [pc, #340]	; (8001628 <Collect_Data+0x1a0>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b53      	ldr	r3, [pc, #332]	; (800162c <Collect_Data+0x1a4>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f080 808a 	bcs.w	80015fa <Collect_Data+0x172>
    {
      Restart_FIFO();
 80014e6:	f7ff ffb3 	bl	8001450 <Restart_FIFO>
      return 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e092      	b.n	8001614 <Collect_Data+0x18c>
    }

    while (fftIsEnabled == 0)
    {
      if (((HAL_GetTick() - start) > 6000))
 80014ee:	f006 fa9f 	bl	8007a30 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d903      	bls.n	8001508 <Collect_Data+0x80>
      {
        Restart_FIFO();
 8001500:	f7ff ffa6 	bl	8001450 <Restart_FIFO>
        return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e085      	b.n	8001614 <Collect_Data+0x18c>
      }

      CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern(CUSTOM_LSM6DSL_0, &pattern);
 8001508:	f107 031e 	add.w	r3, r7, #30
 800150c:	4619      	mov	r1, r3
 800150e:	2000      	movs	r0, #0
 8001510:	f00a fd8c 	bl	800c02c <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern>
      CUSTOM_MOTION_SENSOR_FIFO_Get_Axis(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, &acceleration);
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	461a      	mov	r2, r3
 800151a:	2102      	movs	r1, #2
 800151c:	2000      	movs	r0, #0
 800151e:	f00a fdab 	bl	800c078 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis>
      //printf("pattern: %d\n",pattern);
      switch (pattern)
 8001522:	8bfb      	ldrh	r3, [r7, #30]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d016      	beq.n	8001556 <Collect_Data+0xce>
 8001528:	2b02      	cmp	r3, #2
 800152a:	dc5c      	bgt.n	80015e6 <Collect_Data+0x15e>
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <Collect_Data+0xae>
 8001530:	2b01      	cmp	r3, #1
 8001532:	d008      	beq.n	8001546 <Collect_Data+0xbe>
 8001534:	e057      	b.n	80015e6 <Collect_Data+0x15e>
      {
        case X_AXIS:
          single_data.AXIS_X = (float)acceleration;
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	edc7 7a03 	vstr	s15, [r7, #12]
          break;
 8001544:	e053      	b.n	80015ee <Collect_Data+0x166>

        case Y_AXIS:
          single_data.AXIS_Y = (float)acceleration;
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001550:	edc7 7a04 	vstr	s15, [r7, #16]
          break;
 8001554:	e04b      	b.n	80015ee <Collect_Data+0x166>

        case Z_AXIS:
          single_data.AXIS_Z = (float)acceleration;
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001560:	edc7 7a05 	vstr	s15, [r7, #20]

          /* Remove DC offset */
          MotionSP_accDelOffset(&single_data_no_dc, &single_data, DC_SMOOTH, RestartFlag);
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <Collect_Data+0x1a8>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b29a      	uxth	r2, r3
 800156a:	f107 010c 	add.w	r1, r7, #12
 800156e:	463b      	mov	r3, r7
 8001570:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001634 <Collect_Data+0x1ac>
 8001574:	4618      	mov	r0, r3
 8001576:	f00b fa2f 	bl	800c9d8 <MotionSP_accDelOffset>

          /* Fill the accelero circular buffer */
          MotionSP_CreateAccCircBuffer(&AccCircBuffer, single_data_no_dc);
 800157a:	edd7 6a00 	vldr	s13, [r7]
 800157e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001582:	edd7 7a02 	vldr	s15, [r7, #8]
 8001586:	eeb0 0a66 	vmov.f32	s0, s13
 800158a:	eef0 0a47 	vmov.f32	s1, s14
 800158e:	eeb0 1a67 	vmov.f32	s2, s15
 8001592:	4829      	ldr	r0, [pc, #164]	; (8001638 <Collect_Data+0x1b0>)
 8001594:	f00b fabc 	bl	800cb10 <MotionSP_CreateAccCircBuffer>
         //MotionSP_speedDelOffset(&SpeedTimeDomain_noDC, &SpeedTimeDomain, DC_SMOOTH, RestartFlag);
         //MotionSP_accDelOffset(&SpeedTimeDomain_noDC, &SpeedTimeDomain, DC_SMOOTH, RestartFlag);



          if (AccCircBuffer.Ovf == 1)
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <Collect_Data+0x1b0>)
 800159a:	791b      	ldrb	r3, [r3, #4]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d105      	bne.n	80015ac <Collect_Data+0x124>
          {
            fftIsEnabled = 1;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <Collect_Data+0x198>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
            AccCircBuffer.Ovf = 0;
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <Collect_Data+0x1b0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	711a      	strb	r2, [r3, #4]
          }

          MotionSP_TimeDomainProcess(&sTimeDomain, (Td_Type_t)MotionSP_Parameters.td_type, RestartFlag);
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <Collect_Data+0x1a4>)
 80015ae:	8a5b      	ldrh	r3, [r3, #18]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <Collect_Data+0x1a8>)
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	4820      	ldr	r0, [pc, #128]	; (800163c <Collect_Data+0x1b4>)
 80015ba:	f00b faff 	bl	800cbbc <MotionSP_TimeDomainProcess>

          MotionSP_CreateAccCircBuffer(&SpeedCircBuffer, SpeedTimeDomain_noDC);
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <Collect_Data+0x1b8>)
 80015c0:	edd3 6a00 	vldr	s13, [r3]
 80015c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80015c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015cc:	eeb0 0a66 	vmov.f32	s0, s13
 80015d0:	eef0 0a47 	vmov.f32	s1, s14
 80015d4:	eeb0 1a67 	vmov.f32	s2, s15
 80015d8:	481a      	ldr	r0, [pc, #104]	; (8001644 <Collect_Data+0x1bc>)
 80015da:	f00b fa99 	bl	800cb10 <MotionSP_CreateAccCircBuffer>
//          MotionSP_FillSpeedCircBuffer();
          RestartFlag = 0;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <Collect_Data+0x1a8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
          break;
 80015e4:	e003      	b.n	80015ee <Collect_Data+0x166>

        default:
          exit_cond = 1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80015ec:	bf00      	nop
      }

      if (exit_cond)
 80015ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <Collect_Data+0x172>
      {
        return 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e00c      	b.n	8001614 <Collect_Data+0x18c>
    while (fftIsEnabled == 0)
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <Collect_Data+0x198>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f43f af75 	beq.w	80014ee <Collect_Data+0x66>
      }
    }

    if (!Restart_FIFO())
 8001604:	f7ff ff24 	bl	8001450 <Restart_FIFO>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <Collect_Data+0x18a>
    {
      return 0;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <Collect_Data+0x18c>
    }
  }

  return 1;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20007288 	.word	0x20007288
 8001620:	2000723c 	.word	0x2000723c
 8001624:	20000280 	.word	0x20000280
 8001628:	aaaaaaab 	.word	0xaaaaaaab
 800162c:	200059b4 	.word	0x200059b4
 8001630:	20000000 	.word	0x20000000
 8001634:	3f79999a 	.word	0x3f79999a
 8001638:	200059d0 	.word	0x200059d0
 800163c:	200071d8 	.word	0x200071d8
 8001640:	20007240 	.word	0x20007240
 8001644:	20007294 	.word	0x20007294

08001648 <Enable_FIFO>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
static uint8_t Enable_FIFO(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Enable FIFO full flag interrupt */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(CUSTOM_LSM6DSL_0, PROPERTY_ENABLE) != BSP_ERROR_NONE)
 800164c:	2101      	movs	r1, #1
 800164e:	2000      	movs	r0, #0
 8001650:	f00a fc24 	bl	800be9c <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <Enable_FIFO+0x16>
  {
    return 0;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <Enable_FIFO+0x18>
  }

  return 1;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}

08001664 <Disable_FIFO>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
static uint8_t Disable_FIFO(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Set FIFO to bypass mode */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_BYPASS_MODE) != BSP_ERROR_NONE)
 8001668:	2100      	movs	r1, #0
 800166a:	2000      	movs	r0, #0
 800166c:	f00a fcb6 	bl	800bfdc <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <Disable_FIFO+0x16>
  {
    return 0;
 8001676:	2300      	movs	r3, #0
 8001678:	e009      	b.n	800168e <Disable_FIFO+0x2a>
  }

  /* Disable FIFO full flag interrupt */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(CUSTOM_LSM6DSL_0, PROPERTY_DISABLE) != BSP_ERROR_NONE)
 800167a:	2100      	movs	r1, #0
 800167c:	2000      	movs	r0, #0
 800167e:	f00a fc0d 	bl	800be9c <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <Disable_FIFO+0x28>
  {
    return 0;
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <Disable_FIFO+0x2a>
  }

  return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HP_DC_Changer>:
 * @brief  Changes HP to DCnull and vice versa in main menu options
 * @param  None
 * @retval void
 */
static void HP_DC_Changer(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  uint8_t ret_err = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	71fb      	strb	r3, [r7, #7]
  uint8_t data;

  if (GuiSettings.switch_HP_to_DC_null)
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HP_DC_Changer+0x80>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HP_DC_Changer+0x20>
  {
    GuiSettings.switch_HP_to_DC_null = 0;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HP_DC_Changer+0x80>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	705a      	strb	r2, [r3, #1]
    GuiSettings.hp_filter = 0;
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HP_DC_Changer+0x80>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
      GuiSettings.switch_HP_to_DC_null = 1;
      GuiSettings.hp_filter = 0;
      fftIsEnabled = 0;
    }
  }
}
 80016b2:	e02a      	b.n	800170a <HP_DC_Changer+0x76>
    if (SensorSetting.hp_filter_available)
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HP_DC_Changer+0x84>)
 80016b6:	7d1b      	ldrb	r3, [r3, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01a      	beq.n	80016f2 <HP_DC_Changer+0x5e>
      if (CUSTOM_MOTION_SENSOR_Read_Register(CUSTOM_LSM6DSL_0, LSM6DSL_CTRL8_XL, &data) != BSP_ERROR_NONE)
 80016bc:	1dbb      	adds	r3, r7, #6
 80016be:	461a      	mov	r2, r3
 80016c0:	2117      	movs	r1, #23
 80016c2:	2000      	movs	r0, #0
 80016c4:	f00a fb00 	bl	800bcc8 <CUSTOM_MOTION_SENSOR_Read_Register>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HP_DC_Changer+0x3e>
        ret_err = 1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
      data &= LSM6DSL_HP_DISABLE;
 80016d2:	79bb      	ldrb	r3, [r7, #6]
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	71bb      	strb	r3, [r7, #6]
      if (CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSL_0, LSM6DSL_CTRL8_XL, data) != BSP_ERROR_NONE)
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	461a      	mov	r2, r3
 80016e0:	2117      	movs	r1, #23
 80016e2:	2000      	movs	r0, #0
 80016e4:	f00a fb18 	bl	800bd18 <CUSTOM_MOTION_SENSOR_Write_Register>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HP_DC_Changer+0x5e>
        ret_err = 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	71fb      	strb	r3, [r7, #7]
    if (ret_err == 0)
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d108      	bne.n	800170a <HP_DC_Changer+0x76>
      GuiSettings.switch_HP_to_DC_null = 1;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HP_DC_Changer+0x80>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	705a      	strb	r2, [r3, #1]
      GuiSettings.hp_filter = 0;
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HP_DC_Changer+0x80>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
      fftIsEnabled = 0;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HP_DC_Changer+0x88>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000284 	.word	0x20000284
 8001718:	080106e8 	.word	0x080106e8
 800171c:	2000723c 	.word	0x2000723c

08001720 <Enable_DRDY>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
static uint8_t Enable_DRDY(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  CUSTOM_MOTION_SENSOR_AxesRaw_t axes;

  AccIntReceived = 0;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <Enable_DRDY+0x40>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]

  /* Enable DRDY */

  if ( CUSTOM_MOTION_SENSOR_Set_INT1_DRDY(CUSTOM_LSM6DSL_0, ENABLE) != BSP_ERROR_NONE)
 800172c:	2101      	movs	r1, #1
 800172e:	2000      	movs	r0, #0
 8001730:	f00a fbdc 	bl	800beec <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <Enable_DRDY+0x1e>
  {
    return 0;
 800173a:	2300      	movs	r3, #0
 800173c:	e00b      	b.n	8001756 <Enable_DRDY+0x36>
  }

  /* Clear DRDY */
  if (CUSTOM_MOTION_SENSOR_GetAxesRaw(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE)
 800173e:	463b      	mov	r3, r7
 8001740:	461a      	mov	r2, r3
 8001742:	2102      	movs	r1, #2
 8001744:	2000      	movs	r0, #0
 8001746:	f00a f935 	bl	800b9b4 <CUSTOM_MOTION_SENSOR_GetAxesRaw>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <Enable_DRDY+0x34>
  {
    return 0;
 8001750:	2300      	movs	r3, #0
 8001752:	e000      	b.n	8001756 <Enable_DRDY+0x36>
  }

  return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000280 	.word	0x20000280

08001764 <Disable_DRDY>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
static uint8_t Disable_DRDY(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Disable DRDY */
  if (CUSTOM_MOTION_SENSOR_Set_INT1_DRDY(CUSTOM_LSM6DSL_0, DISABLE) != BSP_ERROR_NONE)
 8001768:	2100      	movs	r1, #0
 800176a:	2000      	movs	r0, #0
 800176c:	f00a fbbe 	bl	800beec <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <Disable_DRDY+0x16>
  {
    return 0;
 8001776:	2300      	movs	r3, #0
 8001778:	e000      	b.n	800177c <Disable_DRDY+0x18>
  }

  return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}

08001780 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
void Init_Sensors(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSL_0, MOTION_ACCELERO);
 8001784:	2102      	movs	r1, #2
 8001786:	2000      	movs	r0, #0
 8001788:	f00a f808 	bl	800b79c <CUSTOM_MOTION_SENSOR_Init>

  /* Set accelerometer:
   *   - ODR >= 416Hz
   *   - FS   = <-2g, 2g>
   */
  (void)CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, LSM6DSL_DEFAULT_ODR);
 800178c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80017ac <Init_Sensors+0x2c>
 8001790:	2102      	movs	r1, #2
 8001792:	2000      	movs	r0, #0
 8001794:	f00a f952 	bl	800ba3c <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
  (void)CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, LSM6DSL_DEFAULT_FS);
 8001798:	2202      	movs	r2, #2
 800179a:	2102      	movs	r1, #2
 800179c:	2000      	movs	r0, #0
 800179e:	f00a f993 	bl	800bac8 <CUSTOM_MOTION_SENSOR_SetFullScale>
  set_mems_int_pin_a_exti();
 80017a2:	f009 ffcd 	bl	800b740 <set_mems_int_pin_a_exti>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	43d08000 	.word	0x43d08000

080017b0 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017b6:	4a19      	ldr	r2, [pc, #100]	; (800181c <MX_DFSDM1_Init+0x6c>)
 80017b8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017bc:	2201      	movs	r2, #1
 80017be:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017c8:	2202      	movs	r2, #2
 80017ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017de:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017e8:	2204      	movs	r2, #4
 80017ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <MX_DFSDM1_Init+0x68>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_DFSDM1_Init+0x68>)
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_DFSDM1_Init+0x68>)
 8001806:	f006 fa87 	bl	8007d18 <HAL_DFSDM_ChannelInit>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001810:	f000 fd00 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200043f0 	.word	0x200043f0
 800181c:	40016020 	.word	0x40016020

08001820 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0ac      	sub	sp, #176	; 0xb0
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2288      	movs	r2, #136	; 0x88
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f00c f8a2 	bl	800d98a <memset>
  if(DFSDM1_Init == 0)
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d142      	bne.n	80018d4 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800184e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001852:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4618      	mov	r0, r3
 8001860:	f008 fae6 	bl	8009e30 <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800186a:	f000 fcd3 	bl	8002214 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800189e:	f44f 7320 	mov.w	r3, #640	; 0x280
 80018a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018b8:	2306      	movs	r3, #6
 80018ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80018c6:	f006 fb91 	bl	8007fec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a02      	ldr	r2, [pc, #8]	; (80018dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018d2:	6013      	str	r3, [r2, #0]
  }
}
 80018d4:	bf00      	nop
 80018d6:	37b0      	adds	r7, #176	; 0xb0
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000290 	.word	0x20000290
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48001000 	.word	0x48001000

080018e8 <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fe:	4bbb      	ldr	r3, [pc, #748]	; (8001bec <MX_GPIO_Init+0x304>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4aba      	ldr	r2, [pc, #744]	; (8001bec <MX_GPIO_Init+0x304>)
 8001904:	f043 0310 	orr.w	r3, r3, #16
 8001908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190a:	4bb8      	ldr	r3, [pc, #736]	; (8001bec <MX_GPIO_Init+0x304>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	4bb5      	ldr	r3, [pc, #724]	; (8001bec <MX_GPIO_Init+0x304>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4ab4      	ldr	r2, [pc, #720]	; (8001bec <MX_GPIO_Init+0x304>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4bb2      	ldr	r3, [pc, #712]	; (8001bec <MX_GPIO_Init+0x304>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4baf      	ldr	r3, [pc, #700]	; (8001bec <MX_GPIO_Init+0x304>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4aae      	ldr	r2, [pc, #696]	; (8001bec <MX_GPIO_Init+0x304>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4bac      	ldr	r3, [pc, #688]	; (8001bec <MX_GPIO_Init+0x304>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4ba9      	ldr	r3, [pc, #676]	; (8001bec <MX_GPIO_Init+0x304>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4aa8      	ldr	r2, [pc, #672]	; (8001bec <MX_GPIO_Init+0x304>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4ba6      	ldr	r3, [pc, #664]	; (8001bec <MX_GPIO_Init+0x304>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	4ba3      	ldr	r3, [pc, #652]	; (8001bec <MX_GPIO_Init+0x304>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4aa2      	ldr	r2, [pc, #648]	; (8001bec <MX_GPIO_Init+0x304>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4ba0      	ldr	r3, [pc, #640]	; (8001bec <MX_GPIO_Init+0x304>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 718a 	mov.w	r1, #276	; 0x114
 800197c:	489c      	ldr	r0, [pc, #624]	; (8001bf0 <MX_GPIO_Init+0x308>)
 800197e:	f006 fdd3 	bl	8008528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	f248 1104 	movw	r1, #33028	; 0x8104
 8001988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198c:	f006 fdcc 	bl	8008528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001990:	2200      	movs	r2, #0
 8001992:	f24b 0114 	movw	r1, #45076	; 0xb014
 8001996:	4897      	ldr	r0, [pc, #604]	; (8001bf4 <MX_GPIO_Init+0x30c>)
 8001998:	f006 fdc6 	bl	8008528 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f241 0181 	movw	r1, #4225	; 0x1081
 80019a2:	4895      	ldr	r0, [pc, #596]	; (8001bf8 <MX_GPIO_Init+0x310>)
 80019a4:	f006 fdc0 	bl	8008528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4892      	ldr	r0, [pc, #584]	; (8001bf8 <MX_GPIO_Init+0x310>)
 80019b0:	f006 fdba 	bl	8008528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80019ba:	4890      	ldr	r0, [pc, #576]	; (8001bfc <MX_GPIO_Init+0x314>)
 80019bc:	f006 fdb4 	bl	8008528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2120      	movs	r1, #32
 80019c4:	488b      	ldr	r0, [pc, #556]	; (8001bf4 <MX_GPIO_Init+0x30c>)
 80019c6:	f006 fdaf 	bl	8008528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	2101      	movs	r1, #1
 80019ce:	4888      	ldr	r0, [pc, #544]	; (8001bf0 <MX_GPIO_Init+0x308>)
 80019d0:	f006 fdaa 	bl	8008528 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80019d4:	f240 1315 	movw	r3, #277	; 0x115
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4880      	ldr	r0, [pc, #512]	; (8001bf0 <MX_GPIO_Init+0x308>)
 80019ee:	f006 fafd 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80019f2:	236a      	movs	r3, #106	; 0x6a
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f6:	4b82      	ldr	r3, [pc, #520]	; (8001c00 <MX_GPIO_Init+0x318>)
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	487a      	ldr	r0, [pc, #488]	; (8001bf0 <MX_GPIO_Init+0x308>)
 8001a06:	f006 faf1 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001a0a:	233f      	movs	r3, #63	; 0x3f
 8001a0c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a0e:	230b      	movs	r3, #11
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4877      	ldr	r0, [pc, #476]	; (8001bfc <MX_GPIO_Init+0x314>)
 8001a1e:	f006 fae5 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001a22:	2303      	movs	r3, #3
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a32:	2308      	movs	r3, #8
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a40:	f006 fad4 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001a44:	f248 1304 	movw	r3, #33028	; 0x8104
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f006 fac4 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001a64:	2308      	movs	r3, #8
 8001a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a74:	2301      	movs	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a82:	f006 fab3 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001a86:	2310      	movs	r3, #16
 8001a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a8a:	230b      	movs	r3, #11
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9c:	f006 faa6 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001aa0:	23e0      	movs	r3, #224	; 0xe0
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ab0:	2305      	movs	r3, #5
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001abe:	f006 fa95 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac6:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <MX_GPIO_Init+0x318>)
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4847      	ldr	r0, [pc, #284]	; (8001bf4 <MX_GPIO_Init+0x30c>)
 8001ad6:	f006 fa89 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001ada:	2302      	movs	r3, #2
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ade:	230b      	movs	r3, #11
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4841      	ldr	r0, [pc, #260]	; (8001bf4 <MX_GPIO_Init+0x30c>)
 8001aee:	f006 fa7d 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001af2:	f24b 0334 	movw	r3, #45108	; 0xb034
 8001af6:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	483a      	ldr	r0, [pc, #232]	; (8001bf4 <MX_GPIO_Init+0x30c>)
 8001b0c:	f006 fa6e 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001b10:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b14:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b22:	230a      	movs	r3, #10
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4830      	ldr	r0, [pc, #192]	; (8001bf0 <MX_GPIO_Init+0x308>)
 8001b2e:	f006 fa5d 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b44:	2307      	movs	r3, #7
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	482a      	ldr	r0, [pc, #168]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001b50:	f006 fa4c 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001b54:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001b58:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <MX_GPIO_Init+0x318>)
 8001b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4823      	ldr	r0, [pc, #140]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001b6a:	f006 fa3f 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001b6e:	f243 0381 	movw	r3, #12417	; 0x3081
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	481c      	ldr	r0, [pc, #112]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001b88:	f006 fa30 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001b8c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4815      	ldr	r0, [pc, #84]	; (8001bfc <MX_GPIO_Init+0x314>)
 8001ba6:	f006 fa21 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001baa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_GPIO_Init+0x318>)
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480f      	ldr	r0, [pc, #60]	; (8001bfc <MX_GPIO_Init+0x314>)
 8001bc0:	f006 fa14 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f006 fa06 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001be0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	e00b      	b.n	8001c04 <MX_GPIO_Init+0x31c>
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	48001000 	.word	0x48001000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	48000c00 	.word	0x48000c00
 8001bfc:	48000800 	.word	0x48000800
 8001c00:	10110000 	.word	0x10110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1a:	f006 f9e7 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001c1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c30:	2306      	movs	r3, #6
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	481c      	ldr	r0, [pc, #112]	; (8001cac <MX_GPIO_Init+0x3c4>)
 8001c3c:	f006 f9d6 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001c40:	2302      	movs	r3, #2
 8001c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c50:	2305      	movs	r3, #5
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4815      	ldr	r0, [pc, #84]	; (8001cb0 <MX_GPIO_Init+0x3c8>)
 8001c5c:	f006 f9c6 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001c60:	2378      	movs	r3, #120	; 0x78
 8001c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c70:	2307      	movs	r3, #7
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <MX_GPIO_Init+0x3c8>)
 8001c7c:	f006 f9b6 	bl	8007fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001c80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c86:	2312      	movs	r3, #18
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c92:	2304      	movs	r3, #4
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_GPIO_Init+0x3cc>)
 8001c9e:	f006 f9a5 	bl	8007fec <HAL_GPIO_Init>

}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	48000c00 	.word	0x48000c00
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cbc:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc4:	f005 fe4c 	bl	8007960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc8:	f000 f9ea 	bl	80020a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ccc:	f7ff fe0c 	bl	80018e8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001cd0:	f7ff fd6e 	bl	80017b0 <MX_DFSDM1_Init>
  MX_TIM6_Init();
 8001cd4:	f000 fc2a 	bl	800252c <MX_TIM6_Init>
  //MX_MEMS_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001cd8:	f000 fa44 	bl	8002164 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  /* UART console init */
   Console_UART_Init();
 8001cdc:	f000 fa5e 	bl	800219c <Console_UART_Init>
   Init_Sensors();
 8001ce0:	f7ff fd4e 	bl	8001780 <Init_Sensors>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_TIM_Base_Start_IT(&htim6);
  printf("Hello\n");
 8001ce4:	48a2      	ldr	r0, [pc, #648]	; (8001f70 <main+0x2b8>)
 8001ce6:	f00c fbf3 	bl	800e4d0 <puts>
  printf("Inicializando a placa\n");
 8001cea:	48a2      	ldr	r0, [pc, #648]	; (8001f74 <main+0x2bc>)
 8001cec:	f00c fbf0 	bl	800e4d0 <puts>
  if ( Init_Demo() !=0)
 8001cf0:	f7ff f986 	bl	8001000 <Init_Demo>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <main+0x4a>
  {
	  printf("Placa inicializada com sucesso.\n");
 8001cfa:	489f      	ldr	r0, [pc, #636]	; (8001f78 <main+0x2c0>)
 8001cfc:	f00c fbe8 	bl	800e4d0 <puts>
 8001d00:	e002      	b.n	8001d08 <main+0x50>

  }
  else
  {
	  printf("Problema na inicialização da placa.\n");
 8001d02:	489e      	ldr	r0, [pc, #632]	; (8001f7c <main+0x2c4>)
 8001d04:	f00c fbe4 	bl	800e4d0 <puts>
    /* USER CODE BEGIN 3 */



	  //Init_Demo();
     if (Collect_Data())
 8001d08:	f7ff fbbe 	bl	8001488 <Collect_Data>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0fa      	beq.n	8001d08 <main+0x50>
     {
    	 printf("\n\nSOF\n", EOF);
 8001d12:	f04f 31ff 	mov.w	r1, #4294967295
 8001d16:	489a      	ldr	r0, [pc, #616]	; (8001f80 <main+0x2c8>)
 8001d18:	f00c fb54 	bl	800e3c4 <iprintf>
    	 printf("Dados de aquisicao,Fr,%f,Pr,%f,Tau,%f,Amostras,%d,FFT_fr_res,%f\n",
    			 AcceleroODR.Frequency, AcceleroODR.Period, AcceleroODR.Tau, AccCircBuffer.Size,
 8001d1c:	4b99      	ldr	r3, [pc, #612]	; (8001f84 <main+0x2cc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
    	 printf("Dados de aquisicao,Fr,%f,Pr,%f,Tau,%f,Amostras,%d,FFT_fr_res,%f\n",
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc71 	bl	8000608 <__aeabi_f2d>
 8001d26:	4682      	mov	sl, r0
 8001d28:	468b      	mov	fp, r1
    			 AcceleroODR.Frequency, AcceleroODR.Period, AcceleroODR.Tau, AccCircBuffer.Size,
 8001d2a:	4b96      	ldr	r3, [pc, #600]	; (8001f84 <main+0x2cc>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
    	 printf("Dados de aquisicao,Fr,%f,Pr,%f,Tau,%f,Amostras,%d,FFT_fr_res,%f\n",
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc6a 	bl	8000608 <__aeabi_f2d>
 8001d34:	4604      	mov	r4, r0
 8001d36:	460d      	mov	r5, r1
    			 AcceleroODR.Frequency, AcceleroODR.Period, AcceleroODR.Tau, AccCircBuffer.Size,
 8001d38:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <main+0x2cc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
    	 printf("Dados de aquisicao,Fr,%f,Pr,%f,Tau,%f,Amostras,%d,FFT_fr_res,%f\n",
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc63 	bl	8000608 <__aeabi_f2d>
 8001d42:	4680      	mov	r8, r0
 8001d44:	4689      	mov	r9, r1
    			 AcceleroODR.Frequency, AcceleroODR.Period, AcceleroODR.Tau, AccCircBuffer.Size,
 8001d46:	4b90      	ldr	r3, [pc, #576]	; (8001f88 <main+0x2d0>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
    	 printf("Dados de aquisicao,Fr,%f,Pr,%f,Tau,%f,Amostras,%d,FFT_fr_res,%f\n",
 8001d4a:	461e      	mov	r6, r3
				 AcceleroODR.Frequency / ((float)(MotionSP_Parameters.FftSize)));
 8001d4c:	4b8d      	ldr	r3, [pc, #564]	; (8001f84 <main+0x2cc>)
 8001d4e:	ed93 7a00 	vldr	s14, [r3]
 8001d52:	4b8e      	ldr	r3, [pc, #568]	; (8001f8c <main+0x2d4>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    	 printf("Dados de aquisicao,Fr,%f,Pr,%f,Tau,%f,Amostras,%d,FFT_fr_res,%f\n",
 8001d62:	ee16 0a90 	vmov	r0, s13
 8001d66:	f7fe fc4f 	bl	8000608 <__aeabi_f2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d72:	9604      	str	r6, [sp, #16]
 8001d74:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d78:	e9cd 4500 	strd	r4, r5, [sp]
 8001d7c:	4652      	mov	r2, sl
 8001d7e:	465b      	mov	r3, fp
 8001d80:	4883      	ldr	r0, [pc, #524]	; (8001f90 <main+0x2d8>)
 8001d82:	f00c fb1f 	bl	800e3c4 <iprintf>
    	 printf("RMS-ACC,ACC_rms_x,%f,ACC_rms_y,%f,ACC_rms_z,%f\n",sTimeDomain.AccRms.AXIS_X,
 8001d86:	4b83      	ldr	r3, [pc, #524]	; (8001f94 <main+0x2dc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fc3c 	bl	8000608 <__aeabi_f2d>
 8001d90:	4680      	mov	r8, r0
 8001d92:	4689      	mov	r9, r1
    			 	 	 	 	 	 	 	 	 	 	 	     sTimeDomain.AccRms.AXIS_Y,
 8001d94:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <main+0x2dc>)
 8001d96:	685b      	ldr	r3, [r3, #4]
    	 printf("RMS-ACC,ACC_rms_x,%f,ACC_rms_y,%f,ACC_rms_z,%f\n",sTimeDomain.AccRms.AXIS_X,
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fc35 	bl	8000608 <__aeabi_f2d>
 8001d9e:	4604      	mov	r4, r0
 8001da0:	460d      	mov	r5, r1
																 sTimeDomain.AccRms.AXIS_Z);
 8001da2:	4b7c      	ldr	r3, [pc, #496]	; (8001f94 <main+0x2dc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
    	 printf("RMS-ACC,ACC_rms_x,%f,ACC_rms_y,%f,ACC_rms_z,%f\n",sTimeDomain.AccRms.AXIS_X,
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fc2e 	bl	8000608 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001db4:	e9cd 4500 	strd	r4, r5, [sp]
 8001db8:	4642      	mov	r2, r8
 8001dba:	464b      	mov	r3, r9
 8001dbc:	4876      	ldr	r0, [pc, #472]	; (8001f98 <main+0x2e0>)
 8001dbe:	f00c fb01 	bl	800e3c4 <iprintf>
    	 printf("RMS-Speed,Speed_rms_x,%f,Speed_rms_y,%f,Speed_rms_z,%f\n",sTimeDomain.SpeedRms.AXIS_X/100,
 8001dc2:	4b74      	ldr	r3, [pc, #464]	; (8001f94 <main+0x2dc>)
 8001dc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dc8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001f9c <main+0x2e4>
 8001dcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dd0:	ee16 0a90 	vmov	r0, s13
 8001dd4:	f7fe fc18 	bl	8000608 <__aeabi_f2d>
 8001dd8:	4680      	mov	r8, r0
 8001dda:	4689      	mov	r9, r1
    	     			 	 	 	 	 	 	 	 	 	 	 	     sTimeDomain.SpeedRms.AXIS_Y/100,
 8001ddc:	4b6d      	ldr	r3, [pc, #436]	; (8001f94 <main+0x2dc>)
 8001dde:	edd3 7a04 	vldr	s15, [r3, #16]
 8001de2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001f9c <main+0x2e4>
 8001de6:	eec7 6a87 	vdiv.f32	s13, s15, s14
    	 printf("RMS-Speed,Speed_rms_x,%f,Speed_rms_y,%f,Speed_rms_z,%f\n",sTimeDomain.SpeedRms.AXIS_X/100,
 8001dea:	ee16 0a90 	vmov	r0, s13
 8001dee:	f7fe fc0b 	bl	8000608 <__aeabi_f2d>
 8001df2:	4604      	mov	r4, r0
 8001df4:	460d      	mov	r5, r1
    	 																 sTimeDomain.SpeedRms.AXIS_Z/100);
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <main+0x2dc>)
 8001df8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dfc:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001f9c <main+0x2e4>
 8001e00:	eec7 6a87 	vdiv.f32	s13, s15, s14
    	 printf("RMS-Speed,Speed_rms_x,%f,Speed_rms_y,%f,Speed_rms_z,%f\n",sTimeDomain.SpeedRms.AXIS_X/100,
 8001e04:	ee16 0a90 	vmov	r0, s13
 8001e08:	f7fe fbfe 	bl	8000608 <__aeabi_f2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e14:	e9cd 4500 	strd	r4, r5, [sp]
 8001e18:	4642      	mov	r2, r8
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	4860      	ldr	r0, [pc, #384]	; (8001fa0 <main+0x2e8>)
 8001e1e:	f00c fad1 	bl	800e3c4 <iprintf>
    	 printf("Pico-ACC,Pico_acc_x,%f,Pico_acc_y,%f,Pico_acc_z,%f\n",sTimeDomain.AccPeak.AXIS_X,
 8001e22:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <main+0x2dc>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fbee 	bl	8000608 <__aeabi_f2d>
 8001e2c:	4680      	mov	r8, r0
 8001e2e:	4689      	mov	r9, r1
    			 	 	 	 	 	 	 	 	 	 	 	 	 	 sTimeDomain.AccPeak.AXIS_Y,
 8001e30:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <main+0x2dc>)
 8001e32:	69db      	ldr	r3, [r3, #28]
    	 printf("Pico-ACC,Pico_acc_x,%f,Pico_acc_y,%f,Pico_acc_z,%f\n",sTimeDomain.AccPeak.AXIS_X,
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fbe7 	bl	8000608 <__aeabi_f2d>
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	460d      	mov	r5, r1
    	 														     sTimeDomain.AccPeak.AXIS_Z);
 8001e3e:	4b55      	ldr	r3, [pc, #340]	; (8001f94 <main+0x2dc>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
    	 printf("Pico-ACC,Pico_acc_x,%f,Pico_acc_y,%f,Pico_acc_z,%f\n",sTimeDomain.AccPeak.AXIS_X,
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fbe0 	bl	8000608 <__aeabi_f2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e50:	e9cd 4500 	strd	r4, r5, [sp]
 8001e54:	4642      	mov	r2, r8
 8001e56:	464b      	mov	r3, r9
 8001e58:	4852      	ldr	r0, [pc, #328]	; (8001fa4 <main+0x2ec>)
 8001e5a:	f00c fab3 	bl	800e3c4 <iprintf>
    	 /* Perform Frequency Domain analysis if buffer is full */

        if (fftIsEnabled == 1)
 8001e5e:	4b52      	ldr	r3, [pc, #328]	; (8001fa8 <main+0x2f0>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d116      	bne.n	8001e94 <main+0x1dc>
        {
          fftIsEnabled = 0;
 8001e66:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <main+0x2f0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]

          if ((HAL_GetTick() - StartTick) >= MotionSP_Parameters.tacq)
 8001e6c:	f005 fde0 	bl	8007a30 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b4e      	ldr	r3, [pc, #312]	; (8001fac <main+0x2f4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a44      	ldr	r2, [pc, #272]	; (8001f8c <main+0x2d4>)
 8001e7a:	8a92      	ldrh	r2, [r2, #20]
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d307      	bcc.n	8001e90 <main+0x1d8>
          {
            FinishAvgFlag = 1;
 8001e80:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <main+0x2f8>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
            StartTick = HAL_GetTick();
 8001e86:	f005 fdd3 	bl	8007a30 <HAL_GetTick>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a47      	ldr	r2, [pc, #284]	; (8001fac <main+0x2f4>)
 8001e8e:	6013      	str	r3, [r2, #0]
          }

          MotionSP_FrequencyDomainProcess();
 8001e90:	f00b fa02 	bl	800d298 <MotionSP_FrequencyDomainProcess>
        }
        /* Send data to GUI if total acquisition time is reached */
              if (FinishAvgFlag == 1)
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <main+0x2f8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	f040 80e6 	bne.w	800206a <main+0x3b2>
              {
                FinishAvgFlag = 0;
 8001e9e:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <main+0x2f8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
////                  {
////                	  printf("EixoZ:\n");
////                  }
////                  UART_SendMsg(&msg_dat);
//                }
                printf("\n\n\n ACC:\n");
 8001ea4:	4843      	ldr	r0, [pc, #268]	; (8001fb4 <main+0x2fc>)
 8001ea6:	f00c fb13 	bl	800e4d0 <puts>
                for (int i=0;i<AccCircBuffer.Size;i++){
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001eb0:	f102 020c 	add.w	r2, r2, #12
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e047      	b.n	8001f48 <main+0x290>
                	printf("t_a,%d,x,%f,y,%f,z,%f\n",i, AccCircBuffer.Data.AXIS_X[i], AccCircBuffer.Data.AXIS_Y[i], AccCircBuffer.Data.AXIS_Z[i]);
 8001eb8:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <main+0x2d0>)
 8001eba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ebe:	f103 030c 	add.w	r3, r3, #12
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb9b 	bl	8000608 <__aeabi_f2d>
 8001ed2:	4680      	mov	r8, r0
 8001ed4:	4689      	mov	r9, r1
 8001ed6:	4a2c      	ldr	r2, [pc, #176]	; (8001f88 <main+0x2d0>)
 8001ed8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001edc:	f103 030c 	add.w	r3, r3, #12
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f203 2302 	addw	r3, r3, #514	; 0x202
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb8b 	bl	8000608 <__aeabi_f2d>
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	460d      	mov	r5, r1
 8001ef6:	4a24      	ldr	r2, [pc, #144]	; (8001f88 <main+0x2d0>)
 8001ef8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001efc:	f103 030c 	add.w	r3, r3, #12
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb7b 	bl	8000608 <__aeabi_f2d>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f1a:	e9cd 4500 	strd	r4, r5, [sp]
 8001f1e:	4642      	mov	r2, r8
 8001f20:	464b      	mov	r3, r9
 8001f22:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f26:	f101 010c 	add.w	r1, r1, #12
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	4822      	ldr	r0, [pc, #136]	; (8001fb8 <main+0x300>)
 8001f2e:	f00c fa49 	bl	800e3c4 <iprintf>
                for (int i=0;i<AccCircBuffer.Size;i++){
 8001f32:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f36:	f103 030c 	add.w	r3, r3, #12
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f42:	f102 020c 	add.w	r2, r2, #12
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <main+0x2d0>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f52:	f103 030c 	add.w	r3, r3, #12
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	dbad      	blt.n	8001eb8 <main+0x200>

                   }

                printf("\n\n\n Speed:\n");
 8001f5c:	4817      	ldr	r0, [pc, #92]	; (8001fbc <main+0x304>)
 8001f5e:	f00c fab7 	bl	800e4d0 <puts>
				for (int i=0;i<AccCircBuffer.Size;i++){
 8001f62:	2300      	movs	r3, #0
 8001f64:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f68:	f102 0208 	add.w	r2, r2, #8
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e06f      	b.n	8002050 <main+0x398>
 8001f70:	080104d8 	.word	0x080104d8
 8001f74:	080104e0 	.word	0x080104e0
 8001f78:	080104f8 	.word	0x080104f8
 8001f7c:	08010518 	.word	0x08010518
 8001f80:	08010540 	.word	0x08010540
 8001f84:	20008a9c 	.word	0x20008a9c
 8001f88:	200059d0 	.word	0x200059d0
 8001f8c:	200059b4 	.word	0x200059b4
 8001f90:	08010548 	.word	0x08010548
 8001f94:	200071d8 	.word	0x200071d8
 8001f98:	0801058c 	.word	0x0801058c
 8001f9c:	42c80000 	.word	0x42c80000
 8001fa0:	080105bc 	.word	0x080105bc
 8001fa4:	080105f4 	.word	0x080105f4
 8001fa8:	2000723c 	.word	0x2000723c
 8001fac:	20000318 	.word	0x20000318
 8001fb0:	20007288 	.word	0x20007288
 8001fb4:	08010628 	.word	0x08010628
 8001fb8:	08010634 	.word	0x08010634
 8001fbc:	0801064c 	.word	0x0801064c
					printf("t_s,%d,x,%f,y,%f,z,%f\n",i, SpeedCircBuffer.Data.AXIS_X[i], SpeedCircBuffer.Data.AXIS_Y[i], SpeedCircBuffer.Data.AXIS_Z[i]);
 8001fc0:	4a31      	ldr	r2, [pc, #196]	; (8002088 <main+0x3d0>)
 8001fc2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fc6:	f103 0308 	add.w	r3, r3, #8
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3302      	adds	r3, #2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fb17 	bl	8000608 <__aeabi_f2d>
 8001fda:	4680      	mov	r8, r0
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4a2a      	ldr	r2, [pc, #168]	; (8002088 <main+0x3d0>)
 8001fe0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fe4:	f103 0308 	add.w	r3, r3, #8
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f203 2302 	addw	r3, r3, #514	; 0x202
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fb07 	bl	8000608 <__aeabi_f2d>
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	460d      	mov	r5, r1
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <main+0x3d0>)
 8002000:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002004:	f103 0308 	add.w	r3, r3, #8
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe faf7 	bl	8000608 <__aeabi_f2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002022:	e9cd 4500 	strd	r4, r5, [sp]
 8002026:	4642      	mov	r2, r8
 8002028:	464b      	mov	r3, r9
 800202a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800202e:	f101 0108 	add.w	r1, r1, #8
 8002032:	6809      	ldr	r1, [r1, #0]
 8002034:	4815      	ldr	r0, [pc, #84]	; (800208c <main+0x3d4>)
 8002036:	f00c f9c5 	bl	800e3c4 <iprintf>
				for (int i=0;i<AccCircBuffer.Size;i++){
 800203a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800203e:	f103 0308 	add.w	r3, r3, #8
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800204a:	f102 0208 	add.w	r2, r2, #8
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <main+0x3d8>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800205a:	f103 0308 	add.w	r3, r3, #8
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4293      	cmp	r3, r2
 8002062:	dbad      	blt.n	8001fc0 <main+0x308>

				   }
                RestartFlag = 1;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <main+0x3dc>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
              }

              printf("EOF\n", EOF);
 800206a:	f04f 31ff 	mov.w	r1, #4294967295
 800206e:	480a      	ldr	r0, [pc, #40]	; (8002098 <main+0x3e0>)
 8002070:	f00c f9a8 	bl	800e3c4 <iprintf>
              printf("%d", EOF);
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	4808      	ldr	r0, [pc, #32]	; (800209c <main+0x3e4>)
 800207a:	f00c f9a3 	bl	800e3c4 <iprintf>
              HAL_Delay(100);
 800207e:	2064      	movs	r0, #100	; 0x64
 8002080:	f005 fce2 	bl	8007a48 <HAL_Delay>
     if (Collect_Data())
 8002084:	e640      	b.n	8001d08 <main+0x50>
 8002086:	bf00      	nop
 8002088:	20007294 	.word	0x20007294
 800208c:	08010658 	.word	0x08010658
 8002090:	200059d0 	.word	0x200059d0
 8002094:	20000001 	.word	0x20000001
 8002098:	08010670 	.word	0x08010670
 800209c:	08010678 	.word	0x08010678

080020a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b096      	sub	sp, #88	; 0x58
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	2244      	movs	r2, #68	; 0x44
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f00b fc6b 	bl	800d98a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020c6:	f007 f871 	bl	80091ac <HAL_PWREx_ControlVoltageScaling>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80020d0:	f000 f8a0 	bl	8002214 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020d4:	f007 f84c 	bl	8009170 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <SystemClock_Config+0xc0>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	4a20      	ldr	r2, [pc, #128]	; (8002160 <SystemClock_Config+0xc0>)
 80020e0:	f023 0318 	bic.w	r3, r3, #24
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80020e8:	2314      	movs	r3, #20
 80020ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020ec:	2301      	movs	r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020f0:	2301      	movs	r3, #1
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80020f8:	2360      	movs	r3, #96	; 0x60
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fc:	2302      	movs	r3, #2
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002100:	2301      	movs	r3, #1
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002104:	2301      	movs	r3, #1
 8002106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002108:	2328      	movs	r3, #40	; 0x28
 800210a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800210c:	2307      	movs	r3, #7
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002110:	2302      	movs	r3, #2
 8002112:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002114:	2302      	movs	r3, #2
 8002116:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4618      	mov	r0, r3
 800211e:	f007 f89b 	bl	8009258 <HAL_RCC_OscConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002128:	f000 f874 	bl	8002214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800212c:	230f      	movs	r3, #15
 800212e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002130:	2303      	movs	r3, #3
 8002132:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002140:	463b      	mov	r3, r7
 8002142:	2104      	movs	r1, #4
 8002144:	4618      	mov	r0, r3
 8002146:	f007 fc6d 	bl	8009a24 <HAL_RCC_ClockConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002150:	f000 f860 	bl	8002214 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002154:	f008 f956 	bl	800a404 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002158:	bf00      	nop
 800215a:	3758      	adds	r7, #88	; 0x58
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000

08002164 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	2017      	movs	r0, #23
 800216e:	f005 fd8e 	bl	8007c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002172:	2017      	movs	r0, #23
 8002174:	f005 fda7 	bl	8007cc6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2028      	movs	r0, #40	; 0x28
 800217e:	f005 fd86 	bl	8007c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002182:	2028      	movs	r0, #40	; 0x28
 8002184:	f005 fd9f 	bl	8007cc6 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	2036      	movs	r0, #54	; 0x36
 800218e:	f005 fd7e 	bl	8007c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002192:	2036      	movs	r0, #54	; 0x36
 8002194:	f005 fd97 	bl	8007cc6 <HAL_NVIC_EnableIRQ>
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <Console_UART_Init>:

/**
  * @brief UART console init function
  */
static void Console_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  console_uart.Instance = USART1;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <Console_UART_Init+0x4c>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <Console_UART_Init+0x50>)
 80021a4:	601a      	str	r2, [r3, #0]
  console_uart.Init.BaudRate = 115200;
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <Console_UART_Init+0x4c>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  console_uart.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <Console_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  console_uart.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <Console_UART_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  console_uart.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <Console_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  console_uart.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <Console_UART_Init+0x4c>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  console_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <Console_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  console_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <Console_UART_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
#ifdef UART_ONE_BIT_SAMPLE_DISABLE
  console_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <Console_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  console_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <Console_UART_Init+0x4c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
#endif
  BSP_COM_Init(COM1);//,&console_uart);
 80021de:	2000      	movs	r0, #0
 80021e0:	f000 fa24 	bl	800262c <BSP_COM_Init>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000294 	.word	0x20000294
 80021ec:	40013800 	.word	0x40013800

080021f0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */
int i;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  i++;
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002200:	6013      	str	r3, [r2, #0]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20004428 	.word	0x20004428

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	e7fe      	b.n	800221c <Error_Handler+0x8>
	...

08002220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_MspInit+0x44>)
 8002228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_MspInit+0x44>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6613      	str	r3, [r2, #96]	; 0x60
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_MspInit+0x44>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_MspInit+0x44>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_MspInit+0x44>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002248:	6593      	str	r3, [r2, #88]	; 0x58
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_MspInit+0x44>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800226c:	e7fe      	b.n	800226c <NMI_Handler+0x4>

0800226e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002272:	e7fe      	b.n	8002272 <HardFault_Handler+0x4>

08002274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <MemManage_Handler+0x4>

0800227a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <UsageFault_Handler+0x4>

08002286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b4:	f005 fba8 	bl	8007a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80022c0:	2020      	movs	r0, #32
 80022c2:	f006 f949 	bl	8008558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80022c6:	2040      	movs	r0, #64	; 0x40
 80022c8:	f006 f946 	bl	8008558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80022cc:	2080      	movs	r0, #128	; 0x80
 80022ce:	f006 f943 	bl	8008558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80022d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022d6:	f006 f93f 	bl	8008558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <I2C2_EV_IRQHandler+0x10>)
 80022e6:	f006 fc5b 	bl	8008ba0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200044fc 	.word	0x200044fc

080022f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80022f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022fc:	f006 f92c 	bl	8008558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_11);
 8002300:	4807      	ldr	r0, [pc, #28]	; (8002320 <EXTI15_10_IRQHandler+0x2c>)
 8002302:	f005 fe43 	bl	8007f8c <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002306:	4807      	ldr	r0, [pc, #28]	; (8002324 <EXTI15_10_IRQHandler+0x30>)
 8002308:	f005 fe40 	bl	8007f8c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800230c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002310:	f006 f922 	bl	8008558 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002314:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002318:	f006 f91e 	bl	8008558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000074 	.word	0x20000074
 8002324:	20000008 	.word	0x20000008

08002328 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <TIM6_DAC_IRQHandler+0x10>)
 800232e:	f008 faa2 	bl	800a876 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000442c 	.word	0x2000442c

0800233c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
	return 1;
 8002340:	2301      	movs	r3, #1
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_kill>:

int _kill(int pid, int sig)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002356:	f00b f925 	bl	800d5a4 <__errno>
 800235a:	4603      	mov	r3, r0
 800235c:	2216      	movs	r2, #22
 800235e:	601a      	str	r2, [r3, #0]
	return -1;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_exit>:

void _exit (int status)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ffe7 	bl	800234c <_kill>
	while (1) {}		/* Make sure we hang here */
 800237e:	e7fe      	b.n	800237e <_exit+0x12>

08002380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e00a      	b.n	80023a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002392:	f3af 8000 	nop.w
 8002396:	4601      	mov	r1, r0
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	b2ca      	uxtb	r2, r1
 80023a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3301      	adds	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	dbf0      	blt.n	8002392 <_read+0x12>
	}

return len;
 80023b0:	687b      	ldr	r3, [r7, #4]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e009      	b.n	80023e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	60ba      	str	r2, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f99b 	bl	8002710 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbf1      	blt.n	80023cc <_write+0x12>
	}
	return len;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_close>:

int _close(int file)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
	return -1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800241a:	605a      	str	r2, [r3, #4]
	return 0;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <_isatty>:

int _isatty(int file)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
	return 1;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
	return 0;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <_sbrk+0x5c>)
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <_sbrk+0x60>)
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <_sbrk+0x64>)
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <_sbrk+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	429a      	cmp	r2, r3
 800248a:	d207      	bcs.n	800249c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800248c:	f00b f88a 	bl	800d5a4 <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	220c      	movs	r2, #12
 8002494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e009      	b.n	80024b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_sbrk+0x64>)
 80024ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20018000 	.word	0x20018000
 80024bc:	00000400 	.word	0x00000400
 80024c0:	2000031c 	.word	0x2000031c
 80024c4:	20008ab8 	.word	0x20008ab8

080024c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <SystemInit+0x5c>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	4a14      	ldr	r2, [pc, #80]	; (8002524 <SystemInit+0x5c>)
 80024d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <SystemInit+0x60>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <SystemInit+0x60>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <SystemInit+0x60>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <SystemInit+0x60>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <SystemInit+0x60>)
 80024f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80024f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80024fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <SystemInit+0x60>)
 8002500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002504:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <SystemInit+0x60>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a07      	ldr	r2, [pc, #28]	; (8002528 <SystemInit+0x60>)
 800250c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SystemInit+0x60>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00
 8002528:	40021000 	.word	0x40021000

0800252c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <MX_TIM6_Init+0x64>)
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <MX_TIM6_Init+0x68>)
 8002540:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <MX_TIM6_Init+0x64>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_TIM6_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <MX_TIM6_Init+0x64>)
 8002550:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002554:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_TIM6_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <MX_TIM6_Init+0x64>)
 800255e:	f008 f933 	bl	800a7c8 <HAL_TIM_Base_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002568:	f7ff fe54 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	4619      	mov	r1, r3
 8002578:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_TIM6_Init+0x64>)
 800257a:	f008 fb5d 	bl	800ac38 <HAL_TIMEx_MasterConfigSynchronization>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002584:	f7ff fe46 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	2000442c 	.word	0x2000442c
 8002594:	40001000 	.word	0x40001000

08002598 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_TIM_Base_MspInit+0x38>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10b      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_TIM_Base_MspInit+0x3c>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_TIM_Base_MspInit+0x3c>)
 80025b0:	f043 0310 	orr.w	r3, r3, #16
 80025b4:	6593      	str	r3, [r2, #88]	; 0x58
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <HAL_TIM_Base_MspInit+0x3c>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40001000 	.word	0x40001000
 80025d4:	40021000 	.word	0x40021000

080025d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025dc:	f7ff ff74 	bl	80024c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025e2:	e003      	b.n	80025ec <LoopCopyDataInit>

080025e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025ea:	3104      	adds	r1, #4

080025ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025ec:	480a      	ldr	r0, [pc, #40]	; (8002618 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <LoopForever+0xe>)
	adds	r2, r0, r1
 80025f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025f4:	d3f6      	bcc.n	80025e4 <CopyDataInit>
	ldr	r2, =_sbss
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <LoopForever+0x12>)
	b	LoopFillZerobss
 80025f8:	e002      	b.n	8002600 <LoopFillZerobss>

080025fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025fc:	f842 3b04 	str.w	r3, [r2], #4

08002600 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <LoopForever+0x16>)
	cmp	r2, r3
 8002602:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002604:	d3f9      	bcc.n	80025fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002606:	f00b f98b 	bl	800d920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800260a:	f7ff fb55 	bl	8001cb8 <main>

0800260e <LoopForever>:

LoopForever:
    b LoopForever
 800260e:	e7fe      	b.n	800260e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002610:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002614:	080247c8 	.word	0x080247c8
	ldr	r0, =_sdata
 8002618:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800261c:	20000264 	.word	0x20000264
	ldr	r2, =_sbss
 8002620:	20000264 	.word	0x20000264
	ldr	r3, = _ebss
 8002624:	20008ab8 	.word	0x20008ab8

08002628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC1_2_IRQHandler>
	...

0800262c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d903      	bls.n	8002648 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002640:	f06f 0301 	mvn.w	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	e025      	b.n	8002694 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	79fa      	ldrb	r2, [r7, #7]
 800264c:	4914      	ldr	r1, [pc, #80]	; (80026a0 <BSP_COM_Init+0x74>)
 800264e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002652:	4814      	ldr	r0, [pc, #80]	; (80026a4 <BSP_COM_Init+0x78>)
 8002654:	4613      	mov	r3, r2
 8002656:	015b      	lsls	r3, r3, #5
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4403      	add	r3, r0
 800265e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002660:	79fa      	ldrb	r2, [r7, #7]
 8002662:	4613      	mov	r3, r2
 8002664:	015b      	lsls	r3, r3, #5
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <BSP_COM_Init+0x78>)
 800266c:	4413      	add	r3, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f86a 	bl	8002748 <USART1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8002674:	79fa      	ldrb	r2, [r7, #7]
 8002676:	4613      	mov	r3, r2
 8002678:	015b      	lsls	r3, r3, #5
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <BSP_COM_Init+0x78>)
 8002680:	4413      	add	r3, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f810 	bl	80026a8 <MX_USART1_UART_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800268e:	f06f 0303 	mvn.w	r3, #3
 8002692:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002694:	68fb      	ldr	r3, [r7, #12]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000010 	.word	0x20000010
 80026a4:	20004478 	.word	0x20004478

080026a8 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a15      	ldr	r2, [pc, #84]	; (800270c <MX_USART1_UART_Init+0x64>)
 80026b8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	220c      	movs	r2, #12
 80026d8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f008 fb46 	bl	800ad84 <HAL_UART_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40013800 	.word	0x40013800

08002710 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <__io_putchar+0x30>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4613      	mov	r3, r2
 8002720:	015b      	lsls	r3, r3, #5
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4a07      	ldr	r2, [pc, #28]	; (8002744 <__io_putchar+0x34>)
 8002728:	1898      	adds	r0, r3, r2
 800272a:	1d39      	adds	r1, r7, #4
 800272c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002730:	2201      	movs	r2, #1
 8002732:	f008 fb7f 	bl	800ae34 <HAL_UART_Transmit>
  return ch;
 8002736:	687b      	ldr	r3, [r7, #4]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000320 	.word	0x20000320
 8002744:	20004478 	.word	0x20004478

08002748 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <USART1_MspInit+0x80>)
 8002752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002754:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <USART1_MspInit+0x80>)
 8002756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275a:	6613      	str	r3, [r2, #96]	; 0x60
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <USART1_MspInit+0x80>)
 800275e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <USART1_MspInit+0x80>)
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <USART1_MspInit+0x80>)
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <USART1_MspInit+0x80>)
 8002776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8002780:	2340      	movs	r3, #64	; 0x40
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8002790:	2307      	movs	r3, #7
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	480c      	ldr	r0, [pc, #48]	; (80027cc <USART1_MspInit+0x84>)
 800279c:	f005 fc26 	bl	8007fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 80027b0:	2307      	movs	r3, #7
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	4804      	ldr	r0, [pc, #16]	; (80027cc <USART1_MspInit+0x84>)
 80027bc:	f005 fc16 	bl	8007fec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80027c0:	bf00      	nop
 80027c2:	3728      	adds	r7, #40	; 0x28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	48000400 	.word	0x48000400

080027d0 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <BSP_I2C2_Init+0x70>)
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <BSP_I2C2_Init+0x74>)
 80027de:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <BSP_I2C2_Init+0x78>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	4918      	ldr	r1, [pc, #96]	; (8002848 <BSP_I2C2_Init+0x78>)
 80027e8:	600a      	str	r2, [r1, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d122      	bne.n	8002834 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 80027ee:	4814      	ldr	r0, [pc, #80]	; (8002840 <BSP_I2C2_Init+0x70>)
 80027f0:	f006 f9f0 	bl	8008bd4 <HAL_I2C_GetState>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11c      	bne.n	8002834 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 80027fa:	4811      	ldr	r0, [pc, #68]	; (8002840 <BSP_I2C2_Init+0x70>)
 80027fc:	f000 f8fe 	bl	80029fc <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002806:	480e      	ldr	r0, [pc, #56]	; (8002840 <BSP_I2C2_Init+0x70>)
 8002808:	f000 f8b4 	bl	8002974 <MX_I2C2_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002812:	f06f 0307 	mvn.w	r3, #7
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	e00c      	b.n	8002834 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800281a:	2100      	movs	r1, #0
 800281c:	4808      	ldr	r0, [pc, #32]	; (8002840 <BSP_I2C2_Init+0x70>)
 800281e:	f006 fc0f 	bl	8009040 <HAL_I2CEx_ConfigAnalogFilter>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002828:	f06f 0307 	mvn.w	r3, #7
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	e001      	b.n	8002834 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200044fc 	.word	0x200044fc
 8002844:	40005800 	.word	0x40005800
 8002848:	20000324 	.word	0x20000324

0800284c <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <BSP_I2C2_DeInit+0x48>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d014      	beq.n	8002888 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <BSP_I2C2_DeInit+0x48>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3b01      	subs	r3, #1
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <BSP_I2C2_DeInit+0x48>)
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <BSP_I2C2_DeInit+0x48>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002870:	4809      	ldr	r0, [pc, #36]	; (8002898 <BSP_I2C2_DeInit+0x4c>)
 8002872:	f000 f911 	bl	8002a98 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002876:	4808      	ldr	r0, [pc, #32]	; (8002898 <BSP_I2C2_DeInit+0x4c>)
 8002878:	f005 ff20 	bl	80086bc <HAL_I2C_DeInit>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002882:	f06f 0307 	mvn.w	r3, #7
 8002886:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000324 	.word	0x20000324
 8002898:	200044fc 	.word	0x200044fc

0800289c <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af04      	add	r7, sp, #16
 80028a2:	60ba      	str	r2, [r7, #8]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	81fb      	strh	r3, [r7, #14]
 80028aa:	460b      	mov	r3, r1
 80028ac:	81bb      	strh	r3, [r7, #12]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80028b6:	89ba      	ldrh	r2, [r7, #12]
 80028b8:	89f9      	ldrh	r1, [r7, #14]
 80028ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2301      	movs	r3, #1
 80028ca:	480c      	ldr	r0, [pc, #48]	; (80028fc <BSP_I2C2_WriteReg+0x60>)
 80028cc:	f005 ff3a 	bl	8008744 <HAL_I2C_Mem_Write>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00c      	beq.n	80028f0 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80028d6:	4809      	ldr	r0, [pc, #36]	; (80028fc <BSP_I2C2_WriteReg+0x60>)
 80028d8:	f006 f98a 	bl	8008bf0 <HAL_I2C_GetError>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d103      	bne.n	80028ea <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80028e2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e002      	b.n	80028f0 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80028ea:	f06f 0303 	mvn.w	r3, #3
 80028ee:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80028f0:	697b      	ldr	r3, [r7, #20]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200044fc 	.word	0x200044fc

08002900 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af04      	add	r7, sp, #16
 8002906:	60ba      	str	r2, [r7, #8]
 8002908:	461a      	mov	r2, r3
 800290a:	4603      	mov	r3, r0
 800290c:	81fb      	strh	r3, [r7, #14]
 800290e:	460b      	mov	r3, r1
 8002910:	81bb      	strh	r3, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 800291a:	89ba      	ldrh	r2, [r7, #12]
 800291c:	89f9      	ldrh	r1, [r7, #14]
 800291e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2301      	movs	r3, #1
 800292e:	480c      	ldr	r0, [pc, #48]	; (8002960 <BSP_I2C2_ReadReg+0x60>)
 8002930:	f006 f81c 	bl	800896c <HAL_I2C_Mem_Read>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800293a:	4809      	ldr	r0, [pc, #36]	; (8002960 <BSP_I2C2_ReadReg+0x60>)
 800293c:	f006 f958 	bl	8008bf0 <HAL_I2C_GetError>
 8002940:	4603      	mov	r3, r0
 8002942:	2b04      	cmp	r3, #4
 8002944:	d103      	bne.n	800294e <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002946:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e002      	b.n	8002954 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800294e:	f06f 0303 	mvn.w	r3, #3
 8002952:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002954:	697b      	ldr	r3, [r7, #20]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200044fc 	.word	0x200044fc

08002964 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002968:	f005 f862 	bl	8007a30 <HAL_GetTick>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <MX_I2C2_Init+0x80>)
 8002984:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <MX_I2C2_Init+0x84>)
 800298a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f005 fdf1 	bl	800859e <HAL_I2C_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029c6:	2100      	movs	r1, #0
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f006 fb39 	bl	8009040 <HAL_I2CEx_ConfigAnalogFilter>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80029d8:	2100      	movs	r1, #0
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f006 fb7b 	bl	80090d6 <HAL_I2CEx_ConfigDigitalFilter>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40005800 	.word	0x40005800
 80029f8:	10909cec 	.word	0x10909cec

080029fc <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <I2C2_MspInit+0x94>)
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <I2C2_MspInit+0x94>)
 8002a0a:	f043 0302 	orr.w	r3, r3, #2
 8002a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <I2C2_MspInit+0x94>)
 8002a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a22:	2312      	movs	r3, #18
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	4816      	ldr	r0, [pc, #88]	; (8002a94 <I2C2_MspInit+0x98>)
 8002a3a:	f005 fad7 	bl	8007fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002a3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a44:	2312      	movs	r3, #18
 8002a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002a50:	2304      	movs	r3, #4
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480e      	ldr	r0, [pc, #56]	; (8002a94 <I2C2_MspInit+0x98>)
 8002a5c:	f005 fac6 	bl	8007fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <I2C2_MspInit+0x94>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <I2C2_MspInit+0x94>)
 8002a66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <I2C2_MspInit+0x94>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	2021      	movs	r0, #33	; 0x21
 8002a7e:	f005 f906 	bl	8007c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002a82:	2021      	movs	r0, #33	; 0x21
 8002a84:	f005 f91f 	bl	8007cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	48000400 	.word	0x48000400

08002a98 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <I2C2_MspDeInit+0x38>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <I2C2_MspDeInit+0x38>)
 8002aa6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab0:	4808      	ldr	r0, [pc, #32]	; (8002ad4 <I2C2_MspDeInit+0x3c>)
 8002ab2:	f005 fc45 	bl	8008340 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002aba:	4806      	ldr	r0, [pc, #24]	; (8002ad4 <I2C2_MspDeInit+0x3c>)
 8002abc:	f005 fc40 	bl	8008340 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8002ac0:	2021      	movs	r0, #33	; 0x21
 8002ac2:	f005 f90e 	bl	8007ce2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48000400 	.word	0x48000400

08002ad8 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e04d      	b.n	8002b90 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	7b1a      	ldrb	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <LSM6DSL_RegisterBusIO+0xc4>)
 8002b30:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <LSM6DSL_RegisterBusIO+0xc8>)
 8002b36:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e020      	b.n	8002b90 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4798      	blx	r3
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e016      	b.n	8002b90 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d112      	bne.n	8002b90 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002b74:	230c      	movs	r3, #12
 8002b76:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8002b78:	7afb      	ldrb	r3, [r7, #11]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2112      	movs	r1, #18
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fd47 	bl	8003612 <LSM6DSL_Write_Reg>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002b90:	68fb      	ldr	r3, [r7, #12]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	08003fa5 	.word	0x08003fa5
 8002ba0:	08003fdb 	.word	0x08003fdb

08002ba4 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	331c      	adds	r3, #28
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fd2b 	bl	800460e <lsm6dsl_auto_increment_set>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	e054      	b.n	8002c6e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	331c      	adds	r3, #28
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fc2c 	bl	8004428 <lsm6dsl_block_data_update_set>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bda:	e048      	b.n	8002c6e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	331c      	adds	r3, #28
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 f86e 	bl	8004cc4 <lsm6dsl_fifo_mode_set>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e03c      	b.n	8002c6e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	331c      	adds	r3, #28
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 fa92 	bl	800412c <lsm6dsl_xl_data_rate_set>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	e02c      	b.n	8002c6e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	331c      	adds	r3, #28
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 fa28 	bl	8004070 <lsm6dsl_xl_full_scale_set>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	e020      	b.n	8002c6e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	331c      	adds	r3, #28
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fb6c 	bl	8004318 <lsm6dsl_gy_data_rate_set>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002c46:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4a:	e010      	b.n	8002c6e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	331c      	adds	r3, #28
 8002c50:	2106      	movs	r1, #6
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 faf8 	bl	8004248 <lsm6dsl_gy_full_scale_set>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	e004      	b.n	8002c6e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f888 	bl	8002d94 <LSM6DSL_ACC_Disable>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e015      	b.n	8002cbc <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa9a 	bl	80031ca <LSM6DSL_GYRO_Disable>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca0:	e00c      	b.n	8002cbc <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	331c      	adds	r3, #28
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 fc89 	bl	80045ec <lsm6dsl_device_id_get>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce4:	e000      	b.n	8002ce8 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2201      	movs	r2, #1
 8002d04:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d18:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <LSM6DSL_GetCapabilities+0x58>)
 8002d2a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <LSM6DSL_GetCapabilities+0x58>)
 8002d30:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	45d02000 	.word	0x45d02000

08002d4c <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e014      	b.n	8002d8c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f103 021c 	add.w	r2, r3, #28
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f001 f9db 	bl	800412c <lsm6dsl_xl_data_rate_set>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d80:	e004      	b.n	8002d8c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e01f      	b.n	8002dea <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f103 021c 	add.w	r2, r3, #28
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	332b      	adds	r3, #43	; 0x2b
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f001 f9de 	bl	8004178 <lsm6dsl_xl_data_rate_get>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e010      	b.n	8002dea <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	331c      	adds	r3, #28
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 f9ac 	bl	800412c <lsm6dsl_xl_data_rate_set>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
 8002dde:	e004      	b.n	8002dea <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	331c      	adds	r3, #28
 8002e06:	f107 020b 	add.w	r2, r7, #11
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 f955 	bl	80040bc <lsm6dsl_xl_full_scale_get>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8002e18:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1c:	e023      	b.n	8002e66 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d81b      	bhi.n	8002e5c <LSM6DSL_ACC_GetSensitivity+0x68>
 8002e24:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e3d 	.word	0x08002e3d
 8002e30:	08002e55 	.word	0x08002e55
 8002e34:	08002e45 	.word	0x08002e45
 8002e38:	08002e4d 	.word	0x08002e4d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8002e40:	601a      	str	r2, [r3, #0]
      break;
 8002e42:	e00f      	b.n	8002e64 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8002e48:	601a      	str	r2, [r3, #0]
      break;
 8002e4a:	e00b      	b.n	8002e64 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8002e50:	601a      	str	r2, [r3, #0]
      break;
 8002e52:	e007      	b.n	8002e64 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8002e58:	601a      	str	r2, [r3, #0]
      break;
 8002e5a:	e003      	b.n	8002e64 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e60:	60fb      	str	r3, [r7, #12]
      break;
 8002e62:	bf00      	nop
  }

  return ret;
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	3d79db23 	.word	0x3d79db23
 8002e74:	3df9db23 	.word	0x3df9db23
 8002e78:	3e79db23 	.word	0x3e79db23
 8002e7c:	3ef9db23 	.word	0x3ef9db23

08002e80 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	331c      	adds	r3, #28
 8002e92:	f107 020b 	add.w	r2, r7, #11
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f001 f96d 	bl	8004178 <lsm6dsl_xl_data_rate_get>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	e054      	b.n	8002f54 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	2b0b      	cmp	r3, #11
 8002eae:	d84c      	bhi.n	8002f4a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002ee9 	.word	0x08002ee9
 8002ebc:	08002efb 	.word	0x08002efb
 8002ec0:	08002f03 	.word	0x08002f03
 8002ec4:	08002f0b 	.word	0x08002f0b
 8002ec8:	08002f13 	.word	0x08002f13
 8002ecc:	08002f1b 	.word	0x08002f1b
 8002ed0:	08002f23 	.word	0x08002f23
 8002ed4:	08002f2b 	.word	0x08002f2b
 8002ed8:	08002f33 	.word	0x08002f33
 8002edc:	08002f3b 	.word	0x08002f3b
 8002ee0:	08002f43 	.word	0x08002f43
 8002ee4:	08002ef3 	.word	0x08002ef3
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
      break;
 8002ef0:	e02f      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8002ef6:	601a      	str	r2, [r3, #0]
      break;
 8002ef8:	e02b      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8002efe:	601a      	str	r2, [r3, #0]
      break;
 8002f00:	e027      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8002f06:	601a      	str	r2, [r3, #0]
      break;
 8002f08:	e023      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8002f0e:	601a      	str	r2, [r3, #0]
      break;
 8002f10:	e01f      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8002f16:	601a      	str	r2, [r3, #0]
      break;
 8002f18:	e01b      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8002f1e:	601a      	str	r2, [r3, #0]
      break;
 8002f20:	e017      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8002f26:	601a      	str	r2, [r3, #0]
      break;
 8002f28:	e013      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8002f2e:	601a      	str	r2, [r3, #0]
      break;
 8002f30:	e00f      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8002f36:	601a      	str	r2, [r3, #0]
      break;
 8002f38:	e00b      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8002f3e:	601a      	str	r2, [r3, #0]
      break;
 8002f40:	e007      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8002f46:	601a      	str	r2, [r3, #0]
      break;
 8002f48:	e003      	b.n	8002f52 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4e:	60fb      	str	r3, [r7, #12]
      break;
 8002f50:	bf00      	nop
  }

  return ret;
 8002f52:	68fb      	ldr	r3, [r7, #12]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	3fcccccd 	.word	0x3fcccccd
 8002f60:	41480000 	.word	0x41480000
 8002f64:	41d00000 	.word	0x41d00000
 8002f68:	42500000 	.word	0x42500000
 8002f6c:	42d00000 	.word	0x42d00000
 8002f70:	43500000 	.word	0x43500000
 8002f74:	43d00000 	.word	0x43d00000
 8002f78:	44504000 	.word	0x44504000
 8002f7c:	44cf8000 	.word	0x44cf8000
 8002f80:	45502000 	.word	0x45502000
 8002f84:	45d02000 	.word	0x45d02000

08002f88 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d106      	bne.n	8002fac <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002f9e:	ed97 0a00 	vldr	s0, [r7]
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fde2 	bl	8003b6c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	e005      	b.n	8002fb8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002fac:	ed97 0a00 	vldr	s0, [r7]
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fe67 	bl	8003c84 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8002fb6:	4603      	mov	r3, r0
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	331c      	adds	r3, #28
 8002fd2:	f107 020b 	add.w	r2, r7, #11
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 f86f 	bl	80040bc <lsm6dsl_xl_full_scale_get>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8002fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe8:	e023      	b.n	8003032 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002fea:	7afb      	ldrb	r3, [r7, #11]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d81b      	bhi.n	8003028 <LSM6DSL_ACC_GetFullScale+0x68>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <LSM6DSL_ACC_GetFullScale+0x38>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	08003009 	.word	0x08003009
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003011 	.word	0x08003011
 8003004:	08003019 	.word	0x08003019
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2202      	movs	r2, #2
 800300c:	601a      	str	r2, [r3, #0]
      break;
 800300e:	e00f      	b.n	8003030 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2204      	movs	r2, #4
 8003014:	601a      	str	r2, [r3, #0]
      break;
 8003016:	e00b      	b.n	8003030 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2208      	movs	r2, #8
 800301c:	601a      	str	r2, [r3, #0]
      break;
 800301e:	e007      	b.n	8003030 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2210      	movs	r2, #16
 8003024:	601a      	str	r2, [r3, #0]
      break;
 8003026:	e003      	b.n	8003030 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003028:	f04f 33ff 	mov.w	r3, #4294967295
 800302c:	60fb      	str	r3, [r7, #12]
      break;
 800302e:	bf00      	nop
  }

  return ret;
 8003030:	68fb      	ldr	r3, [r7, #12]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop

0800303c <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b02      	cmp	r3, #2
 800304a:	dd0b      	ble.n	8003064 <LSM6DSL_ACC_SetFullScale+0x28>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b04      	cmp	r3, #4
 8003050:	dd06      	ble.n	8003060 <LSM6DSL_ACC_SetFullScale+0x24>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b08      	cmp	r3, #8
 8003056:	dc01      	bgt.n	800305c <LSM6DSL_ACC_SetFullScale+0x20>
 8003058:	2303      	movs	r3, #3
 800305a:	e004      	b.n	8003066 <LSM6DSL_ACC_SetFullScale+0x2a>
 800305c:	2301      	movs	r3, #1
 800305e:	e002      	b.n	8003066 <LSM6DSL_ACC_SetFullScale+0x2a>
 8003060:	2302      	movs	r3, #2
 8003062:	e000      	b.n	8003066 <LSM6DSL_ACC_SetFullScale+0x2a>
 8003064:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8003066:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	331c      	adds	r3, #28
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fffd 	bl	8004070 <lsm6dsl_xl_full_scale_set>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295
 8003080:	e000      	b.n	8003084 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	331c      	adds	r3, #28
 800309a:	f107 0208 	add.w	r2, r7, #8
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 fa32 	bl	800450a <lsm6dsl_acceleration_raw_get>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295
 80030b0:	e00c      	b.n	80030cc <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80030b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80030ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80030c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	331c      	adds	r3, #28
 80030e8:	f107 0210 	add.w	r2, r7, #16
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 fa0b 	bl	800450a <lsm6dsl_acceleration_raw_get>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	e03c      	b.n	800317a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fe74 	bl	8002df4 <LSM6DSL_ACC_GetSensitivity>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	e030      	b.n	800317a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003118:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003124:	edd7 7a03 	vldr	s15, [r7, #12]
 8003128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003130:	ee17 2a90 	vmov	r2, s15
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003138:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003144:	edd7 7a03 	vldr	s15, [r7, #12]
 8003148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003150:	ee17 2a90 	vmov	r2, s15
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003158:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003164:	edd7 7a03 	vldr	s15, [r7, #12]
 8003168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003170:	ee17 2a90 	vmov	r2, s15
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e014      	b.n	80031c2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f103 021c 	add.w	r2, r3, #28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f001 f8b6 	bl	8004318 <lsm6dsl_gy_data_rate_set>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	e004      	b.n	80031c2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e01f      	b.n	8003220 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f103 021c 	add.w	r2, r3, #28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	332c      	adds	r3, #44	; 0x2c
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f001 f8b9 	bl	8004364 <lsm6dsl_gy_data_rate_get>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	e010      	b.n	8003220 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	331c      	adds	r3, #28
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f001 f887 	bl	8004318 <lsm6dsl_gy_data_rate_set>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	e004      	b.n	8003220 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	331c      	adds	r3, #28
 800323a:	f107 020b 	add.w	r2, r7, #11
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f001 f827 	bl	8004294 <lsm6dsl_gy_full_scale_get>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	e02d      	b.n	80032ae <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	2b06      	cmp	r3, #6
 8003256:	d825      	bhi.n	80032a4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003285 	.word	0x08003285
 8003264:	0800327d 	.word	0x0800327d
 8003268:	0800328d 	.word	0x0800328d
 800326c:	080032a5 	.word	0x080032a5
 8003270:	08003295 	.word	0x08003295
 8003274:	080032a5 	.word	0x080032a5
 8003278:	0800329d 	.word	0x0800329d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8003280:	601a      	str	r2, [r3, #0]
      break;
 8003282:	e013      	b.n	80032ac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4a0d      	ldr	r2, [pc, #52]	; (80032bc <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8003288:	601a      	str	r2, [r3, #0]
      break;
 800328a:	e00f      	b.n	80032ac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8003290:	601a      	str	r2, [r3, #0]
      break;
 8003292:	e00b      	b.n	80032ac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8003298:	601a      	str	r2, [r3, #0]
      break;
 800329a:	e007      	b.n	80032ac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80032a0:	601a      	str	r2, [r3, #0]
      break;
 80032a2:	e003      	b.n	80032ac <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	60fb      	str	r3, [r7, #12]
      break;
 80032aa:	bf00      	nop
  }

  return ret;
 80032ac:	68fb      	ldr	r3, [r7, #12]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	408c0000 	.word	0x408c0000
 80032bc:	410c0000 	.word	0x410c0000
 80032c0:	418c0000 	.word	0x418c0000
 80032c4:	420c0000 	.word	0x420c0000
 80032c8:	428c0000 	.word	0x428c0000

080032cc <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	331c      	adds	r3, #28
 80032de:	f107 020b 	add.w	r2, r7, #11
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 f83d 	bl	8004364 <lsm6dsl_gy_data_rate_get>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80032f0:	f04f 33ff 	mov.w	r3, #4294967295
 80032f4:	e04e      	b.n	8003394 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80032f6:	7afb      	ldrb	r3, [r7, #11]
 80032f8:	2b0a      	cmp	r3, #10
 80032fa:	d846      	bhi.n	800338a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003331 	.word	0x08003331
 8003308:	0800333b 	.word	0x0800333b
 800330c:	08003343 	.word	0x08003343
 8003310:	0800334b 	.word	0x0800334b
 8003314:	08003353 	.word	0x08003353
 8003318:	0800335b 	.word	0x0800335b
 800331c:	08003363 	.word	0x08003363
 8003320:	0800336b 	.word	0x0800336b
 8003324:	08003373 	.word	0x08003373
 8003328:	0800337b 	.word	0x0800337b
 800332c:	08003383 	.word	0x08003383
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
      break;
 8003338:	e02b      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	4a17      	ldr	r2, [pc, #92]	; (800339c <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800333e:	601a      	str	r2, [r3, #0]
      break;
 8003340:	e027      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8003346:	601a      	str	r2, [r3, #0]
      break;
 8003348:	e023      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800334e:	601a      	str	r2, [r3, #0]
      break;
 8003350:	e01f      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8003356:	601a      	str	r2, [r3, #0]
      break;
 8003358:	e01b      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	4a13      	ldr	r2, [pc, #76]	; (80033ac <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800335e:	601a      	str	r2, [r3, #0]
      break;
 8003360:	e017      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8003366:	601a      	str	r2, [r3, #0]
      break;
 8003368:	e013      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800336e:	601a      	str	r2, [r3, #0]
      break;
 8003370:	e00f      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	4a10      	ldr	r2, [pc, #64]	; (80033b8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8003376:	601a      	str	r2, [r3, #0]
      break;
 8003378:	e00b      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	4a0f      	ldr	r2, [pc, #60]	; (80033bc <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800337e:	601a      	str	r2, [r3, #0]
      break;
 8003380:	e007      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8003386:	601a      	str	r2, [r3, #0]
      break;
 8003388:	e003      	b.n	8003392 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800338a:	f04f 33ff 	mov.w	r3, #4294967295
 800338e:	60fb      	str	r3, [r7, #12]
      break;
 8003390:	bf00      	nop
  }

  return ret;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	41480000 	.word	0x41480000
 80033a0:	41d00000 	.word	0x41d00000
 80033a4:	42500000 	.word	0x42500000
 80033a8:	42d00000 	.word	0x42d00000
 80033ac:	43500000 	.word	0x43500000
 80033b0:	43d00000 	.word	0x43d00000
 80033b4:	44504000 	.word	0x44504000
 80033b8:	44cf8000 	.word	0x44cf8000
 80033bc:	45502000 	.word	0x45502000
 80033c0:	45d02000 	.word	0x45d02000

080033c4 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d106      	bne.n	80033e8 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80033da:	ed97 0a00 	vldr	s0, [r7]
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fcd2 	bl	8003d88 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	e005      	b.n	80033f4 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80033e8:	ed97 0a00 	vldr	s0, [r7]
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fd57 	bl	8003ea0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 80033f2:	4603      	mov	r3, r0
  }
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	331c      	adds	r3, #28
 800340e:	f107 020b 	add.w	r2, r7, #11
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f000 ff3d 	bl	8004294 <lsm6dsl_gy_full_scale_get>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
 8003424:	e030      	b.n	8003488 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8003426:	7afb      	ldrb	r3, [r7, #11]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d828      	bhi.n	800347e <LSM6DSL_GYRO_GetFullScale+0x82>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003459 	.word	0x08003459
 8003438:	08003451 	.word	0x08003451
 800343c:	08003461 	.word	0x08003461
 8003440:	0800347f 	.word	0x0800347f
 8003444:	0800346b 	.word	0x0800346b
 8003448:	0800347f 	.word	0x0800347f
 800344c:	08003475 	.word	0x08003475
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	227d      	movs	r2, #125	; 0x7d
 8003454:	601a      	str	r2, [r3, #0]
      break;
 8003456:	e016      	b.n	8003486 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	22fa      	movs	r2, #250	; 0xfa
 800345c:	601a      	str	r2, [r3, #0]
      break;
 800345e:	e012      	b.n	8003486 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003466:	601a      	str	r2, [r3, #0]
      break;
 8003468:	e00d      	b.n	8003486 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003470:	601a      	str	r2, [r3, #0]
      break;
 8003472:	e008      	b.n	8003486 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800347a:	601a      	str	r2, [r3, #0]
      break;
 800347c:	e003      	b.n	8003486 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	60fb      	str	r3, [r7, #12]
      break;
 8003484:	bf00      	nop
  }

  return ret;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b7d      	cmp	r3, #125	; 0x7d
 800349e:	dd12      	ble.n	80034c6 <LSM6DSL_GYRO_SetFullScale+0x36>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2bfa      	cmp	r3, #250	; 0xfa
 80034a4:	dd0d      	ble.n	80034c2 <LSM6DSL_GYRO_SetFullScale+0x32>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034ac:	dd07      	ble.n	80034be <LSM6DSL_GYRO_SetFullScale+0x2e>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b4:	dc01      	bgt.n	80034ba <LSM6DSL_GYRO_SetFullScale+0x2a>
 80034b6:	2304      	movs	r3, #4
 80034b8:	e006      	b.n	80034c8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80034ba:	2306      	movs	r3, #6
 80034bc:	e004      	b.n	80034c8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80034be:	2302      	movs	r3, #2
 80034c0:	e002      	b.n	80034c8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80034c6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80034c8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	331c      	adds	r3, #28
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 feb8 	bl	8004248 <lsm6dsl_gy_full_scale_set>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	e000      	b.n	80034e6 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	331c      	adds	r3, #28
 80034fc:	f107 0208 	add.w	r2, r7, #8
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 ffb6 	bl	8004474 <lsm6dsl_angular_rate_raw_get>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	e00c      	b.n	800352e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003514:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800351c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003524:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	331c      	adds	r3, #28
 8003544:	f107 0210 	add.w	r2, r7, #16
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f000 ff92 	bl	8004474 <lsm6dsl_angular_rate_raw_get>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	e03c      	b.n	80035d6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800355c:	f107 030c 	add.w	r3, r7, #12
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fe60 	bl	8003228 <LSM6DSL_GYRO_GetSensitivity>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	e030      	b.n	80035d6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003574:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003580:	edd7 7a03 	vldr	s15, [r7, #12]
 8003584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800358c:	ee17 2a90 	vmov	r2, s15
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003594:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80035a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ac:	ee17 2a90 	vmov	r2, s15
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80035b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80035c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035cc:	ee17 2a90 	vmov	r2, s15
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <LSM6DSL_Read_Reg>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Read_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	460b      	mov	r3, r1
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	72fb      	strb	r3, [r7, #11]
  if (lsm6dsl_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSL_OK)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f103 001c 	add.w	r0, r3, #28
 80035f2:	7af9      	ldrb	r1, [r7, #11]
 80035f4:	2301      	movs	r3, #1
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	f000 fd0a 	bl	8004010 <lsm6dsl_read_reg>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <LSM6DSL_Read_Reg+0x2a>
  {
    return LSM6DSL_ERROR;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e000      	b.n	800360a <LSM6DSL_Read_Reg+0x2c>
  }

  return LSM6DSL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	70fb      	strb	r3, [r7, #3]
 800361e:	4613      	mov	r3, r2
 8003620:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f103 001c 	add.w	r0, r3, #28
 8003628:	1cba      	adds	r2, r7, #2
 800362a:	78f9      	ldrb	r1, [r7, #3]
 800362c:	2301      	movs	r3, #1
 800362e:	f000 fd07 	bl	8004040 <lsm6dsl_write_reg>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8003638:	f04f 33ff 	mov.w	r3, #4294967295
 800363c:	e000      	b.n	8003640 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	331c      	adds	r3, #28
 8003658:	f107 020c 	add.w	r2, r7, #12
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f95e 	bl	8004920 <lsm6dsl_pin_int1_route_get>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	e01b      	b.n	80036a8 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d811      	bhi.n	800369a <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	7b3b      	ldrb	r3, [r7, #12]
 8003680:	f362 0300 	bfi	r3, r2, #0, #1
 8003684:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	331c      	adds	r3, #28
 800368a:	68f9      	ldr	r1, [r7, #12]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 ffe4 	bl	800465a <lsm6dsl_pin_int1_route_set>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d006      	beq.n	80036a6 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8003698:	e002      	b.n	80036a0 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	e003      	b.n	80036a8 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295
 80036a4:	e000      	b.n	80036a8 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <LSM6DSL_Set_DRDY_Mode>:
 * @param  pObj the device pObj
 * @param  Val the value of drdy_pulsed in reg LSM6DSL_DRDY_PULSE_CFG_G
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Set_DRDY_Mode(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_drdy_pulsed_g_t reg;

  reg = (Val == 0U)  ? LSM6DSL_DRDY_LATCHED
      : (Val == 1U)  ? LSM6DSL_DRDY_PULSED
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <LSM6DSL_Set_DRDY_Mode+0x20>
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <LSM6DSL_Set_DRDY_Mode+0x1c>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e002      	b.n	80036d2 <LSM6DSL_Set_DRDY_Mode+0x22>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e000      	b.n	80036d2 <LSM6DSL_Set_DRDY_Mode+0x22>
 80036d0:	2300      	movs	r3, #0
  reg = (Val == 0U)  ? LSM6DSL_DRDY_LATCHED
 80036d2:	73fb      	strb	r3, [r7, #15]
      :                LSM6DSL_DRDY_ND;

  if (lsm6dsl_data_ready_mode_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	331c      	adds	r3, #28
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 ff5f 	bl	80045a0 <lsm6dsl_data_ready_mode_set>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <LSM6DSL_Set_DRDY_Mode+0x3e>
  {
    return LSM6DSL_ERROR;
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	e000      	b.n	80036f0 <LSM6DSL_Set_DRDY_Mode+0x40>
  }

  return LSM6DSL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <LSM6DSL_FIFO_Get_Num_Samples>:
 * @param  pObj the device pObj
 * @param  NumSamples number of samples
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Get_Num_Samples(LSM6DSL_Object_t *pObj, uint16_t *NumSamples)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_fifo_data_level_get(&(pObj->Ctx), NumSamples) != LSM6DSL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	331c      	adds	r3, #28
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fa15 	bl	8004b38 <lsm6dsl_fifo_data_level_get>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <LSM6DSL_FIFO_Get_Num_Samples+0x22>
  {
    return LSM6DSL_ERROR;
 8003714:	f04f 33ff 	mov.w	r3, #4294967295
 8003718:	e000      	b.n	800371c <LSM6DSL_FIFO_Get_Num_Samples+0x24>
  }

  return LSM6DSL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <LSM6DSL_FIFO_Set_ODR_Value>:
 * @param  pObj the device pObj
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_ODR_Value(LSM6DSL_Object_t *pObj, float Odr)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_fifo_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_FIFO_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_FIFO_26Hz
 8003730:	edd7 7a00 	vldr	s15, [r7]
 8003734:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003740:	d801      	bhi.n	8003746 <LSM6DSL_FIFO_Set_ODR_Value+0x22>
 8003742:	2301      	movs	r3, #1
 8003744:	e058      	b.n	80037f8 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 8003746:	edd7 7a00 	vldr	s15, [r7]
 800374a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800374e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003756:	d801      	bhi.n	800375c <LSM6DSL_FIFO_Set_ODR_Value+0x38>
 8003758:	2302      	movs	r3, #2
 800375a:	e04d      	b.n	80037f8 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 800375c:	edd7 7a00 	vldr	s15, [r7]
 8003760:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003820 <LSM6DSL_FIFO_Set_ODR_Value+0xfc>
 8003764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376c:	d801      	bhi.n	8003772 <LSM6DSL_FIFO_Set_ODR_Value+0x4e>
 800376e:	2303      	movs	r3, #3
 8003770:	e042      	b.n	80037f8 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 8003772:	edd7 7a00 	vldr	s15, [r7]
 8003776:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003824 <LSM6DSL_FIFO_Set_ODR_Value+0x100>
 800377a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	d801      	bhi.n	8003788 <LSM6DSL_FIFO_Set_ODR_Value+0x64>
 8003784:	2304      	movs	r3, #4
 8003786:	e037      	b.n	80037f8 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 8003788:	edd7 7a00 	vldr	s15, [r7]
 800378c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003828 <LSM6DSL_FIFO_Set_ODR_Value+0x104>
 8003790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d801      	bhi.n	800379e <LSM6DSL_FIFO_Set_ODR_Value+0x7a>
 800379a:	2305      	movs	r3, #5
 800379c:	e02c      	b.n	80037f8 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 800379e:	edd7 7a00 	vldr	s15, [r7]
 80037a2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800382c <LSM6DSL_FIFO_Set_ODR_Value+0x108>
 80037a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	d801      	bhi.n	80037b4 <LSM6DSL_FIFO_Set_ODR_Value+0x90>
 80037b0:	2306      	movs	r3, #6
 80037b2:	e021      	b.n	80037f8 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 80037b4:	edd7 7a00 	vldr	s15, [r7]
 80037b8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003830 <LSM6DSL_FIFO_Set_ODR_Value+0x10c>
 80037bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c4:	d801      	bhi.n	80037ca <LSM6DSL_FIFO_Set_ODR_Value+0xa6>
 80037c6:	2307      	movs	r3, #7
 80037c8:	e016      	b.n	80037f8 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 80037ca:	edd7 7a00 	vldr	s15, [r7]
 80037ce:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003834 <LSM6DSL_FIFO_Set_ODR_Value+0x110>
 80037d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037da:	d801      	bhi.n	80037e0 <LSM6DSL_FIFO_Set_ODR_Value+0xbc>
 80037dc:	2308      	movs	r3, #8
 80037de:	e00b      	b.n	80037f8 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 80037e0:	edd7 7a00 	vldr	s15, [r7]
 80037e4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003838 <LSM6DSL_FIFO_Set_ODR_Value+0x114>
 80037e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f0:	d801      	bhi.n	80037f6 <LSM6DSL_FIFO_Set_ODR_Value+0xd2>
 80037f2:	2309      	movs	r3, #9
 80037f4:	e000      	b.n	80037f8 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 80037f6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_FIFO_12Hz5
 80037f8:	73fb      	strb	r3, [r7, #15]
          : (Odr <=  833.0f) ? LSM6DSL_FIFO_833Hz
          : (Odr <= 1660.0f) ? LSM6DSL_FIFO_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_FIFO_3k33Hz
          :                    LSM6DSL_FIFO_6k66Hz;

  if (lsm6dsl_fifo_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	331c      	adds	r3, #28
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f001 fa84 	bl	8004d10 <lsm6dsl_fifo_data_rate_set>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <LSM6DSL_FIFO_Set_ODR_Value+0xf0>
  {
    return LSM6DSL_ERROR;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
 8003812:	e000      	b.n	8003816 <LSM6DSL_FIFO_Set_ODR_Value+0xf2>
  }

  return LSM6DSL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	42500000 	.word	0x42500000
 8003824:	42d00000 	.word	0x42d00000
 8003828:	43500000 	.word	0x43500000
 800382c:	43d00000 	.word	0x43d00000
 8003830:	44504000 	.word	0x44504000
 8003834:	44cf8000 	.word	0x44cf8000
 8003838:	45502000 	.word	0x45502000

0800383c <LSM6DSL_FIFO_Set_INT1_FIFO_Full>:
 * @param  pObj the device pObj
 * @param  Status FIFO full interrupt on INT1 pin status
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_INT1_FIFO_Full(LSM6DSL_Object_t *pObj, uint8_t Status)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_reg_t reg;

  if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_INT1_CTRL, &reg.byte, 1) != LSM6DSL_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f103 001c 	add.w	r0, r3, #28
 800384e:	f107 020c 	add.w	r2, r7, #12
 8003852:	2301      	movs	r3, #1
 8003854:	210d      	movs	r1, #13
 8003856:	f000 fbdb 	bl	8004010 <lsm6dsl_read_reg>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <LSM6DSL_FIFO_Set_INT1_FIFO_Full+0x2a>
  {
    return LSM6DSL_ERROR;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	e017      	b.n	8003896 <LSM6DSL_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  reg.int1_ctrl.int1_full_flag = Status;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	b2da      	uxtb	r2, r3
 800386e:	7b3b      	ldrb	r3, [r7, #12]
 8003870:	f362 1345 	bfi	r3, r2, #5, #1
 8003874:	733b      	strb	r3, [r7, #12]

  if (lsm6dsl_write_reg(&(pObj->Ctx), LSM6DSL_INT1_CTRL, &reg.byte, 1) != LSM6DSL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f103 001c 	add.w	r0, r3, #28
 800387c:	f107 020c 	add.w	r2, r7, #12
 8003880:	2301      	movs	r3, #1
 8003882:	210d      	movs	r1, #13
 8003884:	f000 fbdc 	bl	8004040 <lsm6dsl_write_reg>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <LSM6DSL_FIFO_Set_INT1_FIFO_Full+0x58>
  {
    return LSM6DSL_ERROR;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	e000      	b.n	8003896 <LSM6DSL_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  return LSM6DSL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <LSM6DSL_FIFO_Set_Watermark_Level>:
 * @param  pObj the device pObj
 * @param  Watermark FIFO watermark level
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_Watermark_Level(LSM6DSL_Object_t *pObj, uint16_t Watermark)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	807b      	strh	r3, [r7, #2]
  if (lsm6dsl_fifo_watermark_set(&(pObj->Ctx), Watermark) != LSM6DSL_OK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	331c      	adds	r3, #28
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f90a 	bl	8004acc <lsm6dsl_fifo_watermark_set>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <LSM6DSL_FIFO_Set_Watermark_Level+0x26>
  {
    return LSM6DSL_ERROR;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	e000      	b.n	80038c6 <LSM6DSL_FIFO_Set_Watermark_Level+0x28>
  }

  return LSM6DSL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <LSM6DSL_FIFO_Set_Stop_On_Fth>:
 * @param  pObj the device pObj
 * @param  Status FIFO stop on watermark status
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_Stop_On_Fth(LSM6DSL_Object_t *pObj, uint8_t Status)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	70fb      	strb	r3, [r7, #3]
  if (lsm6dsl_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != LSM6DSL_OK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	331c      	adds	r3, #28
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f9c8 	bl	8004c78 <lsm6dsl_fifo_stop_on_wtm_set>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <LSM6DSL_FIFO_Set_Stop_On_Fth+0x26>
  {
    return LSM6DSL_ERROR;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	e000      	b.n	80038f6 <LSM6DSL_FIFO_Set_Stop_On_Fth+0x28>
  }

  return LSM6DSL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <LSM6DSL_FIFO_Set_Mode>:
 * @param  pObj the device pObj
 * @param  Mode FIFO mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_Mode(LSM6DSL_Object_t *pObj, uint8_t Mode)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_fifo_mode_t)Mode)
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	2b06      	cmp	r3, #6
 8003912:	bf8c      	ite	hi
 8003914:	2201      	movhi	r2, #1
 8003916:	2200      	movls	r2, #0
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	2a00      	cmp	r2, #0
 800391c:	d10b      	bne.n	8003936 <LSM6DSL_FIFO_Set_Mode+0x38>
 800391e:	2201      	movs	r2, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf14      	ite	ne
 800392c:	2301      	movne	r3, #1
 800392e:	2300      	moveq	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <LSM6DSL_FIFO_Set_Mode+0x40>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
    case LSM6DSL_STREAM_MODE:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8003936:	f04f 33ff 	mov.w	r3, #4294967295
 800393a:	60fb      	str	r3, [r7, #12]
      break;
 800393c:	e000      	b.n	8003940 <LSM6DSL_FIFO_Set_Mode+0x42>
      break;
 800393e:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d101      	bne.n	800394c <LSM6DSL_FIFO_Set_Mode+0x4e>
  {
    return ret;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	e00d      	b.n	8003968 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), (lsm6dsl_fifo_mode_t)Mode) != LSM6DSL_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	331c      	adds	r3, #28
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f9b5 	bl	8004cc4 <lsm6dsl_fifo_mode_set>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <LSM6DSL_FIFO_Set_Mode+0x68>
  {
    return LSM6DSL_ERROR;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	e000      	b.n	8003968 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  return ret;
 8003966:	68fb      	ldr	r3, [r7, #12]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <LSM6DSL_FIFO_Get_Pattern>:
 * @param  pObj the device pObj
 * @param  Pattern FIFO pattern
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Get_Pattern(LSM6DSL_Object_t *pObj, uint16_t *Pattern)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_fifo_pattern_get(&(pObj->Ctx), Pattern) != LSM6DSL_OK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	331c      	adds	r3, #28
 800397e:	6839      	ldr	r1, [r7, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f903 	bl	8004b8c <lsm6dsl_fifo_pattern_get>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <LSM6DSL_FIFO_Get_Pattern+0x22>
  {
    return LSM6DSL_ERROR;
 800398c:	f04f 33ff 	mov.w	r3, #4294967295
 8003990:	e000      	b.n	8003994 <LSM6DSL_FIFO_Get_Pattern+0x24>
  }

  return LSM6DSL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <LSM6DSL_FIFO_Get_Data>:
 * @param  pObj the device pObj
 * @param  Data FIFO raw data array [2]
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Get_Data(LSM6DSL_Object_t *pObj, uint8_t *Data)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_FIFO_DATA_OUT_L, Data, 2) != LSM6DSL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f103 001c 	add.w	r0, r3, #28
 80039ac:	2302      	movs	r3, #2
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	213e      	movs	r1, #62	; 0x3e
 80039b2:	f000 fb2d 	bl	8004010 <lsm6dsl_read_reg>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <LSM6DSL_FIFO_Get_Data+0x26>
  {
    return LSM6DSL_ERROR;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295
 80039c0:	e000      	b.n	80039c4 <LSM6DSL_FIFO_Get_Data+0x28>
  }

  return LSM6DSL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <LSM6DSL_FIFO_ACC_Set_Decimation>:
 * @param  pObj the device pObj
 * @param  Decimation FIFO accelero decimation
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_ACC_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_xl_t)Decimation)
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	2b07      	cmp	r3, #7
 80039e0:	d903      	bls.n	80039ea <LSM6DSL_FIFO_ACC_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_XL_DEC_16:
    case LSM6DSL_FIFO_XL_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	60fb      	str	r3, [r7, #12]
      break;
 80039e8:	e000      	b.n	80039ec <LSM6DSL_FIFO_ACC_Set_Decimation+0x20>
      break;
 80039ea:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d101      	bne.n	80039f8 <LSM6DSL_FIFO_ACC_Set_Decimation+0x2c>
  {
    return ret;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	e00d      	b.n	8003a14 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_xl_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_xl_t)Decimation) != LSM6DSL_OK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	331c      	adds	r3, #28
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f001 f8ed 	bl	8004be0 <lsm6dsl_fifo_xl_batch_set>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <LSM6DSL_FIFO_ACC_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	e000      	b.n	8003a14 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  return ret;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <LSM6DSL_FIFO_ACC_Get_Axis>:
 * @param  pObj the device pObj
 * @param  Acceleration FIFO single accelero axis [mg]
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_ACC_Get_Axis(LSM6DSL_Object_t *pObj, int32_t *Acceleration)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint8_t data[2];
  int16_t data_raw;
  float sensitivity = 0.0f;
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
  float acceleration_float;

  if (LSM6DSL_FIFO_Get_Data(pObj, data) != LSM6DSL_OK)
 8003a2c:	f107 030c 	add.w	r3, r7, #12
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffb2 	bl	800399c <LSM6DSL_FIFO_Get_Data>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <LSM6DSL_FIFO_ACC_Get_Axis+0x28>
  {
    return LSM6DSL_ERROR;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	e027      	b.n	8003a94 <LSM6DSL_FIFO_ACC_Get_Axis+0x78>
  }

  data_raw = ((int16_t)data[1] << 8) | data[0];
 8003a44:	7b7b      	ldrb	r3, [r7, #13]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	b21a      	sxth	r2, r3
 8003a4a:	7b3b      	ldrb	r3, [r7, #12]
 8003a4c:	b21b      	sxth	r3, r3
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	82fb      	strh	r3, [r7, #22]

  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	4619      	mov	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff f9cb 	bl	8002df4 <LSM6DSL_ACC_GetSensitivity>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <LSM6DSL_FIFO_ACC_Get_Axis+0x4e>
  {
    return LSM6DSL_ERROR;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	e014      	b.n	8003a94 <LSM6DSL_FIFO_ACC_Get_Axis+0x78>
  }

  acceleration_float = (float)data_raw * sensitivity;
 8003a6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a76:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7e:	edc7 7a04 	vstr	s15, [r7, #16]
  *Acceleration = (int32_t)acceleration_float;
 8003a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a8a:	ee17 2a90 	vmov	r2, s15
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	601a      	str	r2, [r3, #0]

  return LSM6DSL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <LSM6DSL_FIFO_GYRO_Set_Decimation>:
 * @param  pObj the device pObj
 * @param  Decimation FIFO gyro decimation
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_GYRO_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_gyro_t)Decimation)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	d903      	bls.n	8003aba <LSM6DSL_FIFO_GYRO_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_GY_DEC_16:
    case LSM6DSL_FIFO_GY_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	60fb      	str	r3, [r7, #12]
      break;
 8003ab8:	e000      	b.n	8003abc <LSM6DSL_FIFO_GYRO_Set_Decimation+0x20>
      break;
 8003aba:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d101      	bne.n	8003ac8 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x2c>
  {
    return ret;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	e00d      	b.n	8003ae4 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_gy_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_gyro_t)Decimation) != LSM6DSL_OK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	331c      	adds	r3, #28
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 f8ab 	bl	8004c2c <lsm6dsl_fifo_gy_batch_set>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	e000      	b.n	8003ae4 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  return ret;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <LSM6DSL_FIFO_GYRO_Get_Axis>:
 * @param  pObj the device pObj
 * @param  AngularVelocity FIFO single gyro axis [mDPS]
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_GYRO_Get_Axis(LSM6DSL_Object_t *pObj, int32_t *AngularVelocity)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint8_t data[2];
  int16_t data_raw;
  float sensitivity = 0.0f;
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	60bb      	str	r3, [r7, #8]
  float angular_velocity_float;

  if (LSM6DSL_FIFO_Get_Data(pObj, data) != LSM6DSL_OK)
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ff4a 	bl	800399c <LSM6DSL_FIFO_Get_Data>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <LSM6DSL_FIFO_GYRO_Get_Axis+0x28>
  {
    return LSM6DSL_ERROR;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	e027      	b.n	8003b64 <LSM6DSL_FIFO_GYRO_Get_Axis+0x78>
  }

  data_raw = ((int16_t)data[1] << 8) | data[0];
 8003b14:	7b7b      	ldrb	r3, [r7, #13]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	b21a      	sxth	r2, r3
 8003b1a:	7b3b      	ldrb	r3, [r7, #12]
 8003b1c:	b21b      	sxth	r3, r3
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	82fb      	strh	r3, [r7, #22]

  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff fb7d 	bl	8003228 <LSM6DSL_GYRO_GetSensitivity>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <LSM6DSL_FIFO_GYRO_Get_Axis+0x4e>
  {
    return LSM6DSL_ERROR;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
 8003b38:	e014      	b.n	8003b64 <LSM6DSL_FIFO_GYRO_Get_Axis+0x78>
  }

  angular_velocity_float = (float)data_raw * sensitivity;
 8003b3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b46:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4e:	edc7 7a04 	vstr	s15, [r7, #16]
  *AngularVelocity = (int32_t)angular_velocity_float;
 8003b52:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b5a:	ee17 2a90 	vmov	r2, s15
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	601a      	str	r2, [r3, #0]

  return LSM6DSL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003b78:	edd7 7a00 	vldr	s15, [r7]
 8003b7c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b88:	d801      	bhi.n	8003b8e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e058      	b.n	8003c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003b8e:	edd7 7a00 	vldr	s15, [r7]
 8003b92:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	d801      	bhi.n	8003ba4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e04d      	b.n	8003c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003ba4:	edd7 7a00 	vldr	s15, [r7]
 8003ba8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d801      	bhi.n	8003bba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e042      	b.n	8003c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003bba:	edd7 7a00 	vldr	s15, [r7]
 8003bbe:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003c6c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bca:	d801      	bhi.n	8003bd0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	e037      	b.n	8003c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003bd0:	edd7 7a00 	vldr	s15, [r7]
 8003bd4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003c70 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	d801      	bhi.n	8003be6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003be2:	2305      	movs	r3, #5
 8003be4:	e02c      	b.n	8003c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003be6:	edd7 7a00 	vldr	s15, [r7]
 8003bea:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003c74 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8003bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf6:	d801      	bhi.n	8003bfc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003bf8:	2306      	movs	r3, #6
 8003bfa:	e021      	b.n	8003c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003bfc:	edd7 7a00 	vldr	s15, [r7]
 8003c00:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	d801      	bhi.n	8003c12 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8003c0e:	2307      	movs	r3, #7
 8003c10:	e016      	b.n	8003c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c12:	edd7 7a00 	vldr	s15, [r7]
 8003c16:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003c7c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8003c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	d801      	bhi.n	8003c28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003c24:	2308      	movs	r3, #8
 8003c26:	e00b      	b.n	8003c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c28:	edd7 7a00 	vldr	s15, [r7]
 8003c2c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003c80 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c38:	d801      	bhi.n	8003c3e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8003c3a:	2309      	movs	r3, #9
 8003c3c:	e000      	b.n	8003c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c3e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003c40:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	331c      	adds	r3, #28
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fa6e 	bl	800412c <lsm6dsl_xl_data_rate_set>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	e000      	b.n	8003c5e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	42500000 	.word	0x42500000
 8003c6c:	42d00000 	.word	0x42d00000
 8003c70:	43500000 	.word	0x43500000
 8003c74:	43d00000 	.word	0x43d00000
 8003c78:	44504000 	.word	0x44504000
 8003c7c:	44cf8000 	.word	0x44cf8000
 8003c80:	45502000 	.word	0x45502000

08003c84 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003c90:	edd7 7a00 	vldr	s15, [r7]
 8003c94:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca0:	d801      	bhi.n	8003ca6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e058      	b.n	8003d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003ca6:	edd7 7a00 	vldr	s15, [r7]
 8003caa:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb6:	d801      	bhi.n	8003cbc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e04d      	b.n	8003d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003cbc:	edd7 7a00 	vldr	s15, [r7]
 8003cc0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003d6c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	d801      	bhi.n	8003cd2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e042      	b.n	8003d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003cd2:	edd7 7a00 	vldr	s15, [r7]
 8003cd6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003d70 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8003cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	d801      	bhi.n	8003ce8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	e037      	b.n	8003d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003ce8:	edd7 7a00 	vldr	s15, [r7]
 8003cec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003d74 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf8:	d801      	bhi.n	8003cfe <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003cfa:	2305      	movs	r3, #5
 8003cfc:	e02c      	b.n	8003d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003cfe:	edd7 7a00 	vldr	s15, [r7]
 8003d02:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003d78 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0e:	d801      	bhi.n	8003d14 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003d10:	2306      	movs	r3, #6
 8003d12:	e021      	b.n	8003d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d14:	edd7 7a00 	vldr	s15, [r7]
 8003d18:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003d7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d24:	d801      	bhi.n	8003d2a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003d26:	2307      	movs	r3, #7
 8003d28:	e016      	b.n	8003d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d2a:	edd7 7a00 	vldr	s15, [r7]
 8003d2e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003d80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8003d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3a:	d801      	bhi.n	8003d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	e00b      	b.n	8003d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d40:	edd7 7a00 	vldr	s15, [r7]
 8003d44:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003d84 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d50:	d801      	bhi.n	8003d56 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8003d52:	2309      	movs	r3, #9
 8003d54:	e000      	b.n	8003d58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d56:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	42500000 	.word	0x42500000
 8003d70:	42d00000 	.word	0x42d00000
 8003d74:	43500000 	.word	0x43500000
 8003d78:	43d00000 	.word	0x43d00000
 8003d7c:	44504000 	.word	0x44504000
 8003d80:	44cf8000 	.word	0x44cf8000
 8003d84:	45502000 	.word	0x45502000

08003d88 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003d94:	edd7 7a00 	vldr	s15, [r7]
 8003d98:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	d801      	bhi.n	8003daa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e058      	b.n	8003e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003daa:	edd7 7a00 	vldr	s15, [r7]
 8003dae:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dba:	d801      	bhi.n	8003dc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e04d      	b.n	8003e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003dc0:	edd7 7a00 	vldr	s15, [r7]
 8003dc4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	d801      	bhi.n	8003dd6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e042      	b.n	8003e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003dd6:	edd7 7a00 	vldr	s15, [r7]
 8003dda:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003e88 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8003dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de6:	d801      	bhi.n	8003dec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003de8:	2304      	movs	r3, #4
 8003dea:	e037      	b.n	8003e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003dec:	edd7 7a00 	vldr	s15, [r7]
 8003df0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003e8c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	d801      	bhi.n	8003e02 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8003dfe:	2305      	movs	r3, #5
 8003e00:	e02c      	b.n	8003e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e02:	edd7 7a00 	vldr	s15, [r7]
 8003e06:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003e90 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8003e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	d801      	bhi.n	8003e18 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003e14:	2306      	movs	r3, #6
 8003e16:	e021      	b.n	8003e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e18:	edd7 7a00 	vldr	s15, [r7]
 8003e1c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003e94 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	d801      	bhi.n	8003e2e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8003e2a:	2307      	movs	r3, #7
 8003e2c:	e016      	b.n	8003e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e2e:	edd7 7a00 	vldr	s15, [r7]
 8003e32:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003e98 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3e:	d801      	bhi.n	8003e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003e40:	2308      	movs	r3, #8
 8003e42:	e00b      	b.n	8003e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e44:	edd7 7a00 	vldr	s15, [r7]
 8003e48:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003e9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e54:	d801      	bhi.n	8003e5a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003e56:	2309      	movs	r3, #9
 8003e58:	e000      	b.n	8003e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e5a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003e5c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	331c      	adds	r3, #28
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fa56 	bl	8004318 <lsm6dsl_gy_data_rate_set>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	e000      	b.n	8003e7a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	42500000 	.word	0x42500000
 8003e88:	42d00000 	.word	0x42d00000
 8003e8c:	43500000 	.word	0x43500000
 8003e90:	43d00000 	.word	0x43d00000
 8003e94:	44504000 	.word	0x44504000
 8003e98:	44cf8000 	.word	0x44cf8000
 8003e9c:	45502000 	.word	0x45502000

08003ea0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003eac:	edd7 7a00 	vldr	s15, [r7]
 8003eb0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ebc:	d801      	bhi.n	8003ec2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e058      	b.n	8003f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003ec2:	edd7 7a00 	vldr	s15, [r7]
 8003ec6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed2:	d801      	bhi.n	8003ed8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e04d      	b.n	8003f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003ed8:	edd7 7a00 	vldr	s15, [r7]
 8003edc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003f88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8003ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee8:	d801      	bhi.n	8003eee <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8003eea:	2303      	movs	r3, #3
 8003eec:	e042      	b.n	8003f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003eee:	edd7 7a00 	vldr	s15, [r7]
 8003ef2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003f8c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8003ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efe:	d801      	bhi.n	8003f04 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003f00:	2304      	movs	r3, #4
 8003f02:	e037      	b.n	8003f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f04:	edd7 7a00 	vldr	s15, [r7]
 8003f08:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003f90 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8003f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f14:	d801      	bhi.n	8003f1a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003f16:	2305      	movs	r3, #5
 8003f18:	e02c      	b.n	8003f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f1a:	edd7 7a00 	vldr	s15, [r7]
 8003f1e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003f94 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2a:	d801      	bhi.n	8003f30 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003f2c:	2306      	movs	r3, #6
 8003f2e:	e021      	b.n	8003f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f30:	edd7 7a00 	vldr	s15, [r7]
 8003f34:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003f98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8003f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f40:	d801      	bhi.n	8003f46 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003f42:	2307      	movs	r3, #7
 8003f44:	e016      	b.n	8003f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f46:	edd7 7a00 	vldr	s15, [r7]
 8003f4a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003f9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8003f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	d801      	bhi.n	8003f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003f58:	2308      	movs	r3, #8
 8003f5a:	e00b      	b.n	8003f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f5c:	edd7 7a00 	vldr	s15, [r7]
 8003f60:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003fa0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6c:	d801      	bhi.n	8003f72 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8003f6e:	2309      	movs	r3, #9
 8003f70:	e000      	b.n	8003f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f72:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	42500000 	.word	0x42500000
 8003f8c:	42d00000 	.word	0x42d00000
 8003f90:	43500000 	.word	0x43500000
 8003f94:	43d00000 	.word	0x43d00000
 8003f98:	44504000 	.word	0x44504000
 8003f9c:	44cf8000 	.word	0x44cf8000
 8003fa0:	45502000 	.word	0x45502000

08003fa4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003fa4:	b590      	push	{r4, r7, lr}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	72fb      	strb	r3, [r7, #11]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	695c      	ldr	r4, [r3, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	7b1b      	ldrb	r3, [r3, #12]
 8003fc4:	b298      	uxth	r0, r3
 8003fc6:	7afb      	ldrb	r3, [r7, #11]
 8003fc8:	b299      	uxth	r1, r3
 8003fca:	893b      	ldrh	r3, [r7, #8]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	47a0      	blx	r4
 8003fd0:	4603      	mov	r3, r0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd90      	pop	{r4, r7, pc}

08003fda <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003fda:	b590      	push	{r4, r7, lr}
 8003fdc:	b087      	sub	sp, #28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	72fb      	strb	r3, [r7, #11]
 8003fea:	4613      	mov	r3, r2
 8003fec:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	691c      	ldr	r4, [r3, #16]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	7b1b      	ldrb	r3, [r3, #12]
 8003ffa:	b298      	uxth	r0, r3
 8003ffc:	7afb      	ldrb	r3, [r7, #11]
 8003ffe:	b299      	uxth	r1, r3
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	47a0      	blx	r4
 8004006:	4603      	mov	r3, r0
}
 8004008:	4618      	mov	r0, r3
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd90      	pop	{r4, r7, pc}

08004010 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	461a      	mov	r2, r3
 800401c:	460b      	mov	r3, r1
 800401e:	72fb      	strb	r3, [r7, #11]
 8004020:	4613      	mov	r3, r2
 8004022:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685c      	ldr	r4, [r3, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6898      	ldr	r0, [r3, #8]
 800402c:	893b      	ldrh	r3, [r7, #8]
 800402e:	7af9      	ldrb	r1, [r7, #11]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	47a0      	blx	r4
 8004034:	6178      	str	r0, [r7, #20]
  return ret;
 8004036:	697b      	ldr	r3, [r7, #20]
}
 8004038:	4618      	mov	r0, r3
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	bd90      	pop	{r4, r7, pc}

08004040 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	461a      	mov	r2, r3
 800404c:	460b      	mov	r3, r1
 800404e:	72fb      	strb	r3, [r7, #11]
 8004050:	4613      	mov	r3, r2
 8004052:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681c      	ldr	r4, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6898      	ldr	r0, [r3, #8]
 800405c:	893b      	ldrh	r3, [r7, #8]
 800405e:	7af9      	ldrb	r1, [r7, #11]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	47a0      	blx	r4
 8004064:	6178      	str	r0, [r7, #20]
  return ret;
 8004066:	697b      	ldr	r3, [r7, #20]
}
 8004068:	4618      	mov	r0, r3
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}

08004070 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800407c:	f107 0208 	add.w	r2, r7, #8
 8004080:	2301      	movs	r3, #1
 8004082:	2110      	movs	r1, #16
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ffc3 	bl	8004010 <lsm6dsl_read_reg>
 800408a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	b2da      	uxtb	r2, r3
 800409a:	7a3b      	ldrb	r3, [r7, #8]
 800409c:	f362 0383 	bfi	r3, r2, #2, #2
 80040a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80040a2:	f107 0208 	add.w	r2, r7, #8
 80040a6:	2301      	movs	r3, #1
 80040a8:	2110      	movs	r1, #16
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ffc8 	bl	8004040 <lsm6dsl_write_reg>
 80040b0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80040c6:	f107 0208 	add.w	r2, r7, #8
 80040ca:	2301      	movs	r3, #1
 80040cc:	2110      	movs	r1, #16
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff ff9e 	bl	8004010 <lsm6dsl_read_reg>
 80040d4:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 80040d6:	7a3b      	ldrb	r3, [r7, #8]
 80040d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d81a      	bhi.n	8004118 <lsm6dsl_xl_full_scale_get+0x5c>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <lsm6dsl_xl_full_scale_get+0x2c>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	08004101 	.word	0x08004101
 80040f0:	08004109 	.word	0x08004109
 80040f4:	08004111 	.word	0x08004111
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
      break;
 80040fe:	e00f      	b.n	8004120 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
      break;
 8004106:	e00b      	b.n	8004120 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2202      	movs	r2, #2
 800410c:	701a      	strb	r2, [r3, #0]
      break;
 800410e:	e007      	b.n	8004120 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2203      	movs	r2, #3
 8004114:	701a      	strb	r2, [r3, #0]
      break;
 8004116:	e003      	b.n	8004120 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2204      	movs	r2, #4
 800411c:	701a      	strb	r2, [r3, #0]
      break;
 800411e:	bf00      	nop
  }

  return ret;
 8004120:	68fb      	ldr	r3, [r7, #12]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop

0800412c <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004138:	f107 0208 	add.w	r2, r7, #8
 800413c:	2301      	movs	r3, #1
 800413e:	2110      	movs	r1, #16
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff65 	bl	8004010 <lsm6dsl_read_reg>
 8004146:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	b2da      	uxtb	r2, r3
 8004156:	7a3b      	ldrb	r3, [r7, #8]
 8004158:	f362 1307 	bfi	r3, r2, #4, #4
 800415c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800415e:	f107 0208 	add.w	r2, r7, #8
 8004162:	2301      	movs	r3, #1
 8004164:	2110      	movs	r1, #16
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff ff6a 	bl	8004040 <lsm6dsl_write_reg>
 800416c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800416e:	68fb      	ldr	r3, [r7, #12]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004182:	f107 0208 	add.w	r2, r7, #8
 8004186:	2301      	movs	r3, #1
 8004188:	2110      	movs	r1, #16
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff ff40 	bl	8004010 <lsm6dsl_read_reg>
 8004190:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8004192:	7a3b      	ldrb	r3, [r7, #8]
 8004194:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b0b      	cmp	r3, #11
 800419c:	d84a      	bhi.n	8004234 <lsm6dsl_xl_data_rate_get+0xbc>
 800419e:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <lsm6dsl_xl_data_rate_get+0x2c>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	080041e5 	.word	0x080041e5
 80041b0:	080041ed 	.word	0x080041ed
 80041b4:	080041f5 	.word	0x080041f5
 80041b8:	080041fd 	.word	0x080041fd
 80041bc:	08004205 	.word	0x08004205
 80041c0:	0800420d 	.word	0x0800420d
 80041c4:	08004215 	.word	0x08004215
 80041c8:	0800421d 	.word	0x0800421d
 80041cc:	08004225 	.word	0x08004225
 80041d0:	0800422d 	.word	0x0800422d
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
      break;
 80041da:	e02f      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
      break;
 80041e2:	e02b      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2202      	movs	r2, #2
 80041e8:	701a      	strb	r2, [r3, #0]
      break;
 80041ea:	e027      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2203      	movs	r2, #3
 80041f0:	701a      	strb	r2, [r3, #0]
      break;
 80041f2:	e023      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2204      	movs	r2, #4
 80041f8:	701a      	strb	r2, [r3, #0]
      break;
 80041fa:	e01f      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2205      	movs	r2, #5
 8004200:	701a      	strb	r2, [r3, #0]
      break;
 8004202:	e01b      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2206      	movs	r2, #6
 8004208:	701a      	strb	r2, [r3, #0]
      break;
 800420a:	e017      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2207      	movs	r2, #7
 8004210:	701a      	strb	r2, [r3, #0]
      break;
 8004212:	e013      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2208      	movs	r2, #8
 8004218:	701a      	strb	r2, [r3, #0]
      break;
 800421a:	e00f      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2209      	movs	r2, #9
 8004220:	701a      	strb	r2, [r3, #0]
      break;
 8004222:	e00b      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	220a      	movs	r2, #10
 8004228:	701a      	strb	r2, [r3, #0]
      break;
 800422a:	e007      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	220b      	movs	r2, #11
 8004230:	701a      	strb	r2, [r3, #0]
      break;
 8004232:	e003      	b.n	800423c <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	220c      	movs	r2, #12
 8004238:	701a      	strb	r2, [r3, #0]
      break;
 800423a:	bf00      	nop
  }

  return ret;
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop

08004248 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004254:	f107 0208 	add.w	r2, r7, #8
 8004258:	2301      	movs	r3, #1
 800425a:	2111      	movs	r1, #17
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff fed7 	bl	8004010 <lsm6dsl_read_reg>
 8004262:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	b2da      	uxtb	r2, r3
 8004272:	7a3b      	ldrb	r3, [r7, #8]
 8004274:	f362 0343 	bfi	r3, r2, #1, #3
 8004278:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800427a:	f107 0208 	add.w	r2, r7, #8
 800427e:	2301      	movs	r3, #1
 8004280:	2111      	movs	r1, #17
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fedc 	bl	8004040 <lsm6dsl_write_reg>
 8004288:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800428a:	68fb      	ldr	r3, [r7, #12]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800429e:	f107 0208 	add.w	r2, r7, #8
 80042a2:	2301      	movs	r3, #1
 80042a4:	2111      	movs	r1, #17
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff feb2 	bl	8004010 <lsm6dsl_read_reg>
 80042ac:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 80042ae:	7a3b      	ldrb	r3, [r7, #8]
 80042b0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b06      	cmp	r3, #6
 80042b8:	d824      	bhi.n	8004304 <lsm6dsl_gy_full_scale_get+0x70>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <lsm6dsl_gy_full_scale_get+0x2c>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042dd 	.word	0x080042dd
 80042c4:	080042e5 	.word	0x080042e5
 80042c8:	080042ed 	.word	0x080042ed
 80042cc:	08004305 	.word	0x08004305
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	08004305 	.word	0x08004305
 80042d8:	080042fd 	.word	0x080042fd
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
      break;
 80042e2:	e013      	b.n	800430c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
      break;
 80042ea:	e00f      	b.n	800430c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2202      	movs	r2, #2
 80042f0:	701a      	strb	r2, [r3, #0]
      break;
 80042f2:	e00b      	b.n	800430c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2204      	movs	r2, #4
 80042f8:	701a      	strb	r2, [r3, #0]
      break;
 80042fa:	e007      	b.n	800430c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2206      	movs	r2, #6
 8004300:	701a      	strb	r2, [r3, #0]
      break;
 8004302:	e003      	b.n	800430c <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2207      	movs	r2, #7
 8004308:	701a      	strb	r2, [r3, #0]
      break;
 800430a:	bf00      	nop
  }

  return ret;
 800430c:	68fb      	ldr	r3, [r7, #12]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004324:	f107 0208 	add.w	r2, r7, #8
 8004328:	2301      	movs	r3, #1
 800432a:	2111      	movs	r1, #17
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff fe6f 	bl	8004010 <lsm6dsl_read_reg>
 8004332:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	b2da      	uxtb	r2, r3
 8004342:	7a3b      	ldrb	r3, [r7, #8]
 8004344:	f362 1307 	bfi	r3, r2, #4, #4
 8004348:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800434a:	f107 0208 	add.w	r2, r7, #8
 800434e:	2301      	movs	r3, #1
 8004350:	2111      	movs	r1, #17
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fe74 	bl	8004040 <lsm6dsl_write_reg>
 8004358:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800435a:	68fb      	ldr	r3, [r7, #12]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800436e:	f107 0208 	add.w	r2, r7, #8
 8004372:	2301      	movs	r3, #1
 8004374:	2111      	movs	r1, #17
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fe4a 	bl	8004010 <lsm6dsl_read_reg>
 800437c:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 800437e:	7a3b      	ldrb	r3, [r7, #8]
 8004380:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b0a      	cmp	r3, #10
 8004388:	d844      	bhi.n	8004414 <lsm6dsl_gy_data_rate_get+0xb0>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <lsm6dsl_gy_data_rate_get+0x2c>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043bd 	.word	0x080043bd
 8004394:	080043c5 	.word	0x080043c5
 8004398:	080043cd 	.word	0x080043cd
 800439c:	080043d5 	.word	0x080043d5
 80043a0:	080043dd 	.word	0x080043dd
 80043a4:	080043e5 	.word	0x080043e5
 80043a8:	080043ed 	.word	0x080043ed
 80043ac:	080043f5 	.word	0x080043f5
 80043b0:	080043fd 	.word	0x080043fd
 80043b4:	08004405 	.word	0x08004405
 80043b8:	0800440d 	.word	0x0800440d
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
      break;
 80043c2:	e02b      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
      break;
 80043ca:	e027      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2202      	movs	r2, #2
 80043d0:	701a      	strb	r2, [r3, #0]
      break;
 80043d2:	e023      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2203      	movs	r2, #3
 80043d8:	701a      	strb	r2, [r3, #0]
      break;
 80043da:	e01f      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2204      	movs	r2, #4
 80043e0:	701a      	strb	r2, [r3, #0]
      break;
 80043e2:	e01b      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2205      	movs	r2, #5
 80043e8:	701a      	strb	r2, [r3, #0]
      break;
 80043ea:	e017      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2206      	movs	r2, #6
 80043f0:	701a      	strb	r2, [r3, #0]
      break;
 80043f2:	e013      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2207      	movs	r2, #7
 80043f8:	701a      	strb	r2, [r3, #0]
      break;
 80043fa:	e00f      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2208      	movs	r2, #8
 8004400:	701a      	strb	r2, [r3, #0]
      break;
 8004402:	e00b      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2209      	movs	r2, #9
 8004408:	701a      	strb	r2, [r3, #0]
      break;
 800440a:	e007      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	220a      	movs	r2, #10
 8004410:	701a      	strb	r2, [r3, #0]
      break;
 8004412:	e003      	b.n	800441c <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	220b      	movs	r2, #11
 8004418:	701a      	strb	r2, [r3, #0]
      break;
 800441a:	bf00      	nop
  }

  return ret;
 800441c:	68fb      	ldr	r3, [r7, #12]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop

08004428 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004434:	f107 0208 	add.w	r2, r7, #8
 8004438:	2301      	movs	r3, #1
 800443a:	2112      	movs	r1, #18
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fde7 	bl	8004010 <lsm6dsl_read_reg>
 8004442:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10f      	bne.n	800446a <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	b2da      	uxtb	r2, r3
 8004452:	7a3b      	ldrb	r3, [r7, #8]
 8004454:	f362 1386 	bfi	r3, r2, #6, #1
 8004458:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800445a:	f107 0208 	add.w	r2, r7, #8
 800445e:	2301      	movs	r3, #1
 8004460:	2112      	movs	r1, #18
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fdec 	bl	8004040 <lsm6dsl_write_reg>
 8004468:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800447e:	f107 020c 	add.w	r2, r7, #12
 8004482:	2306      	movs	r3, #6
 8004484:	2122      	movs	r1, #34	; 0x22
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fdc2 	bl	8004010 <lsm6dsl_read_reg>
 800448c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800448e:	7b7b      	ldrb	r3, [r7, #13]
 8004490:	b21a      	sxth	r2, r3
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800449c:	b29b      	uxth	r3, r3
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	7b3b      	ldrb	r3, [r7, #12]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	b21a      	sxth	r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	3302      	adds	r3, #2
 80044b6:	b212      	sxth	r2, r2
 80044b8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	3302      	adds	r3, #2
 80044be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	7bbb      	ldrb	r3, [r7, #14]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	3302      	adds	r3, #2
 80044d4:	b212      	sxth	r2, r2
 80044d6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80044d8:	7c7a      	ldrb	r2, [r7, #17]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	3304      	adds	r3, #4
 80044de:	b212      	sxth	r2, r2
 80044e0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	3304      	adds	r3, #4
 80044e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	7c3b      	ldrb	r3, [r7, #16]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	3304      	adds	r3, #4
 80044fc:	b212      	sxth	r2, r2
 80044fe:	801a      	strh	r2, [r3, #0]
  return ret;
 8004500:	697b      	ldr	r3, [r7, #20]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004514:	f107 020c 	add.w	r2, r7, #12
 8004518:	2306      	movs	r3, #6
 800451a:	2128      	movs	r1, #40	; 0x28
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff fd77 	bl	8004010 <lsm6dsl_read_reg>
 8004522:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004524:	7b7b      	ldrb	r3, [r7, #13]
 8004526:	b21a      	sxth	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004532:	b29b      	uxth	r3, r3
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	b29a      	uxth	r2, r3
 8004538:	7b3b      	ldrb	r3, [r7, #12]
 800453a:	b29b      	uxth	r3, r3
 800453c:	4413      	add	r3, r2
 800453e:	b29b      	uxth	r3, r3
 8004540:	b21a      	sxth	r2, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004546:	7bfa      	ldrb	r2, [r7, #15]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	3302      	adds	r3, #2
 800454c:	b212      	sxth	r2, r2
 800454e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	3302      	adds	r3, #2
 8004554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004558:	b29b      	uxth	r3, r3
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	b29a      	uxth	r2, r3
 800455e:	7bbb      	ldrb	r3, [r7, #14]
 8004560:	b29b      	uxth	r3, r3
 8004562:	4413      	add	r3, r2
 8004564:	b29a      	uxth	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	3302      	adds	r3, #2
 800456a:	b212      	sxth	r2, r2
 800456c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800456e:	7c7a      	ldrb	r2, [r7, #17]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	3304      	adds	r3, #4
 8004574:	b212      	sxth	r2, r2
 8004576:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	3304      	adds	r3, #4
 800457c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004580:	b29b      	uxth	r3, r3
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	b29a      	uxth	r2, r3
 8004586:	7c3b      	ldrb	r3, [r7, #16]
 8004588:	b29b      	uxth	r3, r3
 800458a:	4413      	add	r3, r2
 800458c:	b29a      	uxth	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	3304      	adds	r3, #4
 8004592:	b212      	sxth	r2, r2
 8004594:	801a      	strh	r2, [r3, #0]
  return ret;
 8004596:	697b      	ldr	r3, [r7, #20]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <lsm6dsl_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsl_drdy_pulsed_g_t val)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 80045ac:	f107 0208 	add.w	r2, r7, #8
 80045b0:	2301      	movs	r3, #1
 80045b2:	210b      	movs	r1, #11
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fd2b 	bl	8004010 <lsm6dsl_read_reg>
 80045ba:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&drdy_pulse_cfg_g, 1);

  if (ret == 0) {
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <lsm6dsl_data_ready_mode_set+0x42>
    drdy_pulse_cfg_g.drdy_pulsed = (uint8_t) val;
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	7a3b      	ldrb	r3, [r7, #8]
 80045cc:	f362 13c7 	bfi	r3, r2, #7, #1
 80045d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 80045d2:	f107 0208 	add.w	r2, r7, #8
 80045d6:	2301      	movs	r3, #1
 80045d8:	210b      	movs	r1, #11
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fd30 	bl	8004040 <lsm6dsl_write_reg>
 80045e0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&drdy_pulse_cfg_g, 1);
  }

  return ret;
 80045e2:	68fb      	ldr	r3, [r7, #12]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80045f6:	2301      	movs	r3, #1
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	210f      	movs	r1, #15
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fd07 	bl	8004010 <lsm6dsl_read_reg>
 8004602:	60f8      	str	r0, [r7, #12]
  return ret;
 8004604:	68fb      	ldr	r3, [r7, #12]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800461a:	f107 0208 	add.w	r2, r7, #8
 800461e:	2301      	movs	r3, #1
 8004620:	2112      	movs	r1, #18
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fcf4 	bl	8004010 <lsm6dsl_read_reg>
 8004628:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	7a3b      	ldrb	r3, [r7, #8]
 800463a:	f362 0382 	bfi	r3, r2, #2, #1
 800463e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004640:	f107 0208 	add.w	r2, r7, #8
 8004644:	2301      	movs	r3, #1
 8004646:	2112      	movs	r1, #18
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fcf9 	bl	8004040 <lsm6dsl_write_reg>
 800464e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004650:	68fb      	ldr	r3, [r7, #12]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b08a      	sub	sp, #40	; 0x28
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 8004664:	f107 021c 	add.w	r2, r7, #28
 8004668:	2301      	movs	r3, #1
 800466a:	210d      	movs	r1, #13
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff fccf 	bl	8004010 <lsm6dsl_read_reg>
 8004672:	6278      	str	r0, [r7, #36]	; 0x24
                         1);

  if (ret == 0) {
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	2b00      	cmp	r3, #0
 8004678:	d147      	bne.n	800470a <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800467a:	783b      	ldrb	r3, [r7, #0]
 800467c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004680:	b2da      	uxtb	r2, r3
 8004682:	7f3b      	ldrb	r3, [r7, #28]
 8004684:	f362 0300 	bfi	r3, r2, #0, #1
 8004688:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800468a:	783b      	ldrb	r3, [r7, #0]
 800468c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004690:	b2da      	uxtb	r2, r3
 8004692:	7f3b      	ldrb	r3, [r7, #28]
 8004694:	f362 0341 	bfi	r3, r2, #1, #1
 8004698:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800469a:	783b      	ldrb	r3, [r7, #0]
 800469c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	7f3b      	ldrb	r3, [r7, #28]
 80046a4:	f362 0382 	bfi	r3, r2, #2, #1
 80046a8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80046aa:	783b      	ldrb	r3, [r7, #0]
 80046ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	7f3b      	ldrb	r3, [r7, #28]
 80046b4:	f362 03c3 	bfi	r3, r2, #3, #1
 80046b8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80046ba:	783b      	ldrb	r3, [r7, #0]
 80046bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	7f3b      	ldrb	r3, [r7, #28]
 80046c4:	f362 1304 	bfi	r3, r2, #4, #1
 80046c8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80046ca:	783b      	ldrb	r3, [r7, #0]
 80046cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	7f3b      	ldrb	r3, [r7, #28]
 80046d4:	f362 1345 	bfi	r3, r2, #5, #1
 80046d8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80046da:	783b      	ldrb	r3, [r7, #0]
 80046dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	7f3b      	ldrb	r3, [r7, #28]
 80046e4:	f362 1386 	bfi	r3, r2, #6, #1
 80046e8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80046ea:	783b      	ldrb	r3, [r7, #0]
 80046ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	7f3b      	ldrb	r3, [r7, #28]
 80046f4:	f362 13c7 	bfi	r3, r2, #7, #1
 80046f8:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 80046fa:	f107 021c 	add.w	r2, r7, #28
 80046fe:	2301      	movs	r3, #1
 8004700:	210d      	movs	r1, #13
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fc9c 	bl	8004040 <lsm6dsl_write_reg>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24
                            1);
  }

  if (ret == 0) {
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8004710:	f107 0218 	add.w	r2, r7, #24
 8004714:	2301      	movs	r3, #1
 8004716:	215e      	movs	r1, #94	; 0x5e
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff fc79 	bl	8004010 <lsm6dsl_read_reg>
 800471e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d107      	bne.n	8004736 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8004726:	f107 0214 	add.w	r2, r7, #20
 800472a:	2301      	movs	r3, #1
 800472c:	215f      	movs	r1, #95	; 0x5f
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fc6e 	bl	8004010 <lsm6dsl_read_reg>
 8004734:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	2b00      	cmp	r3, #0
 800473a:	d147      	bne.n	80047cc <lsm6dsl_pin_int1_route_set+0x172>
    md1_cfg.int1_timer           = val.int1_timer;
 800473c:	787b      	ldrb	r3, [r7, #1]
 800473e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	7e3b      	ldrb	r3, [r7, #24]
 8004746:	f362 0300 	bfi	r3, r2, #0, #1
 800474a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 800474c:	787b      	ldrb	r3, [r7, #1]
 800474e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004752:	b2da      	uxtb	r2, r3
 8004754:	7e3b      	ldrb	r3, [r7, #24]
 8004756:	f362 0341 	bfi	r3, r2, #1, #1
 800475a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 800475c:	787b      	ldrb	r3, [r7, #1]
 800475e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004762:	b2da      	uxtb	r2, r3
 8004764:	7e3b      	ldrb	r3, [r7, #24]
 8004766:	f362 0382 	bfi	r3, r2, #2, #1
 800476a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 800476c:	787b      	ldrb	r3, [r7, #1]
 800476e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004772:	b2da      	uxtb	r2, r3
 8004774:	7e3b      	ldrb	r3, [r7, #24]
 8004776:	f362 03c3 	bfi	r3, r2, #3, #1
 800477a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 800477c:	787b      	ldrb	r3, [r7, #1]
 800477e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004782:	b2da      	uxtb	r2, r3
 8004784:	7e3b      	ldrb	r3, [r7, #24]
 8004786:	f362 1304 	bfi	r3, r2, #4, #1
 800478a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 800478c:	787b      	ldrb	r3, [r7, #1]
 800478e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004792:	b2da      	uxtb	r2, r3
 8004794:	7e3b      	ldrb	r3, [r7, #24]
 8004796:	f362 1345 	bfi	r3, r2, #5, #1
 800479a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 800479c:	787b      	ldrb	r3, [r7, #1]
 800479e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	7e3b      	ldrb	r3, [r7, #24]
 80047a6:	f362 1386 	bfi	r3, r2, #6, #1
 80047aa:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 80047ac:	787b      	ldrb	r3, [r7, #1]
 80047ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	7e3b      	ldrb	r3, [r7, #24]
 80047b6:	f362 13c7 	bfi	r3, r2, #7, #1
 80047ba:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80047bc:	f107 0218 	add.w	r2, r7, #24
 80047c0:	2301      	movs	r3, #1
 80047c2:	215e      	movs	r1, #94	; 0x5e
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff fc3b 	bl	8004040 <lsm6dsl_write_reg>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80047d2:	f107 0210 	add.w	r2, r7, #16
 80047d6:	2301      	movs	r3, #1
 80047d8:	2113      	movs	r1, #19
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fc18 	bl	8004010 <lsm6dsl_read_reg>
 80047e0:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10f      	bne.n	8004808 <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80047e8:	78bb      	ldrb	r3, [r7, #2]
 80047ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	7c3b      	ldrb	r3, [r7, #16]
 80047f2:	f362 1304 	bfi	r3, r2, #4, #1
 80047f6:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80047f8:	f107 0210 	add.w	r2, r7, #16
 80047fc:	2301      	movs	r3, #1
 80047fe:	2113      	movs	r1, #19
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff fc1d 	bl	8004040 <lsm6dsl_write_reg>
 8004806:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800480e:	f107 0220 	add.w	r2, r7, #32
 8004812:	2301      	movs	r3, #1
 8004814:	211a      	movs	r1, #26
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fbfa 	bl	8004010 <lsm6dsl_read_reg>
 800481c:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	2b00      	cmp	r3, #0
 8004822:	d111      	bne.n	8004848 <lsm6dsl_pin_int1_route_set+0x1ee>
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8004824:	78bb      	ldrb	r3, [r7, #2]
 8004826:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004830:	f362 13c7 	bfi	r3, r2, #7, #1
 8004834:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8004838:	f107 0220 	add.w	r2, r7, #32
 800483c:	2301      	movs	r3, #1
 800483e:	211a      	movs	r1, #26
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff fbfd 	bl	8004040 <lsm6dsl_write_reg>
 8004846:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	2b00      	cmp	r3, #0
 800484c:	d158      	bne.n	8004900 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 800484e:	f107 020c 	add.w	r2, r7, #12
 8004852:	2301      	movs	r3, #1
 8004854:	2158      	movs	r1, #88	; 0x58
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff fbda 	bl	8004010 <lsm6dsl_read_reg>
 800485c:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 800485e:	787b      	ldrb	r3, [r7, #1]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d141      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 800486a:	787b      	ldrb	r3, [r7, #1]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	d13b      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8004876:	787b      	ldrb	r3, [r7, #1]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800487e:	2b00      	cmp	r3, #0
 8004880:	d135      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8004882:	787b      	ldrb	r3, [r7, #1]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800488a:	2b00      	cmp	r3, #0
 800488c:	d12f      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800488e:	787b      	ldrb	r3, [r7, #1]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8004896:	2b00      	cmp	r3, #0
 8004898:	d129      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 800489a:	787b      	ldrb	r3, [r7, #1]
 800489c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048a0:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d123      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 80048a6:	7d3b      	ldrb	r3, [r7, #20]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d11d      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 80048b2:	7d3b      	ldrb	r3, [r7, #20]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d117      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 80048be:	7d3b      	ldrb	r3, [r7, #20]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d111      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 80048ca:	7d3b      	ldrb	r3, [r7, #20]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80048d6:	7d3b      	ldrb	r3, [r7, #20]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d105      	bne.n	80048ee <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U) ) {
 80048e2:	7d3b      	ldrb	r3, [r7, #20]
 80048e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048e8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d004      	beq.n	80048f8 <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 80048ee:	7b3b      	ldrb	r3, [r7, #12]
 80048f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f4:	733b      	strb	r3, [r7, #12]
 80048f6:	e003      	b.n	8004900 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 80048f8:	7b3b      	ldrb	r3, [r7, #12]
 80048fa:	f36f 13c7 	bfc	r3, #7, #1
 80048fe:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0) {
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d107      	bne.n	8004916 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8004906:	f107 020c 	add.w	r2, r7, #12
 800490a:	2301      	movs	r3, #1
 800490c:	2158      	movs	r1, #88	; 0x58
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fb96 	bl	8004040 <lsm6dsl_write_reg>
 8004914:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004918:	4618      	mov	r0, r3
 800491a:	3728      	adds	r7, #40	; 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  lsm6dsl_master_config_t master_config;
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 800492a:	f107 0214 	add.w	r2, r7, #20
 800492e:	2301      	movs	r3, #1
 8004930:	210d      	movs	r1, #13
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fb6c 	bl	8004010 <lsm6dsl_read_reg>
 8004938:	61f8      	str	r0, [r7, #28]
                         1);

  if (ret == 0) {
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 80c0 	bne.w	8004ac2 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8004942:	7d3b      	ldrb	r3, [r7, #20]
 8004944:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004948:	b2d9      	uxtb	r1, r3
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	7813      	ldrb	r3, [r2, #0]
 800494e:	f361 0300 	bfi	r3, r1, #0, #1
 8004952:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8004954:	7d3b      	ldrb	r3, [r7, #20]
 8004956:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800495a:	b2d9      	uxtb	r1, r3
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	7813      	ldrb	r3, [r2, #0]
 8004960:	f361 0341 	bfi	r3, r1, #1, #1
 8004964:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8004966:	7d3b      	ldrb	r3, [r7, #20]
 8004968:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800496c:	b2d9      	uxtb	r1, r3
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	7813      	ldrb	r3, [r2, #0]
 8004972:	f361 0382 	bfi	r3, r1, #2, #1
 8004976:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8004978:	7d3b      	ldrb	r3, [r7, #20]
 800497a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800497e:	b2d9      	uxtb	r1, r3
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	7813      	ldrb	r3, [r2, #0]
 8004984:	f361 03c3 	bfi	r3, r1, #3, #1
 8004988:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800498a:	7d3b      	ldrb	r3, [r7, #20]
 800498c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004990:	b2d9      	uxtb	r1, r3
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	7813      	ldrb	r3, [r2, #0]
 8004996:	f361 1304 	bfi	r3, r1, #4, #1
 800499a:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800499c:	7d3b      	ldrb	r3, [r7, #20]
 800499e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80049a2:	b2d9      	uxtb	r1, r3
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	7813      	ldrb	r3, [r2, #0]
 80049a8:	f361 1345 	bfi	r3, r1, #5, #1
 80049ac:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 80049ae:	7d3b      	ldrb	r3, [r7, #20]
 80049b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80049b4:	b2d9      	uxtb	r1, r3
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	7813      	ldrb	r3, [r2, #0]
 80049ba:	f361 1386 	bfi	r3, r1, #6, #1
 80049be:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 80049c0:	7d3b      	ldrb	r3, [r7, #20]
 80049c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049c6:	b2d9      	uxtb	r1, r3
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	7813      	ldrb	r3, [r2, #0]
 80049cc:	f361 13c7 	bfi	r3, r1, #7, #1
 80049d0:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80049d2:	f107 0210 	add.w	r2, r7, #16
 80049d6:	2301      	movs	r3, #1
 80049d8:	215e      	movs	r1, #94	; 0x5e
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fb18 	bl	8004010 <lsm6dsl_read_reg>
 80049e0:	61f8      	str	r0, [r7, #28]

    if (ret == 0) {
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d16c      	bne.n	8004ac2 <lsm6dsl_pin_int1_route_get+0x1a2>
      val->int1_timer       = md1_cfg.int1_timer;
 80049e8:	7c3b      	ldrb	r3, [r7, #16]
 80049ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80049ee:	b2d9      	uxtb	r1, r3
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	7853      	ldrb	r3, [r2, #1]
 80049f4:	f361 0300 	bfi	r3, r1, #0, #1
 80049f8:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 80049fa:	7c3b      	ldrb	r3, [r7, #16]
 80049fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004a00:	b2d9      	uxtb	r1, r3
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	7853      	ldrb	r3, [r2, #1]
 8004a06:	f361 0341 	bfi	r3, r1, #1, #1
 8004a0a:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 8004a0c:	7c3b      	ldrb	r3, [r7, #16]
 8004a0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004a12:	b2d9      	uxtb	r1, r3
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	7853      	ldrb	r3, [r2, #1]
 8004a18:	f361 0382 	bfi	r3, r1, #2, #1
 8004a1c:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 8004a1e:	7c3b      	ldrb	r3, [r7, #16]
 8004a20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004a24:	b2d9      	uxtb	r1, r3
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	7853      	ldrb	r3, [r2, #1]
 8004a2a:	f361 03c3 	bfi	r3, r1, #3, #1
 8004a2e:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8004a30:	7c3b      	ldrb	r3, [r7, #16]
 8004a32:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a36:	b2d9      	uxtb	r1, r3
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	7853      	ldrb	r3, [r2, #1]
 8004a3c:	f361 1304 	bfi	r3, r1, #4, #1
 8004a40:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8004a42:	7c3b      	ldrb	r3, [r7, #16]
 8004a44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004a48:	b2d9      	uxtb	r1, r3
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	7853      	ldrb	r3, [r2, #1]
 8004a4e:	f361 1345 	bfi	r3, r1, #5, #1
 8004a52:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8004a54:	7c3b      	ldrb	r3, [r7, #16]
 8004a56:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004a5a:	b2d9      	uxtb	r1, r3
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	7853      	ldrb	r3, [r2, #1]
 8004a60:	f361 1386 	bfi	r3, r1, #6, #1
 8004a64:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8004a66:	7c3b      	ldrb	r3, [r7, #16]
 8004a68:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004a6c:	b2d9      	uxtb	r1, r3
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	7853      	ldrb	r3, [r2, #1]
 8004a72:	f361 13c7 	bfi	r3, r1, #7, #1
 8004a76:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004a78:	f107 020c 	add.w	r2, r7, #12
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	2113      	movs	r1, #19
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff fac5 	bl	8004010 <lsm6dsl_read_reg>
 8004a86:	61f8      	str	r0, [r7, #28]

      if (ret == 0) {
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d119      	bne.n	8004ac2 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8004a8e:	7b3b      	ldrb	r3, [r7, #12]
 8004a90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004a94:	b2d9      	uxtb	r1, r3
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	7893      	ldrb	r3, [r2, #2]
 8004a9a:	f361 0300 	bfi	r3, r1, #0, #1
 8004a9e:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8004aa0:	f107 0218 	add.w	r2, r7, #24
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	211a      	movs	r1, #26
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fab1 	bl	8004010 <lsm6dsl_read_reg>
 8004aae:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8004ab0:	7e3b      	ldrb	r3, [r7, #24]
 8004ab2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ab6:	b2d9      	uxtb	r1, r3
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	7893      	ldrb	r3, [r2, #2]
 8004abc:	f361 0300 	bfi	r3, r1, #0, #1
 8004ac0:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8004ad8:	f107 020c 	add.w	r2, r7, #12
 8004adc:	2301      	movs	r3, #1
 8004ade:	2107      	movs	r1, #7
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff fa95 	bl	8004010 <lsm6dsl_read_reg>
 8004ae6:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0) {
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d11f      	bne.n	8004b2e <lsm6dsl_fifo_watermark_set+0x62>
    fifo_ctrl1.fth = (uint8_t) (0x00FFU & val);
 8004aee:	887b      	ldrh	r3, [r7, #2]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t) (( 0x0700U & val ) >> 8);
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	7b3b      	ldrb	r3, [r7, #12]
 8004b02:	f362 0302 	bfi	r3, r2, #0, #3
 8004b06:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1,
 8004b08:	f107 0210 	add.w	r2, r7, #16
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	2106      	movs	r1, #6
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fa95 	bl	8004040 <lsm6dsl_write_reg>
 8004b16:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);

    if (ret == 0) {
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <lsm6dsl_fifo_watermark_set+0x62>
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8004b1e:	f107 020c 	add.w	r2, r7, #12
 8004b22:	2301      	movs	r3, #1
 8004b24:	2107      	movs	r1, #7
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fa8a 	bl	8004040 <lsm6dsl_write_reg>
 8004b2c:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_ctrl2, 1);
    }
  }

  return ret;
 8004b2e:	697b      	ldr	r3, [r7, #20]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <lsm6dsl_fifo_data_level_get>:
  *                BDU bit.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_status1_t fifo_status1;
  lsm6dsl_fifo_status2_t fifo_status2;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS1,
 8004b42:	f107 0210 	add.w	r2, r7, #16
 8004b46:	2301      	movs	r3, #1
 8004b48:	213a      	movs	r1, #58	; 0x3a
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fa60 	bl	8004010 <lsm6dsl_read_reg>
 8004b50:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_status1, 1);

  if (ret == 0) {
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d114      	bne.n	8004b82 <lsm6dsl_fifo_data_level_get+0x4a>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS2,
 8004b58:	f107 020c 	add.w	r2, r7, #12
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	213b      	movs	r1, #59	; 0x3b
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff fa55 	bl	8004010 <lsm6dsl_read_reg>
 8004b66:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&fifo_status2, 1);
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 8004b68:	7b3b      	ldrb	r3, [r7, #12]
 8004b6a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	b29a      	uxth	r2, r3
           (uint16_t) fifo_status1.diff_fifo;
 8004b76:	7c3b      	ldrb	r3, [r7, #16]
 8004b78:	b29b      	uxth	r3, r3
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 8004b7a:	4413      	add	r3, r2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8004b82:	697b      	ldr	r3, [r7, #20]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <lsm6dsl_fifo_pattern_get>:
  *                FIFO_STATUS4, it is recommended to set the BDU bit
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_pattern_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_status3_t fifo_status3;
  lsm6dsl_fifo_status4_t fifo_status4;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS3,
 8004b96:	f107 0210 	add.w	r2, r7, #16
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	213c      	movs	r1, #60	; 0x3c
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff fa36 	bl	8004010 <lsm6dsl_read_reg>
 8004ba4:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_status3, 1);

  if (ret == 0) {
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <lsm6dsl_fifo_pattern_get+0x4a>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS4,
 8004bac:	f107 020c 	add.w	r2, r7, #12
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	213d      	movs	r1, #61	; 0x3d
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fa2b 	bl	8004010 <lsm6dsl_read_reg>
 8004bba:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&fifo_status4, 1);
    *val = ( (uint16_t)fifo_status4.fifo_pattern << 8) +
 8004bbc:	7b3b      	ldrb	r3, [r7, #12]
 8004bbe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	b29a      	uxth	r2, r3
           fifo_status3.fifo_pattern;
 8004bca:	7c3b      	ldrb	r3, [r7, #16]
 8004bcc:	b29b      	uxth	r3, r3
    *val = ( (uint16_t)fifo_status4.fifo_pattern << 8) +
 8004bce:	4413      	add	r3, r2
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8004bd6:	697b      	ldr	r3, [r7, #20]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8004bec:	f107 0208 	add.w	r2, r7, #8
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	2108      	movs	r1, #8
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fa0b 	bl	8004010 <lsm6dsl_read_reg>
 8004bfa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10f      	bne.n	8004c22 <lsm6dsl_fifo_xl_batch_set+0x42>
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	7a3b      	ldrb	r3, [r7, #8]
 8004c0c:	f362 0302 	bfi	r3, r2, #0, #3
 8004c10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8004c12:	f107 0208 	add.w	r2, r7, #8
 8004c16:	2301      	movs	r3, #1
 8004c18:	2108      	movs	r1, #8
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff fa10 	bl	8004040 <lsm6dsl_write_reg>
 8004c20:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8004c38:	f107 0208 	add.w	r2, r7, #8
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	2108      	movs	r1, #8
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff f9e5 	bl	8004010 <lsm6dsl_read_reg>
 8004c46:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10f      	bne.n	8004c6e <lsm6dsl_fifo_gy_batch_set+0x42>
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	7a3b      	ldrb	r3, [r7, #8]
 8004c58:	f362 03c5 	bfi	r3, r2, #3, #3
 8004c5c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8004c5e:	f107 0208 	add.w	r2, r7, #8
 8004c62:	2301      	movs	r3, #1
 8004c64:	2108      	movs	r1, #8
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff f9ea 	bl	8004040 <lsm6dsl_write_reg>
 8004c6c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <lsm6dsl_fifo_stop_on_wtm_set>:
  * @param  val    Change the values of stop_on_fth in reg FIFO_CTRL4
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4,
 8004c84:	f107 0208 	add.w	r2, r7, #8
 8004c88:	2301      	movs	r3, #1
 8004c8a:	2109      	movs	r1, #9
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff f9bf 	bl	8004010 <lsm6dsl_read_reg>
 8004c92:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10f      	bne.n	8004cba <lsm6dsl_fifo_stop_on_wtm_set+0x42>
    fifo_ctrl4.stop_on_fth = val;
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	7a3b      	ldrb	r3, [r7, #8]
 8004ca4:	f362 13c7 	bfi	r3, r2, #7, #1
 8004ca8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL4,
 8004caa:	f107 0208 	add.w	r2, r7, #8
 8004cae:	2301      	movs	r3, #1
 8004cb0:	2109      	movs	r1, #9
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff f9c4 	bl	8004040 <lsm6dsl_write_reg>
 8004cb8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8004cba:	68fb      	ldr	r3, [r7, #12]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004cd0:	f107 0208 	add.w	r2, r7, #8
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	210a      	movs	r1, #10
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff f999 	bl	8004010 <lsm6dsl_read_reg>
 8004cde:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	7a3b      	ldrb	r3, [r7, #8]
 8004cf0:	f362 0302 	bfi	r3, r2, #0, #3
 8004cf4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004cf6:	f107 0208 	add.w	r2, r7, #8
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	210a      	movs	r1, #10
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff f99e 	bl	8004040 <lsm6dsl_write_reg>
 8004d04:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8004d06:	68fb      	ldr	r3, [r7, #12]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <lsm6dsl_fifo_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_odr_fifo_t val)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004d1c:	f107 0208 	add.w	r2, r7, #8
 8004d20:	2301      	movs	r3, #1
 8004d22:	210a      	movs	r1, #10
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff f973 	bl	8004010 <lsm6dsl_read_reg>
 8004d2a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <lsm6dsl_fifo_data_rate_set+0x42>
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	7a3b      	ldrb	r3, [r7, #8]
 8004d3c:	f362 03c6 	bfi	r3, r2, #3, #4
 8004d40:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004d42:	f107 0208 	add.w	r2, r7, #8
 8004d46:	2301      	movs	r3, #1
 8004d48:	210a      	movs	r1, #10
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff f978 	bl	8004040 <lsm6dsl_write_reg>
 8004d50:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8004d52:	68fb      	ldr	r3, [r7, #12]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b093      	sub	sp, #76	; 0x4c
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	089b      	lsrs	r3, r3, #2
 8004d6e:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8004d70:	e052      	b.n	8004e18 <arm_mult_f32+0xbc>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	643b      	str	r3, [r7, #64]	; 0x40
    /* read sample from sourceB */
    inB1 = *pSrcB;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	63bb      	str	r3, [r7, #56]	; 0x38
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 8004d8a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004d8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 8004da6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004daa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	623b      	str	r3, [r7, #32]

    /* store result to destination buffer */
    *pDst = out1;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc0:	601a      	str	r2, [r3, #0]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	61fb      	str	r3, [r7, #28]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 8004dc8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004dcc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd4:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dde:	601a      	str	r2, [r3, #0]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 8004de0:	ed97 7a08 	vldr	s14, [r7, #32]
 8004de4:	edd7 7a07 	vldr	s15, [r7, #28]
 8004de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dec:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3308      	adds	r3, #8
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	601a      	str	r2, [r3, #0]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	601a      	str	r2, [r3, #0]


    /* update pointers to process next samples */
    pSrcA += 4u;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3310      	adds	r3, #16
 8004e04:	60fb      	str	r3, [r7, #12]
    pSrcB += 4u;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	3310      	adds	r3, #16
 8004e0a:	60bb      	str	r3, [r7, #8]
    pDst += 4u;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3310      	adds	r3, #16
 8004e10:	607b      	str	r3, [r7, #4]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8004e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e14:	3b01      	subs	r3, #1
 8004e16:	647b      	str	r3, [r7, #68]	; 0x44
  while(blkCnt > 0u)
 8004e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1a9      	bne.n	8004d72 <arm_mult_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8004e26:	e013      	b.n	8004e50 <arm_mult_f32+0xf4>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	60fa      	str	r2, [r7, #12]
 8004e2e:	ed93 7a00 	vldr	s14, [r3]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	1d1a      	adds	r2, r3, #4
 8004e36:	60ba      	str	r2, [r7, #8]
 8004e38:	edd3 7a00 	vldr	s15, [r3]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1d1a      	adds	r2, r3, #4
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8004e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	647b      	str	r3, [r7, #68]	; 0x44
  while(blkCnt > 0u)
 8004e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e8      	bne.n	8004e28 <arm_mult_f32+0xcc>
  }
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	374c      	adds	r7, #76	; 0x4c
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e6e:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8004e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	db0a      	blt.n	8004e94 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8004e7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004e82:	f00b f96f 	bl	8010164 <sqrtf>
 8004e86:	eef0 7a40 	vmov.f32	s15, s0
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8004e90:	2300      	movs	r3, #0
 8004e92:	e005      	b.n	8004ea0 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004e9c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8004eba:	e072      	b.n	8004fa2 <arm_cmplx_mag_f32+0xfa>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1d1a      	adds	r2, r3, #4
 8004ec0:	60fa      	str	r2, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1d1a      	adds	r2, r3, #4
 8004eca:	60fa      	str	r2, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004ed0:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ed4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004ed8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004edc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	1d1a      	adds	r2, r3, #4
 8004ee8:	60ba      	str	r2, [r7, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef0:	f7ff ffb8 	bl	8004e64 <arm_sqrt_f32>

    realIn = *pSrc++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1d1a      	adds	r2, r3, #4
 8004ef8:	60fa      	str	r2, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1d1a      	adds	r2, r3, #4
 8004f02:	60fa      	str	r2, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004f08:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004f10:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	60ba      	str	r2, [r7, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	eeb0 0a67 	vmov.f32	s0, s15
 8004f28:	f7ff ff9c 	bl	8004e64 <arm_sqrt_f32>

    realIn = *pSrc++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1d1a      	adds	r2, r3, #4
 8004f30:	60fa      	str	r2, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1d1a      	adds	r2, r3, #4
 8004f3a:	60fa      	str	r2, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004f40:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f44:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	1d1a      	adds	r2, r3, #4
 8004f58:	60ba      	str	r2, [r7, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f60:	f7ff ff80 	bl	8004e64 <arm_sqrt_f32>

    realIn = *pSrc++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	60fa      	str	r2, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1d1a      	adds	r2, r3, #4
 8004f72:	60fa      	str	r2, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004f78:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f7c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	1d1a      	adds	r2, r3, #4
 8004f90:	60ba      	str	r2, [r7, #8]
 8004f92:	4618      	mov	r0, r3
 8004f94:	eeb0 0a67 	vmov.f32	s0, s15
 8004f98:	f7ff ff64 	bl	8004e64 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d189      	bne.n	8004ebc <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 8004fb0:	e01e      	b.n	8004ff0 <arm_cmplx_mag_f32+0x148>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1d1a      	adds	r2, r3, #4
 8004fb6:	60fa      	str	r2, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	60fa      	str	r2, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004fc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004fce:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	60ba      	str	r2, [r7, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fe6:	f7ff ff3d 	bl	8004e64 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1dd      	bne.n	8004fb2 <arm_cmplx_mag_f32+0x10a>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8005000:	b480      	push	{r7}
 8005002:	b08b      	sub	sp, #44	; 0x2c
 8005004:	af00      	add	r7, sp, #0
 8005006:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 800500a:	edd7 7a01 	vldr	s15, [r7, #4]
 800500e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80050ec <arm_cos_f32+0xec>
 8005012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005016:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800501a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800501e:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8005022:	edd7 7a08 	vldr	s15, [r7, #32]
 8005026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800502a:	ee17 3a90 	vmov	r3, s15
 800502e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if(in < 0.0f)
 8005030:	edd7 7a08 	vldr	s15, [r7, #32]
 8005034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503c:	d502      	bpl.n	8005044 <arm_cos_f32+0x44>
  {
    n--;
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	3b01      	subs	r3, #1
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800504e:	ed97 7a08 	vldr	s14, [r7, #32]
 8005052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005056:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800505a:	edd7 7a08 	vldr	s15, [r7, #32]
 800505e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80050f0 <arm_cos_f32+0xf0>
 8005062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 800506a:	edd7 7a07 	vldr	s15, [r7, #28]
 800506e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005072:	ee17 3a90 	vmov	r3, s15
 8005076:	b29b      	uxth	r3, r3
 8005078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507c:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800507e:	8b7b      	ldrh	r3, [r7, #26]
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005088:	ed97 7a07 	vldr	s14, [r7, #28]
 800508c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005090:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8005094:	8b7b      	ldrh	r3, [r7, #26]
 8005096:	4a17      	ldr	r2, [pc, #92]	; (80050f4 <arm_cos_f32+0xf4>)
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 80050a0:	8b7b      	ldrh	r3, [r7, #26]
 80050a2:	3301      	adds	r3, #1
 80050a4:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <arm_cos_f32+0xf4>)
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 80050ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80050b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80050be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80050c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80050ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d2:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	ee07 3a90 	vmov	s15, r3
}
 80050dc:	eeb0 0a67 	vmov.f32	s0, s15
 80050e0:	372c      	adds	r7, #44	; 0x2c
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	3e22f983 	.word	0x3e22f983
 80050f0:	44000000 	.word	0x44000000
 80050f4:	08023ba0 	.word	0x08023ba0

080050f8 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b08b      	sub	sp, #44	; 0x2c
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1d1a      	adds	r2, r3, #4
 8005112:	60fa      	str	r2, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	3b01      	subs	r3, #1
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8005120:	e051      	b.n	80051c6 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1d1a      	adds	r2, r3, #4
 8005126:	60fa      	str	r2, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1d1a      	adds	r2, r3, #4
 8005130:	60fa      	str	r2, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8005136:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800513a:	edd7 7a05 	vldr	s15, [r7, #20]
 800513e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005146:	d504      	bpl.n	8005152 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	3301      	adds	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1d1a      	adds	r2, r3, #4
 8005156:	60fa      	str	r2, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 800515c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005160:	edd7 7a04 	vldr	s15, [r7, #16]
 8005164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516c:	d504      	bpl.n	8005178 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	3302      	adds	r3, #2
 8005176:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	60fa      	str	r2, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8005182:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005186:	edd7 7a05 	vldr	s15, [r7, #20]
 800518a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800518e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005192:	d504      	bpl.n	800519e <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3303      	adds	r3, #3
 800519c:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 800519e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80051a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ae:	d504      	bpl.n	80051ba <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	3304      	adds	r3, #4
 80051b8:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	3304      	adds	r3, #4
 80051be:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1aa      	bne.n	8005122 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80051d6:	e016      	b.n	8005206 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1d1a      	adds	r2, r3, #4
 80051dc:	60fa      	str	r2, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80051e2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80051ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f2:	d505      	bpl.n	8005200 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	3b01      	subs	r3, #1
 8005204:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e5      	bne.n	80051d8 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005210:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	601a      	str	r2, [r3, #0]
}
 8005218:	bf00      	nop
 800521a:	372c      	adds	r7, #44	; 0x2c
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b0a0      	sub	sp, #128	; 0x80
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8005234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	4413      	add	r3, r2
 800523c:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8005248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524a:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 800524c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8005252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	4413      	add	r3, r2
 800525a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 800525c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005262:	4413      	add	r3, r2
 8005264:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8005266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800526c:	e1b6      	b.n	80055dc <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8005286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800528c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8005292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8005298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 800529e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80052a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80052aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80052b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80052b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80052bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80052c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80052c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80052ce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80052d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	1d1a      	adds	r2, r3, #4
 80052da:	603a      	str	r2, [r7, #0]
 80052dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052e0:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80052e4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80052e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	1d1a      	adds	r2, r3, #4
 80052f0:	603a      	str	r2, [r7, #0]
 80052f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f6:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 80052fa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80052fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	1d1a      	adds	r2, r3, #4
 8005306:	603a      	str	r2, [r7, #0]
 8005308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800530c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8005310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005314:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	1d1a      	adds	r2, r3, #4
 800531c:	603a      	str	r2, [r7, #0]
 800531e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005322:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8005326:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800532a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800532e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005332:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8005336:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800533a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800533e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005342:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8005346:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800534a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800534e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005352:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8005356:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800535a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800535e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005362:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8005366:	ed97 7a06 	vldr	s14, [r7, #24]
 800536a:	edd7 7a02 	vldr	s15, [r7, #8]
 800536e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005370:	1d1a      	adds	r2, r3, #4
 8005372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005378:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800537c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005380:	edd7 7a03 	vldr	s15, [r7, #12]
 8005384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	67fa      	str	r2, [r7, #124]	; 0x7c
 800538a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800538e:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8005392:	ed97 7a08 	vldr	s14, [r7, #32]
 8005396:	edd7 7a04 	vldr	s15, [r7, #16]
 800539a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800539c:	1d1a      	adds	r2, r3, #4
 800539e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80053a8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80053ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80053b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053b2:	1d1a      	adds	r2, r3, #4
 80053b4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ba:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80053be:	ed97 7a02 	vldr	s14, [r7, #8]
 80053c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80053c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ca:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80053ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80053d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80053d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053da:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80053de:	ed97 7a04 	vldr	s14, [r7, #16]
 80053e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80053e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ea:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80053ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80053f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80053f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053fa:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 80053fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005400:	1d1a      	adds	r2, r3, #4
 8005402:	673a      	str	r2, [r7, #112]	; 0x70
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8005408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800540a:	1d1a      	adds	r2, r3, #4
 800540c:	673a      	str	r2, [r7, #112]	; 0x70
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8005412:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005416:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800541a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8005422:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005426:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800542a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8005432:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005436:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8005442:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005446:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8005452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005454:	1d1a      	adds	r2, r3, #4
 8005456:	677a      	str	r2, [r7, #116]	; 0x74
 8005458:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800545c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005464:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8005468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546a:	1d1a      	adds	r2, r3, #4
 800546c:	677a      	str	r2, [r7, #116]	; 0x74
 800546e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005472:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800547a:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800547e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005482:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800548e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005492:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 800549e:	edd7 7a03 	vldr	s15, [r7, #12]
 80054a2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80054ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80054b2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80054b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80054be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c0:	1d1a      	adds	r2, r3, #4
 80054c2:	67ba      	str	r2, [r7, #120]	; 0x78
 80054c4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80054c8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80054cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054d0:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80054d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d6:	1d1a      	adds	r2, r3, #4
 80054d8:	67ba      	str	r2, [r7, #120]	; 0x78
 80054da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80054de:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80054e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e6:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 80054ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ec:	1d1a      	adds	r2, r3, #4
 80054ee:	673a      	str	r2, [r7, #112]	; 0x70
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80054f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	673a      	str	r2, [r7, #112]	; 0x70
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 80054fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005502:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800550e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005512:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800551e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005522:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800552e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005532:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 800553e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005540:	1d1a      	adds	r2, r3, #4
 8005542:	677a      	str	r2, [r7, #116]	; 0x74
 8005544:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005548:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800554c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005550:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8005554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005556:	1d1a      	adds	r2, r3, #4
 8005558:	677a      	str	r2, [r7, #116]	; 0x74
 800555a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800555e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005566:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 800556a:	edd7 7a04 	vldr	s15, [r7, #16]
 800556e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005576:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 800557a:	edd7 7a05 	vldr	s15, [r7, #20]
 800557e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005586:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 800558a:	edd7 7a05 	vldr	s15, [r7, #20]
 800558e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005596:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 800559a:	edd7 7a04 	vldr	s15, [r7, #16]
 800559e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80055a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80055aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ac:	1d1a      	adds	r2, r3, #4
 80055ae:	67ba      	str	r2, [r7, #120]	; 0x78
 80055b0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80055b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80055b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055bc:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80055c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c2:	1d1a      	adds	r2, r3, #4
 80055c4:	67ba      	str	r2, [r7, #120]	; 0x78
 80055c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80055ca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d2:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 80055d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d8:	3b01      	subs	r3, #1
 80055da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f47f ae45 	bne.w	800526e <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80055e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055e6:	b299      	uxth	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	2302      	movs	r3, #2
 80055ee:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80055f0:	f000 fef2 	bl	80063d8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80055f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f6:	b299      	uxth	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	2302      	movs	r3, #2
 80055fe:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005600:	f000 feea 	bl	80063d8 <arm_radix8_butterfly_f32>
}
 8005604:	bf00      	nop
 8005606:	3780      	adds	r7, #128	; 0x80
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b0ac      	sub	sp, #176	; 0xb0
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	b29b      	uxth	r3, r3
 800561e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8005622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	4413      	add	r3, r2
 800562c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8005630:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800563a:	4413      	add	r3, r2
 800563c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8005640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800564a:	4413      	add	r3, r2
 800564c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8005654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005658:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800565a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800565e:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8005660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005664:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8005666:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800566a:	3b04      	subs	r3, #4
 800566c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8005670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005674:	3b04      	subs	r3, #4
 8005676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800567a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800567e:	3b04      	subs	r3, #4
 8005680:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8005684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800568e:	4413      	add	r3, r2
 8005690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800569c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80056ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80056b6:	2302      	movs	r3, #2
 80056b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80056ba:	2304      	movs	r3, #4
 80056bc:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80056be:	2306      	movs	r3, #6
 80056c0:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	ed93 7a00 	vldr	s14, [r3]
 80056c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056cc:	edd3 7a00 	vldr	s15, [r3]
 80056d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056d4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	ed93 7a00 	vldr	s14, [r3]
 80056de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056e2:	edd3 7a00 	vldr	s15, [r3]
 80056e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056ea:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	3304      	adds	r3, #4
 80056f2:	ed93 7a00 	vldr	s14, [r3]
 80056f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056fa:	3304      	adds	r3, #4
 80056fc:	edd3 7a00 	vldr	s15, [r3]
 8005700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005704:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	3304      	adds	r3, #4
 800570c:	ed93 7a00 	vldr	s14, [r3]
 8005710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005714:	3304      	adds	r3, #4
 8005716:	edd3 7a00 	vldr	s15, [r3]
 800571a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800571e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8005722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005726:	3304      	adds	r3, #4
 8005728:	ed93 7a00 	vldr	s14, [r3]
 800572c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005734:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005738:	3304      	adds	r3, #4
 800573a:	edd3 7a00 	vldr	s15, [r3]
 800573e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005742:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8005746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800574a:	edd3 7a00 	vldr	s15, [r3]
 800574e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005756:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800575a:	edd3 7a00 	vldr	s15, [r3]
 800575e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005762:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8005766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800576a:	edd3 7a00 	vldr	s15, [r3]
 800576e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800577a:	edd3 7a00 	vldr	s15, [r3]
 800577e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005782:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8005786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800578a:	3304      	adds	r3, #4
 800578c:	edd3 7a00 	vldr	s15, [r3]
 8005790:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005794:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800579c:	3304      	adds	r3, #4
 800579e:	edd3 7a00 	vldr	s15, [r3]
 80057a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057a6:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80057aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057ae:	3304      	adds	r3, #4
 80057b0:	edd3 7a00 	vldr	s15, [r3]
 80057b4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80057b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057c0:	3304      	adds	r3, #4
 80057c2:	edd3 7a00 	vldr	s15, [r3]
 80057c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ca:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80057ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057d2:	ed93 7a00 	vldr	s14, [r3]
 80057d6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80057da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057e2:	edd3 7a00 	vldr	s15, [r3]
 80057e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ea:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80057ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057f2:	ed93 7a00 	vldr	s14, [r3]
 80057f6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80057fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005802:	edd3 7a00 	vldr	s15, [r3]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	1d1a      	adds	r2, r3, #4
 800580a:	603a      	str	r2, [r7, #0]
 800580c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005810:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8005814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005818:	3304      	adds	r3, #4
 800581a:	ed93 7a00 	vldr	s14, [r3]
 800581e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005822:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800582a:	3304      	adds	r3, #4
 800582c:	edd3 7a00 	vldr	s15, [r3]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	603a      	str	r2, [r7, #0]
 8005836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800583a:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800583e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005842:	1d1a      	adds	r2, r3, #4
 8005844:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584a:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800584c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005850:	1d1a      	adds	r2, r3, #4
 8005852:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005858:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800585a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800585e:	1d1a      	adds	r2, r3, #4
 8005860:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8005868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800586c:	1d1a      	adds	r2, r3, #4
 800586e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005872:	6a3a      	ldr	r2, [r7, #32]
 8005874:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8005876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800587a:	1d1a      	adds	r2, r3, #4
 800587c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8005884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005888:	1d1a      	adds	r2, r3, #4
 800588a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8005892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800589a:	4413      	add	r3, r2
 800589c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80058a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80058a8:	4413      	add	r3, r2
 80058aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80058ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058b6:	4413      	add	r3, r2
 80058b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80058bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058c0:	3b02      	subs	r3, #2
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058c8:	e31a      	b.n	8005f00 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	ed93 7a00 	vldr	s14, [r3]
 80058d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058d4:	edd3 7a00 	vldr	s15, [r3]
 80058d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058dc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	ed93 7a00 	vldr	s14, [r3]
 80058e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058ea:	edd3 7a00 	vldr	s15, [r3]
 80058ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	3304      	adds	r3, #4
 80058fa:	ed93 7a00 	vldr	s14, [r3]
 80058fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005902:	3304      	adds	r3, #4
 8005904:	edd3 7a00 	vldr	s15, [r3]
 8005908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800590c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	3304      	adds	r3, #4
 8005914:	ed93 7a00 	vldr	s14, [r3]
 8005918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800591c:	3304      	adds	r3, #4
 800591e:	edd3 7a00 	vldr	s15, [r3]
 8005922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005926:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 800592a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800592e:	3304      	adds	r3, #4
 8005930:	ed93 7a00 	vldr	s14, [r3]
 8005934:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800593c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005940:	3304      	adds	r3, #4
 8005942:	edd3 7a00 	vldr	s15, [r3]
 8005946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800594a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800594e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005952:	edd3 7a00 	vldr	s15, [r3]
 8005956:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800595a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800595e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005962:	edd3 7a00 	vldr	s15, [r3]
 8005966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800596a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 800596e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005972:	edd3 7a00 	vldr	s15, [r3]
 8005976:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800597a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800597e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005982:	edd3 7a00 	vldr	s15, [r3]
 8005986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800598a:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 800598e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005992:	3304      	adds	r3, #4
 8005994:	edd3 7a00 	vldr	s15, [r3]
 8005998:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800599c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059a4:	3304      	adds	r3, #4
 80059a6:	edd3 7a00 	vldr	s15, [r3]
 80059aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ae:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80059b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059b6:	3304      	adds	r3, #4
 80059b8:	edd3 7a00 	vldr	s15, [r3]
 80059bc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80059c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059c8:	3304      	adds	r3, #4
 80059ca:	edd3 7a00 	vldr	s15, [r3]
 80059ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d2:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80059d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059da:	ed93 7a00 	vldr	s14, [r3]
 80059de:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80059e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059ea:	edd3 7a00 	vldr	s15, [r3]
 80059ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059f2:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80059f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059fa:	ed93 7a00 	vldr	s14, [r3]
 80059fe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a0a:	edd3 7a00 	vldr	s15, [r3]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	1d1a      	adds	r2, r3, #4
 8005a12:	603a      	str	r2, [r7, #0]
 8005a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a18:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8005a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a20:	3304      	adds	r3, #4
 8005a22:	ed93 7a00 	vldr	s14, [r3]
 8005a26:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a32:	3304      	adds	r3, #4
 8005a34:	edd3 7a00 	vldr	s15, [r3]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	1d1a      	adds	r2, r3, #4
 8005a3c:	603a      	str	r2, [r7, #0]
 8005a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a42:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8005a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a4a:	3b04      	subs	r3, #4
 8005a4c:	ed93 7a00 	vldr	s14, [r3]
 8005a50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a54:	3b04      	subs	r3, #4
 8005a56:	edd3 7a00 	vldr	s15, [r3]
 8005a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a5e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8005a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a66:	3b04      	subs	r3, #4
 8005a68:	ed93 7a00 	vldr	s14, [r3]
 8005a6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a70:	3b04      	subs	r3, #4
 8005a72:	edd3 7a00 	vldr	s15, [r3]
 8005a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a7a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8005a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a82:	ed93 7a00 	vldr	s14, [r3]
 8005a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a8a:	edd3 7a00 	vldr	s15, [r3]
 8005a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a92:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8005a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a9a:	ed93 7a00 	vldr	s14, [r3]
 8005a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005aa2:	edd3 7a00 	vldr	s15, [r3]
 8005aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aaa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8005aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ab2:	ed93 7a00 	vldr	s14, [r3]
 8005ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aba:	edd3 7a00 	vldr	s15, [r3]
 8005abe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ac2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aca:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8005ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ad2:	ed93 7a00 	vldr	s14, [r3]
 8005ad6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ada:	edd3 7a00 	vldr	s15, [r3]
 8005ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ae6:	3b04      	subs	r3, #4
 8005ae8:	edd3 7a00 	vldr	s15, [r3]
 8005aec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005af0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005af4:	3b04      	subs	r3, #4
 8005af6:	edd3 7a00 	vldr	s15, [r3]
 8005afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005afe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8005b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b06:	3b04      	subs	r3, #4
 8005b08:	edd3 7a00 	vldr	s15, [r3]
 8005b0c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b18:	3b04      	subs	r3, #4
 8005b1a:	edd3 7a00 	vldr	s15, [r3]
 8005b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b22:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8005b26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b2a:	edd3 7a00 	vldr	s15, [r3]
 8005b2e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005b32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b3a:	edd3 7a00 	vldr	s15, [r3]
 8005b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8005b46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b4a:	ed93 7a00 	vldr	s14, [r3]
 8005b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b52:	edd3 7a00 	vldr	s15, [r3]
 8005b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b5a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b62:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8005b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b6a:	3b04      	subs	r3, #4
 8005b6c:	ed93 7a00 	vldr	s14, [r3]
 8005b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b74:	3b04      	subs	r3, #4
 8005b76:	edd3 7a00 	vldr	s15, [r3]
 8005b7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b7e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b86:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8005b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b8e:	ed93 7a00 	vldr	s14, [r3]
 8005b92:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b9e:	edd3 7a00 	vldr	s15, [r3]
 8005ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ba6:	1f1a      	subs	r2, r3, #4
 8005ba8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bb0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8005bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bb8:	3b04      	subs	r3, #4
 8005bba:	ed93 7a00 	vldr	s14, [r3]
 8005bbe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bca:	3b04      	subs	r3, #4
 8005bcc:	edd3 7a00 	vldr	s15, [r3]
 8005bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd4:	1f1a      	subs	r2, r3, #4
 8005bd6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bde:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8005be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005be6:	1d1a      	adds	r2, r3, #4
 8005be8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8005bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8005bfe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005c02:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8005c0e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c12:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8005c1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c22:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8005c2e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005c32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8005c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005c48:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005c4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c54:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8005c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c5c:	1d1a      	adds	r2, r3, #4
 8005c5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005c62:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005c66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c6e:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8005c72:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005c76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8005c82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c86:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8005c92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c96:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8005ca2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005ca6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8005cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cb6:	1f1a      	subs	r2, r3, #4
 8005cb8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cbc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005cc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cc8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8005ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cd0:	1f1a      	subs	r2, r3, #4
 8005cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cd6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005cda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ce2:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8005ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8005cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8005cf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005cfe:	4413      	add	r3, r2
 8005d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8005d04:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d10:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8005d14:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d20:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8005d24:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d28:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d30:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8005d34:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d38:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d40:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8005d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d48:	1d1a      	adds	r2, r3, #4
 8005d4a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d4e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005d52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d5a:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8005d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005d6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d74:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8005d78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d7c:	eef1 7a67 	vneg.f32	s15, s15
 8005d80:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d88:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8005d8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d90:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d98:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8005d9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005da0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8005dac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005db0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8005dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dc0:	1f1a      	subs	r2, r3, #4
 8005dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dc6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005dca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd2:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8005dd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dda:	1f1a      	subs	r2, r3, #4
 8005ddc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005de0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005de4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dec:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8005df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8005df8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8005e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e08:	4413      	add	r3, r2
 8005e0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8005e0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8005e1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8005e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e32:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8005e3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e42:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8005e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005e58:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005e5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e64:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8005e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e6c:	1d1a      	adds	r2, r3, #4
 8005e6e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005e72:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005e76:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e7e:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8005e82:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e86:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8005e92:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8005ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ea6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8005eb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005eb6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8005ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ec6:	1f1a      	subs	r2, r3, #4
 8005ec8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8005ecc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005ed0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ed8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8005edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ee0:	1f1a      	subs	r2, r3, #4
 8005ee2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8005ee6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005eea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef2:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8005ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005efa:	3b01      	subs	r3, #1
 8005efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f47f ace0 	bne.w	80058ca <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	ed93 7a00 	vldr	s14, [r3]
 8005f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f14:	edd3 7a00 	vldr	s15, [r3]
 8005f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f1c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	ed93 7a00 	vldr	s14, [r3]
 8005f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f2a:	edd3 7a00 	vldr	s15, [r3]
 8005f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f32:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	ed93 7a00 	vldr	s14, [r3]
 8005f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f42:	3304      	adds	r3, #4
 8005f44:	edd3 7a00 	vldr	s15, [r3]
 8005f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f4c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	3304      	adds	r3, #4
 8005f54:	ed93 7a00 	vldr	s14, [r3]
 8005f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	edd3 7a00 	vldr	s15, [r3]
 8005f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f66:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8005f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f6e:	3304      	adds	r3, #4
 8005f70:	ed93 7a00 	vldr	s14, [r3]
 8005f74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f80:	3304      	adds	r3, #4
 8005f82:	edd3 7a00 	vldr	s15, [r3]
 8005f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f8a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8005f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f92:	edd3 7a00 	vldr	s15, [r3]
 8005f96:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005f9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fa2:	edd3 7a00 	vldr	s15, [r3]
 8005fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005faa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8005fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fb2:	edd3 7a00 	vldr	s15, [r3]
 8005fb6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fc2:	edd3 7a00 	vldr	s15, [r3]
 8005fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fca:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8005fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	edd3 7a00 	vldr	s15, [r3]
 8005fd8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005fdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	edd3 7a00 	vldr	s15, [r3]
 8005fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fee:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8005ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	edd3 7a00 	vldr	s15, [r3]
 8005ffc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006000:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006008:	3304      	adds	r3, #4
 800600a:	edd3 7a00 	vldr	s15, [r3]
 800600e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006012:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8006016:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800601a:	ed93 7a00 	vldr	s14, [r3]
 800601e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800602a:	edd3 7a00 	vldr	s15, [r3]
 800602e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006032:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8006036:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800603a:	ed93 7a00 	vldr	s14, [r3]
 800603e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006042:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800604a:	edd3 7a00 	vldr	s15, [r3]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	1d1a      	adds	r2, r3, #4
 8006052:	603a      	str	r2, [r7, #0]
 8006054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006058:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800605c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006060:	3304      	adds	r3, #4
 8006062:	ed93 7a00 	vldr	s14, [r3]
 8006066:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800606a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800606e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006072:	3304      	adds	r3, #4
 8006074:	edd3 7a00 	vldr	s15, [r3]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	603a      	str	r2, [r7, #0]
 800607e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006082:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8006086:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800608e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8006096:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800609a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800609e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80060a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80060aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80060ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80060b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80060ba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80060c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80060ca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80060ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80060d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060da:	1d1a      	adds	r2, r3, #4
 80060dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80060e0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80060e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80060e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060ec:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80060f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060f4:	1d1a      	adds	r2, r3, #4
 80060f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80060fa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80060fe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006106:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 800610a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8006112:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800611a:	edd7 7a07 	vldr	s15, [r7, #28]
 800611e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006126:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800612a:	edd7 7a08 	vldr	s15, [r7, #32]
 800612e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006136:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800613a:	edd7 7a08 	vldr	s15, [r7, #32]
 800613e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006146:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800614a:	edd7 7a07 	vldr	s15, [r7, #28]
 800614e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800615a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800615e:	1d1a      	adds	r2, r3, #4
 8006160:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006164:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006168:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800616c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006170:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8006174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006178:	1d1a      	adds	r2, r3, #4
 800617a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800617e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006182:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800618a:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800618e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8006196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800619e:	edd7 7a03 	vldr	s15, [r7, #12]
 80061a2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80061a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80061ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80061b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80061b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80061be:	edd7 7a04 	vldr	s15, [r7, #16]
 80061c2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80061ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80061d2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80061d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061da:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80061de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061e2:	1d1a      	adds	r2, r3, #4
 80061e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80061e8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80061ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80061f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061f4:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80061f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061fc:	1d1a      	adds	r2, r3, #4
 80061fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006202:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006206:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800620a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800620e:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8006212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006216:	b299      	uxth	r1, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	2304      	movs	r3, #4
 800621e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006220:	f000 f8da 	bl	80063d8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8006224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006228:	b299      	uxth	r1, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	2304      	movs	r3, #4
 8006230:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8006232:	f000 f8d1 	bl	80063d8 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8006236:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800623a:	b299      	uxth	r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	2304      	movs	r3, #4
 8006242:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006244:	f000 f8c8 	bl	80063d8 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8006248:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800624c:	b299      	uxth	r1, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	2304      	movs	r3, #4
 8006254:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006256:	f000 f8bf 	bl	80063d8 <arm_radix8_butterfly_f32>
}
 800625a:	bf00      	nop
 800625c:	37b0      	adds	r7, #176	; 0xb0
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b088      	sub	sp, #32
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	4611      	mov	r1, r2
 800626e:	461a      	mov	r2, r3
 8006270:	460b      	mov	r3, r1
 8006272:	71fb      	strb	r3, [r7, #7]
 8006274:	4613      	mov	r3, r2
 8006276:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d117      	bne.n	80062b4 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	3304      	adds	r3, #4
 8006288:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	e00d      	b.n	80062ac <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	edd3 7a00 	vldr	s15, [r3]
 8006296:	eef1 7a67 	vneg.f32	s15, s15
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	3308      	adds	r3, #8
 80062a4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	3301      	adds	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d3ed      	bcc.n	8006290 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ba:	d040      	beq.n	800633e <arm_cfft_f32+0xdc>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c2:	d845      	bhi.n	8006350 <arm_cfft_f32+0xee>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ca:	d033      	beq.n	8006334 <arm_cfft_f32+0xd2>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d2:	d83d      	bhi.n	8006350 <arm_cfft_f32+0xee>
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d026      	beq.n	800632a <arm_cfft_f32+0xc8>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e2:	d835      	bhi.n	8006350 <arm_cfft_f32+0xee>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ea:	d028      	beq.n	800633e <arm_cfft_f32+0xdc>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f2:	d82d      	bhi.n	8006350 <arm_cfft_f32+0xee>
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fa:	d01b      	beq.n	8006334 <arm_cfft_f32+0xd2>
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006302:	d825      	bhi.n	8006350 <arm_cfft_f32+0xee>
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b80      	cmp	r3, #128	; 0x80
 8006308:	d00f      	beq.n	800632a <arm_cfft_f32+0xc8>
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d81f      	bhi.n	8006350 <arm_cfft_f32+0xee>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d013      	beq.n	800633e <arm_cfft_f32+0xdc>
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d819      	bhi.n	8006350 <arm_cfft_f32+0xee>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b10      	cmp	r3, #16
 8006320:	d003      	beq.n	800632a <arm_cfft_f32+0xc8>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b20      	cmp	r3, #32
 8006326:	d005      	beq.n	8006334 <arm_cfft_f32+0xd2>
 8006328:	e012      	b.n	8006350 <arm_cfft_f32+0xee>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7fe ff79 	bl	8005224 <arm_cfft_radix8by2_f32>
        break;
 8006332:	e00d      	b.n	8006350 <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff f968 	bl	800560c <arm_cfft_radix8by4_f32>
        break;
 800633c:	e008      	b.n	8006350 <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	b299      	uxth	r1, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	2301      	movs	r3, #1
 8006348:	68b8      	ldr	r0, [r7, #8]
 800634a:	f000 f845 	bl	80063d8 <arm_radix8_butterfly_f32>
        break;
 800634e:	bf00      	nop
    }  

    if( bitReverseFlag )
 8006350:	79bb      	ldrb	r3, [r7, #6]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8999      	ldrh	r1, [r3, #12]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	461a      	mov	r2, r3
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	f7f9 ff35 	bl	80001d0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d130      	bne.n	80063ce <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800637a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800637e:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8006386:	2300      	movs	r3, #0
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	e01c      	b.n	80063c6 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	1d1a      	adds	r2, r3, #4
 8006390:	61ba      	str	r2, [r7, #24]
 8006392:	ed93 7a00 	vldr	s14, [r3]
 8006396:	edd7 7a04 	vldr	s15, [r7, #16]
 800639a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639e:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	edd3 7a00 	vldr	s15, [r3]
 80063a8:	eeb1 7a67 	vneg.f32	s14, s15
 80063ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80063b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	3304      	adds	r3, #4
 80063be:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	3301      	adds	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d3de      	bcc.n	800638c <arm_cfft_f32+0x12a>
        }
    }
}
 80063ce:	bf00      	nop
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80063d8:	b480      	push	{r7}
 80063da:	b0bd      	sub	sp, #244	; 0xf4
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	461a      	mov	r2, r3
 80063e4:	460b      	mov	r3, r1
 80063e6:	817b      	strh	r3, [r7, #10]
 80063e8:	4613      	mov	r3, r2
 80063ea:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80063ec:	4b09      	ldr	r3, [pc, #36]	; (8006414 <arm_radix8_butterfly_f32+0x3c>)
 80063ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80063f2:	897b      	ldrh	r3, [r7, #10]
 80063f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 80063f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8006400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006404:	08db      	lsrs	r3, r3, #3
 8006406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006410:	e002      	b.n	8006418 <arm_radix8_butterfly_f32+0x40>
 8006412:	bf00      	nop
 8006414:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8006418:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800641c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006420:	4413      	add	r3, r2
 8006422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8006426:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800642a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642e:	4413      	add	r3, r2
 8006430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8006434:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643c:	4413      	add	r3, r2
 800643e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8006442:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644a:	4413      	add	r3, r2
 800644c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8006450:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006458:	4413      	add	r3, r2
 800645a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800645e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006466:	4413      	add	r3, r2
 8006468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800646c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006474:	4413      	add	r3, r2
 8006476:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800647a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	ed93 7a00 	vldr	s14, [r3]
 8006488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	edd3 7a00 	vldr	s15, [r3]
 8006496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800649a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800649e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	ed93 7a00 	vldr	s14, [r3]
 80064ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	edd3 7a00 	vldr	s15, [r3]
 80064ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064be:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80064c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	ed93 7a00 	vldr	s14, [r3]
 80064d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	edd3 7a00 	vldr	s15, [r3]
 80064de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80064e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	ed93 7a00 	vldr	s14, [r3]
 80064f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	edd3 7a00 	vldr	s15, [r3]
 8006502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006506:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800650a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	ed93 7a00 	vldr	s14, [r3]
 8006518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	edd3 7a00 	vldr	s15, [r3]
 8006526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800652a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800652e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	ed93 7a00 	vldr	s14, [r3]
 800653c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	edd3 7a00 	vldr	s15, [r3]
 800654a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800654e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8006552:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	ed93 7a00 	vldr	s14, [r3]
 8006560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4413      	add	r3, r2
 800656a:	edd3 7a00 	vldr	s15, [r3]
 800656e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006572:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8006576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	ed93 7a00 	vldr	s14, [r3]
 8006584:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	edd3 7a00 	vldr	s15, [r3]
 8006592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006596:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800659a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800659e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80065a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065a6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80065aa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80065ae:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80065b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065b6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80065ba:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80065be:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80065c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065c6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80065ca:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80065ce:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80065d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065d6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 80065da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80065e8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80065ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065f0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80065f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006602:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800660a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800660e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	3304      	adds	r3, #4
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	ed93 7a00 	vldr	s14, [r3]
 800661e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	3304      	adds	r3, #4
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	edd3 7a00 	vldr	s15, [r3]
 800662e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006632:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8006636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	3304      	adds	r3, #4
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	ed93 7a00 	vldr	s14, [r3]
 8006646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	3304      	adds	r3, #4
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	edd3 7a00 	vldr	s15, [r3]
 8006656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800665a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800665e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	3304      	adds	r3, #4
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	ed93 7a00 	vldr	s14, [r3]
 800666e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	3304      	adds	r3, #4
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	edd3 7a00 	vldr	s15, [r3]
 800667e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006682:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8006686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	3304      	adds	r3, #4
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	ed93 7a00 	vldr	s14, [r3]
 8006696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	3304      	adds	r3, #4
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	edd3 7a00 	vldr	s15, [r3]
 80066a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066aa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80066ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	3304      	adds	r3, #4
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	ed93 7a00 	vldr	s14, [r3]
 80066be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	3304      	adds	r3, #4
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	edd3 7a00 	vldr	s15, [r3]
 80066ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066d2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80066d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	3304      	adds	r3, #4
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	ed93 7a00 	vldr	s14, [r3]
 80066e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066ea:	00db      	lsls	r3, r3, #3
 80066ec:	3304      	adds	r3, #4
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	edd3 7a00 	vldr	s15, [r3]
 80066f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066fa:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80066fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	3304      	adds	r3, #4
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	ed93 7a00 	vldr	s14, [r3]
 800670e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	3304      	adds	r3, #4
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	edd3 7a00 	vldr	s15, [r3]
 800671e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006722:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8006726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	3304      	adds	r3, #4
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	ed93 7a00 	vldr	s14, [r3]
 8006736:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	3304      	adds	r3, #4
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	edd3 7a00 	vldr	s15, [r3]
 8006746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800674a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800674e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006752:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800675a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800675e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006762:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800676a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800676e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006772:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800677a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800677e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006782:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800678a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800678e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	3304      	adds	r3, #4
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800679e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80067a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067a6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80067aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	3304      	adds	r3, #4
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80067ba:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80067be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067c2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80067c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80067d4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80067d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067dc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80067e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80067ee:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80067f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067f6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80067fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	3304      	adds	r3, #4
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800680a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800680e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006812:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8006816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	3304      	adds	r3, #4
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8006826:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800682a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800682e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8006832:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8006836:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800683a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800683e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800684a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800684e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006856:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8006862:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8006866:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800686a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800686e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006876:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800687a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800687e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006886:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800688a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8006892:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8006896:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800689a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800689e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80068a2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80068a6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80068aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ae:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80068b2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80068b6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80068ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068be:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80068c2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80068c6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80068ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ce:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80068d2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80068d6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80068da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068de:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80068e2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80068e6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80068ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ee:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80068f2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80068f6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80068fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068fe:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8006902:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8006906:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800690a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800690e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8006912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8006920:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006928:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800692c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800693a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800693e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006942:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8006946:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006954:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800695c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8006960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800696e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006976:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800697a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	3304      	adds	r3, #4
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800698a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800698e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006992:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8006996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	3304      	adds	r3, #4
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80069a6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80069aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069ae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80069b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	3304      	adds	r3, #4
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80069c2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80069c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069ca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80069ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	3304      	adds	r3, #4
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80069de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80069e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069e6:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 80069ea:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80069ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069f2:	4413      	add	r3, r2
 80069f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 80069f8:	897b      	ldrh	r3, [r7, #10]
 80069fa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80069fe:	429a      	cmp	r2, r3
 8006a00:	f4ff ad0a 	bcc.w	8006418 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8006a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a08:	2b07      	cmp	r3, #7
 8006a0a:	f240 84e3 	bls.w	80073d4 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8006a1a:	893b      	ldrh	r3, [r7, #8]
 8006a1c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006a20:	4413      	add	r3, r2
 8006a22:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8006a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8006a2a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a30:	4413      	add	r3, r2
 8006a32:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8006a34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a38:	4413      	add	r3, r2
 8006a3a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8006a3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a40:	4413      	add	r3, r2
 8006a42:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8006a44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a48:	4413      	add	r3, r2
 8006a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8006a4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a50:	4413      	add	r3, r2
 8006a52:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8006a54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a58:	4413      	add	r3, r2
 8006a5a:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8006a5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	4413      	add	r3, r2
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8006a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8006a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8006a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4413      	add	r3, r2
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8006a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4413      	add	r3, r2
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8006a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8006aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	4413      	add	r3, r2
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8006ab2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	3304      	adds	r3, #4
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4413      	add	r3, r2
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8006ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	4413      	add	r3, r2
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8006ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	4413      	add	r3, r2
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8006ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	3304      	adds	r3, #4
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	4413      	add	r3, r2
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8006afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	3304      	adds	r3, #4
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	4413      	add	r3, r2
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8006b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4413      	add	r3, r2
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8006b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8006b1e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b26:	4413      	add	r3, r2
 8006b28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8006b2c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8006b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b34:	4413      	add	r3, r2
 8006b36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8006b3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b42:	4413      	add	r3, r2
 8006b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8006b48:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b50:	4413      	add	r3, r2
 8006b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8006b56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5e:	4413      	add	r3, r2
 8006b60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8006b64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8006b72:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8006b80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	ed93 7a00 	vldr	s14, [r3]
 8006b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	edd3 7a00 	vldr	s15, [r3]
 8006b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ba0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8006ba4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	ed93 7a00 	vldr	s14, [r3]
 8006bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	edd3 7a00 	vldr	s15, [r3]
 8006bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bc4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8006bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	ed93 7a00 	vldr	s14, [r3]
 8006bd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	edd3 7a00 	vldr	s15, [r3]
 8006be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006be8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8006bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	ed93 7a00 	vldr	s14, [r3]
 8006bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	edd3 7a00 	vldr	s15, [r3]
 8006c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c0c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8006c10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	ed93 7a00 	vldr	s14, [r3]
 8006c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	edd3 7a00 	vldr	s15, [r3]
 8006c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c30:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8006c34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	ed93 7a00 	vldr	s14, [r3]
 8006c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	edd3 7a00 	vldr	s15, [r3]
 8006c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c54:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8006c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	ed93 7a00 	vldr	s14, [r3]
 8006c66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	edd3 7a00 	vldr	s15, [r3]
 8006c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c78:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8006c7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	ed93 7a00 	vldr	s14, [r3]
 8006c8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	edd3 7a00 	vldr	s15, [r3]
 8006c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c9c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8006ca0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006ca4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cac:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8006cb0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006cb4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cbc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8006cc0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006cc4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ccc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8006cd0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006cd4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cdc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8006ce0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006cee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cf6:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8006cfa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006cfe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d06:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006d0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	3304      	adds	r3, #4
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	ed93 7a00 	vldr	s14, [r3]
 8006d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	3304      	adds	r3, #4
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	edd3 7a00 	vldr	s15, [r3]
 8006d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d2e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8006d32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	3304      	adds	r3, #4
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	ed93 7a00 	vldr	s14, [r3]
 8006d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	3304      	adds	r3, #4
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	edd3 7a00 	vldr	s15, [r3]
 8006d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d56:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	3304      	adds	r3, #4
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	ed93 7a00 	vldr	s14, [r3]
 8006d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	3304      	adds	r3, #4
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	edd3 7a00 	vldr	s15, [r3]
 8006d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8006d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	3304      	adds	r3, #4
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	ed93 7a00 	vldr	s14, [r3]
 8006d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	3304      	adds	r3, #4
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	edd3 7a00 	vldr	s15, [r3]
 8006da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006da6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8006daa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	3304      	adds	r3, #4
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	ed93 7a00 	vldr	s14, [r3]
 8006dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	edd3 7a00 	vldr	s15, [r3]
 8006dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dce:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8006dd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	3304      	adds	r3, #4
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	ed93 7a00 	vldr	s14, [r3]
 8006de2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	3304      	adds	r3, #4
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	edd3 7a00 	vldr	s15, [r3]
 8006df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006df6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006dfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	3304      	adds	r3, #4
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	ed93 7a00 	vldr	s14, [r3]
 8006e0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	3304      	adds	r3, #4
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	edd3 7a00 	vldr	s15, [r3]
 8006e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e1e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8006e22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	3304      	adds	r3, #4
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	ed93 7a00 	vldr	s14, [r3]
 8006e32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	3304      	adds	r3, #4
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	edd3 7a00 	vldr	s15, [r3]
 8006e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e46:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8006e4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006e4e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e56:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8006e5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006e5e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e66:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8006e6a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006e6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8006e7a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006e7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e86:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8006e8a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006e8e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e96:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8006e9a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006e9e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ea6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8006eaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006eba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ec2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8006ec6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006eca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ed2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8006ed6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8006eda:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ee2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8006ee6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8006eea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ef2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8006ef6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006efa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8006f06:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006f0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f12:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8006f16:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006f1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f22:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8006f26:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006f2a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f32:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8006f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	ed97 7a07 	vldr	s14, [r7, #28]
 8006f44:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f4c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8006f50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	3304      	adds	r3, #4
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f60:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f68:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8006f6c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006f70:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f78:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8006f7c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006f80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f88:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8006f8c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006f90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f98:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8006f9c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006fa0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8006fac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	ed97 7a07 	vldr	s14, [r7, #28]
 8006fba:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fc2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8006fc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	3304      	adds	r3, #4
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8006fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fde:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8006fe2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006fe6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fee:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8006ff2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006ff6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffe:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8007002:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007006:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800700a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8007012:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007016:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8007022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	ed97 7a07 	vldr	s14, [r7, #28]
 8007030:	edd7 7a06 	vldr	s15, [r7, #24]
 8007034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007038:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800703c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	3304      	adds	r3, #4
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	ed97 7a05 	vldr	s14, [r7, #20]
 800704c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007054:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8007058:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800705c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007064:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8007070:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007074:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800707c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007084:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8007088:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800708c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007094:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 80070a0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80070a4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80070a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ac:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80070b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80070b8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80070bc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80070c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070c4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80070c8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80070cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80070d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070d4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80070d8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80070dc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80070e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070e4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80070e8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80070ec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80070f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070f4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80070f8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80070fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007104:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8007108:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800710c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007114:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8007118:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800711c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007124:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8007128:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800712c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007134:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8007138:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800713c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007144:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8007148:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800714c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007154:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8007158:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800715c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007164:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8007168:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800716c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007174:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8007178:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800717c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8007180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007184:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8007188:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800718c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8007190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007194:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8007198:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800719c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80071a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071a4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80071a8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80071ac:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80071b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071b4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80071b8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80071bc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80071c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80071c8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80071cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80071d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80071d8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80071dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80071e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80071e8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80071ec:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80071f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80071f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	ed97 7a07 	vldr	s14, [r7, #28]
 8007206:	edd7 7a06 	vldr	s15, [r7, #24]
 800720a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800720e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8007212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	3304      	adds	r3, #4
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007222:	edd7 7a04 	vldr	s15, [r7, #16]
 8007226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800722a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800722e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007232:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8007236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800723e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007242:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800724e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007252:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800725e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007262:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800726e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	ed97 7a07 	vldr	s14, [r7, #28]
 800727c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007284:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8007288:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	3304      	adds	r3, #4
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	ed97 7a05 	vldr	s14, [r7, #20]
 8007298:	edd7 7a04 	vldr	s15, [r7, #16]
 800729c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072a0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80072a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80072a8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80072ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80072b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80072b8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80072bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80072c4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80072c8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80072cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80072d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80072d8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80072dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80072e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80072f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80072f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072fa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80072fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	3304      	adds	r3, #4
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	ed97 7a05 	vldr	s14, [r7, #20]
 800730e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007316:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800731a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800731e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800732a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800732e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8007332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007336:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800733a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800733e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8007342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007346:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800734a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800734e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007356:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800735a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	ed97 7a07 	vldr	s14, [r7, #28]
 8007368:	edd7 7a06 	vldr	s15, [r7, #24]
 800736c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007370:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8007374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	3304      	adds	r3, #4
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	ed97 7a05 	vldr	s14, [r7, #20]
 8007384:	edd7 7a04 	vldr	s15, [r7, #16]
 8007388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800738c:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 8007390:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007398:	4413      	add	r3, r2
 800739a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800739e:	897b      	ldrh	r3, [r7, #10]
 80073a0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80073a4:	429a      	cmp	r2, r3
 80073a6:	f4ff abba 	bcc.w	8006b1e <arm_radix8_butterfly_f32+0x746>
         
         j++;
 80073aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ae:	3301      	adds	r3, #1
 80073b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 80073b4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80073b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073bc:	429a      	cmp	r2, r3
 80073be:	f4ff ab2c 	bcc.w	8006a1a <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 80073c2:	893b      	ldrh	r3, [r7, #8]
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 80073c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	f63f a813 	bhi.w	80063f8 <arm_radix8_butterfly_f32+0x20>
}
 80073d2:	e000      	b.n	80073d6 <arm_radix8_butterfly_f32+0xffe>
         break;
 80073d4:	bf00      	nop
}
 80073d6:	bf00      	nop
 80073d8:	37f4      	adds	r7, #244	; 0xf4
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop

080073e4 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b095      	sub	sp, #84	; 0x54
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;					
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	3b01      	subs	r3, #1
 8007404:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8007406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800740c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8007412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8007418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800741e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007420:	1d1a      	adds	r2, r3, #4
 8007422:	64ba      	str	r2, [r7, #72]	; 0x48
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8007428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800742a:	1d1a      	adds	r2, r3, #4
 800742c:	64ba      	str	r2, [r7, #72]	; 0x48
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	62bb      	str	r3, [r7, #40]	; 0x28
   
   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8007432:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007436:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800743a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800743e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   
   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8007442:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007446:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800744a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800744e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8007452:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007456:	edd7 7a08 	vldr	s15, [r7, #32]
 800745a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	1d1a      	adds	r2, r3, #4
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800746c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8007470:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007474:	edd7 7a08 	vldr	s15, [r7, #32]
 8007478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	1d1a      	adds	r2, r3, #4
 8007480:	607a      	str	r2, [r7, #4]
 8007482:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800748a:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800748e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	4413      	add	r3, r2
 8007496:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8007498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800749a:	3308      	adds	r3, #8
 800749c:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800749e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80074a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80074aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80074b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80074b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b8:	1d1a      	adds	r2, r3, #4
 80074ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80074c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c2:	1d1a      	adds	r2, r3, #4
 80074c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80074ca:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80074ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80074d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80074da:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80074de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80074e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074e6:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80074ea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80074ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80074fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80074fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007506:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800750a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800750e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007516:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800751a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800751e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800752a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800752e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007536:	edd7 7a07 	vldr	s15, [r7, #28]
 800753a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800753e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007554:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8007558:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800755c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007560:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007564:	edd7 7a06 	vldr	s15, [r7, #24]
 8007568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800756c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	1d1a      	adds	r2, r3, #4
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800757e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007582:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8007586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007588:	3308      	adds	r3, #8
 800758a:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800758c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758e:	3b08      	subs	r3, #8
 8007590:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8007592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007594:	3b01      	subs	r3, #1
 8007596:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while(k > 0u);
 8007598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759a:	2b00      	cmp	r3, #0
 800759c:	f47f af7f 	bne.w	800749e <stage_rfft_f32+0xba>
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	3754      	adds	r7, #84	; 0x54
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b095      	sub	sp, #84	; 0x54
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;					
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80075d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80075d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80075dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075de:	3308      	adds	r3, #8
 80075e0:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80075e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80075e6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80075ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	1d1a      	adds	r2, r3, #4
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80075f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075fc:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8007600:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007604:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	1d1a      	adds	r2, r3, #4
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800761a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800761e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	4413      	add	r3, r2
 8007626:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8007628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762a:	3308      	adds	r3, #8
 800762c:	647b      	str	r3, [r7, #68]	; 0x44

   while(k > 0u)
 800762e:	e07c      	b.n	800772a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8007630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8007636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800763c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8007642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8007648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800764a:	1d1a      	adds	r2, r3, #4
 800764c:	64ba      	str	r2, [r7, #72]	; 0x48
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8007652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007654:	1d1a      	adds	r2, r3, #4
 8007656:	64ba      	str	r2, [r7, #72]	; 0x48
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800765c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007660:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007668:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800766c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007670:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007678:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800767c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007680:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007688:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800768c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007690:	edd7 7a08 	vldr	s15, [r7, #32]
 8007694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007698:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800769c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80076a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80076a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a8:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80076ac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80076b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80076b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b8:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80076bc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80076c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80076c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80076cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80076d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	1d1a      	adds	r2, r3, #4
 80076dc:	607a      	str	r2, [r7, #4]
 80076de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076e6:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80076ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80076ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80076f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80076fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8007702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	1d1a      	adds	r2, r3, #4
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007714:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8007718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800771a:	3308      	adds	r3, #8
 800771c:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800771e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007720:	3b08      	subs	r3, #8
 8007722:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8007724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007726:	3b01      	subs	r3, #1
 8007728:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(k > 0u)
 800772a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772c:	2b00      	cmp	r3, #0
 800772e:	f47f af7f 	bne.w	8007630 <merge_rfft_f32+0x82>
   }

}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	3754      	adds	r7, #84	; 0x54
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8a1b      	ldrh	r3, [r3, #16]
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if(ifftFlag)
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff ff20 	bl	80075ae <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	2301      	movs	r3, #1
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	6978      	ldr	r0, [r7, #20]
 8007776:	f7fe fd74 	bl	8006262 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
   
      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800777a:	e00a      	b.n	8007792 <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	2301      	movs	r3, #1
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	6978      	ldr	r0, [r7, #20]
 8007784:	f7fe fd6d 	bl	8006262 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	68b9      	ldr	r1, [r7, #8]
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff fe29 	bl	80073e4 <stage_rfft_f32>
}
 8007792:	bf00      	nop
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.   
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 80077b0:	887b      	ldrh	r3, [r7, #2]
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	887a      	ldrh	r2, [r7, #2]
 80077be:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c8:	d023      	beq.n	8007812 <arm_rfft_fast_init_f32+0x76>
 80077ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ce:	f300 808c 	bgt.w	80078ea <arm_rfft_fast_init_f32+0x14e>
 80077d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d6:	d02a      	beq.n	800782e <arm_rfft_fast_init_f32+0x92>
 80077d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077dc:	f300 8085 	bgt.w	80078ea <arm_rfft_fast_init_f32+0x14e>
 80077e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e4:	d031      	beq.n	800784a <arm_rfft_fast_init_f32+0xae>
 80077e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ea:	dc7e      	bgt.n	80078ea <arm_rfft_fast_init_f32+0x14e>
 80077ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f0:	d039      	beq.n	8007866 <arm_rfft_fast_init_f32+0xca>
 80077f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f6:	dc78      	bgt.n	80078ea <arm_rfft_fast_init_f32+0x14e>
 80077f8:	2b80      	cmp	r3, #128	; 0x80
 80077fa:	d042      	beq.n	8007882 <arm_rfft_fast_init_f32+0xe6>
 80077fc:	2b80      	cmp	r3, #128	; 0x80
 80077fe:	dc74      	bgt.n	80078ea <arm_rfft_fast_init_f32+0x14e>
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	d04b      	beq.n	800789c <arm_rfft_fast_init_f32+0x100>
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	dc70      	bgt.n	80078ea <arm_rfft_fast_init_f32+0x14e>
 8007808:	2b10      	cmp	r3, #16
 800780a:	d061      	beq.n	80078d0 <arm_rfft_fast_init_f32+0x134>
 800780c:	2b20      	cmp	r3, #32
 800780e:	d052      	beq.n	80078b6 <arm_rfft_fast_init_f32+0x11a>
 8007810:	e06b      	b.n	80078ea <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048u:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8007818:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	4a38      	ldr	r2, [pc, #224]	; (8007900 <arm_rfft_fast_init_f32+0x164>)
 800781e:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4a38      	ldr	r2, [pc, #224]	; (8007904 <arm_rfft_fast_init_f32+0x168>)
 8007824:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a37      	ldr	r2, [pc, #220]	; (8007908 <arm_rfft_fast_init_f32+0x16c>)
 800782a:	615a      	str	r2, [r3, #20]
    break;
 800782c:	e060      	b.n	80078f0 <arm_rfft_fast_init_f32+0x154>
  case 1024u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8007834:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	4a34      	ldr	r2, [pc, #208]	; (800790c <arm_rfft_fast_init_f32+0x170>)
 800783a:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4a34      	ldr	r2, [pc, #208]	; (8007910 <arm_rfft_fast_init_f32+0x174>)
 8007840:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a33      	ldr	r2, [pc, #204]	; (8007914 <arm_rfft_fast_init_f32+0x178>)
 8007846:	615a      	str	r2, [r3, #20]
    break;
 8007848:	e052      	b.n	80078f0 <arm_rfft_fast_init_f32+0x154>
  case 512u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007850:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4a30      	ldr	r2, [pc, #192]	; (8007918 <arm_rfft_fast_init_f32+0x17c>)
 8007856:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4a30      	ldr	r2, [pc, #192]	; (800791c <arm_rfft_fast_init_f32+0x180>)
 800785c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a2f      	ldr	r2, [pc, #188]	; (8007920 <arm_rfft_fast_init_f32+0x184>)
 8007862:	615a      	str	r2, [r3, #20]
    break;
 8007864:	e044      	b.n	80078f0 <arm_rfft_fast_init_f32+0x154>
  case 256u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800786c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4a2c      	ldr	r2, [pc, #176]	; (8007924 <arm_rfft_fast_init_f32+0x188>)
 8007872:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	4a2c      	ldr	r2, [pc, #176]	; (8007928 <arm_rfft_fast_init_f32+0x18c>)
 8007878:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a2b      	ldr	r2, [pc, #172]	; (800792c <arm_rfft_fast_init_f32+0x190>)
 800787e:	615a      	str	r2, [r3, #20]
    break;
 8007880:	e036      	b.n	80078f0 <arm_rfft_fast_init_f32+0x154>
  case 128u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	22d0      	movs	r2, #208	; 0xd0
 8007886:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4a29      	ldr	r2, [pc, #164]	; (8007930 <arm_rfft_fast_init_f32+0x194>)
 800788c:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4a28      	ldr	r2, [pc, #160]	; (8007934 <arm_rfft_fast_init_f32+0x198>)
 8007892:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a28      	ldr	r2, [pc, #160]	; (8007938 <arm_rfft_fast_init_f32+0x19c>)
 8007898:	615a      	str	r2, [r3, #20]
    break;
 800789a:	e029      	b.n	80078f0 <arm_rfft_fast_init_f32+0x154>
  case 64u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2238      	movs	r2, #56	; 0x38
 80078a0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4a25      	ldr	r2, [pc, #148]	; (800793c <arm_rfft_fast_init_f32+0x1a0>)
 80078a6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	4a25      	ldr	r2, [pc, #148]	; (8007940 <arm_rfft_fast_init_f32+0x1a4>)
 80078ac:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a24      	ldr	r2, [pc, #144]	; (8007944 <arm_rfft_fast_init_f32+0x1a8>)
 80078b2:	615a      	str	r2, [r3, #20]
    break;
 80078b4:	e01c      	b.n	80078f0 <arm_rfft_fast_init_f32+0x154>
  case 32u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2230      	movs	r2, #48	; 0x30
 80078ba:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4a22      	ldr	r2, [pc, #136]	; (8007948 <arm_rfft_fast_init_f32+0x1ac>)
 80078c0:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	4a21      	ldr	r2, [pc, #132]	; (800794c <arm_rfft_fast_init_f32+0x1b0>)
 80078c6:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a21      	ldr	r2, [pc, #132]	; (8007950 <arm_rfft_fast_init_f32+0x1b4>)
 80078cc:	615a      	str	r2, [r3, #20]
    break;
 80078ce:	e00f      	b.n	80078f0 <arm_rfft_fast_init_f32+0x154>
  case 16u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2214      	movs	r2, #20
 80078d4:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4a1e      	ldr	r2, [pc, #120]	; (8007954 <arm_rfft_fast_init_f32+0x1b8>)
 80078da:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4a1e      	ldr	r2, [pc, #120]	; (8007958 <arm_rfft_fast_init_f32+0x1bc>)
 80078e0:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a1d      	ldr	r2, [pc, #116]	; (800795c <arm_rfft_fast_init_f32+0x1c0>)
 80078e6:	615a      	str	r2, [r3, #20]
    break;
 80078e8:	e002      	b.n	80078f0 <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 80078ea:	23ff      	movs	r3, #255	; 0xff
 80078ec:	73fb      	strb	r3, [r7, #15]
    break;
 80078ee:	bf00      	nop
  }

  return (status);
 80078f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	08019e60 	.word	0x08019e60
 8007904:	080146c8 	.word	0x080146c8
 8007908:	0801fba0 	.word	0x0801fba0
 800790c:	08019050 	.word	0x08019050
 8007910:	080126c8 	.word	0x080126c8
 8007914:	0801dba0 	.word	0x0801dba0
 8007918:	08018cd0 	.word	0x08018cd0
 800791c:	080116c8 	.word	0x080116c8
 8007920:	0801cba0 	.word	0x0801cba0
 8007924:	08018960 	.word	0x08018960
 8007928:	08010ec8 	.word	0x08010ec8
 800792c:	0801c3a0 	.word	0x0801c3a0
 8007930:	080187c0 	.word	0x080187c0
 8007934:	08010ac8 	.word	0x08010ac8
 8007938:	0801bfa0 	.word	0x0801bfa0
 800793c:	08018750 	.word	0x08018750
 8007940:	080108c8 	.word	0x080108c8
 8007944:	0801bda0 	.word	0x0801bda0
 8007948:	080186f0 	.word	0x080186f0
 800794c:	080107c8 	.word	0x080107c8
 8007950:	0801bca0 	.word	0x0801bca0
 8007954:	080186c8 	.word	0x080186c8
 8007958:	08010748 	.word	0x08010748
 800795c:	0801bc20 	.word	0x0801bc20

08007960 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800796a:	2003      	movs	r0, #3
 800796c:	f000 f984 	bl	8007c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007970:	2000      	movs	r0, #0
 8007972:	f000 f80d 	bl	8007990 <HAL_InitTick>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	71fb      	strb	r3, [r7, #7]
 8007980:	e001      	b.n	8007986 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007982:	f7fa fc4d 	bl	8002220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007986:	79fb      	ldrb	r3, [r7, #7]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800799c:	4b17      	ldr	r3, [pc, #92]	; (80079fc <HAL_InitTick+0x6c>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d023      	beq.n	80079ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80079a4:	4b16      	ldr	r3, [pc, #88]	; (8007a00 <HAL_InitTick+0x70>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	4b14      	ldr	r3, [pc, #80]	; (80079fc <HAL_InitTick+0x6c>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80079b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f99f 	bl	8007cfe <HAL_SYSTICK_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10f      	bne.n	80079e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b0f      	cmp	r3, #15
 80079ca:	d809      	bhi.n	80079e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079cc:	2200      	movs	r2, #0
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	f000 f95b 	bl	8007c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80079d8:	4a0a      	ldr	r2, [pc, #40]	; (8007a04 <HAL_InitTick+0x74>)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	e007      	b.n	80079f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	73fb      	strb	r3, [r7, #15]
 80079e4:	e004      	b.n	80079f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	73fb      	strb	r3, [r7, #15]
 80079ea:	e001      	b.n	80079f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000070 	.word	0x20000070
 8007a00:	20000004 	.word	0x20000004
 8007a04:	2000006c 	.word	0x2000006c

08007a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <HAL_IncTick+0x20>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <HAL_IncTick+0x24>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4413      	add	r3, r2
 8007a18:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <HAL_IncTick+0x24>)
 8007a1a:	6013      	str	r3, [r2, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20000070 	.word	0x20000070
 8007a2c:	20004548 	.word	0x20004548

08007a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  return uwTick;
 8007a34:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <HAL_GetTick+0x14>)
 8007a36:	681b      	ldr	r3, [r3, #0]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20004548 	.word	0x20004548

08007a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a50:	f7ff ffee 	bl	8007a30 <HAL_GetTick>
 8007a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d005      	beq.n	8007a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007a62:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <HAL_Delay+0x44>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a6e:	bf00      	nop
 8007a70:	f7ff ffde 	bl	8007a30 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d8f7      	bhi.n	8007a70 <HAL_Delay+0x28>
  {
  }
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000070 	.word	0x20000070

08007a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007aac:	4013      	ands	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ac2:	4a04      	ldr	r2, [pc, #16]	; (8007ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	60d3      	str	r3, [r2, #12]
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	e000ed00 	.word	0xe000ed00

08007ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007adc:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <__NVIC_GetPriorityGrouping+0x18>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	0a1b      	lsrs	r3, r3, #8
 8007ae2:	f003 0307 	and.w	r3, r3, #7
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	db0b      	blt.n	8007b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	f003 021f 	and.w	r2, r3, #31
 8007b0c:	4907      	ldr	r1, [pc, #28]	; (8007b2c <__NVIC_EnableIRQ+0x38>)
 8007b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b12:	095b      	lsrs	r3, r3, #5
 8007b14:	2001      	movs	r0, #1
 8007b16:	fa00 f202 	lsl.w	r2, r0, r2
 8007b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	e000e100 	.word	0xe000e100

08007b30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	db12      	blt.n	8007b68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	f003 021f 	and.w	r2, r3, #31
 8007b48:	490a      	ldr	r1, [pc, #40]	; (8007b74 <__NVIC_DisableIRQ+0x44>)
 8007b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	2001      	movs	r0, #1
 8007b52:	fa00 f202 	lsl.w	r2, r0, r2
 8007b56:	3320      	adds	r3, #32
 8007b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007b5c:	f3bf 8f4f 	dsb	sy
}
 8007b60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007b62:	f3bf 8f6f 	isb	sy
}
 8007b66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	e000e100 	.word	0xe000e100

08007b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	6039      	str	r1, [r7, #0]
 8007b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	db0a      	blt.n	8007ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	490c      	ldr	r1, [pc, #48]	; (8007bc4 <__NVIC_SetPriority+0x4c>)
 8007b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b96:	0112      	lsls	r2, r2, #4
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	440b      	add	r3, r1
 8007b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ba0:	e00a      	b.n	8007bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	4908      	ldr	r1, [pc, #32]	; (8007bc8 <__NVIC_SetPriority+0x50>)
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	f003 030f 	and.w	r3, r3, #15
 8007bae:	3b04      	subs	r3, #4
 8007bb0:	0112      	lsls	r2, r2, #4
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	761a      	strb	r2, [r3, #24]
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	e000e100 	.word	0xe000e100
 8007bc8:	e000ed00 	.word	0xe000ed00

08007bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b089      	sub	sp, #36	; 0x24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f1c3 0307 	rsb	r3, r3, #7
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	bf28      	it	cs
 8007bea:	2304      	movcs	r3, #4
 8007bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	2b06      	cmp	r3, #6
 8007bf4:	d902      	bls.n	8007bfc <NVIC_EncodePriority+0x30>
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	3b03      	subs	r3, #3
 8007bfa:	e000      	b.n	8007bfe <NVIC_EncodePriority+0x32>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c00:	f04f 32ff 	mov.w	r2, #4294967295
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	43da      	mvns	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	401a      	ands	r2, r3
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c14:	f04f 31ff 	mov.w	r1, #4294967295
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1e:	43d9      	mvns	r1, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c24:	4313      	orrs	r3, r2
         );
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3724      	adds	r7, #36	; 0x24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
	...

08007c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c44:	d301      	bcc.n	8007c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c46:	2301      	movs	r3, #1
 8007c48:	e00f      	b.n	8007c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c4a:	4a0a      	ldr	r2, [pc, #40]	; (8007c74 <SysTick_Config+0x40>)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c52:	210f      	movs	r1, #15
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	f7ff ff8e 	bl	8007b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <SysTick_Config+0x40>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c62:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <SysTick_Config+0x40>)
 8007c64:	2207      	movs	r2, #7
 8007c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	e000e010 	.word	0xe000e010

08007c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff ff05 	bl	8007a90 <__NVIC_SetPriorityGrouping>
}
 8007c86:	bf00      	nop
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b086      	sub	sp, #24
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	4603      	mov	r3, r0
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	607a      	str	r2, [r7, #4]
 8007c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ca0:	f7ff ff1a 	bl	8007ad8 <__NVIC_GetPriorityGrouping>
 8007ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	6978      	ldr	r0, [r7, #20]
 8007cac:	f7ff ff8e 	bl	8007bcc <NVIC_EncodePriority>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff ff5d 	bl	8007b78 <__NVIC_SetPriority>
}
 8007cbe:	bf00      	nop
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	4603      	mov	r3, r0
 8007cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff ff0d 	bl	8007af4 <__NVIC_EnableIRQ>
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	4603      	mov	r3, r0
 8007cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff ff1d 	bl	8007b30 <__NVIC_DisableIRQ>
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff ff94 	bl	8007c34 <SysTick_Config>
 8007d0c:	4603      	mov	r3, r0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e0ac      	b.n	8007e84 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f8b2 	bl	8007e98 <DFSDM_GetChannelFromInstance>
 8007d34:	4603      	mov	r3, r0
 8007d36:	4a55      	ldr	r2, [pc, #340]	; (8007e8c <HAL_DFSDM_ChannelInit+0x174>)
 8007d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e09f      	b.n	8007e84 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7f9 fd6b 	bl	8001820 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8007d4a:	4b51      	ldr	r3, [pc, #324]	; (8007e90 <HAL_DFSDM_ChannelInit+0x178>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	4a4f      	ldr	r2, [pc, #316]	; (8007e90 <HAL_DFSDM_ChannelInit+0x178>)
 8007d52:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8007d54:	4b4e      	ldr	r3, [pc, #312]	; (8007e90 <HAL_DFSDM_ChannelInit+0x178>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d125      	bne.n	8007da8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8007d5c:	4b4d      	ldr	r3, [pc, #308]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a4c      	ldr	r2, [pc, #304]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d66:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007d68:	4b4a      	ldr	r3, [pc, #296]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	4948      	ldr	r1, [pc, #288]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007d76:	4b47      	ldr	r3, [pc, #284]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a46      	ldr	r2, [pc, #280]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d7c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8007d80:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	791b      	ldrb	r3, [r3, #4]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d108      	bne.n	8007d9c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8007d8a:	4b42      	ldr	r3, [pc, #264]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	041b      	lsls	r3, r3, #16
 8007d96:	493f      	ldr	r1, [pc, #252]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8007d9c:	4b3d      	ldr	r3, [pc, #244]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a3c      	ldr	r2, [pc, #240]	; (8007e94 <HAL_DFSDM_ChannelInit+0x17c>)
 8007da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007da6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8007db6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6819      	ldr	r1, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007dc6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007dcc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 020f 	bic.w	r2, r2, #15
 8007de4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6819      	ldr	r1, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8007e0c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6899      	ldr	r1, [r3, #8]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f002 0207 	and.w	r2, r2, #7
 8007e38:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6859      	ldr	r1, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e64:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f810 	bl	8007e98 <DFSDM_GetChannelFromInstance>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	4904      	ldr	r1, [pc, #16]	; (8007e8c <HAL_DFSDM_ChannelInit+0x174>)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	2000032c 	.word	0x2000032c
 8007e90:	20000328 	.word	0x20000328
 8007e94:	40016000 	.word	0x40016000

08007e98 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a1c      	ldr	r2, [pc, #112]	; (8007f14 <DFSDM_GetChannelFromInstance+0x7c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d102      	bne.n	8007eae <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	e02b      	b.n	8007f06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a19      	ldr	r2, [pc, #100]	; (8007f18 <DFSDM_GetChannelFromInstance+0x80>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d102      	bne.n	8007ebc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	e024      	b.n	8007f06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a17      	ldr	r2, [pc, #92]	; (8007f1c <DFSDM_GetChannelFromInstance+0x84>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d102      	bne.n	8007eca <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	e01d      	b.n	8007f06 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a14      	ldr	r2, [pc, #80]	; (8007f20 <DFSDM_GetChannelFromInstance+0x88>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d102      	bne.n	8007ed8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8007ed2:	2304      	movs	r3, #4
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	e016      	b.n	8007f06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a12      	ldr	r2, [pc, #72]	; (8007f24 <DFSDM_GetChannelFromInstance+0x8c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d102      	bne.n	8007ee6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8007ee0:	2305      	movs	r3, #5
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e00f      	b.n	8007f06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a0f      	ldr	r2, [pc, #60]	; (8007f28 <DFSDM_GetChannelFromInstance+0x90>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d102      	bne.n	8007ef4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8007eee:	2306      	movs	r3, #6
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e008      	b.n	8007f06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a0d      	ldr	r2, [pc, #52]	; (8007f2c <DFSDM_GetChannelFromInstance+0x94>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d102      	bne.n	8007f02 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8007efc:	2307      	movs	r3, #7
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	e001      	b.n	8007f06 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8007f02:	2303      	movs	r3, #3
 8007f04:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8007f06:	68fb      	ldr	r3, [r7, #12]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	40016000 	.word	0x40016000
 8007f18:	40016020 	.word	0x40016020
 8007f1c:	40016040 	.word	0x40016040
 8007f20:	40016080 	.word	0x40016080
 8007f24:	400160a0 	.word	0x400160a0
 8007f28:	400160c0 	.word	0x400160c0
 8007f2c:	400160e0 	.word	0x400160e0

08007f30 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8007f42:	7afb      	ldrb	r3, [r7, #11]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d103      	bne.n	8007f50 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	605a      	str	r2, [r3, #4]
      break;
 8007f4e:	e002      	b.n	8007f56 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	75fb      	strb	r3, [r7, #23]
      break;
 8007f54:	bf00      	nop
  }

  return status;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e003      	b.n	8007f80 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
  }
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	0c1b      	lsrs	r3, r3, #16
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 031f 	and.w	r3, r3, #31
 8007fa8:	2201      	movs	r2, #1
 8007faa:	fa02 f303 	lsl.w	r3, r2, r3
 8007fae:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <HAL_EXTI_IRQHandler+0x5c>)
 8007fb6:	4413      	add	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	4798      	blx	r3
    }
  }
}
 8007fde:	bf00      	nop
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40010414 	.word	0x40010414

08007fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ffa:	e17f      	b.n	80082fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	2101      	movs	r1, #1
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	fa01 f303 	lsl.w	r3, r1, r3
 8008008:	4013      	ands	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8171 	beq.w	80082f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d00b      	beq.n	8008034 <HAL_GPIO_Init+0x48>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d007      	beq.n	8008034 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008028:	2b11      	cmp	r3, #17
 800802a:	d003      	beq.n	8008034 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b12      	cmp	r3, #18
 8008032:	d130      	bne.n	8008096 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	2203      	movs	r2, #3
 8008040:	fa02 f303 	lsl.w	r3, r2, r3
 8008044:	43db      	mvns	r3, r3
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4013      	ands	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	fa02 f303 	lsl.w	r3, r2, r3
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800806a:	2201      	movs	r2, #1
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	fa02 f303 	lsl.w	r3, r2, r3
 8008072:	43db      	mvns	r3, r3
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	4013      	ands	r3, r2
 8008078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	091b      	lsrs	r3, r3, #4
 8008080:	f003 0201 	and.w	r2, r3, #1
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	fa02 f303 	lsl.w	r3, r2, r3
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	4313      	orrs	r3, r2
 800808e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d118      	bne.n	80080d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80080a8:	2201      	movs	r2, #1
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	fa02 f303 	lsl.w	r3, r2, r3
 80080b0:	43db      	mvns	r3, r3
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4013      	ands	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	08db      	lsrs	r3, r3, #3
 80080be:	f003 0201 	and.w	r2, r3, #1
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	2203      	movs	r2, #3
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	43db      	mvns	r3, r3
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	4013      	ands	r3, r2
 80080ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	fa02 f303 	lsl.w	r3, r2, r3
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d003      	beq.n	8008114 <HAL_GPIO_Init+0x128>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b12      	cmp	r3, #18
 8008112:	d123      	bne.n	800815c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	08da      	lsrs	r2, r3, #3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3208      	adds	r2, #8
 800811c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008120:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	220f      	movs	r2, #15
 800812c:	fa02 f303 	lsl.w	r3, r2, r3
 8008130:	43db      	mvns	r3, r3
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	4013      	ands	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	fa02 f303 	lsl.w	r3, r2, r3
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	08da      	lsrs	r2, r3, #3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3208      	adds	r2, #8
 8008156:	6939      	ldr	r1, [r7, #16]
 8008158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	2203      	movs	r2, #3
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	43db      	mvns	r3, r3
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4013      	ands	r3, r2
 8008172:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f003 0203 	and.w	r2, r3, #3
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80ac 	beq.w	80082f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800819e:	4b5f      	ldr	r3, [pc, #380]	; (800831c <HAL_GPIO_Init+0x330>)
 80081a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a2:	4a5e      	ldr	r2, [pc, #376]	; (800831c <HAL_GPIO_Init+0x330>)
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	6613      	str	r3, [r2, #96]	; 0x60
 80081aa:	4b5c      	ldr	r3, [pc, #368]	; (800831c <HAL_GPIO_Init+0x330>)
 80081ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	60bb      	str	r3, [r7, #8]
 80081b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80081b6:	4a5a      	ldr	r2, [pc, #360]	; (8008320 <HAL_GPIO_Init+0x334>)
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	089b      	lsrs	r3, r3, #2
 80081bc:	3302      	adds	r3, #2
 80081be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	220f      	movs	r2, #15
 80081ce:	fa02 f303 	lsl.w	r3, r2, r3
 80081d2:	43db      	mvns	r3, r3
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	4013      	ands	r3, r2
 80081d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80081e0:	d025      	beq.n	800822e <HAL_GPIO_Init+0x242>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a4f      	ldr	r2, [pc, #316]	; (8008324 <HAL_GPIO_Init+0x338>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d01f      	beq.n	800822a <HAL_GPIO_Init+0x23e>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a4e      	ldr	r2, [pc, #312]	; (8008328 <HAL_GPIO_Init+0x33c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d019      	beq.n	8008226 <HAL_GPIO_Init+0x23a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a4d      	ldr	r2, [pc, #308]	; (800832c <HAL_GPIO_Init+0x340>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <HAL_GPIO_Init+0x236>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a4c      	ldr	r2, [pc, #304]	; (8008330 <HAL_GPIO_Init+0x344>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00d      	beq.n	800821e <HAL_GPIO_Init+0x232>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a4b      	ldr	r2, [pc, #300]	; (8008334 <HAL_GPIO_Init+0x348>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d007      	beq.n	800821a <HAL_GPIO_Init+0x22e>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a4a      	ldr	r2, [pc, #296]	; (8008338 <HAL_GPIO_Init+0x34c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d101      	bne.n	8008216 <HAL_GPIO_Init+0x22a>
 8008212:	2306      	movs	r3, #6
 8008214:	e00c      	b.n	8008230 <HAL_GPIO_Init+0x244>
 8008216:	2307      	movs	r3, #7
 8008218:	e00a      	b.n	8008230 <HAL_GPIO_Init+0x244>
 800821a:	2305      	movs	r3, #5
 800821c:	e008      	b.n	8008230 <HAL_GPIO_Init+0x244>
 800821e:	2304      	movs	r3, #4
 8008220:	e006      	b.n	8008230 <HAL_GPIO_Init+0x244>
 8008222:	2303      	movs	r3, #3
 8008224:	e004      	b.n	8008230 <HAL_GPIO_Init+0x244>
 8008226:	2302      	movs	r3, #2
 8008228:	e002      	b.n	8008230 <HAL_GPIO_Init+0x244>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <HAL_GPIO_Init+0x244>
 800822e:	2300      	movs	r3, #0
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	f002 0203 	and.w	r2, r2, #3
 8008236:	0092      	lsls	r2, r2, #2
 8008238:	4093      	lsls	r3, r2
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008240:	4937      	ldr	r1, [pc, #220]	; (8008320 <HAL_GPIO_Init+0x334>)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	089b      	lsrs	r3, r3, #2
 8008246:	3302      	adds	r3, #2
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800824e:	4b3b      	ldr	r3, [pc, #236]	; (800833c <HAL_GPIO_Init+0x350>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	43db      	mvns	r3, r3
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4013      	ands	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008272:	4a32      	ldr	r2, [pc, #200]	; (800833c <HAL_GPIO_Init+0x350>)
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008278:	4b30      	ldr	r3, [pc, #192]	; (800833c <HAL_GPIO_Init+0x350>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	43db      	mvns	r3, r3
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4013      	ands	r3, r2
 8008286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d003      	beq.n	800829c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800829c:	4a27      	ldr	r2, [pc, #156]	; (800833c <HAL_GPIO_Init+0x350>)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082a2:	4b26      	ldr	r3, [pc, #152]	; (800833c <HAL_GPIO_Init+0x350>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	43db      	mvns	r3, r3
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4013      	ands	r3, r2
 80082b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80082c6:	4a1d      	ldr	r2, [pc, #116]	; (800833c <HAL_GPIO_Init+0x350>)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80082cc:	4b1b      	ldr	r3, [pc, #108]	; (800833c <HAL_GPIO_Init+0x350>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	43db      	mvns	r3, r3
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	4013      	ands	r3, r2
 80082da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082f0:	4a12      	ldr	r2, [pc, #72]	; (800833c <HAL_GPIO_Init+0x350>)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	3301      	adds	r3, #1
 80082fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	fa22 f303 	lsr.w	r3, r2, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	f47f ae78 	bne.w	8007ffc <HAL_GPIO_Init+0x10>
  }
}
 800830c:	bf00      	nop
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40021000 	.word	0x40021000
 8008320:	40010000 	.word	0x40010000
 8008324:	48000400 	.word	0x48000400
 8008328:	48000800 	.word	0x48000800
 800832c:	48000c00 	.word	0x48000c00
 8008330:	48001000 	.word	0x48001000
 8008334:	48001400 	.word	0x48001400
 8008338:	48001800 	.word	0x48001800
 800833c:	40010400 	.word	0x40010400

08008340 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800834a:	2300      	movs	r3, #0
 800834c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800834e:	e0cd      	b.n	80084ec <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008350:	2201      	movs	r2, #1
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	fa02 f303 	lsl.w	r3, r2, r3
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	4013      	ands	r3, r2
 800835c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 80c0 	beq.w	80084e6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008366:	4a68      	ldr	r2, [pc, #416]	; (8008508 <HAL_GPIO_DeInit+0x1c8>)
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	089b      	lsrs	r3, r3, #2
 800836c:	3302      	adds	r3, #2
 800836e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008372:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f003 0303 	and.w	r3, r3, #3
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	220f      	movs	r2, #15
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4013      	ands	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800838e:	d025      	beq.n	80083dc <HAL_GPIO_DeInit+0x9c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a5e      	ldr	r2, [pc, #376]	; (800850c <HAL_GPIO_DeInit+0x1cc>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d01f      	beq.n	80083d8 <HAL_GPIO_DeInit+0x98>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a5d      	ldr	r2, [pc, #372]	; (8008510 <HAL_GPIO_DeInit+0x1d0>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d019      	beq.n	80083d4 <HAL_GPIO_DeInit+0x94>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a5c      	ldr	r2, [pc, #368]	; (8008514 <HAL_GPIO_DeInit+0x1d4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d013      	beq.n	80083d0 <HAL_GPIO_DeInit+0x90>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a5b      	ldr	r2, [pc, #364]	; (8008518 <HAL_GPIO_DeInit+0x1d8>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00d      	beq.n	80083cc <HAL_GPIO_DeInit+0x8c>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a5a      	ldr	r2, [pc, #360]	; (800851c <HAL_GPIO_DeInit+0x1dc>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <HAL_GPIO_DeInit+0x88>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a59      	ldr	r2, [pc, #356]	; (8008520 <HAL_GPIO_DeInit+0x1e0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d101      	bne.n	80083c4 <HAL_GPIO_DeInit+0x84>
 80083c0:	2306      	movs	r3, #6
 80083c2:	e00c      	b.n	80083de <HAL_GPIO_DeInit+0x9e>
 80083c4:	2307      	movs	r3, #7
 80083c6:	e00a      	b.n	80083de <HAL_GPIO_DeInit+0x9e>
 80083c8:	2305      	movs	r3, #5
 80083ca:	e008      	b.n	80083de <HAL_GPIO_DeInit+0x9e>
 80083cc:	2304      	movs	r3, #4
 80083ce:	e006      	b.n	80083de <HAL_GPIO_DeInit+0x9e>
 80083d0:	2303      	movs	r3, #3
 80083d2:	e004      	b.n	80083de <HAL_GPIO_DeInit+0x9e>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e002      	b.n	80083de <HAL_GPIO_DeInit+0x9e>
 80083d8:	2301      	movs	r3, #1
 80083da:	e000      	b.n	80083de <HAL_GPIO_DeInit+0x9e>
 80083dc:	2300      	movs	r3, #0
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	f002 0203 	and.w	r2, r2, #3
 80083e4:	0092      	lsls	r2, r2, #2
 80083e6:	4093      	lsls	r3, r2
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d132      	bne.n	8008454 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80083ee:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <HAL_GPIO_DeInit+0x1e4>)
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	43db      	mvns	r3, r3
 80083f6:	494b      	ldr	r1, [pc, #300]	; (8008524 <HAL_GPIO_DeInit+0x1e4>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80083fc:	4b49      	ldr	r3, [pc, #292]	; (8008524 <HAL_GPIO_DeInit+0x1e4>)
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	43db      	mvns	r3, r3
 8008404:	4947      	ldr	r1, [pc, #284]	; (8008524 <HAL_GPIO_DeInit+0x1e4>)
 8008406:	4013      	ands	r3, r2
 8008408:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800840a:	4b46      	ldr	r3, [pc, #280]	; (8008524 <HAL_GPIO_DeInit+0x1e4>)
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	43db      	mvns	r3, r3
 8008412:	4944      	ldr	r1, [pc, #272]	; (8008524 <HAL_GPIO_DeInit+0x1e4>)
 8008414:	4013      	ands	r3, r2
 8008416:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8008418:	4b42      	ldr	r3, [pc, #264]	; (8008524 <HAL_GPIO_DeInit+0x1e4>)
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	43db      	mvns	r3, r3
 8008420:	4940      	ldr	r1, [pc, #256]	; (8008524 <HAL_GPIO_DeInit+0x1e4>)
 8008422:	4013      	ands	r3, r2
 8008424:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f003 0303 	and.w	r3, r3, #3
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	220f      	movs	r2, #15
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008436:	4a34      	ldr	r2, [pc, #208]	; (8008508 <HAL_GPIO_DeInit+0x1c8>)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	089b      	lsrs	r3, r3, #2
 800843c:	3302      	adds	r3, #2
 800843e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	43da      	mvns	r2, r3
 8008446:	4830      	ldr	r0, [pc, #192]	; (8008508 <HAL_GPIO_DeInit+0x1c8>)
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	089b      	lsrs	r3, r3, #2
 800844c:	400a      	ands	r2, r1
 800844e:	3302      	adds	r3, #2
 8008450:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	2103      	movs	r1, #3
 800845e:	fa01 f303 	lsl.w	r3, r1, r3
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	08da      	lsrs	r2, r3, #3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3208      	adds	r2, #8
 8008470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	220f      	movs	r2, #15
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	43db      	mvns	r3, r3
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	08d2      	lsrs	r2, r2, #3
 8008488:	4019      	ands	r1, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3208      	adds	r2, #8
 800848e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	2103      	movs	r1, #3
 800849c:	fa01 f303 	lsl.w	r3, r1, r3
 80084a0:	43db      	mvns	r3, r3
 80084a2:	401a      	ands	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	2101      	movs	r1, #1
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	fa01 f303 	lsl.w	r3, r1, r3
 80084b4:	43db      	mvns	r3, r3
 80084b6:	401a      	ands	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	2103      	movs	r1, #3
 80084c6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ca:	43db      	mvns	r3, r3
 80084cc:	401a      	ands	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d6:	2101      	movs	r1, #1
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	fa01 f303 	lsl.w	r3, r1, r3
 80084de:	43db      	mvns	r3, r3
 80084e0:	401a      	ands	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	3301      	adds	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	fa22 f303 	lsr.w	r3, r2, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f47f af2b 	bne.w	8008350 <HAL_GPIO_DeInit+0x10>
  }
}
 80084fa:	bf00      	nop
 80084fc:	bf00      	nop
 80084fe:	371c      	adds	r7, #28
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	40010000 	.word	0x40010000
 800850c:	48000400 	.word	0x48000400
 8008510:	48000800 	.word	0x48000800
 8008514:	48000c00 	.word	0x48000c00
 8008518:	48001000 	.word	0x48001000
 800851c:	48001400 	.word	0x48001400
 8008520:	48001800 	.word	0x48001800
 8008524:	40010400 	.word	0x40010400

08008528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	807b      	strh	r3, [r7, #2]
 8008534:	4613      	mov	r3, r2
 8008536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008538:	787b      	ldrb	r3, [r7, #1]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800853e:	887a      	ldrh	r2, [r7, #2]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008544:	e002      	b.n	800854c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008546:	887a      	ldrh	r2, [r7, #2]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008564:	695a      	ldr	r2, [r3, #20]
 8008566:	88fb      	ldrh	r3, [r7, #6]
 8008568:	4013      	ands	r3, r2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d006      	beq.n	800857c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800856e:	4a05      	ldr	r2, [pc, #20]	; (8008584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008570:	88fb      	ldrh	r3, [r7, #6]
 8008572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f806 	bl	8008588 <HAL_GPIO_EXTI_Callback>
  }
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40010400 	.word	0x40010400

08008588 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e081      	b.n	80086b4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d106      	bne.n	80085ca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f8a8 	bl	800871a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2224      	movs	r2, #36	; 0x24
 80085ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f022 0201 	bic.w	r2, r2, #1
 80085e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80085ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d107      	bne.n	8008618 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008614:	609a      	str	r2, [r3, #8]
 8008616:	e006      	b.n	8008626 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008624:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d104      	bne.n	8008638 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008636:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6812      	ldr	r2, [r2, #0]
 8008642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800865a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	ea42 0103 	orr.w	r1, r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	021a      	lsls	r2, r3, #8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69d9      	ldr	r1, [r3, #28]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1a      	ldr	r2, [r3, #32]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0201 	orr.w	r2, r2, #1
 8008694:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e021      	b.n	8008712 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2224      	movs	r2, #36	; 0x24
 80086d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0201 	bic.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f821 	bl	800872e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af02      	add	r7, sp, #8
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	461a      	mov	r2, r3
 8008752:	4603      	mov	r3, r0
 8008754:	817b      	strh	r3, [r7, #10]
 8008756:	460b      	mov	r3, r1
 8008758:	813b      	strh	r3, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b20      	cmp	r3, #32
 8008768:	f040 80f9 	bne.w	800895e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_I2C_Mem_Write+0x34>
 8008772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d105      	bne.n	8008784 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800877e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e0ed      	b.n	8008960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_I2C_Mem_Write+0x4e>
 800878e:	2302      	movs	r3, #2
 8008790:	e0e6      	b.n	8008960 <HAL_I2C_Mem_Write+0x21c>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800879a:	f7ff f949 	bl	8007a30 <HAL_GetTick>
 800879e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	2319      	movs	r3, #25
 80087a6:	2201      	movs	r2, #1
 80087a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 faf7 	bl	8008da0 <I2C_WaitOnFlagUntilTimeout>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e0d1      	b.n	8008960 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2221      	movs	r2, #33	; 0x21
 80087c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2240      	movs	r2, #64	; 0x40
 80087c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a3a      	ldr	r2, [r7, #32]
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80087dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087e4:	88f8      	ldrh	r0, [r7, #6]
 80087e6:	893a      	ldrh	r2, [r7, #8]
 80087e8:	8979      	ldrh	r1, [r7, #10]
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	4603      	mov	r3, r0
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fa07 	bl	8008c08 <I2C_RequestMemoryWrite>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e0a9      	b.n	8008960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008810:	b29b      	uxth	r3, r3
 8008812:	2bff      	cmp	r3, #255	; 0xff
 8008814:	d90e      	bls.n	8008834 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	22ff      	movs	r2, #255	; 0xff
 800881a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008820:	b2da      	uxtb	r2, r3
 8008822:	8979      	ldrh	r1, [r7, #10]
 8008824:	2300      	movs	r3, #0
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 fbd9 	bl	8008fe4 <I2C_TransferConfig>
 8008832:	e00f      	b.n	8008854 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008838:	b29a      	uxth	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008842:	b2da      	uxtb	r2, r3
 8008844:	8979      	ldrh	r1, [r7, #10]
 8008846:	2300      	movs	r3, #0
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fbc8 	bl	8008fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 fae1 	bl	8008e20 <I2C_WaitOnTXISFlagUntilTimeout>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e07b      	b.n	8008960 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008882:	b29b      	uxth	r3, r3
 8008884:	3b01      	subs	r3, #1
 8008886:	b29a      	uxth	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d034      	beq.n	800890c <HAL_I2C_Mem_Write+0x1c8>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d130      	bne.n	800890c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	2200      	movs	r2, #0
 80088b2:	2180      	movs	r1, #128	; 0x80
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 fa73 	bl	8008da0 <I2C_WaitOnFlagUntilTimeout>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e04d      	b.n	8008960 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2bff      	cmp	r3, #255	; 0xff
 80088cc:	d90e      	bls.n	80088ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	22ff      	movs	r2, #255	; 0xff
 80088d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	8979      	ldrh	r1, [r7, #10]
 80088dc:	2300      	movs	r3, #0
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fb7d 	bl	8008fe4 <I2C_TransferConfig>
 80088ea:	e00f      	b.n	800890c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	8979      	ldrh	r1, [r7, #10]
 80088fe:	2300      	movs	r3, #0
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fb6c 	bl	8008fe4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008910:	b29b      	uxth	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d19e      	bne.n	8008854 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 fac0 	bl	8008ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e01a      	b.n	8008960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2220      	movs	r2, #32
 8008930:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6859      	ldr	r1, [r3, #4]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <HAL_I2C_Mem_Write+0x224>)
 800893e:	400b      	ands	r3, r1
 8008940:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2220      	movs	r2, #32
 8008946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	e000      	b.n	8008960 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800895e:	2302      	movs	r3, #2
  }
}
 8008960:	4618      	mov	r0, r3
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	fe00e800 	.word	0xfe00e800

0800896c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	4608      	mov	r0, r1
 8008976:	4611      	mov	r1, r2
 8008978:	461a      	mov	r2, r3
 800897a:	4603      	mov	r3, r0
 800897c:	817b      	strh	r3, [r7, #10]
 800897e:	460b      	mov	r3, r1
 8008980:	813b      	strh	r3, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b20      	cmp	r3, #32
 8008990:	f040 80fd 	bne.w	8008b8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <HAL_I2C_Mem_Read+0x34>
 800899a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e0f1      	b.n	8008b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <HAL_I2C_Mem_Read+0x4e>
 80089b6:	2302      	movs	r3, #2
 80089b8:	e0ea      	b.n	8008b90 <HAL_I2C_Mem_Read+0x224>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80089c2:	f7ff f835 	bl	8007a30 <HAL_GetTick>
 80089c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	2319      	movs	r3, #25
 80089ce:	2201      	movs	r2, #1
 80089d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f9e3 	bl	8008da0 <I2C_WaitOnFlagUntilTimeout>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e0d5      	b.n	8008b90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2222      	movs	r2, #34	; 0x22
 80089e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2240      	movs	r2, #64	; 0x40
 80089f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a3a      	ldr	r2, [r7, #32]
 80089fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a0c:	88f8      	ldrh	r0, [r7, #6]
 8008a0e:	893a      	ldrh	r2, [r7, #8]
 8008a10:	8979      	ldrh	r1, [r7, #10]
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 f947 	bl	8008cb0 <I2C_RequestMemoryRead>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0ad      	b.n	8008b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2bff      	cmp	r3, #255	; 0xff
 8008a3c:	d90e      	bls.n	8008a5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	22ff      	movs	r2, #255	; 0xff
 8008a42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	8979      	ldrh	r1, [r7, #10]
 8008a4c:	4b52      	ldr	r3, [pc, #328]	; (8008b98 <HAL_I2C_Mem_Read+0x22c>)
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fac5 	bl	8008fe4 <I2C_TransferConfig>
 8008a5a:	e00f      	b.n	8008a7c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	8979      	ldrh	r1, [r7, #10]
 8008a6e:	4b4a      	ldr	r3, [pc, #296]	; (8008b98 <HAL_I2C_Mem_Read+0x22c>)
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 fab4 	bl	8008fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	2200      	movs	r2, #0
 8008a84:	2104      	movs	r1, #4
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 f98a 	bl	8008da0 <I2C_WaitOnFlagUntilTimeout>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e07c      	b.n	8008b90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d034      	beq.n	8008b3c <HAL_I2C_Mem_Read+0x1d0>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d130      	bne.n	8008b3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2180      	movs	r1, #128	; 0x80
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f95b 	bl	8008da0 <I2C_WaitOnFlagUntilTimeout>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e04d      	b.n	8008b90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	2bff      	cmp	r3, #255	; 0xff
 8008afc:	d90e      	bls.n	8008b1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	22ff      	movs	r2, #255	; 0xff
 8008b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	8979      	ldrh	r1, [r7, #10]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 fa65 	bl	8008fe4 <I2C_TransferConfig>
 8008b1a:	e00f      	b.n	8008b3c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	8979      	ldrh	r1, [r7, #10]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 fa54 	bl	8008fe4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d19a      	bne.n	8008a7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 f9a8 	bl	8008ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e01a      	b.n	8008b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6859      	ldr	r1, [r3, #4]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <HAL_I2C_Mem_Read+0x230>)
 8008b6e:	400b      	ands	r3, r1
 8008b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e000      	b.n	8008b90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008b8e:	2302      	movs	r3, #2
  }
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	80002400 	.word	0x80002400
 8008b9c:	fe00e800 	.word	0xfe00e800

08008ba0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	68f9      	ldr	r1, [r7, #12]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	4798      	blx	r3
  }
}
 8008bcc:	bf00      	nop
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008be2:	b2db      	uxtb	r3, r3
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af02      	add	r7, sp, #8
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	4608      	mov	r0, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	461a      	mov	r2, r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	817b      	strh	r3, [r7, #10]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	813b      	strh	r3, [r7, #8]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	8979      	ldrh	r1, [r7, #10]
 8008c28:	4b20      	ldr	r3, [pc, #128]	; (8008cac <I2C_RequestMemoryWrite+0xa4>)
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 f9d7 	bl	8008fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	69b9      	ldr	r1, [r7, #24]
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f8f0 	bl	8008e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e02c      	b.n	8008ca4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d105      	bne.n	8008c5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c50:	893b      	ldrh	r3, [r7, #8]
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	629a      	str	r2, [r3, #40]	; 0x28
 8008c5a:	e015      	b.n	8008c88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c5c:	893b      	ldrh	r3, [r7, #8]
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c6a:	69fa      	ldr	r2, [r7, #28]
 8008c6c:	69b9      	ldr	r1, [r7, #24]
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 f8d6 	bl	8008e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e012      	b.n	8008ca4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c7e:	893b      	ldrh	r3, [r7, #8]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2180      	movs	r1, #128	; 0x80
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f884 	bl	8008da0 <I2C_WaitOnFlagUntilTimeout>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e000      	b.n	8008ca4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	80002000 	.word	0x80002000

08008cb0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	4608      	mov	r0, r1
 8008cba:	4611      	mov	r1, r2
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	817b      	strh	r3, [r7, #10]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	813b      	strh	r3, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008cca:	88fb      	ldrh	r3, [r7, #6]
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	8979      	ldrh	r1, [r7, #10]
 8008cd0:	4b20      	ldr	r3, [pc, #128]	; (8008d54 <I2C_RequestMemoryRead+0xa4>)
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f984 	bl	8008fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	69b9      	ldr	r1, [r7, #24]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 f89d 	bl	8008e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e02c      	b.n	8008d4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cf0:	88fb      	ldrh	r3, [r7, #6]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d105      	bne.n	8008d02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cf6:	893b      	ldrh	r3, [r7, #8]
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8008d00:	e015      	b.n	8008d2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d02:	893b      	ldrh	r3, [r7, #8]
 8008d04:	0a1b      	lsrs	r3, r3, #8
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	69b9      	ldr	r1, [r7, #24]
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 f883 	bl	8008e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e012      	b.n	8008d4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d24:	893b      	ldrh	r3, [r7, #8]
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2200      	movs	r2, #0
 8008d36:	2140      	movs	r1, #64	; 0x40
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 f831 	bl	8008da0 <I2C_WaitOnFlagUntilTimeout>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e000      	b.n	8008d4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	80002000 	.word	0x80002000

08008d58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d103      	bne.n	8008d76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2200      	movs	r2, #0
 8008d74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d007      	beq.n	8008d94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0201 	orr.w	r2, r2, #1
 8008d92:	619a      	str	r2, [r3, #24]
  }
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4613      	mov	r3, r2
 8008dae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008db0:	e022      	b.n	8008df8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d01e      	beq.n	8008df8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dba:	f7fe fe39 	bl	8007a30 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d302      	bcc.n	8008dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d113      	bne.n	8008df8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd4:	f043 0220 	orr.w	r2, r3, #32
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e00f      	b.n	8008e18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699a      	ldr	r2, [r3, #24]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	4013      	ands	r3, r2
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	bf0c      	ite	eq
 8008e08:	2301      	moveq	r3, #1
 8008e0a:	2300      	movne	r3, #0
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d0cd      	beq.n	8008db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e2c:	e02c      	b.n	8008e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 f870 	bl	8008f18 <I2C_IsAcknowledgeFailed>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e02a      	b.n	8008e98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e48:	d01e      	beq.n	8008e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e4a:	f7fe fdf1 	bl	8007a30 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d302      	bcc.n	8008e60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d113      	bne.n	8008e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e64:	f043 0220 	orr.w	r2, r3, #32
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e007      	b.n	8008e98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d1cb      	bne.n	8008e2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008eac:	e028      	b.n	8008f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	68b9      	ldr	r1, [r7, #8]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 f830 	bl	8008f18 <I2C_IsAcknowledgeFailed>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e026      	b.n	8008f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ec2:	f7fe fdb5 	bl	8007a30 <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d302      	bcc.n	8008ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d113      	bne.n	8008f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008edc:	f043 0220 	orr.w	r2, r3, #32
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e007      	b.n	8008f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d1cf      	bne.n	8008eae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f003 0310 	and.w	r3, r3, #16
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d151      	bne.n	8008fd6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f32:	e022      	b.n	8008f7a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3a:	d01e      	beq.n	8008f7a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f3c:	f7fe fd78 	bl	8007a30 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d302      	bcc.n	8008f52 <I2C_IsAcknowledgeFailed+0x3a>
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d113      	bne.n	8008f7a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f56:	f043 0220 	orr.w	r2, r3, #32
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e02e      	b.n	8008fd8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	f003 0320 	and.w	r3, r3, #32
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d1d5      	bne.n	8008f34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2210      	movs	r2, #16
 8008f8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2220      	movs	r2, #32
 8008f96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f7ff fedd 	bl	8008d58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6859      	ldr	r1, [r3, #4]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <I2C_IsAcknowledgeFailed+0xc8>)
 8008faa:	400b      	ands	r3, r1
 8008fac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb2:	f043 0204 	orr.w	r2, r3, #4
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	fe00e800 	.word	0xfe00e800

08008fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	817b      	strh	r3, [r7, #10]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	0d5b      	lsrs	r3, r3, #21
 8009000:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009004:	4b0d      	ldr	r3, [pc, #52]	; (800903c <I2C_TransferConfig+0x58>)
 8009006:	430b      	orrs	r3, r1
 8009008:	43db      	mvns	r3, r3
 800900a:	ea02 0103 	and.w	r1, r2, r3
 800900e:	897b      	ldrh	r3, [r7, #10]
 8009010:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009014:	7a7b      	ldrb	r3, [r7, #9]
 8009016:	041b      	lsls	r3, r3, #16
 8009018:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800901c:	431a      	orrs	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	431a      	orrs	r2, r3
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	431a      	orrs	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	03ff63ff 	.word	0x03ff63ff

08009040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b20      	cmp	r3, #32
 8009054:	d138      	bne.n	80090c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009060:	2302      	movs	r3, #2
 8009062:	e032      	b.n	80090ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2224      	movs	r2, #36	; 0x24
 8009070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0201 	bic.w	r2, r2, #1
 8009082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6819      	ldr	r1, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0201 	orr.w	r2, r2, #1
 80090b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e000      	b.n	80090ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090c8:	2302      	movs	r3, #2
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b085      	sub	sp, #20
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d139      	bne.n	8009160 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e033      	b.n	8009162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2224      	movs	r2, #36	; 0x24
 8009106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 0201 	bic.w	r2, r2, #1
 8009118:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009128:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4313      	orrs	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2220      	movs	r2, #32
 8009150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	e000      	b.n	8009162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009160:	2302      	movs	r3, #2
  }
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
	...

08009170 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a04      	ldr	r2, [pc, #16]	; (800918c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800917a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800917e:	6013      	str	r3, [r2, #0]
}
 8009180:	bf00      	nop
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	40007000 	.word	0x40007000

08009190 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009194:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800919c:	4618      	mov	r0, r3
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40007000 	.word	0x40007000

080091ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ba:	d130      	bne.n	800921e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80091bc:	4b23      	ldr	r3, [pc, #140]	; (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80091c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091c8:	d038      	beq.n	800923c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80091ca:	4b20      	ldr	r3, [pc, #128]	; (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80091d2:	4a1e      	ldr	r2, [pc, #120]	; (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80091d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80091da:	4b1d      	ldr	r3, [pc, #116]	; (8009250 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2232      	movs	r2, #50	; 0x32
 80091e0:	fb02 f303 	mul.w	r3, r2, r3
 80091e4:	4a1b      	ldr	r2, [pc, #108]	; (8009254 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80091e6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ea:	0c9b      	lsrs	r3, r3, #18
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091f0:	e002      	b.n	80091f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80091f8:	4b14      	ldr	r3, [pc, #80]	; (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009204:	d102      	bne.n	800920c <HAL_PWREx_ControlVoltageScaling+0x60>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f2      	bne.n	80091f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800920c:	4b0f      	ldr	r3, [pc, #60]	; (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009218:	d110      	bne.n	800923c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e00f      	b.n	800923e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800921e:	4b0b      	ldr	r3, [pc, #44]	; (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800922a:	d007      	beq.n	800923c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800922c:	4b07      	ldr	r3, [pc, #28]	; (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009234:	4a05      	ldr	r2, [pc, #20]	; (800924c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800923a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40007000 	.word	0x40007000
 8009250:	20000004 	.word	0x20000004
 8009254:	431bde83 	.word	0x431bde83

08009258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e3d4      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800926a:	4ba1      	ldr	r3, [pc, #644]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f003 030c 	and.w	r3, r3, #12
 8009272:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009274:	4b9e      	ldr	r3, [pc, #632]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f003 0303 	and.w	r3, r3, #3
 800927c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0310 	and.w	r3, r3, #16
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 80e4 	beq.w	8009454 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d007      	beq.n	80092a2 <HAL_RCC_OscConfig+0x4a>
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b0c      	cmp	r3, #12
 8009296:	f040 808b 	bne.w	80093b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b01      	cmp	r3, #1
 800929e:	f040 8087 	bne.w	80093b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80092a2:	4b93      	ldr	r3, [pc, #588]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <HAL_RCC_OscConfig+0x62>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e3ac      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1a      	ldr	r2, [r3, #32]
 80092be:	4b8c      	ldr	r3, [pc, #560]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0308 	and.w	r3, r3, #8
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d004      	beq.n	80092d4 <HAL_RCC_OscConfig+0x7c>
 80092ca:	4b89      	ldr	r3, [pc, #548]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092d2:	e005      	b.n	80092e0 <HAL_RCC_OscConfig+0x88>
 80092d4:	4b86      	ldr	r3, [pc, #536]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80092d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092da:	091b      	lsrs	r3, r3, #4
 80092dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d223      	bcs.n	800932c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fd41 	bl	8009d70 <RCC_SetFlashLatencyFromMSIRange>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e38d      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80092f8:	4b7d      	ldr	r3, [pc, #500]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a7c      	ldr	r2, [pc, #496]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80092fe:	f043 0308 	orr.w	r3, r3, #8
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	4b7a      	ldr	r3, [pc, #488]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	4977      	ldr	r1, [pc, #476]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009312:	4313      	orrs	r3, r2
 8009314:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009316:	4b76      	ldr	r3, [pc, #472]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	4972      	ldr	r1, [pc, #456]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009326:	4313      	orrs	r3, r2
 8009328:	604b      	str	r3, [r1, #4]
 800932a:	e025      	b.n	8009378 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800932c:	4b70      	ldr	r3, [pc, #448]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a6f      	ldr	r2, [pc, #444]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009332:	f043 0308 	orr.w	r3, r3, #8
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	4b6d      	ldr	r3, [pc, #436]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	496a      	ldr	r1, [pc, #424]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009346:	4313      	orrs	r3, r2
 8009348:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800934a:	4b69      	ldr	r3, [pc, #420]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	021b      	lsls	r3, r3, #8
 8009358:	4965      	ldr	r1, [pc, #404]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 800935a:	4313      	orrs	r3, r2
 800935c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d109      	bne.n	8009378 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	4618      	mov	r0, r3
 800936a:	f000 fd01 	bl	8009d70 <RCC_SetFlashLatencyFromMSIRange>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e34d      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009378:	f000 fc36 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800937c:	4602      	mov	r2, r0
 800937e:	4b5c      	ldr	r3, [pc, #368]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	091b      	lsrs	r3, r3, #4
 8009384:	f003 030f 	and.w	r3, r3, #15
 8009388:	495a      	ldr	r1, [pc, #360]	; (80094f4 <HAL_RCC_OscConfig+0x29c>)
 800938a:	5ccb      	ldrb	r3, [r1, r3]
 800938c:	f003 031f 	and.w	r3, r3, #31
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
 8009394:	4a58      	ldr	r2, [pc, #352]	; (80094f8 <HAL_RCC_OscConfig+0x2a0>)
 8009396:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009398:	4b58      	ldr	r3, [pc, #352]	; (80094fc <HAL_RCC_OscConfig+0x2a4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe faf7 	bl	8007990 <HAL_InitTick>
 80093a2:	4603      	mov	r3, r0
 80093a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d052      	beq.n	8009452 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	e331      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d032      	beq.n	800941e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80093b8:	4b4d      	ldr	r3, [pc, #308]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a4c      	ldr	r2, [pc, #304]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80093be:	f043 0301 	orr.w	r3, r3, #1
 80093c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80093c4:	f7fe fb34 	bl	8007a30 <HAL_GetTick>
 80093c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80093ca:	e008      	b.n	80093de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80093cc:	f7fe fb30 	bl	8007a30 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d901      	bls.n	80093de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e31a      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80093de:	4b44      	ldr	r3, [pc, #272]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0f0      	beq.n	80093cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80093ea:	4b41      	ldr	r3, [pc, #260]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a40      	ldr	r2, [pc, #256]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80093f0:	f043 0308 	orr.w	r3, r3, #8
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	4b3e      	ldr	r3, [pc, #248]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	493b      	ldr	r1, [pc, #236]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009404:	4313      	orrs	r3, r2
 8009406:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009408:	4b39      	ldr	r3, [pc, #228]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	4936      	ldr	r1, [pc, #216]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009418:	4313      	orrs	r3, r2
 800941a:	604b      	str	r3, [r1, #4]
 800941c:	e01a      	b.n	8009454 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800941e:	4b34      	ldr	r3, [pc, #208]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a33      	ldr	r2, [pc, #204]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009424:	f023 0301 	bic.w	r3, r3, #1
 8009428:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800942a:	f7fe fb01 	bl	8007a30 <HAL_GetTick>
 800942e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009430:	e008      	b.n	8009444 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009432:	f7fe fafd 	bl	8007a30 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	2b02      	cmp	r3, #2
 800943e:	d901      	bls.n	8009444 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e2e7      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009444:	4b2a      	ldr	r3, [pc, #168]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1f0      	bne.n	8009432 <HAL_RCC_OscConfig+0x1da>
 8009450:	e000      	b.n	8009454 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009452:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d074      	beq.n	800954a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2b08      	cmp	r3, #8
 8009464:	d005      	beq.n	8009472 <HAL_RCC_OscConfig+0x21a>
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b0c      	cmp	r3, #12
 800946a:	d10e      	bne.n	800948a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	2b03      	cmp	r3, #3
 8009470:	d10b      	bne.n	800948a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009472:	4b1f      	ldr	r3, [pc, #124]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d064      	beq.n	8009548 <HAL_RCC_OscConfig+0x2f0>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d160      	bne.n	8009548 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e2c4      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009492:	d106      	bne.n	80094a2 <HAL_RCC_OscConfig+0x24a>
 8009494:	4b16      	ldr	r3, [pc, #88]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a15      	ldr	r2, [pc, #84]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 800949a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	e01d      	b.n	80094de <HAL_RCC_OscConfig+0x286>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094aa:	d10c      	bne.n	80094c6 <HAL_RCC_OscConfig+0x26e>
 80094ac:	4b10      	ldr	r3, [pc, #64]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a0f      	ldr	r2, [pc, #60]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80094b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a0c      	ldr	r2, [pc, #48]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80094be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	e00b      	b.n	80094de <HAL_RCC_OscConfig+0x286>
 80094c6:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a09      	ldr	r2, [pc, #36]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80094cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a06      	ldr	r2, [pc, #24]	; (80094f0 <HAL_RCC_OscConfig+0x298>)
 80094d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d01c      	beq.n	8009520 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e6:	f7fe faa3 	bl	8007a30 <HAL_GetTick>
 80094ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094ec:	e011      	b.n	8009512 <HAL_RCC_OscConfig+0x2ba>
 80094ee:	bf00      	nop
 80094f0:	40021000 	.word	0x40021000
 80094f4:	08010700 	.word	0x08010700
 80094f8:	20000004 	.word	0x20000004
 80094fc:	2000006c 	.word	0x2000006c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009500:	f7fe fa96 	bl	8007a30 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b64      	cmp	r3, #100	; 0x64
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e280      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009512:	4baf      	ldr	r3, [pc, #700]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0f0      	beq.n	8009500 <HAL_RCC_OscConfig+0x2a8>
 800951e:	e014      	b.n	800954a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009520:	f7fe fa86 	bl	8007a30 <HAL_GetTick>
 8009524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009526:	e008      	b.n	800953a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009528:	f7fe fa82 	bl	8007a30 <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	2b64      	cmp	r3, #100	; 0x64
 8009534:	d901      	bls.n	800953a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e26c      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800953a:	4ba5      	ldr	r3, [pc, #660]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1f0      	bne.n	8009528 <HAL_RCC_OscConfig+0x2d0>
 8009546:	e000      	b.n	800954a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d060      	beq.n	8009618 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	2b04      	cmp	r3, #4
 800955a:	d005      	beq.n	8009568 <HAL_RCC_OscConfig+0x310>
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	2b0c      	cmp	r3, #12
 8009560:	d119      	bne.n	8009596 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b02      	cmp	r3, #2
 8009566:	d116      	bne.n	8009596 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009568:	4b99      	ldr	r3, [pc, #612]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009570:	2b00      	cmp	r3, #0
 8009572:	d005      	beq.n	8009580 <HAL_RCC_OscConfig+0x328>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e249      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009580:	4b93      	ldr	r3, [pc, #588]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	061b      	lsls	r3, r3, #24
 800958e:	4990      	ldr	r1, [pc, #576]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009590:	4313      	orrs	r3, r2
 8009592:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009594:	e040      	b.n	8009618 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d023      	beq.n	80095e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800959e:	4b8c      	ldr	r3, [pc, #560]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a8b      	ldr	r2, [pc, #556]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80095a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095aa:	f7fe fa41 	bl	8007a30 <HAL_GetTick>
 80095ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095b0:	e008      	b.n	80095c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095b2:	f7fe fa3d 	bl	8007a30 <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d901      	bls.n	80095c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80095c0:	2303      	movs	r3, #3
 80095c2:	e227      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095c4:	4b82      	ldr	r3, [pc, #520]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d0f0      	beq.n	80095b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095d0:	4b7f      	ldr	r3, [pc, #508]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	061b      	lsls	r3, r3, #24
 80095de:	497c      	ldr	r1, [pc, #496]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	604b      	str	r3, [r1, #4]
 80095e4:	e018      	b.n	8009618 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095e6:	4b7a      	ldr	r3, [pc, #488]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a79      	ldr	r2, [pc, #484]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80095ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f2:	f7fe fa1d 	bl	8007a30 <HAL_GetTick>
 80095f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80095f8:	e008      	b.n	800960c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095fa:	f7fe fa19 	bl	8007a30 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	2b02      	cmp	r3, #2
 8009606:	d901      	bls.n	800960c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	e203      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800960c:	4b70      	ldr	r3, [pc, #448]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1f0      	bne.n	80095fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0308 	and.w	r3, r3, #8
 8009620:	2b00      	cmp	r3, #0
 8009622:	d03c      	beq.n	800969e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01c      	beq.n	8009666 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800962c:	4b68      	ldr	r3, [pc, #416]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 800962e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009632:	4a67      	ldr	r2, [pc, #412]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009634:	f043 0301 	orr.w	r3, r3, #1
 8009638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800963c:	f7fe f9f8 	bl	8007a30 <HAL_GetTick>
 8009640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009642:	e008      	b.n	8009656 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009644:	f7fe f9f4 	bl	8007a30 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	2b02      	cmp	r3, #2
 8009650:	d901      	bls.n	8009656 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e1de      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009656:	4b5e      	ldr	r3, [pc, #376]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0ef      	beq.n	8009644 <HAL_RCC_OscConfig+0x3ec>
 8009664:	e01b      	b.n	800969e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009666:	4b5a      	ldr	r3, [pc, #360]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800966c:	4a58      	ldr	r2, [pc, #352]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 800966e:	f023 0301 	bic.w	r3, r3, #1
 8009672:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009676:	f7fe f9db 	bl	8007a30 <HAL_GetTick>
 800967a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800967c:	e008      	b.n	8009690 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800967e:	f7fe f9d7 	bl	8007a30 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	2b02      	cmp	r3, #2
 800968a:	d901      	bls.n	8009690 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e1c1      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009690:	4b4f      	ldr	r3, [pc, #316]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009696:	f003 0302 	and.w	r3, r3, #2
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1ef      	bne.n	800967e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0304 	and.w	r3, r3, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 80a6 	beq.w	80097f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096ac:	2300      	movs	r3, #0
 80096ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80096b0:	4b47      	ldr	r3, [pc, #284]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80096b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10d      	bne.n	80096d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096bc:	4b44      	ldr	r3, [pc, #272]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80096be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c0:	4a43      	ldr	r2, [pc, #268]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80096c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096c6:	6593      	str	r3, [r2, #88]	; 0x58
 80096c8:	4b41      	ldr	r3, [pc, #260]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80096ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096d0:	60bb      	str	r3, [r7, #8]
 80096d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096d4:	2301      	movs	r3, #1
 80096d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096d8:	4b3e      	ldr	r3, [pc, #248]	; (80097d4 <HAL_RCC_OscConfig+0x57c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d118      	bne.n	8009716 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096e4:	4b3b      	ldr	r3, [pc, #236]	; (80097d4 <HAL_RCC_OscConfig+0x57c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a3a      	ldr	r2, [pc, #232]	; (80097d4 <HAL_RCC_OscConfig+0x57c>)
 80096ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096f0:	f7fe f99e 	bl	8007a30 <HAL_GetTick>
 80096f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096f6:	e008      	b.n	800970a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096f8:	f7fe f99a 	bl	8007a30 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	2b02      	cmp	r3, #2
 8009704:	d901      	bls.n	800970a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e184      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800970a:	4b32      	ldr	r3, [pc, #200]	; (80097d4 <HAL_RCC_OscConfig+0x57c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0f0      	beq.n	80096f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d108      	bne.n	8009730 <HAL_RCC_OscConfig+0x4d8>
 800971e:	4b2c      	ldr	r3, [pc, #176]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009724:	4a2a      	ldr	r2, [pc, #168]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009726:	f043 0301 	orr.w	r3, r3, #1
 800972a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800972e:	e024      	b.n	800977a <HAL_RCC_OscConfig+0x522>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	2b05      	cmp	r3, #5
 8009736:	d110      	bne.n	800975a <HAL_RCC_OscConfig+0x502>
 8009738:	4b25      	ldr	r3, [pc, #148]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 800973a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800973e:	4a24      	ldr	r2, [pc, #144]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009740:	f043 0304 	orr.w	r3, r3, #4
 8009744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009748:	4b21      	ldr	r3, [pc, #132]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 800974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974e:	4a20      	ldr	r2, [pc, #128]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009750:	f043 0301 	orr.w	r3, r3, #1
 8009754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009758:	e00f      	b.n	800977a <HAL_RCC_OscConfig+0x522>
 800975a:	4b1d      	ldr	r3, [pc, #116]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 800975c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009760:	4a1b      	ldr	r2, [pc, #108]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009762:	f023 0301 	bic.w	r3, r3, #1
 8009766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800976a:	4b19      	ldr	r3, [pc, #100]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 800976c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009770:	4a17      	ldr	r2, [pc, #92]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 8009772:	f023 0304 	bic.w	r3, r3, #4
 8009776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d016      	beq.n	80097b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009782:	f7fe f955 	bl	8007a30 <HAL_GetTick>
 8009786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009788:	e00a      	b.n	80097a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800978a:	f7fe f951 	bl	8007a30 <HAL_GetTick>
 800978e:	4602      	mov	r2, r0
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	f241 3288 	movw	r2, #5000	; 0x1388
 8009798:	4293      	cmp	r3, r2
 800979a:	d901      	bls.n	80097a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e139      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a0:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <HAL_RCC_OscConfig+0x578>)
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0ed      	beq.n	800978a <HAL_RCC_OscConfig+0x532>
 80097ae:	e01a      	b.n	80097e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097b0:	f7fe f93e 	bl	8007a30 <HAL_GetTick>
 80097b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097b6:	e00f      	b.n	80097d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097b8:	f7fe f93a 	bl	8007a30 <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d906      	bls.n	80097d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e122      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
 80097ce:	bf00      	nop
 80097d0:	40021000 	.word	0x40021000
 80097d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097d8:	4b90      	ldr	r3, [pc, #576]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80097da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e8      	bne.n	80097b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097e6:	7ffb      	ldrb	r3, [r7, #31]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d105      	bne.n	80097f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097ec:	4b8b      	ldr	r3, [pc, #556]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80097ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f0:	4a8a      	ldr	r2, [pc, #552]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80097f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 8108 	beq.w	8009a12 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009806:	2b02      	cmp	r3, #2
 8009808:	f040 80d0 	bne.w	80099ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800980c:	4b83      	ldr	r3, [pc, #524]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f003 0203 	and.w	r2, r3, #3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	429a      	cmp	r2, r3
 800981e:	d130      	bne.n	8009882 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	3b01      	subs	r3, #1
 800982c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800982e:	429a      	cmp	r2, r3
 8009830:	d127      	bne.n	8009882 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800983e:	429a      	cmp	r2, r3
 8009840:	d11f      	bne.n	8009882 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800984c:	2a07      	cmp	r2, #7
 800984e:	bf14      	ite	ne
 8009850:	2201      	movne	r2, #1
 8009852:	2200      	moveq	r2, #0
 8009854:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009856:	4293      	cmp	r3, r2
 8009858:	d113      	bne.n	8009882 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009864:	085b      	lsrs	r3, r3, #1
 8009866:	3b01      	subs	r3, #1
 8009868:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800986a:	429a      	cmp	r2, r3
 800986c:	d109      	bne.n	8009882 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	085b      	lsrs	r3, r3, #1
 800987a:	3b01      	subs	r3, #1
 800987c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800987e:	429a      	cmp	r2, r3
 8009880:	d06e      	beq.n	8009960 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	2b0c      	cmp	r3, #12
 8009886:	d069      	beq.n	800995c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009888:	4b64      	ldr	r3, [pc, #400]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d105      	bne.n	80098a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009894:	4b61      	ldr	r3, [pc, #388]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e0b7      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80098a4:	4b5d      	ldr	r3, [pc, #372]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a5c      	ldr	r2, [pc, #368]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80098aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80098b0:	f7fe f8be 	bl	8007a30 <HAL_GetTick>
 80098b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098b6:	e008      	b.n	80098ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098b8:	f7fe f8ba 	bl	8007a30 <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d901      	bls.n	80098ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e0a4      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098ca:	4b54      	ldr	r3, [pc, #336]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1f0      	bne.n	80098b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098d6:	4b51      	ldr	r3, [pc, #324]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	4b51      	ldr	r3, [pc, #324]	; (8009a20 <HAL_RCC_OscConfig+0x7c8>)
 80098dc:	4013      	ands	r3, r2
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80098e6:	3a01      	subs	r2, #1
 80098e8:	0112      	lsls	r2, r2, #4
 80098ea:	4311      	orrs	r1, r2
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098f0:	0212      	lsls	r2, r2, #8
 80098f2:	4311      	orrs	r1, r2
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80098f8:	0852      	lsrs	r2, r2, #1
 80098fa:	3a01      	subs	r2, #1
 80098fc:	0552      	lsls	r2, r2, #21
 80098fe:	4311      	orrs	r1, r2
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009904:	0852      	lsrs	r2, r2, #1
 8009906:	3a01      	subs	r2, #1
 8009908:	0652      	lsls	r2, r2, #25
 800990a:	4311      	orrs	r1, r2
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009910:	0912      	lsrs	r2, r2, #4
 8009912:	0452      	lsls	r2, r2, #17
 8009914:	430a      	orrs	r2, r1
 8009916:	4941      	ldr	r1, [pc, #260]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 8009918:	4313      	orrs	r3, r2
 800991a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800991c:	4b3f      	ldr	r3, [pc, #252]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a3e      	ldr	r2, [pc, #248]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 8009922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009926:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009928:	4b3c      	ldr	r3, [pc, #240]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	4a3b      	ldr	r2, [pc, #236]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 800992e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009932:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009934:	f7fe f87c 	bl	8007a30 <HAL_GetTick>
 8009938:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800993a:	e008      	b.n	800994e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800993c:	f7fe f878 	bl	8007a30 <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	2b02      	cmp	r3, #2
 8009948:	d901      	bls.n	800994e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e062      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800994e:	4b33      	ldr	r3, [pc, #204]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0f0      	beq.n	800993c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800995a:	e05a      	b.n	8009a12 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e059      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009960:	4b2e      	ldr	r3, [pc, #184]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d152      	bne.n	8009a12 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800996c:	4b2b      	ldr	r3, [pc, #172]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a2a      	ldr	r2, [pc, #168]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 8009972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009976:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009978:	4b28      	ldr	r3, [pc, #160]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	4a27      	ldr	r2, [pc, #156]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 800997e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009982:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009984:	f7fe f854 	bl	8007a30 <HAL_GetTick>
 8009988:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800998a:	e008      	b.n	800999e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800998c:	f7fe f850 	bl	8007a30 <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	2b02      	cmp	r3, #2
 8009998:	d901      	bls.n	800999e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800999a:	2303      	movs	r3, #3
 800999c:	e03a      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800999e:	4b1f      	ldr	r3, [pc, #124]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0f0      	beq.n	800998c <HAL_RCC_OscConfig+0x734>
 80099aa:	e032      	b.n	8009a12 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	2b0c      	cmp	r3, #12
 80099b0:	d02d      	beq.n	8009a0e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099b2:	4b1a      	ldr	r3, [pc, #104]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a19      	ldr	r2, [pc, #100]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80099b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80099be:	4b17      	ldr	r3, [pc, #92]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d105      	bne.n	80099d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80099ca:	4b14      	ldr	r3, [pc, #80]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	4a13      	ldr	r2, [pc, #76]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80099d0:	f023 0303 	bic.w	r3, r3, #3
 80099d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80099d6:	4b11      	ldr	r3, [pc, #68]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	4a10      	ldr	r2, [pc, #64]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 80099dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80099e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e6:	f7fe f823 	bl	8007a30 <HAL_GetTick>
 80099ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099ec:	e008      	b.n	8009a00 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099ee:	f7fe f81f 	bl	8007a30 <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d901      	bls.n	8009a00 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e009      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a00:	4b06      	ldr	r3, [pc, #24]	; (8009a1c <HAL_RCC_OscConfig+0x7c4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1f0      	bne.n	80099ee <HAL_RCC_OscConfig+0x796>
 8009a0c:	e001      	b.n	8009a12 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e000      	b.n	8009a14 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3720      	adds	r7, #32
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	40021000 	.word	0x40021000
 8009a20:	f99d808c 	.word	0xf99d808c

08009a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e0c8      	b.n	8009bca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a38:	4b66      	ldr	r3, [pc, #408]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0307 	and.w	r3, r3, #7
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d910      	bls.n	8009a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a46:	4b63      	ldr	r3, [pc, #396]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f023 0207 	bic.w	r2, r3, #7
 8009a4e:	4961      	ldr	r1, [pc, #388]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a56:	4b5f      	ldr	r3, [pc, #380]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0307 	and.w	r3, r3, #7
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d001      	beq.n	8009a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e0b0      	b.n	8009bca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d04c      	beq.n	8009b0e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d107      	bne.n	8009a8c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a7c:	4b56      	ldr	r3, [pc, #344]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d121      	bne.n	8009acc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e09e      	b.n	8009bca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d107      	bne.n	8009aa4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a94:	4b50      	ldr	r3, [pc, #320]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d115      	bne.n	8009acc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e092      	b.n	8009bca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d107      	bne.n	8009abc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009aac:	4b4a      	ldr	r3, [pc, #296]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d109      	bne.n	8009acc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e086      	b.n	8009bca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009abc:	4b46      	ldr	r3, [pc, #280]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e07e      	b.n	8009bca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009acc:	4b42      	ldr	r3, [pc, #264]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f023 0203 	bic.w	r2, r3, #3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	493f      	ldr	r1, [pc, #252]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ade:	f7fd ffa7 	bl	8007a30 <HAL_GetTick>
 8009ae2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ae4:	e00a      	b.n	8009afc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ae6:	f7fd ffa3 	bl	8007a30 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d901      	bls.n	8009afc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e066      	b.n	8009bca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009afc:	4b36      	ldr	r3, [pc, #216]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f003 020c 	and.w	r2, r3, #12
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d1eb      	bne.n	8009ae6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 0302 	and.w	r3, r3, #2
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d008      	beq.n	8009b2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b1a:	4b2f      	ldr	r3, [pc, #188]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	492c      	ldr	r1, [pc, #176]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b2c:	4b29      	ldr	r3, [pc, #164]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b0>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0307 	and.w	r3, r3, #7
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d210      	bcs.n	8009b5c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b3a:	4b26      	ldr	r3, [pc, #152]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b0>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f023 0207 	bic.w	r2, r3, #7
 8009b42:	4924      	ldr	r1, [pc, #144]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b0>)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b4a:	4b22      	ldr	r3, [pc, #136]	; (8009bd4 <HAL_RCC_ClockConfig+0x1b0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0307 	and.w	r3, r3, #7
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d001      	beq.n	8009b5c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e036      	b.n	8009bca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d008      	beq.n	8009b7a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b68:	4b1b      	ldr	r3, [pc, #108]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	4918      	ldr	r1, [pc, #96]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0308 	and.w	r3, r3, #8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d009      	beq.n	8009b9a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b86:	4b14      	ldr	r3, [pc, #80]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	4910      	ldr	r1, [pc, #64]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009b96:	4313      	orrs	r3, r2
 8009b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009b9a:	f000 f825 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <HAL_RCC_ClockConfig+0x1b4>)
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	091b      	lsrs	r3, r3, #4
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	490c      	ldr	r1, [pc, #48]	; (8009bdc <HAL_RCC_ClockConfig+0x1b8>)
 8009bac:	5ccb      	ldrb	r3, [r1, r3]
 8009bae:	f003 031f 	and.w	r3, r3, #31
 8009bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb6:	4a0a      	ldr	r2, [pc, #40]	; (8009be0 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009bba:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <HAL_RCC_ClockConfig+0x1c0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fd fee6 	bl	8007990 <HAL_InitTick>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	72fb      	strb	r3, [r7, #11]

  return status;
 8009bc8:	7afb      	ldrb	r3, [r7, #11]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	40022000 	.word	0x40022000
 8009bd8:	40021000 	.word	0x40021000
 8009bdc:	08010700 	.word	0x08010700
 8009be0:	20000004 	.word	0x20000004
 8009be4:	2000006c 	.word	0x2000006c

08009be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b089      	sub	sp, #36	; 0x24
 8009bec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61fb      	str	r3, [r7, #28]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bf6:	4b3e      	ldr	r3, [pc, #248]	; (8009cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 030c 	and.w	r3, r3, #12
 8009bfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c00:	4b3b      	ldr	r3, [pc, #236]	; (8009cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f003 0303 	and.w	r3, r3, #3
 8009c08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d005      	beq.n	8009c1c <HAL_RCC_GetSysClockFreq+0x34>
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2b0c      	cmp	r3, #12
 8009c14:	d121      	bne.n	8009c5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d11e      	bne.n	8009c5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009c1c:	4b34      	ldr	r3, [pc, #208]	; (8009cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0308 	and.w	r3, r3, #8
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d107      	bne.n	8009c38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009c28:	4b31      	ldr	r3, [pc, #196]	; (8009cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c2e:	0a1b      	lsrs	r3, r3, #8
 8009c30:	f003 030f 	and.w	r3, r3, #15
 8009c34:	61fb      	str	r3, [r7, #28]
 8009c36:	e005      	b.n	8009c44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009c38:	4b2d      	ldr	r3, [pc, #180]	; (8009cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	091b      	lsrs	r3, r3, #4
 8009c3e:	f003 030f 	and.w	r3, r3, #15
 8009c42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009c44:	4a2b      	ldr	r2, [pc, #172]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10d      	bne.n	8009c70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c58:	e00a      	b.n	8009c70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	d102      	bne.n	8009c66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c60:	4b25      	ldr	r3, [pc, #148]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009c62:	61bb      	str	r3, [r7, #24]
 8009c64:	e004      	b.n	8009c70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b08      	cmp	r3, #8
 8009c6a:	d101      	bne.n	8009c70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c6c:	4b23      	ldr	r3, [pc, #140]	; (8009cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8009c6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	2b0c      	cmp	r3, #12
 8009c74:	d134      	bne.n	8009ce0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c76:	4b1e      	ldr	r3, [pc, #120]	; (8009cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f003 0303 	and.w	r3, r3, #3
 8009c7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d003      	beq.n	8009c8e <HAL_RCC_GetSysClockFreq+0xa6>
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d003      	beq.n	8009c94 <HAL_RCC_GetSysClockFreq+0xac>
 8009c8c:	e005      	b.n	8009c9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009c8e:	4b1a      	ldr	r3, [pc, #104]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009c90:	617b      	str	r3, [r7, #20]
      break;
 8009c92:	e005      	b.n	8009ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009c94:	4b19      	ldr	r3, [pc, #100]	; (8009cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8009c96:	617b      	str	r3, [r7, #20]
      break;
 8009c98:	e002      	b.n	8009ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	617b      	str	r3, [r7, #20]
      break;
 8009c9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ca0:	4b13      	ldr	r3, [pc, #76]	; (8009cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	091b      	lsrs	r3, r3, #4
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	3301      	adds	r3, #1
 8009cac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009cae:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	0a1b      	lsrs	r3, r3, #8
 8009cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	fb02 f203 	mul.w	r2, r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009cc6:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	0e5b      	lsrs	r3, r3, #25
 8009ccc:	f003 0303 	and.w	r3, r3, #3
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3724      	adds	r7, #36	; 0x24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40021000 	.word	0x40021000
 8009cf4:	08010718 	.word	0x08010718
 8009cf8:	00f42400 	.word	0x00f42400
 8009cfc:	007a1200 	.word	0x007a1200

08009d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d00:	b480      	push	{r7}
 8009d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d04:	4b03      	ldr	r3, [pc, #12]	; (8009d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d06:	681b      	ldr	r3, [r3, #0]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20000004 	.word	0x20000004

08009d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009d1c:	f7ff fff0 	bl	8009d00 <HAL_RCC_GetHCLKFreq>
 8009d20:	4602      	mov	r2, r0
 8009d22:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	0a1b      	lsrs	r3, r3, #8
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	4904      	ldr	r1, [pc, #16]	; (8009d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d2e:	5ccb      	ldrb	r3, [r1, r3]
 8009d30:	f003 031f 	and.w	r3, r3, #31
 8009d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	40021000 	.word	0x40021000
 8009d40:	08010710 	.word	0x08010710

08009d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009d48:	f7ff ffda 	bl	8009d00 <HAL_RCC_GetHCLKFreq>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	0adb      	lsrs	r3, r3, #11
 8009d54:	f003 0307 	and.w	r3, r3, #7
 8009d58:	4904      	ldr	r1, [pc, #16]	; (8009d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d5a:	5ccb      	ldrb	r3, [r1, r3]
 8009d5c:	f003 031f 	and.w	r3, r3, #31
 8009d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	40021000 	.word	0x40021000
 8009d6c:	08010710 	.word	0x08010710

08009d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009d78:	2300      	movs	r3, #0
 8009d7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009d7c:	4b2a      	ldr	r3, [pc, #168]	; (8009e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009d88:	f7ff fa02 	bl	8009190 <HAL_PWREx_GetVoltageRange>
 8009d8c:	6178      	str	r0, [r7, #20]
 8009d8e:	e014      	b.n	8009dba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d90:	4b25      	ldr	r3, [pc, #148]	; (8009e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d94:	4a24      	ldr	r2, [pc, #144]	; (8009e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8009d9c:	4b22      	ldr	r3, [pc, #136]	; (8009e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009da8:	f7ff f9f2 	bl	8009190 <HAL_PWREx_GetVoltageRange>
 8009dac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009dae:	4b1e      	ldr	r3, [pc, #120]	; (8009e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db2:	4a1d      	ldr	r2, [pc, #116]	; (8009e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009db8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dc0:	d10b      	bne.n	8009dda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b80      	cmp	r3, #128	; 0x80
 8009dc6:	d919      	bls.n	8009dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2ba0      	cmp	r3, #160	; 0xa0
 8009dcc:	d902      	bls.n	8009dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009dce:	2302      	movs	r3, #2
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	e013      	b.n	8009dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	613b      	str	r3, [r7, #16]
 8009dd8:	e010      	b.n	8009dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b80      	cmp	r3, #128	; 0x80
 8009dde:	d902      	bls.n	8009de6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009de0:	2303      	movs	r3, #3
 8009de2:	613b      	str	r3, [r7, #16]
 8009de4:	e00a      	b.n	8009dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b80      	cmp	r3, #128	; 0x80
 8009dea:	d102      	bne.n	8009df2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009dec:	2302      	movs	r3, #2
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	e004      	b.n	8009dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b70      	cmp	r3, #112	; 0x70
 8009df6:	d101      	bne.n	8009dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009df8:	2301      	movs	r3, #1
 8009dfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009dfc:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f023 0207 	bic.w	r2, r3, #7
 8009e04:	4909      	ldr	r1, [pc, #36]	; (8009e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009e0c:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0307 	and.w	r3, r3, #7
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d001      	beq.n	8009e1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	40021000 	.word	0x40021000
 8009e2c:	40022000 	.word	0x40022000

08009e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e38:	2300      	movs	r3, #0
 8009e3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d041      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e54:	d02a      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009e56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e5a:	d824      	bhi.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e60:	d008      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e66:	d81e      	bhi.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00a      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e70:	d010      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e72:	e018      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009e74:	4b86      	ldr	r3, [pc, #536]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	4a85      	ldr	r2, [pc, #532]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e80:	e015      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3304      	adds	r3, #4
 8009e86:	2100      	movs	r1, #0
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 facb 	bl	800a424 <RCCEx_PLLSAI1_Config>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e92:	e00c      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3320      	adds	r3, #32
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fbb6 	bl	800a60c <RCCEx_PLLSAI2_Config>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009ea4:	e003      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8009eaa:	e000      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eae:	7cfb      	ldrb	r3, [r7, #19]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10b      	bne.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009eb4:	4b76      	ldr	r3, [pc, #472]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ec2:	4973      	ldr	r1, [pc, #460]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009eca:	e001      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ecc:	7cfb      	ldrb	r3, [r7, #19]
 8009ece:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d041      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ee4:	d02a      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009ee6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009eea:	d824      	bhi.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ef0:	d008      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ef6:	d81e      	bhi.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00a      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f00:	d010      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009f02:	e018      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009f04:	4b62      	ldr	r3, [pc, #392]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	4a61      	ldr	r2, [pc, #388]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f10:	e015      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3304      	adds	r3, #4
 8009f16:	2100      	movs	r1, #0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fa83 	bl	800a424 <RCCEx_PLLSAI1_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f22:	e00c      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3320      	adds	r3, #32
 8009f28:	2100      	movs	r1, #0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fb6e 	bl	800a60c <RCCEx_PLLSAI2_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009f34:	e003      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	74fb      	strb	r3, [r7, #19]
      break;
 8009f3a:	e000      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f3e:	7cfb      	ldrb	r3, [r7, #19]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10b      	bne.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009f44:	4b52      	ldr	r3, [pc, #328]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f52:	494f      	ldr	r1, [pc, #316]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009f5a:	e001      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f5c:	7cfb      	ldrb	r3, [r7, #19]
 8009f5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 80a0 	beq.w	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009f72:	4b47      	ldr	r3, [pc, #284]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009f82:	2300      	movs	r3, #0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00d      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f88:	4b41      	ldr	r3, [pc, #260]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8c:	4a40      	ldr	r2, [pc, #256]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f92:	6593      	str	r3, [r2, #88]	; 0x58
 8009f94:	4b3e      	ldr	r3, [pc, #248]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f9c:	60bb      	str	r3, [r7, #8]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fa4:	4b3b      	ldr	r3, [pc, #236]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a3a      	ldr	r2, [pc, #232]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fb0:	f7fd fd3e 	bl	8007a30 <HAL_GetTick>
 8009fb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009fb6:	e009      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fb8:	f7fd fd3a 	bl	8007a30 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d902      	bls.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	74fb      	strb	r3, [r7, #19]
        break;
 8009fca:	e005      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009fcc:	4b31      	ldr	r3, [pc, #196]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d0ef      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009fd8:	7cfb      	ldrb	r3, [r7, #19]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d15c      	bne.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009fde:	4b2c      	ldr	r3, [pc, #176]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fe8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01f      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d019      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009ffc:	4b24      	ldr	r3, [pc, #144]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a006:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a008:	4b21      	ldr	r3, [pc, #132]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a00e:	4a20      	ldr	r2, [pc, #128]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a018:	4b1d      	ldr	r3, [pc, #116]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a01e:	4a1c      	ldr	r2, [pc, #112]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a028:	4a19      	ldr	r2, [pc, #100]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d016      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a03a:	f7fd fcf9 	bl	8007a30 <HAL_GetTick>
 800a03e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a040:	e00b      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a042:	f7fd fcf5 	bl	8007a30 <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a050:	4293      	cmp	r3, r2
 800a052:	d902      	bls.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	74fb      	strb	r3, [r7, #19]
            break;
 800a058:	e006      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a05a:	4b0d      	ldr	r3, [pc, #52]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d0ec      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a068:	7cfb      	ldrb	r3, [r7, #19]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10c      	bne.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a06e:	4b08      	ldr	r3, [pc, #32]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a07e:	4904      	ldr	r1, [pc, #16]	; (800a090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a080:	4313      	orrs	r3, r2
 800a082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a086:	e009      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a088:	7cfb      	ldrb	r3, [r7, #19]
 800a08a:	74bb      	strb	r3, [r7, #18]
 800a08c:	e006      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a08e:	bf00      	nop
 800a090:	40021000 	.word	0x40021000
 800a094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a098:	7cfb      	ldrb	r3, [r7, #19]
 800a09a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a09c:	7c7b      	ldrb	r3, [r7, #17]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d105      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0a2:	4b9e      	ldr	r3, [pc, #632]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0a6:	4a9d      	ldr	r2, [pc, #628]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a0ba:	4b98      	ldr	r3, [pc, #608]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c0:	f023 0203 	bic.w	r2, r3, #3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c8:	4994      	ldr	r1, [pc, #592]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00a      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a0dc:	4b8f      	ldr	r3, [pc, #572]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e2:	f023 020c 	bic.w	r2, r3, #12
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ea:	498c      	ldr	r1, [pc, #560]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 0304 	and.w	r3, r3, #4
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a0fe:	4b87      	ldr	r3, [pc, #540]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a104:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	4983      	ldr	r1, [pc, #524]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0308 	and.w	r3, r3, #8
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00a      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a120:	4b7e      	ldr	r3, [pc, #504]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a126:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12e:	497b      	ldr	r1, [pc, #492]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a130:	4313      	orrs	r3, r2
 800a132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 0310 	and.w	r3, r3, #16
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a142:	4b76      	ldr	r3, [pc, #472]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a150:	4972      	ldr	r1, [pc, #456]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a152:	4313      	orrs	r3, r2
 800a154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0320 	and.w	r3, r3, #32
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00a      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a164:	4b6d      	ldr	r3, [pc, #436]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a172:	496a      	ldr	r1, [pc, #424]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a174:	4313      	orrs	r3, r2
 800a176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a186:	4b65      	ldr	r3, [pc, #404]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a18c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a194:	4961      	ldr	r1, [pc, #388]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a196:	4313      	orrs	r3, r2
 800a198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00a      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a1a8:	4b5c      	ldr	r3, [pc, #368]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1b6:	4959      	ldr	r1, [pc, #356]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a1ca:	4b54      	ldr	r3, [pc, #336]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1d8:	4950      	ldr	r1, [pc, #320]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00a      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a1ec:	4b4b      	ldr	r3, [pc, #300]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1fa:	4948      	ldr	r1, [pc, #288]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a20e:	4b43      	ldr	r3, [pc, #268]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21c:	493f      	ldr	r1, [pc, #252]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d028      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a230:	4b3a      	ldr	r3, [pc, #232]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a236:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a23e:	4937      	ldr	r1, [pc, #220]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a240:	4313      	orrs	r3, r2
 800a242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a24a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a24e:	d106      	bne.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a250:	4b32      	ldr	r3, [pc, #200]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	4a31      	ldr	r2, [pc, #196]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a25a:	60d3      	str	r3, [r2, #12]
 800a25c:	e011      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a266:	d10c      	bne.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3304      	adds	r3, #4
 800a26c:	2101      	movs	r1, #1
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 f8d8 	bl	800a424 <RCCEx_PLLSAI1_Config>
 800a274:	4603      	mov	r3, r0
 800a276:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a278:	7cfb      	ldrb	r3, [r7, #19]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a27e:	7cfb      	ldrb	r3, [r7, #19]
 800a280:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d028      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a28e:	4b23      	ldr	r3, [pc, #140]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a294:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a29c:	491f      	ldr	r1, [pc, #124]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2ac:	d106      	bne.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a2ae:	4b1b      	ldr	r3, [pc, #108]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	4a1a      	ldr	r2, [pc, #104]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2b8:	60d3      	str	r3, [r2, #12]
 800a2ba:	e011      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2c4:	d10c      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 f8a9 	bl	800a424 <RCCEx_PLLSAI1_Config>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a2d6:	7cfb      	ldrb	r3, [r7, #19]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a2dc:	7cfb      	ldrb	r3, [r7, #19]
 800a2de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d02b      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a2ec:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2fa:	4908      	ldr	r1, [pc, #32]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a30a:	d109      	bne.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a30c:	4b03      	ldr	r3, [pc, #12]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	4a02      	ldr	r2, [pc, #8]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a316:	60d3      	str	r3, [r2, #12]
 800a318:	e014      	b.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a31a:	bf00      	nop
 800a31c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a328:	d10c      	bne.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3304      	adds	r3, #4
 800a32e:	2101      	movs	r1, #1
 800a330:	4618      	mov	r0, r3
 800a332:	f000 f877 	bl	800a424 <RCCEx_PLLSAI1_Config>
 800a336:	4603      	mov	r3, r0
 800a338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a33a:	7cfb      	ldrb	r3, [r7, #19]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a340:	7cfb      	ldrb	r3, [r7, #19]
 800a342:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d02f      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a350:	4b2b      	ldr	r3, [pc, #172]	; (800a400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a356:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a35e:	4928      	ldr	r1, [pc, #160]	; (800a400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a360:	4313      	orrs	r3, r2
 800a362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a36a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a36e:	d10d      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	3304      	adds	r3, #4
 800a374:	2102      	movs	r1, #2
 800a376:	4618      	mov	r0, r3
 800a378:	f000 f854 	bl	800a424 <RCCEx_PLLSAI1_Config>
 800a37c:	4603      	mov	r3, r0
 800a37e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a380:	7cfb      	ldrb	r3, [r7, #19]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d014      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a386:	7cfb      	ldrb	r3, [r7, #19]
 800a388:	74bb      	strb	r3, [r7, #18]
 800a38a:	e011      	b.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a394:	d10c      	bne.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3320      	adds	r3, #32
 800a39a:	2102      	movs	r1, #2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 f935 	bl	800a60c <RCCEx_PLLSAI2_Config>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a3a6:	7cfb      	ldrb	r3, [r7, #19]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a3ac:	7cfb      	ldrb	r3, [r7, #19]
 800a3ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3bc:	4b10      	ldr	r3, [pc, #64]	; (800a400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ca:	490d      	ldr	r1, [pc, #52]	; (800a400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00b      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ee:	4904      	ldr	r1, [pc, #16]	; (800a400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a3f6:	7cbb      	ldrb	r3, [r7, #18]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	40021000 	.word	0x40021000

0800a404 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a404:	b480      	push	{r7}
 800a406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a408:	4b05      	ldr	r3, [pc, #20]	; (800a420 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a04      	ldr	r2, [pc, #16]	; (800a420 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a40e:	f043 0304 	orr.w	r3, r3, #4
 800a412:	6013      	str	r3, [r2, #0]
}
 800a414:	bf00      	nop
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	40021000 	.word	0x40021000

0800a424 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a432:	4b75      	ldr	r3, [pc, #468]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f003 0303 	and.w	r3, r3, #3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d018      	beq.n	800a470 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a43e:	4b72      	ldr	r3, [pc, #456]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f003 0203 	and.w	r2, r3, #3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d10d      	bne.n	800a46a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
       ||
 800a452:	2b00      	cmp	r3, #0
 800a454:	d009      	beq.n	800a46a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a456:	4b6c      	ldr	r3, [pc, #432]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	091b      	lsrs	r3, r3, #4
 800a45c:	f003 0307 	and.w	r3, r3, #7
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
       ||
 800a466:	429a      	cmp	r2, r3
 800a468:	d047      	beq.n	800a4fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	73fb      	strb	r3, [r7, #15]
 800a46e:	e044      	b.n	800a4fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b03      	cmp	r3, #3
 800a476:	d018      	beq.n	800a4aa <RCCEx_PLLSAI1_Config+0x86>
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d825      	bhi.n	800a4c8 <RCCEx_PLLSAI1_Config+0xa4>
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d002      	beq.n	800a486 <RCCEx_PLLSAI1_Config+0x62>
 800a480:	2b02      	cmp	r3, #2
 800a482:	d009      	beq.n	800a498 <RCCEx_PLLSAI1_Config+0x74>
 800a484:	e020      	b.n	800a4c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a486:	4b60      	ldr	r3, [pc, #384]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d11d      	bne.n	800a4ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a496:	e01a      	b.n	800a4ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a498:	4b5b      	ldr	r3, [pc, #364]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d116      	bne.n	800a4d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4a8:	e013      	b.n	800a4d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a4aa:	4b57      	ldr	r3, [pc, #348]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10f      	bne.n	800a4d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a4b6:	4b54      	ldr	r3, [pc, #336]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d109      	bne.n	800a4d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a4c6:	e006      	b.n	800a4d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a4cc:	e004      	b.n	800a4d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4ce:	bf00      	nop
 800a4d0:	e002      	b.n	800a4d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4d2:	bf00      	nop
 800a4d4:	e000      	b.n	800a4d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a4d6:	bf00      	nop
    }

    if(status == HAL_OK)
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10d      	bne.n	800a4fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a4de:	4b4a      	ldr	r3, [pc, #296]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6819      	ldr	r1, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	011b      	lsls	r3, r3, #4
 800a4f2:	430b      	orrs	r3, r1
 800a4f4:	4944      	ldr	r1, [pc, #272]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d17d      	bne.n	800a5fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a500:	4b41      	ldr	r3, [pc, #260]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a40      	ldr	r2, [pc, #256]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a506:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a50a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a50c:	f7fd fa90 	bl	8007a30 <HAL_GetTick>
 800a510:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a512:	e009      	b.n	800a528 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a514:	f7fd fa8c 	bl	8007a30 <HAL_GetTick>
 800a518:	4602      	mov	r2, r0
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d902      	bls.n	800a528 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	73fb      	strb	r3, [r7, #15]
        break;
 800a526:	e005      	b.n	800a534 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a528:	4b37      	ldr	r3, [pc, #220]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1ef      	bne.n	800a514 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a534:	7bfb      	ldrb	r3, [r7, #15]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d160      	bne.n	800a5fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d111      	bne.n	800a564 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a540:	4b31      	ldr	r3, [pc, #196]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6892      	ldr	r2, [r2, #8]
 800a550:	0211      	lsls	r1, r2, #8
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	68d2      	ldr	r2, [r2, #12]
 800a556:	0912      	lsrs	r2, r2, #4
 800a558:	0452      	lsls	r2, r2, #17
 800a55a:	430a      	orrs	r2, r1
 800a55c:	492a      	ldr	r1, [pc, #168]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	610b      	str	r3, [r1, #16]
 800a562:	e027      	b.n	800a5b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d112      	bne.n	800a590 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a56a:	4b27      	ldr	r3, [pc, #156]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a572:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	6892      	ldr	r2, [r2, #8]
 800a57a:	0211      	lsls	r1, r2, #8
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6912      	ldr	r2, [r2, #16]
 800a580:	0852      	lsrs	r2, r2, #1
 800a582:	3a01      	subs	r2, #1
 800a584:	0552      	lsls	r2, r2, #21
 800a586:	430a      	orrs	r2, r1
 800a588:	491f      	ldr	r1, [pc, #124]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	610b      	str	r3, [r1, #16]
 800a58e:	e011      	b.n	800a5b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a590:	4b1d      	ldr	r3, [pc, #116]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a598:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6892      	ldr	r2, [r2, #8]
 800a5a0:	0211      	lsls	r1, r2, #8
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	6952      	ldr	r2, [r2, #20]
 800a5a6:	0852      	lsrs	r2, r2, #1
 800a5a8:	3a01      	subs	r2, #1
 800a5aa:	0652      	lsls	r2, r2, #25
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	4916      	ldr	r1, [pc, #88]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a5b4:	4b14      	ldr	r3, [pc, #80]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a13      	ldr	r2, [pc, #76]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a5be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c0:	f7fd fa36 	bl	8007a30 <HAL_GetTick>
 800a5c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a5c6:	e009      	b.n	800a5dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a5c8:	f7fd fa32 	bl	8007a30 <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d902      	bls.n	800a5dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	73fb      	strb	r3, [r7, #15]
          break;
 800a5da:	e005      	b.n	800a5e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0ef      	beq.n	800a5c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5f0:	691a      	ldr	r2, [r3, #16]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	4904      	ldr	r1, [pc, #16]	; (800a608 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	40021000 	.word	0x40021000

0800a60c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a61a:	4b6a      	ldr	r3, [pc, #424]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d018      	beq.n	800a658 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a626:	4b67      	ldr	r3, [pc, #412]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f003 0203 	and.w	r2, r3, #3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d10d      	bne.n	800a652 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
       ||
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d009      	beq.n	800a652 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a63e:	4b61      	ldr	r3, [pc, #388]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	091b      	lsrs	r3, r3, #4
 800a644:	f003 0307 	and.w	r3, r3, #7
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
       ||
 800a64e:	429a      	cmp	r2, r3
 800a650:	d047      	beq.n	800a6e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	73fb      	strb	r3, [r7, #15]
 800a656:	e044      	b.n	800a6e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d018      	beq.n	800a692 <RCCEx_PLLSAI2_Config+0x86>
 800a660:	2b03      	cmp	r3, #3
 800a662:	d825      	bhi.n	800a6b0 <RCCEx_PLLSAI2_Config+0xa4>
 800a664:	2b01      	cmp	r3, #1
 800a666:	d002      	beq.n	800a66e <RCCEx_PLLSAI2_Config+0x62>
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d009      	beq.n	800a680 <RCCEx_PLLSAI2_Config+0x74>
 800a66c:	e020      	b.n	800a6b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a66e:	4b55      	ldr	r3, [pc, #340]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d11d      	bne.n	800a6b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a67e:	e01a      	b.n	800a6b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a680:	4b50      	ldr	r3, [pc, #320]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d116      	bne.n	800a6ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a690:	e013      	b.n	800a6ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a692:	4b4c      	ldr	r3, [pc, #304]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10f      	bne.n	800a6be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a69e:	4b49      	ldr	r3, [pc, #292]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d109      	bne.n	800a6be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6ae:	e006      	b.n	800a6be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b4:	e004      	b.n	800a6c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6b6:	bf00      	nop
 800a6b8:	e002      	b.n	800a6c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6ba:	bf00      	nop
 800a6bc:	e000      	b.n	800a6c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a6be:	bf00      	nop
    }

    if(status == HAL_OK)
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10d      	bne.n	800a6e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a6c6:	4b3f      	ldr	r3, [pc, #252]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6819      	ldr	r1, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	011b      	lsls	r3, r3, #4
 800a6da:	430b      	orrs	r3, r1
 800a6dc:	4939      	ldr	r1, [pc, #228]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d167      	bne.n	800a7b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a6e8:	4b36      	ldr	r3, [pc, #216]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a35      	ldr	r2, [pc, #212]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f4:	f7fd f99c 	bl	8007a30 <HAL_GetTick>
 800a6f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a6fa:	e009      	b.n	800a710 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a6fc:	f7fd f998 	bl	8007a30 <HAL_GetTick>
 800a700:	4602      	mov	r2, r0
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	2b02      	cmp	r3, #2
 800a708:	d902      	bls.n	800a710 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	73fb      	strb	r3, [r7, #15]
        break;
 800a70e:	e005      	b.n	800a71c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a710:	4b2c      	ldr	r3, [pc, #176]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1ef      	bne.n	800a6fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d14a      	bne.n	800a7b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d111      	bne.n	800a74c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a728:	4b26      	ldr	r3, [pc, #152]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a72a:	695b      	ldr	r3, [r3, #20]
 800a72c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	6892      	ldr	r2, [r2, #8]
 800a738:	0211      	lsls	r1, r2, #8
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	68d2      	ldr	r2, [r2, #12]
 800a73e:	0912      	lsrs	r2, r2, #4
 800a740:	0452      	lsls	r2, r2, #17
 800a742:	430a      	orrs	r2, r1
 800a744:	491f      	ldr	r1, [pc, #124]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a746:	4313      	orrs	r3, r2
 800a748:	614b      	str	r3, [r1, #20]
 800a74a:	e011      	b.n	800a770 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a74c:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	6892      	ldr	r2, [r2, #8]
 800a75c:	0211      	lsls	r1, r2, #8
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6912      	ldr	r2, [r2, #16]
 800a762:	0852      	lsrs	r2, r2, #1
 800a764:	3a01      	subs	r2, #1
 800a766:	0652      	lsls	r2, r2, #25
 800a768:	430a      	orrs	r2, r1
 800a76a:	4916      	ldr	r1, [pc, #88]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a770:	4b14      	ldr	r3, [pc, #80]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a13      	ldr	r2, [pc, #76]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a77a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a77c:	f7fd f958 	bl	8007a30 <HAL_GetTick>
 800a780:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a782:	e009      	b.n	800a798 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a784:	f7fd f954 	bl	8007a30 <HAL_GetTick>
 800a788:	4602      	mov	r2, r0
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d902      	bls.n	800a798 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	73fb      	strb	r3, [r7, #15]
          break;
 800a796:	e005      	b.n	800a7a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a798:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0ef      	beq.n	800a784 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d106      	bne.n	800a7b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a7aa:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a7ac:	695a      	ldr	r2, [r3, #20]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	4904      	ldr	r1, [pc, #16]	; (800a7c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	40021000 	.word	0x40021000

0800a7c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e049      	b.n	800a86e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d106      	bne.n	800a7f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7f7 fed2 	bl	8002598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3304      	adds	r3, #4
 800a804:	4619      	mov	r1, r3
 800a806:	4610      	mov	r0, r2
 800a808:	f000 f97c 	bl	800ab04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b082      	sub	sp, #8
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d122      	bne.n	800a8d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b02      	cmp	r3, #2
 800a898:	d11b      	bne.n	800a8d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f06f 0202 	mvn.w	r2, #2
 800a8a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	f003 0303 	and.w	r3, r3, #3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d003      	beq.n	800a8c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f905 	bl	800aac8 <HAL_TIM_IC_CaptureCallback>
 800a8be:	e005      	b.n	800a8cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f8f7 	bl	800aab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f908 	bl	800aadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d122      	bne.n	800a926 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	f003 0304 	and.w	r3, r3, #4
 800a8ea:	2b04      	cmp	r3, #4
 800a8ec:	d11b      	bne.n	800a926 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f06f 0204 	mvn.w	r2, #4
 800a8f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f8db 	bl	800aac8 <HAL_TIM_IC_CaptureCallback>
 800a912:	e005      	b.n	800a920 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f8cd 	bl	800aab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f8de 	bl	800aadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	f003 0308 	and.w	r3, r3, #8
 800a930:	2b08      	cmp	r3, #8
 800a932:	d122      	bne.n	800a97a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	f003 0308 	and.w	r3, r3, #8
 800a93e:	2b08      	cmp	r3, #8
 800a940:	d11b      	bne.n	800a97a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f06f 0208 	mvn.w	r2, #8
 800a94a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2204      	movs	r2, #4
 800a950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	f003 0303 	and.w	r3, r3, #3
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d003      	beq.n	800a968 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f8b1 	bl	800aac8 <HAL_TIM_IC_CaptureCallback>
 800a966:	e005      	b.n	800a974 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f8a3 	bl	800aab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f8b4 	bl	800aadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	f003 0310 	and.w	r3, r3, #16
 800a984:	2b10      	cmp	r3, #16
 800a986:	d122      	bne.n	800a9ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	f003 0310 	and.w	r3, r3, #16
 800a992:	2b10      	cmp	r3, #16
 800a994:	d11b      	bne.n	800a9ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f06f 0210 	mvn.w	r2, #16
 800a99e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2208      	movs	r2, #8
 800a9a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	69db      	ldr	r3, [r3, #28]
 800a9ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f887 	bl	800aac8 <HAL_TIM_IC_CaptureCallback>
 800a9ba:	e005      	b.n	800a9c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f879 	bl	800aab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f88a 	bl	800aadc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d10e      	bne.n	800a9fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d107      	bne.n	800a9fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f06f 0201 	mvn.w	r2, #1
 800a9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7f7 fbfb 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa04:	2b80      	cmp	r3, #128	; 0x80
 800aa06:	d10e      	bne.n	800aa26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa12:	2b80      	cmp	r3, #128	; 0x80
 800aa14:	d107      	bne.n	800aa26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f99b 	bl	800ad5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa34:	d10e      	bne.n	800aa54 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa40:	2b80      	cmp	r3, #128	; 0x80
 800aa42:	d107      	bne.n	800aa54 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f98e 	bl	800ad70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5e:	2b40      	cmp	r3, #64	; 0x40
 800aa60:	d10e      	bne.n	800aa80 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6c:	2b40      	cmp	r3, #64	; 0x40
 800aa6e:	d107      	bne.n	800aa80 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f838 	bl	800aaf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	f003 0320 	and.w	r3, r3, #32
 800aa8a:	2b20      	cmp	r3, #32
 800aa8c:	d10e      	bne.n	800aaac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	f003 0320 	and.w	r3, r3, #32
 800aa98:	2b20      	cmp	r3, #32
 800aa9a:	d107      	bne.n	800aaac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f06f 0220 	mvn.w	r2, #32
 800aaa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f94e 	bl	800ad48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aaac:	bf00      	nop
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a40      	ldr	r2, [pc, #256]	; (800ac18 <TIM_Base_SetConfig+0x114>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d013      	beq.n	800ab44 <TIM_Base_SetConfig+0x40>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab22:	d00f      	beq.n	800ab44 <TIM_Base_SetConfig+0x40>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a3d      	ldr	r2, [pc, #244]	; (800ac1c <TIM_Base_SetConfig+0x118>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d00b      	beq.n	800ab44 <TIM_Base_SetConfig+0x40>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a3c      	ldr	r2, [pc, #240]	; (800ac20 <TIM_Base_SetConfig+0x11c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d007      	beq.n	800ab44 <TIM_Base_SetConfig+0x40>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a3b      	ldr	r2, [pc, #236]	; (800ac24 <TIM_Base_SetConfig+0x120>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d003      	beq.n	800ab44 <TIM_Base_SetConfig+0x40>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a3a      	ldr	r2, [pc, #232]	; (800ac28 <TIM_Base_SetConfig+0x124>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d108      	bne.n	800ab56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a2f      	ldr	r2, [pc, #188]	; (800ac18 <TIM_Base_SetConfig+0x114>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d01f      	beq.n	800ab9e <TIM_Base_SetConfig+0x9a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab64:	d01b      	beq.n	800ab9e <TIM_Base_SetConfig+0x9a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a2c      	ldr	r2, [pc, #176]	; (800ac1c <TIM_Base_SetConfig+0x118>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d017      	beq.n	800ab9e <TIM_Base_SetConfig+0x9a>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a2b      	ldr	r2, [pc, #172]	; (800ac20 <TIM_Base_SetConfig+0x11c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d013      	beq.n	800ab9e <TIM_Base_SetConfig+0x9a>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a2a      	ldr	r2, [pc, #168]	; (800ac24 <TIM_Base_SetConfig+0x120>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d00f      	beq.n	800ab9e <TIM_Base_SetConfig+0x9a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a29      	ldr	r2, [pc, #164]	; (800ac28 <TIM_Base_SetConfig+0x124>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d00b      	beq.n	800ab9e <TIM_Base_SetConfig+0x9a>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a28      	ldr	r2, [pc, #160]	; (800ac2c <TIM_Base_SetConfig+0x128>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d007      	beq.n	800ab9e <TIM_Base_SetConfig+0x9a>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a27      	ldr	r2, [pc, #156]	; (800ac30 <TIM_Base_SetConfig+0x12c>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d003      	beq.n	800ab9e <TIM_Base_SetConfig+0x9a>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a26      	ldr	r2, [pc, #152]	; (800ac34 <TIM_Base_SetConfig+0x130>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d108      	bne.n	800abb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	4313      	orrs	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	4313      	orrs	r3, r2
 800abbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a10      	ldr	r2, [pc, #64]	; (800ac18 <TIM_Base_SetConfig+0x114>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d00f      	beq.n	800abfc <TIM_Base_SetConfig+0xf8>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a12      	ldr	r2, [pc, #72]	; (800ac28 <TIM_Base_SetConfig+0x124>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d00b      	beq.n	800abfc <TIM_Base_SetConfig+0xf8>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a11      	ldr	r2, [pc, #68]	; (800ac2c <TIM_Base_SetConfig+0x128>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d007      	beq.n	800abfc <TIM_Base_SetConfig+0xf8>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a10      	ldr	r2, [pc, #64]	; (800ac30 <TIM_Base_SetConfig+0x12c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d003      	beq.n	800abfc <TIM_Base_SetConfig+0xf8>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a0f      	ldr	r2, [pc, #60]	; (800ac34 <TIM_Base_SetConfig+0x130>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d103      	bne.n	800ac04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	615a      	str	r2, [r3, #20]
}
 800ac0a:	bf00      	nop
 800ac0c:	3714      	adds	r7, #20
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	40012c00 	.word	0x40012c00
 800ac1c:	40000400 	.word	0x40000400
 800ac20:	40000800 	.word	0x40000800
 800ac24:	40000c00 	.word	0x40000c00
 800ac28:	40013400 	.word	0x40013400
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	40014400 	.word	0x40014400
 800ac34:	40014800 	.word	0x40014800

0800ac38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d101      	bne.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e068      	b.n	800ad22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a2e      	ldr	r2, [pc, #184]	; (800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d004      	beq.n	800ac84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a2d      	ldr	r2, [pc, #180]	; (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d108      	bne.n	800ac96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ac8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a1e      	ldr	r2, [pc, #120]	; (800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d01d      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc2:	d018      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a1b      	ldr	r2, [pc, #108]	; (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d013      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a1a      	ldr	r2, [pc, #104]	; (800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d00e      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a18      	ldr	r2, [pc, #96]	; (800ad40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d009      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a13      	ldr	r2, [pc, #76]	; (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d004      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a14      	ldr	r2, [pc, #80]	; (800ad44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d10c      	bne.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	40012c00 	.word	0x40012c00
 800ad34:	40013400 	.word	0x40013400
 800ad38:	40000400 	.word	0x40000400
 800ad3c:	40000800 	.word	0x40000800
 800ad40:	40000c00 	.word	0x40000c00
 800ad44:	40014000 	.word	0x40014000

0800ad48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e040      	b.n	800ae18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d106      	bne.n	800adac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f83a 	bl	800ae20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2224      	movs	r2, #36	; 0x24
 800adb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 0201 	bic.w	r2, r2, #1
 800adc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f8ca 	bl	800af5c <UART_SetConfig>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d101      	bne.n	800add2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e022      	b.n	800ae18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	2b00      	cmp	r3, #0
 800add8:	d002      	beq.n	800ade0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fb48 	bl	800b470 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	689a      	ldr	r2, [r3, #8]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f042 0201 	orr.w	r2, r2, #1
 800ae0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fbcf 	bl	800b5b4 <UART_CheckIdleState>
 800ae16:	4603      	mov	r3, r0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08a      	sub	sp, #40	; 0x28
 800ae38:	af02      	add	r7, sp, #8
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	603b      	str	r3, [r7, #0]
 800ae40:	4613      	mov	r3, r2
 800ae42:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae48:	2b20      	cmp	r3, #32
 800ae4a:	f040 8082 	bne.w	800af52 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <HAL_UART_Transmit+0x26>
 800ae54:	88fb      	ldrh	r3, [r7, #6]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e07a      	b.n	800af54 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d101      	bne.n	800ae6c <HAL_UART_Transmit+0x38>
 800ae68:	2302      	movs	r3, #2
 800ae6a:	e073      	b.n	800af54 <HAL_UART_Transmit+0x120>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2221      	movs	r2, #33	; 0x21
 800ae80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae82:	f7fc fdd5 	bl	8007a30 <HAL_GetTick>
 800ae86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	88fa      	ldrh	r2, [r7, #6]
 800ae8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	88fa      	ldrh	r2, [r7, #6]
 800ae94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea0:	d108      	bne.n	800aeb4 <HAL_UART_Transmit+0x80>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d104      	bne.n	800aeb4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	61bb      	str	r3, [r7, #24]
 800aeb2:	e003      	b.n	800aebc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800aec4:	e02d      	b.n	800af22 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2200      	movs	r2, #0
 800aece:	2180      	movs	r1, #128	; 0x80
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 fbb8 	bl	800b646 <UART_WaitOnFlagUntilTimeout>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800aedc:	2303      	movs	r3, #3
 800aede:	e039      	b.n	800af54 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10b      	bne.n	800aefe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	881a      	ldrh	r2, [r3, #0]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aef2:	b292      	uxth	r2, r2
 800aef4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	3302      	adds	r3, #2
 800aefa:	61bb      	str	r3, [r7, #24]
 800aefc:	e008      	b.n	800af10 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	781a      	ldrb	r2, [r3, #0]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	b292      	uxth	r2, r2
 800af08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	3301      	adds	r3, #1
 800af0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800af16:	b29b      	uxth	r3, r3
 800af18:	3b01      	subs	r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800af28:	b29b      	uxth	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1cb      	bne.n	800aec6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2200      	movs	r2, #0
 800af36:	2140      	movs	r1, #64	; 0x40
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f000 fb84 	bl	800b646 <UART_WaitOnFlagUntilTimeout>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800af44:	2303      	movs	r3, #3
 800af46:	e005      	b.n	800af54 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2220      	movs	r2, #32
 800af4c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	e000      	b.n	800af54 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800af52:	2302      	movs	r3, #2
  }
}
 800af54:	4618      	mov	r0, r3
 800af56:	3720      	adds	r7, #32
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af5c:	b5b0      	push	{r4, r5, r7, lr}
 800af5e:	b088      	sub	sp, #32
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af64:	2300      	movs	r3, #0
 800af66:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	431a      	orrs	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	431a      	orrs	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	69db      	ldr	r3, [r3, #28]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	4bad      	ldr	r3, [pc, #692]	; (800b23c <UART_SetConfig+0x2e0>)
 800af88:	4013      	ands	r3, r2
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	6812      	ldr	r2, [r2, #0]
 800af8e:	69f9      	ldr	r1, [r7, #28]
 800af90:	430b      	orrs	r3, r1
 800af92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	430a      	orrs	r2, r1
 800afa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4aa2      	ldr	r2, [pc, #648]	; (800b240 <UART_SetConfig+0x2e4>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d004      	beq.n	800afc4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a1b      	ldr	r3, [r3, #32]
 800afbe:	69fa      	ldr	r2, [r7, #28]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	69fa      	ldr	r2, [r7, #28]
 800afd4:	430a      	orrs	r2, r1
 800afd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a99      	ldr	r2, [pc, #612]	; (800b244 <UART_SetConfig+0x2e8>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d121      	bne.n	800b026 <UART_SetConfig+0xca>
 800afe2:	4b99      	ldr	r3, [pc, #612]	; (800b248 <UART_SetConfig+0x2ec>)
 800afe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe8:	f003 0303 	and.w	r3, r3, #3
 800afec:	2b03      	cmp	r3, #3
 800afee:	d817      	bhi.n	800b020 <UART_SetConfig+0xc4>
 800aff0:	a201      	add	r2, pc, #4	; (adr r2, 800aff8 <UART_SetConfig+0x9c>)
 800aff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff6:	bf00      	nop
 800aff8:	0800b009 	.word	0x0800b009
 800affc:	0800b015 	.word	0x0800b015
 800b000:	0800b00f 	.word	0x0800b00f
 800b004:	0800b01b 	.word	0x0800b01b
 800b008:	2301      	movs	r3, #1
 800b00a:	76fb      	strb	r3, [r7, #27]
 800b00c:	e0e7      	b.n	800b1de <UART_SetConfig+0x282>
 800b00e:	2302      	movs	r3, #2
 800b010:	76fb      	strb	r3, [r7, #27]
 800b012:	e0e4      	b.n	800b1de <UART_SetConfig+0x282>
 800b014:	2304      	movs	r3, #4
 800b016:	76fb      	strb	r3, [r7, #27]
 800b018:	e0e1      	b.n	800b1de <UART_SetConfig+0x282>
 800b01a:	2308      	movs	r3, #8
 800b01c:	76fb      	strb	r3, [r7, #27]
 800b01e:	e0de      	b.n	800b1de <UART_SetConfig+0x282>
 800b020:	2310      	movs	r3, #16
 800b022:	76fb      	strb	r3, [r7, #27]
 800b024:	e0db      	b.n	800b1de <UART_SetConfig+0x282>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a88      	ldr	r2, [pc, #544]	; (800b24c <UART_SetConfig+0x2f0>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d132      	bne.n	800b096 <UART_SetConfig+0x13a>
 800b030:	4b85      	ldr	r3, [pc, #532]	; (800b248 <UART_SetConfig+0x2ec>)
 800b032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b036:	f003 030c 	and.w	r3, r3, #12
 800b03a:	2b0c      	cmp	r3, #12
 800b03c:	d828      	bhi.n	800b090 <UART_SetConfig+0x134>
 800b03e:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <UART_SetConfig+0xe8>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b079 	.word	0x0800b079
 800b048:	0800b091 	.word	0x0800b091
 800b04c:	0800b091 	.word	0x0800b091
 800b050:	0800b091 	.word	0x0800b091
 800b054:	0800b085 	.word	0x0800b085
 800b058:	0800b091 	.word	0x0800b091
 800b05c:	0800b091 	.word	0x0800b091
 800b060:	0800b091 	.word	0x0800b091
 800b064:	0800b07f 	.word	0x0800b07f
 800b068:	0800b091 	.word	0x0800b091
 800b06c:	0800b091 	.word	0x0800b091
 800b070:	0800b091 	.word	0x0800b091
 800b074:	0800b08b 	.word	0x0800b08b
 800b078:	2300      	movs	r3, #0
 800b07a:	76fb      	strb	r3, [r7, #27]
 800b07c:	e0af      	b.n	800b1de <UART_SetConfig+0x282>
 800b07e:	2302      	movs	r3, #2
 800b080:	76fb      	strb	r3, [r7, #27]
 800b082:	e0ac      	b.n	800b1de <UART_SetConfig+0x282>
 800b084:	2304      	movs	r3, #4
 800b086:	76fb      	strb	r3, [r7, #27]
 800b088:	e0a9      	b.n	800b1de <UART_SetConfig+0x282>
 800b08a:	2308      	movs	r3, #8
 800b08c:	76fb      	strb	r3, [r7, #27]
 800b08e:	e0a6      	b.n	800b1de <UART_SetConfig+0x282>
 800b090:	2310      	movs	r3, #16
 800b092:	76fb      	strb	r3, [r7, #27]
 800b094:	e0a3      	b.n	800b1de <UART_SetConfig+0x282>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a6d      	ldr	r2, [pc, #436]	; (800b250 <UART_SetConfig+0x2f4>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d120      	bne.n	800b0e2 <UART_SetConfig+0x186>
 800b0a0:	4b69      	ldr	r3, [pc, #420]	; (800b248 <UART_SetConfig+0x2ec>)
 800b0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b0aa:	2b30      	cmp	r3, #48	; 0x30
 800b0ac:	d013      	beq.n	800b0d6 <UART_SetConfig+0x17a>
 800b0ae:	2b30      	cmp	r3, #48	; 0x30
 800b0b0:	d814      	bhi.n	800b0dc <UART_SetConfig+0x180>
 800b0b2:	2b20      	cmp	r3, #32
 800b0b4:	d009      	beq.n	800b0ca <UART_SetConfig+0x16e>
 800b0b6:	2b20      	cmp	r3, #32
 800b0b8:	d810      	bhi.n	800b0dc <UART_SetConfig+0x180>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <UART_SetConfig+0x168>
 800b0be:	2b10      	cmp	r3, #16
 800b0c0:	d006      	beq.n	800b0d0 <UART_SetConfig+0x174>
 800b0c2:	e00b      	b.n	800b0dc <UART_SetConfig+0x180>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	76fb      	strb	r3, [r7, #27]
 800b0c8:	e089      	b.n	800b1de <UART_SetConfig+0x282>
 800b0ca:	2302      	movs	r3, #2
 800b0cc:	76fb      	strb	r3, [r7, #27]
 800b0ce:	e086      	b.n	800b1de <UART_SetConfig+0x282>
 800b0d0:	2304      	movs	r3, #4
 800b0d2:	76fb      	strb	r3, [r7, #27]
 800b0d4:	e083      	b.n	800b1de <UART_SetConfig+0x282>
 800b0d6:	2308      	movs	r3, #8
 800b0d8:	76fb      	strb	r3, [r7, #27]
 800b0da:	e080      	b.n	800b1de <UART_SetConfig+0x282>
 800b0dc:	2310      	movs	r3, #16
 800b0de:	76fb      	strb	r3, [r7, #27]
 800b0e0:	e07d      	b.n	800b1de <UART_SetConfig+0x282>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a5b      	ldr	r2, [pc, #364]	; (800b254 <UART_SetConfig+0x2f8>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d120      	bne.n	800b12e <UART_SetConfig+0x1d2>
 800b0ec:	4b56      	ldr	r3, [pc, #344]	; (800b248 <UART_SetConfig+0x2ec>)
 800b0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b0f6:	2bc0      	cmp	r3, #192	; 0xc0
 800b0f8:	d013      	beq.n	800b122 <UART_SetConfig+0x1c6>
 800b0fa:	2bc0      	cmp	r3, #192	; 0xc0
 800b0fc:	d814      	bhi.n	800b128 <UART_SetConfig+0x1cc>
 800b0fe:	2b80      	cmp	r3, #128	; 0x80
 800b100:	d009      	beq.n	800b116 <UART_SetConfig+0x1ba>
 800b102:	2b80      	cmp	r3, #128	; 0x80
 800b104:	d810      	bhi.n	800b128 <UART_SetConfig+0x1cc>
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <UART_SetConfig+0x1b4>
 800b10a:	2b40      	cmp	r3, #64	; 0x40
 800b10c:	d006      	beq.n	800b11c <UART_SetConfig+0x1c0>
 800b10e:	e00b      	b.n	800b128 <UART_SetConfig+0x1cc>
 800b110:	2300      	movs	r3, #0
 800b112:	76fb      	strb	r3, [r7, #27]
 800b114:	e063      	b.n	800b1de <UART_SetConfig+0x282>
 800b116:	2302      	movs	r3, #2
 800b118:	76fb      	strb	r3, [r7, #27]
 800b11a:	e060      	b.n	800b1de <UART_SetConfig+0x282>
 800b11c:	2304      	movs	r3, #4
 800b11e:	76fb      	strb	r3, [r7, #27]
 800b120:	e05d      	b.n	800b1de <UART_SetConfig+0x282>
 800b122:	2308      	movs	r3, #8
 800b124:	76fb      	strb	r3, [r7, #27]
 800b126:	e05a      	b.n	800b1de <UART_SetConfig+0x282>
 800b128:	2310      	movs	r3, #16
 800b12a:	76fb      	strb	r3, [r7, #27]
 800b12c:	e057      	b.n	800b1de <UART_SetConfig+0x282>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a49      	ldr	r2, [pc, #292]	; (800b258 <UART_SetConfig+0x2fc>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d125      	bne.n	800b184 <UART_SetConfig+0x228>
 800b138:	4b43      	ldr	r3, [pc, #268]	; (800b248 <UART_SetConfig+0x2ec>)
 800b13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b13e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b146:	d017      	beq.n	800b178 <UART_SetConfig+0x21c>
 800b148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b14c:	d817      	bhi.n	800b17e <UART_SetConfig+0x222>
 800b14e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b152:	d00b      	beq.n	800b16c <UART_SetConfig+0x210>
 800b154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b158:	d811      	bhi.n	800b17e <UART_SetConfig+0x222>
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <UART_SetConfig+0x20a>
 800b15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b162:	d006      	beq.n	800b172 <UART_SetConfig+0x216>
 800b164:	e00b      	b.n	800b17e <UART_SetConfig+0x222>
 800b166:	2300      	movs	r3, #0
 800b168:	76fb      	strb	r3, [r7, #27]
 800b16a:	e038      	b.n	800b1de <UART_SetConfig+0x282>
 800b16c:	2302      	movs	r3, #2
 800b16e:	76fb      	strb	r3, [r7, #27]
 800b170:	e035      	b.n	800b1de <UART_SetConfig+0x282>
 800b172:	2304      	movs	r3, #4
 800b174:	76fb      	strb	r3, [r7, #27]
 800b176:	e032      	b.n	800b1de <UART_SetConfig+0x282>
 800b178:	2308      	movs	r3, #8
 800b17a:	76fb      	strb	r3, [r7, #27]
 800b17c:	e02f      	b.n	800b1de <UART_SetConfig+0x282>
 800b17e:	2310      	movs	r3, #16
 800b180:	76fb      	strb	r3, [r7, #27]
 800b182:	e02c      	b.n	800b1de <UART_SetConfig+0x282>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a2d      	ldr	r2, [pc, #180]	; (800b240 <UART_SetConfig+0x2e4>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d125      	bne.n	800b1da <UART_SetConfig+0x27e>
 800b18e:	4b2e      	ldr	r3, [pc, #184]	; (800b248 <UART_SetConfig+0x2ec>)
 800b190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b19c:	d017      	beq.n	800b1ce <UART_SetConfig+0x272>
 800b19e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1a2:	d817      	bhi.n	800b1d4 <UART_SetConfig+0x278>
 800b1a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1a8:	d00b      	beq.n	800b1c2 <UART_SetConfig+0x266>
 800b1aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1ae:	d811      	bhi.n	800b1d4 <UART_SetConfig+0x278>
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d003      	beq.n	800b1bc <UART_SetConfig+0x260>
 800b1b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1b8:	d006      	beq.n	800b1c8 <UART_SetConfig+0x26c>
 800b1ba:	e00b      	b.n	800b1d4 <UART_SetConfig+0x278>
 800b1bc:	2300      	movs	r3, #0
 800b1be:	76fb      	strb	r3, [r7, #27]
 800b1c0:	e00d      	b.n	800b1de <UART_SetConfig+0x282>
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	76fb      	strb	r3, [r7, #27]
 800b1c6:	e00a      	b.n	800b1de <UART_SetConfig+0x282>
 800b1c8:	2304      	movs	r3, #4
 800b1ca:	76fb      	strb	r3, [r7, #27]
 800b1cc:	e007      	b.n	800b1de <UART_SetConfig+0x282>
 800b1ce:	2308      	movs	r3, #8
 800b1d0:	76fb      	strb	r3, [r7, #27]
 800b1d2:	e004      	b.n	800b1de <UART_SetConfig+0x282>
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	76fb      	strb	r3, [r7, #27]
 800b1d8:	e001      	b.n	800b1de <UART_SetConfig+0x282>
 800b1da:	2310      	movs	r3, #16
 800b1dc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a17      	ldr	r2, [pc, #92]	; (800b240 <UART_SetConfig+0x2e4>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	f040 8087 	bne.w	800b2f8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1ea:	7efb      	ldrb	r3, [r7, #27]
 800b1ec:	2b08      	cmp	r3, #8
 800b1ee:	d837      	bhi.n	800b260 <UART_SetConfig+0x304>
 800b1f0:	a201      	add	r2, pc, #4	; (adr r2, 800b1f8 <UART_SetConfig+0x29c>)
 800b1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f6:	bf00      	nop
 800b1f8:	0800b21d 	.word	0x0800b21d
 800b1fc:	0800b261 	.word	0x0800b261
 800b200:	0800b225 	.word	0x0800b225
 800b204:	0800b261 	.word	0x0800b261
 800b208:	0800b22b 	.word	0x0800b22b
 800b20c:	0800b261 	.word	0x0800b261
 800b210:	0800b261 	.word	0x0800b261
 800b214:	0800b261 	.word	0x0800b261
 800b218:	0800b233 	.word	0x0800b233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b21c:	f7fe fd7c 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800b220:	6178      	str	r0, [r7, #20]
        break;
 800b222:	e022      	b.n	800b26a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b224:	4b0d      	ldr	r3, [pc, #52]	; (800b25c <UART_SetConfig+0x300>)
 800b226:	617b      	str	r3, [r7, #20]
        break;
 800b228:	e01f      	b.n	800b26a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b22a:	f7fe fcdd 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800b22e:	6178      	str	r0, [r7, #20]
        break;
 800b230:	e01b      	b.n	800b26a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b236:	617b      	str	r3, [r7, #20]
        break;
 800b238:	e017      	b.n	800b26a <UART_SetConfig+0x30e>
 800b23a:	bf00      	nop
 800b23c:	efff69f3 	.word	0xefff69f3
 800b240:	40008000 	.word	0x40008000
 800b244:	40013800 	.word	0x40013800
 800b248:	40021000 	.word	0x40021000
 800b24c:	40004400 	.word	0x40004400
 800b250:	40004800 	.word	0x40004800
 800b254:	40004c00 	.word	0x40004c00
 800b258:	40005000 	.word	0x40005000
 800b25c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	76bb      	strb	r3, [r7, #26]
        break;
 800b268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80f1 	beq.w	800b454 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	4613      	mov	r3, r2
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	4413      	add	r3, r2
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d305      	bcc.n	800b28e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d902      	bls.n	800b294 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	76bb      	strb	r3, [r7, #26]
 800b292:	e0df      	b.n	800b454 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	4618      	mov	r0, r3
 800b298:	f04f 0100 	mov.w	r1, #0
 800b29c:	f04f 0200 	mov.w	r2, #0
 800b2a0:	f04f 0300 	mov.w	r3, #0
 800b2a4:	020b      	lsls	r3, r1, #8
 800b2a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2aa:	0202      	lsls	r2, r0, #8
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	6849      	ldr	r1, [r1, #4]
 800b2b0:	0849      	lsrs	r1, r1, #1
 800b2b2:	4608      	mov	r0, r1
 800b2b4:	f04f 0100 	mov.w	r1, #0
 800b2b8:	1814      	adds	r4, r2, r0
 800b2ba:	eb43 0501 	adc.w	r5, r3, r1
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	f04f 0300 	mov.w	r3, #0
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	f7f5 fd1c 	bl	8000d08 <__aeabi_uldivmod>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2de:	d308      	bcc.n	800b2f2 <UART_SetConfig+0x396>
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2e6:	d204      	bcs.n	800b2f2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	60da      	str	r2, [r3, #12]
 800b2f0:	e0b0      	b.n	800b454 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	76bb      	strb	r3, [r7, #26]
 800b2f6:	e0ad      	b.n	800b454 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b300:	d15c      	bne.n	800b3bc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800b302:	7efb      	ldrb	r3, [r7, #27]
 800b304:	2b08      	cmp	r3, #8
 800b306:	d828      	bhi.n	800b35a <UART_SetConfig+0x3fe>
 800b308:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <UART_SetConfig+0x3b4>)
 800b30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30e:	bf00      	nop
 800b310:	0800b335 	.word	0x0800b335
 800b314:	0800b33d 	.word	0x0800b33d
 800b318:	0800b345 	.word	0x0800b345
 800b31c:	0800b35b 	.word	0x0800b35b
 800b320:	0800b34b 	.word	0x0800b34b
 800b324:	0800b35b 	.word	0x0800b35b
 800b328:	0800b35b 	.word	0x0800b35b
 800b32c:	0800b35b 	.word	0x0800b35b
 800b330:	0800b353 	.word	0x0800b353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b334:	f7fe fcf0 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800b338:	6178      	str	r0, [r7, #20]
        break;
 800b33a:	e013      	b.n	800b364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b33c:	f7fe fd02 	bl	8009d44 <HAL_RCC_GetPCLK2Freq>
 800b340:	6178      	str	r0, [r7, #20]
        break;
 800b342:	e00f      	b.n	800b364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b344:	4b49      	ldr	r3, [pc, #292]	; (800b46c <UART_SetConfig+0x510>)
 800b346:	617b      	str	r3, [r7, #20]
        break;
 800b348:	e00c      	b.n	800b364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b34a:	f7fe fc4d 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800b34e:	6178      	str	r0, [r7, #20]
        break;
 800b350:	e008      	b.n	800b364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b356:	617b      	str	r3, [r7, #20]
        break;
 800b358:	e004      	b.n	800b364 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800b35a:	2300      	movs	r3, #0
 800b35c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	76bb      	strb	r3, [r7, #26]
        break;
 800b362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d074      	beq.n	800b454 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	005a      	lsls	r2, r3, #1
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	085b      	lsrs	r3, r3, #1
 800b374:	441a      	add	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37e:	b29b      	uxth	r3, r3
 800b380:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	2b0f      	cmp	r3, #15
 800b386:	d916      	bls.n	800b3b6 <UART_SetConfig+0x45a>
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b38e:	d212      	bcs.n	800b3b6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	b29b      	uxth	r3, r3
 800b394:	f023 030f 	bic.w	r3, r3, #15
 800b398:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	085b      	lsrs	r3, r3, #1
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	89fb      	ldrh	r3, [r7, #14]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	89fa      	ldrh	r2, [r7, #14]
 800b3b2:	60da      	str	r2, [r3, #12]
 800b3b4:	e04e      	b.n	800b454 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	76bb      	strb	r3, [r7, #26]
 800b3ba:	e04b      	b.n	800b454 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3bc:	7efb      	ldrb	r3, [r7, #27]
 800b3be:	2b08      	cmp	r3, #8
 800b3c0:	d827      	bhi.n	800b412 <UART_SetConfig+0x4b6>
 800b3c2:	a201      	add	r2, pc, #4	; (adr r2, 800b3c8 <UART_SetConfig+0x46c>)
 800b3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c8:	0800b3ed 	.word	0x0800b3ed
 800b3cc:	0800b3f5 	.word	0x0800b3f5
 800b3d0:	0800b3fd 	.word	0x0800b3fd
 800b3d4:	0800b413 	.word	0x0800b413
 800b3d8:	0800b403 	.word	0x0800b403
 800b3dc:	0800b413 	.word	0x0800b413
 800b3e0:	0800b413 	.word	0x0800b413
 800b3e4:	0800b413 	.word	0x0800b413
 800b3e8:	0800b40b 	.word	0x0800b40b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3ec:	f7fe fc94 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800b3f0:	6178      	str	r0, [r7, #20]
        break;
 800b3f2:	e013      	b.n	800b41c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3f4:	f7fe fca6 	bl	8009d44 <HAL_RCC_GetPCLK2Freq>
 800b3f8:	6178      	str	r0, [r7, #20]
        break;
 800b3fa:	e00f      	b.n	800b41c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3fc:	4b1b      	ldr	r3, [pc, #108]	; (800b46c <UART_SetConfig+0x510>)
 800b3fe:	617b      	str	r3, [r7, #20]
        break;
 800b400:	e00c      	b.n	800b41c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b402:	f7fe fbf1 	bl	8009be8 <HAL_RCC_GetSysClockFreq>
 800b406:	6178      	str	r0, [r7, #20]
        break;
 800b408:	e008      	b.n	800b41c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b40a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b40e:	617b      	str	r3, [r7, #20]
        break;
 800b410:	e004      	b.n	800b41c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800b412:	2300      	movs	r3, #0
 800b414:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	76bb      	strb	r3, [r7, #26]
        break;
 800b41a:	bf00      	nop
    }

    if (pclk != 0U)
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d018      	beq.n	800b454 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	085a      	lsrs	r2, r3, #1
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	441a      	add	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	fbb2 f3f3 	udiv	r3, r2, r3
 800b434:	b29b      	uxth	r3, r3
 800b436:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	2b0f      	cmp	r3, #15
 800b43c:	d908      	bls.n	800b450 <UART_SetConfig+0x4f4>
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b444:	d204      	bcs.n	800b450 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	60da      	str	r2, [r3, #12]
 800b44e:	e001      	b.n	800b454 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b460:	7ebb      	ldrb	r3, [r7, #26]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3720      	adds	r7, #32
 800b466:	46bd      	mov	sp, r7
 800b468:	bdb0      	pop	{r4, r5, r7, pc}
 800b46a:	bf00      	nop
 800b46c:	00f42400 	.word	0x00f42400

0800b470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00a      	beq.n	800b49a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	430a      	orrs	r2, r1
 800b498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	f003 0302 	and.w	r3, r3, #2
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00a      	beq.n	800b4bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	430a      	orrs	r2, r1
 800b4ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	f003 0304 	and.w	r3, r3, #4
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00a      	beq.n	800b4de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e2:	f003 0308 	and.w	r3, r3, #8
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b504:	f003 0310 	and.w	r3, r3, #16
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00a      	beq.n	800b522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	430a      	orrs	r2, r1
 800b520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	f003 0320 	and.w	r3, r3, #32
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00a      	beq.n	800b544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	430a      	orrs	r2, r1
 800b542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d01a      	beq.n	800b586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	430a      	orrs	r2, r1
 800b564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b56e:	d10a      	bne.n	800b586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	605a      	str	r2, [r3, #4]
  }
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5c4:	f7fc fa34 	bl	8007a30 <HAL_GetTick>
 800b5c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 0308 	and.w	r3, r3, #8
 800b5d4:	2b08      	cmp	r3, #8
 800b5d6:	d10e      	bne.n	800b5f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f82d 	bl	800b646 <UART_WaitOnFlagUntilTimeout>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e023      	b.n	800b63e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b04      	cmp	r3, #4
 800b602:	d10e      	bne.n	800b622 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f817 	bl	800b646 <UART_WaitOnFlagUntilTimeout>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e00d      	b.n	800b63e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2220      	movs	r2, #32
 800b626:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2220      	movs	r2, #32
 800b62c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	60b9      	str	r1, [r7, #8]
 800b650:	603b      	str	r3, [r7, #0]
 800b652:	4613      	mov	r3, r2
 800b654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b656:	e05e      	b.n	800b716 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b65e:	d05a      	beq.n	800b716 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b660:	f7fc f9e6 	bl	8007a30 <HAL_GetTick>
 800b664:	4602      	mov	r2, r0
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d302      	bcc.n	800b676 <UART_WaitOnFlagUntilTimeout+0x30>
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d11b      	bne.n	800b6ae <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b684:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689a      	ldr	r2, [r3, #8]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f022 0201 	bic.w	r2, r2, #1
 800b694:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2220      	movs	r2, #32
 800b69a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2220      	movs	r2, #32
 800b6a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e043      	b.n	800b736 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0304 	and.w	r3, r3, #4
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d02c      	beq.n	800b716 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	69db      	ldr	r3, [r3, #28]
 800b6c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6ca:	d124      	bne.n	800b716 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6d4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b6e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	689a      	ldr	r2, [r3, #8]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f022 0201 	bic.w	r2, r2, #1
 800b6f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2220      	movs	r2, #32
 800b700:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b712:	2303      	movs	r3, #3
 800b714:	e00f      	b.n	800b736 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	69da      	ldr	r2, [r3, #28]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	4013      	ands	r3, r2
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	429a      	cmp	r2, r3
 800b724:	bf0c      	ite	eq
 800b726:	2301      	moveq	r3, #1
 800b728:	2300      	movne	r3, #0
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	461a      	mov	r2, r3
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	429a      	cmp	r2, r3
 800b732:	d091      	beq.n	800b658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
	...

0800b740 <set_mems_int_pin_a_exti>:


static void mems_int_pin_a_hardware_event_isr(void);

void set_mems_int_pin_a_exti(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	af00      	add	r7, sp, #0
  /* register event irq handler */
  HAL_EXTI_GetHandle(&hexti11, EXTI_LINE_11);
 800b744:	4909      	ldr	r1, [pc, #36]	; (800b76c <set_mems_int_pin_a_exti+0x2c>)
 800b746:	480a      	ldr	r0, [pc, #40]	; (800b770 <set_mems_int_pin_a_exti+0x30>)
 800b748:	f7fc fc0c 	bl	8007f64 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti11, HAL_EXTI_COMMON_CB_ID, mems_int_pin_a_hardware_event_isr);
 800b74c:	4a09      	ldr	r2, [pc, #36]	; (800b774 <set_mems_int_pin_a_exti+0x34>)
 800b74e:	2100      	movs	r1, #0
 800b750:	4807      	ldr	r0, [pc, #28]	; (800b770 <set_mems_int_pin_a_exti+0x30>)
 800b752:	f7fc fbed 	bl	8007f30 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800b756:	2200      	movs	r2, #0
 800b758:	2100      	movs	r1, #0
 800b75a:	2028      	movs	r0, #40	; 0x28
 800b75c:	f7fc fa97 	bl	8007c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800b760:	2028      	movs	r0, #40	; 0x28
 800b762:	f7fc fab0 	bl	8007cc6 <HAL_NVIC_EnableIRQ>
}
 800b766:	bf00      	nop
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	1600000b 	.word	0x1600000b
 800b770:	20000074 	.word	0x20000074
 800b774:	0800b779 	.word	0x0800b779

0800b778 <mems_int_pin_a_hardware_event_isr>:

static void mems_int_pin_a_hardware_event_isr(void)
{
 800b778:	b480      	push	{r7}
 800b77a:	af00      	add	r7, sp, #0
  MemsEventDetected = 1;
 800b77c:	4b05      	ldr	r3, [pc, #20]	; (800b794 <mems_int_pin_a_hardware_event_isr+0x1c>)
 800b77e:	2201      	movs	r2, #1
 800b780:	701a      	strb	r2, [r3, #0]
  AccIntReceived = 1;
 800b782:	4b05      	ldr	r3, [pc, #20]	; (800b798 <mems_int_pin_a_hardware_event_isr+0x20>)
 800b784:	2201      	movs	r2, #1
 800b786:	701a      	strb	r2, [r3, #0]

}
 800b788:	bf00      	nop
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	2000034c 	.word	0x2000034c
 800b798:	20000280 	.word	0x20000280

0800b79c <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08e      	sub	sp, #56	; 0x38
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d131      	bne.n	800b81c <CUSTOM_MOTION_SENSOR_Init+0x80>
  {

    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b7b8:	6838      	ldr	r0, [r7, #0]
 800b7ba:	f000 f9c9 	bl	800bb50 <LSM6DSL_0_Probe>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800b7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c8:	e064      	b.n	800b894 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b7ca:	4a34      	ldr	r2, [pc, #208]	; (800b89c <CUSTOM_MOTION_SENSOR_Init+0x100>)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	4932      	ldr	r1, [pc, #200]	; (800b8a0 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7dc:	f107 010c 	add.w	r1, r7, #12
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	4798      	blx	r3
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d002      	beq.n	800b7f0 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b7ea:	f06f 0306 	mvn.w	r3, #6
 800b7ee:	e051      	b.n	800b894 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 800b7f0:	7b3b      	ldrb	r3, [r7, #12]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d103      	bne.n	800b7fe <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 800b7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f8:	f043 0302 	orr.w	r3, r3, #2
 800b7fc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800b7fe:	7b7b      	ldrb	r3, [r7, #13]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d103      	bne.n	800b80c <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	f043 0301 	orr.w	r3, r3, #1
 800b80a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b80c:	7bbb      	ldrb	r3, [r7, #14]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d108      	bne.n	800b824 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	f043 0304 	orr.w	r3, r3, #4
 800b818:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b81a:	e003      	b.n	800b824 <CUSTOM_MOTION_SENSOR_Init+0x88>

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b81c:	f06f 0301 	mvn.w	r3, #1
 800b820:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800b822:	e000      	b.n	800b826 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 800b824:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800b82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82e:	e031      	b.n	800b894 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800b830:	2300      	movs	r3, #0
 800b832:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b834:	e02a      	b.n	800b88c <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	4013      	ands	r3, r2
 800b83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b83e:	429a      	cmp	r2, r3
 800b840:	d11e      	bne.n	800b880 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800b842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b846:	4013      	ands	r3, r2
 800b848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d118      	bne.n	800b880 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b84e:	4a15      	ldr	r2, [pc, #84]	; (800b8a4 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 800b850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b852:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b856:	4814      	ldr	r0, [pc, #80]	; (800b8a8 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	4613      	mov	r3, r2
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	4413      	add	r3, r2
 800b860:	440b      	add	r3, r1
 800b862:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	490d      	ldr	r1, [pc, #52]	; (800b8a0 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b870:	4610      	mov	r0, r2
 800b872:	4798      	blx	r3
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b87a:	f06f 0304 	mvn.w	r3, #4
 800b87e:	e009      	b.n	800b894 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800b886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b888:	3301      	adds	r3, #1
 800b88a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d9d1      	bls.n	800b836 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800b892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b894:	4618      	mov	r0, r3
 800b896:	3738      	adds	r7, #56	; 0x38
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	2000035c 	.word	0x2000035c
 800b8a0:	2000454c 	.word	0x2000454c
 800b8a4:	2000007c 	.word	0x2000007c
 800b8a8:	20000350 	.word	0x20000350

0800b8ac <CUSTOM_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <CUSTOM_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b8bc:	f06f 0301 	mvn.w	r3, #1
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	e028      	b.n	800b916 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b8c4:	4a16      	ldr	r2, [pc, #88]	; (800b920 <CUSTOM_MOTION_SENSOR_Enable+0x74>)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d11c      	bne.n	800b910 <CUSTOM_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b8d6:	4a13      	ldr	r2, [pc, #76]	; (800b924 <CUSTOM_MOTION_SENSOR_Enable+0x78>)
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b8de:	4812      	ldr	r0, [pc, #72]	; (800b928 <CUSTOM_MOTION_SENSOR_Enable+0x7c>)
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	4413      	add	r3, r2
 800b8e8:	440b      	add	r3, r1
 800b8ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	490e      	ldr	r1, [pc, #56]	; (800b92c <CUSTOM_MOTION_SENSOR_Enable+0x80>)
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4798      	blx	r3
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <CUSTOM_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b902:	f06f 0304 	mvn.w	r3, #4
 800b906:	60fb      	str	r3, [r7, #12]
 800b908:	e005      	b.n	800b916 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b90a:	2300      	movs	r3, #0
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	e002      	b.n	800b916 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b910:	f06f 0301 	mvn.w	r3, #1
 800b914:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b916:	68fb      	ldr	r3, [r7, #12]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	20000360 	.word	0x20000360
 800b924:	2000007c 	.word	0x2000007c
 800b928:	20000350 	.word	0x20000350
 800b92c:	2000454c 	.word	0x2000454c

0800b930 <CUSTOM_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <CUSTOM_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b940:	f06f 0301 	mvn.w	r3, #1
 800b944:	60fb      	str	r3, [r7, #12]
 800b946:	e028      	b.n	800b99a <CUSTOM_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b948:	4a16      	ldr	r2, [pc, #88]	; (800b9a4 <CUSTOM_MOTION_SENSOR_Disable+0x74>)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	4013      	ands	r3, r2
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d11c      	bne.n	800b994 <CUSTOM_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b95a:	4a13      	ldr	r2, [pc, #76]	; (800b9a8 <CUSTOM_MOTION_SENSOR_Disable+0x78>)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b962:	4812      	ldr	r0, [pc, #72]	; (800b9ac <CUSTOM_MOTION_SENSOR_Disable+0x7c>)
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	4613      	mov	r3, r2
 800b968:	005b      	lsls	r3, r3, #1
 800b96a:	4413      	add	r3, r2
 800b96c:	440b      	add	r3, r1
 800b96e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	490e      	ldr	r1, [pc, #56]	; (800b9b0 <CUSTOM_MOTION_SENSOR_Disable+0x80>)
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d003      	beq.n	800b98e <CUSTOM_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b986:	f06f 0304 	mvn.w	r3, #4
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	e005      	b.n	800b99a <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	e002      	b.n	800b99a <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b994:	f06f 0301 	mvn.w	r3, #1
 800b998:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b99a:	68fb      	ldr	r3, [r7, #12]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20000360 	.word	0x20000360
 800b9a8:	2000007c 	.word	0x2000007c
 800b9ac:	20000350 	.word	0x20000350
 800b9b0:	2000454c 	.word	0x2000454c

0800b9b4 <CUSTOM_MOTION_SENSOR_GetAxesRaw>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes raw data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxesRaw(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_AxesRaw_t *Axes)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b9c6:	f06f 0301 	mvn.w	r3, #1
 800b9ca:	617b      	str	r3, [r7, #20]
 800b9cc:	e029      	b.n	800ba22 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b9ce:	4a17      	ldr	r2, [pc, #92]	; (800ba2c <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x78>)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	4013      	ands	r3, r2
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d11d      	bne.n	800ba1c <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxesRaw(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b9e0:	4a13      	ldr	r2, [pc, #76]	; (800ba30 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x7c>)
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b9e8:	4812      	ldr	r0, [pc, #72]	; (800ba34 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x80>)
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4413      	add	r3, r2
 800b9f2:	440b      	add	r3, r1
 800b9f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	490f      	ldr	r1, [pc, #60]	; (800ba38 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x84>)
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ba02:	6879      	ldr	r1, [r7, #4]
 800ba04:	4610      	mov	r0, r2
 800ba06:	4798      	blx	r3
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba0e:	f06f 0304 	mvn.w	r3, #4
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	e005      	b.n	800ba22 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ba16:	2300      	movs	r3, #0
 800ba18:	617b      	str	r3, [r7, #20]
 800ba1a:	e002      	b.n	800ba22 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ba1c:	f06f 0301 	mvn.w	r3, #1
 800ba20:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ba22:	697b      	ldr	r3, [r7, #20]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	20000360 	.word	0x20000360
 800ba30:	2000007c 	.word	0x2000007c
 800ba34:	20000350 	.word	0x20000350
 800ba38:	2000454c 	.word	0x2000454c

0800ba3c <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ba50:	f06f 0301 	mvn.w	r3, #1
 800ba54:	617b      	str	r3, [r7, #20]
 800ba56:	e02a      	b.n	800baae <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800ba58:	4a17      	ldr	r2, [pc, #92]	; (800bab8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	4013      	ands	r3, r2
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d11e      	bne.n	800baa8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800ba6a:	4a14      	ldr	r2, [pc, #80]	; (800babc <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ba72:	4813      	ldr	r0, [pc, #76]	; (800bac0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4613      	mov	r3, r2
 800ba78:	005b      	lsls	r3, r3, #1
 800ba7a:	4413      	add	r3, r2
 800ba7c:	440b      	add	r3, r1
 800ba7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	490f      	ldr	r1, [pc, #60]	; (800bac4 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ba8c:	ed97 0a01 	vldr	s0, [r7, #4]
 800ba90:	4610      	mov	r0, r2
 800ba92:	4798      	blx	r3
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba9a:	f06f 0304 	mvn.w	r3, #4
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	e005      	b.n	800baae <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]
 800baa6:	e002      	b.n	800baae <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800baa8:	f06f 0301 	mvn.w	r3, #1
 800baac:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800baae:	697b      	ldr	r3, [r7, #20]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	20000360 	.word	0x20000360
 800babc:	2000007c 	.word	0x2000007c
 800bac0:	20000350 	.word	0x20000350
 800bac4:	2000454c 	.word	0x2000454c

0800bac8 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bada:	f06f 0301 	mvn.w	r3, #1
 800bade:	617b      	str	r3, [r7, #20]
 800bae0:	e029      	b.n	800bb36 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800bae2:	4a17      	ldr	r2, [pc, #92]	; (800bb40 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	4013      	ands	r3, r2
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d11d      	bne.n	800bb30 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800baf4:	4a13      	ldr	r2, [pc, #76]	; (800bb44 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bafc:	4812      	ldr	r0, [pc, #72]	; (800bb48 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	4613      	mov	r3, r2
 800bb02:	005b      	lsls	r3, r3, #1
 800bb04:	4413      	add	r3, r2
 800bb06:	440b      	add	r3, r1
 800bb08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	490f      	ldr	r1, [pc, #60]	; (800bb4c <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bb16:	6879      	ldr	r1, [r7, #4]
 800bb18:	4610      	mov	r0, r2
 800bb1a:	4798      	blx	r3
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb22:	f06f 0304 	mvn.w	r3, #4
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	e005      	b.n	800bb36 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	617b      	str	r3, [r7, #20]
 800bb2e:	e002      	b.n	800bb36 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800bb30:	f06f 0301 	mvn.w	r3, #1
 800bb34:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800bb36:	697b      	ldr	r3, [r7, #20]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	20000360 	.word	0x20000360
 800bb44:	2000007c 	.word	0x2000007c
 800bb48:	20000350 	.word	0x20000350
 800bb4c:	2000454c 	.word	0x2000454c

0800bb50 <LSM6DSL_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b092      	sub	sp, #72	; 0x48
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_L; /* SA0 = GND */
 800bb60:	23d5      	movs	r3, #213	; 0xd5
 800bb62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = CUSTOM_LSM6DSL_0_I2C_Init;
 800bb66:	4b4a      	ldr	r3, [pc, #296]	; (800bc90 <LSM6DSL_0_Probe+0x140>)
 800bb68:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = CUSTOM_LSM6DSL_0_I2C_DeInit;
 800bb6a:	4b4a      	ldr	r3, [pc, #296]	; (800bc94 <LSM6DSL_0_Probe+0x144>)
 800bb6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = CUSTOM_LSM6DSL_0_I2C_ReadReg;
 800bb6e:	4b4a      	ldr	r3, [pc, #296]	; (800bc98 <LSM6DSL_0_Probe+0x148>)
 800bb70:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = CUSTOM_LSM6DSL_0_I2C_WriteReg;
 800bb72:	4b4a      	ldr	r3, [pc, #296]	; (800bc9c <LSM6DSL_0_Probe+0x14c>)
 800bb74:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 800bb76:	4b4a      	ldr	r3, [pc, #296]	; (800bca0 <LSM6DSL_0_Probe+0x150>)
 800bb78:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800bb7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4848      	ldr	r0, [pc, #288]	; (800bca4 <LSM6DSL_0_Probe+0x154>)
 800bb82:	f7f6 ffa9 	bl	8002ad8 <LSM6DSL_RegisterBusIO>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb8c:	f06f 0306 	mvn.w	r3, #6
 800bb90:	647b      	str	r3, [r7, #68]	; 0x44
 800bb92:	e077      	b.n	800bc84 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800bb94:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4842      	ldr	r0, [pc, #264]	; (800bca4 <LSM6DSL_0_Probe+0x154>)
 800bb9c:	f7f7 f892 	bl	8002cc4 <LSM6DSL_ReadID>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d003      	beq.n	800bbae <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bba6:	f06f 0306 	mvn.w	r3, #6
 800bbaa:	647b      	str	r3, [r7, #68]	; 0x44
 800bbac:	e06a      	b.n	800bc84 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 800bbae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbb2:	2b6a      	cmp	r3, #106	; 0x6a
 800bbb4:	d003      	beq.n	800bbbe <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bbb6:	f06f 0306 	mvn.w	r3, #6
 800bbba:	647b      	str	r3, [r7, #68]	; 0x44
 800bbbc:	e062      	b.n	800bc84 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800bbbe:	f107 0308 	add.w	r3, r7, #8
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4837      	ldr	r0, [pc, #220]	; (800bca4 <LSM6DSL_0_Probe+0x154>)
 800bbc6:	f7f7 f893 	bl	8002cf0 <LSM6DSL_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bbca:	7a7b      	ldrb	r3, [r7, #9]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	7a3b      	ldrb	r3, [r7, #8]
 800bbd0:	005b      	lsls	r3, r3, #1
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	7abb      	ldrb	r3, [r7, #10]
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	4a33      	ldr	r2, [pc, #204]	; (800bca8 <LSM6DSL_0_Probe+0x158>)
 800bbdc:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSL_0] = &lsm6dsl_obj_0;
 800bbde:	4b33      	ldr	r3, [pc, #204]	; (800bcac <LSM6DSL_0_Probe+0x15c>)
 800bbe0:	4a30      	ldr	r2, [pc, #192]	; (800bca4 <LSM6DSL_0_Probe+0x154>)
 800bbe2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800bbe4:	4b32      	ldr	r3, [pc, #200]	; (800bcb0 <LSM6DSL_0_Probe+0x160>)
 800bbe6:	4a33      	ldr	r2, [pc, #204]	; (800bcb4 <LSM6DSL_0_Probe+0x164>)
 800bbe8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bbea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d11d      	bne.n	800bc2c <LSM6DSL_0_Probe+0xdc>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d018      	beq.n	800bc2c <LSM6DSL_0_Probe+0xdc>
 800bbfa:	7a7b      	ldrb	r3, [r7, #9]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d115      	bne.n	800bc2c <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800bc00:	4b2d      	ldr	r3, [pc, #180]	; (800bcb8 <LSM6DSL_0_Probe+0x168>)
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	4a2d      	ldr	r2, [pc, #180]	; (800bcbc <LSM6DSL_0_Probe+0x16c>)
 800bc06:	492e      	ldr	r1, [pc, #184]	; (800bcc0 <LSM6DSL_0_Probe+0x170>)
 800bc08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSL_0]->Init(MotionCompObj[CUSTOM_LSM6DSL_0]) != LSM6DSL_OK)
 800bc0c:	4b28      	ldr	r3, [pc, #160]	; (800bcb0 <LSM6DSL_0_Probe+0x160>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a26      	ldr	r2, [pc, #152]	; (800bcac <LSM6DSL_0_Probe+0x15c>)
 800bc14:	6812      	ldr	r2, [r2, #0]
 800bc16:	4610      	mov	r0, r2
 800bc18:	4798      	blx	r3
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d003      	beq.n	800bc28 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc20:	f06f 0304 	mvn.w	r3, #4
 800bc24:	647b      	str	r3, [r7, #68]	; 0x44
 800bc26:	e001      	b.n	800bc2c <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bc2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d11d      	bne.n	800bc6e <LSM6DSL_0_Probe+0x11e>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d018      	beq.n	800bc6e <LSM6DSL_0_Probe+0x11e>
 800bc3c:	7a3b      	ldrb	r3, [r7, #8]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d115      	bne.n	800bc6e <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_ACC_Driver;
 800bc42:	4b1d      	ldr	r3, [pc, #116]	; (800bcb8 <LSM6DSL_0_Probe+0x168>)
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	4a1d      	ldr	r2, [pc, #116]	; (800bcbc <LSM6DSL_0_Probe+0x16c>)
 800bc48:	491e      	ldr	r1, [pc, #120]	; (800bcc4 <LSM6DSL_0_Probe+0x174>)
 800bc4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSL_0]->Init(MotionCompObj[CUSTOM_LSM6DSL_0]) != LSM6DSL_OK)
 800bc4e:	4b18      	ldr	r3, [pc, #96]	; (800bcb0 <LSM6DSL_0_Probe+0x160>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a15      	ldr	r2, [pc, #84]	; (800bcac <LSM6DSL_0_Probe+0x15c>)
 800bc56:	6812      	ldr	r2, [r2, #0]
 800bc58:	4610      	mov	r0, r2
 800bc5a:	4798      	blx	r3
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc62:	f06f 0304 	mvn.w	r3, #4
 800bc66:	647b      	str	r3, [r7, #68]	; 0x44
 800bc68:	e001      	b.n	800bc6e <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bc6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d107      	bne.n	800bc84 <LSM6DSL_0_Probe+0x134>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f003 0304 	and.w	r3, r3, #4
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d002      	beq.n	800bc84 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc7e:	f06f 0304 	mvn.w	r3, #4
 800bc82:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800bc84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3748      	adds	r7, #72	; 0x48
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	080027d1 	.word	0x080027d1
 800bc94:	0800284d 	.word	0x0800284d
 800bc98:	08002901 	.word	0x08002901
 800bc9c:	0800289d 	.word	0x0800289d
 800bca0:	08002965 	.word	0x08002965
 800bca4:	20000364 	.word	0x20000364
 800bca8:	20000360 	.word	0x20000360
 800bcac:	2000454c 	.word	0x2000454c
 800bcb0:	2000035c 	.word	0x2000035c
 800bcb4:	20000014 	.word	0x20000014
 800bcb8:	2000007c 	.word	0x2000007c
 800bcbc:	20000350 	.word	0x20000350
 800bcc0:	20000048 	.word	0x20000048
 800bcc4:	20000024 	.word	0x20000024

0800bcc8 <CUSTOM_MOTION_SENSOR_Read_Register>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written to
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d112      	bne.n	800bd02 <CUSTOM_MOTION_SENSOR_Read_Register+0x3a>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800bcdc:	4a0d      	ldr	r2, [pc, #52]	; (800bd14 <CUSTOM_MOTION_SENSOR_Read_Register+0x4c>)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bce4:	7af9      	ldrb	r1, [r7, #11]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f7 fc78 	bl	80035de <LSM6DSL_Read_Reg>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d003      	beq.n	800bcfc <CUSTOM_MOTION_SENSOR_Read_Register+0x34>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcf4:	f06f 0304 	mvn.w	r3, #4
 800bcf8:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bcfa:	e006      	b.n	800bd0a <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
        ret = BSP_ERROR_NONE;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	617b      	str	r3, [r7, #20]
      break;
 800bd00:	e003      	b.n	800bd0a <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bd02:	f06f 0301 	mvn.w	r3, #1
 800bd06:	617b      	str	r3, [r7, #20]
      break;
 800bd08:	bf00      	nop
  }

  return ret;
 800bd0a:	697b      	ldr	r3, [r7, #20]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	2000454c 	.word	0x2000454c

0800bd18 <CUSTOM_MOTION_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70fb      	strb	r3, [r7, #3]
 800bd24:	4613      	mov	r3, r2
 800bd26:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d112      	bne.n	800bd54 <CUSTOM_MOTION_SENSOR_Write_Register+0x3c>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800bd2e:	4a0e      	ldr	r2, [pc, #56]	; (800bd68 <CUSTOM_MOTION_SENSOR_Write_Register+0x50>)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd36:	78ba      	ldrb	r2, [r7, #2]
 800bd38:	78f9      	ldrb	r1, [r7, #3]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7f7 fc69 	bl	8003612 <LSM6DSL_Write_Reg>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <CUSTOM_MOTION_SENSOR_Write_Register+0x36>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd46:	f06f 0304 	mvn.w	r3, #4
 800bd4a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bd4c:	e006      	b.n	800bd5c <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
        ret = BSP_ERROR_NONE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60fb      	str	r3, [r7, #12]
      break;
 800bd52:	e003      	b.n	800bd5c <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bd54:	f06f 0301 	mvn.w	r3, #1
 800bd58:	60fb      	str	r3, [r7, #12]
      break;
 800bd5a:	bf00      	nop
  }

  return ret;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	2000454c 	.word	0x2000454c

0800bd6c <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples>:
 * @param  Instance the device instance
 * @param  NumSamples number of unread FIFO samples
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples(uint32_t Instance, uint16_t *NumSamples)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d111      	bne.n	800bda0 <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x34>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Get_Num_Samples(MotionCompObj[Instance], NumSamples) != BSP_ERROR_NONE)
 800bd7c:	4a0d      	ldr	r2, [pc, #52]	; (800bdb4 <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x48>)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7f7 fcb6 	bl	80036f8 <LSM6DSL_FIFO_Get_Num_Samples>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd92:	f06f 0304 	mvn.w	r3, #4
 800bd96:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bd98:	e006      	b.n	800bda8 <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
        ret = BSP_ERROR_NONE;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
      break;
 800bd9e:	e003      	b.n	800bda8 <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bda0:	f06f 0301 	mvn.w	r3, #1
 800bda4:	60fb      	str	r3, [r7, #12]
      break;
 800bda6:	bf00      	nop
  }

  return ret;
 800bda8:	68fb      	ldr	r3, [r7, #12]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	2000454c 	.word	0x2000454c

0800bdb8 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation>:
 * @param  Function Motion sensor function
 * @param  Decimation FIFO decimation
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation(uint32_t Instance, uint32_t Function, uint8_t Decimation)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  switch (Instance)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d133      	bne.n	800be34 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x7c>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f003 0302 	and.w	r3, r3, #2
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d012      	beq.n	800bdfc <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x44>
      {
        if (LSM6DSL_FIFO_ACC_Set_Decimation(MotionCompObj[Instance], Decimation) != BSP_ERROR_NONE)
 800bdd6:	4a1c      	ldr	r2, [pc, #112]	; (800be48 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x90>)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdde:	79fa      	ldrb	r2, [r7, #7]
 800bde0:	4611      	mov	r1, r2
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7f7 fdf2 	bl	80039cc <LSM6DSL_FIFO_ACC_Set_Decimation>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d003      	beq.n	800bdf6 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x3e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bdee:	f06f 0304 	mvn.w	r3, #4
 800bdf2:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 800bdf4:	e022      	b.n	800be3c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
          ret = BSP_ERROR_NONE;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	617b      	str	r3, [r7, #20]
      break;
 800bdfa:	e01f      	b.n	800be3c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b00      	cmp	r3, #0
 800be04:	d012      	beq.n	800be2c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x74>
        if (LSM6DSL_FIFO_GYRO_Set_Decimation(MotionCompObj[Instance], Decimation) != BSP_ERROR_NONE)
 800be06:	4a10      	ldr	r2, [pc, #64]	; (800be48 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x90>)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be0e:	79fa      	ldrb	r2, [r7, #7]
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f7f7 fe42 	bl	8003a9c <LSM6DSL_FIFO_GYRO_Set_Decimation>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x6e>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800be1e:	f06f 0304 	mvn.w	r3, #4
 800be22:	617b      	str	r3, [r7, #20]
      break;
 800be24:	e00a      	b.n	800be3c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
          ret = BSP_ERROR_NONE;
 800be26:	2300      	movs	r3, #0
 800be28:	617b      	str	r3, [r7, #20]
      break;
 800be2a:	e007      	b.n	800be3c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
        ret = BSP_ERROR_WRONG_PARAM;
 800be2c:	f06f 0301 	mvn.w	r3, #1
 800be30:	617b      	str	r3, [r7, #20]
      break;
 800be32:	e003      	b.n	800be3c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800be34:	f06f 0301 	mvn.w	r3, #1
 800be38:	617b      	str	r3, [r7, #20]
      break;
 800be3a:	bf00      	nop
  }

  return ret;
 800be3c:	697b      	ldr	r3, [r7, #20]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	2000454c 	.word	0x2000454c

0800be4c <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value>:
 * @param  Instance the device instance
 * @param  Odr FIFO ODR value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value(uint32_t Instance, float Odr)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  switch (Instance)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d112      	bne.n	800be84 <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_ODR_Value(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800be5e:	4a0e      	ldr	r2, [pc, #56]	; (800be98 <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x4c>)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be66:	ed97 0a00 	vldr	s0, [r7]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7f7 fc5a 	bl	8003724 <LSM6DSL_FIFO_Set_ODR_Value>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be76:	f06f 0304 	mvn.w	r3, #4
 800be7a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800be7c:	e006      	b.n	800be8c <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x40>
        ret = BSP_ERROR_NONE;
 800be7e:	2300      	movs	r3, #0
 800be80:	60fb      	str	r3, [r7, #12]
      break;
 800be82:	e003      	b.n	800be8c <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800be84:	f06f 0301 	mvn.w	r3, #1
 800be88:	60fb      	str	r3, [r7, #12]
      break;
 800be8a:	bf00      	nop
  }

  return ret;
 800be8c:	68fb      	ldr	r3, [r7, #12]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	2000454c 	.word	0x2000454c

0800be9c <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	460b      	mov	r3, r1
 800bea6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d112      	bne.n	800bed4 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_INT1_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800beae:	4a0e      	ldr	r2, [pc, #56]	; (800bee8 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x4c>)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beb6:	78fa      	ldrb	r2, [r7, #3]
 800beb8:	4611      	mov	r1, r2
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f7 fcbe 	bl	800383c <LSM6DSL_FIFO_Set_INT1_FIFO_Full>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bec6:	f06f 0304 	mvn.w	r3, #4
 800beca:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800becc:	e006      	b.n	800bedc <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
        ret = BSP_ERROR_NONE;
 800bece:	2300      	movs	r3, #0
 800bed0:	60fb      	str	r3, [r7, #12]
      break;
 800bed2:	e003      	b.n	800bedc <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bed4:	f06f 0301 	mvn.w	r3, #1
 800bed8:	60fb      	str	r3, [r7, #12]
      break;
 800beda:	bf00      	nop
  }

  return ret;
 800bedc:	68fb      	ldr	r3, [r7, #12]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	2000454c 	.word	0x2000454c

0800beec <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY>:
 * @param  Instance the device instance
 * @param  Status DRDY interrupt on INT1 pin
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Set_INT1_DRDY(uint32_t Instance, uint8_t Status)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d112      	bne.n	800bf24 <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x38>
  {

    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_ACC_Set_INT1_DRDY(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800befe:	4a0e      	ldr	r2, [pc, #56]	; (800bf38 <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x4c>)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf06:	78fa      	ldrb	r2, [r7, #3]
 800bf08:	4611      	mov	r1, r2
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7f7 fb9c 	bl	8003648 <LSM6DSL_ACC_Set_INT1_DRDY>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf16:	f06f 0304 	mvn.w	r3, #4
 800bf1a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bf1c:	e006      	b.n	800bf2c <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x40>
        ret = BSP_ERROR_NONE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
      break;
 800bf22:	e003      	b.n	800bf2c <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x40>




    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bf24:	f06f 0301 	mvn.w	r3, #1
 800bf28:	60fb      	str	r3, [r7, #12]
      break;
 800bf2a:	bf00      	nop
  }

  return ret;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	2000454c 	.word	0x2000454c

0800bf3c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 * @param  Instance the device instance
 * @param  Watermark FIFO watermark level
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	807b      	strh	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d112      	bne.n	800bf74 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 800bf4e:	4a0e      	ldr	r2, [pc, #56]	; (800bf88 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x4c>)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf56:	887a      	ldrh	r2, [r7, #2]
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f7 fc9f 	bl	800389e <LSM6DSL_FIFO_Set_Watermark_Level>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf66:	f06f 0304 	mvn.w	r3, #4
 800bf6a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bf6c:	e006      	b.n	800bf7c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
        ret = BSP_ERROR_NONE;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	60fb      	str	r3, [r7, #12]
      break;
 800bf72:	e003      	b.n	800bf7c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bf74:	f06f 0301 	mvn.w	r3, #1
 800bf78:	60fb      	str	r3, [r7, #12]
      break;
 800bf7a:	bf00      	nop
  }

  return ret;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	2000454c 	.word	0x2000454c

0800bf8c <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 * @param  Instance the device instance
 * @param  Status FIFO stop on watermark status
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	460b      	mov	r3, r1
 800bf96:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d112      	bne.n	800bfc4 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800bf9e:	4a0e      	ldr	r2, [pc, #56]	; (800bfd8 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x4c>)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfa6:	78fa      	ldrb	r2, [r7, #3]
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7f7 fc8f 	bl	80038ce <LSM6DSL_FIFO_Set_Stop_On_Fth>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d003      	beq.n	800bfbe <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bfb6:	f06f 0304 	mvn.w	r3, #4
 800bfba:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bfbc:	e006      	b.n	800bfcc <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
        ret = BSP_ERROR_NONE;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	60fb      	str	r3, [r7, #12]
      break;
 800bfc2:	e003      	b.n	800bfcc <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bfc4:	f06f 0301 	mvn.w	r3, #1
 800bfc8:	60fb      	str	r3, [r7, #12]
      break;
 800bfca:	bf00      	nop
  }

  return ret;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	2000454c 	.word	0x2000454c

0800bfdc <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d112      	bne.n	800c014 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 800bfee:	4a0e      	ldr	r2, [pc, #56]	; (800c028 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x4c>)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bff6:	78fa      	ldrb	r2, [r7, #3]
 800bff8:	4611      	mov	r1, r2
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7f7 fc7f 	bl	80038fe <LSM6DSL_FIFO_Set_Mode>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c006:	f06f 0304 	mvn.w	r3, #4
 800c00a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800c00c:	e006      	b.n	800c01c <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
        ret = BSP_ERROR_NONE;
 800c00e:	2300      	movs	r3, #0
 800c010:	60fb      	str	r3, [r7, #12]
      break;
 800c012:	e003      	b.n	800c01c <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800c014:	f06f 0301 	mvn.w	r3, #1
 800c018:	60fb      	str	r3, [r7, #12]
      break;
 800c01a:	bf00      	nop
  }

  return ret;
 800c01c:	68fb      	ldr	r3, [r7, #12]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	2000454c 	.word	0x2000454c

0800c02c <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern>:
 * @param  Instance the device instance
 * @param  Pattern FIFO pattern
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern(uint32_t Instance, uint16_t *Pattern)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d111      	bne.n	800c060 <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x34>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Get_Pattern(MotionCompObj[Instance], Pattern) != BSP_ERROR_NONE)
 800c03c:	4a0d      	ldr	r2, [pc, #52]	; (800c074 <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x48>)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	4618      	mov	r0, r3
 800c048:	f7f7 fc92 	bl	8003970 <LSM6DSL_FIFO_Get_Pattern>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c052:	f06f 0304 	mvn.w	r3, #4
 800c056:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800c058:	e006      	b.n	800c068 <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x3c>
        ret = BSP_ERROR_NONE;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60fb      	str	r3, [r7, #12]
      break;
 800c05e:	e003      	b.n	800c068 <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800c060:	f06f 0301 	mvn.w	r3, #1
 800c064:	60fb      	str	r3, [r7, #12]
      break;
 800c066:	bf00      	nop
  }

  return ret;
 800c068:	68fb      	ldr	r3, [r7, #12]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	2000454c 	.word	0x2000454c

0800c078 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis>:
 * @param  Function Motion sensor function
 * @param  Data FIFO single axis data
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Get_Axis(uint32_t Instance, uint32_t Function, int32_t *Data)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch (Instance)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d131      	bne.n	800c0ee <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x76>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	f003 0302 	and.w	r3, r3, #2
 800c090:	2b00      	cmp	r3, #0
 800c092:	d011      	beq.n	800c0b8 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x40>
      {
        if (LSM6DSL_FIFO_ACC_Get_Axis(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 800c094:	4a1a      	ldr	r2, [pc, #104]	; (800c100 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x88>)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f7 fcbc 	bl	8003a1c <LSM6DSL_FIFO_ACC_Get_Axis>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x3a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0aa:	f06f 0304 	mvn.w	r3, #4
 800c0ae:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 800c0b0:	e021      	b.n	800c0f6 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
          ret = BSP_ERROR_NONE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	617b      	str	r3, [r7, #20]
      break;
 800c0b6:	e01e      	b.n	800c0f6 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d011      	beq.n	800c0e6 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x6e>
        if (LSM6DSL_FIFO_GYRO_Get_Axis(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 800c0c2:	4a0f      	ldr	r2, [pc, #60]	; (800c100 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x88>)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f7 fd0d 	bl	8003aec <LSM6DSL_FIFO_GYRO_Get_Axis>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x68>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0d8:	f06f 0304 	mvn.w	r3, #4
 800c0dc:	617b      	str	r3, [r7, #20]
      break;
 800c0de:	e00a      	b.n	800c0f6 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
          ret = BSP_ERROR_NONE;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	617b      	str	r3, [r7, #20]
      break;
 800c0e4:	e007      	b.n	800c0f6 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
        ret = BSP_ERROR_WRONG_PARAM;
 800c0e6:	f06f 0301 	mvn.w	r3, #1
 800c0ea:	617b      	str	r3, [r7, #20]
      break;
 800c0ec:	e003      	b.n	800c0f6 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800c0ee:	f06f 0301 	mvn.w	r3, #1
 800c0f2:	617b      	str	r3, [r7, #20]
      break;
 800c0f4:	bf00      	nop
  }

  return ret;
 800c0f6:	697b      	ldr	r3, [r7, #20]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	2000454c 	.word	0x2000454c

0800c104 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode>:
 * @param  Instance the device instance
 * @param  Status of DRDY mode
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_DRDY_Set_Mode(uint32_t Instance, uint8_t Status)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d112      	bne.n	800c13c <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x38>
  {
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_Set_DRDY_Mode(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800c116:	4a0e      	ldr	r2, [pc, #56]	; (800c150 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x4c>)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c11e:	78fa      	ldrb	r2, [r7, #3]
 800c120:	4611      	mov	r1, r2
 800c122:	4618      	mov	r0, r3
 800c124:	f7f7 fac4 	bl	80036b0 <LSM6DSL_Set_DRDY_Mode>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d003      	beq.n	800c136 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c12e:	f06f 0304 	mvn.w	r3, #4
 800c132:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800c134:	e006      	b.n	800c144 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x40>
        ret = BSP_ERROR_NONE;
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]
      break;
 800c13a:	e003      	b.n	800c144 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x40>



    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800c13c:	f06f 0301 	mvn.w	r3, #1
 800c140:	60fb      	str	r3, [r7, #12]
      break;
 800c142:	bf00      	nop
  }

  return ret;
 800c144:	68fb      	ldr	r3, [r7, #12]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	2000454c 	.word	0x2000454c

0800c154 <arm_sqrt_f32>:
  {
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c15e:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 800c160:	edd7 7a01 	vldr	s15, [r7, #4]
 800c164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c16c:	db0a      	blt.n	800c184 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 800c16e:	ed97 0a01 	vldr	s0, [r7, #4]
 800c172:	f003 fff7 	bl	8010164 <sqrtf>
 800c176:	eef0 7a40 	vmov.f32	s15, s0
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800c180:	2300      	movs	r3, #0
 800c182:	e005      	b.n	800c190 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	f04f 0200 	mov.w	r2, #0
 800c18a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800c18c:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800c190:	4618      	mov	r0, r3
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <MotionSP_speedDelOffset>:
  *  @param  Smooth constant
  *  @param  Restart flag to reInit internal value
  *  @return none
  */
void MotionSP_speedDelOffset(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Smooth, uint8_t Restart)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	70fb      	strb	r3, [r7, #3]
  static SensorVal_f_t DstArrPre;
  static SensorVal_f_t SrcArrPre;

  if (Restart == 1)
 800c1aa:	78fb      	ldrb	r3, [r7, #3]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d124      	bne.n	800c1fa <MotionSP_speedDelOffset+0x62>
  {
    pDstArr->AXIS_X = 0.0;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	601a      	str	r2, [r3, #0]
    pDstArr->AXIS_Y = 0.0;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f04f 0200 	mov.w	r2, #0
 800c1be:	605a      	str	r2, [r3, #4]
    pDstArr->AXIS_Z = 0.0;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f04f 0200 	mov.w	r2, #0
 800c1c6:	609a      	str	r2, [r3, #8]
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a3e      	ldr	r2, [pc, #248]	; (800c2c8 <MotionSP_speedDelOffset+0x130>)
 800c1ce:	6013      	str	r3, [r2, #0]
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	4a3c      	ldr	r2, [pc, #240]	; (800c2c8 <MotionSP_speedDelOffset+0x130>)
 800c1d6:	6053      	str	r3, [r2, #4]
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	4a3a      	ldr	r2, [pc, #232]	; (800c2c8 <MotionSP_speedDelOffset+0x130>)
 800c1de:	6093      	str	r3, [r2, #8]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a39      	ldr	r2, [pc, #228]	; (800c2cc <MotionSP_speedDelOffset+0x134>)
 800c1e6:	6013      	str	r3, [r2, #0]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	4a37      	ldr	r2, [pc, #220]	; (800c2cc <MotionSP_speedDelOffset+0x134>)
 800c1ee:	6053      	str	r3, [r2, #4]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	4a35      	ldr	r2, [pc, #212]	; (800c2cc <MotionSP_speedDelOffset+0x134>)
 800c1f6:	6093      	str	r3, [r2, #8]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
  }
}
 800c1f8:	e05f      	b.n	800c2ba <MotionSP_speedDelOffset+0x122>
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 800c1fa:	4b33      	ldr	r3, [pc, #204]	; (800c2c8 <MotionSP_speedDelOffset+0x130>)
 800c1fc:	ed93 7a00 	vldr	s14, [r3]
 800c200:	edd7 7a01 	vldr	s15, [r7, #4]
 800c204:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	edd3 6a00 	vldr	s13, [r3]
 800c20e:	4b2f      	ldr	r3, [pc, #188]	; (800c2cc <MotionSP_speedDelOffset+0x134>)
 800c210:	edd3 7a00 	vldr	s15, [r3]
 800c214:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c218:	edd7 7a01 	vldr	s15, [r7, #4]
 800c21c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c220:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	edc3 7a00 	vstr	s15, [r3]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800c22a:	4b27      	ldr	r3, [pc, #156]	; (800c2c8 <MotionSP_speedDelOffset+0x130>)
 800c22c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c230:	edd7 7a01 	vldr	s15, [r7, #4]
 800c234:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	edd3 6a01 	vldr	s13, [r3, #4]
 800c23e:	4b23      	ldr	r3, [pc, #140]	; (800c2cc <MotionSP_speedDelOffset+0x134>)
 800c240:	edd3 7a01 	vldr	s15, [r3, #4]
 800c244:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c248:	edd7 7a01 	vldr	s15, [r7, #4]
 800c24c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c250:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	edc3 7a01 	vstr	s15, [r3, #4]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 800c25a:	4b1b      	ldr	r3, [pc, #108]	; (800c2c8 <MotionSP_speedDelOffset+0x130>)
 800c25c:	ed93 7a02 	vldr	s14, [r3, #8]
 800c260:	edd7 7a01 	vldr	s15, [r7, #4]
 800c264:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	edd3 6a02 	vldr	s13, [r3, #8]
 800c26e:	4b17      	ldr	r3, [pc, #92]	; (800c2cc <MotionSP_speedDelOffset+0x134>)
 800c270:	edd3 7a02 	vldr	s15, [r3, #8]
 800c274:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c278:	edd7 7a01 	vldr	s15, [r7, #4]
 800c27c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c280:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	edc3 7a02 	vstr	s15, [r3, #8]
    DstArrPre.AXIS_X = pDstArr->AXIS_X;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a0e      	ldr	r2, [pc, #56]	; (800c2c8 <MotionSP_speedDelOffset+0x130>)
 800c290:	6013      	str	r3, [r2, #0]
    DstArrPre.AXIS_Y = pDstArr->AXIS_Y;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	4a0c      	ldr	r2, [pc, #48]	; (800c2c8 <MotionSP_speedDelOffset+0x130>)
 800c298:	6053      	str	r3, [r2, #4]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	4a0a      	ldr	r2, [pc, #40]	; (800c2c8 <MotionSP_speedDelOffset+0x130>)
 800c2a0:	6093      	str	r3, [r2, #8]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a09      	ldr	r2, [pc, #36]	; (800c2cc <MotionSP_speedDelOffset+0x134>)
 800c2a8:	6013      	str	r3, [r2, #0]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	4a07      	ldr	r2, [pc, #28]	; (800c2cc <MotionSP_speedDelOffset+0x134>)
 800c2b0:	6053      	str	r3, [r2, #4]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	4a05      	ldr	r2, [pc, #20]	; (800c2cc <MotionSP_speedDelOffset+0x134>)
 800c2b8:	6093      	str	r3, [r2, #8]
}
 800c2ba:	bf00      	nop
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	20000398 	.word	0x20000398
 800c2cc:	200003a4 	.word	0x200003a4

0800c2d0 <MotionSP_evalSpeedFromAccelero>:
  *  @return none
  */
void MotionSP_evalSpeedFromAccelero(SensorVal_f_t *pDstArr,
                                           sCircBuffer_t *pSrcArr,
                                           uint8_t Restart)
{
 800c2d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c2d4:	b088      	sub	sp, #32
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	71fb      	strb	r3, [r7, #7]
  uint16_t IndexCurr, IndexPre;
  float DeltaT;
  static SensorVal_f_t DstArrPre;

  DeltaT = AcceleroODR.Period;
 800c2e0:	4b7f      	ldr	r3, [pc, #508]	; (800c4e0 <MotionSP_evalSpeedFromAccelero+0x210>)
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	61bb      	str	r3, [r7, #24]
  IndexCurr = pSrcArr->IdPos;
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	885b      	ldrh	r3, [r3, #2]
 800c2ea:	82fb      	strh	r3, [r7, #22]
  IndexPre  = IndexCurr-1;
 800c2ec:	8afb      	ldrh	r3, [r7, #22]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	83fb      	strh	r3, [r7, #30]

  if (IndexCurr == 0)
 800c2f2:	8afb      	ldrh	r3, [r7, #22]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d103      	bne.n	800c300 <MotionSP_evalSpeedFromAccelero+0x30>
    IndexPre  = pSrcArr->Size-1;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	83fb      	strh	r3, [r7, #30]

  if (Restart == 1)
 800c300:	79fb      	ldrb	r3, [r7, #7]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d10a      	bne.n	800c31c <MotionSP_evalSpeedFromAccelero+0x4c>
  {
    memset((void *)pDstArr, 0, sizeof(SensorVal_f_t));
 800c306:	220c      	movs	r2, #12
 800c308:	2100      	movs	r1, #0
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f001 fb3d 	bl	800d98a <memset>
    memset((void *)&DstArrPre, 0, sizeof(SensorVal_f_t));
 800c310:	220c      	movs	r2, #12
 800c312:	2100      	movs	r1, #0
 800c314:	4873      	ldr	r0, [pc, #460]	; (800c4e4 <MotionSP_evalSpeedFromAccelero+0x214>)
 800c316:	f001 fb38 	bl	800d98a <memset>
    pDstArr->AXIS_Z = DstArrPre.AXIS_Z +
                                  (((0.5)*DeltaT*100000)*((pSrcArr->Data.AXIS_Z[IndexPre])+(pSrcArr->Data.AXIS_Z[IndexCurr])));

    memcpy((void *)&DstArrPre, (void *)pDstArr, sizeof(SensorVal_f_t));
  }
}
 800c31a:	e0d7      	b.n	800c4cc <MotionSP_evalSpeedFromAccelero+0x1fc>
    pDstArr->AXIS_X = DstArrPre.AXIS_X +
 800c31c:	4b71      	ldr	r3, [pc, #452]	; (800c4e4 <MotionSP_evalSpeedFromAccelero+0x214>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4618      	mov	r0, r3
 800c322:	f7f4 f971 	bl	8000608 <__aeabi_f2d>
 800c326:	4604      	mov	r4, r0
 800c328:	460d      	mov	r5, r1
                          (((0.5)*DeltaT*100000)*((pSrcArr->Data.AXIS_X[IndexPre])+(pSrcArr->Data.AXIS_X[IndexCurr])));
 800c32a:	69b8      	ldr	r0, [r7, #24]
 800c32c:	f7f4 f96c 	bl	8000608 <__aeabi_f2d>
 800c330:	f04f 0200 	mov.w	r2, #0
 800c334:	4b6c      	ldr	r3, [pc, #432]	; (800c4e8 <MotionSP_evalSpeedFromAccelero+0x218>)
 800c336:	f7f4 f9bf 	bl	80006b8 <__aeabi_dmul>
 800c33a:	4602      	mov	r2, r0
 800c33c:	460b      	mov	r3, r1
 800c33e:	4610      	mov	r0, r2
 800c340:	4619      	mov	r1, r3
 800c342:	a365      	add	r3, pc, #404	; (adr r3, 800c4d8 <MotionSP_evalSpeedFromAccelero+0x208>)
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f7f4 f9b6 	bl	80006b8 <__aeabi_dmul>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	4690      	mov	r8, r2
 800c352:	4699      	mov	r9, r3
 800c354:	8bfb      	ldrh	r3, [r7, #30]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	3302      	adds	r3, #2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4413      	add	r3, r2
 800c35e:	ed93 7a00 	vldr	s14, [r3]
 800c362:	8afb      	ldrh	r3, [r7, #22]
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	3302      	adds	r3, #2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	edd3 7a00 	vldr	s15, [r3]
 800c370:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c374:	ee17 0a90 	vmov	r0, s15
 800c378:	f7f4 f946 	bl	8000608 <__aeabi_f2d>
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4640      	mov	r0, r8
 800c382:	4649      	mov	r1, r9
 800c384:	f7f4 f998 	bl	80006b8 <__aeabi_dmul>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
    pDstArr->AXIS_X = DstArrPre.AXIS_X +
 800c38c:	4620      	mov	r0, r4
 800c38e:	4629      	mov	r1, r5
 800c390:	f7f3 ffdc 	bl	800034c <__adddf3>
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	4610      	mov	r0, r2
 800c39a:	4619      	mov	r1, r3
 800c39c:	f7f4 fc64 	bl	8000c68 <__aeabi_d2f>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	601a      	str	r2, [r3, #0]
    pDstArr->AXIS_Y = DstArrPre.AXIS_Y +
 800c3a6:	4b4f      	ldr	r3, [pc, #316]	; (800c4e4 <MotionSP_evalSpeedFromAccelero+0x214>)
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7f4 f92c 	bl	8000608 <__aeabi_f2d>
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	460d      	mov	r5, r1
                              (((0.5)*DeltaT*100000)*((pSrcArr->Data.AXIS_Y[IndexPre])+(pSrcArr->Data.AXIS_Y[IndexCurr])));
 800c3b4:	69b8      	ldr	r0, [r7, #24]
 800c3b6:	f7f4 f927 	bl	8000608 <__aeabi_f2d>
 800c3ba:	f04f 0200 	mov.w	r2, #0
 800c3be:	4b4a      	ldr	r3, [pc, #296]	; (800c4e8 <MotionSP_evalSpeedFromAccelero+0x218>)
 800c3c0:	f7f4 f97a 	bl	80006b8 <__aeabi_dmul>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	a342      	add	r3, pc, #264	; (adr r3, 800c4d8 <MotionSP_evalSpeedFromAccelero+0x208>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f4 f971 	bl	80006b8 <__aeabi_dmul>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4690      	mov	r8, r2
 800c3dc:	4699      	mov	r9, r3
 800c3de:	8bfb      	ldrh	r3, [r7, #30]
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	ed93 7a00 	vldr	s14, [r3]
 800c3ee:	8afb      	ldrh	r3, [r7, #22]
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	4413      	add	r3, r2
 800c3fa:	edd3 7a00 	vldr	s15, [r3]
 800c3fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c402:	ee17 0a90 	vmov	r0, s15
 800c406:	f7f4 f8ff 	bl	8000608 <__aeabi_f2d>
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	4640      	mov	r0, r8
 800c410:	4649      	mov	r1, r9
 800c412:	f7f4 f951 	bl	80006b8 <__aeabi_dmul>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
    pDstArr->AXIS_Y = DstArrPre.AXIS_Y +
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f3 ff95 	bl	800034c <__adddf3>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4610      	mov	r0, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	f7f4 fc1d 	bl	8000c68 <__aeabi_d2f>
 800c42e:	4602      	mov	r2, r0
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	605a      	str	r2, [r3, #4]
    pDstArr->AXIS_Z = DstArrPre.AXIS_Z +
 800c434:	4b2b      	ldr	r3, [pc, #172]	; (800c4e4 <MotionSP_evalSpeedFromAccelero+0x214>)
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7f4 f8e5 	bl	8000608 <__aeabi_f2d>
 800c43e:	4604      	mov	r4, r0
 800c440:	460d      	mov	r5, r1
                                  (((0.5)*DeltaT*100000)*((pSrcArr->Data.AXIS_Z[IndexPre])+(pSrcArr->Data.AXIS_Z[IndexCurr])));
 800c442:	69b8      	ldr	r0, [r7, #24]
 800c444:	f7f4 f8e0 	bl	8000608 <__aeabi_f2d>
 800c448:	f04f 0200 	mov.w	r2, #0
 800c44c:	4b26      	ldr	r3, [pc, #152]	; (800c4e8 <MotionSP_evalSpeedFromAccelero+0x218>)
 800c44e:	f7f4 f933 	bl	80006b8 <__aeabi_dmul>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4610      	mov	r0, r2
 800c458:	4619      	mov	r1, r3
 800c45a:	a31f      	add	r3, pc, #124	; (adr r3, 800c4d8 <MotionSP_evalSpeedFromAccelero+0x208>)
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	f7f4 f92a 	bl	80006b8 <__aeabi_dmul>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	4690      	mov	r8, r2
 800c46a:	4699      	mov	r9, r3
 800c46c:	8bfb      	ldrh	r3, [r7, #30]
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	ed93 7a00 	vldr	s14, [r3]
 800c47c:	8afb      	ldrh	r3, [r7, #22]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4413      	add	r3, r2
 800c488:	edd3 7a00 	vldr	s15, [r3]
 800c48c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c490:	ee17 0a90 	vmov	r0, s15
 800c494:	f7f4 f8b8 	bl	8000608 <__aeabi_f2d>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	4640      	mov	r0, r8
 800c49e:	4649      	mov	r1, r9
 800c4a0:	f7f4 f90a 	bl	80006b8 <__aeabi_dmul>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
    pDstArr->AXIS_Z = DstArrPre.AXIS_Z +
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	f7f3 ff4e 	bl	800034c <__adddf3>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	f7f4 fbd6 	bl	8000c68 <__aeabi_d2f>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	609a      	str	r2, [r3, #8]
    memcpy((void *)&DstArrPre, (void *)pDstArr, sizeof(SensorVal_f_t));
 800c4c2:	220c      	movs	r2, #12
 800c4c4:	68f9      	ldr	r1, [r7, #12]
 800c4c6:	4807      	ldr	r0, [pc, #28]	; (800c4e4 <MotionSP_evalSpeedFromAccelero+0x214>)
 800c4c8:	f001 fa51 	bl	800d96e <memcpy>
}
 800c4cc:	bf00      	nop
 800c4ce:	3720      	adds	r7, #32
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c4d6:	bf00      	nop
 800c4d8:	00000000 	.word	0x00000000
 800c4dc:	40f86a00 	.word	0x40f86a00
 800c4e0:	20008a9c 	.word	0x20008a9c
 800c4e4:	200003b0 	.word	0x200003b0
 800c4e8:	3fe00000 	.word	0x3fe00000

0800c4ec <MotionSP_SwSpeedRmsFilter>:
  *
  * @details More details
  * Reference by MATLAB DSP Toolbox modified with Y(n-1)^2
  */
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08a      	sub	sp, #40	; 0x28
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	ed87 0a01 	vstr	s0, [r7, #4]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	70fb      	strb	r3, [r7, #3]
  SensorVal_f_t SquareData = {0, 0, 0};
 800c4fe:	f04f 0300 	mov.w	r3, #0
 800c502:	61fb      	str	r3, [r7, #28]
 800c504:	f04f 0300 	mov.w	r3, #0
 800c508:	623b      	str	r3, [r7, #32]
 800c50a:	f04f 0300 	mov.w	r3, #0
 800c50e:	627b      	str	r3, [r7, #36]	; 0x24
  SensorVal_f_t PrevSquareData  = {0, 0, 0};
 800c510:	f04f 0300 	mov.w	r3, #0
 800c514:	613b      	str	r3, [r7, #16]
 800c516:	f04f 0300 	mov.w	r3, #0
 800c51a:	617b      	str	r3, [r7, #20]
 800c51c:	f04f 0300 	mov.w	r3, #0
 800c520:	61bb      	str	r3, [r7, #24]
  static float WN = 0.0;
  static float WN_1 = 0.0;

  if (start == 1)
 800c522:	78fb      	ldrb	r3, [r7, #3]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d110      	bne.n	800c54a <MotionSP_SwSpeedRmsFilter+0x5e>
  {
    pDstArr->AXIS_X = pSrcArr->AXIS_X;
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	601a      	str	r2, [r3, #0]
    pDstArr->AXIS_Y = pSrcArr->AXIS_Y;
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	685a      	ldr	r2, [r3, #4]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	605a      	str	r2, [r3, #4]
    pDstArr->AXIS_Z = pSrcArr->AXIS_Z;
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	689a      	ldr	r2, [r3, #8]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	609a      	str	r2, [r3, #8]
    WN = 1;
 800c540:	4b5f      	ldr	r3, [pc, #380]	; (800c6c0 <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c542:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c546:	601a      	str	r2, [r3, #0]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);

    WN_1 =  WN;
    WN =  Lambda * WN_1 + 1;
  }
}
 800c548:	e0b5      	b.n	800c6b6 <MotionSP_SwSpeedRmsFilter+0x1ca>
    SquareData.AXIS_X = pSrcArr->AXIS_X * pSrcArr->AXIS_X;
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	ed93 7a00 	vldr	s14, [r3]
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	edd3 7a00 	vldr	s15, [r3]
 800c556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c55a:	edc7 7a07 	vstr	s15, [r7, #28]
    SquareData.AXIS_Y = pSrcArr->AXIS_Y * pSrcArr->AXIS_Y;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	ed93 7a01 	vldr	s14, [r3, #4]
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	edd3 7a01 	vldr	s15, [r3, #4]
 800c56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c56e:	edc7 7a08 	vstr	s15, [r7, #32]
    SquareData.AXIS_Z = pSrcArr->AXIS_Z * pSrcArr->AXIS_Z;
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	ed93 7a02 	vldr	s14, [r3, #8]
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c582:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	ed93 7a00 	vldr	s14, [r3]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	edd3 7a00 	vldr	s15, [r3]
 800c592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c596:	edc7 7a04 	vstr	s15, [r7, #16]
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	edd3 7a01 	vldr	s15, [r3, #4]
 800c5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5aa:	edc7 7a05 	vstr	s15, [r7, #20]
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	ed93 7a02 	vldr	s14, [r3, #8]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	edd3 7a02 	vldr	s15, [r3, #8]
 800c5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5be:	edc7 7a06 	vstr	s15, [r7, #24]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800c5c2:	4b3f      	ldr	r3, [pc, #252]	; (800c6c0 <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c5c4:	ed93 7a00 	vldr	s14, [r3]
 800c5c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c5d8:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5e0:	4b37      	ldr	r3, [pc, #220]	; (800c6c0 <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c5e2:	edd3 7a00 	vldr	s15, [r3]
 800c5e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c5ea:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c5ee:	edd7 7a07 	vldr	s15, [r7, #28]
 800c5f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	eeb0 0a67 	vmov.f32	s0, s15
 800c602:	f7ff fda7 	bl	800c154 <arm_sqrt_f32>
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Y + (1 / WN) * SquareData.AXIS_Y), &pDstArr->AXIS_Y);
 800c606:	4b2e      	ldr	r3, [pc, #184]	; (800c6c0 <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c608:	ed93 7a00 	vldr	s14, [r3]
 800c60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c61c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c620:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c624:	4b26      	ldr	r3, [pc, #152]	; (800c6c0 <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c626:	edd3 7a00 	vldr	s15, [r3]
 800c62a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c62e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c632:	edd7 7a08 	vldr	s15, [r7, #32]
 800c636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c63a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3304      	adds	r3, #4
 800c642:	4618      	mov	r0, r3
 800c644:	eeb0 0a67 	vmov.f32	s0, s15
 800c648:	f7ff fd84 	bl	800c154 <arm_sqrt_f32>
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);
 800c64c:	4b1c      	ldr	r3, [pc, #112]	; (800c6c0 <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c64e:	ed93 7a00 	vldr	s14, [r3]
 800c652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c65a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c65e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c662:	edd7 7a06 	vldr	s15, [r7, #24]
 800c666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c66a:	4b15      	ldr	r3, [pc, #84]	; (800c6c0 <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c66c:	edd3 7a00 	vldr	s15, [r3]
 800c670:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c674:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c678:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c67c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c680:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	3308      	adds	r3, #8
 800c688:	4618      	mov	r0, r3
 800c68a:	eeb0 0a67 	vmov.f32	s0, s15
 800c68e:	f7ff fd61 	bl	800c154 <arm_sqrt_f32>
    WN_1 =  WN;
 800c692:	4b0b      	ldr	r3, [pc, #44]	; (800c6c0 <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a0b      	ldr	r2, [pc, #44]	; (800c6c4 <MotionSP_SwSpeedRmsFilter+0x1d8>)
 800c698:	6013      	str	r3, [r2, #0]
    WN =  Lambda * WN_1 + 1;
 800c69a:	4b0a      	ldr	r3, [pc, #40]	; (800c6c4 <MotionSP_SwSpeedRmsFilter+0x1d8>)
 800c69c:	ed93 7a00 	vldr	s14, [r3]
 800c6a0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c6a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6b0:	4b03      	ldr	r3, [pc, #12]	; (800c6c0 <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c6b2:	edc3 7a00 	vstr	s15, [r3]
}
 800c6b6:	bf00      	nop
 800c6b8:	3728      	adds	r7, #40	; 0x28
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	200003bc 	.word	0x200003bc
 800c6c4:	200003c0 	.word	0x200003c0

0800c6c8 <MotionSP_SwAccRmsFilter>:
  * @param  Lambda fast smoothing factor
  * @param  start flag to Re-Init first value
  * @return none
  */
static void MotionSP_SwAccRmsFilter(SensorVal_f_t *pDstArr, sCircBuffer_t *pSrcArr, float Lambda, uint8_t start)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08c      	sub	sp, #48	; 0x30
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	70fb      	strb	r3, [r7, #3]
  uint16_t Index = 0;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  SensorVal_f_t SquareData = {0, 0, 0};
 800c6de:	f04f 0300 	mov.w	r3, #0
 800c6e2:	623b      	str	r3, [r7, #32]
 800c6e4:	f04f 0300 	mov.w	r3, #0
 800c6e8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ea:	f04f 0300 	mov.w	r3, #0
 800c6ee:	62bb      	str	r3, [r7, #40]	; 0x28
  SensorVal_f_t PrevSquareData  = {0, 0, 0};
 800c6f0:	f04f 0300 	mov.w	r3, #0
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	f04f 0300 	mov.w	r3, #0
 800c6fa:	61bb      	str	r3, [r7, #24]
 800c6fc:	f04f 0300 	mov.w	r3, #0
 800c700:	61fb      	str	r3, [r7, #28]
  static float WN = 0.0;
  static float WN_1 = 0.0;

  Index = pSrcArr->IdPos;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	885b      	ldrh	r3, [r3, #2]
 800c706:	85fb      	strh	r3, [r7, #46]	; 0x2e

  if (start == 1)
 800c708:	78fb      	ldrb	r3, [r7, #3]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d11e      	bne.n	800c74c <MotionSP_SwAccRmsFilter+0x84>
  {
    pDstArr->AXIS_X = pSrcArr->Data.AXIS_X[Index];
 800c70e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	3302      	adds	r3, #2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	601a      	str	r2, [r3, #0]
    pDstArr->AXIS_Y = pSrcArr->Data.AXIS_Y[Index];
 800c71e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	4413      	add	r3, r2
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	605a      	str	r2, [r3, #4]
    pDstArr->AXIS_Z = pSrcArr->Data.AXIS_Z[Index];
 800c730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	4413      	add	r3, r2
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	609a      	str	r2, [r3, #8]
    WN = 1;
 800c742:	4b6d      	ldr	r3, [pc, #436]	; (800c8f8 <MotionSP_SwAccRmsFilter+0x230>)
 800c744:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c748:	601a      	str	r2, [r3, #0]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);

    WN_1 =  WN;
    WN =  Lambda * WN_1 + 1;
  }
}
 800c74a:	e0d1      	b.n	800c8f0 <MotionSP_SwAccRmsFilter+0x228>
    SquareData.AXIS_X = pSrcArr->Data.AXIS_X[Index] * pSrcArr->Data.AXIS_X[Index];
 800c74c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	3302      	adds	r3, #2
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	4413      	add	r3, r2
 800c756:	ed93 7a00 	vldr	s14, [r3]
 800c75a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	3302      	adds	r3, #2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4413      	add	r3, r2
 800c764:	edd3 7a00 	vldr	s15, [r3]
 800c768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c76c:	edc7 7a08 	vstr	s15, [r7, #32]
    SquareData.AXIS_Y = pSrcArr->Data.AXIS_Y[Index] * pSrcArr->Data.AXIS_Y[Index];;
 800c770:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	ed93 7a00 	vldr	s14, [r3]
 800c780:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	4413      	add	r3, r2
 800c78c:	edd3 7a00 	vldr	s15, [r3]
 800c790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c794:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    SquareData.AXIS_Z = pSrcArr->Data.AXIS_Z[Index] * pSrcArr->Data.AXIS_Z[Index];;
 800c798:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c79a:	68ba      	ldr	r2, [r7, #8]
 800c79c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	4413      	add	r3, r2
 800c7a4:	ed93 7a00 	vldr	s14, [r3]
 800c7a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4413      	add	r3, r2
 800c7b4:	edd3 7a00 	vldr	s15, [r3]
 800c7b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7bc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	ed93 7a00 	vldr	s14, [r3]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	edd3 7a00 	vldr	s15, [r3]
 800c7cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d0:	edc7 7a05 	vstr	s15, [r7, #20]
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	edd3 7a01 	vldr	s15, [r3, #4]
 800c7e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7e4:	edc7 7a06 	vstr	s15, [r7, #24]
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	ed93 7a02 	vldr	s14, [r3, #8]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	edd3 7a02 	vldr	s15, [r3, #8]
 800c7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f8:	edc7 7a07 	vstr	s15, [r7, #28]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800c7fc:	4b3e      	ldr	r3, [pc, #248]	; (800c8f8 <MotionSP_SwAccRmsFilter+0x230>)
 800c7fe:	ed93 7a00 	vldr	s14, [r3]
 800c802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c80a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c80e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c812:	edd7 7a05 	vldr	s15, [r7, #20]
 800c816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c81a:	4b37      	ldr	r3, [pc, #220]	; (800c8f8 <MotionSP_SwAccRmsFilter+0x230>)
 800c81c:	edd3 7a00 	vldr	s15, [r3]
 800c820:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c824:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c828:	edd7 7a08 	vldr	s15, [r7, #32]
 800c82c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c830:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4618      	mov	r0, r3
 800c838:	eeb0 0a67 	vmov.f32	s0, s15
 800c83c:	f7ff fc8a 	bl	800c154 <arm_sqrt_f32>
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Y + (1 / WN) * SquareData.AXIS_Y), &pDstArr->AXIS_Y);
 800c840:	4b2d      	ldr	r3, [pc, #180]	; (800c8f8 <MotionSP_SwAccRmsFilter+0x230>)
 800c842:	ed93 7a00 	vldr	s14, [r3]
 800c846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c84a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c84e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c852:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c856:	edd7 7a06 	vldr	s15, [r7, #24]
 800c85a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c85e:	4b26      	ldr	r3, [pc, #152]	; (800c8f8 <MotionSP_SwAccRmsFilter+0x230>)
 800c860:	edd3 7a00 	vldr	s15, [r3]
 800c864:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c868:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c86c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c874:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3304      	adds	r3, #4
 800c87c:	4618      	mov	r0, r3
 800c87e:	eeb0 0a67 	vmov.f32	s0, s15
 800c882:	f7ff fc67 	bl	800c154 <arm_sqrt_f32>
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);
 800c886:	4b1c      	ldr	r3, [pc, #112]	; (800c8f8 <MotionSP_SwAccRmsFilter+0x230>)
 800c888:	ed93 7a00 	vldr	s14, [r3]
 800c88c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c89c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c8a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8a4:	4b14      	ldr	r3, [pc, #80]	; (800c8f8 <MotionSP_SwAccRmsFilter+0x230>)
 800c8a6:	edd3 7a00 	vldr	s15, [r3]
 800c8aa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c8ae:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c8b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3308      	adds	r3, #8
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	eeb0 0a67 	vmov.f32	s0, s15
 800c8c8:	f7ff fc44 	bl	800c154 <arm_sqrt_f32>
    WN_1 =  WN;
 800c8cc:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <MotionSP_SwAccRmsFilter+0x230>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a0a      	ldr	r2, [pc, #40]	; (800c8fc <MotionSP_SwAccRmsFilter+0x234>)
 800c8d2:	6013      	str	r3, [r2, #0]
    WN =  Lambda * WN_1 + 1;
 800c8d4:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <MotionSP_SwAccRmsFilter+0x234>)
 800c8d6:	ed93 7a00 	vldr	s14, [r3]
 800c8da:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8ea:	4b03      	ldr	r3, [pc, #12]	; (800c8f8 <MotionSP_SwAccRmsFilter+0x230>)
 800c8ec:	edc3 7a00 	vstr	s15, [r3]
}
 800c8f0:	bf00      	nop
 800c8f2:	3730      	adds	r7, #48	; 0x30
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	200003c4 	.word	0x200003c4
 800c8fc:	200003c8 	.word	0x200003c8

0800c900 <MotionSP_SwAccPkEval>:
  * @param  pDstArr pointer to AccPeak Output
  * @param  pSrcArr pointer to input accelero circular buffer
  * @return none
  */
static void MotionSP_SwAccPkEval(SensorVal_f_t *pDstArr, sCircBuffer_t *pSrcArr)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  uint16_t Index = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	81fb      	strh	r3, [r7, #14]

  Index = pSrcArr->IdPos;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	885b      	ldrh	r3, [r3, #2]
 800c912:	81fb      	strh	r3, [r7, #14]

  if (pDstArr->AXIS_X < fabsf(pSrcArr->Data.AXIS_X[Index]))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	ed93 7a00 	vldr	s14, [r3]
 800c91a:	89fb      	ldrh	r3, [r7, #14]
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	3302      	adds	r3, #2
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	4413      	add	r3, r2
 800c924:	edd3 7a00 	vldr	s15, [r3]
 800c928:	eef0 7ae7 	vabs.f32	s15, s15
 800c92c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c934:	d50b      	bpl.n	800c94e <MotionSP_SwAccPkEval+0x4e>
  {
    pDstArr->AXIS_X = fabsf(pSrcArr->Data.AXIS_X[Index]);
 800c936:	89fb      	ldrh	r3, [r7, #14]
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	3302      	adds	r3, #2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	edd3 7a00 	vldr	s15, [r3]
 800c944:	eef0 7ae7 	vabs.f32	s15, s15
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	edc3 7a00 	vstr	s15, [r3]
  }
  if (pDstArr->AXIS_Y < fabsf(pSrcArr->Data.AXIS_Y[Index]))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	ed93 7a01 	vldr	s14, [r3, #4]
 800c954:	89fb      	ldrh	r3, [r7, #14]
 800c956:	683a      	ldr	r2, [r7, #0]
 800c958:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	4413      	add	r3, r2
 800c960:	edd3 7a00 	vldr	s15, [r3]
 800c964:	eef0 7ae7 	vabs.f32	s15, s15
 800c968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c970:	d50c      	bpl.n	800c98c <MotionSP_SwAccPkEval+0x8c>
  {
    pDstArr->AXIS_Y = fabsf(pSrcArr->Data.AXIS_Y[Index]);
 800c972:	89fb      	ldrh	r3, [r7, #14]
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4413      	add	r3, r2
 800c97e:	edd3 7a00 	vldr	s15, [r3]
 800c982:	eef0 7ae7 	vabs.f32	s15, s15
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	edc3 7a01 	vstr	s15, [r3, #4]
  }
  if (pDstArr->AXIS_Z < fabsf(pSrcArr->Data.AXIS_Z[Index]))
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	ed93 7a02 	vldr	s14, [r3, #8]
 800c992:	89fb      	ldrh	r3, [r7, #14]
 800c994:	683a      	ldr	r2, [r7, #0]
 800c996:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4413      	add	r3, r2
 800c99e:	edd3 7a00 	vldr	s15, [r3]
 800c9a2:	eef0 7ae7 	vabs.f32	s15, s15
 800c9a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ae:	d400      	bmi.n	800c9b2 <MotionSP_SwAccPkEval+0xb2>
  {
    pDstArr->AXIS_Z = fabsf(pSrcArr->Data.AXIS_Z[Index]);
  }
}
 800c9b0:	e00c      	b.n	800c9cc <MotionSP_SwAccPkEval+0xcc>
    pDstArr->AXIS_Z = fabsf(pSrcArr->Data.AXIS_Z[Index]);
 800c9b2:	89fb      	ldrh	r3, [r7, #14]
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	edd3 7a00 	vldr	s15, [r3]
 800c9c2:	eef0 7ae7 	vabs.f32	s15, s15
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800c9cc:	bf00      	nop
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <MotionSP_accDelOffset>:
  *  @param pSrcArr: pointer to Accelero Array with offset
  *  @param Smooth: smoothing factor
  *  @param Restart: flag to Re-Init internal value
  */
void MotionSP_accDelOffset(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Smooth, uint16_t Restart)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	807b      	strh	r3, [r7, #2]
  static SensorVal_f_t DstArrPre;
  static SensorVal_f_t SrcArrPre;

  if (Restart == 1)
 800c9ea:	887b      	ldrh	r3, [r7, #2]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d124      	bne.n	800ca3a <MotionSP_accDelOffset+0x62>
  {
    pDstArr->AXIS_X = 0.0;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f04f 0200 	mov.w	r2, #0
 800c9f6:	601a      	str	r2, [r3, #0]
    pDstArr->AXIS_Y = 0.0;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f04f 0200 	mov.w	r2, #0
 800c9fe:	605a      	str	r2, [r3, #4]
    pDstArr->AXIS_Z = 0.0;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f04f 0200 	mov.w	r2, #0
 800ca06:	609a      	str	r2, [r3, #8]
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a3e      	ldr	r2, [pc, #248]	; (800cb08 <MotionSP_accDelOffset+0x130>)
 800ca0e:	6013      	str	r3, [r2, #0]
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	4a3c      	ldr	r2, [pc, #240]	; (800cb08 <MotionSP_accDelOffset+0x130>)
 800ca16:	6053      	str	r3, [r2, #4]
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	4a3a      	ldr	r2, [pc, #232]	; (800cb08 <MotionSP_accDelOffset+0x130>)
 800ca1e:	6093      	str	r3, [r2, #8]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a39      	ldr	r2, [pc, #228]	; (800cb0c <MotionSP_accDelOffset+0x134>)
 800ca26:	6013      	str	r3, [r2, #0]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	4a37      	ldr	r2, [pc, #220]	; (800cb0c <MotionSP_accDelOffset+0x134>)
 800ca2e:	6053      	str	r3, [r2, #4]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	4a35      	ldr	r2, [pc, #212]	; (800cb0c <MotionSP_accDelOffset+0x134>)
 800ca36:	6093      	str	r3, [r2, #8]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
  }
}
 800ca38:	e05f      	b.n	800cafa <MotionSP_accDelOffset+0x122>
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 800ca3a:	4b33      	ldr	r3, [pc, #204]	; (800cb08 <MotionSP_accDelOffset+0x130>)
 800ca3c:	ed93 7a00 	vldr	s14, [r3]
 800ca40:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	edd3 6a00 	vldr	s13, [r3]
 800ca4e:	4b2f      	ldr	r3, [pc, #188]	; (800cb0c <MotionSP_accDelOffset+0x134>)
 800ca50:	edd3 7a00 	vldr	s15, [r3]
 800ca54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ca58:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	edc3 7a00 	vstr	s15, [r3]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800ca6a:	4b27      	ldr	r3, [pc, #156]	; (800cb08 <MotionSP_accDelOffset+0x130>)
 800ca6c:	ed93 7a01 	vldr	s14, [r3, #4]
 800ca70:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	edd3 6a01 	vldr	s13, [r3, #4]
 800ca7e:	4b23      	ldr	r3, [pc, #140]	; (800cb0c <MotionSP_accDelOffset+0x134>)
 800ca80:	edd3 7a01 	vldr	s15, [r3, #4]
 800ca84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ca88:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	edc3 7a01 	vstr	s15, [r3, #4]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 800ca9a:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <MotionSP_accDelOffset+0x130>)
 800ca9c:	ed93 7a02 	vldr	s14, [r3, #8]
 800caa0:	edd7 7a01 	vldr	s15, [r7, #4]
 800caa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	edd3 6a02 	vldr	s13, [r3, #8]
 800caae:	4b17      	ldr	r3, [pc, #92]	; (800cb0c <MotionSP_accDelOffset+0x134>)
 800cab0:	edd3 7a02 	vldr	s15, [r3, #8]
 800cab4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cab8:	edd7 7a01 	vldr	s15, [r7, #4]
 800cabc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	edc3 7a02 	vstr	s15, [r3, #8]
    DstArrPre.AXIS_X = pDstArr->AXIS_X;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a0e      	ldr	r2, [pc, #56]	; (800cb08 <MotionSP_accDelOffset+0x130>)
 800cad0:	6013      	str	r3, [r2, #0]
    DstArrPre.AXIS_Y = pDstArr->AXIS_Y;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	4a0c      	ldr	r2, [pc, #48]	; (800cb08 <MotionSP_accDelOffset+0x130>)
 800cad8:	6053      	str	r3, [r2, #4]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	4a0a      	ldr	r2, [pc, #40]	; (800cb08 <MotionSP_accDelOffset+0x130>)
 800cae0:	6093      	str	r3, [r2, #8]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a09      	ldr	r2, [pc, #36]	; (800cb0c <MotionSP_accDelOffset+0x134>)
 800cae8:	6013      	str	r3, [r2, #0]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	4a07      	ldr	r2, [pc, #28]	; (800cb0c <MotionSP_accDelOffset+0x134>)
 800caf0:	6053      	str	r3, [r2, #4]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	4a05      	ldr	r2, [pc, #20]	; (800cb0c <MotionSP_accDelOffset+0x134>)
 800caf8:	6093      	str	r3, [r2, #8]
}
 800cafa:	bf00      	nop
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	200003cc 	.word	0x200003cc
 800cb0c:	200003d8 	.word	0x200003d8

0800cb10 <MotionSP_CreateAccCircBuffer>:
  *  @param buffType Description for buffType
  *  @return Return description
  *
  */
void MotionSP_CreateAccCircBuffer(sCircBuffer_t *pCircBuff, SensorVal_f_t buffType)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	eef0 6a40 	vmov.f32	s13, s0
 800cb1c:	eeb0 7a60 	vmov.f32	s14, s1
 800cb20:	eef0 7a41 	vmov.f32	s15, s2
 800cb24:	edc7 6a00 	vstr	s13, [r7]
 800cb28:	ed87 7a01 	vstr	s14, [r7, #4]
 800cb2c:	edc7 7a02 	vstr	s15, [r7, #8]
  pCircBuff->IdPos += 1;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	885b      	ldrh	r3, [r3, #2]
 800cb34:	3301      	adds	r3, #1
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	805a      	strh	r2, [r3, #2]

  if (pCircBuff->IdPos == pCircBuff->Size)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	885a      	ldrh	r2, [r3, #2]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	881b      	ldrh	r3, [r3, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d105      	bne.n	800cb54 <MotionSP_CreateAccCircBuffer+0x44>
  {
    pCircBuff->IdPos = 0;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	805a      	strh	r2, [r3, #2]
    pCircBuff->Ovf = 1;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2201      	movs	r2, #1
 800cb52:	711a      	strb	r2, [r3, #4]
  }

  pCircBuff->Data.AXIS_X[pCircBuff->IdPos] = buffType.AXIS_X*G_CONV;
 800cb54:	edd7 7a00 	vldr	s15, [r7]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	885b      	ldrh	r3, [r3, #2]
 800cb5c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800cbb8 <MotionSP_CreateAccCircBuffer+0xa8>
 800cb60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	3302      	adds	r3, #2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	edc3 7a00 	vstr	s15, [r3]
  pCircBuff->Data.AXIS_Y[pCircBuff->IdPos] = buffType.AXIS_Y*G_CONV;
 800cb70:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	885b      	ldrh	r3, [r3, #2]
 800cb78:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800cbb8 <MotionSP_CreateAccCircBuffer+0xa8>
 800cb7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	f203 2302 	addw	r3, r3, #514	; 0x202
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	edc3 7a00 	vstr	s15, [r3]
  pCircBuff->Data.AXIS_Z[pCircBuff->IdPos] = buffType.AXIS_Z*G_CONV;
 800cb8e:	edd7 7a02 	vldr	s15, [r7, #8]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	885b      	ldrh	r3, [r3, #2]
 800cb96:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800cbb8 <MotionSP_CreateAccCircBuffer+0xa8>
 800cb9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	edc3 7a00 	vstr	s15, [r3]
}
 800cbac:	bf00      	nop
 800cbae:	3714      	adds	r7, #20
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr
 800cbb8:	3c20ac12 	.word	0x3c20ac12

0800cbbc <MotionSP_TimeDomainProcess>:
  * @param td_type Time domain analysis type
  * @param Restart Flag
  * @return none
  */
void MotionSP_TimeDomainProcess(sAcceleroParam_t *pTimeDomain, Td_Type_t td_type, uint8_t Restart)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	70fb      	strb	r3, [r7, #3]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	70bb      	strb	r3, [r7, #2]
  MotionSP_SwAccPkEval(&pTimeDomain->AccPeak, &AccCircBuffer);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3318      	adds	r3, #24
 800cbd0:	492c      	ldr	r1, [pc, #176]	; (800cc84 <MotionSP_TimeDomainProcess+0xc8>)
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7ff fe94 	bl	800c900 <MotionSP_SwAccPkEval>

  if (td_type == TD_SPEED)
 800cbd8:	78fb      	ldrb	r3, [r7, #3]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d118      	bne.n	800cc10 <MotionSP_TimeDomainProcess+0x54>
  {
    /* TIME DOMAIN ANALYSIS: Speed RMS Moving AVERAGE */
    MotionSP_evalSpeedFromAccelero(&SpeedTimeDomain, &AccCircBuffer, Restart);
 800cbde:	78bb      	ldrb	r3, [r7, #2]
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4928      	ldr	r1, [pc, #160]	; (800cc84 <MotionSP_TimeDomainProcess+0xc8>)
 800cbe4:	4828      	ldr	r0, [pc, #160]	; (800cc88 <MotionSP_TimeDomainProcess+0xcc>)
 800cbe6:	f7ff fb73 	bl	800c2d0 <MotionSP_evalSpeedFromAccelero>
    // Delete the Speed DC components
    MotionSP_speedDelOffset(&SpeedTimeDomain_noDC, &SpeedTimeDomain, DC_SMOOTH, Restart);
 800cbea:	78bb      	ldrb	r3, [r7, #2]
 800cbec:	461a      	mov	r2, r3
 800cbee:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800cc8c <MotionSP_TimeDomainProcess+0xd0>
 800cbf2:	4925      	ldr	r1, [pc, #148]	; (800cc88 <MotionSP_TimeDomainProcess+0xcc>)
 800cbf4:	4826      	ldr	r0, [pc, #152]	; (800cc90 <MotionSP_TimeDomainProcess+0xd4>)
 800cbf6:	f7ff facf 	bl	800c198 <MotionSP_speedDelOffset>
    // Evaluate SwExponential Filter by TAU_FILTER on Speed data
    MotionSP_SwSpeedRmsFilter(&sTimeDomain.SpeedRms, &SpeedTimeDomain_noDC, AcceleroODR.Tau, Restart);
 800cbfa:	4b26      	ldr	r3, [pc, #152]	; (800cc94 <MotionSP_TimeDomainProcess+0xd8>)
 800cbfc:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc00:	78bb      	ldrb	r3, [r7, #2]
 800cc02:	461a      	mov	r2, r3
 800cc04:	eeb0 0a67 	vmov.f32	s0, s15
 800cc08:	4921      	ldr	r1, [pc, #132]	; (800cc90 <MotionSP_TimeDomainProcess+0xd4>)
 800cc0a:	4823      	ldr	r0, [pc, #140]	; (800cc98 <MotionSP_TimeDomainProcess+0xdc>)
 800cc0c:	f7ff fc6e 	bl	800c4ec <MotionSP_SwSpeedRmsFilter>
  }

  if (td_type == TD_ACCELERO)
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d10a      	bne.n	800cc2c <MotionSP_TimeDomainProcess+0x70>
  {
    /* TIME DOMAIN ANALYSIS: Accelerometer RMS Moving AVERAGE */
    // Evaluate SwExponential Filter by TAU_FILTER on Accelerometer data
    MotionSP_SwAccRmsFilter(&sTimeDomain.AccRms, &AccCircBuffer, AcceleroODR.Tau, Restart);
 800cc16:	4b1f      	ldr	r3, [pc, #124]	; (800cc94 <MotionSP_TimeDomainProcess+0xd8>)
 800cc18:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc1c:	78bb      	ldrb	r3, [r7, #2]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	eeb0 0a67 	vmov.f32	s0, s15
 800cc24:	4917      	ldr	r1, [pc, #92]	; (800cc84 <MotionSP_TimeDomainProcess+0xc8>)
 800cc26:	481d      	ldr	r0, [pc, #116]	; (800cc9c <MotionSP_TimeDomainProcess+0xe0>)
 800cc28:	f7ff fd4e 	bl	800c6c8 <MotionSP_SwAccRmsFilter>
  }

  if (td_type == TD_BOTH_TAU)
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d123      	bne.n	800cc7a <MotionSP_TimeDomainProcess+0xbe>
  {
    /* TIME DOMAIN ANALYSIS: Speed and both RMS Moving AVERAGE TAU */
    MotionSP_evalSpeedFromAccelero(&SpeedTimeDomain, &AccCircBuffer, Restart);
 800cc32:	78bb      	ldrb	r3, [r7, #2]
 800cc34:	461a      	mov	r2, r3
 800cc36:	4913      	ldr	r1, [pc, #76]	; (800cc84 <MotionSP_TimeDomainProcess+0xc8>)
 800cc38:	4813      	ldr	r0, [pc, #76]	; (800cc88 <MotionSP_TimeDomainProcess+0xcc>)
 800cc3a:	f7ff fb49 	bl	800c2d0 <MotionSP_evalSpeedFromAccelero>
    // Delete the Speed DC components
    MotionSP_speedDelOffset(&SpeedTimeDomain_noDC, &SpeedTimeDomain, DC_SMOOTH, Restart);
 800cc3e:	78bb      	ldrb	r3, [r7, #2]
 800cc40:	461a      	mov	r2, r3
 800cc42:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800cc8c <MotionSP_TimeDomainProcess+0xd0>
 800cc46:	4910      	ldr	r1, [pc, #64]	; (800cc88 <MotionSP_TimeDomainProcess+0xcc>)
 800cc48:	4811      	ldr	r0, [pc, #68]	; (800cc90 <MotionSP_TimeDomainProcess+0xd4>)
 800cc4a:	f7ff faa5 	bl	800c198 <MotionSP_speedDelOffset>
    // Evaluate SwExponential Filter by TAU_FILTER on Speed data
    MotionSP_SwSpeedRmsFilter(&sTimeDomain.SpeedRms, &SpeedTimeDomain_noDC, AcceleroODR.Tau, Restart);
 800cc4e:	4b11      	ldr	r3, [pc, #68]	; (800cc94 <MotionSP_TimeDomainProcess+0xd8>)
 800cc50:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc54:	78bb      	ldrb	r3, [r7, #2]
 800cc56:	461a      	mov	r2, r3
 800cc58:	eeb0 0a67 	vmov.f32	s0, s15
 800cc5c:	490c      	ldr	r1, [pc, #48]	; (800cc90 <MotionSP_TimeDomainProcess+0xd4>)
 800cc5e:	480e      	ldr	r0, [pc, #56]	; (800cc98 <MotionSP_TimeDomainProcess+0xdc>)
 800cc60:	f7ff fc44 	bl	800c4ec <MotionSP_SwSpeedRmsFilter>
    // Evaluate SwExponential Filter by TAU_FILTER on Accelerometer data
    MotionSP_SwAccRmsFilter(&sTimeDomain.AccRms, &AccCircBuffer, AcceleroODR.Tau, Restart);
 800cc64:	4b0b      	ldr	r3, [pc, #44]	; (800cc94 <MotionSP_TimeDomainProcess+0xd8>)
 800cc66:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc6a:	78bb      	ldrb	r3, [r7, #2]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	eeb0 0a67 	vmov.f32	s0, s15
 800cc72:	4904      	ldr	r1, [pc, #16]	; (800cc84 <MotionSP_TimeDomainProcess+0xc8>)
 800cc74:	4809      	ldr	r0, [pc, #36]	; (800cc9c <MotionSP_TimeDomainProcess+0xe0>)
 800cc76:	f7ff fd27 	bl	800c6c8 <MotionSP_SwAccRmsFilter>
  }
}
 800cc7a:	bf00      	nop
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	200059d0 	.word	0x200059d0
 800cc88:	20007230 	.word	0x20007230
 800cc8c:	3f79999a 	.word	0x3f79999a
 800cc90:	20007240 	.word	0x20007240
 800cc94:	20008a9c 	.word	0x20008a9c
 800cc98:	200071e4 	.word	0x200071e4
 800cc9c:	200071d8 	.word	0x200071d8

0800cca0 <MotionSP_fftCalc>:
  * @param  pfftIn pointer to the FFT-In array
  * @param  pfftOut pointer to the FFT-Out array
  * @return none
  */
void MotionSP_fftCalc(arm_rfft_fast_instance_f32 *pfftS, float *pfftIn, float *pfftOut)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
  static float fftTmp[FFT_SIZE_MAX];

  // Compute the Fourier transform of the signal.
  arm_rfft_fast_f32(pfftS, pfftIn, fftTmp, 0);
 800ccac:	2300      	movs	r3, #0
 800ccae:	4a09      	ldr	r2, [pc, #36]	; (800ccd4 <MotionSP_fftCalc+0x34>)
 800ccb0:	68b9      	ldr	r1, [r7, #8]
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f7fa fd44 	bl	8007740 <arm_rfft_fast_f32>

  // Compute the two-sided spectrum
  arm_cmplx_mag_f32(fftTmp, pfftOut, pfftS->fftLenRFFT / 2);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	8a1b      	ldrh	r3, [r3, #16]
 800ccbc:	085b      	lsrs	r3, r3, #1
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	6879      	ldr	r1, [r7, #4]
 800ccc4:	4803      	ldr	r0, [pc, #12]	; (800ccd4 <MotionSP_fftCalc+0x34>)
 800ccc6:	f7f8 f8ef 	bl	8004ea8 <arm_cmplx_mag_f32>
}
 800ccca:	bf00      	nop
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	200003e4 	.word	0x200003e4

0800ccd8 <MotionSP_fftAdapt>:
  * @param  pfftCmplxMag description for pfftCmplxMag
  * @param  size description for size
  * @return none
  */
void MotionSP_fftAdapt(sAxesMagBuff_t *pfftCmplxMag, uint16_t size)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	807b      	strh	r3, [r7, #2]
  for (int i = 0; i < size; i++)
 800cce4:	2300      	movs	r3, #0
 800cce6:	60fb      	str	r3, [r7, #12]
 800cce8:	e0a9      	b.n	800ce3e <MotionSP_fftAdapt+0x166>
  {
    if (i == 0) /* Adjust DC component */
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d153      	bne.n	800cd98 <MotionSP_fftAdapt+0xc0>
    {
      pfftCmplxMag->AXIS_X[i] = (pfftCmplxMag->AXIS_X[i] / (2 * size)) * Window_Scale_Factor;
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4413      	add	r3, r2
 800ccf8:	edd3 6a00 	vldr	s13, [r3]
 800ccfc:	887b      	ldrh	r3, [r7, #2]
 800ccfe:	005b      	lsls	r3, r3, #1
 800cd00:	ee07 3a90 	vmov	s15, r3
 800cd04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd0c:	4b52      	ldr	r3, [pc, #328]	; (800ce58 <MotionSP_fftAdapt+0x180>)
 800cd0e:	edd3 7a00 	vldr	s15, [r3]
 800cd12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	edc3 7a00 	vstr	s15, [r3]
      pfftCmplxMag->AXIS_Y[i] = (pfftCmplxMag->AXIS_Y[i] / (2 * size)) * Window_Scale_Factor;
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	edd3 6a00 	vldr	s13, [r3]
 800cd32:	887b      	ldrh	r3, [r7, #2]
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	ee07 3a90 	vmov	s15, r3
 800cd3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd42:	4b45      	ldr	r3, [pc, #276]	; (800ce58 <MotionSP_fftAdapt+0x180>)
 800cd44:	edd3 7a00 	vldr	s15, [r3]
 800cd48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	edc3 7a00 	vstr	s15, [r3]
      pfftCmplxMag->AXIS_Z[i] = (pfftCmplxMag->AXIS_Z[i] / (2 * size)) * Window_Scale_Factor;
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	edd3 6a00 	vldr	s13, [r3]
 800cd6c:	887b      	ldrh	r3, [r7, #2]
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	ee07 3a90 	vmov	s15, r3
 800cd74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd7c:	4b36      	ldr	r3, [pc, #216]	; (800ce58 <MotionSP_fftAdapt+0x180>)
 800cd7e:	edd3 7a00 	vldr	s15, [r3]
 800cd82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	edc3 7a00 	vstr	s15, [r3]
 800cd96:	e04f      	b.n	800ce38 <MotionSP_fftAdapt+0x160>
    }
    else /* Adjust all the elements with i > 0 */
    {
      pfftCmplxMag->AXIS_X[i] = (pfftCmplxMag->AXIS_X[i] / size) * Window_Scale_Factor;
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	edd3 6a00 	vldr	s13, [r3]
 800cda4:	887b      	ldrh	r3, [r7, #2]
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdb2:	4b29      	ldr	r3, [pc, #164]	; (800ce58 <MotionSP_fftAdapt+0x180>)
 800cdb4:	edd3 7a00 	vldr	s15, [r3]
 800cdb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	edc3 7a00 	vstr	s15, [r3]
      pfftCmplxMag->AXIS_Y[i] = (pfftCmplxMag->AXIS_Y[i] / size) * Window_Scale_Factor;
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4413      	add	r3, r2
 800cdd4:	edd3 6a00 	vldr	s13, [r3]
 800cdd8:	887b      	ldrh	r3, [r7, #2]
 800cdda:	ee07 3a90 	vmov	s15, r3
 800cdde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cde2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cde6:	4b1c      	ldr	r3, [pc, #112]	; (800ce58 <MotionSP_fftAdapt+0x180>)
 800cde8:	edd3 7a00 	vldr	s15, [r3]
 800cdec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	edc3 7a00 	vstr	s15, [r3]
      pfftCmplxMag->AXIS_Z[i] = (pfftCmplxMag->AXIS_Z[i] / size) * Window_Scale_Factor;
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4413      	add	r3, r2
 800ce0c:	edd3 6a00 	vldr	s13, [r3]
 800ce10:	887b      	ldrh	r3, [r7, #2]
 800ce12:	ee07 3a90 	vmov	s15, r3
 800ce16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce1e:	4b0e      	ldr	r3, [pc, #56]	; (800ce58 <MotionSP_fftAdapt+0x180>)
 800ce20:	edd3 7a00 	vldr	s15, [r3]
 800ce24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4413      	add	r3, r2
 800ce34:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < size; i++)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	60fb      	str	r3, [r7, #12]
 800ce3e:	887b      	ldrh	r3, [r7, #2]
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	f6ff af51 	blt.w	800ccea <MotionSP_fftAdapt+0x12>
    }
  }
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	3714      	adds	r7, #20
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	200059cc 	.word	0x200059cc

0800ce5c <MotionSP_fftFindPeak>:
  * @param  AccAxesMagResults description for AccAxesMagResults
  * @return none
  */

void MotionSP_fftFindPeak(sAxesMagBuff_t *pfftCmplxMag, uint16_t size, sAxesMagResults_t *AccAxesMagResults)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	460b      	mov	r3, r1
 800ce66:	607a      	str	r2, [r7, #4]
 800ce68:	817b      	strh	r3, [r7, #10]
  arm_max_f32(pfftCmplxMag->AXIS_X, size, &AccAxesMagResults->X_Value, &AccAxesMagResults->X_Index);
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	8979      	ldrh	r1, [r7, #10]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3304      	adds	r3, #4
 800ce74:	f7f8 f940 	bl	80050f8 <arm_max_f32>
  arm_max_f32(pfftCmplxMag->AXIS_Y, size, &AccAxesMagResults->Y_Value, &AccAxesMagResults->Y_Index);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f503 6080 	add.w	r0, r3, #1024	; 0x400
 800ce7e:	8979      	ldrh	r1, [r7, #10]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f103 020c 	add.w	r2, r3, #12
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3310      	adds	r3, #16
 800ce8a:	f7f8 f935 	bl	80050f8 <arm_max_f32>
  arm_max_f32(pfftCmplxMag->AXIS_Z, size, &AccAxesMagResults->Z_Value, &AccAxesMagResults->Z_Index);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 800ce94:	8979      	ldrh	r1, [r7, #10]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f103 0218 	add.w	r2, r3, #24
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	331c      	adds	r3, #28
 800cea0:	f7f8 f92a 	bl	80050f8 <arm_max_f32>
}
 800cea4:	bf00      	nop
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <MotionSP_SetWindFiltArray>:
  * @param  size filtering parameters array size
  * @param  Ftype filtering method
  * @return none
  */
void MotionSP_SetWindFiltArray(float *Filter_Params, uint16_t size, Filt_Type_t Ftype)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	ed2d 8b02 	vpush	{d8}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	807b      	strh	r3, [r7, #2]
 800cebc:	4613      	mov	r3, r2
 800cebe:	707b      	strb	r3, [r7, #1]
  for (int i = 0; i < size; i++)
 800cec0:	2300      	movs	r3, #0
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	e0db      	b.n	800d07e <MotionSP_SetWindFiltArray+0x1d2>
  {
    if (Ftype == RECTANGULAR)
 800cec6:	787b      	ldrb	r3, [r7, #1]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d106      	bne.n	800ceda <MotionSP_SetWindFiltArray+0x2e>
    {
      Filter_Params[i] = 1.0f;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	4413      	add	r3, r2
 800ced4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ced8:	601a      	str	r2, [r3, #0]
    }

    if (Ftype == HANNING)
 800ceda:	787b      	ldrb	r3, [r7, #1]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d124      	bne.n	800cf2a <MotionSP_SetWindFiltArray+0x7e>
    {
      Filter_Params[i] = (0.5f * (1 - arm_cos_f32((2 * PI * i) / (size - 1))));
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	ee07 3a90 	vmov	s15, r3
 800cee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ceea:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800d0d4 <MotionSP_SetWindFiltArray+0x228>
 800ceee:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cef2:	887b      	ldrh	r3, [r7, #2]
 800cef4:	3b01      	subs	r3, #1
 800cef6:	ee07 3a90 	vmov	s15, r3
 800cefa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cefe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cf02:	eeb0 0a66 	vmov.f32	s0, s13
 800cf06:	f7f8 f87b 	bl	8005000 <arm_cos_f32>
 800cf0a:	eef0 7a40 	vmov.f32	s15, s0
 800cf0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cf22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf26:	edc3 7a00 	vstr	s15, [r3]
    }

    if (Ftype == HAMMING)
 800cf2a:	787b      	ldrb	r3, [r7, #1]
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d124      	bne.n	800cf7a <MotionSP_SetWindFiltArray+0xce>
    {
      Filter_Params[i] = 0.54f - (0.46f * (arm_cos_f32((2 * PI * i) / (size - 1))));
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	ee07 3a90 	vmov	s15, r3
 800cf36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf3a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800d0d4 <MotionSP_SetWindFiltArray+0x228>
 800cf3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cf42:	887b      	ldrh	r3, [r7, #2]
 800cf44:	3b01      	subs	r3, #1
 800cf46:	ee07 3a90 	vmov	s15, r3
 800cf4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cf52:	eeb0 0a66 	vmov.f32	s0, s13
 800cf56:	f7f8 f853 	bl	8005000 <arm_cos_f32>
 800cf5a:	eef0 7a40 	vmov.f32	s15, s0
 800cf5e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800d0d8 <MotionSP_SetWindFiltArray+0x22c>
 800cf62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800d0dc <MotionSP_SetWindFiltArray+0x230>
 800cf72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf76:	edc3 7a00 	vstr	s15, [r3]
    }

    if (Ftype == FLAT_TOP)
 800cf7a:	787b      	ldrb	r3, [r7, #1]
 800cf7c:	2b03      	cmp	r3, #3
 800cf7e:	d17b      	bne.n	800d078 <MotionSP_SetWindFiltArray+0x1cc>
      Filter_Params[i] = 0.21557895f - \
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	ee07 3a90 	vmov	s15, r3
 800cf86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf8a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800d0d4 <MotionSP_SetWindFiltArray+0x228>
 800cf8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cf92:	887b      	ldrh	r3, [r7, #2]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cfa2:	eeb0 0a66 	vmov.f32	s0, s13
 800cfa6:	f7f8 f82b 	bl	8005000 <arm_cos_f32>
 800cfaa:	eef0 7a40 	vmov.f32	s15, s0
 800cfae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d0e0 <MotionSP_SetWindFiltArray+0x234>
 800cfb2:	ee67 7a87 	vmul.f32	s15, s15, s14
      Filter_Params[i] = 0.21557895f - \
 800cfb6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d0e4 <MotionSP_SetWindFiltArray+0x238>
 800cfba:	ee37 8a67 	vsub.f32	s16, s14, s15
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	ee07 3a90 	vmov	s15, r3
 800cfc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfc8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800d0e8 <MotionSP_SetWindFiltArray+0x23c>
 800cfcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cfd0:	887b      	ldrh	r3, [r7, #2]
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	ee07 3a90 	vmov	s15, r3
 800cfd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfdc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cfe0:	eeb0 0a66 	vmov.f32	s0, s13
 800cfe4:	f7f8 f80c 	bl	8005000 <arm_cos_f32>
 800cfe8:	eef0 7a40 	vmov.f32	s15, s0
 800cfec:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800d0ec <MotionSP_SetWindFiltArray+0x240>
 800cff0:	ee67 7a87 	vmul.f32	s15, s15, s14
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 800cff4:	ee38 8a27 	vadd.f32	s16, s16, s15
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	ee07 3a90 	vmov	s15, r3
 800cffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d002:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800d0f0 <MotionSP_SetWindFiltArray+0x244>
 800d006:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d00a:	887b      	ldrh	r3, [r7, #2]
 800d00c:	3b01      	subs	r3, #1
 800d00e:	ee07 3a90 	vmov	s15, r3
 800d012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d016:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d01a:	eeb0 0a66 	vmov.f32	s0, s13
 800d01e:	f7f7 ffef 	bl	8005000 <arm_cos_f32>
 800d022:	eef0 7a40 	vmov.f32	s15, s0
 800d026:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800d0f4 <MotionSP_SetWindFiltArray+0x248>
 800d02a:	ee67 7a87 	vmul.f32	s15, s15, s14
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
 800d02e:	ee38 8a67 	vsub.f32	s16, s16, s15
                         0.006947368f * (arm_cos_f32((8 * PI * i) / (size - 1)));
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	ee07 3a90 	vmov	s15, r3
 800d038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d03c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800d0f8 <MotionSP_SetWindFiltArray+0x24c>
 800d040:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d044:	887b      	ldrh	r3, [r7, #2]
 800d046:	3b01      	subs	r3, #1
 800d048:	ee07 3a90 	vmov	s15, r3
 800d04c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d050:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d054:	eeb0 0a66 	vmov.f32	s0, s13
 800d058:	f7f7 ffd2 	bl	8005000 <arm_cos_f32>
 800d05c:	eef0 7a40 	vmov.f32	s15, s0
 800d060:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800d0fc <MotionSP_SetWindFiltArray+0x250>
 800d064:	ee67 7a87 	vmul.f32	s15, s15, s14
      Filter_Params[i] = 0.21557895f - \
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	4413      	add	r3, r2
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
 800d070:	ee78 7a27 	vadd.f32	s15, s16, s15
      Filter_Params[i] = 0.21557895f - \
 800d074:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < size; i++)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	3301      	adds	r3, #1
 800d07c:	60fb      	str	r3, [r7, #12]
 800d07e:	887b      	ldrh	r3, [r7, #2]
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	429a      	cmp	r2, r3
 800d084:	f6ff af1f 	blt.w	800cec6 <MotionSP_SetWindFiltArray+0x1a>
  }

  switch (Ftype)
 800d088:	787b      	ldrb	r3, [r7, #1]
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d81c      	bhi.n	800d0c8 <MotionSP_SetWindFiltArray+0x21c>
 800d08e:	a201      	add	r2, pc, #4	; (adr r2, 800d094 <MotionSP_SetWindFiltArray+0x1e8>)
 800d090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d094:	0800d0a5 	.word	0x0800d0a5
 800d098:	0800d0af 	.word	0x0800d0af
 800d09c:	0800d0b9 	.word	0x0800d0b9
 800d0a0:	0800d0c1 	.word	0x0800d0c1
  {
    case RECTANGULAR:
      Window_Scale_Factor = 1.0f;
 800d0a4:	4b16      	ldr	r3, [pc, #88]	; (800d100 <MotionSP_SetWindFiltArray+0x254>)
 800d0a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d0aa:	601a      	str	r2, [r3, #0]
      break;
 800d0ac:	e00c      	b.n	800d0c8 <MotionSP_SetWindFiltArray+0x21c>

    case HANNING:
      Window_Scale_Factor = 2.0f;
 800d0ae:	4b14      	ldr	r3, [pc, #80]	; (800d100 <MotionSP_SetWindFiltArray+0x254>)
 800d0b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d0b4:	601a      	str	r2, [r3, #0]
      break;
 800d0b6:	e007      	b.n	800d0c8 <MotionSP_SetWindFiltArray+0x21c>

    case HAMMING:
      Window_Scale_Factor = 1.85f;
 800d0b8:	4b11      	ldr	r3, [pc, #68]	; (800d100 <MotionSP_SetWindFiltArray+0x254>)
 800d0ba:	4a12      	ldr	r2, [pc, #72]	; (800d104 <MotionSP_SetWindFiltArray+0x258>)
 800d0bc:	601a      	str	r2, [r3, #0]
      break;
 800d0be:	e003      	b.n	800d0c8 <MotionSP_SetWindFiltArray+0x21c>

    case FLAT_TOP:
      Window_Scale_Factor = 4.55f;
 800d0c0:	4b0f      	ldr	r3, [pc, #60]	; (800d100 <MotionSP_SetWindFiltArray+0x254>)
 800d0c2:	4a11      	ldr	r2, [pc, #68]	; (800d108 <MotionSP_SetWindFiltArray+0x25c>)
 800d0c4:	601a      	str	r2, [r3, #0]
      break;
 800d0c6:	bf00      	nop
  }
}
 800d0c8:	bf00      	nop
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	ecbd 8b02 	vpop	{d8}
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	40c90fdb 	.word	0x40c90fdb
 800d0d8:	3eeb851f 	.word	0x3eeb851f
 800d0dc:	3f0a3d71 	.word	0x3f0a3d71
 800d0e0:	3ed550bc 	.word	0x3ed550bc
 800d0e4:	3e5cc0ba 	.word	0x3e5cc0ba
 800d0e8:	41490fdb 	.word	0x41490fdb
 800d0ec:	3e8df570 	.word	0x3e8df570
 800d0f0:	4196cbe4 	.word	0x4196cbe4
 800d0f4:	3dab2b70 	.word	0x3dab2b70
 800d0f8:	41c90fdb 	.word	0x41c90fdb
 800d0fc:	3be3a6bf 	.word	0x3be3a6bf
 800d100:	200059cc 	.word	0x200059cc
 800d104:	3feccccd 	.word	0x3feccccd
 800d108:	4091999a 	.word	0x4091999a

0800d10c <motionSP_fftUseWindow>:
  * @param SizeArr input/output array size
  * @param Window_Params oointer to windowing coefficients array
  * @return none
  */
void motionSP_fftUseWindow(float *pDstArr, float *pSrcArr, uint16_t SizeArr, float *Window_Params)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	603b      	str	r3, [r7, #0]
 800d118:	4613      	mov	r3, r2
 800d11a:	80fb      	strh	r3, [r7, #6]
  arm_mult_f32(pSrcArr, Window_Params, pDstArr, SizeArr);
 800d11c:	88fb      	ldrh	r3, [r7, #6]
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	6839      	ldr	r1, [r7, #0]
 800d122:	68b8      	ldr	r0, [r7, #8]
 800d124:	f7f7 fe1a 	bl	8004d5c <arm_mult_f32>
}
 800d128:	bf00      	nop
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <MotionSP_fftInBuild>:
  * @param  SrcLastPos last index of data to be taken
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
uint8_t MotionSP_fftInBuild(float *pDst, uint16_t DstSize, float *pSrc, uint16_t SrcSize, uint16_t SrcLastPos)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	607a      	str	r2, [r7, #4]
 800d13a:	461a      	mov	r2, r3
 800d13c:	460b      	mov	r3, r1
 800d13e:	817b      	strh	r3, [r7, #10]
 800d140:	4613      	mov	r3, r2
 800d142:	813b      	strh	r3, [r7, #8]
  int16_t initPos;
  uint16_t pos2end;

  if (SrcLastPos < SrcSize)
 800d144:	8c3a      	ldrh	r2, [r7, #32]
 800d146:	893b      	ldrh	r3, [r7, #8]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d23e      	bcs.n	800d1ca <MotionSP_fftInBuild+0x9a>
  {
    // Replace the last index of data to be taken with the first one
    initPos = SrcLastPos - (DstSize - 1);
 800d14c:	8c3a      	ldrh	r2, [r7, #32]
 800d14e:	897b      	ldrh	r3, [r7, #10]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	b29b      	uxth	r3, r3
 800d154:	3301      	adds	r3, #1
 800d156:	b29b      	uxth	r3, r3
 800d158:	82fb      	strh	r3, [r7, #22]
    if (initPos < 0)
 800d15a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	da04      	bge.n	800d16c <MotionSP_fftInBuild+0x3c>
    {
      initPos += SrcSize;
 800d162:	8afa      	ldrh	r2, [r7, #22]
 800d164:	893b      	ldrh	r3, [r7, #8]
 800d166:	4413      	add	r3, r2
 800d168:	b29b      	uxth	r3, r3
 800d16a:	82fb      	strh	r3, [r7, #22]
    }

    if (initPos <= (SrcSize - DstSize))
 800d16c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d170:	8939      	ldrh	r1, [r7, #8]
 800d172:	897b      	ldrh	r3, [r7, #10]
 800d174:	1acb      	subs	r3, r1, r3
 800d176:	429a      	cmp	r2, r3
 800d178:	dc0b      	bgt.n	800d192 <MotionSP_fftInBuild+0x62>
    {
      memcpy((void *)pDst, (void *)(pSrc + initPos), DstSize * sizeof(float));
 800d17a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	18d1      	adds	r1, r2, r3
 800d184:	897b      	ldrh	r3, [r7, #10]
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	461a      	mov	r2, r3
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f000 fbef 	bl	800d96e <memcpy>
 800d190:	e01d      	b.n	800d1ce <MotionSP_fftInBuild+0x9e>
    }
    else
    {
      pos2end = SrcSize - initPos;
 800d192:	8afb      	ldrh	r3, [r7, #22]
 800d194:	893a      	ldrh	r2, [r7, #8]
 800d196:	1ad3      	subs	r3, r2, r3
 800d198:	82bb      	strh	r3, [r7, #20]
      memcpy((void *)pDst, (void *)(pSrc + initPos), pos2end * sizeof(float));
 800d19a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	18d1      	adds	r1, r2, r3
 800d1a4:	8abb      	ldrh	r3, [r7, #20]
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f000 fbdf 	bl	800d96e <memcpy>
      memcpy((void *)(pDst + pos2end), (void *)pSrc, (DstSize - pos2end)*sizeof(float));
 800d1b0:	8abb      	ldrh	r3, [r7, #20]
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	18d0      	adds	r0, r2, r3
 800d1b8:	897a      	ldrh	r2, [r7, #10]
 800d1ba:	8abb      	ldrh	r3, [r7, #20]
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	6879      	ldr	r1, [r7, #4]
 800d1c4:	f000 fbd3 	bl	800d96e <memcpy>
 800d1c8:	e001      	b.n	800d1ce <MotionSP_fftInBuild+0x9e>
    }
  }
  else
  {
    return 1;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <MotionSP_fftInBuild+0xa0>
  }

  return 0;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <MotionSP_fftAverageCalcTime>:
  *  @param  FinishAvg Description for FinishAvg
  *  @retval 1 in case of success
  *  @retval 0 in case of failure
  */
uint8_t MotionSP_fftAverageCalcTime(float *pDstArr, float *pSrcArr, uint16_t LenArr, uint16_t *pSumCnt, uint8_t FinishAvg)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	603b      	str	r3, [r7, #0]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	80fb      	strh	r3, [r7, #6]
  if ((*pSumCnt == 0))
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	881b      	ldrh	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d106      	bne.n	800d1fe <MotionSP_fftAverageCalcTime+0x26>
  {
    // reset the destination array
    memset((void *)pDstArr, 0, LenArr * sizeof(float));
 800d1f0:	88fb      	ldrh	r3, [r7, #6]
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f000 fbc6 	bl	800d98a <memset>
  }

  // add new source values to destination
  for (uint16_t j = 0; j < LenArr; j++)
 800d1fe:	2300      	movs	r3, #0
 800d200:	82fb      	strh	r3, [r7, #22]
 800d202:	e016      	b.n	800d232 <MotionSP_fftAverageCalcTime+0x5a>
  {
    *(pDstArr + j) += *(pSrcArr + j);
 800d204:	8afb      	ldrh	r3, [r7, #22]
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	4413      	add	r3, r2
 800d20c:	ed93 7a00 	vldr	s14, [r3]
 800d210:	8afb      	ldrh	r3, [r7, #22]
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	68ba      	ldr	r2, [r7, #8]
 800d216:	4413      	add	r3, r2
 800d218:	edd3 7a00 	vldr	s15, [r3]
 800d21c:	8afb      	ldrh	r3, [r7, #22]
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	4413      	add	r3, r2
 800d224:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d228:	edc3 7a00 	vstr	s15, [r3]
  for (uint16_t j = 0; j < LenArr; j++)
 800d22c:	8afb      	ldrh	r3, [r7, #22]
 800d22e:	3301      	adds	r3, #1
 800d230:	82fb      	strh	r3, [r7, #22]
 800d232:	8afa      	ldrh	r2, [r7, #22]
 800d234:	88fb      	ldrh	r3, [r7, #6]
 800d236:	429a      	cmp	r2, r3
 800d238:	d3e4      	bcc.n	800d204 <MotionSP_fftAverageCalcTime+0x2c>
  }

  // increase the number of times
  *pSumCnt += 1;
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	881b      	ldrh	r3, [r3, #0]
 800d23e:	3301      	adds	r3, #1
 800d240:	b29a      	uxth	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	801a      	strh	r2, [r3, #0]

  if (FinishAvg)
 800d246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d01f      	beq.n	800d28e <MotionSP_fftAverageCalcTime+0xb6>
  {
    // Process the average
    for (uint16_t j = 0; j < LenArr; j++)
 800d24e:	2300      	movs	r3, #0
 800d250:	82bb      	strh	r3, [r7, #20]
 800d252:	e016      	b.n	800d282 <MotionSP_fftAverageCalcTime+0xaa>
    {
      *(pDstArr + j) = *(pDstArr + j) / (*pSumCnt);
 800d254:	8abb      	ldrh	r3, [r7, #20]
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	4413      	add	r3, r2
 800d25c:	edd3 6a00 	vldr	s13, [r3]
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	881b      	ldrh	r3, [r3, #0]
 800d264:	ee07 3a90 	vmov	s15, r3
 800d268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d26c:	8abb      	ldrh	r3, [r7, #20]
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	4413      	add	r3, r2
 800d274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d278:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t j = 0; j < LenArr; j++)
 800d27c:	8abb      	ldrh	r3, [r7, #20]
 800d27e:	3301      	adds	r3, #1
 800d280:	82bb      	strh	r3, [r7, #20]
 800d282:	8aba      	ldrh	r2, [r7, #20]
 800d284:	88fb      	ldrh	r3, [r7, #6]
 800d286:	429a      	cmp	r2, r3
 800d288:	d3e4      	bcc.n	800d254 <MotionSP_fftAverageCalcTime+0x7c>
    }

    return 1;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e000      	b.n	800d290 <MotionSP_fftAverageCalcTime+0xb8>
  }

  return 0;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3718      	adds	r7, #24
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <MotionSP_FrequencyDomainProcess>:
  * @brief  Frequency Domain Processing
  * @param  None
  * @return None
  */
void MotionSP_FrequencyDomainProcess(void)
{
 800d298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d29c:	b088      	sub	sp, #32
 800d29e:	af06      	add	r7, sp, #24
  static float fftOutX[FFT_SIZE_MAX];          //!< Array for output values for the complex magnitude function
  static float fftOutY[FFT_SIZE_MAX];          //!< Array for output values for the complex magnitude function
  static float fftOutZ[FFT_SIZE_MAX];          //!< Array for output values for the complex magnitude function

  /* ------------------ Freeze the Accelerometer data to analyze--------------*/
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, SpeedCircBuffer.Data.AXIS_X, SpeedCircBuffer.Size, accCircBuffIndexForFft);
 800d2a0:	4ba1      	ldr	r3, [pc, #644]	; (800d528 <MotionSP_FrequencyDomainProcess+0x290>)
 800d2a2:	8819      	ldrh	r1, [r3, #0]
 800d2a4:	4ba1      	ldr	r3, [pc, #644]	; (800d52c <MotionSP_FrequencyDomainProcess+0x294>)
 800d2a6:	881a      	ldrh	r2, [r3, #0]
 800d2a8:	4ba1      	ldr	r3, [pc, #644]	; (800d530 <MotionSP_FrequencyDomainProcess+0x298>)
 800d2aa:	881b      	ldrh	r3, [r3, #0]
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	4aa0      	ldr	r2, [pc, #640]	; (800d534 <MotionSP_FrequencyDomainProcess+0x29c>)
 800d2b2:	48a1      	ldr	r0, [pc, #644]	; (800d538 <MotionSP_FrequencyDomainProcess+0x2a0>)
 800d2b4:	f7ff ff3c 	bl	800d130 <MotionSP_fftInBuild>
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_Y, MotionSP_Parameters.FftSize, SpeedCircBuffer.Data.AXIS_Y, SpeedCircBuffer.Size, accCircBuffIndexForFft);
 800d2b8:	4b9b      	ldr	r3, [pc, #620]	; (800d528 <MotionSP_FrequencyDomainProcess+0x290>)
 800d2ba:	8819      	ldrh	r1, [r3, #0]
 800d2bc:	4b9b      	ldr	r3, [pc, #620]	; (800d52c <MotionSP_FrequencyDomainProcess+0x294>)
 800d2be:	881a      	ldrh	r2, [r3, #0]
 800d2c0:	4b9b      	ldr	r3, [pc, #620]	; (800d530 <MotionSP_FrequencyDomainProcess+0x298>)
 800d2c2:	881b      	ldrh	r3, [r3, #0]
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	4a9c      	ldr	r2, [pc, #624]	; (800d53c <MotionSP_FrequencyDomainProcess+0x2a4>)
 800d2ca:	489d      	ldr	r0, [pc, #628]	; (800d540 <MotionSP_FrequencyDomainProcess+0x2a8>)
 800d2cc:	f7ff ff30 	bl	800d130 <MotionSP_fftInBuild>
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_Z, MotionSP_Parameters.FftSize, SpeedCircBuffer.Data.AXIS_Z, SpeedCircBuffer.Size, accCircBuffIndexForFft);
 800d2d0:	4b95      	ldr	r3, [pc, #596]	; (800d528 <MotionSP_FrequencyDomainProcess+0x290>)
 800d2d2:	8819      	ldrh	r1, [r3, #0]
 800d2d4:	4b95      	ldr	r3, [pc, #596]	; (800d52c <MotionSP_FrequencyDomainProcess+0x294>)
 800d2d6:	881a      	ldrh	r2, [r3, #0]
 800d2d8:	4b95      	ldr	r3, [pc, #596]	; (800d530 <MotionSP_FrequencyDomainProcess+0x298>)
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	4a98      	ldr	r2, [pc, #608]	; (800d544 <MotionSP_FrequencyDomainProcess+0x2ac>)
 800d2e2:	4899      	ldr	r0, [pc, #612]	; (800d548 <MotionSP_FrequencyDomainProcess+0x2b0>)
 800d2e4:	f7ff ff24 	bl	800d130 <MotionSP_fftInBuild>

  /* ------------------ First Axis: Analysis on X-Acceleration--------------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, Filter_Params);
 800d2e8:	4b8f      	ldr	r3, [pc, #572]	; (800d528 <MotionSP_FrequencyDomainProcess+0x290>)
 800d2ea:	881a      	ldrh	r2, [r3, #0]
 800d2ec:	4b97      	ldr	r3, [pc, #604]	; (800d54c <MotionSP_FrequencyDomainProcess+0x2b4>)
 800d2ee:	4992      	ldr	r1, [pc, #584]	; (800d538 <MotionSP_FrequencyDomainProcess+0x2a0>)
 800d2f0:	4897      	ldr	r0, [pc, #604]	; (800d550 <MotionSP_FrequencyDomainProcess+0x2b8>)
 800d2f2:	f7ff ff0b 	bl	800d10c <motionSP_fftUseWindow>
  MotionSP_fftCalc(&fftS, fftIn, fftOutX);
 800d2f6:	4a97      	ldr	r2, [pc, #604]	; (800d554 <MotionSP_FrequencyDomainProcess+0x2bc>)
 800d2f8:	4995      	ldr	r1, [pc, #596]	; (800d550 <MotionSP_FrequencyDomainProcess+0x2b8>)
 800d2fa:	4897      	ldr	r0, [pc, #604]	; (800d558 <MotionSP_FrequencyDomainProcess+0x2c0>)
 800d2fc:	f7ff fcd0 	bl	800cca0 <MotionSP_fftCalc>



  if (MotionSP_fftAverageCalcTime(AccAxesAvgMagBuff.AXIS_X, fftOutX, magSize, &(AccSumCnt.AXIS_X), FinishAvgFlag))
 800d300:	4b96      	ldr	r3, [pc, #600]	; (800d55c <MotionSP_FrequencyDomainProcess+0x2c4>)
 800d302:	881a      	ldrh	r2, [r3, #0]
 800d304:	4b96      	ldr	r3, [pc, #600]	; (800d560 <MotionSP_FrequencyDomainProcess+0x2c8>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	4b96      	ldr	r3, [pc, #600]	; (800d564 <MotionSP_FrequencyDomainProcess+0x2cc>)
 800d30c:	4991      	ldr	r1, [pc, #580]	; (800d554 <MotionSP_FrequencyDomainProcess+0x2bc>)
 800d30e:	4896      	ldr	r0, [pc, #600]	; (800d568 <MotionSP_FrequencyDomainProcess+0x2d0>)
 800d310:	f7ff ff62 	bl	800d1d8 <MotionSP_fftAverageCalcTime>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00b      	beq.n	800d332 <MotionSP_FrequencyDomainProcess+0x9a>
  {
    // Save the Max FFT Number evaluated
    AccAxesMagResults.X_FFT_AVG = AccSumCnt.AXIS_X;
 800d31a:	4b92      	ldr	r3, [pc, #584]	; (800d564 <MotionSP_FrequencyDomainProcess+0x2cc>)
 800d31c:	881a      	ldrh	r2, [r3, #0]
 800d31e:	4b93      	ldr	r3, [pc, #588]	; (800d56c <MotionSP_FrequencyDomainProcess+0x2d4>)
 800d320:	811a      	strh	r2, [r3, #8]
    // Reset the FFT AVG Number for axis evaluated
    AccSumCnt.AXIS_X = 0;
 800d322:	4b90      	ldr	r3, [pc, #576]	; (800d564 <MotionSP_FrequencyDomainProcess+0x2cc>)
 800d324:	2200      	movs	r2, #0
 800d326:	801a      	strh	r2, [r3, #0]
    // AVG available
    AvgRdy.xAccAvgRdy = 1;
 800d328:	4a91      	ldr	r2, [pc, #580]	; (800d570 <MotionSP_FrequencyDomainProcess+0x2d8>)
 800d32a:	7813      	ldrb	r3, [r2, #0]
 800d32c:	f043 0301 	orr.w	r3, r3, #1
 800d330:	7013      	strb	r3, [r2, #0]
  }

  /* ------------------ Second Axis: Analysis on Y-Acceleration ----------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_Y, MotionSP_Parameters.FftSize,
 800d332:	4b7d      	ldr	r3, [pc, #500]	; (800d528 <MotionSP_FrequencyDomainProcess+0x290>)
 800d334:	881a      	ldrh	r2, [r3, #0]
 800d336:	4b85      	ldr	r3, [pc, #532]	; (800d54c <MotionSP_FrequencyDomainProcess+0x2b4>)
 800d338:	4981      	ldr	r1, [pc, #516]	; (800d540 <MotionSP_FrequencyDomainProcess+0x2a8>)
 800d33a:	4885      	ldr	r0, [pc, #532]	; (800d550 <MotionSP_FrequencyDomainProcess+0x2b8>)
 800d33c:	f7ff fee6 	bl	800d10c <motionSP_fftUseWindow>
                        Filter_Params); /* Evaluate FFT on Acc Data */
  MotionSP_fftCalc(&fftS, fftIn, fftOutY);
 800d340:	4a8c      	ldr	r2, [pc, #560]	; (800d574 <MotionSP_FrequencyDomainProcess+0x2dc>)
 800d342:	4983      	ldr	r1, [pc, #524]	; (800d550 <MotionSP_FrequencyDomainProcess+0x2b8>)
 800d344:	4884      	ldr	r0, [pc, #528]	; (800d558 <MotionSP_FrequencyDomainProcess+0x2c0>)
 800d346:	f7ff fcab 	bl	800cca0 <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccAxesAvgMagBuff.AXIS_Y, fftOutY, magSize, &(AccSumCnt.AXIS_Y), FinishAvgFlag))
 800d34a:	4b84      	ldr	r3, [pc, #528]	; (800d55c <MotionSP_FrequencyDomainProcess+0x2c4>)
 800d34c:	881a      	ldrh	r2, [r3, #0]
 800d34e:	4b84      	ldr	r3, [pc, #528]	; (800d560 <MotionSP_FrequencyDomainProcess+0x2c8>)
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	4b88      	ldr	r3, [pc, #544]	; (800d578 <MotionSP_FrequencyDomainProcess+0x2e0>)
 800d356:	4987      	ldr	r1, [pc, #540]	; (800d574 <MotionSP_FrequencyDomainProcess+0x2dc>)
 800d358:	4888      	ldr	r0, [pc, #544]	; (800d57c <MotionSP_FrequencyDomainProcess+0x2e4>)
 800d35a:	f7ff ff3d 	bl	800d1d8 <MotionSP_fftAverageCalcTime>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00b      	beq.n	800d37c <MotionSP_FrequencyDomainProcess+0xe4>
  {
    // Save the Max FFT Number evaluated
    AccAxesMagResults.Y_FFT_AVG = AccSumCnt.AXIS_Y;    // Reset the FFT AVG Number for axis evaluated
 800d364:	4b7f      	ldr	r3, [pc, #508]	; (800d564 <MotionSP_FrequencyDomainProcess+0x2cc>)
 800d366:	885a      	ldrh	r2, [r3, #2]
 800d368:	4b80      	ldr	r3, [pc, #512]	; (800d56c <MotionSP_FrequencyDomainProcess+0x2d4>)
 800d36a:	829a      	strh	r2, [r3, #20]
    AccSumCnt.AXIS_Y = 0;
 800d36c:	4b7d      	ldr	r3, [pc, #500]	; (800d564 <MotionSP_FrequencyDomainProcess+0x2cc>)
 800d36e:	2200      	movs	r2, #0
 800d370:	805a      	strh	r2, [r3, #2]
    // AVG available
    AvgRdy.yAccAvgRdy = 1;
 800d372:	4a7f      	ldr	r2, [pc, #508]	; (800d570 <MotionSP_FrequencyDomainProcess+0x2d8>)
 800d374:	7813      	ldrb	r3, [r2, #0]
 800d376:	f043 0302 	orr.w	r3, r3, #2
 800d37a:	7013      	strb	r3, [r2, #0]
  }

  /* ------------------ Third Axis: Analysis on Z-Acceleration-------------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_Z, MotionSP_Parameters.FftSize, Filter_Params);
 800d37c:	4b6a      	ldr	r3, [pc, #424]	; (800d528 <MotionSP_FrequencyDomainProcess+0x290>)
 800d37e:	881a      	ldrh	r2, [r3, #0]
 800d380:	4b72      	ldr	r3, [pc, #456]	; (800d54c <MotionSP_FrequencyDomainProcess+0x2b4>)
 800d382:	4971      	ldr	r1, [pc, #452]	; (800d548 <MotionSP_FrequencyDomainProcess+0x2b0>)
 800d384:	4872      	ldr	r0, [pc, #456]	; (800d550 <MotionSP_FrequencyDomainProcess+0x2b8>)
 800d386:	f7ff fec1 	bl	800d10c <motionSP_fftUseWindow>
  MotionSP_fftCalc(&fftS, fftIn, fftOutZ);
 800d38a:	4a7d      	ldr	r2, [pc, #500]	; (800d580 <MotionSP_FrequencyDomainProcess+0x2e8>)
 800d38c:	4970      	ldr	r1, [pc, #448]	; (800d550 <MotionSP_FrequencyDomainProcess+0x2b8>)
 800d38e:	4872      	ldr	r0, [pc, #456]	; (800d558 <MotionSP_FrequencyDomainProcess+0x2c0>)
 800d390:	f7ff fc86 	bl	800cca0 <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccAxesAvgMagBuff.AXIS_Z, fftOutZ, magSize, &(AccSumCnt.AXIS_Z), FinishAvgFlag))
 800d394:	4b71      	ldr	r3, [pc, #452]	; (800d55c <MotionSP_FrequencyDomainProcess+0x2c4>)
 800d396:	881a      	ldrh	r2, [r3, #0]
 800d398:	4b71      	ldr	r3, [pc, #452]	; (800d560 <MotionSP_FrequencyDomainProcess+0x2c8>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	4b79      	ldr	r3, [pc, #484]	; (800d584 <MotionSP_FrequencyDomainProcess+0x2ec>)
 800d3a0:	4977      	ldr	r1, [pc, #476]	; (800d580 <MotionSP_FrequencyDomainProcess+0x2e8>)
 800d3a2:	4879      	ldr	r0, [pc, #484]	; (800d588 <MotionSP_FrequencyDomainProcess+0x2f0>)
 800d3a4:	f7ff ff18 	bl	800d1d8 <MotionSP_fftAverageCalcTime>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00b      	beq.n	800d3c6 <MotionSP_FrequencyDomainProcess+0x12e>
  {
    // Save the Max FFT Number evaluated
    AccAxesMagResults.Z_FFT_AVG = AccSumCnt.AXIS_Z;
 800d3ae:	4b6d      	ldr	r3, [pc, #436]	; (800d564 <MotionSP_FrequencyDomainProcess+0x2cc>)
 800d3b0:	889a      	ldrh	r2, [r3, #4]
 800d3b2:	4b6e      	ldr	r3, [pc, #440]	; (800d56c <MotionSP_FrequencyDomainProcess+0x2d4>)
 800d3b4:	841a      	strh	r2, [r3, #32]
    // Reset the FFT AVG Number for axis evaluated
    AccSumCnt.AXIS_Z = 0;
 800d3b6:	4b6b      	ldr	r3, [pc, #428]	; (800d564 <MotionSP_FrequencyDomainProcess+0x2cc>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	809a      	strh	r2, [r3, #4]
    // AVG available
    AvgRdy.zAccAvgRdy = 1;
 800d3bc:	4a6c      	ldr	r2, [pc, #432]	; (800d570 <MotionSP_FrequencyDomainProcess+0x2d8>)
 800d3be:	7813      	ldrb	r3, [r2, #0]
 800d3c0:	f043 0304 	orr.w	r3, r3, #4
 800d3c4:	7013      	strb	r3, [r2, #0]
  }

  /* ---------------------------- Finish ----------------------------------*/
  if (AvgRdy.xAccAvgRdy & AvgRdy.yAccAvgRdy & AvgRdy.zAccAvgRdy)
 800d3c6:	4b6a      	ldr	r3, [pc, #424]	; (800d570 <MotionSP_FrequencyDomainProcess+0x2d8>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	4b67      	ldr	r3, [pc, #412]	; (800d570 <MotionSP_FrequencyDomainProcess+0x2d8>)
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	4013      	ands	r3, r2
 800d3de:	4a64      	ldr	r2, [pc, #400]	; (800d570 <MotionSP_FrequencyDomainProcess+0x2d8>)
 800d3e0:	7812      	ldrb	r2, [r2, #0]
 800d3e2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800d3e6:	b2d2      	uxtb	r2, r2
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d01b      	beq.n	800d426 <MotionSP_FrequencyDomainProcess+0x18e>
  {
    MotionSP_fftAdapt(&AccAxesAvgMagBuff, magSize);
 800d3ee:	4b5b      	ldr	r3, [pc, #364]	; (800d55c <MotionSP_FrequencyDomainProcess+0x2c4>)
 800d3f0:	881b      	ldrh	r3, [r3, #0]
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	485c      	ldr	r0, [pc, #368]	; (800d568 <MotionSP_FrequencyDomainProcess+0x2d0>)
 800d3f6:	f7ff fc6f 	bl	800ccd8 <MotionSP_fftAdapt>
    MotionSP_fftFindPeak(&AccAxesAvgMagBuff, magSize, &AccAxesMagResults);
 800d3fa:	4b58      	ldr	r3, [pc, #352]	; (800d55c <MotionSP_FrequencyDomainProcess+0x2c4>)
 800d3fc:	881b      	ldrh	r3, [r3, #0]
 800d3fe:	4a5b      	ldr	r2, [pc, #364]	; (800d56c <MotionSP_FrequencyDomainProcess+0x2d4>)
 800d400:	4619      	mov	r1, r3
 800d402:	4859      	ldr	r0, [pc, #356]	; (800d568 <MotionSP_FrequencyDomainProcess+0x2d0>)
 800d404:	f7ff fd2a 	bl	800ce5c <MotionSP_fftFindPeak>
    MotionSP_evalMaxAmplitudeRange (AccAxesAvgMagBuff.AXIS_X, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_X, SRBinVal.AXIS_X);
    MotionSP_evalMaxAmplitudeRange (AccAxesAvgMagBuff.AXIS_Y, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_Y, SRBinVal.AXIS_Y);
    MotionSP_evalMaxAmplitudeRange (AccAxesAvgMagBuff.AXIS_Z, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_Z, SRBinVal.AXIS_Z);
#endif /* USE_SUBRANGE */

    AvgRdy.xAccAvgRdy = 0;
 800d408:	4a59      	ldr	r2, [pc, #356]	; (800d570 <MotionSP_FrequencyDomainProcess+0x2d8>)
 800d40a:	7813      	ldrb	r3, [r2, #0]
 800d40c:	f36f 0300 	bfc	r3, #0, #1
 800d410:	7013      	strb	r3, [r2, #0]
    AvgRdy.yAccAvgRdy = 0;
 800d412:	4a57      	ldr	r2, [pc, #348]	; (800d570 <MotionSP_FrequencyDomainProcess+0x2d8>)
 800d414:	7813      	ldrb	r3, [r2, #0]
 800d416:	f36f 0341 	bfc	r3, #1, #1
 800d41a:	7013      	strb	r3, [r2, #0]
    AvgRdy.zAccAvgRdy = 0;
 800d41c:	4a54      	ldr	r2, [pc, #336]	; (800d570 <MotionSP_FrequencyDomainProcess+0x2d8>)
 800d41e:	7813      	ldrb	r3, [r2, #0]
 800d420:	f36f 0382 	bfc	r3, #2, #1
 800d424:	7013      	strb	r3, [r2, #0]
  }

  printf("\n\nFFT:\n");
 800d426:	4859      	ldr	r0, [pc, #356]	; (800d58c <MotionSP_FrequencyDomainProcess+0x2f4>)
 800d428:	f001 f852 	bl	800e4d0 <puts>
  fr_resolution = AcceleroODR.Frequency / ((float)(MotionSP_Parameters.FftSize));
 800d42c:	4b58      	ldr	r3, [pc, #352]	; (800d590 <MotionSP_FrequencyDomainProcess+0x2f8>)
 800d42e:	edd3 6a00 	vldr	s13, [r3]
 800d432:	4b3d      	ldr	r3, [pc, #244]	; (800d528 <MotionSP_FrequencyDomainProcess+0x290>)
 800d434:	881b      	ldrh	r3, [r3, #0]
 800d436:	ee07 3a90 	vmov	s15, r3
 800d43a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d442:	4b54      	ldr	r3, [pc, #336]	; (800d594 <MotionSP_FrequencyDomainProcess+0x2fc>)
 800d444:	edc3 7a00 	vstr	s15, [r3]
  amplitude_factor = (float) (MotionSP_Parameters.FftSize/8);
 800d448:	4b37      	ldr	r3, [pc, #220]	; (800d528 <MotionSP_FrequencyDomainProcess+0x290>)
 800d44a:	881b      	ldrh	r3, [r3, #0]
 800d44c:	08db      	lsrs	r3, r3, #3
 800d44e:	b29b      	uxth	r3, r3
 800d450:	ee07 3a90 	vmov	s15, r3
 800d454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d458:	4b4f      	ldr	r3, [pc, #316]	; (800d598 <MotionSP_FrequencyDomainProcess+0x300>)
 800d45a:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<MotionSP_Parameters.FftSize/2;i++)
 800d45e:	2300      	movs	r3, #0
 800d460:	607b      	str	r3, [r7, #4]
 800d462:	e050      	b.n	800d506 <MotionSP_FrequencyDomainProcess+0x26e>
    {
  	  printf("Fr,%f,x,%f,y,%f,z,%f\n",((float) i) * fr_resolution,
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	ee07 3a90 	vmov	s15, r3
 800d46a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d46e:	4b49      	ldr	r3, [pc, #292]	; (800d594 <MotionSP_FrequencyDomainProcess+0x2fc>)
 800d470:	edd3 7a00 	vldr	s15, [r3]
 800d474:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d478:	ee17 0a90 	vmov	r0, s15
 800d47c:	f7f3 f8c4 	bl	8000608 <__aeabi_f2d>
 800d480:	4682      	mov	sl, r0
 800d482:	468b      	mov	fp, r1
  			  fftOutX[i] / amplitude_factor,
 800d484:	4a33      	ldr	r2, [pc, #204]	; (800d554 <MotionSP_FrequencyDomainProcess+0x2bc>)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	4413      	add	r3, r2
 800d48c:	ed93 7a00 	vldr	s14, [r3]
 800d490:	4b41      	ldr	r3, [pc, #260]	; (800d598 <MotionSP_FrequencyDomainProcess+0x300>)
 800d492:	edd3 7a00 	vldr	s15, [r3]
 800d496:	eec7 6a27 	vdiv.f32	s13, s14, s15
  	  printf("Fr,%f,x,%f,y,%f,z,%f\n",((float) i) * fr_resolution,
 800d49a:	ee16 0a90 	vmov	r0, s13
 800d49e:	f7f3 f8b3 	bl	8000608 <__aeabi_f2d>
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	460d      	mov	r5, r1
			  fftOutY[i] / amplitude_factor,
 800d4a6:	4a33      	ldr	r2, [pc, #204]	; (800d574 <MotionSP_FrequencyDomainProcess+0x2dc>)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	4413      	add	r3, r2
 800d4ae:	ed93 7a00 	vldr	s14, [r3]
 800d4b2:	4b39      	ldr	r3, [pc, #228]	; (800d598 <MotionSP_FrequencyDomainProcess+0x300>)
 800d4b4:	edd3 7a00 	vldr	s15, [r3]
 800d4b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  	  printf("Fr,%f,x,%f,y,%f,z,%f\n",((float) i) * fr_resolution,
 800d4bc:	ee16 0a90 	vmov	r0, s13
 800d4c0:	f7f3 f8a2 	bl	8000608 <__aeabi_f2d>
 800d4c4:	4680      	mov	r8, r0
 800d4c6:	4689      	mov	r9, r1
			  fftOutZ[i] / amplitude_factor);
 800d4c8:	4a2d      	ldr	r2, [pc, #180]	; (800d580 <MotionSP_FrequencyDomainProcess+0x2e8>)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	ed93 7a00 	vldr	s14, [r3]
 800d4d4:	4b30      	ldr	r3, [pc, #192]	; (800d598 <MotionSP_FrequencyDomainProcess+0x300>)
 800d4d6:	edd3 7a00 	vldr	s15, [r3]
 800d4da:	eec7 6a27 	vdiv.f32	s13, s14, s15
  	  printf("Fr,%f,x,%f,y,%f,z,%f\n",((float) i) * fr_resolution,
 800d4de:	ee16 0a90 	vmov	r0, s13
 800d4e2:	f7f3 f891 	bl	8000608 <__aeabi_f2d>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d4ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d4f2:	e9cd 4500 	strd	r4, r5, [sp]
 800d4f6:	4652      	mov	r2, sl
 800d4f8:	465b      	mov	r3, fp
 800d4fa:	4828      	ldr	r0, [pc, #160]	; (800d59c <MotionSP_FrequencyDomainProcess+0x304>)
 800d4fc:	f000 ff62 	bl	800e3c4 <iprintf>
    for(int i=0;i<MotionSP_Parameters.FftSize/2;i++)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	3301      	adds	r3, #1
 800d504:	607b      	str	r3, [r7, #4]
 800d506:	4b08      	ldr	r3, [pc, #32]	; (800d528 <MotionSP_FrequencyDomainProcess+0x290>)
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	085b      	lsrs	r3, r3, #1
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	461a      	mov	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4293      	cmp	r3, r2
 800d514:	dba6      	blt.n	800d464 <MotionSP_FrequencyDomainProcess+0x1cc>
    }
  printf("\n\n");
 800d516:	4822      	ldr	r0, [pc, #136]	; (800d5a0 <MotionSP_FrequencyDomainProcess+0x308>)
 800d518:	f000 ffda 	bl	800e4d0 <puts>
}
 800d51c:	bf00      	nop
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d526:	bf00      	nop
 800d528:	200059b4 	.word	0x200059b4
 800d52c:	20007294 	.word	0x20007294
 800d530:	20004550 	.word	0x20004550
 800d534:	2000729c 	.word	0x2000729c
 800d538:	20000be4 	.word	0x20000be4
 800d53c:	20007a9c 	.word	0x20007a9c
 800d540:	200013e4 	.word	0x200013e4
 800d544:	2000829c 	.word	0x2000829c
 800d548:	20001be4 	.word	0x20001be4
 800d54c:	20004578 	.word	0x20004578
 800d550:	200023e4 	.word	0x200023e4
 800d554:	20002be4 	.word	0x20002be4
 800d558:	20004d9c 	.word	0x20004d9c
 800d55c:	20000394 	.word	0x20000394
 800d560:	20007288 	.word	0x20007288
 800d564:	20004d94 	.word	0x20004d94
 800d568:	20004db4 	.word	0x20004db4
 800d56c:	20004554 	.word	0x20004554
 800d570:	200033e4 	.word	0x200033e4
 800d574:	200033e8 	.word	0x200033e8
 800d578:	20004d96 	.word	0x20004d96
 800d57c:	200051b4 	.word	0x200051b4
 800d580:	20003be8 	.word	0x20003be8
 800d584:	20004d98 	.word	0x20004d98
 800d588:	200055b4 	.word	0x200055b4
 800d58c:	08010684 	.word	0x08010684
 800d590:	20008a9c 	.word	0x20008a9c
 800d594:	2000728c 	.word	0x2000728c
 800d598:	20007290 	.word	0x20007290
 800d59c:	0801068c 	.word	0x0801068c
 800d5a0:	080106a4 	.word	0x080106a4

0800d5a4 <__errno>:
 800d5a4:	4b01      	ldr	r3, [pc, #4]	; (800d5ac <__errno+0x8>)
 800d5a6:	6818      	ldr	r0, [r3, #0]
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	20000090 	.word	0x20000090

0800d5b0 <__sflush_r>:
 800d5b0:	898a      	ldrh	r2, [r1, #12]
 800d5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b6:	4605      	mov	r5, r0
 800d5b8:	0710      	lsls	r0, r2, #28
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	d458      	bmi.n	800d670 <__sflush_r+0xc0>
 800d5be:	684b      	ldr	r3, [r1, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	dc05      	bgt.n	800d5d0 <__sflush_r+0x20>
 800d5c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	dc02      	bgt.n	800d5d0 <__sflush_r+0x20>
 800d5ca:	2000      	movs	r0, #0
 800d5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5d2:	2e00      	cmp	r6, #0
 800d5d4:	d0f9      	beq.n	800d5ca <__sflush_r+0x1a>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5dc:	682f      	ldr	r7, [r5, #0]
 800d5de:	602b      	str	r3, [r5, #0]
 800d5e0:	d032      	beq.n	800d648 <__sflush_r+0x98>
 800d5e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	075a      	lsls	r2, r3, #29
 800d5e8:	d505      	bpl.n	800d5f6 <__sflush_r+0x46>
 800d5ea:	6863      	ldr	r3, [r4, #4]
 800d5ec:	1ac0      	subs	r0, r0, r3
 800d5ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5f0:	b10b      	cbz	r3, 800d5f6 <__sflush_r+0x46>
 800d5f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5f4:	1ac0      	subs	r0, r0, r3
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5fc:	6a21      	ldr	r1, [r4, #32]
 800d5fe:	4628      	mov	r0, r5
 800d600:	47b0      	blx	r6
 800d602:	1c43      	adds	r3, r0, #1
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	d106      	bne.n	800d616 <__sflush_r+0x66>
 800d608:	6829      	ldr	r1, [r5, #0]
 800d60a:	291d      	cmp	r1, #29
 800d60c:	d82c      	bhi.n	800d668 <__sflush_r+0xb8>
 800d60e:	4a2a      	ldr	r2, [pc, #168]	; (800d6b8 <__sflush_r+0x108>)
 800d610:	40ca      	lsrs	r2, r1
 800d612:	07d6      	lsls	r6, r2, #31
 800d614:	d528      	bpl.n	800d668 <__sflush_r+0xb8>
 800d616:	2200      	movs	r2, #0
 800d618:	6062      	str	r2, [r4, #4]
 800d61a:	04d9      	lsls	r1, r3, #19
 800d61c:	6922      	ldr	r2, [r4, #16]
 800d61e:	6022      	str	r2, [r4, #0]
 800d620:	d504      	bpl.n	800d62c <__sflush_r+0x7c>
 800d622:	1c42      	adds	r2, r0, #1
 800d624:	d101      	bne.n	800d62a <__sflush_r+0x7a>
 800d626:	682b      	ldr	r3, [r5, #0]
 800d628:	b903      	cbnz	r3, 800d62c <__sflush_r+0x7c>
 800d62a:	6560      	str	r0, [r4, #84]	; 0x54
 800d62c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d62e:	602f      	str	r7, [r5, #0]
 800d630:	2900      	cmp	r1, #0
 800d632:	d0ca      	beq.n	800d5ca <__sflush_r+0x1a>
 800d634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d638:	4299      	cmp	r1, r3
 800d63a:	d002      	beq.n	800d642 <__sflush_r+0x92>
 800d63c:	4628      	mov	r0, r5
 800d63e:	f000 f9ad 	bl	800d99c <_free_r>
 800d642:	2000      	movs	r0, #0
 800d644:	6360      	str	r0, [r4, #52]	; 0x34
 800d646:	e7c1      	b.n	800d5cc <__sflush_r+0x1c>
 800d648:	6a21      	ldr	r1, [r4, #32]
 800d64a:	2301      	movs	r3, #1
 800d64c:	4628      	mov	r0, r5
 800d64e:	47b0      	blx	r6
 800d650:	1c41      	adds	r1, r0, #1
 800d652:	d1c7      	bne.n	800d5e4 <__sflush_r+0x34>
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0c4      	beq.n	800d5e4 <__sflush_r+0x34>
 800d65a:	2b1d      	cmp	r3, #29
 800d65c:	d001      	beq.n	800d662 <__sflush_r+0xb2>
 800d65e:	2b16      	cmp	r3, #22
 800d660:	d101      	bne.n	800d666 <__sflush_r+0xb6>
 800d662:	602f      	str	r7, [r5, #0]
 800d664:	e7b1      	b.n	800d5ca <__sflush_r+0x1a>
 800d666:	89a3      	ldrh	r3, [r4, #12]
 800d668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d66c:	81a3      	strh	r3, [r4, #12]
 800d66e:	e7ad      	b.n	800d5cc <__sflush_r+0x1c>
 800d670:	690f      	ldr	r7, [r1, #16]
 800d672:	2f00      	cmp	r7, #0
 800d674:	d0a9      	beq.n	800d5ca <__sflush_r+0x1a>
 800d676:	0793      	lsls	r3, r2, #30
 800d678:	680e      	ldr	r6, [r1, #0]
 800d67a:	bf08      	it	eq
 800d67c:	694b      	ldreq	r3, [r1, #20]
 800d67e:	600f      	str	r7, [r1, #0]
 800d680:	bf18      	it	ne
 800d682:	2300      	movne	r3, #0
 800d684:	eba6 0807 	sub.w	r8, r6, r7
 800d688:	608b      	str	r3, [r1, #8]
 800d68a:	f1b8 0f00 	cmp.w	r8, #0
 800d68e:	dd9c      	ble.n	800d5ca <__sflush_r+0x1a>
 800d690:	6a21      	ldr	r1, [r4, #32]
 800d692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d694:	4643      	mov	r3, r8
 800d696:	463a      	mov	r2, r7
 800d698:	4628      	mov	r0, r5
 800d69a:	47b0      	blx	r6
 800d69c:	2800      	cmp	r0, #0
 800d69e:	dc06      	bgt.n	800d6ae <__sflush_r+0xfe>
 800d6a0:	89a3      	ldrh	r3, [r4, #12]
 800d6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6a6:	81a3      	strh	r3, [r4, #12]
 800d6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ac:	e78e      	b.n	800d5cc <__sflush_r+0x1c>
 800d6ae:	4407      	add	r7, r0
 800d6b0:	eba8 0800 	sub.w	r8, r8, r0
 800d6b4:	e7e9      	b.n	800d68a <__sflush_r+0xda>
 800d6b6:	bf00      	nop
 800d6b8:	20400001 	.word	0x20400001

0800d6bc <_fflush_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	690b      	ldr	r3, [r1, #16]
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	b913      	cbnz	r3, 800d6cc <_fflush_r+0x10>
 800d6c6:	2500      	movs	r5, #0
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	bd38      	pop	{r3, r4, r5, pc}
 800d6cc:	b118      	cbz	r0, 800d6d6 <_fflush_r+0x1a>
 800d6ce:	6983      	ldr	r3, [r0, #24]
 800d6d0:	b90b      	cbnz	r3, 800d6d6 <_fflush_r+0x1a>
 800d6d2:	f000 f887 	bl	800d7e4 <__sinit>
 800d6d6:	4b14      	ldr	r3, [pc, #80]	; (800d728 <_fflush_r+0x6c>)
 800d6d8:	429c      	cmp	r4, r3
 800d6da:	d11b      	bne.n	800d714 <_fflush_r+0x58>
 800d6dc:	686c      	ldr	r4, [r5, #4]
 800d6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d0ef      	beq.n	800d6c6 <_fflush_r+0xa>
 800d6e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6e8:	07d0      	lsls	r0, r2, #31
 800d6ea:	d404      	bmi.n	800d6f6 <_fflush_r+0x3a>
 800d6ec:	0599      	lsls	r1, r3, #22
 800d6ee:	d402      	bmi.n	800d6f6 <_fflush_r+0x3a>
 800d6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6f2:	f000 f93a 	bl	800d96a <__retarget_lock_acquire_recursive>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	f7ff ff59 	bl	800d5b0 <__sflush_r>
 800d6fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d700:	07da      	lsls	r2, r3, #31
 800d702:	4605      	mov	r5, r0
 800d704:	d4e0      	bmi.n	800d6c8 <_fflush_r+0xc>
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	059b      	lsls	r3, r3, #22
 800d70a:	d4dd      	bmi.n	800d6c8 <_fflush_r+0xc>
 800d70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d70e:	f000 f92d 	bl	800d96c <__retarget_lock_release_recursive>
 800d712:	e7d9      	b.n	800d6c8 <_fflush_r+0xc>
 800d714:	4b05      	ldr	r3, [pc, #20]	; (800d72c <_fflush_r+0x70>)
 800d716:	429c      	cmp	r4, r3
 800d718:	d101      	bne.n	800d71e <_fflush_r+0x62>
 800d71a:	68ac      	ldr	r4, [r5, #8]
 800d71c:	e7df      	b.n	800d6de <_fflush_r+0x22>
 800d71e:	4b04      	ldr	r3, [pc, #16]	; (800d730 <_fflush_r+0x74>)
 800d720:	429c      	cmp	r4, r3
 800d722:	bf08      	it	eq
 800d724:	68ec      	ldreq	r4, [r5, #12]
 800d726:	e7da      	b.n	800d6de <_fflush_r+0x22>
 800d728:	080243c4 	.word	0x080243c4
 800d72c:	080243e4 	.word	0x080243e4
 800d730:	080243a4 	.word	0x080243a4

0800d734 <std>:
 800d734:	2300      	movs	r3, #0
 800d736:	b510      	push	{r4, lr}
 800d738:	4604      	mov	r4, r0
 800d73a:	e9c0 3300 	strd	r3, r3, [r0]
 800d73e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d742:	6083      	str	r3, [r0, #8]
 800d744:	8181      	strh	r1, [r0, #12]
 800d746:	6643      	str	r3, [r0, #100]	; 0x64
 800d748:	81c2      	strh	r2, [r0, #14]
 800d74a:	6183      	str	r3, [r0, #24]
 800d74c:	4619      	mov	r1, r3
 800d74e:	2208      	movs	r2, #8
 800d750:	305c      	adds	r0, #92	; 0x5c
 800d752:	f000 f91a 	bl	800d98a <memset>
 800d756:	4b05      	ldr	r3, [pc, #20]	; (800d76c <std+0x38>)
 800d758:	6263      	str	r3, [r4, #36]	; 0x24
 800d75a:	4b05      	ldr	r3, [pc, #20]	; (800d770 <std+0x3c>)
 800d75c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d75e:	4b05      	ldr	r3, [pc, #20]	; (800d774 <std+0x40>)
 800d760:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d762:	4b05      	ldr	r3, [pc, #20]	; (800d778 <std+0x44>)
 800d764:	6224      	str	r4, [r4, #32]
 800d766:	6323      	str	r3, [r4, #48]	; 0x30
 800d768:	bd10      	pop	{r4, pc}
 800d76a:	bf00      	nop
 800d76c:	0800e501 	.word	0x0800e501
 800d770:	0800e523 	.word	0x0800e523
 800d774:	0800e55b 	.word	0x0800e55b
 800d778:	0800e57f 	.word	0x0800e57f

0800d77c <_cleanup_r>:
 800d77c:	4901      	ldr	r1, [pc, #4]	; (800d784 <_cleanup_r+0x8>)
 800d77e:	f000 b8af 	b.w	800d8e0 <_fwalk_reent>
 800d782:	bf00      	nop
 800d784:	0800d6bd 	.word	0x0800d6bd

0800d788 <__sfmoreglue>:
 800d788:	b570      	push	{r4, r5, r6, lr}
 800d78a:	1e4a      	subs	r2, r1, #1
 800d78c:	2568      	movs	r5, #104	; 0x68
 800d78e:	4355      	muls	r5, r2
 800d790:	460e      	mov	r6, r1
 800d792:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d796:	f000 f951 	bl	800da3c <_malloc_r>
 800d79a:	4604      	mov	r4, r0
 800d79c:	b140      	cbz	r0, 800d7b0 <__sfmoreglue+0x28>
 800d79e:	2100      	movs	r1, #0
 800d7a0:	e9c0 1600 	strd	r1, r6, [r0]
 800d7a4:	300c      	adds	r0, #12
 800d7a6:	60a0      	str	r0, [r4, #8]
 800d7a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7ac:	f000 f8ed 	bl	800d98a <memset>
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	bd70      	pop	{r4, r5, r6, pc}

0800d7b4 <__sfp_lock_acquire>:
 800d7b4:	4801      	ldr	r0, [pc, #4]	; (800d7bc <__sfp_lock_acquire+0x8>)
 800d7b6:	f000 b8d8 	b.w	800d96a <__retarget_lock_acquire_recursive>
 800d7ba:	bf00      	nop
 800d7bc:	20008ab0 	.word	0x20008ab0

0800d7c0 <__sfp_lock_release>:
 800d7c0:	4801      	ldr	r0, [pc, #4]	; (800d7c8 <__sfp_lock_release+0x8>)
 800d7c2:	f000 b8d3 	b.w	800d96c <__retarget_lock_release_recursive>
 800d7c6:	bf00      	nop
 800d7c8:	20008ab0 	.word	0x20008ab0

0800d7cc <__sinit_lock_acquire>:
 800d7cc:	4801      	ldr	r0, [pc, #4]	; (800d7d4 <__sinit_lock_acquire+0x8>)
 800d7ce:	f000 b8cc 	b.w	800d96a <__retarget_lock_acquire_recursive>
 800d7d2:	bf00      	nop
 800d7d4:	20008aab 	.word	0x20008aab

0800d7d8 <__sinit_lock_release>:
 800d7d8:	4801      	ldr	r0, [pc, #4]	; (800d7e0 <__sinit_lock_release+0x8>)
 800d7da:	f000 b8c7 	b.w	800d96c <__retarget_lock_release_recursive>
 800d7de:	bf00      	nop
 800d7e0:	20008aab 	.word	0x20008aab

0800d7e4 <__sinit>:
 800d7e4:	b510      	push	{r4, lr}
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	f7ff fff0 	bl	800d7cc <__sinit_lock_acquire>
 800d7ec:	69a3      	ldr	r3, [r4, #24]
 800d7ee:	b11b      	cbz	r3, 800d7f8 <__sinit+0x14>
 800d7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7f4:	f7ff bff0 	b.w	800d7d8 <__sinit_lock_release>
 800d7f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7fc:	6523      	str	r3, [r4, #80]	; 0x50
 800d7fe:	4b13      	ldr	r3, [pc, #76]	; (800d84c <__sinit+0x68>)
 800d800:	4a13      	ldr	r2, [pc, #76]	; (800d850 <__sinit+0x6c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	62a2      	str	r2, [r4, #40]	; 0x28
 800d806:	42a3      	cmp	r3, r4
 800d808:	bf04      	itt	eq
 800d80a:	2301      	moveq	r3, #1
 800d80c:	61a3      	streq	r3, [r4, #24]
 800d80e:	4620      	mov	r0, r4
 800d810:	f000 f820 	bl	800d854 <__sfp>
 800d814:	6060      	str	r0, [r4, #4]
 800d816:	4620      	mov	r0, r4
 800d818:	f000 f81c 	bl	800d854 <__sfp>
 800d81c:	60a0      	str	r0, [r4, #8]
 800d81e:	4620      	mov	r0, r4
 800d820:	f000 f818 	bl	800d854 <__sfp>
 800d824:	2200      	movs	r2, #0
 800d826:	60e0      	str	r0, [r4, #12]
 800d828:	2104      	movs	r1, #4
 800d82a:	6860      	ldr	r0, [r4, #4]
 800d82c:	f7ff ff82 	bl	800d734 <std>
 800d830:	68a0      	ldr	r0, [r4, #8]
 800d832:	2201      	movs	r2, #1
 800d834:	2109      	movs	r1, #9
 800d836:	f7ff ff7d 	bl	800d734 <std>
 800d83a:	68e0      	ldr	r0, [r4, #12]
 800d83c:	2202      	movs	r2, #2
 800d83e:	2112      	movs	r1, #18
 800d840:	f7ff ff78 	bl	800d734 <std>
 800d844:	2301      	movs	r3, #1
 800d846:	61a3      	str	r3, [r4, #24]
 800d848:	e7d2      	b.n	800d7f0 <__sinit+0xc>
 800d84a:	bf00      	nop
 800d84c:	08024404 	.word	0x08024404
 800d850:	0800d77d 	.word	0x0800d77d

0800d854 <__sfp>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	4607      	mov	r7, r0
 800d858:	f7ff ffac 	bl	800d7b4 <__sfp_lock_acquire>
 800d85c:	4b1e      	ldr	r3, [pc, #120]	; (800d8d8 <__sfp+0x84>)
 800d85e:	681e      	ldr	r6, [r3, #0]
 800d860:	69b3      	ldr	r3, [r6, #24]
 800d862:	b913      	cbnz	r3, 800d86a <__sfp+0x16>
 800d864:	4630      	mov	r0, r6
 800d866:	f7ff ffbd 	bl	800d7e4 <__sinit>
 800d86a:	3648      	adds	r6, #72	; 0x48
 800d86c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d870:	3b01      	subs	r3, #1
 800d872:	d503      	bpl.n	800d87c <__sfp+0x28>
 800d874:	6833      	ldr	r3, [r6, #0]
 800d876:	b30b      	cbz	r3, 800d8bc <__sfp+0x68>
 800d878:	6836      	ldr	r6, [r6, #0]
 800d87a:	e7f7      	b.n	800d86c <__sfp+0x18>
 800d87c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d880:	b9d5      	cbnz	r5, 800d8b8 <__sfp+0x64>
 800d882:	4b16      	ldr	r3, [pc, #88]	; (800d8dc <__sfp+0x88>)
 800d884:	60e3      	str	r3, [r4, #12]
 800d886:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d88a:	6665      	str	r5, [r4, #100]	; 0x64
 800d88c:	f000 f86c 	bl	800d968 <__retarget_lock_init_recursive>
 800d890:	f7ff ff96 	bl	800d7c0 <__sfp_lock_release>
 800d894:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d898:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d89c:	6025      	str	r5, [r4, #0]
 800d89e:	61a5      	str	r5, [r4, #24]
 800d8a0:	2208      	movs	r2, #8
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8a8:	f000 f86f 	bl	800d98a <memset>
 800d8ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8b8:	3468      	adds	r4, #104	; 0x68
 800d8ba:	e7d9      	b.n	800d870 <__sfp+0x1c>
 800d8bc:	2104      	movs	r1, #4
 800d8be:	4638      	mov	r0, r7
 800d8c0:	f7ff ff62 	bl	800d788 <__sfmoreglue>
 800d8c4:	4604      	mov	r4, r0
 800d8c6:	6030      	str	r0, [r6, #0]
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	d1d5      	bne.n	800d878 <__sfp+0x24>
 800d8cc:	f7ff ff78 	bl	800d7c0 <__sfp_lock_release>
 800d8d0:	230c      	movs	r3, #12
 800d8d2:	603b      	str	r3, [r7, #0]
 800d8d4:	e7ee      	b.n	800d8b4 <__sfp+0x60>
 800d8d6:	bf00      	nop
 800d8d8:	08024404 	.word	0x08024404
 800d8dc:	ffff0001 	.word	0xffff0001

0800d8e0 <_fwalk_reent>:
 800d8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8e4:	4606      	mov	r6, r0
 800d8e6:	4688      	mov	r8, r1
 800d8e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8ec:	2700      	movs	r7, #0
 800d8ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8f2:	f1b9 0901 	subs.w	r9, r9, #1
 800d8f6:	d505      	bpl.n	800d904 <_fwalk_reent+0x24>
 800d8f8:	6824      	ldr	r4, [r4, #0]
 800d8fa:	2c00      	cmp	r4, #0
 800d8fc:	d1f7      	bne.n	800d8ee <_fwalk_reent+0xe>
 800d8fe:	4638      	mov	r0, r7
 800d900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d904:	89ab      	ldrh	r3, [r5, #12]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d907      	bls.n	800d91a <_fwalk_reent+0x3a>
 800d90a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d90e:	3301      	adds	r3, #1
 800d910:	d003      	beq.n	800d91a <_fwalk_reent+0x3a>
 800d912:	4629      	mov	r1, r5
 800d914:	4630      	mov	r0, r6
 800d916:	47c0      	blx	r8
 800d918:	4307      	orrs	r7, r0
 800d91a:	3568      	adds	r5, #104	; 0x68
 800d91c:	e7e9      	b.n	800d8f2 <_fwalk_reent+0x12>
	...

0800d920 <__libc_init_array>:
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	4d0d      	ldr	r5, [pc, #52]	; (800d958 <__libc_init_array+0x38>)
 800d924:	4c0d      	ldr	r4, [pc, #52]	; (800d95c <__libc_init_array+0x3c>)
 800d926:	1b64      	subs	r4, r4, r5
 800d928:	10a4      	asrs	r4, r4, #2
 800d92a:	2600      	movs	r6, #0
 800d92c:	42a6      	cmp	r6, r4
 800d92e:	d109      	bne.n	800d944 <__libc_init_array+0x24>
 800d930:	4d0b      	ldr	r5, [pc, #44]	; (800d960 <__libc_init_array+0x40>)
 800d932:	4c0c      	ldr	r4, [pc, #48]	; (800d964 <__libc_init_array+0x44>)
 800d934:	f002 fdc4 	bl	80104c0 <_init>
 800d938:	1b64      	subs	r4, r4, r5
 800d93a:	10a4      	asrs	r4, r4, #2
 800d93c:	2600      	movs	r6, #0
 800d93e:	42a6      	cmp	r6, r4
 800d940:	d105      	bne.n	800d94e <__libc_init_array+0x2e>
 800d942:	bd70      	pop	{r4, r5, r6, pc}
 800d944:	f855 3b04 	ldr.w	r3, [r5], #4
 800d948:	4798      	blx	r3
 800d94a:	3601      	adds	r6, #1
 800d94c:	e7ee      	b.n	800d92c <__libc_init_array+0xc>
 800d94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d952:	4798      	blx	r3
 800d954:	3601      	adds	r6, #1
 800d956:	e7f2      	b.n	800d93e <__libc_init_array+0x1e>
 800d958:	080247c0 	.word	0x080247c0
 800d95c:	080247c0 	.word	0x080247c0
 800d960:	080247c0 	.word	0x080247c0
 800d964:	080247c4 	.word	0x080247c4

0800d968 <__retarget_lock_init_recursive>:
 800d968:	4770      	bx	lr

0800d96a <__retarget_lock_acquire_recursive>:
 800d96a:	4770      	bx	lr

0800d96c <__retarget_lock_release_recursive>:
 800d96c:	4770      	bx	lr

0800d96e <memcpy>:
 800d96e:	440a      	add	r2, r1
 800d970:	4291      	cmp	r1, r2
 800d972:	f100 33ff 	add.w	r3, r0, #4294967295
 800d976:	d100      	bne.n	800d97a <memcpy+0xc>
 800d978:	4770      	bx	lr
 800d97a:	b510      	push	{r4, lr}
 800d97c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d980:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d984:	4291      	cmp	r1, r2
 800d986:	d1f9      	bne.n	800d97c <memcpy+0xe>
 800d988:	bd10      	pop	{r4, pc}

0800d98a <memset>:
 800d98a:	4402      	add	r2, r0
 800d98c:	4603      	mov	r3, r0
 800d98e:	4293      	cmp	r3, r2
 800d990:	d100      	bne.n	800d994 <memset+0xa>
 800d992:	4770      	bx	lr
 800d994:	f803 1b01 	strb.w	r1, [r3], #1
 800d998:	e7f9      	b.n	800d98e <memset+0x4>
	...

0800d99c <_free_r>:
 800d99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d99e:	2900      	cmp	r1, #0
 800d9a0:	d048      	beq.n	800da34 <_free_r+0x98>
 800d9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9a6:	9001      	str	r0, [sp, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f1a1 0404 	sub.w	r4, r1, #4
 800d9ae:	bfb8      	it	lt
 800d9b0:	18e4      	addlt	r4, r4, r3
 800d9b2:	f001 fdc7 	bl	800f544 <__malloc_lock>
 800d9b6:	4a20      	ldr	r2, [pc, #128]	; (800da38 <_free_r+0x9c>)
 800d9b8:	9801      	ldr	r0, [sp, #4]
 800d9ba:	6813      	ldr	r3, [r2, #0]
 800d9bc:	4615      	mov	r5, r2
 800d9be:	b933      	cbnz	r3, 800d9ce <_free_r+0x32>
 800d9c0:	6063      	str	r3, [r4, #4]
 800d9c2:	6014      	str	r4, [r2, #0]
 800d9c4:	b003      	add	sp, #12
 800d9c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9ca:	f001 bdc1 	b.w	800f550 <__malloc_unlock>
 800d9ce:	42a3      	cmp	r3, r4
 800d9d0:	d90b      	bls.n	800d9ea <_free_r+0x4e>
 800d9d2:	6821      	ldr	r1, [r4, #0]
 800d9d4:	1862      	adds	r2, r4, r1
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	bf04      	itt	eq
 800d9da:	681a      	ldreq	r2, [r3, #0]
 800d9dc:	685b      	ldreq	r3, [r3, #4]
 800d9de:	6063      	str	r3, [r4, #4]
 800d9e0:	bf04      	itt	eq
 800d9e2:	1852      	addeq	r2, r2, r1
 800d9e4:	6022      	streq	r2, [r4, #0]
 800d9e6:	602c      	str	r4, [r5, #0]
 800d9e8:	e7ec      	b.n	800d9c4 <_free_r+0x28>
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	b10b      	cbz	r3, 800d9f4 <_free_r+0x58>
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	d9fa      	bls.n	800d9ea <_free_r+0x4e>
 800d9f4:	6811      	ldr	r1, [r2, #0]
 800d9f6:	1855      	adds	r5, r2, r1
 800d9f8:	42a5      	cmp	r5, r4
 800d9fa:	d10b      	bne.n	800da14 <_free_r+0x78>
 800d9fc:	6824      	ldr	r4, [r4, #0]
 800d9fe:	4421      	add	r1, r4
 800da00:	1854      	adds	r4, r2, r1
 800da02:	42a3      	cmp	r3, r4
 800da04:	6011      	str	r1, [r2, #0]
 800da06:	d1dd      	bne.n	800d9c4 <_free_r+0x28>
 800da08:	681c      	ldr	r4, [r3, #0]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	6053      	str	r3, [r2, #4]
 800da0e:	4421      	add	r1, r4
 800da10:	6011      	str	r1, [r2, #0]
 800da12:	e7d7      	b.n	800d9c4 <_free_r+0x28>
 800da14:	d902      	bls.n	800da1c <_free_r+0x80>
 800da16:	230c      	movs	r3, #12
 800da18:	6003      	str	r3, [r0, #0]
 800da1a:	e7d3      	b.n	800d9c4 <_free_r+0x28>
 800da1c:	6825      	ldr	r5, [r4, #0]
 800da1e:	1961      	adds	r1, r4, r5
 800da20:	428b      	cmp	r3, r1
 800da22:	bf04      	itt	eq
 800da24:	6819      	ldreq	r1, [r3, #0]
 800da26:	685b      	ldreq	r3, [r3, #4]
 800da28:	6063      	str	r3, [r4, #4]
 800da2a:	bf04      	itt	eq
 800da2c:	1949      	addeq	r1, r1, r5
 800da2e:	6021      	streq	r1, [r4, #0]
 800da30:	6054      	str	r4, [r2, #4]
 800da32:	e7c7      	b.n	800d9c4 <_free_r+0x28>
 800da34:	b003      	add	sp, #12
 800da36:	bd30      	pop	{r4, r5, pc}
 800da38:	200043e8 	.word	0x200043e8

0800da3c <_malloc_r>:
 800da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3e:	1ccd      	adds	r5, r1, #3
 800da40:	f025 0503 	bic.w	r5, r5, #3
 800da44:	3508      	adds	r5, #8
 800da46:	2d0c      	cmp	r5, #12
 800da48:	bf38      	it	cc
 800da4a:	250c      	movcc	r5, #12
 800da4c:	2d00      	cmp	r5, #0
 800da4e:	4606      	mov	r6, r0
 800da50:	db01      	blt.n	800da56 <_malloc_r+0x1a>
 800da52:	42a9      	cmp	r1, r5
 800da54:	d903      	bls.n	800da5e <_malloc_r+0x22>
 800da56:	230c      	movs	r3, #12
 800da58:	6033      	str	r3, [r6, #0]
 800da5a:	2000      	movs	r0, #0
 800da5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da5e:	f001 fd71 	bl	800f544 <__malloc_lock>
 800da62:	4921      	ldr	r1, [pc, #132]	; (800dae8 <_malloc_r+0xac>)
 800da64:	680a      	ldr	r2, [r1, #0]
 800da66:	4614      	mov	r4, r2
 800da68:	b99c      	cbnz	r4, 800da92 <_malloc_r+0x56>
 800da6a:	4f20      	ldr	r7, [pc, #128]	; (800daec <_malloc_r+0xb0>)
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	b923      	cbnz	r3, 800da7a <_malloc_r+0x3e>
 800da70:	4621      	mov	r1, r4
 800da72:	4630      	mov	r0, r6
 800da74:	f000 fd34 	bl	800e4e0 <_sbrk_r>
 800da78:	6038      	str	r0, [r7, #0]
 800da7a:	4629      	mov	r1, r5
 800da7c:	4630      	mov	r0, r6
 800da7e:	f000 fd2f 	bl	800e4e0 <_sbrk_r>
 800da82:	1c43      	adds	r3, r0, #1
 800da84:	d123      	bne.n	800dace <_malloc_r+0x92>
 800da86:	230c      	movs	r3, #12
 800da88:	6033      	str	r3, [r6, #0]
 800da8a:	4630      	mov	r0, r6
 800da8c:	f001 fd60 	bl	800f550 <__malloc_unlock>
 800da90:	e7e3      	b.n	800da5a <_malloc_r+0x1e>
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	1b5b      	subs	r3, r3, r5
 800da96:	d417      	bmi.n	800dac8 <_malloc_r+0x8c>
 800da98:	2b0b      	cmp	r3, #11
 800da9a:	d903      	bls.n	800daa4 <_malloc_r+0x68>
 800da9c:	6023      	str	r3, [r4, #0]
 800da9e:	441c      	add	r4, r3
 800daa0:	6025      	str	r5, [r4, #0]
 800daa2:	e004      	b.n	800daae <_malloc_r+0x72>
 800daa4:	6863      	ldr	r3, [r4, #4]
 800daa6:	42a2      	cmp	r2, r4
 800daa8:	bf0c      	ite	eq
 800daaa:	600b      	streq	r3, [r1, #0]
 800daac:	6053      	strne	r3, [r2, #4]
 800daae:	4630      	mov	r0, r6
 800dab0:	f001 fd4e 	bl	800f550 <__malloc_unlock>
 800dab4:	f104 000b 	add.w	r0, r4, #11
 800dab8:	1d23      	adds	r3, r4, #4
 800daba:	f020 0007 	bic.w	r0, r0, #7
 800dabe:	1ac2      	subs	r2, r0, r3
 800dac0:	d0cc      	beq.n	800da5c <_malloc_r+0x20>
 800dac2:	1a1b      	subs	r3, r3, r0
 800dac4:	50a3      	str	r3, [r4, r2]
 800dac6:	e7c9      	b.n	800da5c <_malloc_r+0x20>
 800dac8:	4622      	mov	r2, r4
 800daca:	6864      	ldr	r4, [r4, #4]
 800dacc:	e7cc      	b.n	800da68 <_malloc_r+0x2c>
 800dace:	1cc4      	adds	r4, r0, #3
 800dad0:	f024 0403 	bic.w	r4, r4, #3
 800dad4:	42a0      	cmp	r0, r4
 800dad6:	d0e3      	beq.n	800daa0 <_malloc_r+0x64>
 800dad8:	1a21      	subs	r1, r4, r0
 800dada:	4630      	mov	r0, r6
 800dadc:	f000 fd00 	bl	800e4e0 <_sbrk_r>
 800dae0:	3001      	adds	r0, #1
 800dae2:	d1dd      	bne.n	800daa0 <_malloc_r+0x64>
 800dae4:	e7cf      	b.n	800da86 <_malloc_r+0x4a>
 800dae6:	bf00      	nop
 800dae8:	200043e8 	.word	0x200043e8
 800daec:	200043ec 	.word	0x200043ec

0800daf0 <__cvt>:
 800daf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800daf4:	ec55 4b10 	vmov	r4, r5, d0
 800daf8:	2d00      	cmp	r5, #0
 800dafa:	460e      	mov	r6, r1
 800dafc:	4619      	mov	r1, r3
 800dafe:	462b      	mov	r3, r5
 800db00:	bfbb      	ittet	lt
 800db02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800db06:	461d      	movlt	r5, r3
 800db08:	2300      	movge	r3, #0
 800db0a:	232d      	movlt	r3, #45	; 0x2d
 800db0c:	700b      	strb	r3, [r1, #0]
 800db0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800db14:	4691      	mov	r9, r2
 800db16:	f023 0820 	bic.w	r8, r3, #32
 800db1a:	bfbc      	itt	lt
 800db1c:	4622      	movlt	r2, r4
 800db1e:	4614      	movlt	r4, r2
 800db20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db24:	d005      	beq.n	800db32 <__cvt+0x42>
 800db26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800db2a:	d100      	bne.n	800db2e <__cvt+0x3e>
 800db2c:	3601      	adds	r6, #1
 800db2e:	2102      	movs	r1, #2
 800db30:	e000      	b.n	800db34 <__cvt+0x44>
 800db32:	2103      	movs	r1, #3
 800db34:	ab03      	add	r3, sp, #12
 800db36:	9301      	str	r3, [sp, #4]
 800db38:	ab02      	add	r3, sp, #8
 800db3a:	9300      	str	r3, [sp, #0]
 800db3c:	ec45 4b10 	vmov	d0, r4, r5
 800db40:	4653      	mov	r3, sl
 800db42:	4632      	mov	r2, r6
 800db44:	f000 fe90 	bl	800e868 <_dtoa_r>
 800db48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800db4c:	4607      	mov	r7, r0
 800db4e:	d102      	bne.n	800db56 <__cvt+0x66>
 800db50:	f019 0f01 	tst.w	r9, #1
 800db54:	d022      	beq.n	800db9c <__cvt+0xac>
 800db56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db5a:	eb07 0906 	add.w	r9, r7, r6
 800db5e:	d110      	bne.n	800db82 <__cvt+0x92>
 800db60:	783b      	ldrb	r3, [r7, #0]
 800db62:	2b30      	cmp	r3, #48	; 0x30
 800db64:	d10a      	bne.n	800db7c <__cvt+0x8c>
 800db66:	2200      	movs	r2, #0
 800db68:	2300      	movs	r3, #0
 800db6a:	4620      	mov	r0, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	f7f3 f80b 	bl	8000b88 <__aeabi_dcmpeq>
 800db72:	b918      	cbnz	r0, 800db7c <__cvt+0x8c>
 800db74:	f1c6 0601 	rsb	r6, r6, #1
 800db78:	f8ca 6000 	str.w	r6, [sl]
 800db7c:	f8da 3000 	ldr.w	r3, [sl]
 800db80:	4499      	add	r9, r3
 800db82:	2200      	movs	r2, #0
 800db84:	2300      	movs	r3, #0
 800db86:	4620      	mov	r0, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	f7f2 fffd 	bl	8000b88 <__aeabi_dcmpeq>
 800db8e:	b108      	cbz	r0, 800db94 <__cvt+0xa4>
 800db90:	f8cd 900c 	str.w	r9, [sp, #12]
 800db94:	2230      	movs	r2, #48	; 0x30
 800db96:	9b03      	ldr	r3, [sp, #12]
 800db98:	454b      	cmp	r3, r9
 800db9a:	d307      	bcc.n	800dbac <__cvt+0xbc>
 800db9c:	9b03      	ldr	r3, [sp, #12]
 800db9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dba0:	1bdb      	subs	r3, r3, r7
 800dba2:	4638      	mov	r0, r7
 800dba4:	6013      	str	r3, [r2, #0]
 800dba6:	b004      	add	sp, #16
 800dba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbac:	1c59      	adds	r1, r3, #1
 800dbae:	9103      	str	r1, [sp, #12]
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	e7f0      	b.n	800db96 <__cvt+0xa6>

0800dbb4 <__exponent>:
 800dbb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2900      	cmp	r1, #0
 800dbba:	bfb8      	it	lt
 800dbbc:	4249      	neglt	r1, r1
 800dbbe:	f803 2b02 	strb.w	r2, [r3], #2
 800dbc2:	bfb4      	ite	lt
 800dbc4:	222d      	movlt	r2, #45	; 0x2d
 800dbc6:	222b      	movge	r2, #43	; 0x2b
 800dbc8:	2909      	cmp	r1, #9
 800dbca:	7042      	strb	r2, [r0, #1]
 800dbcc:	dd2a      	ble.n	800dc24 <__exponent+0x70>
 800dbce:	f10d 0407 	add.w	r4, sp, #7
 800dbd2:	46a4      	mov	ip, r4
 800dbd4:	270a      	movs	r7, #10
 800dbd6:	46a6      	mov	lr, r4
 800dbd8:	460a      	mov	r2, r1
 800dbda:	fb91 f6f7 	sdiv	r6, r1, r7
 800dbde:	fb07 1516 	mls	r5, r7, r6, r1
 800dbe2:	3530      	adds	r5, #48	; 0x30
 800dbe4:	2a63      	cmp	r2, #99	; 0x63
 800dbe6:	f104 34ff 	add.w	r4, r4, #4294967295
 800dbea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dbee:	4631      	mov	r1, r6
 800dbf0:	dcf1      	bgt.n	800dbd6 <__exponent+0x22>
 800dbf2:	3130      	adds	r1, #48	; 0x30
 800dbf4:	f1ae 0502 	sub.w	r5, lr, #2
 800dbf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dbfc:	1c44      	adds	r4, r0, #1
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4561      	cmp	r1, ip
 800dc02:	d30a      	bcc.n	800dc1a <__exponent+0x66>
 800dc04:	f10d 0209 	add.w	r2, sp, #9
 800dc08:	eba2 020e 	sub.w	r2, r2, lr
 800dc0c:	4565      	cmp	r5, ip
 800dc0e:	bf88      	it	hi
 800dc10:	2200      	movhi	r2, #0
 800dc12:	4413      	add	r3, r2
 800dc14:	1a18      	subs	r0, r3, r0
 800dc16:	b003      	add	sp, #12
 800dc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dc22:	e7ed      	b.n	800dc00 <__exponent+0x4c>
 800dc24:	2330      	movs	r3, #48	; 0x30
 800dc26:	3130      	adds	r1, #48	; 0x30
 800dc28:	7083      	strb	r3, [r0, #2]
 800dc2a:	70c1      	strb	r1, [r0, #3]
 800dc2c:	1d03      	adds	r3, r0, #4
 800dc2e:	e7f1      	b.n	800dc14 <__exponent+0x60>

0800dc30 <_printf_float>:
 800dc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc34:	ed2d 8b02 	vpush	{d8}
 800dc38:	b08d      	sub	sp, #52	; 0x34
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dc40:	4616      	mov	r6, r2
 800dc42:	461f      	mov	r7, r3
 800dc44:	4605      	mov	r5, r0
 800dc46:	f001 fbfb 	bl	800f440 <_localeconv_r>
 800dc4a:	f8d0 a000 	ldr.w	sl, [r0]
 800dc4e:	4650      	mov	r0, sl
 800dc50:	f7f2 fb1e 	bl	8000290 <strlen>
 800dc54:	2300      	movs	r3, #0
 800dc56:	930a      	str	r3, [sp, #40]	; 0x28
 800dc58:	6823      	ldr	r3, [r4, #0]
 800dc5a:	9305      	str	r3, [sp, #20]
 800dc5c:	f8d8 3000 	ldr.w	r3, [r8]
 800dc60:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dc64:	3307      	adds	r3, #7
 800dc66:	f023 0307 	bic.w	r3, r3, #7
 800dc6a:	f103 0208 	add.w	r2, r3, #8
 800dc6e:	f8c8 2000 	str.w	r2, [r8]
 800dc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dc7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dc7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dc82:	9307      	str	r3, [sp, #28]
 800dc84:	f8cd 8018 	str.w	r8, [sp, #24]
 800dc88:	ee08 0a10 	vmov	s16, r0
 800dc8c:	4b9f      	ldr	r3, [pc, #636]	; (800df0c <_printf_float+0x2dc>)
 800dc8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc92:	f04f 32ff 	mov.w	r2, #4294967295
 800dc96:	f7f2 ffa9 	bl	8000bec <__aeabi_dcmpun>
 800dc9a:	bb88      	cbnz	r0, 800dd00 <_printf_float+0xd0>
 800dc9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dca0:	4b9a      	ldr	r3, [pc, #616]	; (800df0c <_printf_float+0x2dc>)
 800dca2:	f04f 32ff 	mov.w	r2, #4294967295
 800dca6:	f7f2 ff83 	bl	8000bb0 <__aeabi_dcmple>
 800dcaa:	bb48      	cbnz	r0, 800dd00 <_printf_float+0xd0>
 800dcac:	2200      	movs	r2, #0
 800dcae:	2300      	movs	r3, #0
 800dcb0:	4640      	mov	r0, r8
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	f7f2 ff72 	bl	8000b9c <__aeabi_dcmplt>
 800dcb8:	b110      	cbz	r0, 800dcc0 <_printf_float+0x90>
 800dcba:	232d      	movs	r3, #45	; 0x2d
 800dcbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcc0:	4b93      	ldr	r3, [pc, #588]	; (800df10 <_printf_float+0x2e0>)
 800dcc2:	4894      	ldr	r0, [pc, #592]	; (800df14 <_printf_float+0x2e4>)
 800dcc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dcc8:	bf94      	ite	ls
 800dcca:	4698      	movls	r8, r3
 800dccc:	4680      	movhi	r8, r0
 800dcce:	2303      	movs	r3, #3
 800dcd0:	6123      	str	r3, [r4, #16]
 800dcd2:	9b05      	ldr	r3, [sp, #20]
 800dcd4:	f023 0204 	bic.w	r2, r3, #4
 800dcd8:	6022      	str	r2, [r4, #0]
 800dcda:	f04f 0900 	mov.w	r9, #0
 800dcde:	9700      	str	r7, [sp, #0]
 800dce0:	4633      	mov	r3, r6
 800dce2:	aa0b      	add	r2, sp, #44	; 0x2c
 800dce4:	4621      	mov	r1, r4
 800dce6:	4628      	mov	r0, r5
 800dce8:	f000 f9d8 	bl	800e09c <_printf_common>
 800dcec:	3001      	adds	r0, #1
 800dcee:	f040 8090 	bne.w	800de12 <_printf_float+0x1e2>
 800dcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf6:	b00d      	add	sp, #52	; 0x34
 800dcf8:	ecbd 8b02 	vpop	{d8}
 800dcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd00:	4642      	mov	r2, r8
 800dd02:	464b      	mov	r3, r9
 800dd04:	4640      	mov	r0, r8
 800dd06:	4649      	mov	r1, r9
 800dd08:	f7f2 ff70 	bl	8000bec <__aeabi_dcmpun>
 800dd0c:	b140      	cbz	r0, 800dd20 <_printf_float+0xf0>
 800dd0e:	464b      	mov	r3, r9
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	bfbc      	itt	lt
 800dd14:	232d      	movlt	r3, #45	; 0x2d
 800dd16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dd1a:	487f      	ldr	r0, [pc, #508]	; (800df18 <_printf_float+0x2e8>)
 800dd1c:	4b7f      	ldr	r3, [pc, #508]	; (800df1c <_printf_float+0x2ec>)
 800dd1e:	e7d1      	b.n	800dcc4 <_printf_float+0x94>
 800dd20:	6863      	ldr	r3, [r4, #4]
 800dd22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dd26:	9206      	str	r2, [sp, #24]
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	d13f      	bne.n	800ddac <_printf_float+0x17c>
 800dd2c:	2306      	movs	r3, #6
 800dd2e:	6063      	str	r3, [r4, #4]
 800dd30:	9b05      	ldr	r3, [sp, #20]
 800dd32:	6861      	ldr	r1, [r4, #4]
 800dd34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dd38:	2300      	movs	r3, #0
 800dd3a:	9303      	str	r3, [sp, #12]
 800dd3c:	ab0a      	add	r3, sp, #40	; 0x28
 800dd3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dd42:	ab09      	add	r3, sp, #36	; 0x24
 800dd44:	ec49 8b10 	vmov	d0, r8, r9
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	6022      	str	r2, [r4, #0]
 800dd4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd50:	4628      	mov	r0, r5
 800dd52:	f7ff fecd 	bl	800daf0 <__cvt>
 800dd56:	9b06      	ldr	r3, [sp, #24]
 800dd58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd5a:	2b47      	cmp	r3, #71	; 0x47
 800dd5c:	4680      	mov	r8, r0
 800dd5e:	d108      	bne.n	800dd72 <_printf_float+0x142>
 800dd60:	1cc8      	adds	r0, r1, #3
 800dd62:	db02      	blt.n	800dd6a <_printf_float+0x13a>
 800dd64:	6863      	ldr	r3, [r4, #4]
 800dd66:	4299      	cmp	r1, r3
 800dd68:	dd41      	ble.n	800ddee <_printf_float+0x1be>
 800dd6a:	f1ab 0b02 	sub.w	fp, fp, #2
 800dd6e:	fa5f fb8b 	uxtb.w	fp, fp
 800dd72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd76:	d820      	bhi.n	800ddba <_printf_float+0x18a>
 800dd78:	3901      	subs	r1, #1
 800dd7a:	465a      	mov	r2, fp
 800dd7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dd80:	9109      	str	r1, [sp, #36]	; 0x24
 800dd82:	f7ff ff17 	bl	800dbb4 <__exponent>
 800dd86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd88:	1813      	adds	r3, r2, r0
 800dd8a:	2a01      	cmp	r2, #1
 800dd8c:	4681      	mov	r9, r0
 800dd8e:	6123      	str	r3, [r4, #16]
 800dd90:	dc02      	bgt.n	800dd98 <_printf_float+0x168>
 800dd92:	6822      	ldr	r2, [r4, #0]
 800dd94:	07d2      	lsls	r2, r2, #31
 800dd96:	d501      	bpl.n	800dd9c <_printf_float+0x16c>
 800dd98:	3301      	adds	r3, #1
 800dd9a:	6123      	str	r3, [r4, #16]
 800dd9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d09c      	beq.n	800dcde <_printf_float+0xae>
 800dda4:	232d      	movs	r3, #45	; 0x2d
 800dda6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddaa:	e798      	b.n	800dcde <_printf_float+0xae>
 800ddac:	9a06      	ldr	r2, [sp, #24]
 800ddae:	2a47      	cmp	r2, #71	; 0x47
 800ddb0:	d1be      	bne.n	800dd30 <_printf_float+0x100>
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d1bc      	bne.n	800dd30 <_printf_float+0x100>
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e7b9      	b.n	800dd2e <_printf_float+0xfe>
 800ddba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ddbe:	d118      	bne.n	800ddf2 <_printf_float+0x1c2>
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	6863      	ldr	r3, [r4, #4]
 800ddc4:	dd0b      	ble.n	800ddde <_printf_float+0x1ae>
 800ddc6:	6121      	str	r1, [r4, #16]
 800ddc8:	b913      	cbnz	r3, 800ddd0 <_printf_float+0x1a0>
 800ddca:	6822      	ldr	r2, [r4, #0]
 800ddcc:	07d0      	lsls	r0, r2, #31
 800ddce:	d502      	bpl.n	800ddd6 <_printf_float+0x1a6>
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	440b      	add	r3, r1
 800ddd4:	6123      	str	r3, [r4, #16]
 800ddd6:	65a1      	str	r1, [r4, #88]	; 0x58
 800ddd8:	f04f 0900 	mov.w	r9, #0
 800dddc:	e7de      	b.n	800dd9c <_printf_float+0x16c>
 800ddde:	b913      	cbnz	r3, 800dde6 <_printf_float+0x1b6>
 800dde0:	6822      	ldr	r2, [r4, #0]
 800dde2:	07d2      	lsls	r2, r2, #31
 800dde4:	d501      	bpl.n	800ddea <_printf_float+0x1ba>
 800dde6:	3302      	adds	r3, #2
 800dde8:	e7f4      	b.n	800ddd4 <_printf_float+0x1a4>
 800ddea:	2301      	movs	r3, #1
 800ddec:	e7f2      	b.n	800ddd4 <_printf_float+0x1a4>
 800ddee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ddf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddf4:	4299      	cmp	r1, r3
 800ddf6:	db05      	blt.n	800de04 <_printf_float+0x1d4>
 800ddf8:	6823      	ldr	r3, [r4, #0]
 800ddfa:	6121      	str	r1, [r4, #16]
 800ddfc:	07d8      	lsls	r0, r3, #31
 800ddfe:	d5ea      	bpl.n	800ddd6 <_printf_float+0x1a6>
 800de00:	1c4b      	adds	r3, r1, #1
 800de02:	e7e7      	b.n	800ddd4 <_printf_float+0x1a4>
 800de04:	2900      	cmp	r1, #0
 800de06:	bfd4      	ite	le
 800de08:	f1c1 0202 	rsble	r2, r1, #2
 800de0c:	2201      	movgt	r2, #1
 800de0e:	4413      	add	r3, r2
 800de10:	e7e0      	b.n	800ddd4 <_printf_float+0x1a4>
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	055a      	lsls	r2, r3, #21
 800de16:	d407      	bmi.n	800de28 <_printf_float+0x1f8>
 800de18:	6923      	ldr	r3, [r4, #16]
 800de1a:	4642      	mov	r2, r8
 800de1c:	4631      	mov	r1, r6
 800de1e:	4628      	mov	r0, r5
 800de20:	47b8      	blx	r7
 800de22:	3001      	adds	r0, #1
 800de24:	d12c      	bne.n	800de80 <_printf_float+0x250>
 800de26:	e764      	b.n	800dcf2 <_printf_float+0xc2>
 800de28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de2c:	f240 80e0 	bls.w	800dff0 <_printf_float+0x3c0>
 800de30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de34:	2200      	movs	r2, #0
 800de36:	2300      	movs	r3, #0
 800de38:	f7f2 fea6 	bl	8000b88 <__aeabi_dcmpeq>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d034      	beq.n	800deaa <_printf_float+0x27a>
 800de40:	4a37      	ldr	r2, [pc, #220]	; (800df20 <_printf_float+0x2f0>)
 800de42:	2301      	movs	r3, #1
 800de44:	4631      	mov	r1, r6
 800de46:	4628      	mov	r0, r5
 800de48:	47b8      	blx	r7
 800de4a:	3001      	adds	r0, #1
 800de4c:	f43f af51 	beq.w	800dcf2 <_printf_float+0xc2>
 800de50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de54:	429a      	cmp	r2, r3
 800de56:	db02      	blt.n	800de5e <_printf_float+0x22e>
 800de58:	6823      	ldr	r3, [r4, #0]
 800de5a:	07d8      	lsls	r0, r3, #31
 800de5c:	d510      	bpl.n	800de80 <_printf_float+0x250>
 800de5e:	ee18 3a10 	vmov	r3, s16
 800de62:	4652      	mov	r2, sl
 800de64:	4631      	mov	r1, r6
 800de66:	4628      	mov	r0, r5
 800de68:	47b8      	blx	r7
 800de6a:	3001      	adds	r0, #1
 800de6c:	f43f af41 	beq.w	800dcf2 <_printf_float+0xc2>
 800de70:	f04f 0800 	mov.w	r8, #0
 800de74:	f104 091a 	add.w	r9, r4, #26
 800de78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de7a:	3b01      	subs	r3, #1
 800de7c:	4543      	cmp	r3, r8
 800de7e:	dc09      	bgt.n	800de94 <_printf_float+0x264>
 800de80:	6823      	ldr	r3, [r4, #0]
 800de82:	079b      	lsls	r3, r3, #30
 800de84:	f100 8105 	bmi.w	800e092 <_printf_float+0x462>
 800de88:	68e0      	ldr	r0, [r4, #12]
 800de8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de8c:	4298      	cmp	r0, r3
 800de8e:	bfb8      	it	lt
 800de90:	4618      	movlt	r0, r3
 800de92:	e730      	b.n	800dcf6 <_printf_float+0xc6>
 800de94:	2301      	movs	r3, #1
 800de96:	464a      	mov	r2, r9
 800de98:	4631      	mov	r1, r6
 800de9a:	4628      	mov	r0, r5
 800de9c:	47b8      	blx	r7
 800de9e:	3001      	adds	r0, #1
 800dea0:	f43f af27 	beq.w	800dcf2 <_printf_float+0xc2>
 800dea4:	f108 0801 	add.w	r8, r8, #1
 800dea8:	e7e6      	b.n	800de78 <_printf_float+0x248>
 800deaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deac:	2b00      	cmp	r3, #0
 800deae:	dc39      	bgt.n	800df24 <_printf_float+0x2f4>
 800deb0:	4a1b      	ldr	r2, [pc, #108]	; (800df20 <_printf_float+0x2f0>)
 800deb2:	2301      	movs	r3, #1
 800deb4:	4631      	mov	r1, r6
 800deb6:	4628      	mov	r0, r5
 800deb8:	47b8      	blx	r7
 800deba:	3001      	adds	r0, #1
 800debc:	f43f af19 	beq.w	800dcf2 <_printf_float+0xc2>
 800dec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dec4:	4313      	orrs	r3, r2
 800dec6:	d102      	bne.n	800dece <_printf_float+0x29e>
 800dec8:	6823      	ldr	r3, [r4, #0]
 800deca:	07d9      	lsls	r1, r3, #31
 800decc:	d5d8      	bpl.n	800de80 <_printf_float+0x250>
 800dece:	ee18 3a10 	vmov	r3, s16
 800ded2:	4652      	mov	r2, sl
 800ded4:	4631      	mov	r1, r6
 800ded6:	4628      	mov	r0, r5
 800ded8:	47b8      	blx	r7
 800deda:	3001      	adds	r0, #1
 800dedc:	f43f af09 	beq.w	800dcf2 <_printf_float+0xc2>
 800dee0:	f04f 0900 	mov.w	r9, #0
 800dee4:	f104 0a1a 	add.w	sl, r4, #26
 800dee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deea:	425b      	negs	r3, r3
 800deec:	454b      	cmp	r3, r9
 800deee:	dc01      	bgt.n	800def4 <_printf_float+0x2c4>
 800def0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800def2:	e792      	b.n	800de1a <_printf_float+0x1ea>
 800def4:	2301      	movs	r3, #1
 800def6:	4652      	mov	r2, sl
 800def8:	4631      	mov	r1, r6
 800defa:	4628      	mov	r0, r5
 800defc:	47b8      	blx	r7
 800defe:	3001      	adds	r0, #1
 800df00:	f43f aef7 	beq.w	800dcf2 <_printf_float+0xc2>
 800df04:	f109 0901 	add.w	r9, r9, #1
 800df08:	e7ee      	b.n	800dee8 <_printf_float+0x2b8>
 800df0a:	bf00      	nop
 800df0c:	7fefffff 	.word	0x7fefffff
 800df10:	08024408 	.word	0x08024408
 800df14:	0802440c 	.word	0x0802440c
 800df18:	08024414 	.word	0x08024414
 800df1c:	08024410 	.word	0x08024410
 800df20:	08024418 	.word	0x08024418
 800df24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df28:	429a      	cmp	r2, r3
 800df2a:	bfa8      	it	ge
 800df2c:	461a      	movge	r2, r3
 800df2e:	2a00      	cmp	r2, #0
 800df30:	4691      	mov	r9, r2
 800df32:	dc37      	bgt.n	800dfa4 <_printf_float+0x374>
 800df34:	f04f 0b00 	mov.w	fp, #0
 800df38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df3c:	f104 021a 	add.w	r2, r4, #26
 800df40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df42:	9305      	str	r3, [sp, #20]
 800df44:	eba3 0309 	sub.w	r3, r3, r9
 800df48:	455b      	cmp	r3, fp
 800df4a:	dc33      	bgt.n	800dfb4 <_printf_float+0x384>
 800df4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df50:	429a      	cmp	r2, r3
 800df52:	db3b      	blt.n	800dfcc <_printf_float+0x39c>
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	07da      	lsls	r2, r3, #31
 800df58:	d438      	bmi.n	800dfcc <_printf_float+0x39c>
 800df5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df5c:	9b05      	ldr	r3, [sp, #20]
 800df5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	eba2 0901 	sub.w	r9, r2, r1
 800df66:	4599      	cmp	r9, r3
 800df68:	bfa8      	it	ge
 800df6a:	4699      	movge	r9, r3
 800df6c:	f1b9 0f00 	cmp.w	r9, #0
 800df70:	dc35      	bgt.n	800dfde <_printf_float+0x3ae>
 800df72:	f04f 0800 	mov.w	r8, #0
 800df76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df7a:	f104 0a1a 	add.w	sl, r4, #26
 800df7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df82:	1a9b      	subs	r3, r3, r2
 800df84:	eba3 0309 	sub.w	r3, r3, r9
 800df88:	4543      	cmp	r3, r8
 800df8a:	f77f af79 	ble.w	800de80 <_printf_float+0x250>
 800df8e:	2301      	movs	r3, #1
 800df90:	4652      	mov	r2, sl
 800df92:	4631      	mov	r1, r6
 800df94:	4628      	mov	r0, r5
 800df96:	47b8      	blx	r7
 800df98:	3001      	adds	r0, #1
 800df9a:	f43f aeaa 	beq.w	800dcf2 <_printf_float+0xc2>
 800df9e:	f108 0801 	add.w	r8, r8, #1
 800dfa2:	e7ec      	b.n	800df7e <_printf_float+0x34e>
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	4631      	mov	r1, r6
 800dfa8:	4642      	mov	r2, r8
 800dfaa:	4628      	mov	r0, r5
 800dfac:	47b8      	blx	r7
 800dfae:	3001      	adds	r0, #1
 800dfb0:	d1c0      	bne.n	800df34 <_printf_float+0x304>
 800dfb2:	e69e      	b.n	800dcf2 <_printf_float+0xc2>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	4631      	mov	r1, r6
 800dfb8:	4628      	mov	r0, r5
 800dfba:	9205      	str	r2, [sp, #20]
 800dfbc:	47b8      	blx	r7
 800dfbe:	3001      	adds	r0, #1
 800dfc0:	f43f ae97 	beq.w	800dcf2 <_printf_float+0xc2>
 800dfc4:	9a05      	ldr	r2, [sp, #20]
 800dfc6:	f10b 0b01 	add.w	fp, fp, #1
 800dfca:	e7b9      	b.n	800df40 <_printf_float+0x310>
 800dfcc:	ee18 3a10 	vmov	r3, s16
 800dfd0:	4652      	mov	r2, sl
 800dfd2:	4631      	mov	r1, r6
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	47b8      	blx	r7
 800dfd8:	3001      	adds	r0, #1
 800dfda:	d1be      	bne.n	800df5a <_printf_float+0x32a>
 800dfdc:	e689      	b.n	800dcf2 <_printf_float+0xc2>
 800dfde:	9a05      	ldr	r2, [sp, #20]
 800dfe0:	464b      	mov	r3, r9
 800dfe2:	4442      	add	r2, r8
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	47b8      	blx	r7
 800dfea:	3001      	adds	r0, #1
 800dfec:	d1c1      	bne.n	800df72 <_printf_float+0x342>
 800dfee:	e680      	b.n	800dcf2 <_printf_float+0xc2>
 800dff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dff2:	2a01      	cmp	r2, #1
 800dff4:	dc01      	bgt.n	800dffa <_printf_float+0x3ca>
 800dff6:	07db      	lsls	r3, r3, #31
 800dff8:	d538      	bpl.n	800e06c <_printf_float+0x43c>
 800dffa:	2301      	movs	r3, #1
 800dffc:	4642      	mov	r2, r8
 800dffe:	4631      	mov	r1, r6
 800e000:	4628      	mov	r0, r5
 800e002:	47b8      	blx	r7
 800e004:	3001      	adds	r0, #1
 800e006:	f43f ae74 	beq.w	800dcf2 <_printf_float+0xc2>
 800e00a:	ee18 3a10 	vmov	r3, s16
 800e00e:	4652      	mov	r2, sl
 800e010:	4631      	mov	r1, r6
 800e012:	4628      	mov	r0, r5
 800e014:	47b8      	blx	r7
 800e016:	3001      	adds	r0, #1
 800e018:	f43f ae6b 	beq.w	800dcf2 <_printf_float+0xc2>
 800e01c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e020:	2200      	movs	r2, #0
 800e022:	2300      	movs	r3, #0
 800e024:	f7f2 fdb0 	bl	8000b88 <__aeabi_dcmpeq>
 800e028:	b9d8      	cbnz	r0, 800e062 <_printf_float+0x432>
 800e02a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e02c:	f108 0201 	add.w	r2, r8, #1
 800e030:	3b01      	subs	r3, #1
 800e032:	4631      	mov	r1, r6
 800e034:	4628      	mov	r0, r5
 800e036:	47b8      	blx	r7
 800e038:	3001      	adds	r0, #1
 800e03a:	d10e      	bne.n	800e05a <_printf_float+0x42a>
 800e03c:	e659      	b.n	800dcf2 <_printf_float+0xc2>
 800e03e:	2301      	movs	r3, #1
 800e040:	4652      	mov	r2, sl
 800e042:	4631      	mov	r1, r6
 800e044:	4628      	mov	r0, r5
 800e046:	47b8      	blx	r7
 800e048:	3001      	adds	r0, #1
 800e04a:	f43f ae52 	beq.w	800dcf2 <_printf_float+0xc2>
 800e04e:	f108 0801 	add.w	r8, r8, #1
 800e052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e054:	3b01      	subs	r3, #1
 800e056:	4543      	cmp	r3, r8
 800e058:	dcf1      	bgt.n	800e03e <_printf_float+0x40e>
 800e05a:	464b      	mov	r3, r9
 800e05c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e060:	e6dc      	b.n	800de1c <_printf_float+0x1ec>
 800e062:	f04f 0800 	mov.w	r8, #0
 800e066:	f104 0a1a 	add.w	sl, r4, #26
 800e06a:	e7f2      	b.n	800e052 <_printf_float+0x422>
 800e06c:	2301      	movs	r3, #1
 800e06e:	4642      	mov	r2, r8
 800e070:	e7df      	b.n	800e032 <_printf_float+0x402>
 800e072:	2301      	movs	r3, #1
 800e074:	464a      	mov	r2, r9
 800e076:	4631      	mov	r1, r6
 800e078:	4628      	mov	r0, r5
 800e07a:	47b8      	blx	r7
 800e07c:	3001      	adds	r0, #1
 800e07e:	f43f ae38 	beq.w	800dcf2 <_printf_float+0xc2>
 800e082:	f108 0801 	add.w	r8, r8, #1
 800e086:	68e3      	ldr	r3, [r4, #12]
 800e088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e08a:	1a5b      	subs	r3, r3, r1
 800e08c:	4543      	cmp	r3, r8
 800e08e:	dcf0      	bgt.n	800e072 <_printf_float+0x442>
 800e090:	e6fa      	b.n	800de88 <_printf_float+0x258>
 800e092:	f04f 0800 	mov.w	r8, #0
 800e096:	f104 0919 	add.w	r9, r4, #25
 800e09a:	e7f4      	b.n	800e086 <_printf_float+0x456>

0800e09c <_printf_common>:
 800e09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a0:	4616      	mov	r6, r2
 800e0a2:	4699      	mov	r9, r3
 800e0a4:	688a      	ldr	r2, [r1, #8]
 800e0a6:	690b      	ldr	r3, [r1, #16]
 800e0a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	bfb8      	it	lt
 800e0b0:	4613      	movlt	r3, r2
 800e0b2:	6033      	str	r3, [r6, #0]
 800e0b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0b8:	4607      	mov	r7, r0
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	b10a      	cbz	r2, 800e0c2 <_printf_common+0x26>
 800e0be:	3301      	adds	r3, #1
 800e0c0:	6033      	str	r3, [r6, #0]
 800e0c2:	6823      	ldr	r3, [r4, #0]
 800e0c4:	0699      	lsls	r1, r3, #26
 800e0c6:	bf42      	ittt	mi
 800e0c8:	6833      	ldrmi	r3, [r6, #0]
 800e0ca:	3302      	addmi	r3, #2
 800e0cc:	6033      	strmi	r3, [r6, #0]
 800e0ce:	6825      	ldr	r5, [r4, #0]
 800e0d0:	f015 0506 	ands.w	r5, r5, #6
 800e0d4:	d106      	bne.n	800e0e4 <_printf_common+0x48>
 800e0d6:	f104 0a19 	add.w	sl, r4, #25
 800e0da:	68e3      	ldr	r3, [r4, #12]
 800e0dc:	6832      	ldr	r2, [r6, #0]
 800e0de:	1a9b      	subs	r3, r3, r2
 800e0e0:	42ab      	cmp	r3, r5
 800e0e2:	dc26      	bgt.n	800e132 <_printf_common+0x96>
 800e0e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e0e8:	1e13      	subs	r3, r2, #0
 800e0ea:	6822      	ldr	r2, [r4, #0]
 800e0ec:	bf18      	it	ne
 800e0ee:	2301      	movne	r3, #1
 800e0f0:	0692      	lsls	r2, r2, #26
 800e0f2:	d42b      	bmi.n	800e14c <_printf_common+0xb0>
 800e0f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0f8:	4649      	mov	r1, r9
 800e0fa:	4638      	mov	r0, r7
 800e0fc:	47c0      	blx	r8
 800e0fe:	3001      	adds	r0, #1
 800e100:	d01e      	beq.n	800e140 <_printf_common+0xa4>
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	68e5      	ldr	r5, [r4, #12]
 800e106:	6832      	ldr	r2, [r6, #0]
 800e108:	f003 0306 	and.w	r3, r3, #6
 800e10c:	2b04      	cmp	r3, #4
 800e10e:	bf08      	it	eq
 800e110:	1aad      	subeq	r5, r5, r2
 800e112:	68a3      	ldr	r3, [r4, #8]
 800e114:	6922      	ldr	r2, [r4, #16]
 800e116:	bf0c      	ite	eq
 800e118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e11c:	2500      	movne	r5, #0
 800e11e:	4293      	cmp	r3, r2
 800e120:	bfc4      	itt	gt
 800e122:	1a9b      	subgt	r3, r3, r2
 800e124:	18ed      	addgt	r5, r5, r3
 800e126:	2600      	movs	r6, #0
 800e128:	341a      	adds	r4, #26
 800e12a:	42b5      	cmp	r5, r6
 800e12c:	d11a      	bne.n	800e164 <_printf_common+0xc8>
 800e12e:	2000      	movs	r0, #0
 800e130:	e008      	b.n	800e144 <_printf_common+0xa8>
 800e132:	2301      	movs	r3, #1
 800e134:	4652      	mov	r2, sl
 800e136:	4649      	mov	r1, r9
 800e138:	4638      	mov	r0, r7
 800e13a:	47c0      	blx	r8
 800e13c:	3001      	adds	r0, #1
 800e13e:	d103      	bne.n	800e148 <_printf_common+0xac>
 800e140:	f04f 30ff 	mov.w	r0, #4294967295
 800e144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e148:	3501      	adds	r5, #1
 800e14a:	e7c6      	b.n	800e0da <_printf_common+0x3e>
 800e14c:	18e1      	adds	r1, r4, r3
 800e14e:	1c5a      	adds	r2, r3, #1
 800e150:	2030      	movs	r0, #48	; 0x30
 800e152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e156:	4422      	add	r2, r4
 800e158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e15c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e160:	3302      	adds	r3, #2
 800e162:	e7c7      	b.n	800e0f4 <_printf_common+0x58>
 800e164:	2301      	movs	r3, #1
 800e166:	4622      	mov	r2, r4
 800e168:	4649      	mov	r1, r9
 800e16a:	4638      	mov	r0, r7
 800e16c:	47c0      	blx	r8
 800e16e:	3001      	adds	r0, #1
 800e170:	d0e6      	beq.n	800e140 <_printf_common+0xa4>
 800e172:	3601      	adds	r6, #1
 800e174:	e7d9      	b.n	800e12a <_printf_common+0x8e>
	...

0800e178 <_printf_i>:
 800e178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e17c:	460c      	mov	r4, r1
 800e17e:	4691      	mov	r9, r2
 800e180:	7e27      	ldrb	r7, [r4, #24]
 800e182:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e184:	2f78      	cmp	r7, #120	; 0x78
 800e186:	4680      	mov	r8, r0
 800e188:	469a      	mov	sl, r3
 800e18a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e18e:	d807      	bhi.n	800e1a0 <_printf_i+0x28>
 800e190:	2f62      	cmp	r7, #98	; 0x62
 800e192:	d80a      	bhi.n	800e1aa <_printf_i+0x32>
 800e194:	2f00      	cmp	r7, #0
 800e196:	f000 80d8 	beq.w	800e34a <_printf_i+0x1d2>
 800e19a:	2f58      	cmp	r7, #88	; 0x58
 800e19c:	f000 80a3 	beq.w	800e2e6 <_printf_i+0x16e>
 800e1a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e1a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1a8:	e03a      	b.n	800e220 <_printf_i+0xa8>
 800e1aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1ae:	2b15      	cmp	r3, #21
 800e1b0:	d8f6      	bhi.n	800e1a0 <_printf_i+0x28>
 800e1b2:	a001      	add	r0, pc, #4	; (adr r0, 800e1b8 <_printf_i+0x40>)
 800e1b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e1b8:	0800e211 	.word	0x0800e211
 800e1bc:	0800e225 	.word	0x0800e225
 800e1c0:	0800e1a1 	.word	0x0800e1a1
 800e1c4:	0800e1a1 	.word	0x0800e1a1
 800e1c8:	0800e1a1 	.word	0x0800e1a1
 800e1cc:	0800e1a1 	.word	0x0800e1a1
 800e1d0:	0800e225 	.word	0x0800e225
 800e1d4:	0800e1a1 	.word	0x0800e1a1
 800e1d8:	0800e1a1 	.word	0x0800e1a1
 800e1dc:	0800e1a1 	.word	0x0800e1a1
 800e1e0:	0800e1a1 	.word	0x0800e1a1
 800e1e4:	0800e331 	.word	0x0800e331
 800e1e8:	0800e255 	.word	0x0800e255
 800e1ec:	0800e313 	.word	0x0800e313
 800e1f0:	0800e1a1 	.word	0x0800e1a1
 800e1f4:	0800e1a1 	.word	0x0800e1a1
 800e1f8:	0800e353 	.word	0x0800e353
 800e1fc:	0800e1a1 	.word	0x0800e1a1
 800e200:	0800e255 	.word	0x0800e255
 800e204:	0800e1a1 	.word	0x0800e1a1
 800e208:	0800e1a1 	.word	0x0800e1a1
 800e20c:	0800e31b 	.word	0x0800e31b
 800e210:	680b      	ldr	r3, [r1, #0]
 800e212:	1d1a      	adds	r2, r3, #4
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	600a      	str	r2, [r1, #0]
 800e218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e21c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e220:	2301      	movs	r3, #1
 800e222:	e0a3      	b.n	800e36c <_printf_i+0x1f4>
 800e224:	6825      	ldr	r5, [r4, #0]
 800e226:	6808      	ldr	r0, [r1, #0]
 800e228:	062e      	lsls	r6, r5, #24
 800e22a:	f100 0304 	add.w	r3, r0, #4
 800e22e:	d50a      	bpl.n	800e246 <_printf_i+0xce>
 800e230:	6805      	ldr	r5, [r0, #0]
 800e232:	600b      	str	r3, [r1, #0]
 800e234:	2d00      	cmp	r5, #0
 800e236:	da03      	bge.n	800e240 <_printf_i+0xc8>
 800e238:	232d      	movs	r3, #45	; 0x2d
 800e23a:	426d      	negs	r5, r5
 800e23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e240:	485e      	ldr	r0, [pc, #376]	; (800e3bc <_printf_i+0x244>)
 800e242:	230a      	movs	r3, #10
 800e244:	e019      	b.n	800e27a <_printf_i+0x102>
 800e246:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e24a:	6805      	ldr	r5, [r0, #0]
 800e24c:	600b      	str	r3, [r1, #0]
 800e24e:	bf18      	it	ne
 800e250:	b22d      	sxthne	r5, r5
 800e252:	e7ef      	b.n	800e234 <_printf_i+0xbc>
 800e254:	680b      	ldr	r3, [r1, #0]
 800e256:	6825      	ldr	r5, [r4, #0]
 800e258:	1d18      	adds	r0, r3, #4
 800e25a:	6008      	str	r0, [r1, #0]
 800e25c:	0628      	lsls	r0, r5, #24
 800e25e:	d501      	bpl.n	800e264 <_printf_i+0xec>
 800e260:	681d      	ldr	r5, [r3, #0]
 800e262:	e002      	b.n	800e26a <_printf_i+0xf2>
 800e264:	0669      	lsls	r1, r5, #25
 800e266:	d5fb      	bpl.n	800e260 <_printf_i+0xe8>
 800e268:	881d      	ldrh	r5, [r3, #0]
 800e26a:	4854      	ldr	r0, [pc, #336]	; (800e3bc <_printf_i+0x244>)
 800e26c:	2f6f      	cmp	r7, #111	; 0x6f
 800e26e:	bf0c      	ite	eq
 800e270:	2308      	moveq	r3, #8
 800e272:	230a      	movne	r3, #10
 800e274:	2100      	movs	r1, #0
 800e276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e27a:	6866      	ldr	r6, [r4, #4]
 800e27c:	60a6      	str	r6, [r4, #8]
 800e27e:	2e00      	cmp	r6, #0
 800e280:	bfa2      	ittt	ge
 800e282:	6821      	ldrge	r1, [r4, #0]
 800e284:	f021 0104 	bicge.w	r1, r1, #4
 800e288:	6021      	strge	r1, [r4, #0]
 800e28a:	b90d      	cbnz	r5, 800e290 <_printf_i+0x118>
 800e28c:	2e00      	cmp	r6, #0
 800e28e:	d04d      	beq.n	800e32c <_printf_i+0x1b4>
 800e290:	4616      	mov	r6, r2
 800e292:	fbb5 f1f3 	udiv	r1, r5, r3
 800e296:	fb03 5711 	mls	r7, r3, r1, r5
 800e29a:	5dc7      	ldrb	r7, [r0, r7]
 800e29c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e2a0:	462f      	mov	r7, r5
 800e2a2:	42bb      	cmp	r3, r7
 800e2a4:	460d      	mov	r5, r1
 800e2a6:	d9f4      	bls.n	800e292 <_printf_i+0x11a>
 800e2a8:	2b08      	cmp	r3, #8
 800e2aa:	d10b      	bne.n	800e2c4 <_printf_i+0x14c>
 800e2ac:	6823      	ldr	r3, [r4, #0]
 800e2ae:	07df      	lsls	r7, r3, #31
 800e2b0:	d508      	bpl.n	800e2c4 <_printf_i+0x14c>
 800e2b2:	6923      	ldr	r3, [r4, #16]
 800e2b4:	6861      	ldr	r1, [r4, #4]
 800e2b6:	4299      	cmp	r1, r3
 800e2b8:	bfde      	ittt	le
 800e2ba:	2330      	movle	r3, #48	; 0x30
 800e2bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e2c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e2c4:	1b92      	subs	r2, r2, r6
 800e2c6:	6122      	str	r2, [r4, #16]
 800e2c8:	f8cd a000 	str.w	sl, [sp]
 800e2cc:	464b      	mov	r3, r9
 800e2ce:	aa03      	add	r2, sp, #12
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4640      	mov	r0, r8
 800e2d4:	f7ff fee2 	bl	800e09c <_printf_common>
 800e2d8:	3001      	adds	r0, #1
 800e2da:	d14c      	bne.n	800e376 <_printf_i+0x1fe>
 800e2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e0:	b004      	add	sp, #16
 800e2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2e6:	4835      	ldr	r0, [pc, #212]	; (800e3bc <_printf_i+0x244>)
 800e2e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e2ec:	6823      	ldr	r3, [r4, #0]
 800e2ee:	680e      	ldr	r6, [r1, #0]
 800e2f0:	061f      	lsls	r7, r3, #24
 800e2f2:	f856 5b04 	ldr.w	r5, [r6], #4
 800e2f6:	600e      	str	r6, [r1, #0]
 800e2f8:	d514      	bpl.n	800e324 <_printf_i+0x1ac>
 800e2fa:	07d9      	lsls	r1, r3, #31
 800e2fc:	bf44      	itt	mi
 800e2fe:	f043 0320 	orrmi.w	r3, r3, #32
 800e302:	6023      	strmi	r3, [r4, #0]
 800e304:	b91d      	cbnz	r5, 800e30e <_printf_i+0x196>
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	f023 0320 	bic.w	r3, r3, #32
 800e30c:	6023      	str	r3, [r4, #0]
 800e30e:	2310      	movs	r3, #16
 800e310:	e7b0      	b.n	800e274 <_printf_i+0xfc>
 800e312:	6823      	ldr	r3, [r4, #0]
 800e314:	f043 0320 	orr.w	r3, r3, #32
 800e318:	6023      	str	r3, [r4, #0]
 800e31a:	2378      	movs	r3, #120	; 0x78
 800e31c:	4828      	ldr	r0, [pc, #160]	; (800e3c0 <_printf_i+0x248>)
 800e31e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e322:	e7e3      	b.n	800e2ec <_printf_i+0x174>
 800e324:	065e      	lsls	r6, r3, #25
 800e326:	bf48      	it	mi
 800e328:	b2ad      	uxthmi	r5, r5
 800e32a:	e7e6      	b.n	800e2fa <_printf_i+0x182>
 800e32c:	4616      	mov	r6, r2
 800e32e:	e7bb      	b.n	800e2a8 <_printf_i+0x130>
 800e330:	680b      	ldr	r3, [r1, #0]
 800e332:	6826      	ldr	r6, [r4, #0]
 800e334:	6960      	ldr	r0, [r4, #20]
 800e336:	1d1d      	adds	r5, r3, #4
 800e338:	600d      	str	r5, [r1, #0]
 800e33a:	0635      	lsls	r5, r6, #24
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	d501      	bpl.n	800e344 <_printf_i+0x1cc>
 800e340:	6018      	str	r0, [r3, #0]
 800e342:	e002      	b.n	800e34a <_printf_i+0x1d2>
 800e344:	0671      	lsls	r1, r6, #25
 800e346:	d5fb      	bpl.n	800e340 <_printf_i+0x1c8>
 800e348:	8018      	strh	r0, [r3, #0]
 800e34a:	2300      	movs	r3, #0
 800e34c:	6123      	str	r3, [r4, #16]
 800e34e:	4616      	mov	r6, r2
 800e350:	e7ba      	b.n	800e2c8 <_printf_i+0x150>
 800e352:	680b      	ldr	r3, [r1, #0]
 800e354:	1d1a      	adds	r2, r3, #4
 800e356:	600a      	str	r2, [r1, #0]
 800e358:	681e      	ldr	r6, [r3, #0]
 800e35a:	6862      	ldr	r2, [r4, #4]
 800e35c:	2100      	movs	r1, #0
 800e35e:	4630      	mov	r0, r6
 800e360:	f7f1 ff9e 	bl	80002a0 <memchr>
 800e364:	b108      	cbz	r0, 800e36a <_printf_i+0x1f2>
 800e366:	1b80      	subs	r0, r0, r6
 800e368:	6060      	str	r0, [r4, #4]
 800e36a:	6863      	ldr	r3, [r4, #4]
 800e36c:	6123      	str	r3, [r4, #16]
 800e36e:	2300      	movs	r3, #0
 800e370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e374:	e7a8      	b.n	800e2c8 <_printf_i+0x150>
 800e376:	6923      	ldr	r3, [r4, #16]
 800e378:	4632      	mov	r2, r6
 800e37a:	4649      	mov	r1, r9
 800e37c:	4640      	mov	r0, r8
 800e37e:	47d0      	blx	sl
 800e380:	3001      	adds	r0, #1
 800e382:	d0ab      	beq.n	800e2dc <_printf_i+0x164>
 800e384:	6823      	ldr	r3, [r4, #0]
 800e386:	079b      	lsls	r3, r3, #30
 800e388:	d413      	bmi.n	800e3b2 <_printf_i+0x23a>
 800e38a:	68e0      	ldr	r0, [r4, #12]
 800e38c:	9b03      	ldr	r3, [sp, #12]
 800e38e:	4298      	cmp	r0, r3
 800e390:	bfb8      	it	lt
 800e392:	4618      	movlt	r0, r3
 800e394:	e7a4      	b.n	800e2e0 <_printf_i+0x168>
 800e396:	2301      	movs	r3, #1
 800e398:	4632      	mov	r2, r6
 800e39a:	4649      	mov	r1, r9
 800e39c:	4640      	mov	r0, r8
 800e39e:	47d0      	blx	sl
 800e3a0:	3001      	adds	r0, #1
 800e3a2:	d09b      	beq.n	800e2dc <_printf_i+0x164>
 800e3a4:	3501      	adds	r5, #1
 800e3a6:	68e3      	ldr	r3, [r4, #12]
 800e3a8:	9903      	ldr	r1, [sp, #12]
 800e3aa:	1a5b      	subs	r3, r3, r1
 800e3ac:	42ab      	cmp	r3, r5
 800e3ae:	dcf2      	bgt.n	800e396 <_printf_i+0x21e>
 800e3b0:	e7eb      	b.n	800e38a <_printf_i+0x212>
 800e3b2:	2500      	movs	r5, #0
 800e3b4:	f104 0619 	add.w	r6, r4, #25
 800e3b8:	e7f5      	b.n	800e3a6 <_printf_i+0x22e>
 800e3ba:	bf00      	nop
 800e3bc:	0802441a 	.word	0x0802441a
 800e3c0:	0802442b 	.word	0x0802442b

0800e3c4 <iprintf>:
 800e3c4:	b40f      	push	{r0, r1, r2, r3}
 800e3c6:	4b0a      	ldr	r3, [pc, #40]	; (800e3f0 <iprintf+0x2c>)
 800e3c8:	b513      	push	{r0, r1, r4, lr}
 800e3ca:	681c      	ldr	r4, [r3, #0]
 800e3cc:	b124      	cbz	r4, 800e3d8 <iprintf+0x14>
 800e3ce:	69a3      	ldr	r3, [r4, #24]
 800e3d0:	b913      	cbnz	r3, 800e3d8 <iprintf+0x14>
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	f7ff fa06 	bl	800d7e4 <__sinit>
 800e3d8:	ab05      	add	r3, sp, #20
 800e3da:	9a04      	ldr	r2, [sp, #16]
 800e3dc:	68a1      	ldr	r1, [r4, #8]
 800e3de:	9301      	str	r3, [sp, #4]
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f001 fc71 	bl	800fcc8 <_vfiprintf_r>
 800e3e6:	b002      	add	sp, #8
 800e3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3ec:	b004      	add	sp, #16
 800e3ee:	4770      	bx	lr
 800e3f0:	20000090 	.word	0x20000090

0800e3f4 <_puts_r>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	460e      	mov	r6, r1
 800e3f8:	4605      	mov	r5, r0
 800e3fa:	b118      	cbz	r0, 800e404 <_puts_r+0x10>
 800e3fc:	6983      	ldr	r3, [r0, #24]
 800e3fe:	b90b      	cbnz	r3, 800e404 <_puts_r+0x10>
 800e400:	f7ff f9f0 	bl	800d7e4 <__sinit>
 800e404:	69ab      	ldr	r3, [r5, #24]
 800e406:	68ac      	ldr	r4, [r5, #8]
 800e408:	b913      	cbnz	r3, 800e410 <_puts_r+0x1c>
 800e40a:	4628      	mov	r0, r5
 800e40c:	f7ff f9ea 	bl	800d7e4 <__sinit>
 800e410:	4b2c      	ldr	r3, [pc, #176]	; (800e4c4 <_puts_r+0xd0>)
 800e412:	429c      	cmp	r4, r3
 800e414:	d120      	bne.n	800e458 <_puts_r+0x64>
 800e416:	686c      	ldr	r4, [r5, #4]
 800e418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e41a:	07db      	lsls	r3, r3, #31
 800e41c:	d405      	bmi.n	800e42a <_puts_r+0x36>
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	0598      	lsls	r0, r3, #22
 800e422:	d402      	bmi.n	800e42a <_puts_r+0x36>
 800e424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e426:	f7ff faa0 	bl	800d96a <__retarget_lock_acquire_recursive>
 800e42a:	89a3      	ldrh	r3, [r4, #12]
 800e42c:	0719      	lsls	r1, r3, #28
 800e42e:	d51d      	bpl.n	800e46c <_puts_r+0x78>
 800e430:	6923      	ldr	r3, [r4, #16]
 800e432:	b1db      	cbz	r3, 800e46c <_puts_r+0x78>
 800e434:	3e01      	subs	r6, #1
 800e436:	68a3      	ldr	r3, [r4, #8]
 800e438:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e43c:	3b01      	subs	r3, #1
 800e43e:	60a3      	str	r3, [r4, #8]
 800e440:	bb39      	cbnz	r1, 800e492 <_puts_r+0x9e>
 800e442:	2b00      	cmp	r3, #0
 800e444:	da38      	bge.n	800e4b8 <_puts_r+0xc4>
 800e446:	4622      	mov	r2, r4
 800e448:	210a      	movs	r1, #10
 800e44a:	4628      	mov	r0, r5
 800e44c:	f000 f89c 	bl	800e588 <__swbuf_r>
 800e450:	3001      	adds	r0, #1
 800e452:	d011      	beq.n	800e478 <_puts_r+0x84>
 800e454:	250a      	movs	r5, #10
 800e456:	e011      	b.n	800e47c <_puts_r+0x88>
 800e458:	4b1b      	ldr	r3, [pc, #108]	; (800e4c8 <_puts_r+0xd4>)
 800e45a:	429c      	cmp	r4, r3
 800e45c:	d101      	bne.n	800e462 <_puts_r+0x6e>
 800e45e:	68ac      	ldr	r4, [r5, #8]
 800e460:	e7da      	b.n	800e418 <_puts_r+0x24>
 800e462:	4b1a      	ldr	r3, [pc, #104]	; (800e4cc <_puts_r+0xd8>)
 800e464:	429c      	cmp	r4, r3
 800e466:	bf08      	it	eq
 800e468:	68ec      	ldreq	r4, [r5, #12]
 800e46a:	e7d5      	b.n	800e418 <_puts_r+0x24>
 800e46c:	4621      	mov	r1, r4
 800e46e:	4628      	mov	r0, r5
 800e470:	f000 f8ee 	bl	800e650 <__swsetup_r>
 800e474:	2800      	cmp	r0, #0
 800e476:	d0dd      	beq.n	800e434 <_puts_r+0x40>
 800e478:	f04f 35ff 	mov.w	r5, #4294967295
 800e47c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e47e:	07da      	lsls	r2, r3, #31
 800e480:	d405      	bmi.n	800e48e <_puts_r+0x9a>
 800e482:	89a3      	ldrh	r3, [r4, #12]
 800e484:	059b      	lsls	r3, r3, #22
 800e486:	d402      	bmi.n	800e48e <_puts_r+0x9a>
 800e488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e48a:	f7ff fa6f 	bl	800d96c <__retarget_lock_release_recursive>
 800e48e:	4628      	mov	r0, r5
 800e490:	bd70      	pop	{r4, r5, r6, pc}
 800e492:	2b00      	cmp	r3, #0
 800e494:	da04      	bge.n	800e4a0 <_puts_r+0xac>
 800e496:	69a2      	ldr	r2, [r4, #24]
 800e498:	429a      	cmp	r2, r3
 800e49a:	dc06      	bgt.n	800e4aa <_puts_r+0xb6>
 800e49c:	290a      	cmp	r1, #10
 800e49e:	d004      	beq.n	800e4aa <_puts_r+0xb6>
 800e4a0:	6823      	ldr	r3, [r4, #0]
 800e4a2:	1c5a      	adds	r2, r3, #1
 800e4a4:	6022      	str	r2, [r4, #0]
 800e4a6:	7019      	strb	r1, [r3, #0]
 800e4a8:	e7c5      	b.n	800e436 <_puts_r+0x42>
 800e4aa:	4622      	mov	r2, r4
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f000 f86b 	bl	800e588 <__swbuf_r>
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	d1bf      	bne.n	800e436 <_puts_r+0x42>
 800e4b6:	e7df      	b.n	800e478 <_puts_r+0x84>
 800e4b8:	6823      	ldr	r3, [r4, #0]
 800e4ba:	250a      	movs	r5, #10
 800e4bc:	1c5a      	adds	r2, r3, #1
 800e4be:	6022      	str	r2, [r4, #0]
 800e4c0:	701d      	strb	r5, [r3, #0]
 800e4c2:	e7db      	b.n	800e47c <_puts_r+0x88>
 800e4c4:	080243c4 	.word	0x080243c4
 800e4c8:	080243e4 	.word	0x080243e4
 800e4cc:	080243a4 	.word	0x080243a4

0800e4d0 <puts>:
 800e4d0:	4b02      	ldr	r3, [pc, #8]	; (800e4dc <puts+0xc>)
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	6818      	ldr	r0, [r3, #0]
 800e4d6:	f7ff bf8d 	b.w	800e3f4 <_puts_r>
 800e4da:	bf00      	nop
 800e4dc:	20000090 	.word	0x20000090

0800e4e0 <_sbrk_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4d06      	ldr	r5, [pc, #24]	; (800e4fc <_sbrk_r+0x1c>)
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	4608      	mov	r0, r1
 800e4ea:	602b      	str	r3, [r5, #0]
 800e4ec:	f7f3 ffb6 	bl	800245c <_sbrk>
 800e4f0:	1c43      	adds	r3, r0, #1
 800e4f2:	d102      	bne.n	800e4fa <_sbrk_r+0x1a>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	b103      	cbz	r3, 800e4fa <_sbrk_r+0x1a>
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	bd38      	pop	{r3, r4, r5, pc}
 800e4fc:	20008ab4 	.word	0x20008ab4

0800e500 <__sread>:
 800e500:	b510      	push	{r4, lr}
 800e502:	460c      	mov	r4, r1
 800e504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e508:	f001 fd0e 	bl	800ff28 <_read_r>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	bfab      	itete	ge
 800e510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e512:	89a3      	ldrhlt	r3, [r4, #12]
 800e514:	181b      	addge	r3, r3, r0
 800e516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e51a:	bfac      	ite	ge
 800e51c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e51e:	81a3      	strhlt	r3, [r4, #12]
 800e520:	bd10      	pop	{r4, pc}

0800e522 <__swrite>:
 800e522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e526:	461f      	mov	r7, r3
 800e528:	898b      	ldrh	r3, [r1, #12]
 800e52a:	05db      	lsls	r3, r3, #23
 800e52c:	4605      	mov	r5, r0
 800e52e:	460c      	mov	r4, r1
 800e530:	4616      	mov	r6, r2
 800e532:	d505      	bpl.n	800e540 <__swrite+0x1e>
 800e534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e538:	2302      	movs	r3, #2
 800e53a:	2200      	movs	r2, #0
 800e53c:	f000 ff84 	bl	800f448 <_lseek_r>
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e54a:	81a3      	strh	r3, [r4, #12]
 800e54c:	4632      	mov	r2, r6
 800e54e:	463b      	mov	r3, r7
 800e550:	4628      	mov	r0, r5
 800e552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e556:	f000 b869 	b.w	800e62c <_write_r>

0800e55a <__sseek>:
 800e55a:	b510      	push	{r4, lr}
 800e55c:	460c      	mov	r4, r1
 800e55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e562:	f000 ff71 	bl	800f448 <_lseek_r>
 800e566:	1c43      	adds	r3, r0, #1
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	bf15      	itete	ne
 800e56c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e56e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e576:	81a3      	strheq	r3, [r4, #12]
 800e578:	bf18      	it	ne
 800e57a:	81a3      	strhne	r3, [r4, #12]
 800e57c:	bd10      	pop	{r4, pc}

0800e57e <__sclose>:
 800e57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e582:	f000 b8d3 	b.w	800e72c <_close_r>
	...

0800e588 <__swbuf_r>:
 800e588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58a:	460e      	mov	r6, r1
 800e58c:	4614      	mov	r4, r2
 800e58e:	4605      	mov	r5, r0
 800e590:	b118      	cbz	r0, 800e59a <__swbuf_r+0x12>
 800e592:	6983      	ldr	r3, [r0, #24]
 800e594:	b90b      	cbnz	r3, 800e59a <__swbuf_r+0x12>
 800e596:	f7ff f925 	bl	800d7e4 <__sinit>
 800e59a:	4b21      	ldr	r3, [pc, #132]	; (800e620 <__swbuf_r+0x98>)
 800e59c:	429c      	cmp	r4, r3
 800e59e:	d12b      	bne.n	800e5f8 <__swbuf_r+0x70>
 800e5a0:	686c      	ldr	r4, [r5, #4]
 800e5a2:	69a3      	ldr	r3, [r4, #24]
 800e5a4:	60a3      	str	r3, [r4, #8]
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	071a      	lsls	r2, r3, #28
 800e5aa:	d52f      	bpl.n	800e60c <__swbuf_r+0x84>
 800e5ac:	6923      	ldr	r3, [r4, #16]
 800e5ae:	b36b      	cbz	r3, 800e60c <__swbuf_r+0x84>
 800e5b0:	6923      	ldr	r3, [r4, #16]
 800e5b2:	6820      	ldr	r0, [r4, #0]
 800e5b4:	1ac0      	subs	r0, r0, r3
 800e5b6:	6963      	ldr	r3, [r4, #20]
 800e5b8:	b2f6      	uxtb	r6, r6
 800e5ba:	4283      	cmp	r3, r0
 800e5bc:	4637      	mov	r7, r6
 800e5be:	dc04      	bgt.n	800e5ca <__swbuf_r+0x42>
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	f7ff f87a 	bl	800d6bc <_fflush_r>
 800e5c8:	bb30      	cbnz	r0, 800e618 <__swbuf_r+0x90>
 800e5ca:	68a3      	ldr	r3, [r4, #8]
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	60a3      	str	r3, [r4, #8]
 800e5d0:	6823      	ldr	r3, [r4, #0]
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	6022      	str	r2, [r4, #0]
 800e5d6:	701e      	strb	r6, [r3, #0]
 800e5d8:	6963      	ldr	r3, [r4, #20]
 800e5da:	3001      	adds	r0, #1
 800e5dc:	4283      	cmp	r3, r0
 800e5de:	d004      	beq.n	800e5ea <__swbuf_r+0x62>
 800e5e0:	89a3      	ldrh	r3, [r4, #12]
 800e5e2:	07db      	lsls	r3, r3, #31
 800e5e4:	d506      	bpl.n	800e5f4 <__swbuf_r+0x6c>
 800e5e6:	2e0a      	cmp	r6, #10
 800e5e8:	d104      	bne.n	800e5f4 <__swbuf_r+0x6c>
 800e5ea:	4621      	mov	r1, r4
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	f7ff f865 	bl	800d6bc <_fflush_r>
 800e5f2:	b988      	cbnz	r0, 800e618 <__swbuf_r+0x90>
 800e5f4:	4638      	mov	r0, r7
 800e5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5f8:	4b0a      	ldr	r3, [pc, #40]	; (800e624 <__swbuf_r+0x9c>)
 800e5fa:	429c      	cmp	r4, r3
 800e5fc:	d101      	bne.n	800e602 <__swbuf_r+0x7a>
 800e5fe:	68ac      	ldr	r4, [r5, #8]
 800e600:	e7cf      	b.n	800e5a2 <__swbuf_r+0x1a>
 800e602:	4b09      	ldr	r3, [pc, #36]	; (800e628 <__swbuf_r+0xa0>)
 800e604:	429c      	cmp	r4, r3
 800e606:	bf08      	it	eq
 800e608:	68ec      	ldreq	r4, [r5, #12]
 800e60a:	e7ca      	b.n	800e5a2 <__swbuf_r+0x1a>
 800e60c:	4621      	mov	r1, r4
 800e60e:	4628      	mov	r0, r5
 800e610:	f000 f81e 	bl	800e650 <__swsetup_r>
 800e614:	2800      	cmp	r0, #0
 800e616:	d0cb      	beq.n	800e5b0 <__swbuf_r+0x28>
 800e618:	f04f 37ff 	mov.w	r7, #4294967295
 800e61c:	e7ea      	b.n	800e5f4 <__swbuf_r+0x6c>
 800e61e:	bf00      	nop
 800e620:	080243c4 	.word	0x080243c4
 800e624:	080243e4 	.word	0x080243e4
 800e628:	080243a4 	.word	0x080243a4

0800e62c <_write_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4d07      	ldr	r5, [pc, #28]	; (800e64c <_write_r+0x20>)
 800e630:	4604      	mov	r4, r0
 800e632:	4608      	mov	r0, r1
 800e634:	4611      	mov	r1, r2
 800e636:	2200      	movs	r2, #0
 800e638:	602a      	str	r2, [r5, #0]
 800e63a:	461a      	mov	r2, r3
 800e63c:	f7f3 febd 	bl	80023ba <_write>
 800e640:	1c43      	adds	r3, r0, #1
 800e642:	d102      	bne.n	800e64a <_write_r+0x1e>
 800e644:	682b      	ldr	r3, [r5, #0]
 800e646:	b103      	cbz	r3, 800e64a <_write_r+0x1e>
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	bd38      	pop	{r3, r4, r5, pc}
 800e64c:	20008ab4 	.word	0x20008ab4

0800e650 <__swsetup_r>:
 800e650:	4b32      	ldr	r3, [pc, #200]	; (800e71c <__swsetup_r+0xcc>)
 800e652:	b570      	push	{r4, r5, r6, lr}
 800e654:	681d      	ldr	r5, [r3, #0]
 800e656:	4606      	mov	r6, r0
 800e658:	460c      	mov	r4, r1
 800e65a:	b125      	cbz	r5, 800e666 <__swsetup_r+0x16>
 800e65c:	69ab      	ldr	r3, [r5, #24]
 800e65e:	b913      	cbnz	r3, 800e666 <__swsetup_r+0x16>
 800e660:	4628      	mov	r0, r5
 800e662:	f7ff f8bf 	bl	800d7e4 <__sinit>
 800e666:	4b2e      	ldr	r3, [pc, #184]	; (800e720 <__swsetup_r+0xd0>)
 800e668:	429c      	cmp	r4, r3
 800e66a:	d10f      	bne.n	800e68c <__swsetup_r+0x3c>
 800e66c:	686c      	ldr	r4, [r5, #4]
 800e66e:	89a3      	ldrh	r3, [r4, #12]
 800e670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e674:	0719      	lsls	r1, r3, #28
 800e676:	d42c      	bmi.n	800e6d2 <__swsetup_r+0x82>
 800e678:	06dd      	lsls	r5, r3, #27
 800e67a:	d411      	bmi.n	800e6a0 <__swsetup_r+0x50>
 800e67c:	2309      	movs	r3, #9
 800e67e:	6033      	str	r3, [r6, #0]
 800e680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e684:	81a3      	strh	r3, [r4, #12]
 800e686:	f04f 30ff 	mov.w	r0, #4294967295
 800e68a:	e03e      	b.n	800e70a <__swsetup_r+0xba>
 800e68c:	4b25      	ldr	r3, [pc, #148]	; (800e724 <__swsetup_r+0xd4>)
 800e68e:	429c      	cmp	r4, r3
 800e690:	d101      	bne.n	800e696 <__swsetup_r+0x46>
 800e692:	68ac      	ldr	r4, [r5, #8]
 800e694:	e7eb      	b.n	800e66e <__swsetup_r+0x1e>
 800e696:	4b24      	ldr	r3, [pc, #144]	; (800e728 <__swsetup_r+0xd8>)
 800e698:	429c      	cmp	r4, r3
 800e69a:	bf08      	it	eq
 800e69c:	68ec      	ldreq	r4, [r5, #12]
 800e69e:	e7e6      	b.n	800e66e <__swsetup_r+0x1e>
 800e6a0:	0758      	lsls	r0, r3, #29
 800e6a2:	d512      	bpl.n	800e6ca <__swsetup_r+0x7a>
 800e6a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6a6:	b141      	cbz	r1, 800e6ba <__swsetup_r+0x6a>
 800e6a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6ac:	4299      	cmp	r1, r3
 800e6ae:	d002      	beq.n	800e6b6 <__swsetup_r+0x66>
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	f7ff f973 	bl	800d99c <_free_r>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	6363      	str	r3, [r4, #52]	; 0x34
 800e6ba:	89a3      	ldrh	r3, [r4, #12]
 800e6bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6c0:	81a3      	strh	r3, [r4, #12]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	6063      	str	r3, [r4, #4]
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f043 0308 	orr.w	r3, r3, #8
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	6923      	ldr	r3, [r4, #16]
 800e6d4:	b94b      	cbnz	r3, 800e6ea <__swsetup_r+0x9a>
 800e6d6:	89a3      	ldrh	r3, [r4, #12]
 800e6d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e6dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6e0:	d003      	beq.n	800e6ea <__swsetup_r+0x9a>
 800e6e2:	4621      	mov	r1, r4
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	f000 fee5 	bl	800f4b4 <__smakebuf_r>
 800e6ea:	89a0      	ldrh	r0, [r4, #12]
 800e6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6f0:	f010 0301 	ands.w	r3, r0, #1
 800e6f4:	d00a      	beq.n	800e70c <__swsetup_r+0xbc>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	60a3      	str	r3, [r4, #8]
 800e6fa:	6963      	ldr	r3, [r4, #20]
 800e6fc:	425b      	negs	r3, r3
 800e6fe:	61a3      	str	r3, [r4, #24]
 800e700:	6923      	ldr	r3, [r4, #16]
 800e702:	b943      	cbnz	r3, 800e716 <__swsetup_r+0xc6>
 800e704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e708:	d1ba      	bne.n	800e680 <__swsetup_r+0x30>
 800e70a:	bd70      	pop	{r4, r5, r6, pc}
 800e70c:	0781      	lsls	r1, r0, #30
 800e70e:	bf58      	it	pl
 800e710:	6963      	ldrpl	r3, [r4, #20]
 800e712:	60a3      	str	r3, [r4, #8]
 800e714:	e7f4      	b.n	800e700 <__swsetup_r+0xb0>
 800e716:	2000      	movs	r0, #0
 800e718:	e7f7      	b.n	800e70a <__swsetup_r+0xba>
 800e71a:	bf00      	nop
 800e71c:	20000090 	.word	0x20000090
 800e720:	080243c4 	.word	0x080243c4
 800e724:	080243e4 	.word	0x080243e4
 800e728:	080243a4 	.word	0x080243a4

0800e72c <_close_r>:
 800e72c:	b538      	push	{r3, r4, r5, lr}
 800e72e:	4d06      	ldr	r5, [pc, #24]	; (800e748 <_close_r+0x1c>)
 800e730:	2300      	movs	r3, #0
 800e732:	4604      	mov	r4, r0
 800e734:	4608      	mov	r0, r1
 800e736:	602b      	str	r3, [r5, #0]
 800e738:	f7f3 fe5b 	bl	80023f2 <_close>
 800e73c:	1c43      	adds	r3, r0, #1
 800e73e:	d102      	bne.n	800e746 <_close_r+0x1a>
 800e740:	682b      	ldr	r3, [r5, #0]
 800e742:	b103      	cbz	r3, 800e746 <_close_r+0x1a>
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	bd38      	pop	{r3, r4, r5, pc}
 800e748:	20008ab4 	.word	0x20008ab4

0800e74c <quorem>:
 800e74c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e750:	6903      	ldr	r3, [r0, #16]
 800e752:	690c      	ldr	r4, [r1, #16]
 800e754:	42a3      	cmp	r3, r4
 800e756:	4607      	mov	r7, r0
 800e758:	f2c0 8081 	blt.w	800e85e <quorem+0x112>
 800e75c:	3c01      	subs	r4, #1
 800e75e:	f101 0814 	add.w	r8, r1, #20
 800e762:	f100 0514 	add.w	r5, r0, #20
 800e766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e76a:	9301      	str	r3, [sp, #4]
 800e76c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e774:	3301      	adds	r3, #1
 800e776:	429a      	cmp	r2, r3
 800e778:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e77c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e780:	fbb2 f6f3 	udiv	r6, r2, r3
 800e784:	d331      	bcc.n	800e7ea <quorem+0x9e>
 800e786:	f04f 0e00 	mov.w	lr, #0
 800e78a:	4640      	mov	r0, r8
 800e78c:	46ac      	mov	ip, r5
 800e78e:	46f2      	mov	sl, lr
 800e790:	f850 2b04 	ldr.w	r2, [r0], #4
 800e794:	b293      	uxth	r3, r2
 800e796:	fb06 e303 	mla	r3, r6, r3, lr
 800e79a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	ebaa 0303 	sub.w	r3, sl, r3
 800e7a4:	0c12      	lsrs	r2, r2, #16
 800e7a6:	f8dc a000 	ldr.w	sl, [ip]
 800e7aa:	fb06 e202 	mla	r2, r6, r2, lr
 800e7ae:	fa13 f38a 	uxtah	r3, r3, sl
 800e7b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7b6:	fa1f fa82 	uxth.w	sl, r2
 800e7ba:	f8dc 2000 	ldr.w	r2, [ip]
 800e7be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e7c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7cc:	4581      	cmp	r9, r0
 800e7ce:	f84c 3b04 	str.w	r3, [ip], #4
 800e7d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7d6:	d2db      	bcs.n	800e790 <quorem+0x44>
 800e7d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7dc:	b92b      	cbnz	r3, 800e7ea <quorem+0x9e>
 800e7de:	9b01      	ldr	r3, [sp, #4]
 800e7e0:	3b04      	subs	r3, #4
 800e7e2:	429d      	cmp	r5, r3
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	d32e      	bcc.n	800e846 <quorem+0xfa>
 800e7e8:	613c      	str	r4, [r7, #16]
 800e7ea:	4638      	mov	r0, r7
 800e7ec:	f001 f934 	bl	800fa58 <__mcmp>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	db24      	blt.n	800e83e <quorem+0xf2>
 800e7f4:	3601      	adds	r6, #1
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	f04f 0c00 	mov.w	ip, #0
 800e7fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e800:	f8d0 e000 	ldr.w	lr, [r0]
 800e804:	b293      	uxth	r3, r2
 800e806:	ebac 0303 	sub.w	r3, ip, r3
 800e80a:	0c12      	lsrs	r2, r2, #16
 800e80c:	fa13 f38e 	uxtah	r3, r3, lr
 800e810:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e814:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e818:	b29b      	uxth	r3, r3
 800e81a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e81e:	45c1      	cmp	r9, r8
 800e820:	f840 3b04 	str.w	r3, [r0], #4
 800e824:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e828:	d2e8      	bcs.n	800e7fc <quorem+0xb0>
 800e82a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e82e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e832:	b922      	cbnz	r2, 800e83e <quorem+0xf2>
 800e834:	3b04      	subs	r3, #4
 800e836:	429d      	cmp	r5, r3
 800e838:	461a      	mov	r2, r3
 800e83a:	d30a      	bcc.n	800e852 <quorem+0x106>
 800e83c:	613c      	str	r4, [r7, #16]
 800e83e:	4630      	mov	r0, r6
 800e840:	b003      	add	sp, #12
 800e842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e846:	6812      	ldr	r2, [r2, #0]
 800e848:	3b04      	subs	r3, #4
 800e84a:	2a00      	cmp	r2, #0
 800e84c:	d1cc      	bne.n	800e7e8 <quorem+0x9c>
 800e84e:	3c01      	subs	r4, #1
 800e850:	e7c7      	b.n	800e7e2 <quorem+0x96>
 800e852:	6812      	ldr	r2, [r2, #0]
 800e854:	3b04      	subs	r3, #4
 800e856:	2a00      	cmp	r2, #0
 800e858:	d1f0      	bne.n	800e83c <quorem+0xf0>
 800e85a:	3c01      	subs	r4, #1
 800e85c:	e7eb      	b.n	800e836 <quorem+0xea>
 800e85e:	2000      	movs	r0, #0
 800e860:	e7ee      	b.n	800e840 <quorem+0xf4>
 800e862:	0000      	movs	r0, r0
 800e864:	0000      	movs	r0, r0
	...

0800e868 <_dtoa_r>:
 800e868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	ed2d 8b02 	vpush	{d8}
 800e870:	ec57 6b10 	vmov	r6, r7, d0
 800e874:	b095      	sub	sp, #84	; 0x54
 800e876:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e878:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e87c:	9105      	str	r1, [sp, #20]
 800e87e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e882:	4604      	mov	r4, r0
 800e884:	9209      	str	r2, [sp, #36]	; 0x24
 800e886:	930f      	str	r3, [sp, #60]	; 0x3c
 800e888:	b975      	cbnz	r5, 800e8a8 <_dtoa_r+0x40>
 800e88a:	2010      	movs	r0, #16
 800e88c:	f000 fe52 	bl	800f534 <malloc>
 800e890:	4602      	mov	r2, r0
 800e892:	6260      	str	r0, [r4, #36]	; 0x24
 800e894:	b920      	cbnz	r0, 800e8a0 <_dtoa_r+0x38>
 800e896:	4bb2      	ldr	r3, [pc, #712]	; (800eb60 <_dtoa_r+0x2f8>)
 800e898:	21ea      	movs	r1, #234	; 0xea
 800e89a:	48b2      	ldr	r0, [pc, #712]	; (800eb64 <_dtoa_r+0x2fc>)
 800e89c:	f001 fb56 	bl	800ff4c <__assert_func>
 800e8a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8a4:	6005      	str	r5, [r0, #0]
 800e8a6:	60c5      	str	r5, [r0, #12]
 800e8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8aa:	6819      	ldr	r1, [r3, #0]
 800e8ac:	b151      	cbz	r1, 800e8c4 <_dtoa_r+0x5c>
 800e8ae:	685a      	ldr	r2, [r3, #4]
 800e8b0:	604a      	str	r2, [r1, #4]
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	4093      	lsls	r3, r2
 800e8b6:	608b      	str	r3, [r1, #8]
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f000 fe8f 	bl	800f5dc <_Bfree>
 800e8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	1e3b      	subs	r3, r7, #0
 800e8c6:	bfb9      	ittee	lt
 800e8c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e8cc:	9303      	strlt	r3, [sp, #12]
 800e8ce:	2300      	movge	r3, #0
 800e8d0:	f8c8 3000 	strge.w	r3, [r8]
 800e8d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e8d8:	4ba3      	ldr	r3, [pc, #652]	; (800eb68 <_dtoa_r+0x300>)
 800e8da:	bfbc      	itt	lt
 800e8dc:	2201      	movlt	r2, #1
 800e8de:	f8c8 2000 	strlt.w	r2, [r8]
 800e8e2:	ea33 0309 	bics.w	r3, r3, r9
 800e8e6:	d11b      	bne.n	800e920 <_dtoa_r+0xb8>
 800e8e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8f4:	4333      	orrs	r3, r6
 800e8f6:	f000 857a 	beq.w	800f3ee <_dtoa_r+0xb86>
 800e8fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8fc:	b963      	cbnz	r3, 800e918 <_dtoa_r+0xb0>
 800e8fe:	4b9b      	ldr	r3, [pc, #620]	; (800eb6c <_dtoa_r+0x304>)
 800e900:	e024      	b.n	800e94c <_dtoa_r+0xe4>
 800e902:	4b9b      	ldr	r3, [pc, #620]	; (800eb70 <_dtoa_r+0x308>)
 800e904:	9300      	str	r3, [sp, #0]
 800e906:	3308      	adds	r3, #8
 800e908:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	9800      	ldr	r0, [sp, #0]
 800e90e:	b015      	add	sp, #84	; 0x54
 800e910:	ecbd 8b02 	vpop	{d8}
 800e914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e918:	4b94      	ldr	r3, [pc, #592]	; (800eb6c <_dtoa_r+0x304>)
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	3303      	adds	r3, #3
 800e91e:	e7f3      	b.n	800e908 <_dtoa_r+0xa0>
 800e920:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e924:	2200      	movs	r2, #0
 800e926:	ec51 0b17 	vmov	r0, r1, d7
 800e92a:	2300      	movs	r3, #0
 800e92c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e930:	f7f2 f92a 	bl	8000b88 <__aeabi_dcmpeq>
 800e934:	4680      	mov	r8, r0
 800e936:	b158      	cbz	r0, 800e950 <_dtoa_r+0xe8>
 800e938:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e93a:	2301      	movs	r3, #1
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e940:	2b00      	cmp	r3, #0
 800e942:	f000 8551 	beq.w	800f3e8 <_dtoa_r+0xb80>
 800e946:	488b      	ldr	r0, [pc, #556]	; (800eb74 <_dtoa_r+0x30c>)
 800e948:	6018      	str	r0, [r3, #0]
 800e94a:	1e43      	subs	r3, r0, #1
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	e7dd      	b.n	800e90c <_dtoa_r+0xa4>
 800e950:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e954:	aa12      	add	r2, sp, #72	; 0x48
 800e956:	a913      	add	r1, sp, #76	; 0x4c
 800e958:	4620      	mov	r0, r4
 800e95a:	f001 f921 	bl	800fba0 <__d2b>
 800e95e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e962:	4683      	mov	fp, r0
 800e964:	2d00      	cmp	r5, #0
 800e966:	d07c      	beq.n	800ea62 <_dtoa_r+0x1fa>
 800e968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e96a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e96e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e972:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e976:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e97a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e97e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e982:	4b7d      	ldr	r3, [pc, #500]	; (800eb78 <_dtoa_r+0x310>)
 800e984:	2200      	movs	r2, #0
 800e986:	4630      	mov	r0, r6
 800e988:	4639      	mov	r1, r7
 800e98a:	f7f1 fcdd 	bl	8000348 <__aeabi_dsub>
 800e98e:	a36e      	add	r3, pc, #440	; (adr r3, 800eb48 <_dtoa_r+0x2e0>)
 800e990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e994:	f7f1 fe90 	bl	80006b8 <__aeabi_dmul>
 800e998:	a36d      	add	r3, pc, #436	; (adr r3, 800eb50 <_dtoa_r+0x2e8>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	f7f1 fcd5 	bl	800034c <__adddf3>
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	460f      	mov	r7, r1
 800e9a8:	f7f1 fe1c 	bl	80005e4 <__aeabi_i2d>
 800e9ac:	a36a      	add	r3, pc, #424	; (adr r3, 800eb58 <_dtoa_r+0x2f0>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	f7f1 fe81 	bl	80006b8 <__aeabi_dmul>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f1 fcc5 	bl	800034c <__adddf3>
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	f7f2 f927 	bl	8000c18 <__aeabi_d2iz>
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	4682      	mov	sl, r0
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	4639      	mov	r1, r7
 800e9d4:	f7f2 f8e2 	bl	8000b9c <__aeabi_dcmplt>
 800e9d8:	b148      	cbz	r0, 800e9ee <_dtoa_r+0x186>
 800e9da:	4650      	mov	r0, sl
 800e9dc:	f7f1 fe02 	bl	80005e4 <__aeabi_i2d>
 800e9e0:	4632      	mov	r2, r6
 800e9e2:	463b      	mov	r3, r7
 800e9e4:	f7f2 f8d0 	bl	8000b88 <__aeabi_dcmpeq>
 800e9e8:	b908      	cbnz	r0, 800e9ee <_dtoa_r+0x186>
 800e9ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9ee:	f1ba 0f16 	cmp.w	sl, #22
 800e9f2:	d854      	bhi.n	800ea9e <_dtoa_r+0x236>
 800e9f4:	4b61      	ldr	r3, [pc, #388]	; (800eb7c <_dtoa_r+0x314>)
 800e9f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ea02:	f7f2 f8cb 	bl	8000b9c <__aeabi_dcmplt>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d04b      	beq.n	800eaa2 <_dtoa_r+0x23a>
 800ea0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea0e:	2300      	movs	r3, #0
 800ea10:	930e      	str	r3, [sp, #56]	; 0x38
 800ea12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea14:	1b5d      	subs	r5, r3, r5
 800ea16:	1e6b      	subs	r3, r5, #1
 800ea18:	9304      	str	r3, [sp, #16]
 800ea1a:	bf43      	ittte	mi
 800ea1c:	2300      	movmi	r3, #0
 800ea1e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ea22:	9304      	strmi	r3, [sp, #16]
 800ea24:	f04f 0800 	movpl.w	r8, #0
 800ea28:	f1ba 0f00 	cmp.w	sl, #0
 800ea2c:	db3b      	blt.n	800eaa6 <_dtoa_r+0x23e>
 800ea2e:	9b04      	ldr	r3, [sp, #16]
 800ea30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ea34:	4453      	add	r3, sl
 800ea36:	9304      	str	r3, [sp, #16]
 800ea38:	2300      	movs	r3, #0
 800ea3a:	9306      	str	r3, [sp, #24]
 800ea3c:	9b05      	ldr	r3, [sp, #20]
 800ea3e:	2b09      	cmp	r3, #9
 800ea40:	d869      	bhi.n	800eb16 <_dtoa_r+0x2ae>
 800ea42:	2b05      	cmp	r3, #5
 800ea44:	bfc4      	itt	gt
 800ea46:	3b04      	subgt	r3, #4
 800ea48:	9305      	strgt	r3, [sp, #20]
 800ea4a:	9b05      	ldr	r3, [sp, #20]
 800ea4c:	f1a3 0302 	sub.w	r3, r3, #2
 800ea50:	bfcc      	ite	gt
 800ea52:	2500      	movgt	r5, #0
 800ea54:	2501      	movle	r5, #1
 800ea56:	2b03      	cmp	r3, #3
 800ea58:	d869      	bhi.n	800eb2e <_dtoa_r+0x2c6>
 800ea5a:	e8df f003 	tbb	[pc, r3]
 800ea5e:	4e2c      	.short	0x4e2c
 800ea60:	5a4c      	.short	0x5a4c
 800ea62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ea66:	441d      	add	r5, r3
 800ea68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea6c:	2b20      	cmp	r3, #32
 800ea6e:	bfc1      	itttt	gt
 800ea70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ea78:	fa09 f303 	lslgt.w	r3, r9, r3
 800ea7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ea80:	bfda      	itte	le
 800ea82:	f1c3 0320 	rsble	r3, r3, #32
 800ea86:	fa06 f003 	lslle.w	r0, r6, r3
 800ea8a:	4318      	orrgt	r0, r3
 800ea8c:	f7f1 fd9a 	bl	80005c4 <__aeabi_ui2d>
 800ea90:	2301      	movs	r3, #1
 800ea92:	4606      	mov	r6, r0
 800ea94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ea98:	3d01      	subs	r5, #1
 800ea9a:	9310      	str	r3, [sp, #64]	; 0x40
 800ea9c:	e771      	b.n	800e982 <_dtoa_r+0x11a>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e7b6      	b.n	800ea10 <_dtoa_r+0x1a8>
 800eaa2:	900e      	str	r0, [sp, #56]	; 0x38
 800eaa4:	e7b5      	b.n	800ea12 <_dtoa_r+0x1aa>
 800eaa6:	f1ca 0300 	rsb	r3, sl, #0
 800eaaa:	9306      	str	r3, [sp, #24]
 800eaac:	2300      	movs	r3, #0
 800eaae:	eba8 080a 	sub.w	r8, r8, sl
 800eab2:	930d      	str	r3, [sp, #52]	; 0x34
 800eab4:	e7c2      	b.n	800ea3c <_dtoa_r+0x1d4>
 800eab6:	2300      	movs	r3, #0
 800eab8:	9308      	str	r3, [sp, #32]
 800eaba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	dc39      	bgt.n	800eb34 <_dtoa_r+0x2cc>
 800eac0:	f04f 0901 	mov.w	r9, #1
 800eac4:	f8cd 9004 	str.w	r9, [sp, #4]
 800eac8:	464b      	mov	r3, r9
 800eaca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800eace:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ead0:	2200      	movs	r2, #0
 800ead2:	6042      	str	r2, [r0, #4]
 800ead4:	2204      	movs	r2, #4
 800ead6:	f102 0614 	add.w	r6, r2, #20
 800eada:	429e      	cmp	r6, r3
 800eadc:	6841      	ldr	r1, [r0, #4]
 800eade:	d92f      	bls.n	800eb40 <_dtoa_r+0x2d8>
 800eae0:	4620      	mov	r0, r4
 800eae2:	f000 fd3b 	bl	800f55c <_Balloc>
 800eae6:	9000      	str	r0, [sp, #0]
 800eae8:	2800      	cmp	r0, #0
 800eaea:	d14b      	bne.n	800eb84 <_dtoa_r+0x31c>
 800eaec:	4b24      	ldr	r3, [pc, #144]	; (800eb80 <_dtoa_r+0x318>)
 800eaee:	4602      	mov	r2, r0
 800eaf0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eaf4:	e6d1      	b.n	800e89a <_dtoa_r+0x32>
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e7de      	b.n	800eab8 <_dtoa_r+0x250>
 800eafa:	2300      	movs	r3, #0
 800eafc:	9308      	str	r3, [sp, #32]
 800eafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb00:	eb0a 0903 	add.w	r9, sl, r3
 800eb04:	f109 0301 	add.w	r3, r9, #1
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	9301      	str	r3, [sp, #4]
 800eb0c:	bfb8      	it	lt
 800eb0e:	2301      	movlt	r3, #1
 800eb10:	e7dd      	b.n	800eace <_dtoa_r+0x266>
 800eb12:	2301      	movs	r3, #1
 800eb14:	e7f2      	b.n	800eafc <_dtoa_r+0x294>
 800eb16:	2501      	movs	r5, #1
 800eb18:	2300      	movs	r3, #0
 800eb1a:	9305      	str	r3, [sp, #20]
 800eb1c:	9508      	str	r5, [sp, #32]
 800eb1e:	f04f 39ff 	mov.w	r9, #4294967295
 800eb22:	2200      	movs	r2, #0
 800eb24:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb28:	2312      	movs	r3, #18
 800eb2a:	9209      	str	r2, [sp, #36]	; 0x24
 800eb2c:	e7cf      	b.n	800eace <_dtoa_r+0x266>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	9308      	str	r3, [sp, #32]
 800eb32:	e7f4      	b.n	800eb1e <_dtoa_r+0x2b6>
 800eb34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800eb38:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb3c:	464b      	mov	r3, r9
 800eb3e:	e7c6      	b.n	800eace <_dtoa_r+0x266>
 800eb40:	3101      	adds	r1, #1
 800eb42:	6041      	str	r1, [r0, #4]
 800eb44:	0052      	lsls	r2, r2, #1
 800eb46:	e7c6      	b.n	800ead6 <_dtoa_r+0x26e>
 800eb48:	636f4361 	.word	0x636f4361
 800eb4c:	3fd287a7 	.word	0x3fd287a7
 800eb50:	8b60c8b3 	.word	0x8b60c8b3
 800eb54:	3fc68a28 	.word	0x3fc68a28
 800eb58:	509f79fb 	.word	0x509f79fb
 800eb5c:	3fd34413 	.word	0x3fd34413
 800eb60:	08024449 	.word	0x08024449
 800eb64:	08024460 	.word	0x08024460
 800eb68:	7ff00000 	.word	0x7ff00000
 800eb6c:	08024445 	.word	0x08024445
 800eb70:	0802443c 	.word	0x0802443c
 800eb74:	08024419 	.word	0x08024419
 800eb78:	3ff80000 	.word	0x3ff80000
 800eb7c:	08024558 	.word	0x08024558
 800eb80:	080244bf 	.word	0x080244bf
 800eb84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb86:	9a00      	ldr	r2, [sp, #0]
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	9b01      	ldr	r3, [sp, #4]
 800eb8c:	2b0e      	cmp	r3, #14
 800eb8e:	f200 80ad 	bhi.w	800ecec <_dtoa_r+0x484>
 800eb92:	2d00      	cmp	r5, #0
 800eb94:	f000 80aa 	beq.w	800ecec <_dtoa_r+0x484>
 800eb98:	f1ba 0f00 	cmp.w	sl, #0
 800eb9c:	dd36      	ble.n	800ec0c <_dtoa_r+0x3a4>
 800eb9e:	4ac3      	ldr	r2, [pc, #780]	; (800eeac <_dtoa_r+0x644>)
 800eba0:	f00a 030f 	and.w	r3, sl, #15
 800eba4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eba8:	ed93 7b00 	vldr	d7, [r3]
 800ebac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ebb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ebb4:	eeb0 8a47 	vmov.f32	s16, s14
 800ebb8:	eef0 8a67 	vmov.f32	s17, s15
 800ebbc:	d016      	beq.n	800ebec <_dtoa_r+0x384>
 800ebbe:	4bbc      	ldr	r3, [pc, #752]	; (800eeb0 <_dtoa_r+0x648>)
 800ebc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ebc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebc8:	f7f1 fea0 	bl	800090c <__aeabi_ddiv>
 800ebcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebd0:	f007 070f 	and.w	r7, r7, #15
 800ebd4:	2503      	movs	r5, #3
 800ebd6:	4eb6      	ldr	r6, [pc, #728]	; (800eeb0 <_dtoa_r+0x648>)
 800ebd8:	b957      	cbnz	r7, 800ebf0 <_dtoa_r+0x388>
 800ebda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebde:	ec53 2b18 	vmov	r2, r3, d8
 800ebe2:	f7f1 fe93 	bl	800090c <__aeabi_ddiv>
 800ebe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebea:	e029      	b.n	800ec40 <_dtoa_r+0x3d8>
 800ebec:	2502      	movs	r5, #2
 800ebee:	e7f2      	b.n	800ebd6 <_dtoa_r+0x36e>
 800ebf0:	07f9      	lsls	r1, r7, #31
 800ebf2:	d508      	bpl.n	800ec06 <_dtoa_r+0x39e>
 800ebf4:	ec51 0b18 	vmov	r0, r1, d8
 800ebf8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ebfc:	f7f1 fd5c 	bl	80006b8 <__aeabi_dmul>
 800ec00:	ec41 0b18 	vmov	d8, r0, r1
 800ec04:	3501      	adds	r5, #1
 800ec06:	107f      	asrs	r7, r7, #1
 800ec08:	3608      	adds	r6, #8
 800ec0a:	e7e5      	b.n	800ebd8 <_dtoa_r+0x370>
 800ec0c:	f000 80a6 	beq.w	800ed5c <_dtoa_r+0x4f4>
 800ec10:	f1ca 0600 	rsb	r6, sl, #0
 800ec14:	4ba5      	ldr	r3, [pc, #660]	; (800eeac <_dtoa_r+0x644>)
 800ec16:	4fa6      	ldr	r7, [pc, #664]	; (800eeb0 <_dtoa_r+0x648>)
 800ec18:	f006 020f 	and.w	r2, r6, #15
 800ec1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec28:	f7f1 fd46 	bl	80006b8 <__aeabi_dmul>
 800ec2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec30:	1136      	asrs	r6, r6, #4
 800ec32:	2300      	movs	r3, #0
 800ec34:	2502      	movs	r5, #2
 800ec36:	2e00      	cmp	r6, #0
 800ec38:	f040 8085 	bne.w	800ed46 <_dtoa_r+0x4de>
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1d2      	bne.n	800ebe6 <_dtoa_r+0x37e>
 800ec40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 808c 	beq.w	800ed60 <_dtoa_r+0x4f8>
 800ec48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec4c:	4b99      	ldr	r3, [pc, #612]	; (800eeb4 <_dtoa_r+0x64c>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	4630      	mov	r0, r6
 800ec52:	4639      	mov	r1, r7
 800ec54:	f7f1 ffa2 	bl	8000b9c <__aeabi_dcmplt>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	f000 8081 	beq.w	800ed60 <_dtoa_r+0x4f8>
 800ec5e:	9b01      	ldr	r3, [sp, #4]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d07d      	beq.n	800ed60 <_dtoa_r+0x4f8>
 800ec64:	f1b9 0f00 	cmp.w	r9, #0
 800ec68:	dd3c      	ble.n	800ece4 <_dtoa_r+0x47c>
 800ec6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ec6e:	9307      	str	r3, [sp, #28]
 800ec70:	2200      	movs	r2, #0
 800ec72:	4b91      	ldr	r3, [pc, #580]	; (800eeb8 <_dtoa_r+0x650>)
 800ec74:	4630      	mov	r0, r6
 800ec76:	4639      	mov	r1, r7
 800ec78:	f7f1 fd1e 	bl	80006b8 <__aeabi_dmul>
 800ec7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec80:	3501      	adds	r5, #1
 800ec82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ec86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	f7f1 fcaa 	bl	80005e4 <__aeabi_i2d>
 800ec90:	4632      	mov	r2, r6
 800ec92:	463b      	mov	r3, r7
 800ec94:	f7f1 fd10 	bl	80006b8 <__aeabi_dmul>
 800ec98:	4b88      	ldr	r3, [pc, #544]	; (800eebc <_dtoa_r+0x654>)
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f7f1 fb56 	bl	800034c <__adddf3>
 800eca0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eca8:	9303      	str	r3, [sp, #12]
 800ecaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d15c      	bne.n	800ed6a <_dtoa_r+0x502>
 800ecb0:	4b83      	ldr	r3, [pc, #524]	; (800eec0 <_dtoa_r+0x658>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	f7f1 fb46 	bl	8000348 <__aeabi_dsub>
 800ecbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecc0:	4606      	mov	r6, r0
 800ecc2:	460f      	mov	r7, r1
 800ecc4:	f7f1 ff88 	bl	8000bd8 <__aeabi_dcmpgt>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	f040 8296 	bne.w	800f1fa <_dtoa_r+0x992>
 800ecce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecd8:	4639      	mov	r1, r7
 800ecda:	f7f1 ff5f 	bl	8000b9c <__aeabi_dcmplt>
 800ecde:	2800      	cmp	r0, #0
 800ece0:	f040 8288 	bne.w	800f1f4 <_dtoa_r+0x98c>
 800ece4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ece8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f2c0 8158 	blt.w	800efa4 <_dtoa_r+0x73c>
 800ecf4:	f1ba 0f0e 	cmp.w	sl, #14
 800ecf8:	f300 8154 	bgt.w	800efa4 <_dtoa_r+0x73c>
 800ecfc:	4b6b      	ldr	r3, [pc, #428]	; (800eeac <_dtoa_r+0x644>)
 800ecfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ed02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f280 80e3 	bge.w	800eed4 <_dtoa_r+0x66c>
 800ed0e:	9b01      	ldr	r3, [sp, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	f300 80df 	bgt.w	800eed4 <_dtoa_r+0x66c>
 800ed16:	f040 826d 	bne.w	800f1f4 <_dtoa_r+0x98c>
 800ed1a:	4b69      	ldr	r3, [pc, #420]	; (800eec0 <_dtoa_r+0x658>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	4640      	mov	r0, r8
 800ed20:	4649      	mov	r1, r9
 800ed22:	f7f1 fcc9 	bl	80006b8 <__aeabi_dmul>
 800ed26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed2a:	f7f1 ff4b 	bl	8000bc4 <__aeabi_dcmpge>
 800ed2e:	9e01      	ldr	r6, [sp, #4]
 800ed30:	4637      	mov	r7, r6
 800ed32:	2800      	cmp	r0, #0
 800ed34:	f040 8243 	bne.w	800f1be <_dtoa_r+0x956>
 800ed38:	9d00      	ldr	r5, [sp, #0]
 800ed3a:	2331      	movs	r3, #49	; 0x31
 800ed3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ed40:	f10a 0a01 	add.w	sl, sl, #1
 800ed44:	e23f      	b.n	800f1c6 <_dtoa_r+0x95e>
 800ed46:	07f2      	lsls	r2, r6, #31
 800ed48:	d505      	bpl.n	800ed56 <_dtoa_r+0x4ee>
 800ed4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed4e:	f7f1 fcb3 	bl	80006b8 <__aeabi_dmul>
 800ed52:	3501      	adds	r5, #1
 800ed54:	2301      	movs	r3, #1
 800ed56:	1076      	asrs	r6, r6, #1
 800ed58:	3708      	adds	r7, #8
 800ed5a:	e76c      	b.n	800ec36 <_dtoa_r+0x3ce>
 800ed5c:	2502      	movs	r5, #2
 800ed5e:	e76f      	b.n	800ec40 <_dtoa_r+0x3d8>
 800ed60:	9b01      	ldr	r3, [sp, #4]
 800ed62:	f8cd a01c 	str.w	sl, [sp, #28]
 800ed66:	930c      	str	r3, [sp, #48]	; 0x30
 800ed68:	e78d      	b.n	800ec86 <_dtoa_r+0x41e>
 800ed6a:	9900      	ldr	r1, [sp, #0]
 800ed6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ed6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed70:	4b4e      	ldr	r3, [pc, #312]	; (800eeac <_dtoa_r+0x644>)
 800ed72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed76:	4401      	add	r1, r0
 800ed78:	9102      	str	r1, [sp, #8]
 800ed7a:	9908      	ldr	r1, [sp, #32]
 800ed7c:	eeb0 8a47 	vmov.f32	s16, s14
 800ed80:	eef0 8a67 	vmov.f32	s17, s15
 800ed84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed8c:	2900      	cmp	r1, #0
 800ed8e:	d045      	beq.n	800ee1c <_dtoa_r+0x5b4>
 800ed90:	494c      	ldr	r1, [pc, #304]	; (800eec4 <_dtoa_r+0x65c>)
 800ed92:	2000      	movs	r0, #0
 800ed94:	f7f1 fdba 	bl	800090c <__aeabi_ddiv>
 800ed98:	ec53 2b18 	vmov	r2, r3, d8
 800ed9c:	f7f1 fad4 	bl	8000348 <__aeabi_dsub>
 800eda0:	9d00      	ldr	r5, [sp, #0]
 800eda2:	ec41 0b18 	vmov	d8, r0, r1
 800eda6:	4639      	mov	r1, r7
 800eda8:	4630      	mov	r0, r6
 800edaa:	f7f1 ff35 	bl	8000c18 <__aeabi_d2iz>
 800edae:	900c      	str	r0, [sp, #48]	; 0x30
 800edb0:	f7f1 fc18 	bl	80005e4 <__aeabi_i2d>
 800edb4:	4602      	mov	r2, r0
 800edb6:	460b      	mov	r3, r1
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f1 fac4 	bl	8000348 <__aeabi_dsub>
 800edc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edc2:	3330      	adds	r3, #48	; 0x30
 800edc4:	f805 3b01 	strb.w	r3, [r5], #1
 800edc8:	ec53 2b18 	vmov	r2, r3, d8
 800edcc:	4606      	mov	r6, r0
 800edce:	460f      	mov	r7, r1
 800edd0:	f7f1 fee4 	bl	8000b9c <__aeabi_dcmplt>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	d165      	bne.n	800eea4 <_dtoa_r+0x63c>
 800edd8:	4632      	mov	r2, r6
 800edda:	463b      	mov	r3, r7
 800eddc:	4935      	ldr	r1, [pc, #212]	; (800eeb4 <_dtoa_r+0x64c>)
 800edde:	2000      	movs	r0, #0
 800ede0:	f7f1 fab2 	bl	8000348 <__aeabi_dsub>
 800ede4:	ec53 2b18 	vmov	r2, r3, d8
 800ede8:	f7f1 fed8 	bl	8000b9c <__aeabi_dcmplt>
 800edec:	2800      	cmp	r0, #0
 800edee:	f040 80b9 	bne.w	800ef64 <_dtoa_r+0x6fc>
 800edf2:	9b02      	ldr	r3, [sp, #8]
 800edf4:	429d      	cmp	r5, r3
 800edf6:	f43f af75 	beq.w	800ece4 <_dtoa_r+0x47c>
 800edfa:	4b2f      	ldr	r3, [pc, #188]	; (800eeb8 <_dtoa_r+0x650>)
 800edfc:	ec51 0b18 	vmov	r0, r1, d8
 800ee00:	2200      	movs	r2, #0
 800ee02:	f7f1 fc59 	bl	80006b8 <__aeabi_dmul>
 800ee06:	4b2c      	ldr	r3, [pc, #176]	; (800eeb8 <_dtoa_r+0x650>)
 800ee08:	ec41 0b18 	vmov	d8, r0, r1
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	4630      	mov	r0, r6
 800ee10:	4639      	mov	r1, r7
 800ee12:	f7f1 fc51 	bl	80006b8 <__aeabi_dmul>
 800ee16:	4606      	mov	r6, r0
 800ee18:	460f      	mov	r7, r1
 800ee1a:	e7c4      	b.n	800eda6 <_dtoa_r+0x53e>
 800ee1c:	ec51 0b17 	vmov	r0, r1, d7
 800ee20:	f7f1 fc4a 	bl	80006b8 <__aeabi_dmul>
 800ee24:	9b02      	ldr	r3, [sp, #8]
 800ee26:	9d00      	ldr	r5, [sp, #0]
 800ee28:	930c      	str	r3, [sp, #48]	; 0x30
 800ee2a:	ec41 0b18 	vmov	d8, r0, r1
 800ee2e:	4639      	mov	r1, r7
 800ee30:	4630      	mov	r0, r6
 800ee32:	f7f1 fef1 	bl	8000c18 <__aeabi_d2iz>
 800ee36:	9011      	str	r0, [sp, #68]	; 0x44
 800ee38:	f7f1 fbd4 	bl	80005e4 <__aeabi_i2d>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	4630      	mov	r0, r6
 800ee42:	4639      	mov	r1, r7
 800ee44:	f7f1 fa80 	bl	8000348 <__aeabi_dsub>
 800ee48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee4a:	3330      	adds	r3, #48	; 0x30
 800ee4c:	f805 3b01 	strb.w	r3, [r5], #1
 800ee50:	9b02      	ldr	r3, [sp, #8]
 800ee52:	429d      	cmp	r5, r3
 800ee54:	4606      	mov	r6, r0
 800ee56:	460f      	mov	r7, r1
 800ee58:	f04f 0200 	mov.w	r2, #0
 800ee5c:	d134      	bne.n	800eec8 <_dtoa_r+0x660>
 800ee5e:	4b19      	ldr	r3, [pc, #100]	; (800eec4 <_dtoa_r+0x65c>)
 800ee60:	ec51 0b18 	vmov	r0, r1, d8
 800ee64:	f7f1 fa72 	bl	800034c <__adddf3>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	4639      	mov	r1, r7
 800ee70:	f7f1 feb2 	bl	8000bd8 <__aeabi_dcmpgt>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d175      	bne.n	800ef64 <_dtoa_r+0x6fc>
 800ee78:	ec53 2b18 	vmov	r2, r3, d8
 800ee7c:	4911      	ldr	r1, [pc, #68]	; (800eec4 <_dtoa_r+0x65c>)
 800ee7e:	2000      	movs	r0, #0
 800ee80:	f7f1 fa62 	bl	8000348 <__aeabi_dsub>
 800ee84:	4602      	mov	r2, r0
 800ee86:	460b      	mov	r3, r1
 800ee88:	4630      	mov	r0, r6
 800ee8a:	4639      	mov	r1, r7
 800ee8c:	f7f1 fe86 	bl	8000b9c <__aeabi_dcmplt>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	f43f af27 	beq.w	800ece4 <_dtoa_r+0x47c>
 800ee96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee98:	1e6b      	subs	r3, r5, #1
 800ee9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ee9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eea0:	2b30      	cmp	r3, #48	; 0x30
 800eea2:	d0f8      	beq.n	800ee96 <_dtoa_r+0x62e>
 800eea4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800eea8:	e04a      	b.n	800ef40 <_dtoa_r+0x6d8>
 800eeaa:	bf00      	nop
 800eeac:	08024558 	.word	0x08024558
 800eeb0:	08024530 	.word	0x08024530
 800eeb4:	3ff00000 	.word	0x3ff00000
 800eeb8:	40240000 	.word	0x40240000
 800eebc:	401c0000 	.word	0x401c0000
 800eec0:	40140000 	.word	0x40140000
 800eec4:	3fe00000 	.word	0x3fe00000
 800eec8:	4baf      	ldr	r3, [pc, #700]	; (800f188 <_dtoa_r+0x920>)
 800eeca:	f7f1 fbf5 	bl	80006b8 <__aeabi_dmul>
 800eece:	4606      	mov	r6, r0
 800eed0:	460f      	mov	r7, r1
 800eed2:	e7ac      	b.n	800ee2e <_dtoa_r+0x5c6>
 800eed4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eed8:	9d00      	ldr	r5, [sp, #0]
 800eeda:	4642      	mov	r2, r8
 800eedc:	464b      	mov	r3, r9
 800eede:	4630      	mov	r0, r6
 800eee0:	4639      	mov	r1, r7
 800eee2:	f7f1 fd13 	bl	800090c <__aeabi_ddiv>
 800eee6:	f7f1 fe97 	bl	8000c18 <__aeabi_d2iz>
 800eeea:	9002      	str	r0, [sp, #8]
 800eeec:	f7f1 fb7a 	bl	80005e4 <__aeabi_i2d>
 800eef0:	4642      	mov	r2, r8
 800eef2:	464b      	mov	r3, r9
 800eef4:	f7f1 fbe0 	bl	80006b8 <__aeabi_dmul>
 800eef8:	4602      	mov	r2, r0
 800eefa:	460b      	mov	r3, r1
 800eefc:	4630      	mov	r0, r6
 800eefe:	4639      	mov	r1, r7
 800ef00:	f7f1 fa22 	bl	8000348 <__aeabi_dsub>
 800ef04:	9e02      	ldr	r6, [sp, #8]
 800ef06:	9f01      	ldr	r7, [sp, #4]
 800ef08:	3630      	adds	r6, #48	; 0x30
 800ef0a:	f805 6b01 	strb.w	r6, [r5], #1
 800ef0e:	9e00      	ldr	r6, [sp, #0]
 800ef10:	1bae      	subs	r6, r5, r6
 800ef12:	42b7      	cmp	r7, r6
 800ef14:	4602      	mov	r2, r0
 800ef16:	460b      	mov	r3, r1
 800ef18:	d137      	bne.n	800ef8a <_dtoa_r+0x722>
 800ef1a:	f7f1 fa17 	bl	800034c <__adddf3>
 800ef1e:	4642      	mov	r2, r8
 800ef20:	464b      	mov	r3, r9
 800ef22:	4606      	mov	r6, r0
 800ef24:	460f      	mov	r7, r1
 800ef26:	f7f1 fe57 	bl	8000bd8 <__aeabi_dcmpgt>
 800ef2a:	b9c8      	cbnz	r0, 800ef60 <_dtoa_r+0x6f8>
 800ef2c:	4642      	mov	r2, r8
 800ef2e:	464b      	mov	r3, r9
 800ef30:	4630      	mov	r0, r6
 800ef32:	4639      	mov	r1, r7
 800ef34:	f7f1 fe28 	bl	8000b88 <__aeabi_dcmpeq>
 800ef38:	b110      	cbz	r0, 800ef40 <_dtoa_r+0x6d8>
 800ef3a:	9b02      	ldr	r3, [sp, #8]
 800ef3c:	07d9      	lsls	r1, r3, #31
 800ef3e:	d40f      	bmi.n	800ef60 <_dtoa_r+0x6f8>
 800ef40:	4620      	mov	r0, r4
 800ef42:	4659      	mov	r1, fp
 800ef44:	f000 fb4a 	bl	800f5dc <_Bfree>
 800ef48:	2300      	movs	r3, #0
 800ef4a:	702b      	strb	r3, [r5, #0]
 800ef4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef4e:	f10a 0001 	add.w	r0, sl, #1
 800ef52:	6018      	str	r0, [r3, #0]
 800ef54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f43f acd8 	beq.w	800e90c <_dtoa_r+0xa4>
 800ef5c:	601d      	str	r5, [r3, #0]
 800ef5e:	e4d5      	b.n	800e90c <_dtoa_r+0xa4>
 800ef60:	f8cd a01c 	str.w	sl, [sp, #28]
 800ef64:	462b      	mov	r3, r5
 800ef66:	461d      	mov	r5, r3
 800ef68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef6c:	2a39      	cmp	r2, #57	; 0x39
 800ef6e:	d108      	bne.n	800ef82 <_dtoa_r+0x71a>
 800ef70:	9a00      	ldr	r2, [sp, #0]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d1f7      	bne.n	800ef66 <_dtoa_r+0x6fe>
 800ef76:	9a07      	ldr	r2, [sp, #28]
 800ef78:	9900      	ldr	r1, [sp, #0]
 800ef7a:	3201      	adds	r2, #1
 800ef7c:	9207      	str	r2, [sp, #28]
 800ef7e:	2230      	movs	r2, #48	; 0x30
 800ef80:	700a      	strb	r2, [r1, #0]
 800ef82:	781a      	ldrb	r2, [r3, #0]
 800ef84:	3201      	adds	r2, #1
 800ef86:	701a      	strb	r2, [r3, #0]
 800ef88:	e78c      	b.n	800eea4 <_dtoa_r+0x63c>
 800ef8a:	4b7f      	ldr	r3, [pc, #508]	; (800f188 <_dtoa_r+0x920>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f7f1 fb93 	bl	80006b8 <__aeabi_dmul>
 800ef92:	2200      	movs	r2, #0
 800ef94:	2300      	movs	r3, #0
 800ef96:	4606      	mov	r6, r0
 800ef98:	460f      	mov	r7, r1
 800ef9a:	f7f1 fdf5 	bl	8000b88 <__aeabi_dcmpeq>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d09b      	beq.n	800eeda <_dtoa_r+0x672>
 800efa2:	e7cd      	b.n	800ef40 <_dtoa_r+0x6d8>
 800efa4:	9a08      	ldr	r2, [sp, #32]
 800efa6:	2a00      	cmp	r2, #0
 800efa8:	f000 80c4 	beq.w	800f134 <_dtoa_r+0x8cc>
 800efac:	9a05      	ldr	r2, [sp, #20]
 800efae:	2a01      	cmp	r2, #1
 800efb0:	f300 80a8 	bgt.w	800f104 <_dtoa_r+0x89c>
 800efb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	f000 80a0 	beq.w	800f0fc <_dtoa_r+0x894>
 800efbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800efc0:	9e06      	ldr	r6, [sp, #24]
 800efc2:	4645      	mov	r5, r8
 800efc4:	9a04      	ldr	r2, [sp, #16]
 800efc6:	2101      	movs	r1, #1
 800efc8:	441a      	add	r2, r3
 800efca:	4620      	mov	r0, r4
 800efcc:	4498      	add	r8, r3
 800efce:	9204      	str	r2, [sp, #16]
 800efd0:	f000 fbc0 	bl	800f754 <__i2b>
 800efd4:	4607      	mov	r7, r0
 800efd6:	2d00      	cmp	r5, #0
 800efd8:	dd0b      	ble.n	800eff2 <_dtoa_r+0x78a>
 800efda:	9b04      	ldr	r3, [sp, #16]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	dd08      	ble.n	800eff2 <_dtoa_r+0x78a>
 800efe0:	42ab      	cmp	r3, r5
 800efe2:	9a04      	ldr	r2, [sp, #16]
 800efe4:	bfa8      	it	ge
 800efe6:	462b      	movge	r3, r5
 800efe8:	eba8 0803 	sub.w	r8, r8, r3
 800efec:	1aed      	subs	r5, r5, r3
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	9304      	str	r3, [sp, #16]
 800eff2:	9b06      	ldr	r3, [sp, #24]
 800eff4:	b1fb      	cbz	r3, 800f036 <_dtoa_r+0x7ce>
 800eff6:	9b08      	ldr	r3, [sp, #32]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 809f 	beq.w	800f13c <_dtoa_r+0x8d4>
 800effe:	2e00      	cmp	r6, #0
 800f000:	dd11      	ble.n	800f026 <_dtoa_r+0x7be>
 800f002:	4639      	mov	r1, r7
 800f004:	4632      	mov	r2, r6
 800f006:	4620      	mov	r0, r4
 800f008:	f000 fc60 	bl	800f8cc <__pow5mult>
 800f00c:	465a      	mov	r2, fp
 800f00e:	4601      	mov	r1, r0
 800f010:	4607      	mov	r7, r0
 800f012:	4620      	mov	r0, r4
 800f014:	f000 fbb4 	bl	800f780 <__multiply>
 800f018:	4659      	mov	r1, fp
 800f01a:	9007      	str	r0, [sp, #28]
 800f01c:	4620      	mov	r0, r4
 800f01e:	f000 fadd 	bl	800f5dc <_Bfree>
 800f022:	9b07      	ldr	r3, [sp, #28]
 800f024:	469b      	mov	fp, r3
 800f026:	9b06      	ldr	r3, [sp, #24]
 800f028:	1b9a      	subs	r2, r3, r6
 800f02a:	d004      	beq.n	800f036 <_dtoa_r+0x7ce>
 800f02c:	4659      	mov	r1, fp
 800f02e:	4620      	mov	r0, r4
 800f030:	f000 fc4c 	bl	800f8cc <__pow5mult>
 800f034:	4683      	mov	fp, r0
 800f036:	2101      	movs	r1, #1
 800f038:	4620      	mov	r0, r4
 800f03a:	f000 fb8b 	bl	800f754 <__i2b>
 800f03e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f040:	2b00      	cmp	r3, #0
 800f042:	4606      	mov	r6, r0
 800f044:	dd7c      	ble.n	800f140 <_dtoa_r+0x8d8>
 800f046:	461a      	mov	r2, r3
 800f048:	4601      	mov	r1, r0
 800f04a:	4620      	mov	r0, r4
 800f04c:	f000 fc3e 	bl	800f8cc <__pow5mult>
 800f050:	9b05      	ldr	r3, [sp, #20]
 800f052:	2b01      	cmp	r3, #1
 800f054:	4606      	mov	r6, r0
 800f056:	dd76      	ble.n	800f146 <_dtoa_r+0x8de>
 800f058:	2300      	movs	r3, #0
 800f05a:	9306      	str	r3, [sp, #24]
 800f05c:	6933      	ldr	r3, [r6, #16]
 800f05e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f062:	6918      	ldr	r0, [r3, #16]
 800f064:	f000 fb26 	bl	800f6b4 <__hi0bits>
 800f068:	f1c0 0020 	rsb	r0, r0, #32
 800f06c:	9b04      	ldr	r3, [sp, #16]
 800f06e:	4418      	add	r0, r3
 800f070:	f010 001f 	ands.w	r0, r0, #31
 800f074:	f000 8086 	beq.w	800f184 <_dtoa_r+0x91c>
 800f078:	f1c0 0320 	rsb	r3, r0, #32
 800f07c:	2b04      	cmp	r3, #4
 800f07e:	dd7f      	ble.n	800f180 <_dtoa_r+0x918>
 800f080:	f1c0 001c 	rsb	r0, r0, #28
 800f084:	9b04      	ldr	r3, [sp, #16]
 800f086:	4403      	add	r3, r0
 800f088:	4480      	add	r8, r0
 800f08a:	4405      	add	r5, r0
 800f08c:	9304      	str	r3, [sp, #16]
 800f08e:	f1b8 0f00 	cmp.w	r8, #0
 800f092:	dd05      	ble.n	800f0a0 <_dtoa_r+0x838>
 800f094:	4659      	mov	r1, fp
 800f096:	4642      	mov	r2, r8
 800f098:	4620      	mov	r0, r4
 800f09a:	f000 fc71 	bl	800f980 <__lshift>
 800f09e:	4683      	mov	fp, r0
 800f0a0:	9b04      	ldr	r3, [sp, #16]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	dd05      	ble.n	800f0b2 <_dtoa_r+0x84a>
 800f0a6:	4631      	mov	r1, r6
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f000 fc68 	bl	800f980 <__lshift>
 800f0b0:	4606      	mov	r6, r0
 800f0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d069      	beq.n	800f18c <_dtoa_r+0x924>
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	4658      	mov	r0, fp
 800f0bc:	f000 fccc 	bl	800fa58 <__mcmp>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	da63      	bge.n	800f18c <_dtoa_r+0x924>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	4659      	mov	r1, fp
 800f0c8:	220a      	movs	r2, #10
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f000 faa8 	bl	800f620 <__multadd>
 800f0d0:	9b08      	ldr	r3, [sp, #32]
 800f0d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0d6:	4683      	mov	fp, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f000 818f 	beq.w	800f3fc <_dtoa_r+0xb94>
 800f0de:	4639      	mov	r1, r7
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	220a      	movs	r2, #10
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f000 fa9b 	bl	800f620 <__multadd>
 800f0ea:	f1b9 0f00 	cmp.w	r9, #0
 800f0ee:	4607      	mov	r7, r0
 800f0f0:	f300 808e 	bgt.w	800f210 <_dtoa_r+0x9a8>
 800f0f4:	9b05      	ldr	r3, [sp, #20]
 800f0f6:	2b02      	cmp	r3, #2
 800f0f8:	dc50      	bgt.n	800f19c <_dtoa_r+0x934>
 800f0fa:	e089      	b.n	800f210 <_dtoa_r+0x9a8>
 800f0fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f102:	e75d      	b.n	800efc0 <_dtoa_r+0x758>
 800f104:	9b01      	ldr	r3, [sp, #4]
 800f106:	1e5e      	subs	r6, r3, #1
 800f108:	9b06      	ldr	r3, [sp, #24]
 800f10a:	42b3      	cmp	r3, r6
 800f10c:	bfbf      	itttt	lt
 800f10e:	9b06      	ldrlt	r3, [sp, #24]
 800f110:	9606      	strlt	r6, [sp, #24]
 800f112:	1af2      	sublt	r2, r6, r3
 800f114:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f116:	bfb6      	itet	lt
 800f118:	189b      	addlt	r3, r3, r2
 800f11a:	1b9e      	subge	r6, r3, r6
 800f11c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f11e:	9b01      	ldr	r3, [sp, #4]
 800f120:	bfb8      	it	lt
 800f122:	2600      	movlt	r6, #0
 800f124:	2b00      	cmp	r3, #0
 800f126:	bfb5      	itete	lt
 800f128:	eba8 0503 	sublt.w	r5, r8, r3
 800f12c:	9b01      	ldrge	r3, [sp, #4]
 800f12e:	2300      	movlt	r3, #0
 800f130:	4645      	movge	r5, r8
 800f132:	e747      	b.n	800efc4 <_dtoa_r+0x75c>
 800f134:	9e06      	ldr	r6, [sp, #24]
 800f136:	9f08      	ldr	r7, [sp, #32]
 800f138:	4645      	mov	r5, r8
 800f13a:	e74c      	b.n	800efd6 <_dtoa_r+0x76e>
 800f13c:	9a06      	ldr	r2, [sp, #24]
 800f13e:	e775      	b.n	800f02c <_dtoa_r+0x7c4>
 800f140:	9b05      	ldr	r3, [sp, #20]
 800f142:	2b01      	cmp	r3, #1
 800f144:	dc18      	bgt.n	800f178 <_dtoa_r+0x910>
 800f146:	9b02      	ldr	r3, [sp, #8]
 800f148:	b9b3      	cbnz	r3, 800f178 <_dtoa_r+0x910>
 800f14a:	9b03      	ldr	r3, [sp, #12]
 800f14c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f150:	b9a3      	cbnz	r3, 800f17c <_dtoa_r+0x914>
 800f152:	9b03      	ldr	r3, [sp, #12]
 800f154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f158:	0d1b      	lsrs	r3, r3, #20
 800f15a:	051b      	lsls	r3, r3, #20
 800f15c:	b12b      	cbz	r3, 800f16a <_dtoa_r+0x902>
 800f15e:	9b04      	ldr	r3, [sp, #16]
 800f160:	3301      	adds	r3, #1
 800f162:	9304      	str	r3, [sp, #16]
 800f164:	f108 0801 	add.w	r8, r8, #1
 800f168:	2301      	movs	r3, #1
 800f16a:	9306      	str	r3, [sp, #24]
 800f16c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f47f af74 	bne.w	800f05c <_dtoa_r+0x7f4>
 800f174:	2001      	movs	r0, #1
 800f176:	e779      	b.n	800f06c <_dtoa_r+0x804>
 800f178:	2300      	movs	r3, #0
 800f17a:	e7f6      	b.n	800f16a <_dtoa_r+0x902>
 800f17c:	9b02      	ldr	r3, [sp, #8]
 800f17e:	e7f4      	b.n	800f16a <_dtoa_r+0x902>
 800f180:	d085      	beq.n	800f08e <_dtoa_r+0x826>
 800f182:	4618      	mov	r0, r3
 800f184:	301c      	adds	r0, #28
 800f186:	e77d      	b.n	800f084 <_dtoa_r+0x81c>
 800f188:	40240000 	.word	0x40240000
 800f18c:	9b01      	ldr	r3, [sp, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	dc38      	bgt.n	800f204 <_dtoa_r+0x99c>
 800f192:	9b05      	ldr	r3, [sp, #20]
 800f194:	2b02      	cmp	r3, #2
 800f196:	dd35      	ble.n	800f204 <_dtoa_r+0x99c>
 800f198:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f19c:	f1b9 0f00 	cmp.w	r9, #0
 800f1a0:	d10d      	bne.n	800f1be <_dtoa_r+0x956>
 800f1a2:	4631      	mov	r1, r6
 800f1a4:	464b      	mov	r3, r9
 800f1a6:	2205      	movs	r2, #5
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f000 fa39 	bl	800f620 <__multadd>
 800f1ae:	4601      	mov	r1, r0
 800f1b0:	4606      	mov	r6, r0
 800f1b2:	4658      	mov	r0, fp
 800f1b4:	f000 fc50 	bl	800fa58 <__mcmp>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	f73f adbd 	bgt.w	800ed38 <_dtoa_r+0x4d0>
 800f1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1c0:	9d00      	ldr	r5, [sp, #0]
 800f1c2:	ea6f 0a03 	mvn.w	sl, r3
 800f1c6:	f04f 0800 	mov.w	r8, #0
 800f1ca:	4631      	mov	r1, r6
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f000 fa05 	bl	800f5dc <_Bfree>
 800f1d2:	2f00      	cmp	r7, #0
 800f1d4:	f43f aeb4 	beq.w	800ef40 <_dtoa_r+0x6d8>
 800f1d8:	f1b8 0f00 	cmp.w	r8, #0
 800f1dc:	d005      	beq.n	800f1ea <_dtoa_r+0x982>
 800f1de:	45b8      	cmp	r8, r7
 800f1e0:	d003      	beq.n	800f1ea <_dtoa_r+0x982>
 800f1e2:	4641      	mov	r1, r8
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f000 f9f9 	bl	800f5dc <_Bfree>
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 f9f5 	bl	800f5dc <_Bfree>
 800f1f2:	e6a5      	b.n	800ef40 <_dtoa_r+0x6d8>
 800f1f4:	2600      	movs	r6, #0
 800f1f6:	4637      	mov	r7, r6
 800f1f8:	e7e1      	b.n	800f1be <_dtoa_r+0x956>
 800f1fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f1fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f200:	4637      	mov	r7, r6
 800f202:	e599      	b.n	800ed38 <_dtoa_r+0x4d0>
 800f204:	9b08      	ldr	r3, [sp, #32]
 800f206:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f000 80fd 	beq.w	800f40a <_dtoa_r+0xba2>
 800f210:	2d00      	cmp	r5, #0
 800f212:	dd05      	ble.n	800f220 <_dtoa_r+0x9b8>
 800f214:	4639      	mov	r1, r7
 800f216:	462a      	mov	r2, r5
 800f218:	4620      	mov	r0, r4
 800f21a:	f000 fbb1 	bl	800f980 <__lshift>
 800f21e:	4607      	mov	r7, r0
 800f220:	9b06      	ldr	r3, [sp, #24]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d05c      	beq.n	800f2e0 <_dtoa_r+0xa78>
 800f226:	6879      	ldr	r1, [r7, #4]
 800f228:	4620      	mov	r0, r4
 800f22a:	f000 f997 	bl	800f55c <_Balloc>
 800f22e:	4605      	mov	r5, r0
 800f230:	b928      	cbnz	r0, 800f23e <_dtoa_r+0x9d6>
 800f232:	4b80      	ldr	r3, [pc, #512]	; (800f434 <_dtoa_r+0xbcc>)
 800f234:	4602      	mov	r2, r0
 800f236:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f23a:	f7ff bb2e 	b.w	800e89a <_dtoa_r+0x32>
 800f23e:	693a      	ldr	r2, [r7, #16]
 800f240:	3202      	adds	r2, #2
 800f242:	0092      	lsls	r2, r2, #2
 800f244:	f107 010c 	add.w	r1, r7, #12
 800f248:	300c      	adds	r0, #12
 800f24a:	f7fe fb90 	bl	800d96e <memcpy>
 800f24e:	2201      	movs	r2, #1
 800f250:	4629      	mov	r1, r5
 800f252:	4620      	mov	r0, r4
 800f254:	f000 fb94 	bl	800f980 <__lshift>
 800f258:	9b00      	ldr	r3, [sp, #0]
 800f25a:	3301      	adds	r3, #1
 800f25c:	9301      	str	r3, [sp, #4]
 800f25e:	9b00      	ldr	r3, [sp, #0]
 800f260:	444b      	add	r3, r9
 800f262:	9307      	str	r3, [sp, #28]
 800f264:	9b02      	ldr	r3, [sp, #8]
 800f266:	f003 0301 	and.w	r3, r3, #1
 800f26a:	46b8      	mov	r8, r7
 800f26c:	9306      	str	r3, [sp, #24]
 800f26e:	4607      	mov	r7, r0
 800f270:	9b01      	ldr	r3, [sp, #4]
 800f272:	4631      	mov	r1, r6
 800f274:	3b01      	subs	r3, #1
 800f276:	4658      	mov	r0, fp
 800f278:	9302      	str	r3, [sp, #8]
 800f27a:	f7ff fa67 	bl	800e74c <quorem>
 800f27e:	4603      	mov	r3, r0
 800f280:	3330      	adds	r3, #48	; 0x30
 800f282:	9004      	str	r0, [sp, #16]
 800f284:	4641      	mov	r1, r8
 800f286:	4658      	mov	r0, fp
 800f288:	9308      	str	r3, [sp, #32]
 800f28a:	f000 fbe5 	bl	800fa58 <__mcmp>
 800f28e:	463a      	mov	r2, r7
 800f290:	4681      	mov	r9, r0
 800f292:	4631      	mov	r1, r6
 800f294:	4620      	mov	r0, r4
 800f296:	f000 fbfb 	bl	800fa90 <__mdiff>
 800f29a:	68c2      	ldr	r2, [r0, #12]
 800f29c:	9b08      	ldr	r3, [sp, #32]
 800f29e:	4605      	mov	r5, r0
 800f2a0:	bb02      	cbnz	r2, 800f2e4 <_dtoa_r+0xa7c>
 800f2a2:	4601      	mov	r1, r0
 800f2a4:	4658      	mov	r0, fp
 800f2a6:	f000 fbd7 	bl	800fa58 <__mcmp>
 800f2aa:	9b08      	ldr	r3, [sp, #32]
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	4629      	mov	r1, r5
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f2b6:	f000 f991 	bl	800f5dc <_Bfree>
 800f2ba:	9b05      	ldr	r3, [sp, #20]
 800f2bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2be:	9d01      	ldr	r5, [sp, #4]
 800f2c0:	ea43 0102 	orr.w	r1, r3, r2
 800f2c4:	9b06      	ldr	r3, [sp, #24]
 800f2c6:	430b      	orrs	r3, r1
 800f2c8:	9b08      	ldr	r3, [sp, #32]
 800f2ca:	d10d      	bne.n	800f2e8 <_dtoa_r+0xa80>
 800f2cc:	2b39      	cmp	r3, #57	; 0x39
 800f2ce:	d029      	beq.n	800f324 <_dtoa_r+0xabc>
 800f2d0:	f1b9 0f00 	cmp.w	r9, #0
 800f2d4:	dd01      	ble.n	800f2da <_dtoa_r+0xa72>
 800f2d6:	9b04      	ldr	r3, [sp, #16]
 800f2d8:	3331      	adds	r3, #49	; 0x31
 800f2da:	9a02      	ldr	r2, [sp, #8]
 800f2dc:	7013      	strb	r3, [r2, #0]
 800f2de:	e774      	b.n	800f1ca <_dtoa_r+0x962>
 800f2e0:	4638      	mov	r0, r7
 800f2e2:	e7b9      	b.n	800f258 <_dtoa_r+0x9f0>
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	e7e2      	b.n	800f2ae <_dtoa_r+0xa46>
 800f2e8:	f1b9 0f00 	cmp.w	r9, #0
 800f2ec:	db06      	blt.n	800f2fc <_dtoa_r+0xa94>
 800f2ee:	9905      	ldr	r1, [sp, #20]
 800f2f0:	ea41 0909 	orr.w	r9, r1, r9
 800f2f4:	9906      	ldr	r1, [sp, #24]
 800f2f6:	ea59 0101 	orrs.w	r1, r9, r1
 800f2fa:	d120      	bne.n	800f33e <_dtoa_r+0xad6>
 800f2fc:	2a00      	cmp	r2, #0
 800f2fe:	ddec      	ble.n	800f2da <_dtoa_r+0xa72>
 800f300:	4659      	mov	r1, fp
 800f302:	2201      	movs	r2, #1
 800f304:	4620      	mov	r0, r4
 800f306:	9301      	str	r3, [sp, #4]
 800f308:	f000 fb3a 	bl	800f980 <__lshift>
 800f30c:	4631      	mov	r1, r6
 800f30e:	4683      	mov	fp, r0
 800f310:	f000 fba2 	bl	800fa58 <__mcmp>
 800f314:	2800      	cmp	r0, #0
 800f316:	9b01      	ldr	r3, [sp, #4]
 800f318:	dc02      	bgt.n	800f320 <_dtoa_r+0xab8>
 800f31a:	d1de      	bne.n	800f2da <_dtoa_r+0xa72>
 800f31c:	07da      	lsls	r2, r3, #31
 800f31e:	d5dc      	bpl.n	800f2da <_dtoa_r+0xa72>
 800f320:	2b39      	cmp	r3, #57	; 0x39
 800f322:	d1d8      	bne.n	800f2d6 <_dtoa_r+0xa6e>
 800f324:	9a02      	ldr	r2, [sp, #8]
 800f326:	2339      	movs	r3, #57	; 0x39
 800f328:	7013      	strb	r3, [r2, #0]
 800f32a:	462b      	mov	r3, r5
 800f32c:	461d      	mov	r5, r3
 800f32e:	3b01      	subs	r3, #1
 800f330:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f334:	2a39      	cmp	r2, #57	; 0x39
 800f336:	d050      	beq.n	800f3da <_dtoa_r+0xb72>
 800f338:	3201      	adds	r2, #1
 800f33a:	701a      	strb	r2, [r3, #0]
 800f33c:	e745      	b.n	800f1ca <_dtoa_r+0x962>
 800f33e:	2a00      	cmp	r2, #0
 800f340:	dd03      	ble.n	800f34a <_dtoa_r+0xae2>
 800f342:	2b39      	cmp	r3, #57	; 0x39
 800f344:	d0ee      	beq.n	800f324 <_dtoa_r+0xabc>
 800f346:	3301      	adds	r3, #1
 800f348:	e7c7      	b.n	800f2da <_dtoa_r+0xa72>
 800f34a:	9a01      	ldr	r2, [sp, #4]
 800f34c:	9907      	ldr	r1, [sp, #28]
 800f34e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f352:	428a      	cmp	r2, r1
 800f354:	d02a      	beq.n	800f3ac <_dtoa_r+0xb44>
 800f356:	4659      	mov	r1, fp
 800f358:	2300      	movs	r3, #0
 800f35a:	220a      	movs	r2, #10
 800f35c:	4620      	mov	r0, r4
 800f35e:	f000 f95f 	bl	800f620 <__multadd>
 800f362:	45b8      	cmp	r8, r7
 800f364:	4683      	mov	fp, r0
 800f366:	f04f 0300 	mov.w	r3, #0
 800f36a:	f04f 020a 	mov.w	r2, #10
 800f36e:	4641      	mov	r1, r8
 800f370:	4620      	mov	r0, r4
 800f372:	d107      	bne.n	800f384 <_dtoa_r+0xb1c>
 800f374:	f000 f954 	bl	800f620 <__multadd>
 800f378:	4680      	mov	r8, r0
 800f37a:	4607      	mov	r7, r0
 800f37c:	9b01      	ldr	r3, [sp, #4]
 800f37e:	3301      	adds	r3, #1
 800f380:	9301      	str	r3, [sp, #4]
 800f382:	e775      	b.n	800f270 <_dtoa_r+0xa08>
 800f384:	f000 f94c 	bl	800f620 <__multadd>
 800f388:	4639      	mov	r1, r7
 800f38a:	4680      	mov	r8, r0
 800f38c:	2300      	movs	r3, #0
 800f38e:	220a      	movs	r2, #10
 800f390:	4620      	mov	r0, r4
 800f392:	f000 f945 	bl	800f620 <__multadd>
 800f396:	4607      	mov	r7, r0
 800f398:	e7f0      	b.n	800f37c <_dtoa_r+0xb14>
 800f39a:	f1b9 0f00 	cmp.w	r9, #0
 800f39e:	9a00      	ldr	r2, [sp, #0]
 800f3a0:	bfcc      	ite	gt
 800f3a2:	464d      	movgt	r5, r9
 800f3a4:	2501      	movle	r5, #1
 800f3a6:	4415      	add	r5, r2
 800f3a8:	f04f 0800 	mov.w	r8, #0
 800f3ac:	4659      	mov	r1, fp
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	9301      	str	r3, [sp, #4]
 800f3b4:	f000 fae4 	bl	800f980 <__lshift>
 800f3b8:	4631      	mov	r1, r6
 800f3ba:	4683      	mov	fp, r0
 800f3bc:	f000 fb4c 	bl	800fa58 <__mcmp>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	dcb2      	bgt.n	800f32a <_dtoa_r+0xac2>
 800f3c4:	d102      	bne.n	800f3cc <_dtoa_r+0xb64>
 800f3c6:	9b01      	ldr	r3, [sp, #4]
 800f3c8:	07db      	lsls	r3, r3, #31
 800f3ca:	d4ae      	bmi.n	800f32a <_dtoa_r+0xac2>
 800f3cc:	462b      	mov	r3, r5
 800f3ce:	461d      	mov	r5, r3
 800f3d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3d4:	2a30      	cmp	r2, #48	; 0x30
 800f3d6:	d0fa      	beq.n	800f3ce <_dtoa_r+0xb66>
 800f3d8:	e6f7      	b.n	800f1ca <_dtoa_r+0x962>
 800f3da:	9a00      	ldr	r2, [sp, #0]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d1a5      	bne.n	800f32c <_dtoa_r+0xac4>
 800f3e0:	f10a 0a01 	add.w	sl, sl, #1
 800f3e4:	2331      	movs	r3, #49	; 0x31
 800f3e6:	e779      	b.n	800f2dc <_dtoa_r+0xa74>
 800f3e8:	4b13      	ldr	r3, [pc, #76]	; (800f438 <_dtoa_r+0xbd0>)
 800f3ea:	f7ff baaf 	b.w	800e94c <_dtoa_r+0xe4>
 800f3ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f47f aa86 	bne.w	800e902 <_dtoa_r+0x9a>
 800f3f6:	4b11      	ldr	r3, [pc, #68]	; (800f43c <_dtoa_r+0xbd4>)
 800f3f8:	f7ff baa8 	b.w	800e94c <_dtoa_r+0xe4>
 800f3fc:	f1b9 0f00 	cmp.w	r9, #0
 800f400:	dc03      	bgt.n	800f40a <_dtoa_r+0xba2>
 800f402:	9b05      	ldr	r3, [sp, #20]
 800f404:	2b02      	cmp	r3, #2
 800f406:	f73f aec9 	bgt.w	800f19c <_dtoa_r+0x934>
 800f40a:	9d00      	ldr	r5, [sp, #0]
 800f40c:	4631      	mov	r1, r6
 800f40e:	4658      	mov	r0, fp
 800f410:	f7ff f99c 	bl	800e74c <quorem>
 800f414:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f418:	f805 3b01 	strb.w	r3, [r5], #1
 800f41c:	9a00      	ldr	r2, [sp, #0]
 800f41e:	1aaa      	subs	r2, r5, r2
 800f420:	4591      	cmp	r9, r2
 800f422:	ddba      	ble.n	800f39a <_dtoa_r+0xb32>
 800f424:	4659      	mov	r1, fp
 800f426:	2300      	movs	r3, #0
 800f428:	220a      	movs	r2, #10
 800f42a:	4620      	mov	r0, r4
 800f42c:	f000 f8f8 	bl	800f620 <__multadd>
 800f430:	4683      	mov	fp, r0
 800f432:	e7eb      	b.n	800f40c <_dtoa_r+0xba4>
 800f434:	080244bf 	.word	0x080244bf
 800f438:	08024418 	.word	0x08024418
 800f43c:	0802443c 	.word	0x0802443c

0800f440 <_localeconv_r>:
 800f440:	4800      	ldr	r0, [pc, #0]	; (800f444 <_localeconv_r+0x4>)
 800f442:	4770      	bx	lr
 800f444:	200001e4 	.word	0x200001e4

0800f448 <_lseek_r>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	4d07      	ldr	r5, [pc, #28]	; (800f468 <_lseek_r+0x20>)
 800f44c:	4604      	mov	r4, r0
 800f44e:	4608      	mov	r0, r1
 800f450:	4611      	mov	r1, r2
 800f452:	2200      	movs	r2, #0
 800f454:	602a      	str	r2, [r5, #0]
 800f456:	461a      	mov	r2, r3
 800f458:	f7f2 fff2 	bl	8002440 <_lseek>
 800f45c:	1c43      	adds	r3, r0, #1
 800f45e:	d102      	bne.n	800f466 <_lseek_r+0x1e>
 800f460:	682b      	ldr	r3, [r5, #0]
 800f462:	b103      	cbz	r3, 800f466 <_lseek_r+0x1e>
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	bd38      	pop	{r3, r4, r5, pc}
 800f468:	20008ab4 	.word	0x20008ab4

0800f46c <__swhatbuf_r>:
 800f46c:	b570      	push	{r4, r5, r6, lr}
 800f46e:	460e      	mov	r6, r1
 800f470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f474:	2900      	cmp	r1, #0
 800f476:	b096      	sub	sp, #88	; 0x58
 800f478:	4614      	mov	r4, r2
 800f47a:	461d      	mov	r5, r3
 800f47c:	da07      	bge.n	800f48e <__swhatbuf_r+0x22>
 800f47e:	2300      	movs	r3, #0
 800f480:	602b      	str	r3, [r5, #0]
 800f482:	89b3      	ldrh	r3, [r6, #12]
 800f484:	061a      	lsls	r2, r3, #24
 800f486:	d410      	bmi.n	800f4aa <__swhatbuf_r+0x3e>
 800f488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f48c:	e00e      	b.n	800f4ac <__swhatbuf_r+0x40>
 800f48e:	466a      	mov	r2, sp
 800f490:	f000 fd8c 	bl	800ffac <_fstat_r>
 800f494:	2800      	cmp	r0, #0
 800f496:	dbf2      	blt.n	800f47e <__swhatbuf_r+0x12>
 800f498:	9a01      	ldr	r2, [sp, #4]
 800f49a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f49e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4a2:	425a      	negs	r2, r3
 800f4a4:	415a      	adcs	r2, r3
 800f4a6:	602a      	str	r2, [r5, #0]
 800f4a8:	e7ee      	b.n	800f488 <__swhatbuf_r+0x1c>
 800f4aa:	2340      	movs	r3, #64	; 0x40
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	6023      	str	r3, [r4, #0]
 800f4b0:	b016      	add	sp, #88	; 0x58
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}

0800f4b4 <__smakebuf_r>:
 800f4b4:	898b      	ldrh	r3, [r1, #12]
 800f4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4b8:	079d      	lsls	r5, r3, #30
 800f4ba:	4606      	mov	r6, r0
 800f4bc:	460c      	mov	r4, r1
 800f4be:	d507      	bpl.n	800f4d0 <__smakebuf_r+0x1c>
 800f4c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4c4:	6023      	str	r3, [r4, #0]
 800f4c6:	6123      	str	r3, [r4, #16]
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	6163      	str	r3, [r4, #20]
 800f4cc:	b002      	add	sp, #8
 800f4ce:	bd70      	pop	{r4, r5, r6, pc}
 800f4d0:	ab01      	add	r3, sp, #4
 800f4d2:	466a      	mov	r2, sp
 800f4d4:	f7ff ffca 	bl	800f46c <__swhatbuf_r>
 800f4d8:	9900      	ldr	r1, [sp, #0]
 800f4da:	4605      	mov	r5, r0
 800f4dc:	4630      	mov	r0, r6
 800f4de:	f7fe faad 	bl	800da3c <_malloc_r>
 800f4e2:	b948      	cbnz	r0, 800f4f8 <__smakebuf_r+0x44>
 800f4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4e8:	059a      	lsls	r2, r3, #22
 800f4ea:	d4ef      	bmi.n	800f4cc <__smakebuf_r+0x18>
 800f4ec:	f023 0303 	bic.w	r3, r3, #3
 800f4f0:	f043 0302 	orr.w	r3, r3, #2
 800f4f4:	81a3      	strh	r3, [r4, #12]
 800f4f6:	e7e3      	b.n	800f4c0 <__smakebuf_r+0xc>
 800f4f8:	4b0d      	ldr	r3, [pc, #52]	; (800f530 <__smakebuf_r+0x7c>)
 800f4fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800f4fc:	89a3      	ldrh	r3, [r4, #12]
 800f4fe:	6020      	str	r0, [r4, #0]
 800f500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f504:	81a3      	strh	r3, [r4, #12]
 800f506:	9b00      	ldr	r3, [sp, #0]
 800f508:	6163      	str	r3, [r4, #20]
 800f50a:	9b01      	ldr	r3, [sp, #4]
 800f50c:	6120      	str	r0, [r4, #16]
 800f50e:	b15b      	cbz	r3, 800f528 <__smakebuf_r+0x74>
 800f510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f514:	4630      	mov	r0, r6
 800f516:	f000 fd5b 	bl	800ffd0 <_isatty_r>
 800f51a:	b128      	cbz	r0, 800f528 <__smakebuf_r+0x74>
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	f023 0303 	bic.w	r3, r3, #3
 800f522:	f043 0301 	orr.w	r3, r3, #1
 800f526:	81a3      	strh	r3, [r4, #12]
 800f528:	89a0      	ldrh	r0, [r4, #12]
 800f52a:	4305      	orrs	r5, r0
 800f52c:	81a5      	strh	r5, [r4, #12]
 800f52e:	e7cd      	b.n	800f4cc <__smakebuf_r+0x18>
 800f530:	0800d77d 	.word	0x0800d77d

0800f534 <malloc>:
 800f534:	4b02      	ldr	r3, [pc, #8]	; (800f540 <malloc+0xc>)
 800f536:	4601      	mov	r1, r0
 800f538:	6818      	ldr	r0, [r3, #0]
 800f53a:	f7fe ba7f 	b.w	800da3c <_malloc_r>
 800f53e:	bf00      	nop
 800f540:	20000090 	.word	0x20000090

0800f544 <__malloc_lock>:
 800f544:	4801      	ldr	r0, [pc, #4]	; (800f54c <__malloc_lock+0x8>)
 800f546:	f7fe ba10 	b.w	800d96a <__retarget_lock_acquire_recursive>
 800f54a:	bf00      	nop
 800f54c:	20008aac 	.word	0x20008aac

0800f550 <__malloc_unlock>:
 800f550:	4801      	ldr	r0, [pc, #4]	; (800f558 <__malloc_unlock+0x8>)
 800f552:	f7fe ba0b 	b.w	800d96c <__retarget_lock_release_recursive>
 800f556:	bf00      	nop
 800f558:	20008aac 	.word	0x20008aac

0800f55c <_Balloc>:
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f560:	4604      	mov	r4, r0
 800f562:	460d      	mov	r5, r1
 800f564:	b976      	cbnz	r6, 800f584 <_Balloc+0x28>
 800f566:	2010      	movs	r0, #16
 800f568:	f7ff ffe4 	bl	800f534 <malloc>
 800f56c:	4602      	mov	r2, r0
 800f56e:	6260      	str	r0, [r4, #36]	; 0x24
 800f570:	b920      	cbnz	r0, 800f57c <_Balloc+0x20>
 800f572:	4b18      	ldr	r3, [pc, #96]	; (800f5d4 <_Balloc+0x78>)
 800f574:	4818      	ldr	r0, [pc, #96]	; (800f5d8 <_Balloc+0x7c>)
 800f576:	2166      	movs	r1, #102	; 0x66
 800f578:	f000 fce8 	bl	800ff4c <__assert_func>
 800f57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f580:	6006      	str	r6, [r0, #0]
 800f582:	60c6      	str	r6, [r0, #12]
 800f584:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f586:	68f3      	ldr	r3, [r6, #12]
 800f588:	b183      	cbz	r3, 800f5ac <_Balloc+0x50>
 800f58a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f592:	b9b8      	cbnz	r0, 800f5c4 <_Balloc+0x68>
 800f594:	2101      	movs	r1, #1
 800f596:	fa01 f605 	lsl.w	r6, r1, r5
 800f59a:	1d72      	adds	r2, r6, #5
 800f59c:	0092      	lsls	r2, r2, #2
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f000 fb5a 	bl	800fc58 <_calloc_r>
 800f5a4:	b160      	cbz	r0, 800f5c0 <_Balloc+0x64>
 800f5a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f5aa:	e00e      	b.n	800f5ca <_Balloc+0x6e>
 800f5ac:	2221      	movs	r2, #33	; 0x21
 800f5ae:	2104      	movs	r1, #4
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f000 fb51 	bl	800fc58 <_calloc_r>
 800f5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5b8:	60f0      	str	r0, [r6, #12]
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1e4      	bne.n	800f58a <_Balloc+0x2e>
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	bd70      	pop	{r4, r5, r6, pc}
 800f5c4:	6802      	ldr	r2, [r0, #0]
 800f5c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f5d0:	e7f7      	b.n	800f5c2 <_Balloc+0x66>
 800f5d2:	bf00      	nop
 800f5d4:	08024449 	.word	0x08024449
 800f5d8:	080244d0 	.word	0x080244d0

0800f5dc <_Bfree>:
 800f5dc:	b570      	push	{r4, r5, r6, lr}
 800f5de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5e0:	4605      	mov	r5, r0
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	b976      	cbnz	r6, 800f604 <_Bfree+0x28>
 800f5e6:	2010      	movs	r0, #16
 800f5e8:	f7ff ffa4 	bl	800f534 <malloc>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	6268      	str	r0, [r5, #36]	; 0x24
 800f5f0:	b920      	cbnz	r0, 800f5fc <_Bfree+0x20>
 800f5f2:	4b09      	ldr	r3, [pc, #36]	; (800f618 <_Bfree+0x3c>)
 800f5f4:	4809      	ldr	r0, [pc, #36]	; (800f61c <_Bfree+0x40>)
 800f5f6:	218a      	movs	r1, #138	; 0x8a
 800f5f8:	f000 fca8 	bl	800ff4c <__assert_func>
 800f5fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f600:	6006      	str	r6, [r0, #0]
 800f602:	60c6      	str	r6, [r0, #12]
 800f604:	b13c      	cbz	r4, 800f616 <_Bfree+0x3a>
 800f606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f608:	6862      	ldr	r2, [r4, #4]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f610:	6021      	str	r1, [r4, #0]
 800f612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f616:	bd70      	pop	{r4, r5, r6, pc}
 800f618:	08024449 	.word	0x08024449
 800f61c:	080244d0 	.word	0x080244d0

0800f620 <__multadd>:
 800f620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f624:	690e      	ldr	r6, [r1, #16]
 800f626:	4607      	mov	r7, r0
 800f628:	4698      	mov	r8, r3
 800f62a:	460c      	mov	r4, r1
 800f62c:	f101 0014 	add.w	r0, r1, #20
 800f630:	2300      	movs	r3, #0
 800f632:	6805      	ldr	r5, [r0, #0]
 800f634:	b2a9      	uxth	r1, r5
 800f636:	fb02 8101 	mla	r1, r2, r1, r8
 800f63a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f63e:	0c2d      	lsrs	r5, r5, #16
 800f640:	fb02 c505 	mla	r5, r2, r5, ip
 800f644:	b289      	uxth	r1, r1
 800f646:	3301      	adds	r3, #1
 800f648:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f64c:	429e      	cmp	r6, r3
 800f64e:	f840 1b04 	str.w	r1, [r0], #4
 800f652:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f656:	dcec      	bgt.n	800f632 <__multadd+0x12>
 800f658:	f1b8 0f00 	cmp.w	r8, #0
 800f65c:	d022      	beq.n	800f6a4 <__multadd+0x84>
 800f65e:	68a3      	ldr	r3, [r4, #8]
 800f660:	42b3      	cmp	r3, r6
 800f662:	dc19      	bgt.n	800f698 <__multadd+0x78>
 800f664:	6861      	ldr	r1, [r4, #4]
 800f666:	4638      	mov	r0, r7
 800f668:	3101      	adds	r1, #1
 800f66a:	f7ff ff77 	bl	800f55c <_Balloc>
 800f66e:	4605      	mov	r5, r0
 800f670:	b928      	cbnz	r0, 800f67e <__multadd+0x5e>
 800f672:	4602      	mov	r2, r0
 800f674:	4b0d      	ldr	r3, [pc, #52]	; (800f6ac <__multadd+0x8c>)
 800f676:	480e      	ldr	r0, [pc, #56]	; (800f6b0 <__multadd+0x90>)
 800f678:	21b5      	movs	r1, #181	; 0xb5
 800f67a:	f000 fc67 	bl	800ff4c <__assert_func>
 800f67e:	6922      	ldr	r2, [r4, #16]
 800f680:	3202      	adds	r2, #2
 800f682:	f104 010c 	add.w	r1, r4, #12
 800f686:	0092      	lsls	r2, r2, #2
 800f688:	300c      	adds	r0, #12
 800f68a:	f7fe f970 	bl	800d96e <memcpy>
 800f68e:	4621      	mov	r1, r4
 800f690:	4638      	mov	r0, r7
 800f692:	f7ff ffa3 	bl	800f5dc <_Bfree>
 800f696:	462c      	mov	r4, r5
 800f698:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f69c:	3601      	adds	r6, #1
 800f69e:	f8c3 8014 	str.w	r8, [r3, #20]
 800f6a2:	6126      	str	r6, [r4, #16]
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6aa:	bf00      	nop
 800f6ac:	080244bf 	.word	0x080244bf
 800f6b0:	080244d0 	.word	0x080244d0

0800f6b4 <__hi0bits>:
 800f6b4:	0c03      	lsrs	r3, r0, #16
 800f6b6:	041b      	lsls	r3, r3, #16
 800f6b8:	b9d3      	cbnz	r3, 800f6f0 <__hi0bits+0x3c>
 800f6ba:	0400      	lsls	r0, r0, #16
 800f6bc:	2310      	movs	r3, #16
 800f6be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f6c2:	bf04      	itt	eq
 800f6c4:	0200      	lsleq	r0, r0, #8
 800f6c6:	3308      	addeq	r3, #8
 800f6c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f6cc:	bf04      	itt	eq
 800f6ce:	0100      	lsleq	r0, r0, #4
 800f6d0:	3304      	addeq	r3, #4
 800f6d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f6d6:	bf04      	itt	eq
 800f6d8:	0080      	lsleq	r0, r0, #2
 800f6da:	3302      	addeq	r3, #2
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	db05      	blt.n	800f6ec <__hi0bits+0x38>
 800f6e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f6e4:	f103 0301 	add.w	r3, r3, #1
 800f6e8:	bf08      	it	eq
 800f6ea:	2320      	moveq	r3, #32
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	4770      	bx	lr
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	e7e4      	b.n	800f6be <__hi0bits+0xa>

0800f6f4 <__lo0bits>:
 800f6f4:	6803      	ldr	r3, [r0, #0]
 800f6f6:	f013 0207 	ands.w	r2, r3, #7
 800f6fa:	4601      	mov	r1, r0
 800f6fc:	d00b      	beq.n	800f716 <__lo0bits+0x22>
 800f6fe:	07da      	lsls	r2, r3, #31
 800f700:	d424      	bmi.n	800f74c <__lo0bits+0x58>
 800f702:	0798      	lsls	r0, r3, #30
 800f704:	bf49      	itett	mi
 800f706:	085b      	lsrmi	r3, r3, #1
 800f708:	089b      	lsrpl	r3, r3, #2
 800f70a:	2001      	movmi	r0, #1
 800f70c:	600b      	strmi	r3, [r1, #0]
 800f70e:	bf5c      	itt	pl
 800f710:	600b      	strpl	r3, [r1, #0]
 800f712:	2002      	movpl	r0, #2
 800f714:	4770      	bx	lr
 800f716:	b298      	uxth	r0, r3
 800f718:	b9b0      	cbnz	r0, 800f748 <__lo0bits+0x54>
 800f71a:	0c1b      	lsrs	r3, r3, #16
 800f71c:	2010      	movs	r0, #16
 800f71e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f722:	bf04      	itt	eq
 800f724:	0a1b      	lsreq	r3, r3, #8
 800f726:	3008      	addeq	r0, #8
 800f728:	071a      	lsls	r2, r3, #28
 800f72a:	bf04      	itt	eq
 800f72c:	091b      	lsreq	r3, r3, #4
 800f72e:	3004      	addeq	r0, #4
 800f730:	079a      	lsls	r2, r3, #30
 800f732:	bf04      	itt	eq
 800f734:	089b      	lsreq	r3, r3, #2
 800f736:	3002      	addeq	r0, #2
 800f738:	07da      	lsls	r2, r3, #31
 800f73a:	d403      	bmi.n	800f744 <__lo0bits+0x50>
 800f73c:	085b      	lsrs	r3, r3, #1
 800f73e:	f100 0001 	add.w	r0, r0, #1
 800f742:	d005      	beq.n	800f750 <__lo0bits+0x5c>
 800f744:	600b      	str	r3, [r1, #0]
 800f746:	4770      	bx	lr
 800f748:	4610      	mov	r0, r2
 800f74a:	e7e8      	b.n	800f71e <__lo0bits+0x2a>
 800f74c:	2000      	movs	r0, #0
 800f74e:	4770      	bx	lr
 800f750:	2020      	movs	r0, #32
 800f752:	4770      	bx	lr

0800f754 <__i2b>:
 800f754:	b510      	push	{r4, lr}
 800f756:	460c      	mov	r4, r1
 800f758:	2101      	movs	r1, #1
 800f75a:	f7ff feff 	bl	800f55c <_Balloc>
 800f75e:	4602      	mov	r2, r0
 800f760:	b928      	cbnz	r0, 800f76e <__i2b+0x1a>
 800f762:	4b05      	ldr	r3, [pc, #20]	; (800f778 <__i2b+0x24>)
 800f764:	4805      	ldr	r0, [pc, #20]	; (800f77c <__i2b+0x28>)
 800f766:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f76a:	f000 fbef 	bl	800ff4c <__assert_func>
 800f76e:	2301      	movs	r3, #1
 800f770:	6144      	str	r4, [r0, #20]
 800f772:	6103      	str	r3, [r0, #16]
 800f774:	bd10      	pop	{r4, pc}
 800f776:	bf00      	nop
 800f778:	080244bf 	.word	0x080244bf
 800f77c:	080244d0 	.word	0x080244d0

0800f780 <__multiply>:
 800f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	4614      	mov	r4, r2
 800f786:	690a      	ldr	r2, [r1, #16]
 800f788:	6923      	ldr	r3, [r4, #16]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	bfb8      	it	lt
 800f78e:	460b      	movlt	r3, r1
 800f790:	460d      	mov	r5, r1
 800f792:	bfbc      	itt	lt
 800f794:	4625      	movlt	r5, r4
 800f796:	461c      	movlt	r4, r3
 800f798:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f79c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f7a0:	68ab      	ldr	r3, [r5, #8]
 800f7a2:	6869      	ldr	r1, [r5, #4]
 800f7a4:	eb0a 0709 	add.w	r7, sl, r9
 800f7a8:	42bb      	cmp	r3, r7
 800f7aa:	b085      	sub	sp, #20
 800f7ac:	bfb8      	it	lt
 800f7ae:	3101      	addlt	r1, #1
 800f7b0:	f7ff fed4 	bl	800f55c <_Balloc>
 800f7b4:	b930      	cbnz	r0, 800f7c4 <__multiply+0x44>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	4b42      	ldr	r3, [pc, #264]	; (800f8c4 <__multiply+0x144>)
 800f7ba:	4843      	ldr	r0, [pc, #268]	; (800f8c8 <__multiply+0x148>)
 800f7bc:	f240 115d 	movw	r1, #349	; 0x15d
 800f7c0:	f000 fbc4 	bl	800ff4c <__assert_func>
 800f7c4:	f100 0614 	add.w	r6, r0, #20
 800f7c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f7cc:	4633      	mov	r3, r6
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	4543      	cmp	r3, r8
 800f7d2:	d31e      	bcc.n	800f812 <__multiply+0x92>
 800f7d4:	f105 0c14 	add.w	ip, r5, #20
 800f7d8:	f104 0314 	add.w	r3, r4, #20
 800f7dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f7e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f7e4:	9202      	str	r2, [sp, #8]
 800f7e6:	ebac 0205 	sub.w	r2, ip, r5
 800f7ea:	3a15      	subs	r2, #21
 800f7ec:	f022 0203 	bic.w	r2, r2, #3
 800f7f0:	3204      	adds	r2, #4
 800f7f2:	f105 0115 	add.w	r1, r5, #21
 800f7f6:	458c      	cmp	ip, r1
 800f7f8:	bf38      	it	cc
 800f7fa:	2204      	movcc	r2, #4
 800f7fc:	9201      	str	r2, [sp, #4]
 800f7fe:	9a02      	ldr	r2, [sp, #8]
 800f800:	9303      	str	r3, [sp, #12]
 800f802:	429a      	cmp	r2, r3
 800f804:	d808      	bhi.n	800f818 <__multiply+0x98>
 800f806:	2f00      	cmp	r7, #0
 800f808:	dc55      	bgt.n	800f8b6 <__multiply+0x136>
 800f80a:	6107      	str	r7, [r0, #16]
 800f80c:	b005      	add	sp, #20
 800f80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f812:	f843 2b04 	str.w	r2, [r3], #4
 800f816:	e7db      	b.n	800f7d0 <__multiply+0x50>
 800f818:	f8b3 a000 	ldrh.w	sl, [r3]
 800f81c:	f1ba 0f00 	cmp.w	sl, #0
 800f820:	d020      	beq.n	800f864 <__multiply+0xe4>
 800f822:	f105 0e14 	add.w	lr, r5, #20
 800f826:	46b1      	mov	r9, r6
 800f828:	2200      	movs	r2, #0
 800f82a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f82e:	f8d9 b000 	ldr.w	fp, [r9]
 800f832:	b2a1      	uxth	r1, r4
 800f834:	fa1f fb8b 	uxth.w	fp, fp
 800f838:	fb0a b101 	mla	r1, sl, r1, fp
 800f83c:	4411      	add	r1, r2
 800f83e:	f8d9 2000 	ldr.w	r2, [r9]
 800f842:	0c24      	lsrs	r4, r4, #16
 800f844:	0c12      	lsrs	r2, r2, #16
 800f846:	fb0a 2404 	mla	r4, sl, r4, r2
 800f84a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f84e:	b289      	uxth	r1, r1
 800f850:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f854:	45f4      	cmp	ip, lr
 800f856:	f849 1b04 	str.w	r1, [r9], #4
 800f85a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f85e:	d8e4      	bhi.n	800f82a <__multiply+0xaa>
 800f860:	9901      	ldr	r1, [sp, #4]
 800f862:	5072      	str	r2, [r6, r1]
 800f864:	9a03      	ldr	r2, [sp, #12]
 800f866:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f86a:	3304      	adds	r3, #4
 800f86c:	f1b9 0f00 	cmp.w	r9, #0
 800f870:	d01f      	beq.n	800f8b2 <__multiply+0x132>
 800f872:	6834      	ldr	r4, [r6, #0]
 800f874:	f105 0114 	add.w	r1, r5, #20
 800f878:	46b6      	mov	lr, r6
 800f87a:	f04f 0a00 	mov.w	sl, #0
 800f87e:	880a      	ldrh	r2, [r1, #0]
 800f880:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f884:	fb09 b202 	mla	r2, r9, r2, fp
 800f888:	4492      	add	sl, r2
 800f88a:	b2a4      	uxth	r4, r4
 800f88c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f890:	f84e 4b04 	str.w	r4, [lr], #4
 800f894:	f851 4b04 	ldr.w	r4, [r1], #4
 800f898:	f8be 2000 	ldrh.w	r2, [lr]
 800f89c:	0c24      	lsrs	r4, r4, #16
 800f89e:	fb09 2404 	mla	r4, r9, r4, r2
 800f8a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f8a6:	458c      	cmp	ip, r1
 800f8a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f8ac:	d8e7      	bhi.n	800f87e <__multiply+0xfe>
 800f8ae:	9a01      	ldr	r2, [sp, #4]
 800f8b0:	50b4      	str	r4, [r6, r2]
 800f8b2:	3604      	adds	r6, #4
 800f8b4:	e7a3      	b.n	800f7fe <__multiply+0x7e>
 800f8b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d1a5      	bne.n	800f80a <__multiply+0x8a>
 800f8be:	3f01      	subs	r7, #1
 800f8c0:	e7a1      	b.n	800f806 <__multiply+0x86>
 800f8c2:	bf00      	nop
 800f8c4:	080244bf 	.word	0x080244bf
 800f8c8:	080244d0 	.word	0x080244d0

0800f8cc <__pow5mult>:
 800f8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8d0:	4615      	mov	r5, r2
 800f8d2:	f012 0203 	ands.w	r2, r2, #3
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	460f      	mov	r7, r1
 800f8da:	d007      	beq.n	800f8ec <__pow5mult+0x20>
 800f8dc:	4c25      	ldr	r4, [pc, #148]	; (800f974 <__pow5mult+0xa8>)
 800f8de:	3a01      	subs	r2, #1
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8e6:	f7ff fe9b 	bl	800f620 <__multadd>
 800f8ea:	4607      	mov	r7, r0
 800f8ec:	10ad      	asrs	r5, r5, #2
 800f8ee:	d03d      	beq.n	800f96c <__pow5mult+0xa0>
 800f8f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f8f2:	b97c      	cbnz	r4, 800f914 <__pow5mult+0x48>
 800f8f4:	2010      	movs	r0, #16
 800f8f6:	f7ff fe1d 	bl	800f534 <malloc>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	6270      	str	r0, [r6, #36]	; 0x24
 800f8fe:	b928      	cbnz	r0, 800f90c <__pow5mult+0x40>
 800f900:	4b1d      	ldr	r3, [pc, #116]	; (800f978 <__pow5mult+0xac>)
 800f902:	481e      	ldr	r0, [pc, #120]	; (800f97c <__pow5mult+0xb0>)
 800f904:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f908:	f000 fb20 	bl	800ff4c <__assert_func>
 800f90c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f910:	6004      	str	r4, [r0, #0]
 800f912:	60c4      	str	r4, [r0, #12]
 800f914:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f91c:	b94c      	cbnz	r4, 800f932 <__pow5mult+0x66>
 800f91e:	f240 2171 	movw	r1, #625	; 0x271
 800f922:	4630      	mov	r0, r6
 800f924:	f7ff ff16 	bl	800f754 <__i2b>
 800f928:	2300      	movs	r3, #0
 800f92a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f92e:	4604      	mov	r4, r0
 800f930:	6003      	str	r3, [r0, #0]
 800f932:	f04f 0900 	mov.w	r9, #0
 800f936:	07eb      	lsls	r3, r5, #31
 800f938:	d50a      	bpl.n	800f950 <__pow5mult+0x84>
 800f93a:	4639      	mov	r1, r7
 800f93c:	4622      	mov	r2, r4
 800f93e:	4630      	mov	r0, r6
 800f940:	f7ff ff1e 	bl	800f780 <__multiply>
 800f944:	4639      	mov	r1, r7
 800f946:	4680      	mov	r8, r0
 800f948:	4630      	mov	r0, r6
 800f94a:	f7ff fe47 	bl	800f5dc <_Bfree>
 800f94e:	4647      	mov	r7, r8
 800f950:	106d      	asrs	r5, r5, #1
 800f952:	d00b      	beq.n	800f96c <__pow5mult+0xa0>
 800f954:	6820      	ldr	r0, [r4, #0]
 800f956:	b938      	cbnz	r0, 800f968 <__pow5mult+0x9c>
 800f958:	4622      	mov	r2, r4
 800f95a:	4621      	mov	r1, r4
 800f95c:	4630      	mov	r0, r6
 800f95e:	f7ff ff0f 	bl	800f780 <__multiply>
 800f962:	6020      	str	r0, [r4, #0]
 800f964:	f8c0 9000 	str.w	r9, [r0]
 800f968:	4604      	mov	r4, r0
 800f96a:	e7e4      	b.n	800f936 <__pow5mult+0x6a>
 800f96c:	4638      	mov	r0, r7
 800f96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f972:	bf00      	nop
 800f974:	08024620 	.word	0x08024620
 800f978:	08024449 	.word	0x08024449
 800f97c:	080244d0 	.word	0x080244d0

0800f980 <__lshift>:
 800f980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f984:	460c      	mov	r4, r1
 800f986:	6849      	ldr	r1, [r1, #4]
 800f988:	6923      	ldr	r3, [r4, #16]
 800f98a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f98e:	68a3      	ldr	r3, [r4, #8]
 800f990:	4607      	mov	r7, r0
 800f992:	4691      	mov	r9, r2
 800f994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f998:	f108 0601 	add.w	r6, r8, #1
 800f99c:	42b3      	cmp	r3, r6
 800f99e:	db0b      	blt.n	800f9b8 <__lshift+0x38>
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f7ff fddb 	bl	800f55c <_Balloc>
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	b948      	cbnz	r0, 800f9be <__lshift+0x3e>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	4b28      	ldr	r3, [pc, #160]	; (800fa50 <__lshift+0xd0>)
 800f9ae:	4829      	ldr	r0, [pc, #164]	; (800fa54 <__lshift+0xd4>)
 800f9b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f9b4:	f000 faca 	bl	800ff4c <__assert_func>
 800f9b8:	3101      	adds	r1, #1
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	e7ee      	b.n	800f99c <__lshift+0x1c>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	f100 0114 	add.w	r1, r0, #20
 800f9c4:	f100 0210 	add.w	r2, r0, #16
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	4553      	cmp	r3, sl
 800f9cc:	db33      	blt.n	800fa36 <__lshift+0xb6>
 800f9ce:	6920      	ldr	r0, [r4, #16]
 800f9d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9d4:	f104 0314 	add.w	r3, r4, #20
 800f9d8:	f019 091f 	ands.w	r9, r9, #31
 800f9dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f9e4:	d02b      	beq.n	800fa3e <__lshift+0xbe>
 800f9e6:	f1c9 0e20 	rsb	lr, r9, #32
 800f9ea:	468a      	mov	sl, r1
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	6818      	ldr	r0, [r3, #0]
 800f9f0:	fa00 f009 	lsl.w	r0, r0, r9
 800f9f4:	4302      	orrs	r2, r0
 800f9f6:	f84a 2b04 	str.w	r2, [sl], #4
 800f9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9fe:	459c      	cmp	ip, r3
 800fa00:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa04:	d8f3      	bhi.n	800f9ee <__lshift+0x6e>
 800fa06:	ebac 0304 	sub.w	r3, ip, r4
 800fa0a:	3b15      	subs	r3, #21
 800fa0c:	f023 0303 	bic.w	r3, r3, #3
 800fa10:	3304      	adds	r3, #4
 800fa12:	f104 0015 	add.w	r0, r4, #21
 800fa16:	4584      	cmp	ip, r0
 800fa18:	bf38      	it	cc
 800fa1a:	2304      	movcc	r3, #4
 800fa1c:	50ca      	str	r2, [r1, r3]
 800fa1e:	b10a      	cbz	r2, 800fa24 <__lshift+0xa4>
 800fa20:	f108 0602 	add.w	r6, r8, #2
 800fa24:	3e01      	subs	r6, #1
 800fa26:	4638      	mov	r0, r7
 800fa28:	612e      	str	r6, [r5, #16]
 800fa2a:	4621      	mov	r1, r4
 800fa2c:	f7ff fdd6 	bl	800f5dc <_Bfree>
 800fa30:	4628      	mov	r0, r5
 800fa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa36:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	e7c5      	b.n	800f9ca <__lshift+0x4a>
 800fa3e:	3904      	subs	r1, #4
 800fa40:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa44:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa48:	459c      	cmp	ip, r3
 800fa4a:	d8f9      	bhi.n	800fa40 <__lshift+0xc0>
 800fa4c:	e7ea      	b.n	800fa24 <__lshift+0xa4>
 800fa4e:	bf00      	nop
 800fa50:	080244bf 	.word	0x080244bf
 800fa54:	080244d0 	.word	0x080244d0

0800fa58 <__mcmp>:
 800fa58:	b530      	push	{r4, r5, lr}
 800fa5a:	6902      	ldr	r2, [r0, #16]
 800fa5c:	690c      	ldr	r4, [r1, #16]
 800fa5e:	1b12      	subs	r2, r2, r4
 800fa60:	d10e      	bne.n	800fa80 <__mcmp+0x28>
 800fa62:	f100 0314 	add.w	r3, r0, #20
 800fa66:	3114      	adds	r1, #20
 800fa68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa78:	42a5      	cmp	r5, r4
 800fa7a:	d003      	beq.n	800fa84 <__mcmp+0x2c>
 800fa7c:	d305      	bcc.n	800fa8a <__mcmp+0x32>
 800fa7e:	2201      	movs	r2, #1
 800fa80:	4610      	mov	r0, r2
 800fa82:	bd30      	pop	{r4, r5, pc}
 800fa84:	4283      	cmp	r3, r0
 800fa86:	d3f3      	bcc.n	800fa70 <__mcmp+0x18>
 800fa88:	e7fa      	b.n	800fa80 <__mcmp+0x28>
 800fa8a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa8e:	e7f7      	b.n	800fa80 <__mcmp+0x28>

0800fa90 <__mdiff>:
 800fa90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa94:	460c      	mov	r4, r1
 800fa96:	4606      	mov	r6, r0
 800fa98:	4611      	mov	r1, r2
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	4617      	mov	r7, r2
 800fa9e:	f7ff ffdb 	bl	800fa58 <__mcmp>
 800faa2:	1e05      	subs	r5, r0, #0
 800faa4:	d110      	bne.n	800fac8 <__mdiff+0x38>
 800faa6:	4629      	mov	r1, r5
 800faa8:	4630      	mov	r0, r6
 800faaa:	f7ff fd57 	bl	800f55c <_Balloc>
 800faae:	b930      	cbnz	r0, 800fabe <__mdiff+0x2e>
 800fab0:	4b39      	ldr	r3, [pc, #228]	; (800fb98 <__mdiff+0x108>)
 800fab2:	4602      	mov	r2, r0
 800fab4:	f240 2132 	movw	r1, #562	; 0x232
 800fab8:	4838      	ldr	r0, [pc, #224]	; (800fb9c <__mdiff+0x10c>)
 800faba:	f000 fa47 	bl	800ff4c <__assert_func>
 800fabe:	2301      	movs	r3, #1
 800fac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac8:	bfa4      	itt	ge
 800faca:	463b      	movge	r3, r7
 800facc:	4627      	movge	r7, r4
 800face:	4630      	mov	r0, r6
 800fad0:	6879      	ldr	r1, [r7, #4]
 800fad2:	bfa6      	itte	ge
 800fad4:	461c      	movge	r4, r3
 800fad6:	2500      	movge	r5, #0
 800fad8:	2501      	movlt	r5, #1
 800fada:	f7ff fd3f 	bl	800f55c <_Balloc>
 800fade:	b920      	cbnz	r0, 800faea <__mdiff+0x5a>
 800fae0:	4b2d      	ldr	r3, [pc, #180]	; (800fb98 <__mdiff+0x108>)
 800fae2:	4602      	mov	r2, r0
 800fae4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fae8:	e7e6      	b.n	800fab8 <__mdiff+0x28>
 800faea:	693e      	ldr	r6, [r7, #16]
 800faec:	60c5      	str	r5, [r0, #12]
 800faee:	6925      	ldr	r5, [r4, #16]
 800faf0:	f107 0114 	add.w	r1, r7, #20
 800faf4:	f104 0914 	add.w	r9, r4, #20
 800faf8:	f100 0e14 	add.w	lr, r0, #20
 800fafc:	f107 0210 	add.w	r2, r7, #16
 800fb00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fb04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fb08:	46f2      	mov	sl, lr
 800fb0a:	2700      	movs	r7, #0
 800fb0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb14:	fa1f f883 	uxth.w	r8, r3
 800fb18:	fa17 f78b 	uxtah	r7, r7, fp
 800fb1c:	0c1b      	lsrs	r3, r3, #16
 800fb1e:	eba7 0808 	sub.w	r8, r7, r8
 800fb22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb2a:	fa1f f888 	uxth.w	r8, r8
 800fb2e:	141f      	asrs	r7, r3, #16
 800fb30:	454d      	cmp	r5, r9
 800fb32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb36:	f84a 3b04 	str.w	r3, [sl], #4
 800fb3a:	d8e7      	bhi.n	800fb0c <__mdiff+0x7c>
 800fb3c:	1b2b      	subs	r3, r5, r4
 800fb3e:	3b15      	subs	r3, #21
 800fb40:	f023 0303 	bic.w	r3, r3, #3
 800fb44:	3304      	adds	r3, #4
 800fb46:	3415      	adds	r4, #21
 800fb48:	42a5      	cmp	r5, r4
 800fb4a:	bf38      	it	cc
 800fb4c:	2304      	movcc	r3, #4
 800fb4e:	4419      	add	r1, r3
 800fb50:	4473      	add	r3, lr
 800fb52:	469e      	mov	lr, r3
 800fb54:	460d      	mov	r5, r1
 800fb56:	4565      	cmp	r5, ip
 800fb58:	d30e      	bcc.n	800fb78 <__mdiff+0xe8>
 800fb5a:	f10c 0203 	add.w	r2, ip, #3
 800fb5e:	1a52      	subs	r2, r2, r1
 800fb60:	f022 0203 	bic.w	r2, r2, #3
 800fb64:	3903      	subs	r1, #3
 800fb66:	458c      	cmp	ip, r1
 800fb68:	bf38      	it	cc
 800fb6a:	2200      	movcc	r2, #0
 800fb6c:	441a      	add	r2, r3
 800fb6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb72:	b17b      	cbz	r3, 800fb94 <__mdiff+0x104>
 800fb74:	6106      	str	r6, [r0, #16]
 800fb76:	e7a5      	b.n	800fac4 <__mdiff+0x34>
 800fb78:	f855 8b04 	ldr.w	r8, [r5], #4
 800fb7c:	fa17 f488 	uxtah	r4, r7, r8
 800fb80:	1422      	asrs	r2, r4, #16
 800fb82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fb86:	b2a4      	uxth	r4, r4
 800fb88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fb8c:	f84e 4b04 	str.w	r4, [lr], #4
 800fb90:	1417      	asrs	r7, r2, #16
 800fb92:	e7e0      	b.n	800fb56 <__mdiff+0xc6>
 800fb94:	3e01      	subs	r6, #1
 800fb96:	e7ea      	b.n	800fb6e <__mdiff+0xde>
 800fb98:	080244bf 	.word	0x080244bf
 800fb9c:	080244d0 	.word	0x080244d0

0800fba0 <__d2b>:
 800fba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fba4:	4689      	mov	r9, r1
 800fba6:	2101      	movs	r1, #1
 800fba8:	ec57 6b10 	vmov	r6, r7, d0
 800fbac:	4690      	mov	r8, r2
 800fbae:	f7ff fcd5 	bl	800f55c <_Balloc>
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	b930      	cbnz	r0, 800fbc4 <__d2b+0x24>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	4b25      	ldr	r3, [pc, #148]	; (800fc50 <__d2b+0xb0>)
 800fbba:	4826      	ldr	r0, [pc, #152]	; (800fc54 <__d2b+0xb4>)
 800fbbc:	f240 310a 	movw	r1, #778	; 0x30a
 800fbc0:	f000 f9c4 	bl	800ff4c <__assert_func>
 800fbc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fbc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fbcc:	bb35      	cbnz	r5, 800fc1c <__d2b+0x7c>
 800fbce:	2e00      	cmp	r6, #0
 800fbd0:	9301      	str	r3, [sp, #4]
 800fbd2:	d028      	beq.n	800fc26 <__d2b+0x86>
 800fbd4:	4668      	mov	r0, sp
 800fbd6:	9600      	str	r6, [sp, #0]
 800fbd8:	f7ff fd8c 	bl	800f6f4 <__lo0bits>
 800fbdc:	9900      	ldr	r1, [sp, #0]
 800fbde:	b300      	cbz	r0, 800fc22 <__d2b+0x82>
 800fbe0:	9a01      	ldr	r2, [sp, #4]
 800fbe2:	f1c0 0320 	rsb	r3, r0, #32
 800fbe6:	fa02 f303 	lsl.w	r3, r2, r3
 800fbea:	430b      	orrs	r3, r1
 800fbec:	40c2      	lsrs	r2, r0
 800fbee:	6163      	str	r3, [r4, #20]
 800fbf0:	9201      	str	r2, [sp, #4]
 800fbf2:	9b01      	ldr	r3, [sp, #4]
 800fbf4:	61a3      	str	r3, [r4, #24]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	bf14      	ite	ne
 800fbfa:	2202      	movne	r2, #2
 800fbfc:	2201      	moveq	r2, #1
 800fbfe:	6122      	str	r2, [r4, #16]
 800fc00:	b1d5      	cbz	r5, 800fc38 <__d2b+0x98>
 800fc02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc06:	4405      	add	r5, r0
 800fc08:	f8c9 5000 	str.w	r5, [r9]
 800fc0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc10:	f8c8 0000 	str.w	r0, [r8]
 800fc14:	4620      	mov	r0, r4
 800fc16:	b003      	add	sp, #12
 800fc18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc20:	e7d5      	b.n	800fbce <__d2b+0x2e>
 800fc22:	6161      	str	r1, [r4, #20]
 800fc24:	e7e5      	b.n	800fbf2 <__d2b+0x52>
 800fc26:	a801      	add	r0, sp, #4
 800fc28:	f7ff fd64 	bl	800f6f4 <__lo0bits>
 800fc2c:	9b01      	ldr	r3, [sp, #4]
 800fc2e:	6163      	str	r3, [r4, #20]
 800fc30:	2201      	movs	r2, #1
 800fc32:	6122      	str	r2, [r4, #16]
 800fc34:	3020      	adds	r0, #32
 800fc36:	e7e3      	b.n	800fc00 <__d2b+0x60>
 800fc38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc40:	f8c9 0000 	str.w	r0, [r9]
 800fc44:	6918      	ldr	r0, [r3, #16]
 800fc46:	f7ff fd35 	bl	800f6b4 <__hi0bits>
 800fc4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc4e:	e7df      	b.n	800fc10 <__d2b+0x70>
 800fc50:	080244bf 	.word	0x080244bf
 800fc54:	080244d0 	.word	0x080244d0

0800fc58 <_calloc_r>:
 800fc58:	b513      	push	{r0, r1, r4, lr}
 800fc5a:	434a      	muls	r2, r1
 800fc5c:	4611      	mov	r1, r2
 800fc5e:	9201      	str	r2, [sp, #4]
 800fc60:	f7fd feec 	bl	800da3c <_malloc_r>
 800fc64:	4604      	mov	r4, r0
 800fc66:	b118      	cbz	r0, 800fc70 <_calloc_r+0x18>
 800fc68:	9a01      	ldr	r2, [sp, #4]
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	f7fd fe8d 	bl	800d98a <memset>
 800fc70:	4620      	mov	r0, r4
 800fc72:	b002      	add	sp, #8
 800fc74:	bd10      	pop	{r4, pc}

0800fc76 <__sfputc_r>:
 800fc76:	6893      	ldr	r3, [r2, #8]
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	b410      	push	{r4}
 800fc7e:	6093      	str	r3, [r2, #8]
 800fc80:	da08      	bge.n	800fc94 <__sfputc_r+0x1e>
 800fc82:	6994      	ldr	r4, [r2, #24]
 800fc84:	42a3      	cmp	r3, r4
 800fc86:	db01      	blt.n	800fc8c <__sfputc_r+0x16>
 800fc88:	290a      	cmp	r1, #10
 800fc8a:	d103      	bne.n	800fc94 <__sfputc_r+0x1e>
 800fc8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc90:	f7fe bc7a 	b.w	800e588 <__swbuf_r>
 800fc94:	6813      	ldr	r3, [r2, #0]
 800fc96:	1c58      	adds	r0, r3, #1
 800fc98:	6010      	str	r0, [r2, #0]
 800fc9a:	7019      	strb	r1, [r3, #0]
 800fc9c:	4608      	mov	r0, r1
 800fc9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <__sfputs_r>:
 800fca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca6:	4606      	mov	r6, r0
 800fca8:	460f      	mov	r7, r1
 800fcaa:	4614      	mov	r4, r2
 800fcac:	18d5      	adds	r5, r2, r3
 800fcae:	42ac      	cmp	r4, r5
 800fcb0:	d101      	bne.n	800fcb6 <__sfputs_r+0x12>
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	e007      	b.n	800fcc6 <__sfputs_r+0x22>
 800fcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcba:	463a      	mov	r2, r7
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	f7ff ffda 	bl	800fc76 <__sfputc_r>
 800fcc2:	1c43      	adds	r3, r0, #1
 800fcc4:	d1f3      	bne.n	800fcae <__sfputs_r+0xa>
 800fcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fcc8 <_vfiprintf_r>:
 800fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	460d      	mov	r5, r1
 800fcce:	b09d      	sub	sp, #116	; 0x74
 800fcd0:	4614      	mov	r4, r2
 800fcd2:	4698      	mov	r8, r3
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	b118      	cbz	r0, 800fce0 <_vfiprintf_r+0x18>
 800fcd8:	6983      	ldr	r3, [r0, #24]
 800fcda:	b90b      	cbnz	r3, 800fce0 <_vfiprintf_r+0x18>
 800fcdc:	f7fd fd82 	bl	800d7e4 <__sinit>
 800fce0:	4b89      	ldr	r3, [pc, #548]	; (800ff08 <_vfiprintf_r+0x240>)
 800fce2:	429d      	cmp	r5, r3
 800fce4:	d11b      	bne.n	800fd1e <_vfiprintf_r+0x56>
 800fce6:	6875      	ldr	r5, [r6, #4]
 800fce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcea:	07d9      	lsls	r1, r3, #31
 800fcec:	d405      	bmi.n	800fcfa <_vfiprintf_r+0x32>
 800fcee:	89ab      	ldrh	r3, [r5, #12]
 800fcf0:	059a      	lsls	r2, r3, #22
 800fcf2:	d402      	bmi.n	800fcfa <_vfiprintf_r+0x32>
 800fcf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcf6:	f7fd fe38 	bl	800d96a <__retarget_lock_acquire_recursive>
 800fcfa:	89ab      	ldrh	r3, [r5, #12]
 800fcfc:	071b      	lsls	r3, r3, #28
 800fcfe:	d501      	bpl.n	800fd04 <_vfiprintf_r+0x3c>
 800fd00:	692b      	ldr	r3, [r5, #16]
 800fd02:	b9eb      	cbnz	r3, 800fd40 <_vfiprintf_r+0x78>
 800fd04:	4629      	mov	r1, r5
 800fd06:	4630      	mov	r0, r6
 800fd08:	f7fe fca2 	bl	800e650 <__swsetup_r>
 800fd0c:	b1c0      	cbz	r0, 800fd40 <_vfiprintf_r+0x78>
 800fd0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd10:	07dc      	lsls	r4, r3, #31
 800fd12:	d50e      	bpl.n	800fd32 <_vfiprintf_r+0x6a>
 800fd14:	f04f 30ff 	mov.w	r0, #4294967295
 800fd18:	b01d      	add	sp, #116	; 0x74
 800fd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1e:	4b7b      	ldr	r3, [pc, #492]	; (800ff0c <_vfiprintf_r+0x244>)
 800fd20:	429d      	cmp	r5, r3
 800fd22:	d101      	bne.n	800fd28 <_vfiprintf_r+0x60>
 800fd24:	68b5      	ldr	r5, [r6, #8]
 800fd26:	e7df      	b.n	800fce8 <_vfiprintf_r+0x20>
 800fd28:	4b79      	ldr	r3, [pc, #484]	; (800ff10 <_vfiprintf_r+0x248>)
 800fd2a:	429d      	cmp	r5, r3
 800fd2c:	bf08      	it	eq
 800fd2e:	68f5      	ldreq	r5, [r6, #12]
 800fd30:	e7da      	b.n	800fce8 <_vfiprintf_r+0x20>
 800fd32:	89ab      	ldrh	r3, [r5, #12]
 800fd34:	0598      	lsls	r0, r3, #22
 800fd36:	d4ed      	bmi.n	800fd14 <_vfiprintf_r+0x4c>
 800fd38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd3a:	f7fd fe17 	bl	800d96c <__retarget_lock_release_recursive>
 800fd3e:	e7e9      	b.n	800fd14 <_vfiprintf_r+0x4c>
 800fd40:	2300      	movs	r3, #0
 800fd42:	9309      	str	r3, [sp, #36]	; 0x24
 800fd44:	2320      	movs	r3, #32
 800fd46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd4e:	2330      	movs	r3, #48	; 0x30
 800fd50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ff14 <_vfiprintf_r+0x24c>
 800fd54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd58:	f04f 0901 	mov.w	r9, #1
 800fd5c:	4623      	mov	r3, r4
 800fd5e:	469a      	mov	sl, r3
 800fd60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd64:	b10a      	cbz	r2, 800fd6a <_vfiprintf_r+0xa2>
 800fd66:	2a25      	cmp	r2, #37	; 0x25
 800fd68:	d1f9      	bne.n	800fd5e <_vfiprintf_r+0x96>
 800fd6a:	ebba 0b04 	subs.w	fp, sl, r4
 800fd6e:	d00b      	beq.n	800fd88 <_vfiprintf_r+0xc0>
 800fd70:	465b      	mov	r3, fp
 800fd72:	4622      	mov	r2, r4
 800fd74:	4629      	mov	r1, r5
 800fd76:	4630      	mov	r0, r6
 800fd78:	f7ff ff94 	bl	800fca4 <__sfputs_r>
 800fd7c:	3001      	adds	r0, #1
 800fd7e:	f000 80aa 	beq.w	800fed6 <_vfiprintf_r+0x20e>
 800fd82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd84:	445a      	add	r2, fp
 800fd86:	9209      	str	r2, [sp, #36]	; 0x24
 800fd88:	f89a 3000 	ldrb.w	r3, [sl]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f000 80a2 	beq.w	800fed6 <_vfiprintf_r+0x20e>
 800fd92:	2300      	movs	r3, #0
 800fd94:	f04f 32ff 	mov.w	r2, #4294967295
 800fd98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd9c:	f10a 0a01 	add.w	sl, sl, #1
 800fda0:	9304      	str	r3, [sp, #16]
 800fda2:	9307      	str	r3, [sp, #28]
 800fda4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fda8:	931a      	str	r3, [sp, #104]	; 0x68
 800fdaa:	4654      	mov	r4, sl
 800fdac:	2205      	movs	r2, #5
 800fdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdb2:	4858      	ldr	r0, [pc, #352]	; (800ff14 <_vfiprintf_r+0x24c>)
 800fdb4:	f7f0 fa74 	bl	80002a0 <memchr>
 800fdb8:	9a04      	ldr	r2, [sp, #16]
 800fdba:	b9d8      	cbnz	r0, 800fdf4 <_vfiprintf_r+0x12c>
 800fdbc:	06d1      	lsls	r1, r2, #27
 800fdbe:	bf44      	itt	mi
 800fdc0:	2320      	movmi	r3, #32
 800fdc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdc6:	0713      	lsls	r3, r2, #28
 800fdc8:	bf44      	itt	mi
 800fdca:	232b      	movmi	r3, #43	; 0x2b
 800fdcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdd0:	f89a 3000 	ldrb.w	r3, [sl]
 800fdd4:	2b2a      	cmp	r3, #42	; 0x2a
 800fdd6:	d015      	beq.n	800fe04 <_vfiprintf_r+0x13c>
 800fdd8:	9a07      	ldr	r2, [sp, #28]
 800fdda:	4654      	mov	r4, sl
 800fddc:	2000      	movs	r0, #0
 800fdde:	f04f 0c0a 	mov.w	ip, #10
 800fde2:	4621      	mov	r1, r4
 800fde4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fde8:	3b30      	subs	r3, #48	; 0x30
 800fdea:	2b09      	cmp	r3, #9
 800fdec:	d94e      	bls.n	800fe8c <_vfiprintf_r+0x1c4>
 800fdee:	b1b0      	cbz	r0, 800fe1e <_vfiprintf_r+0x156>
 800fdf0:	9207      	str	r2, [sp, #28]
 800fdf2:	e014      	b.n	800fe1e <_vfiprintf_r+0x156>
 800fdf4:	eba0 0308 	sub.w	r3, r0, r8
 800fdf8:	fa09 f303 	lsl.w	r3, r9, r3
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	9304      	str	r3, [sp, #16]
 800fe00:	46a2      	mov	sl, r4
 800fe02:	e7d2      	b.n	800fdaa <_vfiprintf_r+0xe2>
 800fe04:	9b03      	ldr	r3, [sp, #12]
 800fe06:	1d19      	adds	r1, r3, #4
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	9103      	str	r1, [sp, #12]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	bfbb      	ittet	lt
 800fe10:	425b      	neglt	r3, r3
 800fe12:	f042 0202 	orrlt.w	r2, r2, #2
 800fe16:	9307      	strge	r3, [sp, #28]
 800fe18:	9307      	strlt	r3, [sp, #28]
 800fe1a:	bfb8      	it	lt
 800fe1c:	9204      	strlt	r2, [sp, #16]
 800fe1e:	7823      	ldrb	r3, [r4, #0]
 800fe20:	2b2e      	cmp	r3, #46	; 0x2e
 800fe22:	d10c      	bne.n	800fe3e <_vfiprintf_r+0x176>
 800fe24:	7863      	ldrb	r3, [r4, #1]
 800fe26:	2b2a      	cmp	r3, #42	; 0x2a
 800fe28:	d135      	bne.n	800fe96 <_vfiprintf_r+0x1ce>
 800fe2a:	9b03      	ldr	r3, [sp, #12]
 800fe2c:	1d1a      	adds	r2, r3, #4
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	9203      	str	r2, [sp, #12]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	bfb8      	it	lt
 800fe36:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe3a:	3402      	adds	r4, #2
 800fe3c:	9305      	str	r3, [sp, #20]
 800fe3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ff24 <_vfiprintf_r+0x25c>
 800fe42:	7821      	ldrb	r1, [r4, #0]
 800fe44:	2203      	movs	r2, #3
 800fe46:	4650      	mov	r0, sl
 800fe48:	f7f0 fa2a 	bl	80002a0 <memchr>
 800fe4c:	b140      	cbz	r0, 800fe60 <_vfiprintf_r+0x198>
 800fe4e:	2340      	movs	r3, #64	; 0x40
 800fe50:	eba0 000a 	sub.w	r0, r0, sl
 800fe54:	fa03 f000 	lsl.w	r0, r3, r0
 800fe58:	9b04      	ldr	r3, [sp, #16]
 800fe5a:	4303      	orrs	r3, r0
 800fe5c:	3401      	adds	r4, #1
 800fe5e:	9304      	str	r3, [sp, #16]
 800fe60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe64:	482c      	ldr	r0, [pc, #176]	; (800ff18 <_vfiprintf_r+0x250>)
 800fe66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe6a:	2206      	movs	r2, #6
 800fe6c:	f7f0 fa18 	bl	80002a0 <memchr>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d03f      	beq.n	800fef4 <_vfiprintf_r+0x22c>
 800fe74:	4b29      	ldr	r3, [pc, #164]	; (800ff1c <_vfiprintf_r+0x254>)
 800fe76:	bb1b      	cbnz	r3, 800fec0 <_vfiprintf_r+0x1f8>
 800fe78:	9b03      	ldr	r3, [sp, #12]
 800fe7a:	3307      	adds	r3, #7
 800fe7c:	f023 0307 	bic.w	r3, r3, #7
 800fe80:	3308      	adds	r3, #8
 800fe82:	9303      	str	r3, [sp, #12]
 800fe84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe86:	443b      	add	r3, r7
 800fe88:	9309      	str	r3, [sp, #36]	; 0x24
 800fe8a:	e767      	b.n	800fd5c <_vfiprintf_r+0x94>
 800fe8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe90:	460c      	mov	r4, r1
 800fe92:	2001      	movs	r0, #1
 800fe94:	e7a5      	b.n	800fde2 <_vfiprintf_r+0x11a>
 800fe96:	2300      	movs	r3, #0
 800fe98:	3401      	adds	r4, #1
 800fe9a:	9305      	str	r3, [sp, #20]
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	f04f 0c0a 	mov.w	ip, #10
 800fea2:	4620      	mov	r0, r4
 800fea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fea8:	3a30      	subs	r2, #48	; 0x30
 800feaa:	2a09      	cmp	r2, #9
 800feac:	d903      	bls.n	800feb6 <_vfiprintf_r+0x1ee>
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d0c5      	beq.n	800fe3e <_vfiprintf_r+0x176>
 800feb2:	9105      	str	r1, [sp, #20]
 800feb4:	e7c3      	b.n	800fe3e <_vfiprintf_r+0x176>
 800feb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800feba:	4604      	mov	r4, r0
 800febc:	2301      	movs	r3, #1
 800febe:	e7f0      	b.n	800fea2 <_vfiprintf_r+0x1da>
 800fec0:	ab03      	add	r3, sp, #12
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	462a      	mov	r2, r5
 800fec6:	4b16      	ldr	r3, [pc, #88]	; (800ff20 <_vfiprintf_r+0x258>)
 800fec8:	a904      	add	r1, sp, #16
 800feca:	4630      	mov	r0, r6
 800fecc:	f7fd feb0 	bl	800dc30 <_printf_float>
 800fed0:	4607      	mov	r7, r0
 800fed2:	1c78      	adds	r0, r7, #1
 800fed4:	d1d6      	bne.n	800fe84 <_vfiprintf_r+0x1bc>
 800fed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fed8:	07d9      	lsls	r1, r3, #31
 800feda:	d405      	bmi.n	800fee8 <_vfiprintf_r+0x220>
 800fedc:	89ab      	ldrh	r3, [r5, #12]
 800fede:	059a      	lsls	r2, r3, #22
 800fee0:	d402      	bmi.n	800fee8 <_vfiprintf_r+0x220>
 800fee2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fee4:	f7fd fd42 	bl	800d96c <__retarget_lock_release_recursive>
 800fee8:	89ab      	ldrh	r3, [r5, #12]
 800feea:	065b      	lsls	r3, r3, #25
 800feec:	f53f af12 	bmi.w	800fd14 <_vfiprintf_r+0x4c>
 800fef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fef2:	e711      	b.n	800fd18 <_vfiprintf_r+0x50>
 800fef4:	ab03      	add	r3, sp, #12
 800fef6:	9300      	str	r3, [sp, #0]
 800fef8:	462a      	mov	r2, r5
 800fefa:	4b09      	ldr	r3, [pc, #36]	; (800ff20 <_vfiprintf_r+0x258>)
 800fefc:	a904      	add	r1, sp, #16
 800fefe:	4630      	mov	r0, r6
 800ff00:	f7fe f93a 	bl	800e178 <_printf_i>
 800ff04:	e7e4      	b.n	800fed0 <_vfiprintf_r+0x208>
 800ff06:	bf00      	nop
 800ff08:	080243c4 	.word	0x080243c4
 800ff0c:	080243e4 	.word	0x080243e4
 800ff10:	080243a4 	.word	0x080243a4
 800ff14:	0802462c 	.word	0x0802462c
 800ff18:	08024636 	.word	0x08024636
 800ff1c:	0800dc31 	.word	0x0800dc31
 800ff20:	0800fca5 	.word	0x0800fca5
 800ff24:	08024632 	.word	0x08024632

0800ff28 <_read_r>:
 800ff28:	b538      	push	{r3, r4, r5, lr}
 800ff2a:	4d07      	ldr	r5, [pc, #28]	; (800ff48 <_read_r+0x20>)
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	4608      	mov	r0, r1
 800ff30:	4611      	mov	r1, r2
 800ff32:	2200      	movs	r2, #0
 800ff34:	602a      	str	r2, [r5, #0]
 800ff36:	461a      	mov	r2, r3
 800ff38:	f7f2 fa22 	bl	8002380 <_read>
 800ff3c:	1c43      	adds	r3, r0, #1
 800ff3e:	d102      	bne.n	800ff46 <_read_r+0x1e>
 800ff40:	682b      	ldr	r3, [r5, #0]
 800ff42:	b103      	cbz	r3, 800ff46 <_read_r+0x1e>
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	bd38      	pop	{r3, r4, r5, pc}
 800ff48:	20008ab4 	.word	0x20008ab4

0800ff4c <__assert_func>:
 800ff4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff4e:	4614      	mov	r4, r2
 800ff50:	461a      	mov	r2, r3
 800ff52:	4b09      	ldr	r3, [pc, #36]	; (800ff78 <__assert_func+0x2c>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4605      	mov	r5, r0
 800ff58:	68d8      	ldr	r0, [r3, #12]
 800ff5a:	b14c      	cbz	r4, 800ff70 <__assert_func+0x24>
 800ff5c:	4b07      	ldr	r3, [pc, #28]	; (800ff7c <__assert_func+0x30>)
 800ff5e:	9100      	str	r1, [sp, #0]
 800ff60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff64:	4906      	ldr	r1, [pc, #24]	; (800ff80 <__assert_func+0x34>)
 800ff66:	462b      	mov	r3, r5
 800ff68:	f000 f80e 	bl	800ff88 <fiprintf>
 800ff6c:	f000 f85f 	bl	801002e <abort>
 800ff70:	4b04      	ldr	r3, [pc, #16]	; (800ff84 <__assert_func+0x38>)
 800ff72:	461c      	mov	r4, r3
 800ff74:	e7f3      	b.n	800ff5e <__assert_func+0x12>
 800ff76:	bf00      	nop
 800ff78:	20000090 	.word	0x20000090
 800ff7c:	0802463d 	.word	0x0802463d
 800ff80:	0802464a 	.word	0x0802464a
 800ff84:	08024678 	.word	0x08024678

0800ff88 <fiprintf>:
 800ff88:	b40e      	push	{r1, r2, r3}
 800ff8a:	b503      	push	{r0, r1, lr}
 800ff8c:	4601      	mov	r1, r0
 800ff8e:	ab03      	add	r3, sp, #12
 800ff90:	4805      	ldr	r0, [pc, #20]	; (800ffa8 <fiprintf+0x20>)
 800ff92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff96:	6800      	ldr	r0, [r0, #0]
 800ff98:	9301      	str	r3, [sp, #4]
 800ff9a:	f7ff fe95 	bl	800fcc8 <_vfiprintf_r>
 800ff9e:	b002      	add	sp, #8
 800ffa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffa4:	b003      	add	sp, #12
 800ffa6:	4770      	bx	lr
 800ffa8:	20000090 	.word	0x20000090

0800ffac <_fstat_r>:
 800ffac:	b538      	push	{r3, r4, r5, lr}
 800ffae:	4d07      	ldr	r5, [pc, #28]	; (800ffcc <_fstat_r+0x20>)
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	4608      	mov	r0, r1
 800ffb6:	4611      	mov	r1, r2
 800ffb8:	602b      	str	r3, [r5, #0]
 800ffba:	f7f2 fa26 	bl	800240a <_fstat>
 800ffbe:	1c43      	adds	r3, r0, #1
 800ffc0:	d102      	bne.n	800ffc8 <_fstat_r+0x1c>
 800ffc2:	682b      	ldr	r3, [r5, #0]
 800ffc4:	b103      	cbz	r3, 800ffc8 <_fstat_r+0x1c>
 800ffc6:	6023      	str	r3, [r4, #0]
 800ffc8:	bd38      	pop	{r3, r4, r5, pc}
 800ffca:	bf00      	nop
 800ffcc:	20008ab4 	.word	0x20008ab4

0800ffd0 <_isatty_r>:
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4d06      	ldr	r5, [pc, #24]	; (800ffec <_isatty_r+0x1c>)
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	4608      	mov	r0, r1
 800ffda:	602b      	str	r3, [r5, #0]
 800ffdc:	f7f2 fa25 	bl	800242a <_isatty>
 800ffe0:	1c43      	adds	r3, r0, #1
 800ffe2:	d102      	bne.n	800ffea <_isatty_r+0x1a>
 800ffe4:	682b      	ldr	r3, [r5, #0]
 800ffe6:	b103      	cbz	r3, 800ffea <_isatty_r+0x1a>
 800ffe8:	6023      	str	r3, [r4, #0]
 800ffea:	bd38      	pop	{r3, r4, r5, pc}
 800ffec:	20008ab4 	.word	0x20008ab4

0800fff0 <__ascii_mbtowc>:
 800fff0:	b082      	sub	sp, #8
 800fff2:	b901      	cbnz	r1, 800fff6 <__ascii_mbtowc+0x6>
 800fff4:	a901      	add	r1, sp, #4
 800fff6:	b142      	cbz	r2, 801000a <__ascii_mbtowc+0x1a>
 800fff8:	b14b      	cbz	r3, 801000e <__ascii_mbtowc+0x1e>
 800fffa:	7813      	ldrb	r3, [r2, #0]
 800fffc:	600b      	str	r3, [r1, #0]
 800fffe:	7812      	ldrb	r2, [r2, #0]
 8010000:	1e10      	subs	r0, r2, #0
 8010002:	bf18      	it	ne
 8010004:	2001      	movne	r0, #1
 8010006:	b002      	add	sp, #8
 8010008:	4770      	bx	lr
 801000a:	4610      	mov	r0, r2
 801000c:	e7fb      	b.n	8010006 <__ascii_mbtowc+0x16>
 801000e:	f06f 0001 	mvn.w	r0, #1
 8010012:	e7f8      	b.n	8010006 <__ascii_mbtowc+0x16>

08010014 <__ascii_wctomb>:
 8010014:	b149      	cbz	r1, 801002a <__ascii_wctomb+0x16>
 8010016:	2aff      	cmp	r2, #255	; 0xff
 8010018:	bf85      	ittet	hi
 801001a:	238a      	movhi	r3, #138	; 0x8a
 801001c:	6003      	strhi	r3, [r0, #0]
 801001e:	700a      	strbls	r2, [r1, #0]
 8010020:	f04f 30ff 	movhi.w	r0, #4294967295
 8010024:	bf98      	it	ls
 8010026:	2001      	movls	r0, #1
 8010028:	4770      	bx	lr
 801002a:	4608      	mov	r0, r1
 801002c:	4770      	bx	lr

0801002e <abort>:
 801002e:	b508      	push	{r3, lr}
 8010030:	2006      	movs	r0, #6
 8010032:	f000 f82b 	bl	801008c <raise>
 8010036:	2001      	movs	r0, #1
 8010038:	f7f2 f998 	bl	800236c <_exit>

0801003c <_raise_r>:
 801003c:	291f      	cmp	r1, #31
 801003e:	b538      	push	{r3, r4, r5, lr}
 8010040:	4604      	mov	r4, r0
 8010042:	460d      	mov	r5, r1
 8010044:	d904      	bls.n	8010050 <_raise_r+0x14>
 8010046:	2316      	movs	r3, #22
 8010048:	6003      	str	r3, [r0, #0]
 801004a:	f04f 30ff 	mov.w	r0, #4294967295
 801004e:	bd38      	pop	{r3, r4, r5, pc}
 8010050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010052:	b112      	cbz	r2, 801005a <_raise_r+0x1e>
 8010054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010058:	b94b      	cbnz	r3, 801006e <_raise_r+0x32>
 801005a:	4620      	mov	r0, r4
 801005c:	f000 f830 	bl	80100c0 <_getpid_r>
 8010060:	462a      	mov	r2, r5
 8010062:	4601      	mov	r1, r0
 8010064:	4620      	mov	r0, r4
 8010066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801006a:	f000 b817 	b.w	801009c <_kill_r>
 801006e:	2b01      	cmp	r3, #1
 8010070:	d00a      	beq.n	8010088 <_raise_r+0x4c>
 8010072:	1c59      	adds	r1, r3, #1
 8010074:	d103      	bne.n	801007e <_raise_r+0x42>
 8010076:	2316      	movs	r3, #22
 8010078:	6003      	str	r3, [r0, #0]
 801007a:	2001      	movs	r0, #1
 801007c:	e7e7      	b.n	801004e <_raise_r+0x12>
 801007e:	2400      	movs	r4, #0
 8010080:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010084:	4628      	mov	r0, r5
 8010086:	4798      	blx	r3
 8010088:	2000      	movs	r0, #0
 801008a:	e7e0      	b.n	801004e <_raise_r+0x12>

0801008c <raise>:
 801008c:	4b02      	ldr	r3, [pc, #8]	; (8010098 <raise+0xc>)
 801008e:	4601      	mov	r1, r0
 8010090:	6818      	ldr	r0, [r3, #0]
 8010092:	f7ff bfd3 	b.w	801003c <_raise_r>
 8010096:	bf00      	nop
 8010098:	20000090 	.word	0x20000090

0801009c <_kill_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4d07      	ldr	r5, [pc, #28]	; (80100bc <_kill_r+0x20>)
 80100a0:	2300      	movs	r3, #0
 80100a2:	4604      	mov	r4, r0
 80100a4:	4608      	mov	r0, r1
 80100a6:	4611      	mov	r1, r2
 80100a8:	602b      	str	r3, [r5, #0]
 80100aa:	f7f2 f94f 	bl	800234c <_kill>
 80100ae:	1c43      	adds	r3, r0, #1
 80100b0:	d102      	bne.n	80100b8 <_kill_r+0x1c>
 80100b2:	682b      	ldr	r3, [r5, #0]
 80100b4:	b103      	cbz	r3, 80100b8 <_kill_r+0x1c>
 80100b6:	6023      	str	r3, [r4, #0]
 80100b8:	bd38      	pop	{r3, r4, r5, pc}
 80100ba:	bf00      	nop
 80100bc:	20008ab4 	.word	0x20008ab4

080100c0 <_getpid_r>:
 80100c0:	f7f2 b93c 	b.w	800233c <_getpid>
 80100c4:	0000      	movs	r0, r0
	...

080100c8 <exp>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	ed2d 8b02 	vpush	{d8}
 80100ce:	ec55 4b10 	vmov	r4, r5, d0
 80100d2:	f000 f86d 	bl	80101b0 <__ieee754_exp>
 80100d6:	4b22      	ldr	r3, [pc, #136]	; (8010160 <exp+0x98>)
 80100d8:	eeb0 8a40 	vmov.f32	s16, s0
 80100dc:	eef0 8a60 	vmov.f32	s17, s1
 80100e0:	f993 3000 	ldrsb.w	r3, [r3]
 80100e4:	3301      	adds	r3, #1
 80100e6:	d012      	beq.n	801010e <exp+0x46>
 80100e8:	ec45 4b10 	vmov	d0, r4, r5
 80100ec:	f000 f9dd 	bl	80104aa <finite>
 80100f0:	b168      	cbz	r0, 801010e <exp+0x46>
 80100f2:	a313      	add	r3, pc, #76	; (adr r3, 8010140 <exp+0x78>)
 80100f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f8:	4620      	mov	r0, r4
 80100fa:	4629      	mov	r1, r5
 80100fc:	f7f0 fd6c 	bl	8000bd8 <__aeabi_dcmpgt>
 8010100:	b160      	cbz	r0, 801011c <exp+0x54>
 8010102:	f7fd fa4f 	bl	800d5a4 <__errno>
 8010106:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8010148 <exp+0x80>
 801010a:	2322      	movs	r3, #34	; 0x22
 801010c:	6003      	str	r3, [r0, #0]
 801010e:	eeb0 0a48 	vmov.f32	s0, s16
 8010112:	eef0 0a68 	vmov.f32	s1, s17
 8010116:	ecbd 8b02 	vpop	{d8}
 801011a:	bd38      	pop	{r3, r4, r5, pc}
 801011c:	a30c      	add	r3, pc, #48	; (adr r3, 8010150 <exp+0x88>)
 801011e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010122:	4620      	mov	r0, r4
 8010124:	4629      	mov	r1, r5
 8010126:	f7f0 fd39 	bl	8000b9c <__aeabi_dcmplt>
 801012a:	2800      	cmp	r0, #0
 801012c:	d0ef      	beq.n	801010e <exp+0x46>
 801012e:	f7fd fa39 	bl	800d5a4 <__errno>
 8010132:	2322      	movs	r3, #34	; 0x22
 8010134:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8010158 <exp+0x90>
 8010138:	6003      	str	r3, [r0, #0]
 801013a:	e7e8      	b.n	801010e <exp+0x46>
 801013c:	f3af 8000 	nop.w
 8010140:	fefa39ef 	.word	0xfefa39ef
 8010144:	40862e42 	.word	0x40862e42
 8010148:	00000000 	.word	0x00000000
 801014c:	7ff00000 	.word	0x7ff00000
 8010150:	d52d3051 	.word	0xd52d3051
 8010154:	c0874910 	.word	0xc0874910
	...
 8010160:	20000260 	.word	0x20000260

08010164 <sqrtf>:
 8010164:	b508      	push	{r3, lr}
 8010166:	ed2d 8b02 	vpush	{d8}
 801016a:	eeb0 8a40 	vmov.f32	s16, s0
 801016e:	f000 f999 	bl	80104a4 <__ieee754_sqrtf>
 8010172:	4b0d      	ldr	r3, [pc, #52]	; (80101a8 <sqrtf+0x44>)
 8010174:	f993 3000 	ldrsb.w	r3, [r3]
 8010178:	3301      	adds	r3, #1
 801017a:	d011      	beq.n	80101a0 <sqrtf+0x3c>
 801017c:	eeb4 8a48 	vcmp.f32	s16, s16
 8010180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010184:	d60c      	bvs.n	80101a0 <sqrtf+0x3c>
 8010186:	eddf 8a09 	vldr	s17, [pc, #36]	; 80101ac <sqrtf+0x48>
 801018a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801018e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010192:	d505      	bpl.n	80101a0 <sqrtf+0x3c>
 8010194:	f7fd fa06 	bl	800d5a4 <__errno>
 8010198:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801019c:	2321      	movs	r3, #33	; 0x21
 801019e:	6003      	str	r3, [r0, #0]
 80101a0:	ecbd 8b02 	vpop	{d8}
 80101a4:	bd08      	pop	{r3, pc}
 80101a6:	bf00      	nop
 80101a8:	20000260 	.word	0x20000260
 80101ac:	00000000 	.word	0x00000000

080101b0 <__ieee754_exp>:
 80101b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b4:	ec55 4b10 	vmov	r4, r5, d0
 80101b8:	49b1      	ldr	r1, [pc, #708]	; (8010480 <__ieee754_exp+0x2d0>)
 80101ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80101be:	428b      	cmp	r3, r1
 80101c0:	ed2d 8b04 	vpush	{d8-d9}
 80101c4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80101c8:	d937      	bls.n	801023a <__ieee754_exp+0x8a>
 80101ca:	49ae      	ldr	r1, [pc, #696]	; (8010484 <__ieee754_exp+0x2d4>)
 80101cc:	428b      	cmp	r3, r1
 80101ce:	d916      	bls.n	80101fe <__ieee754_exp+0x4e>
 80101d0:	ee10 3a10 	vmov	r3, s0
 80101d4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80101d8:	4313      	orrs	r3, r2
 80101da:	d009      	beq.n	80101f0 <__ieee754_exp+0x40>
 80101dc:	ee10 2a10 	vmov	r2, s0
 80101e0:	462b      	mov	r3, r5
 80101e2:	4620      	mov	r0, r4
 80101e4:	4629      	mov	r1, r5
 80101e6:	f7f0 f8b1 	bl	800034c <__adddf3>
 80101ea:	4604      	mov	r4, r0
 80101ec:	460d      	mov	r5, r1
 80101ee:	e000      	b.n	80101f2 <__ieee754_exp+0x42>
 80101f0:	bb06      	cbnz	r6, 8010234 <__ieee754_exp+0x84>
 80101f2:	ecbd 8b04 	vpop	{d8-d9}
 80101f6:	ec45 4b10 	vmov	d0, r4, r5
 80101fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101fe:	a38a      	add	r3, pc, #552	; (adr r3, 8010428 <__ieee754_exp+0x278>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	ee10 0a10 	vmov	r0, s0
 8010208:	4629      	mov	r1, r5
 801020a:	f7f0 fce5 	bl	8000bd8 <__aeabi_dcmpgt>
 801020e:	b138      	cbz	r0, 8010220 <__ieee754_exp+0x70>
 8010210:	a387      	add	r3, pc, #540	; (adr r3, 8010430 <__ieee754_exp+0x280>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	4610      	mov	r0, r2
 8010218:	4619      	mov	r1, r3
 801021a:	f7f0 fa4d 	bl	80006b8 <__aeabi_dmul>
 801021e:	e7e4      	b.n	80101ea <__ieee754_exp+0x3a>
 8010220:	a385      	add	r3, pc, #532	; (adr r3, 8010438 <__ieee754_exp+0x288>)
 8010222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010226:	4620      	mov	r0, r4
 8010228:	4629      	mov	r1, r5
 801022a:	f7f0 fcb7 	bl	8000b9c <__aeabi_dcmplt>
 801022e:	2800      	cmp	r0, #0
 8010230:	f000 8087 	beq.w	8010342 <__ieee754_exp+0x192>
 8010234:	2400      	movs	r4, #0
 8010236:	2500      	movs	r5, #0
 8010238:	e7db      	b.n	80101f2 <__ieee754_exp+0x42>
 801023a:	4a93      	ldr	r2, [pc, #588]	; (8010488 <__ieee754_exp+0x2d8>)
 801023c:	4293      	cmp	r3, r2
 801023e:	f240 80ac 	bls.w	801039a <__ieee754_exp+0x1ea>
 8010242:	4a92      	ldr	r2, [pc, #584]	; (801048c <__ieee754_exp+0x2dc>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d87c      	bhi.n	8010342 <__ieee754_exp+0x192>
 8010248:	4b91      	ldr	r3, [pc, #580]	; (8010490 <__ieee754_exp+0x2e0>)
 801024a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010252:	ee10 0a10 	vmov	r0, s0
 8010256:	4629      	mov	r1, r5
 8010258:	f7f0 f876 	bl	8000348 <__aeabi_dsub>
 801025c:	4b8d      	ldr	r3, [pc, #564]	; (8010494 <__ieee754_exp+0x2e4>)
 801025e:	00f7      	lsls	r7, r6, #3
 8010260:	443b      	add	r3, r7
 8010262:	ed93 7b00 	vldr	d7, [r3]
 8010266:	f1c6 0a01 	rsb	sl, r6, #1
 801026a:	4680      	mov	r8, r0
 801026c:	4689      	mov	r9, r1
 801026e:	ebaa 0a06 	sub.w	sl, sl, r6
 8010272:	eeb0 8a47 	vmov.f32	s16, s14
 8010276:	eef0 8a67 	vmov.f32	s17, s15
 801027a:	ec53 2b18 	vmov	r2, r3, d8
 801027e:	4640      	mov	r0, r8
 8010280:	4649      	mov	r1, r9
 8010282:	f7f0 f861 	bl	8000348 <__aeabi_dsub>
 8010286:	4604      	mov	r4, r0
 8010288:	460d      	mov	r5, r1
 801028a:	4622      	mov	r2, r4
 801028c:	462b      	mov	r3, r5
 801028e:	4620      	mov	r0, r4
 8010290:	4629      	mov	r1, r5
 8010292:	f7f0 fa11 	bl	80006b8 <__aeabi_dmul>
 8010296:	a36a      	add	r3, pc, #424	; (adr r3, 8010440 <__ieee754_exp+0x290>)
 8010298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029c:	4606      	mov	r6, r0
 801029e:	460f      	mov	r7, r1
 80102a0:	f7f0 fa0a 	bl	80006b8 <__aeabi_dmul>
 80102a4:	a368      	add	r3, pc, #416	; (adr r3, 8010448 <__ieee754_exp+0x298>)
 80102a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102aa:	f7f0 f84d 	bl	8000348 <__aeabi_dsub>
 80102ae:	4632      	mov	r2, r6
 80102b0:	463b      	mov	r3, r7
 80102b2:	f7f0 fa01 	bl	80006b8 <__aeabi_dmul>
 80102b6:	a366      	add	r3, pc, #408	; (adr r3, 8010450 <__ieee754_exp+0x2a0>)
 80102b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102bc:	f7f0 f846 	bl	800034c <__adddf3>
 80102c0:	4632      	mov	r2, r6
 80102c2:	463b      	mov	r3, r7
 80102c4:	f7f0 f9f8 	bl	80006b8 <__aeabi_dmul>
 80102c8:	a363      	add	r3, pc, #396	; (adr r3, 8010458 <__ieee754_exp+0x2a8>)
 80102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ce:	f7f0 f83b 	bl	8000348 <__aeabi_dsub>
 80102d2:	4632      	mov	r2, r6
 80102d4:	463b      	mov	r3, r7
 80102d6:	f7f0 f9ef 	bl	80006b8 <__aeabi_dmul>
 80102da:	a361      	add	r3, pc, #388	; (adr r3, 8010460 <__ieee754_exp+0x2b0>)
 80102dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e0:	f7f0 f834 	bl	800034c <__adddf3>
 80102e4:	4632      	mov	r2, r6
 80102e6:	463b      	mov	r3, r7
 80102e8:	f7f0 f9e6 	bl	80006b8 <__aeabi_dmul>
 80102ec:	4602      	mov	r2, r0
 80102ee:	460b      	mov	r3, r1
 80102f0:	4620      	mov	r0, r4
 80102f2:	4629      	mov	r1, r5
 80102f4:	f7f0 f828 	bl	8000348 <__aeabi_dsub>
 80102f8:	4602      	mov	r2, r0
 80102fa:	460b      	mov	r3, r1
 80102fc:	4606      	mov	r6, r0
 80102fe:	460f      	mov	r7, r1
 8010300:	4620      	mov	r0, r4
 8010302:	4629      	mov	r1, r5
 8010304:	f7f0 f9d8 	bl	80006b8 <__aeabi_dmul>
 8010308:	ec41 0b19 	vmov	d9, r0, r1
 801030c:	f1ba 0f00 	cmp.w	sl, #0
 8010310:	d15d      	bne.n	80103ce <__ieee754_exp+0x21e>
 8010312:	2200      	movs	r2, #0
 8010314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010318:	4630      	mov	r0, r6
 801031a:	4639      	mov	r1, r7
 801031c:	f7f0 f814 	bl	8000348 <__aeabi_dsub>
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	ec51 0b19 	vmov	r0, r1, d9
 8010328:	f7f0 faf0 	bl	800090c <__aeabi_ddiv>
 801032c:	4622      	mov	r2, r4
 801032e:	462b      	mov	r3, r5
 8010330:	f7f0 f80a 	bl	8000348 <__aeabi_dsub>
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	2000      	movs	r0, #0
 801033a:	4957      	ldr	r1, [pc, #348]	; (8010498 <__ieee754_exp+0x2e8>)
 801033c:	f7f0 f804 	bl	8000348 <__aeabi_dsub>
 8010340:	e753      	b.n	80101ea <__ieee754_exp+0x3a>
 8010342:	4856      	ldr	r0, [pc, #344]	; (801049c <__ieee754_exp+0x2ec>)
 8010344:	a348      	add	r3, pc, #288	; (adr r3, 8010468 <__ieee754_exp+0x2b8>)
 8010346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801034e:	4629      	mov	r1, r5
 8010350:	4620      	mov	r0, r4
 8010352:	f7f0 f9b1 	bl	80006b8 <__aeabi_dmul>
 8010356:	e9d6 2300 	ldrd	r2, r3, [r6]
 801035a:	f7ef fff7 	bl	800034c <__adddf3>
 801035e:	f7f0 fc5b 	bl	8000c18 <__aeabi_d2iz>
 8010362:	4682      	mov	sl, r0
 8010364:	f7f0 f93e 	bl	80005e4 <__aeabi_i2d>
 8010368:	a341      	add	r3, pc, #260	; (adr r3, 8010470 <__ieee754_exp+0x2c0>)
 801036a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036e:	4606      	mov	r6, r0
 8010370:	460f      	mov	r7, r1
 8010372:	f7f0 f9a1 	bl	80006b8 <__aeabi_dmul>
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	4620      	mov	r0, r4
 801037c:	4629      	mov	r1, r5
 801037e:	f7ef ffe3 	bl	8000348 <__aeabi_dsub>
 8010382:	a33d      	add	r3, pc, #244	; (adr r3, 8010478 <__ieee754_exp+0x2c8>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	4680      	mov	r8, r0
 801038a:	4689      	mov	r9, r1
 801038c:	4630      	mov	r0, r6
 801038e:	4639      	mov	r1, r7
 8010390:	f7f0 f992 	bl	80006b8 <__aeabi_dmul>
 8010394:	ec41 0b18 	vmov	d8, r0, r1
 8010398:	e76f      	b.n	801027a <__ieee754_exp+0xca>
 801039a:	4a41      	ldr	r2, [pc, #260]	; (80104a0 <__ieee754_exp+0x2f0>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d811      	bhi.n	80103c4 <__ieee754_exp+0x214>
 80103a0:	a323      	add	r3, pc, #140	; (adr r3, 8010430 <__ieee754_exp+0x280>)
 80103a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a6:	ee10 0a10 	vmov	r0, s0
 80103aa:	4629      	mov	r1, r5
 80103ac:	f7ef ffce 	bl	800034c <__adddf3>
 80103b0:	4b39      	ldr	r3, [pc, #228]	; (8010498 <__ieee754_exp+0x2e8>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	f7f0 fc10 	bl	8000bd8 <__aeabi_dcmpgt>
 80103b8:	b138      	cbz	r0, 80103ca <__ieee754_exp+0x21a>
 80103ba:	4b37      	ldr	r3, [pc, #220]	; (8010498 <__ieee754_exp+0x2e8>)
 80103bc:	2200      	movs	r2, #0
 80103be:	4620      	mov	r0, r4
 80103c0:	4629      	mov	r1, r5
 80103c2:	e710      	b.n	80101e6 <__ieee754_exp+0x36>
 80103c4:	f04f 0a00 	mov.w	sl, #0
 80103c8:	e75f      	b.n	801028a <__ieee754_exp+0xda>
 80103ca:	4682      	mov	sl, r0
 80103cc:	e75d      	b.n	801028a <__ieee754_exp+0xda>
 80103ce:	4632      	mov	r2, r6
 80103d0:	463b      	mov	r3, r7
 80103d2:	2000      	movs	r0, #0
 80103d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80103d8:	f7ef ffb6 	bl	8000348 <__aeabi_dsub>
 80103dc:	4602      	mov	r2, r0
 80103de:	460b      	mov	r3, r1
 80103e0:	ec51 0b19 	vmov	r0, r1, d9
 80103e4:	f7f0 fa92 	bl	800090c <__aeabi_ddiv>
 80103e8:	4602      	mov	r2, r0
 80103ea:	460b      	mov	r3, r1
 80103ec:	ec51 0b18 	vmov	r0, r1, d8
 80103f0:	f7ef ffaa 	bl	8000348 <__aeabi_dsub>
 80103f4:	4642      	mov	r2, r8
 80103f6:	464b      	mov	r3, r9
 80103f8:	f7ef ffa6 	bl	8000348 <__aeabi_dsub>
 80103fc:	4602      	mov	r2, r0
 80103fe:	460b      	mov	r3, r1
 8010400:	2000      	movs	r0, #0
 8010402:	4925      	ldr	r1, [pc, #148]	; (8010498 <__ieee754_exp+0x2e8>)
 8010404:	f7ef ffa0 	bl	8000348 <__aeabi_dsub>
 8010408:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801040c:	4592      	cmp	sl, r2
 801040e:	db02      	blt.n	8010416 <__ieee754_exp+0x266>
 8010410:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010414:	e6e9      	b.n	80101ea <__ieee754_exp+0x3a>
 8010416:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801041a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801041e:	2200      	movs	r2, #0
 8010420:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010424:	e6f9      	b.n	801021a <__ieee754_exp+0x6a>
 8010426:	bf00      	nop
 8010428:	fefa39ef 	.word	0xfefa39ef
 801042c:	40862e42 	.word	0x40862e42
 8010430:	8800759c 	.word	0x8800759c
 8010434:	7e37e43c 	.word	0x7e37e43c
 8010438:	d52d3051 	.word	0xd52d3051
 801043c:	c0874910 	.word	0xc0874910
 8010440:	72bea4d0 	.word	0x72bea4d0
 8010444:	3e663769 	.word	0x3e663769
 8010448:	c5d26bf1 	.word	0xc5d26bf1
 801044c:	3ebbbd41 	.word	0x3ebbbd41
 8010450:	af25de2c 	.word	0xaf25de2c
 8010454:	3f11566a 	.word	0x3f11566a
 8010458:	16bebd93 	.word	0x16bebd93
 801045c:	3f66c16c 	.word	0x3f66c16c
 8010460:	5555553e 	.word	0x5555553e
 8010464:	3fc55555 	.word	0x3fc55555
 8010468:	652b82fe 	.word	0x652b82fe
 801046c:	3ff71547 	.word	0x3ff71547
 8010470:	fee00000 	.word	0xfee00000
 8010474:	3fe62e42 	.word	0x3fe62e42
 8010478:	35793c76 	.word	0x35793c76
 801047c:	3dea39ef 	.word	0x3dea39ef
 8010480:	40862e41 	.word	0x40862e41
 8010484:	7fefffff 	.word	0x7fefffff
 8010488:	3fd62e42 	.word	0x3fd62e42
 801048c:	3ff0a2b1 	.word	0x3ff0a2b1
 8010490:	08024798 	.word	0x08024798
 8010494:	080247a8 	.word	0x080247a8
 8010498:	3ff00000 	.word	0x3ff00000
 801049c:	08024788 	.word	0x08024788
 80104a0:	3e2fffff 	.word	0x3e2fffff

080104a4 <__ieee754_sqrtf>:
 80104a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80104a8:	4770      	bx	lr

080104aa <finite>:
 80104aa:	b082      	sub	sp, #8
 80104ac:	ed8d 0b00 	vstr	d0, [sp]
 80104b0:	9801      	ldr	r0, [sp, #4]
 80104b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104ba:	0fc0      	lsrs	r0, r0, #31
 80104bc:	b002      	add	sp, #8
 80104be:	4770      	bx	lr

080104c0 <_init>:
 80104c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c2:	bf00      	nop
 80104c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c6:	bc08      	pop	{r3}
 80104c8:	469e      	mov	lr, r3
 80104ca:	4770      	bx	lr

080104cc <_fini>:
 80104cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ce:	bf00      	nop
 80104d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104d2:	bc08      	pop	{r3}
 80104d4:	469e      	mov	lr, r3
 80104d6:	4770      	bx	lr
