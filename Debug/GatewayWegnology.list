
GatewayWegnology.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010128  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014228  080102b8  080102b8  000202b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080244e0  080244e0  00040264  2**0
                  CONTENTS
  4 .ARM          00000008  080244e0  080244e0  000344e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080244e8  080244e8  00040264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080244e8  080244e8  000344e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080244ec  080244ec  000344ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  080244f0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000884c  20000264  08024754  00040264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008ab0  08024754  00048ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040029  00000000  00000000  00040294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061b4  00000000  00000000  000802bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002758  00000000  00000000  00086478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024a0  00000000  00000000  00088bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce85  00000000  00000000  0008b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029dc3  00000000  00000000  000b7ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001047ac  00000000  00000000  000e1cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e6464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b5a4  00000000  00000000  001e64b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080102a0 	.word	0x080102a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	080102a0 	.word	0x080102a0

080001d0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001d0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001d2:	2b01      	cmp	r3, #1
	IT       LS
 80001d4:	bf98      	it	ls
	BXLS     lr
 80001d6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001dc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001ee:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001f0:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001f2:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001f4:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001fe:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000204:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000208:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800020c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000210:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800021a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800022c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800022e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000230:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800023a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800023c:	2b01      	cmp	r3, #1
	IT       LS
 800023e:	bf98      	it	ls
	BXLS     lr
 8000240:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000246:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000252:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000270:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000276:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800027a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000282:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000284:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000286:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b96e 	b.w	8000ffc <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468c      	mov	ip, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8083 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d947      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b142      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	f1c2 0020 	rsb	r0, r2, #32
 8000d58:	fa24 f000 	lsr.w	r0, r4, r0
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4097      	lsls	r7, r2
 8000d60:	ea40 0c01 	orr.w	ip, r0, r1
 8000d64:	4094      	lsls	r4, r2
 8000d66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d70:	fa1f fe87 	uxth.w	lr, r7
 8000d74:	fb08 c116 	mls	r1, r8, r6, ip
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x60>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 8119 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 8116 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	f080 8105 	bcs.w	8000fc4 <__udivmoddi4+0x28c>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8102 	bls.w	8000fc4 <__udivmoddi4+0x28c>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa0>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d150      	bne.n	8000e8c <__udivmoddi4+0x154>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2601      	movs	r6, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c21      	lsrs	r1, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f200 80e9 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1ac9      	subs	r1, r1, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d9 	bhi.w	8000ff4 <__udivmoddi4+0x2bc>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7bf      	b.n	8000dce <__udivmoddi4+0x96>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x12e>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80b1 	beq.w	8000fba <__udivmoddi4+0x282>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x140>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80b8 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	468c      	mov	ip, r1
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0a8      	beq.n	8000dd8 <__udivmoddi4+0xa0>
 8000e86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e8a:	e7a5      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f603 	lsr.w	r6, r0, r3
 8000e94:	4097      	lsls	r7, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	4330      	orrs	r0, r6
 8000ea2:	0c03      	lsrs	r3, r0, #16
 8000ea4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea8:	fa1f f887 	uxth.w	r8, r7
 8000eac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb06 f108 	mul.w	r1, r6, r8
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec6:	f080 808d 	bcs.w	8000fe4 <__udivmoddi4+0x2ac>
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	f240 808a 	bls.w	8000fe4 <__udivmoddi4+0x2ac>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	443b      	add	r3, r7
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b281      	uxth	r1, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef2:	d273      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d971      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4439      	add	r1, r7
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c6 0c20 	rsb	ip, r6, #32
 8000f08:	fa03 f406 	lsl.w	r4, r3, r6
 8000f0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f10:	431c      	orrs	r4, r3
 8000f12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f22:	431f      	orrs	r7, r3
 8000f24:	0c3b      	lsrs	r3, r7, #16
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fa1f f884 	uxth.w	r8, r4
 8000f2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f36:	fb09 fa08 	mul.w	sl, r9, r8
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f40:	fa00 f306 	lsl.w	r3, r0, r6
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x220>
 8000f46:	1861      	adds	r1, r4, r1
 8000f48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f4c:	d248      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f4e:	458a      	cmp	sl, r1
 8000f50:	d946      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4421      	add	r1, r4
 8000f58:	eba1 010a 	sub.w	r1, r1, sl
 8000f5c:	b2bf      	uxth	r7, r7
 8000f5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f6a:	fb00 f808 	mul.w	r8, r0, r8
 8000f6e:	45b8      	cmp	r8, r7
 8000f70:	d907      	bls.n	8000f82 <__udivmoddi4+0x24a>
 8000f72:	19e7      	adds	r7, r4, r7
 8000f74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f78:	d22e      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d92c      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4427      	add	r7, r4
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	eba7 0708 	sub.w	r7, r7, r8
 8000f8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8e:	454f      	cmp	r7, r9
 8000f90:	46c6      	mov	lr, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	d31a      	bcc.n	8000fcc <__udivmoddi4+0x294>
 8000f96:	d017      	beq.n	8000fc8 <__udivmoddi4+0x290>
 8000f98:	b15d      	cbz	r5, 8000fb2 <__udivmoddi4+0x27a>
 8000f9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000fa2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa6:	40f2      	lsrs	r2, r6
 8000fa8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fac:	40f7      	lsrs	r7, r6
 8000fae:	e9c5 2700 	strd	r2, r7, [r5]
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e70b      	b.n	8000dd8 <__udivmoddi4+0xa0>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0x60>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6fd      	b.n	8000dc4 <__udivmoddi4+0x8c>
 8000fc8:	4543      	cmp	r3, r8
 8000fca:	d2e5      	bcs.n	8000f98 <__udivmoddi4+0x260>
 8000fcc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7df      	b.n	8000f98 <__udivmoddi4+0x260>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e7d2      	b.n	8000f82 <__udivmoddi4+0x24a>
 8000fdc:	4660      	mov	r0, ip
 8000fde:	e78d      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fe0:	4681      	mov	r9, r0
 8000fe2:	e7b9      	b.n	8000f58 <__udivmoddi4+0x220>
 8000fe4:	4666      	mov	r6, ip
 8000fe6:	e775      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	e74a      	b.n	8000e82 <__udivmoddi4+0x14a>
 8000fec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff0:	4439      	add	r1, r7
 8000ff2:	e713      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e724      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ffa:	bf00      	nop

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <Init_Demo>:
 * @brief  Serial message structure definition
 */


uint8_t Init_Demo(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  uint8_t data;

  /* Disable HP filter if needed */
  if (SensorSetting.hp_filter_available == 1)
 8001006:	4b89      	ldr	r3, [pc, #548]	; (800122c <Init_Demo+0x22c>)
 8001008:	7d1b      	ldrb	r3, [r3, #20]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d11a      	bne.n	8001044 <Init_Demo+0x44>
  {
    if (CUSTOM_MOTION_SENSOR_Read_Register(CUSTOM_LSM6DSL_0, LSM6DSL_CTRL8_XL, &data) != BSP_ERROR_NONE)
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	461a      	mov	r2, r3
 8001012:	2117      	movs	r1, #23
 8001014:	2000      	movs	r0, #0
 8001016:	f00a fddf 	bl	800bbd8 <CUSTOM_MOTION_SENSOR_Read_Register>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <Init_Demo+0x24>
    {
      return 0;
 8001020:	2300      	movs	r3, #0
 8001022:	e0fe      	b.n	8001222 <Init_Demo+0x222>
    }

    data &= LSM6DSL_HP_DISABLE;
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f023 0304 	bic.w	r3, r3, #4
 800102a:	b2db      	uxtb	r3, r3
 800102c:	71fb      	strb	r3, [r7, #7]

    if (CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSL_0, LSM6DSL_CTRL8_XL, data) != BSP_ERROR_NONE)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	461a      	mov	r2, r3
 8001032:	2117      	movs	r1, #23
 8001034:	2000      	movs	r0, #0
 8001036:	f00a fdf7 	bl	800bc28 <CUSTOM_MOTION_SENSOR_Write_Register>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <Init_Demo+0x44>
    {
      return 0;
 8001040:	2300      	movs	r3, #0
 8001042:	e0ee      	b.n	8001222 <Init_Demo+0x222>
    }
  }

  /* Turn-on time delay */
  HAL_Delay(40);
 8001044:	2028      	movs	r0, #40	; 0x28
 8001046:	f006 fc87 	bl	8007958 <HAL_Delay>

  if (Enable_DRDY() == 0)
 800104a:	f000 fb81 	bl	8001750 <Enable_DRDY>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <Init_Demo+0x58>
  {
    return 0;
 8001054:	2300      	movs	r3, #0
 8001056:	e0e4      	b.n	8001222 <Init_Demo+0x222>
  }

  GuiSettings.switch_HP_to_DC_null = 0;
 8001058:	4b75      	ldr	r3, [pc, #468]	; (8001230 <Init_Demo+0x230>)
 800105a:	2200      	movs	r2, #0
 800105c:	705a      	strb	r2, [r3, #1]
  GuiSettings.hp_filter = 0;
 800105e:	4b74      	ldr	r3, [pc, #464]	; (8001230 <Init_Demo+0x230>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
  fftIsEnabled = 0;
 8001064:	4b73      	ldr	r3, [pc, #460]	; (8001234 <Init_Demo+0x234>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]

  /* Set parameters for MotionSP library */
  MotionSP_Parameters.FftSize = FFT_SIZE_DEFAULT;
 800106a:	4b73      	ldr	r3, [pc, #460]	; (8001238 <Init_Demo+0x238>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	801a      	strh	r2, [r3, #0]
  MotionSP_Parameters.tau = TAU_DEFAULT;
 8001072:	4b71      	ldr	r3, [pc, #452]	; (8001238 <Init_Demo+0x238>)
 8001074:	2232      	movs	r2, #50	; 0x32
 8001076:	805a      	strh	r2, [r3, #2]
  MotionSP_Parameters.window = WINDOW_DEFAULT;
 8001078:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <Init_Demo+0x238>)
 800107a:	2201      	movs	r2, #1
 800107c:	809a      	strh	r2, [r3, #4]
  MotionSP_Parameters.td_type = TD_DEFAULT;
 800107e:	4b6e      	ldr	r3, [pc, #440]	; (8001238 <Init_Demo+0x238>)
 8001080:	2202      	movs	r2, #2
 8001082:	825a      	strh	r2, [r3, #18]
  MotionSP_Parameters.tacq = TACQ_DEFAULT;
 8001084:	4b6c      	ldr	r3, [pc, #432]	; (8001238 <Init_Demo+0x238>)
 8001086:	f241 3288 	movw	r2, #5000	; 0x1388
 800108a:	829a      	strh	r2, [r3, #20]

  /* Create circular buffer and initialize result variables */
  AccCircBuffer.Size = MotionSP_Parameters.FftSize;
 800108c:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <Init_Demo+0x238>)
 800108e:	881a      	ldrh	r2, [r3, #0]
 8001090:	4b6a      	ldr	r3, [pc, #424]	; (800123c <Init_Demo+0x23c>)
 8001092:	801a      	strh	r2, [r3, #0]
  AccCircBuffer.IdPos = 0;
 8001094:	4b69      	ldr	r3, [pc, #420]	; (800123c <Init_Demo+0x23c>)
 8001096:	2200      	movs	r2, #0
 8001098:	805a      	strh	r2, [r3, #2]
  AccCircBuffer.Ovf = 0;
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <Init_Demo+0x23c>)
 800109c:	2200      	movs	r2, #0
 800109e:	711a      	strb	r2, [r3, #4]

  SpeedCircBuffer.Size = MotionSP_Parameters.FftSize;
 80010a0:	4b65      	ldr	r3, [pc, #404]	; (8001238 <Init_Demo+0x238>)
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b66      	ldr	r3, [pc, #408]	; (8001240 <Init_Demo+0x240>)
 80010a6:	801a      	strh	r2, [r3, #0]
  SpeedCircBuffer.IdPos = 0;
 80010a8:	4b65      	ldr	r3, [pc, #404]	; (8001240 <Init_Demo+0x240>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	805a      	strh	r2, [r3, #2]
  SpeedCircBuffer.Ovf=0;
 80010ae:	4b64      	ldr	r3, [pc, #400]	; (8001240 <Init_Demo+0x240>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	711a      	strb	r2, [r3, #4]

  magSize = MotionSP_Parameters.FftSize / 2;
 80010b4:	4b60      	ldr	r3, [pc, #384]	; (8001238 <Init_Demo+0x238>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b61      	ldr	r3, [pc, #388]	; (8001244 <Init_Demo+0x244>)
 80010be:	801a      	strh	r2, [r3, #0]

  /* Reset circular buffer for storing accelerometer values */
  memset(AccCircBuffer.Data.AXIS_X, 0x00, (AccCircBuffer.Size) * (sizeof(float)));
 80010c0:	4b5e      	ldr	r3, [pc, #376]	; (800123c <Init_Demo+0x23c>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	461a      	mov	r2, r3
 80010c8:	2100      	movs	r1, #0
 80010ca:	485f      	ldr	r0, [pc, #380]	; (8001248 <Init_Demo+0x248>)
 80010cc:	f00c fb4d 	bl	800d76a <memset>
  memset(AccCircBuffer.Data.AXIS_Y, 0x00, (AccCircBuffer.Size) * (sizeof(float)));
 80010d0:	4b5a      	ldr	r3, [pc, #360]	; (800123c <Init_Demo+0x23c>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	461a      	mov	r2, r3
 80010d8:	2100      	movs	r1, #0
 80010da:	485c      	ldr	r0, [pc, #368]	; (800124c <Init_Demo+0x24c>)
 80010dc:	f00c fb45 	bl	800d76a <memset>
  memset(AccCircBuffer.Data.AXIS_Z, 0x00, (AccCircBuffer.Size) * (sizeof(float)));
 80010e0:	4b56      	ldr	r3, [pc, #344]	; (800123c <Init_Demo+0x23c>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	461a      	mov	r2, r3
 80010e8:	2100      	movs	r1, #0
 80010ea:	4859      	ldr	r0, [pc, #356]	; (8001250 <Init_Demo+0x250>)
 80010ec:	f00c fb3d 	bl	800d76a <memset>

  /* Reset circular buffer for storing accelerometer values */
  memset(SpeedCircBuffer.Data.AXIS_X, 0x00, (SpeedCircBuffer.Size) * (sizeof(float)));
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <Init_Demo+0x240>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	461a      	mov	r2, r3
 80010f8:	2100      	movs	r1, #0
 80010fa:	4856      	ldr	r0, [pc, #344]	; (8001254 <Init_Demo+0x254>)
 80010fc:	f00c fb35 	bl	800d76a <memset>
  memset(SpeedCircBuffer.Data.AXIS_Y, 0x00, (SpeedCircBuffer.Size) * (sizeof(float)));
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <Init_Demo+0x240>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	461a      	mov	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	4853      	ldr	r0, [pc, #332]	; (8001258 <Init_Demo+0x258>)
 800110c:	f00c fb2d 	bl	800d76a <memset>
  memset(SpeedCircBuffer.Data.AXIS_Z, 0x00, (SpeedCircBuffer.Size) * (sizeof(float)));
 8001110:	4b4b      	ldr	r3, [pc, #300]	; (8001240 <Init_Demo+0x240>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	461a      	mov	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	4850      	ldr	r0, [pc, #320]	; (800125c <Init_Demo+0x25c>)
 800111c:	f00c fb25 	bl	800d76a <memset>

  /* Reset the TimeDomain parameter values */
  sTimeDomain.AccRms.AXIS_X = 0.0f;
 8001120:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <Init_Demo+0x260>)
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
  sTimeDomain.AccRms.AXIS_Y = 0.0f;
 8001128:	4b4d      	ldr	r3, [pc, #308]	; (8001260 <Init_Demo+0x260>)
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  sTimeDomain.AccRms.AXIS_Z = 0.0f;
 8001130:	4b4b      	ldr	r3, [pc, #300]	; (8001260 <Init_Demo+0x260>)
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  sTimeDomain.AccPeak.AXIS_X = 0.0f;
 8001138:	4b49      	ldr	r3, [pc, #292]	; (8001260 <Init_Demo+0x260>)
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  sTimeDomain.AccPeak.AXIS_Y = 0.0f;
 8001140:	4b47      	ldr	r3, [pc, #284]	; (8001260 <Init_Demo+0x260>)
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
  sTimeDomain.AccPeak.AXIS_Z = 0.0f;
 8001148:	4b45      	ldr	r3, [pc, #276]	; (8001260 <Init_Demo+0x260>)
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  sTimeDomain.SpeedRms.AXIS_X = 0.0f;
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <Init_Demo+0x260>)
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  sTimeDomain.SpeedRms.AXIS_Y = 0.0f;
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <Init_Demo+0x260>)
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  sTimeDomain.SpeedRms.AXIS_Z = 0.0f;
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <Init_Demo+0x260>)
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	615a      	str	r2, [r3, #20]

  /* Reset the counters of the number of sums about the calculation of the average */
  AccSumCnt.AXIS_X = 0;
 8001168:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <Init_Demo+0x264>)
 800116a:	2200      	movs	r2, #0
 800116c:	801a      	strh	r2, [r3, #0]
  AccSumCnt.AXIS_Y = 0;
 800116e:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <Init_Demo+0x264>)
 8001170:	2200      	movs	r2, #0
 8001172:	805a      	strh	r2, [r3, #2]
  AccSumCnt.AXIS_Z = 0;
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <Init_Demo+0x264>)
 8001176:	2200      	movs	r2, #0
 8001178:	809a      	strh	r2, [r3, #4]

  MotionSP_SetWindFiltArray(Filter_Params, MotionSP_Parameters.FftSize, (Filt_Type_t)MotionSP_Parameters.window);
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <Init_Demo+0x238>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <Init_Demo+0x238>)
 8001180:	8892      	ldrh	r2, [r2, #4]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	4619      	mov	r1, r3
 8001186:	4838      	ldr	r0, [pc, #224]	; (8001268 <Init_Demo+0x268>)
 8001188:	f00b fdc6 	bl	800cd18 <MotionSP_SetWindFiltArray>

  /* Reset the flag to enable FFT computation */
  fftIsEnabled = 0;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <Init_Demo+0x234>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]

  arm_rfft_fast_init_f32(&fftS, MotionSP_Parameters.FftSize);
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <Init_Demo+0x238>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	4834      	ldr	r0, [pc, #208]	; (800126c <Init_Demo+0x26c>)
 800119a:	f006 fa87 	bl	80076ac <arm_rfft_fast_init_f32>

  accCircBuffIndexForFft = MotionSP_Parameters.FftSize - 1; /* It is the minimum value to do the first FFT */
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <Init_Demo+0x238>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <Init_Demo+0x270>)
 80011a8:	801a      	strh	r2, [r3, #0]

  /* Enable AXL data to FIFO with no decimation */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, LSM6DSL_FIFO_XL_NO_DEC) != BSP_ERROR_NONE)
 80011aa:	2201      	movs	r2, #1
 80011ac:	2102      	movs	r1, #2
 80011ae:	2000      	movs	r0, #0
 80011b0:	f00a fd8a 	bl	800bcc8 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <Init_Demo+0x1be>
  {
    return 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e031      	b.n	8001222 <Init_Demo+0x222>
  }

  /* Set FIFO ODR to highest value */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value(CUSTOM_LSM6DSL_0, 6660.0f) != BSP_ERROR_NONE)
 80011be:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001274 <Init_Demo+0x274>
 80011c2:	2000      	movs	r0, #0
 80011c4:	f00a fdca 	bl	800bd5c <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <Init_Demo+0x1d2>
  {
    return 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e027      	b.n	8001222 <Init_Demo+0x222>
  }

  /* Set FIFO watermark level */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level(CUSTOM_LSM6DSL_0, (MotionSP_Parameters.FftSize + 1) * 3) != BSP_ERROR_NONE)
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <Init_Demo+0x238>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b29b      	uxth	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	0052      	lsls	r2, r2, #1
 80011de:	4413      	add	r3, r2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	2000      	movs	r0, #0
 80011e6:	f00a fe31 	bl	800be4c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <Init_Demo+0x1f4>
  {
    return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e016      	b.n	8001222 <Init_Demo+0x222>
  }

  /* Set FIFO to stop on FIFO threshold */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(CUSTOM_LSM6DSL_0, PROPERTY_ENABLE) != BSP_ERROR_NONE)
 80011f4:	2101      	movs	r1, #1
 80011f6:	2000      	movs	r0, #0
 80011f8:	f00a fe50 	bl	800be9c <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <Init_Demo+0x206>
  {
    return 0;
 8001202:	2300      	movs	r3, #0
 8001204:	e00d      	b.n	8001222 <Init_Demo+0x222>
  }

  if (SensorSetting.hp_filter_available == 0)
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <Init_Demo+0x22c>)
 8001208:	7d1b      	ldrb	r3, [r3, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <Init_Demo+0x212>
  {
    HP_DC_Changer();
 800120e:	f000 fa59 	bl	80016c4 <HP_DC_Changer>
  }

  /* Measure and calculate ODR */
  if (Meas_Odr() == 0)
 8001212:	f000 f831 	bl	8001278 <Meas_Odr>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <Init_Demo+0x220>
  {
    return 0;
 800121c:	2300      	movs	r3, #0
 800121e:	e000      	b.n	8001222 <Init_Demo+0x222>
  }

  return 1;
 8001220:	2301      	movs	r3, #1
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	08010410 	.word	0x08010410
 8001230:	20000284 	.word	0x20000284
 8001234:	2000723c 	.word	0x2000723c
 8001238:	200059b4 	.word	0x200059b4
 800123c:	200059d0 	.word	0x200059d0
 8001240:	2000728c 	.word	0x2000728c
 8001244:	20000394 	.word	0x20000394
 8001248:	200059d8 	.word	0x200059d8
 800124c:	200061d8 	.word	0x200061d8
 8001250:	200069d8 	.word	0x200069d8
 8001254:	20007294 	.word	0x20007294
 8001258:	20007a94 	.word	0x20007a94
 800125c:	20008294 	.word	0x20008294
 8001260:	200071d8 	.word	0x200071d8
 8001264:	20004d94 	.word	0x20004d94
 8001268:	20004578 	.word	0x20004578
 800126c:	20004d9c 	.word	0x20004d9c
 8001270:	20004550 	.word	0x20004550
 8001274:	45d02000 	.word	0x45d02000

08001278 <Meas_Odr>:
 * @brief  Measure accelerometer real ODR
 * @param  None
 * @retval 1 in case of success 0 otherwise
 */
static uint8_t Meas_Odr(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
  uint8_t  odr_meas_enable = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
  uint16_t odr_meas_iter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	81bb      	strh	r3, [r7, #12]
  uint16_t odr_meas_start_time = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	817b      	strh	r3, [r7, #10]
  uint16_t odr_meas_stop_time = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	813b      	strh	r3, [r7, #8]
  uint16_t odr_meas_samples = 150; /* number of measured samples for calculating ODR */
 800128e:	2396      	movs	r3, #150	; 0x96
 8001290:	80fb      	strh	r3, [r7, #6]
  uint32_t start = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]

  if (!Disable_FIFO())
 8001296:	f000 f9fd 	bl	8001694 <Disable_FIFO>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <Meas_Odr+0x2c>
  {
    return 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e0c5      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  /* Set DRDY pulsed mode */
  if (CUSTOM_MOTION_SENSOR_DRDY_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_DRDY_PULSED) != BSP_ERROR_NONE)
 80012a4:	2101      	movs	r1, #1
 80012a6:	2000      	movs	r0, #0
 80012a8:	f00a feb4 	bl	800c014 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <Meas_Odr+0x3e>
  {
    return 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e0bc      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  if (!Enable_DRDY())
 80012b6:	f000 fa4b 	bl	8001750 <Enable_DRDY>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <Meas_Odr+0x4c>
  {
    return 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e0b5      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  start = HAL_GetTick();
 80012c4:	f006 fb3c 	bl	8007940 <HAL_GetTick>
 80012c8:	6038      	str	r0, [r7, #0]

  while (odr_meas_enable)
 80012ca:	e032      	b.n	8001332 <Meas_Odr+0xba>
  {
    if (((HAL_GetTick() - start) > 1000))
 80012cc:	f006 fb38 	bl	8007940 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012da:	d901      	bls.n	80012e0 <Meas_Odr+0x68>
    {
      return 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	e0a7      	b.n	8001430 <Meas_Odr+0x1b8>
    }

    if (AccIntReceived)
 80012e0:	4b55      	ldr	r3, [pc, #340]	; (8001438 <Meas_Odr+0x1c0>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d023      	beq.n	8001332 <Meas_Odr+0xba>
    {
      AccIntReceived = 0;
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <Meas_Odr+0x1c0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]

      /* Get start time */
      if (odr_meas_iter == 0)
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d107      	bne.n	8001306 <Meas_Odr+0x8e>
      {
        IntCurrentTime1 = HAL_GetTick();
 80012f6:	f006 fb23 	bl	8007940 <HAL_GetTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <Meas_Odr+0x1c4>)
 80012fe:	6013      	str	r3, [r2, #0]
        odr_meas_start_time = IntCurrentTime1;
 8001300:	4b4e      	ldr	r3, [pc, #312]	; (800143c <Meas_Odr+0x1c4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	817b      	strh	r3, [r7, #10]
      }

      /* Get stop time */
      if (odr_meas_iter == odr_meas_samples - 1)
 8001306:	89ba      	ldrh	r2, [r7, #12]
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	3b01      	subs	r3, #1
 800130c:	429a      	cmp	r2, r3
 800130e:	d109      	bne.n	8001324 <Meas_Odr+0xac>
      {
        IntCurrentTime2 = HAL_GetTick();
 8001310:	f006 fb16 	bl	8007940 <HAL_GetTick>
 8001314:	4603      	mov	r3, r0
 8001316:	4a4a      	ldr	r2, [pc, #296]	; (8001440 <Meas_Odr+0x1c8>)
 8001318:	6013      	str	r3, [r2, #0]
        odr_meas_stop_time = IntCurrentTime2;
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <Meas_Odr+0x1c8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	813b      	strh	r3, [r7, #8]
        odr_meas_enable = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
      }

      /* Stop after measuring "odr_meas_samples" values */
      if (odr_meas_iter < odr_meas_samples)
 8001324:	89ba      	ldrh	r2, [r7, #12]
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	429a      	cmp	r2, r3
 800132a:	d202      	bcs.n	8001332 <Meas_Odr+0xba>
      {
        odr_meas_iter++;
 800132c:	89bb      	ldrh	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	81bb      	strh	r3, [r7, #12]
  while (odr_meas_enable)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1c9      	bne.n	80012cc <Meas_Odr+0x54>
      }
    }
  }

  /* Calculate measured ODR */
  AcceleroODR.Frequency = ((float)(1000 * odr_meas_samples) / (odr_meas_stop_time - odr_meas_start_time));
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800134a:	893a      	ldrh	r2, [r7, #8]
 800134c:	897b      	ldrh	r3, [r7, #10]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <Meas_Odr+0x1cc>)
 800135e:	edc3 7a00 	vstr	s15, [r3]

  if (AcceleroODR.Frequency != 0)
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <Meas_Odr+0x1cc>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	eef5 7a40 	vcmp.f32	s15, #0.0
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d009      	beq.n	8001386 <Meas_Odr+0x10e>
  {
    AcceleroODR.Period = 1 / AcceleroODR.Frequency;
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <Meas_Odr+0x1cc>)
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800137c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <Meas_Odr+0x1cc>)
 8001382:	edc3 7a01 	vstr	s15, [r3, #4]
  }

  AcceleroODR.Tau = exp(-(float)(1000 * AcceleroODR.Period) / MotionSP_Parameters.tau);
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <Meas_Odr+0x1cc>)
 8001388:	edd3 7a01 	vldr	s15, [r3, #4]
 800138c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001448 <Meas_Odr+0x1d0>
 8001390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001394:	eeb1 7a67 	vneg.f32	s14, s15
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <Meas_Odr+0x1d4>)
 800139a:	885b      	ldrh	r3, [r3, #2]
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013a8:	ee16 0a90 	vmov	r0, s13
 80013ac:	f7ff f92c 	bl	8000608 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	ec43 2b10 	vmov	d0, r2, r3
 80013b8:	f00e fd76 	bl	800fea8 <exp>
 80013bc:	ec53 2b10 	vmov	r2, r3, d0
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fc50 	bl	8000c68 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <Meas_Odr+0x1cc>)
 80013cc:	6093      	str	r3, [r2, #8]

  /* Disable accelerometer to avoid interrupt conflicts on highest ODRs */
  if (CUSTOM_MOTION_SENSOR_Disable(CUSTOM_LSM6DSL_0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 80013ce:	2102      	movs	r1, #2
 80013d0:	2000      	movs	r0, #0
 80013d2:	f00a fa35 	bl	800b840 <CUSTOM_MOTION_SENSOR_Disable>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <Meas_Odr+0x168>
  {
    return 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	e027      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  if (!Disable_DRDY())
 80013e0:	f000 f9d8 	bl	8001794 <Disable_DRDY>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <Meas_Odr+0x176>
  {
    return 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e020      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  /* Set DRDY latched mode */
  if (CUSTOM_MOTION_SENSOR_DRDY_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_DRDY_LATCHED) != BSP_ERROR_NONE)
 80013ee:	2100      	movs	r1, #0
 80013f0:	2000      	movs	r0, #0
 80013f2:	f00a fe0f 	bl	800c014 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <Meas_Odr+0x188>
  {
    return 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e017      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  /* Enable accelerometer */
  if (CUSTOM_MOTION_SENSOR_Enable(CUSTOM_LSM6DSL_0, MOTION_ACCELERO) != BSP_ERROR_NONE)
 8001400:	2102      	movs	r1, #2
 8001402:	2000      	movs	r0, #0
 8001404:	f00a f9da 	bl	800b7bc <CUSTOM_MOTION_SENSOR_Enable>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <Meas_Odr+0x19a>
  {
    return 0;
 800140e:	2300      	movs	r3, #0
 8001410:	e00e      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  /* Enable FIFO full flag interrupt */
  if (!Enable_FIFO())
 8001412:	f000 f931 	bl	8001678 <Enable_FIFO>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <Meas_Odr+0x1a8>
  {
    return 0;
 800141c:	2300      	movs	r3, #0
 800141e:	e007      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  if (!Restart_FIFO())
 8001420:	f000 f816 	bl	8001450 <Restart_FIFO>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <Meas_Odr+0x1b6>
  {
    return 0;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <Meas_Odr+0x1b8>
  }

  return 1;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000280 	.word	0x20000280
 800143c:	20000288 	.word	0x20000288
 8001440:	2000028c 	.word	0x2000028c
 8001444:	20008a94 	.word	0x20008a94
 8001448:	447a0000 	.word	0x447a0000
 800144c:	200059b4 	.word	0x200059b4

08001450 <Restart_FIFO>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
uint8_t Restart_FIFO(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  AccIntReceived = 0;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <Restart_FIFO+0x34>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]

  /* FIFO Bypass Mode */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_BYPASS_MODE) != BSP_ERROR_NONE)
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f00a fd45 	bl	800beec <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <Restart_FIFO+0x1c>
  {
    return 0;
 8001468:	2300      	movs	r3, #0
 800146a:	e009      	b.n	8001480 <Restart_FIFO+0x30>
  }

  /* FIFO Mode*/
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_FIFO_MODE) != BSP_ERROR_NONE)
 800146c:	2101      	movs	r1, #1
 800146e:	2000      	movs	r0, #0
 8001470:	f00a fd3c 	bl	800beec <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <Restart_FIFO+0x2e>
  {
    return 0;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <Restart_FIFO+0x30>
  }

  return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000280 	.word	0x20000280

08001488 <Collect_Data>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 otherwise
  */
uint8_t Collect_Data(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
  uint16_t pattern;
  uint16_t samples_in_fifo = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	83bb      	strh	r3, [r7, #28]
  int32_t acceleration;
  uint32_t start = HAL_GetTick();
 8001492:	f006 fa55 	bl	8007940 <HAL_GetTick>
 8001496:	6238      	str	r0, [r7, #32]
  SensorVal_f_t single_data;
  SensorVal_f_t single_data_no_dc;
  uint8_t exit_cond = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  //printf("FinishAvgFlag = %d, fftIsEnabled = %d, AccIntReceived = %d\n",FinishAvgFlag, fftIsEnabled, AccIntReceived);
  if (FinishAvgFlag == 0 && fftIsEnabled == 0 && AccIntReceived == 1)
 800149e:	4b6a      	ldr	r3, [pc, #424]	; (8001648 <Collect_Data+0x1c0>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 80c5 	bne.w	8001632 <Collect_Data+0x1aa>
 80014a8:	4b68      	ldr	r3, [pc, #416]	; (800164c <Collect_Data+0x1c4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 80c0 	bne.w	8001632 <Collect_Data+0x1aa>
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <Collect_Data+0x1c8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	f040 80ba 	bne.w	8001632 <Collect_Data+0x1aa>
  {
    AccIntReceived = 0;
 80014be:	4b64      	ldr	r3, [pc, #400]	; (8001650 <Collect_Data+0x1c8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]

    CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples(CUSTOM_LSM6DSL_0, &samples_in_fifo);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	2000      	movs	r0, #0
 80014cc:	f00a fbd6 	bl	800bc7c <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples>

    if ((samples_in_fifo / 3U) < MotionSP_Parameters.FftSize)
 80014d0:	8bbb      	ldrh	r3, [r7, #28]
 80014d2:	4a60      	ldr	r2, [pc, #384]	; (8001654 <Collect_Data+0x1cc>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <Collect_Data+0x1d0>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f080 809a 	bcs.w	800161a <Collect_Data+0x192>
    {
      Restart_FIFO();
 80014e6:	f7ff ffb3 	bl	8001450 <Restart_FIFO>
      return 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e0a2      	b.n	8001634 <Collect_Data+0x1ac>
    }

    while (fftIsEnabled == 0)
    {
      if (((HAL_GetTick() - start) > 6000))
 80014ee:	f006 fa27 	bl	8007940 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d903      	bls.n	8001508 <Collect_Data+0x80>
      {
        Restart_FIFO();
 8001500:	f7ff ffa6 	bl	8001450 <Restart_FIFO>
        return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e095      	b.n	8001634 <Collect_Data+0x1ac>
      }

      CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern(CUSTOM_LSM6DSL_0, &pattern);
 8001508:	f107 031e 	add.w	r3, r7, #30
 800150c:	4619      	mov	r1, r3
 800150e:	2000      	movs	r0, #0
 8001510:	f00a fd14 	bl	800bf3c <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern>
      CUSTOM_MOTION_SENSOR_FIFO_Get_Axis(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, &acceleration);
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	461a      	mov	r2, r3
 800151a:	2102      	movs	r1, #2
 800151c:	2000      	movs	r0, #0
 800151e:	f00a fd33 	bl	800bf88 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis>
      //printf("pattern: %d\n",pattern);
      switch (pattern)
 8001522:	8bfb      	ldrh	r3, [r7, #30]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d016      	beq.n	8001556 <Collect_Data+0xce>
 8001528:	2b02      	cmp	r3, #2
 800152a:	dc6c      	bgt.n	8001606 <Collect_Data+0x17e>
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <Collect_Data+0xae>
 8001530:	2b01      	cmp	r3, #1
 8001532:	d008      	beq.n	8001546 <Collect_Data+0xbe>
 8001534:	e067      	b.n	8001606 <Collect_Data+0x17e>
      {
        case X_AXIS:
          single_data.AXIS_X = (float)acceleration;
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	edc7 7a03 	vstr	s15, [r7, #12]
          break;
 8001544:	e063      	b.n	800160e <Collect_Data+0x186>

        case Y_AXIS:
          single_data.AXIS_Y = (float)acceleration;
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001550:	edc7 7a04 	vstr	s15, [r7, #16]
          break;
 8001554:	e05b      	b.n	800160e <Collect_Data+0x186>

        case Z_AXIS:
          single_data.AXIS_Z = (float)acceleration;
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001560:	edc7 7a05 	vstr	s15, [r7, #20]

          /* Remove DC offset */
          MotionSP_accDelOffset(&single_data_no_dc, &single_data, DC_SMOOTH, RestartFlag);
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <Collect_Data+0x1d4>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b29a      	uxth	r2, r3
 800156a:	f107 010c 	add.w	r1, r7, #12
 800156e:	463b      	mov	r3, r7
 8001570:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001660 <Collect_Data+0x1d8>
 8001574:	4618      	mov	r0, r3
 8001576:	f00b f965 	bl	800c844 <MotionSP_accDelOffset>

          /* Fill the accelero circular buffer */
          MotionSP_CreateAccCircBuffer(&AccCircBuffer, single_data_no_dc);
 800157a:	edd7 6a00 	vldr	s13, [r7]
 800157e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001582:	edd7 7a02 	vldr	s15, [r7, #8]
 8001586:	eeb0 0a66 	vmov.f32	s0, s13
 800158a:	eef0 0a47 	vmov.f32	s1, s14
 800158e:	eeb0 1a67 	vmov.f32	s2, s15
 8001592:	4834      	ldr	r0, [pc, #208]	; (8001664 <Collect_Data+0x1dc>)
 8001594:	f00b f9f2 	bl	800c97c <MotionSP_CreateAccCircBuffer>

          /* TIME DOMAIN ANALYSIS: Speed RMS Moving AVERAGE */
         MotionSP_evalSpeedFromAccelero(&SpeedTimeDomain, &AccCircBuffer, RestartFlag);
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <Collect_Data+0x1d4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4931      	ldr	r1, [pc, #196]	; (8001664 <Collect_Data+0x1dc>)
 80015a0:	4831      	ldr	r0, [pc, #196]	; (8001668 <Collect_Data+0x1e0>)
 80015a2:	f00a fe1d 	bl	800c1e0 <MotionSP_evalSpeedFromAccelero>
              // Delete the Speed DC components
         MotionSP_speedDelOffset(&SpeedTimeDomain_noDC, &SpeedTimeDomain, DC_SMOOTH, RestartFlag);
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <Collect_Data+0x1d4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8001640 <Collect_Data+0x1b8>
 80015b0:	492d      	ldr	r1, [pc, #180]	; (8001668 <Collect_Data+0x1e0>)
 80015b2:	482e      	ldr	r0, [pc, #184]	; (800166c <Collect_Data+0x1e4>)
 80015b4:	f00a fd78 	bl	800c0a8 <MotionSP_speedDelOffset>

          MotionSP_CreateAccCircBuffer(&SpeedCircBuffer, SpeedTimeDomain);
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <Collect_Data+0x1e0>)
 80015ba:	edd3 6a00 	vldr	s13, [r3]
 80015be:	ed93 7a01 	vldr	s14, [r3, #4]
 80015c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015c6:	eeb0 0a66 	vmov.f32	s0, s13
 80015ca:	eef0 0a47 	vmov.f32	s1, s14
 80015ce:	eeb0 1a67 	vmov.f32	s2, s15
 80015d2:	4827      	ldr	r0, [pc, #156]	; (8001670 <Collect_Data+0x1e8>)
 80015d4:	f00b f9d2 	bl	800c97c <MotionSP_CreateAccCircBuffer>

          if (AccCircBuffer.Ovf == 1)
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <Collect_Data+0x1dc>)
 80015da:	791b      	ldrb	r3, [r3, #4]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <Collect_Data+0x164>
          {
            fftIsEnabled = 1;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <Collect_Data+0x1c4>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
            AccCircBuffer.Ovf = 0;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <Collect_Data+0x1dc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	711a      	strb	r2, [r3, #4]
          }

          MotionSP_TimeDomainProcess(&sTimeDomain, (Td_Type_t)MotionSP_Parameters.td_type, RestartFlag);
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <Collect_Data+0x1d0>)
 80015ee:	8a5b      	ldrh	r3, [r3, #18]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4a1a      	ldr	r2, [pc, #104]	; (800165c <Collect_Data+0x1d4>)
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	481e      	ldr	r0, [pc, #120]	; (8001674 <Collect_Data+0x1ec>)
 80015fa:	f00b fa15 	bl	800ca28 <MotionSP_TimeDomainProcess>
//          MotionSP_FillSpeedCircBuffer();
          RestartFlag = 0;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <Collect_Data+0x1d4>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
          break;
 8001604:	e003      	b.n	800160e <Collect_Data+0x186>

        default:
          exit_cond = 1;
 8001606:	2301      	movs	r3, #1
 8001608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800160c:	bf00      	nop
      }

      if (exit_cond)
 800160e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <Collect_Data+0x192>
      {
        return 0;
 8001616:	2300      	movs	r3, #0
 8001618:	e00c      	b.n	8001634 <Collect_Data+0x1ac>
    while (fftIsEnabled == 0)
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <Collect_Data+0x1c4>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f43f af65 	beq.w	80014ee <Collect_Data+0x66>
      }
    }

    if (!Restart_FIFO())
 8001624:	f7ff ff14 	bl	8001450 <Restart_FIFO>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <Collect_Data+0x1aa>
    {
      return 0;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <Collect_Data+0x1ac>
    }
  }

  return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	f3af 8000 	nop.w
 8001640:	40000000 	.word	0x40000000
 8001644:	3fef3333 	.word	0x3fef3333
 8001648:	20007288 	.word	0x20007288
 800164c:	2000723c 	.word	0x2000723c
 8001650:	20000280 	.word	0x20000280
 8001654:	aaaaaaab 	.word	0xaaaaaaab
 8001658:	200059b4 	.word	0x200059b4
 800165c:	20000000 	.word	0x20000000
 8001660:	3f79999a 	.word	0x3f79999a
 8001664:	200059d0 	.word	0x200059d0
 8001668:	20007230 	.word	0x20007230
 800166c:	20007240 	.word	0x20007240
 8001670:	2000728c 	.word	0x2000728c
 8001674:	200071d8 	.word	0x200071d8

08001678 <Enable_FIFO>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
static uint8_t Enable_FIFO(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Enable FIFO full flag interrupt */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(CUSTOM_LSM6DSL_0, PROPERTY_ENABLE) != BSP_ERROR_NONE)
 800167c:	2101      	movs	r1, #1
 800167e:	2000      	movs	r0, #0
 8001680:	f00a fb94 	bl	800bdac <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <Enable_FIFO+0x16>
  {
    return 0;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <Enable_FIFO+0x18>
  }

  return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}

08001694 <Disable_FIFO>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
static uint8_t Disable_FIFO(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Set FIFO to bypass mode */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(CUSTOM_LSM6DSL_0, LSM6DSL_BYPASS_MODE) != BSP_ERROR_NONE)
 8001698:	2100      	movs	r1, #0
 800169a:	2000      	movs	r0, #0
 800169c:	f00a fc26 	bl	800beec <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <Disable_FIFO+0x16>
  {
    return 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e009      	b.n	80016be <Disable_FIFO+0x2a>
  }

  /* Disable FIFO full flag interrupt */
  if (CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(CUSTOM_LSM6DSL_0, PROPERTY_DISABLE) != BSP_ERROR_NONE)
 80016aa:	2100      	movs	r1, #0
 80016ac:	2000      	movs	r0, #0
 80016ae:	f00a fb7d 	bl	800bdac <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <Disable_FIFO+0x28>
  {
    return 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e000      	b.n	80016be <Disable_FIFO+0x2a>
  }

  return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HP_DC_Changer>:
 * @brief  Changes HP to DCnull and vice versa in main menu options
 * @param  None
 * @retval void
 */
static void HP_DC_Changer(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  uint8_t ret_err = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data;

  if (GuiSettings.switch_HP_to_DC_null)
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HP_DC_Changer+0x80>)
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <HP_DC_Changer+0x20>
  {
    GuiSettings.switch_HP_to_DC_null = 0;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HP_DC_Changer+0x80>)
 80016d8:	2200      	movs	r2, #0
 80016da:	705a      	strb	r2, [r3, #1]
    GuiSettings.hp_filter = 0;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HP_DC_Changer+0x80>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
      GuiSettings.switch_HP_to_DC_null = 1;
      GuiSettings.hp_filter = 0;
      fftIsEnabled = 0;
    }
  }
}
 80016e2:	e02a      	b.n	800173a <HP_DC_Changer+0x76>
    if (SensorSetting.hp_filter_available)
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HP_DC_Changer+0x84>)
 80016e6:	7d1b      	ldrb	r3, [r3, #20]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01a      	beq.n	8001722 <HP_DC_Changer+0x5e>
      if (CUSTOM_MOTION_SENSOR_Read_Register(CUSTOM_LSM6DSL_0, LSM6DSL_CTRL8_XL, &data) != BSP_ERROR_NONE)
 80016ec:	1dbb      	adds	r3, r7, #6
 80016ee:	461a      	mov	r2, r3
 80016f0:	2117      	movs	r1, #23
 80016f2:	2000      	movs	r0, #0
 80016f4:	f00a fa70 	bl	800bbd8 <CUSTOM_MOTION_SENSOR_Read_Register>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HP_DC_Changer+0x3e>
        ret_err = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	71fb      	strb	r3, [r7, #7]
      data &= LSM6DSL_HP_DISABLE;
 8001702:	79bb      	ldrb	r3, [r7, #6]
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	b2db      	uxtb	r3, r3
 800170a:	71bb      	strb	r3, [r7, #6]
      if (CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSL_0, LSM6DSL_CTRL8_XL, data) != BSP_ERROR_NONE)
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	461a      	mov	r2, r3
 8001710:	2117      	movs	r1, #23
 8001712:	2000      	movs	r0, #0
 8001714:	f00a fa88 	bl	800bc28 <CUSTOM_MOTION_SENSOR_Write_Register>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HP_DC_Changer+0x5e>
        ret_err = 1;
 800171e:	2301      	movs	r3, #1
 8001720:	71fb      	strb	r3, [r7, #7]
    if (ret_err == 0)
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d108      	bne.n	800173a <HP_DC_Changer+0x76>
      GuiSettings.switch_HP_to_DC_null = 1;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HP_DC_Changer+0x80>)
 800172a:	2201      	movs	r2, #1
 800172c:	705a      	strb	r2, [r3, #1]
      GuiSettings.hp_filter = 0;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HP_DC_Changer+0x80>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
      fftIsEnabled = 0;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HP_DC_Changer+0x88>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000284 	.word	0x20000284
 8001748:	08010410 	.word	0x08010410
 800174c:	2000723c 	.word	0x2000723c

08001750 <Enable_DRDY>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
static uint8_t Enable_DRDY(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
  CUSTOM_MOTION_SENSOR_AxesRaw_t axes;

  AccIntReceived = 0;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <Enable_DRDY+0x40>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]

  /* Enable DRDY */

  if ( CUSTOM_MOTION_SENSOR_Set_INT1_DRDY(CUSTOM_LSM6DSL_0, ENABLE) != BSP_ERROR_NONE)
 800175c:	2101      	movs	r1, #1
 800175e:	2000      	movs	r0, #0
 8001760:	f00a fb4c 	bl	800bdfc <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <Enable_DRDY+0x1e>
  {
    return 0;
 800176a:	2300      	movs	r3, #0
 800176c:	e00b      	b.n	8001786 <Enable_DRDY+0x36>
  }

  /* Clear DRDY */
  if (CUSTOM_MOTION_SENSOR_GetAxesRaw(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE)
 800176e:	463b      	mov	r3, r7
 8001770:	461a      	mov	r2, r3
 8001772:	2102      	movs	r1, #2
 8001774:	2000      	movs	r0, #0
 8001776:	f00a f8a5 	bl	800b8c4 <CUSTOM_MOTION_SENSOR_GetAxesRaw>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <Enable_DRDY+0x34>
  {
    return 0;
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <Enable_DRDY+0x36>
  }

  return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000280 	.word	0x20000280

08001794 <Disable_DRDY>:
  * @param  None
  * @retval 1 in case of success
  * @retval 0 in case of failure
  */
static uint8_t Disable_DRDY(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Disable DRDY */
  if (CUSTOM_MOTION_SENSOR_Set_INT1_DRDY(CUSTOM_LSM6DSL_0, DISABLE) != BSP_ERROR_NONE)
 8001798:	2100      	movs	r1, #0
 800179a:	2000      	movs	r0, #0
 800179c:	f00a fb2e 	bl	800bdfc <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <Disable_DRDY+0x16>
  {
    return 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <Disable_DRDY+0x18>
  }

  return 1;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
void Init_Sensors(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSL_0, MOTION_ACCELERO);
 80017b4:	2102      	movs	r1, #2
 80017b6:	2000      	movs	r0, #0
 80017b8:	f009 ff78 	bl	800b6ac <CUSTOM_MOTION_SENSOR_Init>

  /* Set accelerometer:
   *   - ODR >= 416Hz
   *   - FS   = <-2g, 2g>
   */
  (void)CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, LSM6DSL_DEFAULT_ODR);
 80017bc:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80017dc <Init_Sensors+0x2c>
 80017c0:	2102      	movs	r1, #2
 80017c2:	2000      	movs	r0, #0
 80017c4:	f00a f8c2 	bl	800b94c <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
  (void)CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_LSM6DSL_0, MOTION_ACCELERO, LSM6DSL_DEFAULT_FS);
 80017c8:	2202      	movs	r2, #2
 80017ca:	2102      	movs	r1, #2
 80017cc:	2000      	movs	r0, #0
 80017ce:	f00a f903 	bl	800b9d8 <CUSTOM_MOTION_SENSOR_SetFullScale>
  set_mems_int_pin_a_exti();
 80017d2:	f009 ff3d 	bl	800b650 <set_mems_int_pin_a_exti>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	43d08000 	.word	0x43d08000

080017e0 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <MX_DFSDM1_Init+0x68>)
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <MX_DFSDM1_Init+0x6c>)
 80017e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_DFSDM1_Init+0x68>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_DFSDM1_Init+0x68>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_DFSDM1_Init+0x68>)
 80017f8:	2202      	movs	r2, #2
 80017fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_DFSDM1_Init+0x68>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_DFSDM1_Init+0x68>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_DFSDM1_Init+0x68>)
 800180a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <MX_DFSDM1_Init+0x68>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_DFSDM1_Init+0x68>)
 8001818:	2204      	movs	r2, #4
 800181a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <MX_DFSDM1_Init+0x68>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_DFSDM1_Init+0x68>)
 8001824:	2201      	movs	r2, #1
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_DFSDM1_Init+0x68>)
 800182a:	2200      	movs	r2, #0
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_DFSDM1_Init+0x68>)
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_DFSDM1_Init+0x68>)
 8001836:	f006 f9f7 	bl	8007c28 <HAL_DFSDM_ChannelInit>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001840:	f000 fc70 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200043f0 	.word	0x200043f0
 800184c:	40016020 	.word	0x40016020

08001850 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0ac      	sub	sp, #176	; 0xb0
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2288      	movs	r2, #136	; 0x88
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f00b ff7a 	bl	800d76a <memset>
  if(DFSDM1_Init == 0)
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d142      	bne.n	8001904 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800187e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001882:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4618      	mov	r0, r3
 8001890:	f008 fa56 	bl	8009d40 <HAL_RCCEx_PeriphCLKConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800189a:	f000 fc43 	bl	8002124 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80018a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a8:	6613      	str	r3, [r2, #96]	; 0x60
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	4a15      	ldr	r2, [pc, #84]	; (8001910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80018bc:	f043 0310 	orr.w	r3, r3, #16
 80018c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80018ce:	f44f 7320 	mov.w	r3, #640	; 0x280
 80018d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018e8:	2306      	movs	r3, #6
 80018ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f2:	4619      	mov	r1, r3
 80018f4:	4807      	ldr	r0, [pc, #28]	; (8001914 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80018f6:	f006 fb01 	bl	8007efc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a02      	ldr	r2, [pc, #8]	; (800190c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001902:	6013      	str	r3, [r2, #0]
  }
}
 8001904:	bf00      	nop
 8001906:	37b0      	adds	r7, #176	; 0xb0
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000290 	.word	0x20000290
 8001910:	40021000 	.word	0x40021000
 8001914:	48001000 	.word	0x48001000

08001918 <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800192e:	4bbb      	ldr	r3, [pc, #748]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4aba      	ldr	r2, [pc, #744]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4bb8      	ldr	r3, [pc, #736]	; (8001c1c <MX_GPIO_Init+0x304>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	4bb5      	ldr	r3, [pc, #724]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4ab4      	ldr	r2, [pc, #720]	; (8001c1c <MX_GPIO_Init+0x304>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4bb2      	ldr	r3, [pc, #712]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4baf      	ldr	r3, [pc, #700]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4aae      	ldr	r2, [pc, #696]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4bac      	ldr	r3, [pc, #688]	; (8001c1c <MX_GPIO_Init+0x304>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	4ba9      	ldr	r3, [pc, #676]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4aa8      	ldr	r2, [pc, #672]	; (8001c1c <MX_GPIO_Init+0x304>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4ba6      	ldr	r3, [pc, #664]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	4ba3      	ldr	r3, [pc, #652]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4aa2      	ldr	r2, [pc, #648]	; (8001c1c <MX_GPIO_Init+0x304>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4ba0      	ldr	r3, [pc, #640]	; (8001c1c <MX_GPIO_Init+0x304>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80019ac:	489c      	ldr	r0, [pc, #624]	; (8001c20 <MX_GPIO_Init+0x308>)
 80019ae:	f006 fd43 	bl	8008438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f248 1104 	movw	r1, #33028	; 0x8104
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f006 fd3c 	bl	8008438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80019c0:	2200      	movs	r2, #0
 80019c2:	f24b 0114 	movw	r1, #45076	; 0xb014
 80019c6:	4897      	ldr	r0, [pc, #604]	; (8001c24 <MX_GPIO_Init+0x30c>)
 80019c8:	f006 fd36 	bl	8008438 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	f241 0181 	movw	r1, #4225	; 0x1081
 80019d2:	4895      	ldr	r0, [pc, #596]	; (8001c28 <MX_GPIO_Init+0x310>)
 80019d4:	f006 fd30 	bl	8008438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019de:	4892      	ldr	r0, [pc, #584]	; (8001c28 <MX_GPIO_Init+0x310>)
 80019e0:	f006 fd2a 	bl	8008438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80019ea:	4890      	ldr	r0, [pc, #576]	; (8001c2c <MX_GPIO_Init+0x314>)
 80019ec:	f006 fd24 	bl	8008438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2120      	movs	r1, #32
 80019f4:	488b      	ldr	r0, [pc, #556]	; (8001c24 <MX_GPIO_Init+0x30c>)
 80019f6:	f006 fd1f 	bl	8008438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	2101      	movs	r1, #1
 80019fe:	4888      	ldr	r0, [pc, #544]	; (8001c20 <MX_GPIO_Init+0x308>)
 8001a00:	f006 fd1a 	bl	8008438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001a04:	f240 1315 	movw	r3, #277	; 0x115
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4880      	ldr	r0, [pc, #512]	; (8001c20 <MX_GPIO_Init+0x308>)
 8001a1e:	f006 fa6d 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001a22:	236a      	movs	r3, #106	; 0x6a
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a26:	4b82      	ldr	r3, [pc, #520]	; (8001c30 <MX_GPIO_Init+0x318>)
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	487a      	ldr	r0, [pc, #488]	; (8001c20 <MX_GPIO_Init+0x308>)
 8001a36:	f006 fa61 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001a3a:	233f      	movs	r3, #63	; 0x3f
 8001a3c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a3e:	230b      	movs	r3, #11
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4877      	ldr	r0, [pc, #476]	; (8001c2c <MX_GPIO_Init+0x314>)
 8001a4e:	f006 fa55 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001a52:	2303      	movs	r3, #3
 8001a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a62:	2308      	movs	r3, #8
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f006 fa44 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001a74:	f248 1304 	movw	r3, #33028	; 0x8104
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a90:	f006 fa34 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001a94:	2308      	movs	r3, #8
 8001a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f006 fa23 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001ab6:	2310      	movs	r3, #16
 8001ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001aba:	230b      	movs	r3, #11
 8001abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001acc:	f006 fa16 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001ad0:	23e0      	movs	r3, #224	; 0xe0
 8001ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f006 fa05 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001af2:	2301      	movs	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af6:	4b4e      	ldr	r3, [pc, #312]	; (8001c30 <MX_GPIO_Init+0x318>)
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4847      	ldr	r0, [pc, #284]	; (8001c24 <MX_GPIO_Init+0x30c>)
 8001b06:	f006 f9f9 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b0e:	230b      	movs	r3, #11
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4841      	ldr	r0, [pc, #260]	; (8001c24 <MX_GPIO_Init+0x30c>)
 8001b1e:	f006 f9ed 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001b22:	f24b 0334 	movw	r3, #45108	; 0xb034
 8001b26:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	483a      	ldr	r0, [pc, #232]	; (8001c24 <MX_GPIO_Init+0x30c>)
 8001b3c:	f006 f9de 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001b40:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b44:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b52:	230a      	movs	r3, #10
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4830      	ldr	r0, [pc, #192]	; (8001c20 <MX_GPIO_Init+0x308>)
 8001b5e:	f006 f9cd 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001b62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b74:	2307      	movs	r3, #7
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	482a      	ldr	r0, [pc, #168]	; (8001c28 <MX_GPIO_Init+0x310>)
 8001b80:	f006 f9bc 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001b84:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001b88:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b8a:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <MX_GPIO_Init+0x318>)
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4823      	ldr	r0, [pc, #140]	; (8001c28 <MX_GPIO_Init+0x310>)
 8001b9a:	f006 f9af 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001b9e:	f243 0381 	movw	r3, #12417	; 0x3081
 8001ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	481c      	ldr	r0, [pc, #112]	; (8001c28 <MX_GPIO_Init+0x310>)
 8001bb8:	f006 f9a0 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001bbc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4815      	ldr	r0, [pc, #84]	; (8001c2c <MX_GPIO_Init+0x314>)
 8001bd6:	f006 f991 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001bda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <MX_GPIO_Init+0x318>)
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	480f      	ldr	r0, [pc, #60]	; (8001c2c <MX_GPIO_Init+0x314>)
 8001bf0:	f006 f984 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f006 f976 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001c10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	e00b      	b.n	8001c34 <MX_GPIO_Init+0x31c>
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	48001000 	.word	0x48001000
 8001c24:	48000400 	.word	0x48000400
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	10110000 	.word	0x10110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c3c:	230a      	movs	r3, #10
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4a:	f006 f957 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001c4e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c60:	2306      	movs	r3, #6
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481c      	ldr	r0, [pc, #112]	; (8001cdc <MX_GPIO_Init+0x3c4>)
 8001c6c:	f006 f946 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001c70:	2302      	movs	r3, #2
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c80:	2305      	movs	r3, #5
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4815      	ldr	r0, [pc, #84]	; (8001ce0 <MX_GPIO_Init+0x3c8>)
 8001c8c:	f006 f936 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001c90:	2378      	movs	r3, #120	; 0x78
 8001c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_GPIO_Init+0x3c8>)
 8001cac:	f006 f926 	bl	8007efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001cb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb6:	2312      	movs	r3, #18
 8001cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_GPIO_Init+0x3cc>)
 8001cce:	f006 f915 	bl	8007efc <HAL_GPIO_Init>

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	48000800 	.word	0x48000800
 8001ce0:	48000c00 	.word	0x48000c00
 8001ce4:	48000400 	.word	0x48000400

08001ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cec:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8001cf0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf2:	f005 fdbd 	bl	8007870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf6:	f000 f95b 	bl	8001fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cfa:	f7ff fe0d 	bl	8001918 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001cfe:	f7ff fd6f 	bl	80017e0 <MX_DFSDM1_Init>
  MX_TIM6_Init();
 8001d02:	f000 fb9b 	bl	800243c <MX_TIM6_Init>
  //MX_MEMS_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001d06:	f000 f9b5 	bl	8002074 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  /* UART console init */
   Console_UART_Init();
 8001d0a:	f000 f9cf 	bl	80020ac <Console_UART_Init>
   Init_Sensors();
 8001d0e:	f7ff fd4f 	bl	80017b0 <Init_Sensors>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_TIM_Base_Start_IT(&htim6);
  printf("Hello\n");
 8001d12:	4893      	ldr	r0, [pc, #588]	; (8001f60 <main+0x278>)
 8001d14:	f00c facc 	bl	800e2b0 <puts>
  printf("Inicializando a placa\n");
 8001d18:	4892      	ldr	r0, [pc, #584]	; (8001f64 <main+0x27c>)
 8001d1a:	f00c fac9 	bl	800e2b0 <puts>
  if ( Init_Demo() !=0)
 8001d1e:	f7ff f96f 	bl	8001000 <Init_Demo>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <main+0x48>
  {
	  printf("Placa inicializada com sucesso.\n");
 8001d28:	488f      	ldr	r0, [pc, #572]	; (8001f68 <main+0x280>)
 8001d2a:	f00c fac1 	bl	800e2b0 <puts>
 8001d2e:	e002      	b.n	8001d36 <main+0x4e>

  }
  else
  {
	  printf("Problema na inicialização da placa.\n");
 8001d30:	488e      	ldr	r0, [pc, #568]	; (8001f6c <main+0x284>)
 8001d32:	f00c fabd 	bl	800e2b0 <puts>
    /* USER CODE BEGIN 3 */



	  //Init_Demo();
     if (Collect_Data())
 8001d36:	f7ff fba7 	bl	8001488 <Collect_Data>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0fa      	beq.n	8001d36 <main+0x4e>
     {
    	 printf("\n\nSOF\n", EOF);
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	488a      	ldr	r0, [pc, #552]	; (8001f70 <main+0x288>)
 8001d46:	f00c fa2d 	bl	800e1a4 <iprintf>
    	 printf("Dados de aquisicao,Fr,%f,Pr,%f,Tau,%f ", AcceleroODR.Frequency, AcceleroODR.Period, AcceleroODR.Tau);
 8001d4a:	4b8a      	ldr	r3, [pc, #552]	; (8001f74 <main+0x28c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fc5a 	bl	8000608 <__aeabi_f2d>
 8001d54:	4680      	mov	r8, r0
 8001d56:	4689      	mov	r9, r1
 8001d58:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <main+0x28c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fc53 	bl	8000608 <__aeabi_f2d>
 8001d62:	4604      	mov	r4, r0
 8001d64:	460d      	mov	r5, r1
 8001d66:	4b83      	ldr	r3, [pc, #524]	; (8001f74 <main+0x28c>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fc4c 	bl	8000608 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d78:	e9cd 4500 	strd	r4, r5, [sp]
 8001d7c:	4642      	mov	r2, r8
 8001d7e:	464b      	mov	r3, r9
 8001d80:	487d      	ldr	r0, [pc, #500]	; (8001f78 <main+0x290>)
 8001d82:	f00c fa0f 	bl	800e1a4 <iprintf>
  /* Perform Frequency Domain analysis if buffer is full */

        if (fftIsEnabled == 1)
 8001d86:	4b7d      	ldr	r3, [pc, #500]	; (8001f7c <main+0x294>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d116      	bne.n	8001dbc <main+0xd4>
        {
          fftIsEnabled = 0;
 8001d8e:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <main+0x294>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]

          if ((HAL_GetTick() - StartTick) >= MotionSP_Parameters.tacq)
 8001d94:	f005 fdd4 	bl	8007940 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b79      	ldr	r3, [pc, #484]	; (8001f80 <main+0x298>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a78      	ldr	r2, [pc, #480]	; (8001f84 <main+0x29c>)
 8001da2:	8a92      	ldrh	r2, [r2, #20]
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d307      	bcc.n	8001db8 <main+0xd0>
          {
            FinishAvgFlag = 1;
 8001da8:	4b77      	ldr	r3, [pc, #476]	; (8001f88 <main+0x2a0>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
            StartTick = HAL_GetTick();
 8001dae:	f005 fdc7 	bl	8007940 <HAL_GetTick>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <main+0x298>)
 8001db6:	6013      	str	r3, [r2, #0]
          }

          MotionSP_FrequencyDomainProcess();
 8001db8:	f00b f9a4 	bl	800d104 <MotionSP_FrequencyDomainProcess>
        }
        /* Send data to GUI if total acquisition time is reached */
              if (FinishAvgFlag == 1)
 8001dbc:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <main+0x2a0>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 80be 	bne.w	8001f42 <main+0x25a>
              {
                FinishAvgFlag = 0;
 8001dc6:	4b70      	ldr	r3, [pc, #448]	; (8001f88 <main+0x2a0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
////                  {
////                	  printf("EixoZ:\n");
////                  }
////                  UART_SendMsg(&msg_dat);
//                }
                printf("\n\n\n ACC:\n");
 8001dcc:	486f      	ldr	r0, [pc, #444]	; (8001f8c <main+0x2a4>)
 8001dce:	f00c fa6f 	bl	800e2b0 <puts>
                for (int i=0;i<AccCircBuffer.Size;i++){
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001dd8:	f102 020c 	add.w	r2, r2, #12
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e047      	b.n	8001e70 <main+0x188>
                	printf("t_a,%d,x,%f,y,%f,z,%f\n",i, AccCircBuffer.Data.AXIS_X[i], AccCircBuffer.Data.AXIS_Y[i], AccCircBuffer.Data.AXIS_Z[i]);
 8001de0:	4a6b      	ldr	r2, [pc, #428]	; (8001f90 <main+0x2a8>)
 8001de2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001de6:	f103 030c 	add.w	r3, r3, #12
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3302      	adds	r3, #2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fc07 	bl	8000608 <__aeabi_f2d>
 8001dfa:	4680      	mov	r8, r0
 8001dfc:	4689      	mov	r9, r1
 8001dfe:	4a64      	ldr	r2, [pc, #400]	; (8001f90 <main+0x2a8>)
 8001e00:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e04:	f103 030c 	add.w	r3, r3, #12
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f203 2302 	addw	r3, r3, #514	; 0x202
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fbf7 	bl	8000608 <__aeabi_f2d>
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	460d      	mov	r5, r1
 8001e1e:	4a5c      	ldr	r2, [pc, #368]	; (8001f90 <main+0x2a8>)
 8001e20:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e24:	f103 030c 	add.w	r3, r3, #12
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fbe7 	bl	8000608 <__aeabi_f2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e42:	e9cd 4500 	strd	r4, r5, [sp]
 8001e46:	4642      	mov	r2, r8
 8001e48:	464b      	mov	r3, r9
 8001e4a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001e4e:	f101 010c 	add.w	r1, r1, #12
 8001e52:	6809      	ldr	r1, [r1, #0]
 8001e54:	484f      	ldr	r0, [pc, #316]	; (8001f94 <main+0x2ac>)
 8001e56:	f00c f9a5 	bl	800e1a4 <iprintf>
                for (int i=0;i<AccCircBuffer.Size;i++){
 8001e5a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e5e:	f103 030c 	add.w	r3, r3, #12
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e6a:	f102 020c 	add.w	r2, r2, #12
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <main+0x2a8>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e7a:	f103 030c 	add.w	r3, r3, #12
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	dbad      	blt.n	8001de0 <main+0xf8>

                   }

                printf("\n\n\n Speed:\n");
 8001e84:	4844      	ldr	r0, [pc, #272]	; (8001f98 <main+0x2b0>)
 8001e86:	f00c fa13 	bl	800e2b0 <puts>
				for (int i=0;i<AccCircBuffer.Size;i++){
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e90:	f102 0208 	add.w	r2, r2, #8
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e047      	b.n	8001f28 <main+0x240>
					printf("t_s,%d,x,%f,y,%f,z,%f\n",i, SpeedCircBuffer.Data.AXIS_X[i], SpeedCircBuffer.Data.AXIS_Y[i], SpeedCircBuffer.Data.AXIS_Z[i]);
 8001e98:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <main+0x2b4>)
 8001e9a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e9e:	f103 0308 	add.w	r3, r3, #8
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fbab 	bl	8000608 <__aeabi_f2d>
 8001eb2:	4680      	mov	r8, r0
 8001eb4:	4689      	mov	r9, r1
 8001eb6:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <main+0x2b4>)
 8001eb8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ebc:	f103 0308 	add.w	r3, r3, #8
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f203 2302 	addw	r3, r3, #514	; 0x202
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb9b 	bl	8000608 <__aeabi_f2d>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	460d      	mov	r5, r1
 8001ed6:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <main+0x2b4>)
 8001ed8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001edc:	f103 0308 	add.w	r3, r3, #8
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb8b 	bl	8000608 <__aeabi_f2d>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001efa:	e9cd 4500 	strd	r4, r5, [sp]
 8001efe:	4642      	mov	r2, r8
 8001f00:	464b      	mov	r3, r9
 8001f02:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f06:	f101 0108 	add.w	r1, r1, #8
 8001f0a:	6809      	ldr	r1, [r1, #0]
 8001f0c:	4824      	ldr	r0, [pc, #144]	; (8001fa0 <main+0x2b8>)
 8001f0e:	f00c f949 	bl	800e1a4 <iprintf>
				for (int i=0;i<AccCircBuffer.Size;i++){
 8001f12:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f16:	f103 0308 	add.w	r3, r3, #8
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f22:	f102 0208 	add.w	r2, r2, #8
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <main+0x2a8>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f32:	f103 0308 	add.w	r3, r3, #8
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	dbad      	blt.n	8001e98 <main+0x1b0>

				   }
                RestartFlag = 1;
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <main+0x2bc>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
              }

              printf("EOF\n", EOF);
 8001f42:	f04f 31ff 	mov.w	r1, #4294967295
 8001f46:	4818      	ldr	r0, [pc, #96]	; (8001fa8 <main+0x2c0>)
 8001f48:	f00c f92c 	bl	800e1a4 <iprintf>
              printf("%d", EOF);
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <main+0x2c4>)
 8001f52:	f00c f927 	bl	800e1a4 <iprintf>
              HAL_Delay(100);
 8001f56:	2064      	movs	r0, #100	; 0x64
 8001f58:	f005 fcfe 	bl	8007958 <HAL_Delay>
     if (Collect_Data())
 8001f5c:	e6eb      	b.n	8001d36 <main+0x4e>
 8001f5e:	bf00      	nop
 8001f60:	080102b8 	.word	0x080102b8
 8001f64:	080102c0 	.word	0x080102c0
 8001f68:	080102d8 	.word	0x080102d8
 8001f6c:	080102f8 	.word	0x080102f8
 8001f70:	08010320 	.word	0x08010320
 8001f74:	20008a94 	.word	0x20008a94
 8001f78:	08010328 	.word	0x08010328
 8001f7c:	2000723c 	.word	0x2000723c
 8001f80:	20000318 	.word	0x20000318
 8001f84:	200059b4 	.word	0x200059b4
 8001f88:	20007288 	.word	0x20007288
 8001f8c:	08010350 	.word	0x08010350
 8001f90:	200059d0 	.word	0x200059d0
 8001f94:	0801035c 	.word	0x0801035c
 8001f98:	08010374 	.word	0x08010374
 8001f9c:	2000728c 	.word	0x2000728c
 8001fa0:	08010380 	.word	0x08010380
 8001fa4:	20000001 	.word	0x20000001
 8001fa8:	08010398 	.word	0x08010398
 8001fac:	080103a0 	.word	0x080103a0

08001fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b096      	sub	sp, #88	; 0x58
 8001fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	2244      	movs	r2, #68	; 0x44
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00b fbd3 	bl	800d76a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fd6:	f007 f871 	bl	80090bc <HAL_PWREx_ControlVoltageScaling>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fe0:	f000 f8a0 	bl	8002124 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fe4:	f007 f84c 	bl	8009080 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <SystemClock_Config+0xc0>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <SystemClock_Config+0xc0>)
 8001ff0:	f023 0318 	bic.w	r3, r3, #24
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001ff8:	2314      	movs	r3, #20
 8001ffa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002000:	2301      	movs	r3, #1
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002008:	2360      	movs	r3, #96	; 0x60
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200c:	2302      	movs	r3, #2
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002010:	2301      	movs	r3, #1
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002014:	2301      	movs	r3, #1
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002018:	2328      	movs	r3, #40	; 0x28
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800201c:	2307      	movs	r3, #7
 800201e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002020:	2302      	movs	r3, #2
 8002022:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002024:	2302      	movs	r3, #2
 8002026:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4618      	mov	r0, r3
 800202e:	f007 f89b 	bl	8009168 <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002038:	f000 f874 	bl	8002124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203c:	230f      	movs	r3, #15
 800203e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002040:	2303      	movs	r3, #3
 8002042:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	2104      	movs	r1, #4
 8002054:	4618      	mov	r0, r3
 8002056:	f007 fc6d 	bl	8009934 <HAL_RCC_ClockConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002060:	f000 f860 	bl	8002124 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002064:	f008 f956 	bl	800a314 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002068:	bf00      	nop
 800206a:	3758      	adds	r7, #88	; 0x58
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000

08002074 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2017      	movs	r0, #23
 800207e:	f005 fd8e 	bl	8007b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002082:	2017      	movs	r0, #23
 8002084:	f005 fda7 	bl	8007bd6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2028      	movs	r0, #40	; 0x28
 800208e:	f005 fd86 	bl	8007b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002092:	2028      	movs	r0, #40	; 0x28
 8002094:	f005 fd9f 	bl	8007bd6 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	2036      	movs	r0, #54	; 0x36
 800209e:	f005 fd7e 	bl	8007b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020a2:	2036      	movs	r0, #54	; 0x36
 80020a4:	f005 fd97 	bl	8007bd6 <HAL_NVIC_EnableIRQ>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <Console_UART_Init>:

/**
  * @brief UART console init function
  */
static void Console_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  console_uart.Instance = USART1;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <Console_UART_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <Console_UART_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  console_uart.Init.BaudRate = 115200;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <Console_UART_Init+0x4c>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  console_uart.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <Console_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  console_uart.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <Console_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  console_uart.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <Console_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  console_uart.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <Console_UART_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  console_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <Console_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  console_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <Console_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
#ifdef UART_ONE_BIT_SAMPLE_DISABLE
  console_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <Console_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
  console_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <Console_UART_Init+0x4c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
#endif
  BSP_COM_Init(COM1);//,&console_uart);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 fa24 	bl	800253c <BSP_COM_Init>
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000294 	.word	0x20000294
 80020fc:	40013800 	.word	0x40013800

08002100 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */
int i;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  i++;
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002110:	6013      	str	r3, [r2, #0]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20004428 	.word	0x20004428

08002124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002128:	b672      	cpsid	i
}
 800212a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800212c:	e7fe      	b.n	800212c <Error_Handler+0x8>
	...

08002130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_MspInit+0x44>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_MspInit+0x44>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6613      	str	r3, [r2, #96]	; 0x60
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <HAL_MspInit+0x44>)
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_MspInit+0x44>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	4a08      	ldr	r2, [pc, #32]	; (8002174 <HAL_MspInit+0x44>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6593      	str	r3, [r2, #88]	; 0x58
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_MspInit+0x44>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800217c:	e7fe      	b.n	800217c <NMI_Handler+0x4>

0800217e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <HardFault_Handler+0x4>

08002184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <MemManage_Handler+0x4>

0800218a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <BusFault_Handler+0x4>

08002190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <UsageFault_Handler+0x4>

08002196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c4:	f005 fba8 	bl	8007918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80021d0:	2020      	movs	r0, #32
 80021d2:	f006 f949 	bl	8008468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80021d6:	2040      	movs	r0, #64	; 0x40
 80021d8:	f006 f946 	bl	8008468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80021dc:	2080      	movs	r0, #128	; 0x80
 80021de:	f006 f943 	bl	8008468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80021e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021e6:	f006 f93f 	bl	8008468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <I2C2_EV_IRQHandler+0x10>)
 80021f6:	f006 fc5b 	bl	8008ab0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200044fc 	.word	0x200044fc

08002204 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002208:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800220c:	f006 f92c 	bl	8008468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_11);
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <EXTI15_10_IRQHandler+0x2c>)
 8002212:	f005 fe43 	bl	8007e9c <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002216:	4807      	ldr	r0, [pc, #28]	; (8002234 <EXTI15_10_IRQHandler+0x30>)
 8002218:	f005 fe40 	bl	8007e9c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800221c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002220:	f006 f922 	bl	8008468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002224:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002228:	f006 f91e 	bl	8008468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000074 	.word	0x20000074
 8002234:	20000008 	.word	0x20000008

08002238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <TIM6_DAC_IRQHandler+0x10>)
 800223e:	f008 faa2 	bl	800a786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000442c 	.word	0x2000442c

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002266:	f00b f88d 	bl	800d384 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
	return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
	while (1) {}		/* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
	}

return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e009      	b.n	80022f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f99b 	bl	8002620 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf1      	blt.n	80022dc <_write+0x12>
	}
	return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_close>:

int _close(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232a:	605a      	str	r2, [r3, #4]
	return 0;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_isatty>:

int _isatty(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return 1;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
	return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f00a fff2 	bl	800d384 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20018000 	.word	0x20018000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	2000031c 	.word	0x2000031c
 80023d4:	20008ab0 	.word	0x20008ab0

080023d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <SystemInit+0x5c>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	4a14      	ldr	r2, [pc, #80]	; (8002434 <SystemInit+0x5c>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <SystemInit+0x60>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a11      	ldr	r2, [pc, #68]	; (8002438 <SystemInit+0x60>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <SystemInit+0x60>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <SystemInit+0x60>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <SystemInit+0x60>)
 8002404:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002408:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800240c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <SystemInit+0x60>)
 8002410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002414:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <SystemInit+0x60>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <SystemInit+0x60>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <SystemInit+0x60>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00
 8002438:	40021000 	.word	0x40021000

0800243c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_TIM6_Init+0x64>)
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <MX_TIM6_Init+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <MX_TIM6_Init+0x64>)
 8002454:	2200      	movs	r2, #0
 8002456:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <MX_TIM6_Init+0x64>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <MX_TIM6_Init+0x64>)
 8002460:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002464:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <MX_TIM6_Init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800246c:	480c      	ldr	r0, [pc, #48]	; (80024a0 <MX_TIM6_Init+0x64>)
 800246e:	f008 f933 	bl	800a6d8 <HAL_TIM_Base_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002478:	f7ff fe54 	bl	8002124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <MX_TIM6_Init+0x64>)
 800248a:	f008 fb5d 	bl	800ab48 <HAL_TIMEx_MasterConfigSynchronization>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002494:	f7ff fe46 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000442c 	.word	0x2000442c
 80024a4:	40001000 	.word	0x40001000

080024a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <HAL_TIM_Base_MspInit+0x38>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10b      	bne.n	80024d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_TIM_Base_MspInit+0x3c>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_TIM_Base_MspInit+0x3c>)
 80024c0:	f043 0310 	orr.w	r3, r3, #16
 80024c4:	6593      	str	r3, [r2, #88]	; 0x58
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_TIM_Base_MspInit+0x3c>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40001000 	.word	0x40001000
 80024e4:	40021000 	.word	0x40021000

080024e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002520 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ec:	f7ff ff74 	bl	80023d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024f2:	e003      	b.n	80024fc <LoopCopyDataInit>

080024f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024fa:	3104      	adds	r1, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024fc:	480a      	ldr	r0, [pc, #40]	; (8002528 <LoopForever+0xa>)
	ldr	r3, =_edata
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002500:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002502:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002504:	d3f6      	bcc.n	80024f4 <CopyDataInit>
	ldr	r2, =_sbss
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002508:	e002      	b.n	8002510 <LoopFillZerobss>

0800250a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800250a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800250c:	f842 3b04 	str.w	r3, [r2], #4

08002510 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <LoopForever+0x16>)
	cmp	r2, r3
 8002512:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002514:	d3f9      	bcc.n	800250a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002516:	f00b f8f3 	bl	800d700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800251a:	f7ff fbe5 	bl	8001ce8 <main>

0800251e <LoopForever>:

LoopForever:
    b LoopForever
 800251e:	e7fe      	b.n	800251e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002520:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002524:	080244f0 	.word	0x080244f0
	ldr	r0, =_sdata
 8002528:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800252c:	20000264 	.word	0x20000264
	ldr	r2, =_sbss
 8002530:	20000264 	.word	0x20000264
	ldr	r3, = _ebss
 8002534:	20008ab0 	.word	0x20008ab0

08002538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC1_2_IRQHandler>
	...

0800253c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d903      	bls.n	8002558 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002550:	f06f 0301 	mvn.w	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e025      	b.n	80025a4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	4914      	ldr	r1, [pc, #80]	; (80025b0 <BSP_COM_Init+0x74>)
 800255e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002562:	4814      	ldr	r0, [pc, #80]	; (80025b4 <BSP_COM_Init+0x78>)
 8002564:	4613      	mov	r3, r2
 8002566:	015b      	lsls	r3, r3, #5
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4403      	add	r3, r0
 800256e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002570:	79fa      	ldrb	r2, [r7, #7]
 8002572:	4613      	mov	r3, r2
 8002574:	015b      	lsls	r3, r3, #5
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <BSP_COM_Init+0x78>)
 800257c:	4413      	add	r3, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f86a 	bl	8002658 <USART1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8002584:	79fa      	ldrb	r2, [r7, #7]
 8002586:	4613      	mov	r3, r2
 8002588:	015b      	lsls	r3, r3, #5
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <BSP_COM_Init+0x78>)
 8002590:	4413      	add	r3, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f810 	bl	80025b8 <MX_USART1_UART_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800259e:	f06f 0303 	mvn.w	r3, #3
 80025a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80025a4:	68fb      	ldr	r3, [r7, #12]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000010 	.word	0x20000010
 80025b4:	20004478 	.word	0x20004478

080025b8 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a15      	ldr	r2, [pc, #84]	; (800261c <MX_USART1_UART_Init+0x64>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f008 fb46 	bl	800ac94 <HAL_UART_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40013800 	.word	0x40013800

08002620 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <__io_putchar+0x30>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4613      	mov	r3, r2
 8002630:	015b      	lsls	r3, r3, #5
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4a07      	ldr	r2, [pc, #28]	; (8002654 <__io_putchar+0x34>)
 8002638:	1898      	adds	r0, r3, r2
 800263a:	1d39      	adds	r1, r7, #4
 800263c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002640:	2201      	movs	r2, #1
 8002642:	f008 fb7f 	bl	800ad44 <HAL_UART_Transmit>
  return ch;
 8002646:	687b      	ldr	r3, [r7, #4]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000320 	.word	0x20000320
 8002654:	20004478 	.word	0x20004478

08002658 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <USART1_MspInit+0x80>)
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <USART1_MspInit+0x80>)
 8002666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266a:	6613      	str	r3, [r2, #96]	; 0x60
 800266c:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <USART1_MspInit+0x80>)
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <USART1_MspInit+0x80>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <USART1_MspInit+0x80>)
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <USART1_MspInit+0x80>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8002690:	2340      	movs	r3, #64	; 0x40
 8002692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 80026a0:	2307      	movs	r3, #7
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	4619      	mov	r1, r3
 80026aa:	480c      	ldr	r0, [pc, #48]	; (80026dc <USART1_MspInit+0x84>)
 80026ac:	f005 fc26 	bl	8007efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 80026c0:	2307      	movs	r3, #7
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4619      	mov	r1, r3
 80026ca:	4804      	ldr	r0, [pc, #16]	; (80026dc <USART1_MspInit+0x84>)
 80026cc:	f005 fc16 	bl	8007efc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80026d0:	bf00      	nop
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	48000400 	.word	0x48000400

080026e0 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <BSP_I2C2_Init+0x70>)
 80026ec:	4a19      	ldr	r2, [pc, #100]	; (8002754 <BSP_I2C2_Init+0x74>)
 80026ee:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <BSP_I2C2_Init+0x78>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	4918      	ldr	r1, [pc, #96]	; (8002758 <BSP_I2C2_Init+0x78>)
 80026f8:	600a      	str	r2, [r1, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d122      	bne.n	8002744 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 80026fe:	4814      	ldr	r0, [pc, #80]	; (8002750 <BSP_I2C2_Init+0x70>)
 8002700:	f006 f9f0 	bl	8008ae4 <HAL_I2C_GetState>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d11c      	bne.n	8002744 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 800270a:	4811      	ldr	r0, [pc, #68]	; (8002750 <BSP_I2C2_Init+0x70>)
 800270c:	f000 f8fe 	bl	800290c <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002716:	480e      	ldr	r0, [pc, #56]	; (8002750 <BSP_I2C2_Init+0x70>)
 8002718:	f000 f8b4 	bl	8002884 <MX_I2C2_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002722:	f06f 0307 	mvn.w	r3, #7
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	e00c      	b.n	8002744 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800272a:	2100      	movs	r1, #0
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <BSP_I2C2_Init+0x70>)
 800272e:	f006 fc0f 	bl	8008f50 <HAL_I2CEx_ConfigAnalogFilter>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002738:	f06f 0307 	mvn.w	r3, #7
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	e001      	b.n	8002744 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002744:	687b      	ldr	r3, [r7, #4]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200044fc 	.word	0x200044fc
 8002754:	40005800 	.word	0x40005800
 8002758:	20000324 	.word	0x20000324

0800275c <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <BSP_I2C2_DeInit+0x48>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d014      	beq.n	8002798 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <BSP_I2C2_DeInit+0x48>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3b01      	subs	r3, #1
 8002774:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <BSP_I2C2_DeInit+0x48>)
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <BSP_I2C2_DeInit+0x48>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002780:	4809      	ldr	r0, [pc, #36]	; (80027a8 <BSP_I2C2_DeInit+0x4c>)
 8002782:	f000 f911 	bl	80029a8 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002786:	4808      	ldr	r0, [pc, #32]	; (80027a8 <BSP_I2C2_DeInit+0x4c>)
 8002788:	f005 ff20 	bl	80085cc <HAL_I2C_DeInit>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002792:	f06f 0307 	mvn.w	r3, #7
 8002796:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002798:	687b      	ldr	r3, [r7, #4]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000324 	.word	0x20000324
 80027a8:	200044fc 	.word	0x200044fc

080027ac <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af04      	add	r7, sp, #16
 80027b2:	60ba      	str	r2, [r7, #8]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4603      	mov	r3, r0
 80027b8:	81fb      	strh	r3, [r7, #14]
 80027ba:	460b      	mov	r3, r1
 80027bc:	81bb      	strh	r3, [r7, #12]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80027c6:	89ba      	ldrh	r2, [r7, #12]
 80027c8:	89f9      	ldrh	r1, [r7, #14]
 80027ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ce:	9302      	str	r3, [sp, #8]
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2301      	movs	r3, #1
 80027da:	480c      	ldr	r0, [pc, #48]	; (800280c <BSP_I2C2_WriteReg+0x60>)
 80027dc:	f005 ff3a 	bl	8008654 <HAL_I2C_Mem_Write>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00c      	beq.n	8002800 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80027e6:	4809      	ldr	r0, [pc, #36]	; (800280c <BSP_I2C2_WriteReg+0x60>)
 80027e8:	f006 f98a 	bl	8008b00 <HAL_I2C_GetError>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d103      	bne.n	80027fa <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80027f2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e002      	b.n	8002800 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80027fa:	f06f 0303 	mvn.w	r3, #3
 80027fe:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002800:	697b      	ldr	r3, [r7, #20]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200044fc 	.word	0x200044fc

08002810 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af04      	add	r7, sp, #16
 8002816:	60ba      	str	r2, [r7, #8]
 8002818:	461a      	mov	r2, r3
 800281a:	4603      	mov	r3, r0
 800281c:	81fb      	strh	r3, [r7, #14]
 800281e:	460b      	mov	r3, r1
 8002820:	81bb      	strh	r3, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 800282a:	89ba      	ldrh	r2, [r7, #12]
 800282c:	89f9      	ldrh	r1, [r7, #14]
 800282e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	2301      	movs	r3, #1
 800283e:	480c      	ldr	r0, [pc, #48]	; (8002870 <BSP_I2C2_ReadReg+0x60>)
 8002840:	f006 f81c 	bl	800887c <HAL_I2C_Mem_Read>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800284a:	4809      	ldr	r0, [pc, #36]	; (8002870 <BSP_I2C2_ReadReg+0x60>)
 800284c:	f006 f958 	bl	8008b00 <HAL_I2C_GetError>
 8002850:	4603      	mov	r3, r0
 8002852:	2b04      	cmp	r3, #4
 8002854:	d103      	bne.n	800285e <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002856:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e002      	b.n	8002864 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800285e:	f06f 0303 	mvn.w	r3, #3
 8002862:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002864:	697b      	ldr	r3, [r7, #20]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200044fc 	.word	0x200044fc

08002874 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002878:	f005 f862 	bl	8007940 <HAL_GetTick>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <MX_I2C2_Init+0x80>)
 8002894:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <MX_I2C2_Init+0x84>)
 800289a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f005 fdf1 	bl	80084ae <HAL_I2C_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028d6:	2100      	movs	r1, #0
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f006 fb39 	bl	8008f50 <HAL_I2CEx_ConfigAnalogFilter>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80028e8:	2100      	movs	r1, #0
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f006 fb7b 	bl	8008fe6 <HAL_I2CEx_ConfigDigitalFilter>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40005800 	.word	0x40005800
 8002908:	10909cec 	.word	0x10909cec

0800290c <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <I2C2_MspInit+0x94>)
 8002916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002918:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <I2C2_MspInit+0x94>)
 800291a:	f043 0302 	orr.w	r3, r3, #2
 800291e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <I2C2_MspInit+0x94>)
 8002922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 800292c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002932:	2312      	movs	r3, #18
 8002934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800293e:	2304      	movs	r3, #4
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	4816      	ldr	r0, [pc, #88]	; (80029a4 <I2C2_MspInit+0x98>)
 800294a:	f005 fad7 	bl	8007efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800294e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002954:	2312      	movs	r3, #18
 8002956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002958:	2301      	movs	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295c:	2303      	movs	r3, #3
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002960:	2304      	movs	r3, #4
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4619      	mov	r1, r3
 800296a:	480e      	ldr	r0, [pc, #56]	; (80029a4 <I2C2_MspInit+0x98>)
 800296c:	f005 fac6 	bl	8007efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <I2C2_MspInit+0x94>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <I2C2_MspInit+0x94>)
 8002976:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800297a:	6593      	str	r3, [r2, #88]	; 0x58
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <I2C2_MspInit+0x94>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	2100      	movs	r1, #0
 800298c:	2021      	movs	r0, #33	; 0x21
 800298e:	f005 f906 	bl	8007b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002992:	2021      	movs	r0, #33	; 0x21
 8002994:	f005 f91f 	bl	8007bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002998:	bf00      	nop
 800299a:	3728      	adds	r7, #40	; 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	48000400 	.word	0x48000400

080029a8 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <I2C2_MspDeInit+0x38>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <I2C2_MspDeInit+0x38>)
 80029b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029ba:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 80029bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029c0:	4808      	ldr	r0, [pc, #32]	; (80029e4 <I2C2_MspDeInit+0x3c>)
 80029c2:	f005 fc45 	bl	8008250 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 80029c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029ca:	4806      	ldr	r0, [pc, #24]	; (80029e4 <I2C2_MspDeInit+0x3c>)
 80029cc:	f005 fc40 	bl	8008250 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80029d0:	2021      	movs	r0, #33	; 0x21
 80029d2:	f005 f90e 	bl	8007bf2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	48000400 	.word	0x48000400

080029e8 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e04d      	b.n	8002aa0 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	7b1a      	ldrb	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	699a      	ldr	r2, [r3, #24]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <LSM6DSL_RegisterBusIO+0xc4>)
 8002a40:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1a      	ldr	r2, [pc, #104]	; (8002ab0 <LSM6DSL_RegisterBusIO+0xc8>)
 8002a46:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e020      	b.n	8002aa0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4798      	blx	r3
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e016      	b.n	8002aa0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d112      	bne.n	8002aa0 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10d      	bne.n	8002aa0 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002a84:	230c      	movs	r3, #12
 8002a86:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2112      	movs	r1, #18
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fd47 	bl	8003522 <LSM6DSL_Write_Reg>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	08003eb5 	.word	0x08003eb5
 8002ab0:	08003eeb 	.word	0x08003eeb

08002ab4 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	331c      	adds	r3, #28
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 fd2b 	bl	800451e <lsm6dsl_auto_increment_set>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad2:	e054      	b.n	8002b7e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	331c      	adds	r3, #28
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 fc2c 	bl	8004338 <lsm6dsl_block_data_update_set>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	e048      	b.n	8002b7e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	331c      	adds	r3, #28
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 f86e 	bl	8004bd4 <lsm6dsl_fifo_mode_set>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e03c      	b.n	8002b7e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2204      	movs	r2, #4
 8002b08:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	331c      	adds	r3, #28
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 fa92 	bl	800403c <lsm6dsl_xl_data_rate_set>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	e02c      	b.n	8002b7e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	331c      	adds	r3, #28
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 fa28 	bl	8003f80 <lsm6dsl_xl_full_scale_set>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	e020      	b.n	8002b7e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	331c      	adds	r3, #28
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 fb6c 	bl	8004228 <lsm6dsl_gy_data_rate_set>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e010      	b.n	8002b7e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	331c      	adds	r3, #28
 8002b60:	2106      	movs	r1, #6
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 faf8 	bl	8004158 <lsm6dsl_gy_full_scale_set>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e004      	b.n	8002b7e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f888 	bl	8002ca4 <LSM6DSL_ACC_Disable>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e015      	b.n	8002bcc <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fa9a 	bl	80030da <LSM6DSL_GYRO_Disable>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb0:	e00c      	b.n	8002bcc <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	331c      	adds	r3, #28
 8002be2:	6839      	ldr	r1, [r7, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 fc89 	bl	80044fc <lsm6dsl_device_id_get>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf4:	e000      	b.n	8002bf8 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002c28:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <LSM6DSL_GetCapabilities+0x58>)
 8002c3a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <LSM6DSL_GetCapabilities+0x58>)
 8002c40:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	45d02000 	.word	0x45d02000

08002c5c <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e014      	b.n	8002c9c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f103 021c 	add.w	r2, r3, #28
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f001 f9db 	bl	800403c <lsm6dsl_xl_data_rate_set>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	e004      	b.n	8002c9c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e01f      	b.n	8002cfa <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f103 021c 	add.w	r2, r3, #28
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	332b      	adds	r3, #43	; 0x2b
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f001 f9de 	bl	8004088 <lsm6dsl_xl_data_rate_get>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e010      	b.n	8002cfa <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	331c      	adds	r3, #28
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 f9ac 	bl	800403c <lsm6dsl_xl_data_rate_set>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e004      	b.n	8002cfa <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	331c      	adds	r3, #28
 8002d16:	f107 020b 	add.w	r2, r7, #11
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 f955 	bl	8003fcc <lsm6dsl_xl_full_scale_get>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2c:	e023      	b.n	8002d76 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d81b      	bhi.n	8002d6c <LSM6DSL_ACC_GetSensitivity+0x68>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d5d 	.word	0x08002d5d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8002d50:	601a      	str	r2, [r3, #0]
      break;
 8002d52:	e00f      	b.n	8002d74 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8002d58:	601a      	str	r2, [r3, #0]
      break;
 8002d5a:	e00b      	b.n	8002d74 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8002d60:	601a      	str	r2, [r3, #0]
      break;
 8002d62:	e007      	b.n	8002d74 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8002d68:	601a      	str	r2, [r3, #0]
      break;
 8002d6a:	e003      	b.n	8002d74 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	60fb      	str	r3, [r7, #12]
      break;
 8002d72:	bf00      	nop
  }

  return ret;
 8002d74:	68fb      	ldr	r3, [r7, #12]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	3d79db23 	.word	0x3d79db23
 8002d84:	3df9db23 	.word	0x3df9db23
 8002d88:	3e79db23 	.word	0x3e79db23
 8002d8c:	3ef9db23 	.word	0x3ef9db23

08002d90 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	331c      	adds	r3, #28
 8002da2:	f107 020b 	add.w	r2, r7, #11
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 f96d 	bl	8004088 <lsm6dsl_xl_data_rate_get>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
 8002db8:	e054      	b.n	8002e64 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	2b0b      	cmp	r3, #11
 8002dbe:	d84c      	bhi.n	8002e5a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8002dc0:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002df9 	.word	0x08002df9
 8002dcc:	08002e0b 	.word	0x08002e0b
 8002dd0:	08002e13 	.word	0x08002e13
 8002dd4:	08002e1b 	.word	0x08002e1b
 8002dd8:	08002e23 	.word	0x08002e23
 8002ddc:	08002e2b 	.word	0x08002e2b
 8002de0:	08002e33 	.word	0x08002e33
 8002de4:	08002e3b 	.word	0x08002e3b
 8002de8:	08002e43 	.word	0x08002e43
 8002dec:	08002e4b 	.word	0x08002e4b
 8002df0:	08002e53 	.word	0x08002e53
 8002df4:	08002e03 	.word	0x08002e03
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
      break;
 8002e00:	e02f      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8002e06:	601a      	str	r2, [r3, #0]
      break;
 8002e08:	e02b      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8002e0e:	601a      	str	r2, [r3, #0]
      break;
 8002e10:	e027      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8002e16:	601a      	str	r2, [r3, #0]
      break;
 8002e18:	e023      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8002e1e:	601a      	str	r2, [r3, #0]
      break;
 8002e20:	e01f      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8002e26:	601a      	str	r2, [r3, #0]
      break;
 8002e28:	e01b      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8002e2e:	601a      	str	r2, [r3, #0]
      break;
 8002e30:	e017      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8002e36:	601a      	str	r2, [r3, #0]
      break;
 8002e38:	e013      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8002e3e:	601a      	str	r2, [r3, #0]
      break;
 8002e40:	e00f      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8002e46:	601a      	str	r2, [r3, #0]
      break;
 8002e48:	e00b      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8002e4e:	601a      	str	r2, [r3, #0]
      break;
 8002e50:	e007      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8002e56:	601a      	str	r2, [r3, #0]
      break;
 8002e58:	e003      	b.n	8002e62 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5e:	60fb      	str	r3, [r7, #12]
      break;
 8002e60:	bf00      	nop
  }

  return ret;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	3fcccccd 	.word	0x3fcccccd
 8002e70:	41480000 	.word	0x41480000
 8002e74:	41d00000 	.word	0x41d00000
 8002e78:	42500000 	.word	0x42500000
 8002e7c:	42d00000 	.word	0x42d00000
 8002e80:	43500000 	.word	0x43500000
 8002e84:	43d00000 	.word	0x43d00000
 8002e88:	44504000 	.word	0x44504000
 8002e8c:	44cf8000 	.word	0x44cf8000
 8002e90:	45502000 	.word	0x45502000
 8002e94:	45d02000 	.word	0x45d02000

08002e98 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d106      	bne.n	8002ebc <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002eae:	ed97 0a00 	vldr	s0, [r7]
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fde2 	bl	8003a7c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	e005      	b.n	8002ec8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002ebc:	ed97 0a00 	vldr	s0, [r7]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fe67 	bl	8003b94 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8002ec6:	4603      	mov	r3, r0
  }
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	331c      	adds	r3, #28
 8002ee2:	f107 020b 	add.w	r2, r7, #11
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 f86f 	bl	8003fcc <lsm6dsl_xl_full_scale_get>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef8:	e023      	b.n	8002f42 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002efa:	7afb      	ldrb	r3, [r7, #11]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d81b      	bhi.n	8002f38 <LSM6DSL_ACC_GetFullScale+0x68>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <LSM6DSL_ACC_GetFullScale+0x38>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f21 	.word	0x08002f21
 8002f14:	08002f29 	.word	0x08002f29
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	601a      	str	r2, [r3, #0]
      break;
 8002f1e:	e00f      	b.n	8002f40 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2204      	movs	r2, #4
 8002f24:	601a      	str	r2, [r3, #0]
      break;
 8002f26:	e00b      	b.n	8002f40 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	601a      	str	r2, [r3, #0]
      break;
 8002f2e:	e007      	b.n	8002f40 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2210      	movs	r2, #16
 8002f34:	601a      	str	r2, [r3, #0]
      break;
 8002f36:	e003      	b.n	8002f40 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	60fb      	str	r3, [r7, #12]
      break;
 8002f3e:	bf00      	nop
  }

  return ret;
 8002f40:	68fb      	ldr	r3, [r7, #12]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop

08002f4c <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	dd0b      	ble.n	8002f74 <LSM6DSL_ACC_SetFullScale+0x28>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	dd06      	ble.n	8002f70 <LSM6DSL_ACC_SetFullScale+0x24>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	dc01      	bgt.n	8002f6c <LSM6DSL_ACC_SetFullScale+0x20>
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e004      	b.n	8002f76 <LSM6DSL_ACC_SetFullScale+0x2a>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e002      	b.n	8002f76 <LSM6DSL_ACC_SetFullScale+0x2a>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e000      	b.n	8002f76 <LSM6DSL_ACC_SetFullScale+0x2a>
 8002f74:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8002f76:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	331c      	adds	r3, #28
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fffd 	bl	8003f80 <lsm6dsl_xl_full_scale_set>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f90:	e000      	b.n	8002f94 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	331c      	adds	r3, #28
 8002faa:	f107 0208 	add.w	r2, r7, #8
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 fa32 	bl	800441a <lsm6dsl_acceleration_raw_get>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	e00c      	b.n	8002fdc <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002fc2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002fca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002fd2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	331c      	adds	r3, #28
 8002ff8:	f107 0210 	add.w	r2, r7, #16
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 fa0b 	bl	800441a <lsm6dsl_acceleration_raw_get>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	e03c      	b.n	800308a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fe74 	bl	8002d04 <LSM6DSL_ACC_GetSensitivity>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	e030      	b.n	800308a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003028:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003034:	edd7 7a03 	vldr	s15, [r7, #12]
 8003038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003040:	ee17 2a90 	vmov	r2, s15
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003048:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800304c:	ee07 3a90 	vmov	s15, r3
 8003050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003054:	edd7 7a03 	vldr	s15, [r7, #12]
 8003058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003060:	ee17 2a90 	vmov	r2, s15
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003068:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003074:	edd7 7a03 	vldr	s15, [r7, #12]
 8003078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003080:	ee17 2a90 	vmov	r2, s15
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e014      	b.n	80030d2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f103 021c 	add.w	r2, r3, #28
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f001 f8b6 	bl	8004228 <lsm6dsl_gy_data_rate_set>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e004      	b.n	80030d2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e01f      	b.n	8003130 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f103 021c 	add.w	r2, r3, #28
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	332c      	adds	r3, #44	; 0x2c
 80030fa:	4619      	mov	r1, r3
 80030fc:	4610      	mov	r0, r2
 80030fe:	f001 f8b9 	bl	8004274 <lsm6dsl_gy_data_rate_get>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
 800310c:	e010      	b.n	8003130 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	331c      	adds	r3, #28
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f001 f887 	bl	8004228 <lsm6dsl_gy_data_rate_set>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	e004      	b.n	8003130 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	331c      	adds	r3, #28
 800314a:	f107 020b 	add.w	r2, r7, #11
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f001 f827 	bl	80041a4 <lsm6dsl_gy_full_scale_get>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	e02d      	b.n	80031be <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003162:	7afb      	ldrb	r3, [r7, #11]
 8003164:	2b06      	cmp	r3, #6
 8003166:	d825      	bhi.n	80031b4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003195 	.word	0x08003195
 8003174:	0800318d 	.word	0x0800318d
 8003178:	0800319d 	.word	0x0800319d
 800317c:	080031b5 	.word	0x080031b5
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031b5 	.word	0x080031b5
 8003188:	080031ad 	.word	0x080031ad
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8003190:	601a      	str	r2, [r3, #0]
      break;
 8003192:	e013      	b.n	80031bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8003198:	601a      	str	r2, [r3, #0]
      break;
 800319a:	e00f      	b.n	80031bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80031a0:	601a      	str	r2, [r3, #0]
      break;
 80031a2:	e00b      	b.n	80031bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80031a8:	601a      	str	r2, [r3, #0]
      break;
 80031aa:	e007      	b.n	80031bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80031b0:	601a      	str	r2, [r3, #0]
      break;
 80031b2:	e003      	b.n	80031bc <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	60fb      	str	r3, [r7, #12]
      break;
 80031ba:	bf00      	nop
  }

  return ret;
 80031bc:	68fb      	ldr	r3, [r7, #12]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	408c0000 	.word	0x408c0000
 80031cc:	410c0000 	.word	0x410c0000
 80031d0:	418c0000 	.word	0x418c0000
 80031d4:	420c0000 	.word	0x420c0000
 80031d8:	428c0000 	.word	0x428c0000

080031dc <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	331c      	adds	r3, #28
 80031ee:	f107 020b 	add.w	r2, r7, #11
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 f83d 	bl	8004274 <lsm6dsl_gy_data_rate_get>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003200:	f04f 33ff 	mov.w	r3, #4294967295
 8003204:	e04e      	b.n	80032a4 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	2b0a      	cmp	r3, #10
 800320a:	d846      	bhi.n	800329a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003241 	.word	0x08003241
 8003218:	0800324b 	.word	0x0800324b
 800321c:	08003253 	.word	0x08003253
 8003220:	0800325b 	.word	0x0800325b
 8003224:	08003263 	.word	0x08003263
 8003228:	0800326b 	.word	0x0800326b
 800322c:	08003273 	.word	0x08003273
 8003230:	0800327b 	.word	0x0800327b
 8003234:	08003283 	.word	0x08003283
 8003238:	0800328b 	.word	0x0800328b
 800323c:	08003293 	.word	0x08003293
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
      break;
 8003248:	e02b      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	4a17      	ldr	r2, [pc, #92]	; (80032ac <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800324e:	601a      	str	r2, [r3, #0]
      break;
 8003250:	e027      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	4a16      	ldr	r2, [pc, #88]	; (80032b0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8003256:	601a      	str	r2, [r3, #0]
      break;
 8003258:	e023      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800325e:	601a      	str	r2, [r3, #0]
      break;
 8003260:	e01f      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8003266:	601a      	str	r2, [r3, #0]
      break;
 8003268:	e01b      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	4a13      	ldr	r2, [pc, #76]	; (80032bc <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800326e:	601a      	str	r2, [r3, #0]
      break;
 8003270:	e017      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8003276:	601a      	str	r2, [r3, #0]
      break;
 8003278:	e013      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800327e:	601a      	str	r2, [r3, #0]
      break;
 8003280:	e00f      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8003286:	601a      	str	r2, [r3, #0]
      break;
 8003288:	e00b      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800328e:	601a      	str	r2, [r3, #0]
      break;
 8003290:	e007      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8003296:	601a      	str	r2, [r3, #0]
      break;
 8003298:	e003      	b.n	80032a2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295
 800329e:	60fb      	str	r3, [r7, #12]
      break;
 80032a0:	bf00      	nop
  }

  return ret;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	41480000 	.word	0x41480000
 80032b0:	41d00000 	.word	0x41d00000
 80032b4:	42500000 	.word	0x42500000
 80032b8:	42d00000 	.word	0x42d00000
 80032bc:	43500000 	.word	0x43500000
 80032c0:	43d00000 	.word	0x43d00000
 80032c4:	44504000 	.word	0x44504000
 80032c8:	44cf8000 	.word	0x44cf8000
 80032cc:	45502000 	.word	0x45502000
 80032d0:	45d02000 	.word	0x45d02000

080032d4 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d106      	bne.n	80032f8 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80032ea:	ed97 0a00 	vldr	s0, [r7]
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fcd2 	bl	8003c98 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	e005      	b.n	8003304 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80032f8:	ed97 0a00 	vldr	s0, [r7]
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fd57 	bl	8003db0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8003302:	4603      	mov	r3, r0
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	331c      	adds	r3, #28
 800331e:	f107 020b 	add.w	r2, r7, #11
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 ff3d 	bl	80041a4 <lsm6dsl_gy_full_scale_get>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
 8003334:	e030      	b.n	8003398 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8003336:	7afb      	ldrb	r3, [r7, #11]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d828      	bhi.n	800338e <LSM6DSL_GYRO_GetFullScale+0x82>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003369 	.word	0x08003369
 8003348:	08003361 	.word	0x08003361
 800334c:	08003371 	.word	0x08003371
 8003350:	0800338f 	.word	0x0800338f
 8003354:	0800337b 	.word	0x0800337b
 8003358:	0800338f 	.word	0x0800338f
 800335c:	08003385 	.word	0x08003385
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	227d      	movs	r2, #125	; 0x7d
 8003364:	601a      	str	r2, [r3, #0]
      break;
 8003366:	e016      	b.n	8003396 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	22fa      	movs	r2, #250	; 0xfa
 800336c:	601a      	str	r2, [r3, #0]
      break;
 800336e:	e012      	b.n	8003396 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003376:	601a      	str	r2, [r3, #0]
      break;
 8003378:	e00d      	b.n	8003396 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003380:	601a      	str	r2, [r3, #0]
      break;
 8003382:	e008      	b.n	8003396 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800338a:	601a      	str	r2, [r3, #0]
      break;
 800338c:	e003      	b.n	8003396 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	60fb      	str	r3, [r7, #12]
      break;
 8003394:	bf00      	nop
  }

  return ret;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b7d      	cmp	r3, #125	; 0x7d
 80033ae:	dd12      	ble.n	80033d6 <LSM6DSL_GYRO_SetFullScale+0x36>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2bfa      	cmp	r3, #250	; 0xfa
 80033b4:	dd0d      	ble.n	80033d2 <LSM6DSL_GYRO_SetFullScale+0x32>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033bc:	dd07      	ble.n	80033ce <LSM6DSL_GYRO_SetFullScale+0x2e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c4:	dc01      	bgt.n	80033ca <LSM6DSL_GYRO_SetFullScale+0x2a>
 80033c6:	2304      	movs	r3, #4
 80033c8:	e006      	b.n	80033d8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80033ca:	2306      	movs	r3, #6
 80033cc:	e004      	b.n	80033d8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80033d6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80033d8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	331c      	adds	r3, #28
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 feb8 	bl	8004158 <lsm6dsl_gy_full_scale_set>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	e000      	b.n	80033f6 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	331c      	adds	r3, #28
 800340c:	f107 0208 	add.w	r2, r7, #8
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f000 ffb6 	bl	8004384 <lsm6dsl_angular_rate_raw_get>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	e00c      	b.n	800343e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003424:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800342c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003434:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	331c      	adds	r3, #28
 8003454:	f107 0210 	add.w	r2, r7, #16
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f000 ff92 	bl	8004384 <lsm6dsl_angular_rate_raw_get>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
 800346a:	e03c      	b.n	80034e6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff fe60 	bl	8003138 <LSM6DSL_GYRO_GetSensitivity>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e030      	b.n	80034e6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003484:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003490:	edd7 7a03 	vldr	s15, [r7, #12]
 8003494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800349c:	ee17 2a90 	vmov	r2, s15
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80034a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80034b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034bc:	ee17 2a90 	vmov	r2, s15
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80034c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034c8:	ee07 3a90 	vmov	s15, r3
 80034cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80034d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034dc:	ee17 2a90 	vmov	r2, s15
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <LSM6DSL_Read_Reg>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Read_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	460b      	mov	r3, r1
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	72fb      	strb	r3, [r7, #11]
  if (lsm6dsl_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSL_OK)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f103 001c 	add.w	r0, r3, #28
 8003502:	7af9      	ldrb	r1, [r7, #11]
 8003504:	2301      	movs	r3, #1
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	f000 fd0a 	bl	8003f20 <lsm6dsl_read_reg>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <LSM6DSL_Read_Reg+0x2a>
  {
    return LSM6DSL_ERROR;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e000      	b.n	800351a <LSM6DSL_Read_Reg+0x2c>
  }

  return LSM6DSL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	70fb      	strb	r3, [r7, #3]
 800352e:	4613      	mov	r3, r2
 8003530:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f103 001c 	add.w	r0, r3, #28
 8003538:	1cba      	adds	r2, r7, #2
 800353a:	78f9      	ldrb	r1, [r7, #3]
 800353c:	2301      	movs	r3, #1
 800353e:	f000 fd07 	bl	8003f50 <lsm6dsl_write_reg>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	e000      	b.n	8003550 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	331c      	adds	r3, #28
 8003568:	f107 020c 	add.w	r2, r7, #12
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f001 f95e 	bl	8004830 <lsm6dsl_pin_int1_route_get>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e01b      	b.n	80035b8 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d811      	bhi.n	80035aa <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	b2da      	uxtb	r2, r3
 800358e:	7b3b      	ldrb	r3, [r7, #12]
 8003590:	f362 0300 	bfi	r3, r2, #0, #1
 8003594:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	331c      	adds	r3, #28
 800359a:	68f9      	ldr	r1, [r7, #12]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 ffe4 	bl	800456a <lsm6dsl_pin_int1_route_set>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d006      	beq.n	80035b6 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 80035a8:	e002      	b.n	80035b0 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295
 80035ae:	e003      	b.n	80035b8 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 80035b0:	f04f 33ff 	mov.w	r3, #4294967295
 80035b4:	e000      	b.n	80035b8 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <LSM6DSL_Set_DRDY_Mode>:
 * @param  pObj the device pObj
 * @param  Val the value of drdy_pulsed in reg LSM6DSL_DRDY_PULSE_CFG_G
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Set_DRDY_Mode(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_drdy_pulsed_g_t reg;

  reg = (Val == 0U)  ? LSM6DSL_DRDY_LATCHED
      : (Val == 1U)  ? LSM6DSL_DRDY_PULSED
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <LSM6DSL_Set_DRDY_Mode+0x20>
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <LSM6DSL_Set_DRDY_Mode+0x1c>
 80035d8:	2301      	movs	r3, #1
 80035da:	e002      	b.n	80035e2 <LSM6DSL_Set_DRDY_Mode+0x22>
 80035dc:	2302      	movs	r3, #2
 80035de:	e000      	b.n	80035e2 <LSM6DSL_Set_DRDY_Mode+0x22>
 80035e0:	2300      	movs	r3, #0
  reg = (Val == 0U)  ? LSM6DSL_DRDY_LATCHED
 80035e2:	73fb      	strb	r3, [r7, #15]
      :                LSM6DSL_DRDY_ND;

  if (lsm6dsl_data_ready_mode_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	331c      	adds	r3, #28
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 ff5f 	bl	80044b0 <lsm6dsl_data_ready_mode_set>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <LSM6DSL_Set_DRDY_Mode+0x3e>
  {
    return LSM6DSL_ERROR;
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	e000      	b.n	8003600 <LSM6DSL_Set_DRDY_Mode+0x40>
  }

  return LSM6DSL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <LSM6DSL_FIFO_Get_Num_Samples>:
 * @param  pObj the device pObj
 * @param  NumSamples number of samples
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Get_Num_Samples(LSM6DSL_Object_t *pObj, uint16_t *NumSamples)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_fifo_data_level_get(&(pObj->Ctx), NumSamples) != LSM6DSL_OK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	331c      	adds	r3, #28
 8003616:	6839      	ldr	r1, [r7, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fa15 	bl	8004a48 <lsm6dsl_fifo_data_level_get>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <LSM6DSL_FIFO_Get_Num_Samples+0x22>
  {
    return LSM6DSL_ERROR;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	e000      	b.n	800362c <LSM6DSL_FIFO_Get_Num_Samples+0x24>
  }

  return LSM6DSL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <LSM6DSL_FIFO_Set_ODR_Value>:
 * @param  pObj the device pObj
 * @param  Odr FIFO ODR value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_ODR_Value(LSM6DSL_Object_t *pObj, float Odr)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_fifo_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_FIFO_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_FIFO_26Hz
 8003640:	edd7 7a00 	vldr	s15, [r7]
 8003644:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	d801      	bhi.n	8003656 <LSM6DSL_FIFO_Set_ODR_Value+0x22>
 8003652:	2301      	movs	r3, #1
 8003654:	e058      	b.n	8003708 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 8003656:	edd7 7a00 	vldr	s15, [r7]
 800365a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800365e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003666:	d801      	bhi.n	800366c <LSM6DSL_FIFO_Set_ODR_Value+0x38>
 8003668:	2302      	movs	r3, #2
 800366a:	e04d      	b.n	8003708 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 800366c:	edd7 7a00 	vldr	s15, [r7]
 8003670:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003730 <LSM6DSL_FIFO_Set_ODR_Value+0xfc>
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	d801      	bhi.n	8003682 <LSM6DSL_FIFO_Set_ODR_Value+0x4e>
 800367e:	2303      	movs	r3, #3
 8003680:	e042      	b.n	8003708 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 8003682:	edd7 7a00 	vldr	s15, [r7]
 8003686:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003734 <LSM6DSL_FIFO_Set_ODR_Value+0x100>
 800368a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003692:	d801      	bhi.n	8003698 <LSM6DSL_FIFO_Set_ODR_Value+0x64>
 8003694:	2304      	movs	r3, #4
 8003696:	e037      	b.n	8003708 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 8003698:	edd7 7a00 	vldr	s15, [r7]
 800369c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003738 <LSM6DSL_FIFO_Set_ODR_Value+0x104>
 80036a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a8:	d801      	bhi.n	80036ae <LSM6DSL_FIFO_Set_ODR_Value+0x7a>
 80036aa:	2305      	movs	r3, #5
 80036ac:	e02c      	b.n	8003708 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 80036ae:	edd7 7a00 	vldr	s15, [r7]
 80036b2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800373c <LSM6DSL_FIFO_Set_ODR_Value+0x108>
 80036b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036be:	d801      	bhi.n	80036c4 <LSM6DSL_FIFO_Set_ODR_Value+0x90>
 80036c0:	2306      	movs	r3, #6
 80036c2:	e021      	b.n	8003708 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 80036c4:	edd7 7a00 	vldr	s15, [r7]
 80036c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003740 <LSM6DSL_FIFO_Set_ODR_Value+0x10c>
 80036cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	d801      	bhi.n	80036da <LSM6DSL_FIFO_Set_ODR_Value+0xa6>
 80036d6:	2307      	movs	r3, #7
 80036d8:	e016      	b.n	8003708 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 80036da:	edd7 7a00 	vldr	s15, [r7]
 80036de:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003744 <LSM6DSL_FIFO_Set_ODR_Value+0x110>
 80036e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	d801      	bhi.n	80036f0 <LSM6DSL_FIFO_Set_ODR_Value+0xbc>
 80036ec:	2308      	movs	r3, #8
 80036ee:	e00b      	b.n	8003708 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 80036f0:	edd7 7a00 	vldr	s15, [r7]
 80036f4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003748 <LSM6DSL_FIFO_Set_ODR_Value+0x114>
 80036f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003700:	d801      	bhi.n	8003706 <LSM6DSL_FIFO_Set_ODR_Value+0xd2>
 8003702:	2309      	movs	r3, #9
 8003704:	e000      	b.n	8003708 <LSM6DSL_FIFO_Set_ODR_Value+0xd4>
 8003706:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_FIFO_12Hz5
 8003708:	73fb      	strb	r3, [r7, #15]
          : (Odr <=  833.0f) ? LSM6DSL_FIFO_833Hz
          : (Odr <= 1660.0f) ? LSM6DSL_FIFO_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_FIFO_3k33Hz
          :                    LSM6DSL_FIFO_6k66Hz;

  if (lsm6dsl_fifo_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	331c      	adds	r3, #28
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f001 fa84 	bl	8004c20 <lsm6dsl_fifo_data_rate_set>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <LSM6DSL_FIFO_Set_ODR_Value+0xf0>
  {
    return LSM6DSL_ERROR;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	e000      	b.n	8003726 <LSM6DSL_FIFO_Set_ODR_Value+0xf2>
  }

  return LSM6DSL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	42500000 	.word	0x42500000
 8003734:	42d00000 	.word	0x42d00000
 8003738:	43500000 	.word	0x43500000
 800373c:	43d00000 	.word	0x43d00000
 8003740:	44504000 	.word	0x44504000
 8003744:	44cf8000 	.word	0x44cf8000
 8003748:	45502000 	.word	0x45502000

0800374c <LSM6DSL_FIFO_Set_INT1_FIFO_Full>:
 * @param  pObj the device pObj
 * @param  Status FIFO full interrupt on INT1 pin status
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_INT1_FIFO_Full(LSM6DSL_Object_t *pObj, uint8_t Status)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_reg_t reg;

  if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_INT1_CTRL, &reg.byte, 1) != LSM6DSL_OK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f103 001c 	add.w	r0, r3, #28
 800375e:	f107 020c 	add.w	r2, r7, #12
 8003762:	2301      	movs	r3, #1
 8003764:	210d      	movs	r1, #13
 8003766:	f000 fbdb 	bl	8003f20 <lsm6dsl_read_reg>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <LSM6DSL_FIFO_Set_INT1_FIFO_Full+0x2a>
  {
    return LSM6DSL_ERROR;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e017      	b.n	80037a6 <LSM6DSL_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  reg.int1_ctrl.int1_full_flag = Status;
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	b2da      	uxtb	r2, r3
 800377e:	7b3b      	ldrb	r3, [r7, #12]
 8003780:	f362 1345 	bfi	r3, r2, #5, #1
 8003784:	733b      	strb	r3, [r7, #12]

  if (lsm6dsl_write_reg(&(pObj->Ctx), LSM6DSL_INT1_CTRL, &reg.byte, 1) != LSM6DSL_OK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f103 001c 	add.w	r0, r3, #28
 800378c:	f107 020c 	add.w	r2, r7, #12
 8003790:	2301      	movs	r3, #1
 8003792:	210d      	movs	r1, #13
 8003794:	f000 fbdc 	bl	8003f50 <lsm6dsl_write_reg>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <LSM6DSL_FIFO_Set_INT1_FIFO_Full+0x58>
  {
    return LSM6DSL_ERROR;
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	e000      	b.n	80037a6 <LSM6DSL_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  return LSM6DSL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <LSM6DSL_FIFO_Set_Watermark_Level>:
 * @param  pObj the device pObj
 * @param  Watermark FIFO watermark level
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_Watermark_Level(LSM6DSL_Object_t *pObj, uint16_t Watermark)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	807b      	strh	r3, [r7, #2]
  if (lsm6dsl_fifo_watermark_set(&(pObj->Ctx), Watermark) != LSM6DSL_OK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	331c      	adds	r3, #28
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 f90a 	bl	80049dc <lsm6dsl_fifo_watermark_set>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <LSM6DSL_FIFO_Set_Watermark_Level+0x26>
  {
    return LSM6DSL_ERROR;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e000      	b.n	80037d6 <LSM6DSL_FIFO_Set_Watermark_Level+0x28>
  }

  return LSM6DSL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <LSM6DSL_FIFO_Set_Stop_On_Fth>:
 * @param  pObj the device pObj
 * @param  Status FIFO stop on watermark status
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_Stop_On_Fth(LSM6DSL_Object_t *pObj, uint8_t Status)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  if (lsm6dsl_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != LSM6DSL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	331c      	adds	r3, #28
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 f9c8 	bl	8004b88 <lsm6dsl_fifo_stop_on_wtm_set>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <LSM6DSL_FIFO_Set_Stop_On_Fth+0x26>
  {
    return LSM6DSL_ERROR;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	e000      	b.n	8003806 <LSM6DSL_FIFO_Set_Stop_On_Fth+0x28>
  }

  return LSM6DSL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <LSM6DSL_FIFO_Set_Mode>:
 * @param  pObj the device pObj
 * @param  Mode FIFO mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Set_Mode(LSM6DSL_Object_t *pObj, uint8_t Mode)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_fifo_mode_t)Mode)
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	2b06      	cmp	r3, #6
 8003822:	bf8c      	ite	hi
 8003824:	2201      	movhi	r2, #1
 8003826:	2200      	movls	r2, #0
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	2a00      	cmp	r2, #0
 800382c:	d10b      	bne.n	8003846 <LSM6DSL_FIFO_Set_Mode+0x38>
 800382e:	2201      	movs	r2, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <LSM6DSL_FIFO_Set_Mode+0x40>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
    case LSM6DSL_STREAM_MODE:
      break;

    default:
      ret = LSM6DSL_ERROR;
 8003846:	f04f 33ff 	mov.w	r3, #4294967295
 800384a:	60fb      	str	r3, [r7, #12]
      break;
 800384c:	e000      	b.n	8003850 <LSM6DSL_FIFO_Set_Mode+0x42>
      break;
 800384e:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d101      	bne.n	800385c <LSM6DSL_FIFO_Set_Mode+0x4e>
  {
    return ret;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	e00d      	b.n	8003878 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), (lsm6dsl_fifo_mode_t)Mode) != LSM6DSL_OK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	331c      	adds	r3, #28
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f001 f9b5 	bl	8004bd4 <lsm6dsl_fifo_mode_set>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <LSM6DSL_FIFO_Set_Mode+0x68>
  {
    return LSM6DSL_ERROR;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295
 8003874:	e000      	b.n	8003878 <LSM6DSL_FIFO_Set_Mode+0x6a>
  }

  return ret;
 8003876:	68fb      	ldr	r3, [r7, #12]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <LSM6DSL_FIFO_Get_Pattern>:
 * @param  pObj the device pObj
 * @param  Pattern FIFO pattern
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Get_Pattern(LSM6DSL_Object_t *pObj, uint16_t *Pattern)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_fifo_pattern_get(&(pObj->Ctx), Pattern) != LSM6DSL_OK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	331c      	adds	r3, #28
 800388e:	6839      	ldr	r1, [r7, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f001 f903 	bl	8004a9c <lsm6dsl_fifo_pattern_get>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <LSM6DSL_FIFO_Get_Pattern+0x22>
  {
    return LSM6DSL_ERROR;
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	e000      	b.n	80038a4 <LSM6DSL_FIFO_Get_Pattern+0x24>
  }

  return LSM6DSL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <LSM6DSL_FIFO_Get_Data>:
 * @param  pObj the device pObj
 * @param  Data FIFO raw data array [2]
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_Get_Data(LSM6DSL_Object_t *pObj, uint8_t *Data)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_FIFO_DATA_OUT_L, Data, 2) != LSM6DSL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f103 001c 	add.w	r0, r3, #28
 80038bc:	2302      	movs	r3, #2
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	213e      	movs	r1, #62	; 0x3e
 80038c2:	f000 fb2d 	bl	8003f20 <lsm6dsl_read_reg>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <LSM6DSL_FIFO_Get_Data+0x26>
  {
    return LSM6DSL_ERROR;
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295
 80038d0:	e000      	b.n	80038d4 <LSM6DSL_FIFO_Get_Data+0x28>
  }

  return LSM6DSL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <LSM6DSL_FIFO_ACC_Set_Decimation>:
 * @param  pObj the device pObj
 * @param  Decimation FIFO accelero decimation
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_ACC_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_xl_t)Decimation)
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	2b07      	cmp	r3, #7
 80038f0:	d903      	bls.n	80038fa <LSM6DSL_FIFO_ACC_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_XL_DEC_16:
    case LSM6DSL_FIFO_XL_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295
 80038f6:	60fb      	str	r3, [r7, #12]
      break;
 80038f8:	e000      	b.n	80038fc <LSM6DSL_FIFO_ACC_Set_Decimation+0x20>
      break;
 80038fa:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d101      	bne.n	8003908 <LSM6DSL_FIFO_ACC_Set_Decimation+0x2c>
  {
    return ret;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	e00d      	b.n	8003924 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_xl_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_xl_t)Decimation) != LSM6DSL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	331c      	adds	r3, #28
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f8ed 	bl	8004af0 <lsm6dsl_fifo_xl_batch_set>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <LSM6DSL_FIFO_ACC_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	e000      	b.n	8003924 <LSM6DSL_FIFO_ACC_Set_Decimation+0x48>
  }

  return ret;
 8003922:	68fb      	ldr	r3, [r7, #12]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <LSM6DSL_FIFO_ACC_Get_Axis>:
 * @param  pObj the device pObj
 * @param  Acceleration FIFO single accelero axis [mg]
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_ACC_Get_Axis(LSM6DSL_Object_t *pObj, int32_t *Acceleration)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint8_t data[2];
  int16_t data_raw;
  float sensitivity = 0.0f;
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	60bb      	str	r3, [r7, #8]
  float acceleration_float;

  if (LSM6DSL_FIFO_Get_Data(pObj, data) != LSM6DSL_OK)
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ffb2 	bl	80038ac <LSM6DSL_FIFO_Get_Data>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <LSM6DSL_FIFO_ACC_Get_Axis+0x28>
  {
    return LSM6DSL_ERROR;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e027      	b.n	80039a4 <LSM6DSL_FIFO_ACC_Get_Axis+0x78>
  }

  data_raw = ((int16_t)data[1] << 8) | data[0];
 8003954:	7b7b      	ldrb	r3, [r7, #13]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	b21a      	sxth	r2, r3
 800395a:	7b3b      	ldrb	r3, [r7, #12]
 800395c:	b21b      	sxth	r3, r3
 800395e:	4313      	orrs	r3, r2
 8003960:	82fb      	strh	r3, [r7, #22]

  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003962:	f107 0308 	add.w	r3, r7, #8
 8003966:	4619      	mov	r1, r3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff f9cb 	bl	8002d04 <LSM6DSL_ACC_GetSensitivity>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <LSM6DSL_FIFO_ACC_Get_Axis+0x4e>
  {
    return LSM6DSL_ERROR;
 8003974:	f04f 33ff 	mov.w	r3, #4294967295
 8003978:	e014      	b.n	80039a4 <LSM6DSL_FIFO_ACC_Get_Axis+0x78>
  }

  acceleration_float = (float)data_raw * sensitivity;
 800397a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003986:	edd7 7a02 	vldr	s15, [r7, #8]
 800398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398e:	edc7 7a04 	vstr	s15, [r7, #16]
  *Acceleration = (int32_t)acceleration_float;
 8003992:	edd7 7a04 	vldr	s15, [r7, #16]
 8003996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800399a:	ee17 2a90 	vmov	r2, s15
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	601a      	str	r2, [r3, #0]

  return LSM6DSL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <LSM6DSL_FIFO_GYRO_Set_Decimation>:
 * @param  pObj the device pObj
 * @param  Decimation FIFO gyro decimation
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_GYRO_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((lsm6dsl_dec_fifo_gyro_t)Decimation)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	2b07      	cmp	r3, #7
 80039c0:	d903      	bls.n	80039ca <LSM6DSL_FIFO_GYRO_Set_Decimation+0x1e>
    case LSM6DSL_FIFO_GY_DEC_16:
    case LSM6DSL_FIFO_GY_DEC_32:
      break;

    default:
      ret = LSM6DSL_ERROR;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295
 80039c6:	60fb      	str	r3, [r7, #12]
      break;
 80039c8:	e000      	b.n	80039cc <LSM6DSL_FIFO_GYRO_Set_Decimation+0x20>
      break;
 80039ca:	bf00      	nop
  }

  if (ret == LSM6DSL_ERROR)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d101      	bne.n	80039d8 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x2c>
  {
    return ret;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	e00d      	b.n	80039f4 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  if (lsm6dsl_fifo_gy_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_gyro_t)Decimation) != LSM6DSL_OK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	331c      	adds	r3, #28
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f8ab 	bl	8004b3c <lsm6dsl_fifo_gy_batch_set>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x46>
  {
    return LSM6DSL_ERROR;
 80039ec:	f04f 33ff 	mov.w	r3, #4294967295
 80039f0:	e000      	b.n	80039f4 <LSM6DSL_FIFO_GYRO_Set_Decimation+0x48>
  }

  return ret;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <LSM6DSL_FIFO_GYRO_Get_Axis>:
 * @param  pObj the device pObj
 * @param  AngularVelocity FIFO single gyro axis [mDPS]
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_FIFO_GYRO_Get_Axis(LSM6DSL_Object_t *pObj, int32_t *AngularVelocity)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint8_t data[2];
  int16_t data_raw;
  float sensitivity = 0.0f;
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  float angular_velocity_float;

  if (LSM6DSL_FIFO_Get_Data(pObj, data) != LSM6DSL_OK)
 8003a0c:	f107 030c 	add.w	r3, r7, #12
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff4a 	bl	80038ac <LSM6DSL_FIFO_Get_Data>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <LSM6DSL_FIFO_GYRO_Get_Axis+0x28>
  {
    return LSM6DSL_ERROR;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e027      	b.n	8003a74 <LSM6DSL_FIFO_GYRO_Get_Axis+0x78>
  }

  data_raw = ((int16_t)data[1] << 8) | data[0];
 8003a24:	7b7b      	ldrb	r3, [r7, #13]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	b21a      	sxth	r2, r3
 8003a2a:	7b3b      	ldrb	r3, [r7, #12]
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	82fb      	strh	r3, [r7, #22]

  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fb7d 	bl	8003138 <LSM6DSL_GYRO_GetSensitivity>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <LSM6DSL_FIFO_GYRO_Get_Axis+0x4e>
  {
    return LSM6DSL_ERROR;
 8003a44:	f04f 33ff 	mov.w	r3, #4294967295
 8003a48:	e014      	b.n	8003a74 <LSM6DSL_FIFO_GYRO_Get_Axis+0x78>
  }

  angular_velocity_float = (float)data_raw * sensitivity;
 8003a4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a56:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a04 	vstr	s15, [r7, #16]
  *AngularVelocity = (int32_t)angular_velocity_float;
 8003a62:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a6a:	ee17 2a90 	vmov	r2, s15
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	601a      	str	r2, [r3, #0]

  return LSM6DSL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003a88:	edd7 7a00 	vldr	s15, [r7]
 8003a8c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a98:	d801      	bhi.n	8003a9e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e058      	b.n	8003b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003a9e:	edd7 7a00 	vldr	s15, [r7]
 8003aa2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aae:	d801      	bhi.n	8003ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e04d      	b.n	8003b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003ab4:	edd7 7a00 	vldr	s15, [r7]
 8003ab8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003b78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac4:	d801      	bhi.n	8003aca <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e042      	b.n	8003b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003aca:	edd7 7a00 	vldr	s15, [r7]
 8003ace:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003b7c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ada:	d801      	bhi.n	8003ae0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003adc:	2304      	movs	r3, #4
 8003ade:	e037      	b.n	8003b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003ae0:	edd7 7a00 	vldr	s15, [r7]
 8003ae4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003b80 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af0:	d801      	bhi.n	8003af6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003af2:	2305      	movs	r3, #5
 8003af4:	e02c      	b.n	8003b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003af6:	edd7 7a00 	vldr	s15, [r7]
 8003afa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003b84 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8003afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	d801      	bhi.n	8003b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003b08:	2306      	movs	r3, #6
 8003b0a:	e021      	b.n	8003b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003b0c:	edd7 7a00 	vldr	s15, [r7]
 8003b10:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003b88 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1c:	d801      	bhi.n	8003b22 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8003b1e:	2307      	movs	r3, #7
 8003b20:	e016      	b.n	8003b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003b22:	edd7 7a00 	vldr	s15, [r7]
 8003b26:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003b8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8003b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b32:	d801      	bhi.n	8003b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003b34:	2308      	movs	r3, #8
 8003b36:	e00b      	b.n	8003b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003b38:	edd7 7a00 	vldr	s15, [r7]
 8003b3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003b90 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	d801      	bhi.n	8003b4e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8003b4a:	2309      	movs	r3, #9
 8003b4c:	e000      	b.n	8003b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003b4e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003b50:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	331c      	adds	r3, #28
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa6e 	bl	800403c <lsm6dsl_xl_data_rate_set>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6a:	e000      	b.n	8003b6e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	42500000 	.word	0x42500000
 8003b7c:	42d00000 	.word	0x42d00000
 8003b80:	43500000 	.word	0x43500000
 8003b84:	43d00000 	.word	0x43d00000
 8003b88:	44504000 	.word	0x44504000
 8003b8c:	44cf8000 	.word	0x44cf8000
 8003b90:	45502000 	.word	0x45502000

08003b94 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8003ba0:	edd7 7a00 	vldr	s15, [r7]
 8003ba4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb0:	d801      	bhi.n	8003bb6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e058      	b.n	8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003bb6:	edd7 7a00 	vldr	s15, [r7]
 8003bba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc6:	d801      	bhi.n	8003bcc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e04d      	b.n	8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003bcc:	edd7 7a00 	vldr	s15, [r7]
 8003bd0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003c7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	d801      	bhi.n	8003be2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003bde:	2303      	movs	r3, #3
 8003be0:	e042      	b.n	8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003be2:	edd7 7a00 	vldr	s15, [r7]
 8003be6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003c80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8003bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf2:	d801      	bhi.n	8003bf8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e037      	b.n	8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003bf8:	edd7 7a00 	vldr	s15, [r7]
 8003bfc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003c84 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c08:	d801      	bhi.n	8003c0e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003c0a:	2305      	movs	r3, #5
 8003c0c:	e02c      	b.n	8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003c0e:	edd7 7a00 	vldr	s15, [r7]
 8003c12:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003c88 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1e:	d801      	bhi.n	8003c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003c20:	2306      	movs	r3, #6
 8003c22:	e021      	b.n	8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003c24:	edd7 7a00 	vldr	s15, [r7]
 8003c28:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003c8c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c34:	d801      	bhi.n	8003c3a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003c36:	2307      	movs	r3, #7
 8003c38:	e016      	b.n	8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003c3a:	edd7 7a00 	vldr	s15, [r7]
 8003c3e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003c90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8003c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4a:	d801      	bhi.n	8003c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	e00b      	b.n	8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003c50:	edd7 7a00 	vldr	s15, [r7]
 8003c54:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003c94 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c60:	d801      	bhi.n	8003c66 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8003c62:	2309      	movs	r3, #9
 8003c64:	e000      	b.n	8003c68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003c66:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	42500000 	.word	0x42500000
 8003c80:	42d00000 	.word	0x42d00000
 8003c84:	43500000 	.word	0x43500000
 8003c88:	43d00000 	.word	0x43d00000
 8003c8c:	44504000 	.word	0x44504000
 8003c90:	44cf8000 	.word	0x44cf8000
 8003c94:	45502000 	.word	0x45502000

08003c98 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003ca4:	edd7 7a00 	vldr	s15, [r7]
 8003ca8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb4:	d801      	bhi.n	8003cba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e058      	b.n	8003d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003cba:	edd7 7a00 	vldr	s15, [r7]
 8003cbe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cca:	d801      	bhi.n	8003cd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e04d      	b.n	8003d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003cd0:	edd7 7a00 	vldr	s15, [r7]
 8003cd4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003d94 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce0:	d801      	bhi.n	8003ce6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e042      	b.n	8003d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ce6:	edd7 7a00 	vldr	s15, [r7]
 8003cea:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003d98 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8003cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf6:	d801      	bhi.n	8003cfc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	e037      	b.n	8003d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003cfc:	edd7 7a00 	vldr	s15, [r7]
 8003d00:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003d9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0c:	d801      	bhi.n	8003d12 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8003d0e:	2305      	movs	r3, #5
 8003d10:	e02c      	b.n	8003d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003d12:	edd7 7a00 	vldr	s15, [r7]
 8003d16:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003da0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8003d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d22:	d801      	bhi.n	8003d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003d24:	2306      	movs	r3, #6
 8003d26:	e021      	b.n	8003d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003d28:	edd7 7a00 	vldr	s15, [r7]
 8003d2c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003da4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d38:	d801      	bhi.n	8003d3e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8003d3a:	2307      	movs	r3, #7
 8003d3c:	e016      	b.n	8003d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003d3e:	edd7 7a00 	vldr	s15, [r7]
 8003d42:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003da8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4e:	d801      	bhi.n	8003d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003d50:	2308      	movs	r3, #8
 8003d52:	e00b      	b.n	8003d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003d54:	edd7 7a00 	vldr	s15, [r7]
 8003d58:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003dac <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d64:	d801      	bhi.n	8003d6a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003d66:	2309      	movs	r3, #9
 8003d68:	e000      	b.n	8003d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003d6a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003d6c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	331c      	adds	r3, #28
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	4611      	mov	r1, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fa56 	bl	8004228 <lsm6dsl_gy_data_rate_set>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295
 8003d86:	e000      	b.n	8003d8a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	42500000 	.word	0x42500000
 8003d98:	42d00000 	.word	0x42d00000
 8003d9c:	43500000 	.word	0x43500000
 8003da0:	43d00000 	.word	0x43d00000
 8003da4:	44504000 	.word	0x44504000
 8003da8:	44cf8000 	.word	0x44cf8000
 8003dac:	45502000 	.word	0x45502000

08003db0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8003dbc:	edd7 7a00 	vldr	s15, [r7]
 8003dc0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dcc:	d801      	bhi.n	8003dd2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e058      	b.n	8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003dd2:	edd7 7a00 	vldr	s15, [r7]
 8003dd6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de2:	d801      	bhi.n	8003de8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e04d      	b.n	8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003de8:	edd7 7a00 	vldr	s15, [r7]
 8003dec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003e98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8003df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df8:	d801      	bhi.n	8003dfe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e042      	b.n	8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003dfe:	edd7 7a00 	vldr	s15, [r7]
 8003e02:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003e9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8003e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0e:	d801      	bhi.n	8003e14 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003e10:	2304      	movs	r3, #4
 8003e12:	e037      	b.n	8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003e14:	edd7 7a00 	vldr	s15, [r7]
 8003e18:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003ea0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8003e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e24:	d801      	bhi.n	8003e2a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003e26:	2305      	movs	r3, #5
 8003e28:	e02c      	b.n	8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003e2a:	edd7 7a00 	vldr	s15, [r7]
 8003e2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ea4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3a:	d801      	bhi.n	8003e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003e3c:	2306      	movs	r3, #6
 8003e3e:	e021      	b.n	8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003e40:	edd7 7a00 	vldr	s15, [r7]
 8003e44:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8003e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e50:	d801      	bhi.n	8003e56 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003e52:	2307      	movs	r3, #7
 8003e54:	e016      	b.n	8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003e56:	edd7 7a00 	vldr	s15, [r7]
 8003e5a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003eac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8003e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	d801      	bhi.n	8003e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	e00b      	b.n	8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003e6c:	edd7 7a00 	vldr	s15, [r7]
 8003e70:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003eb0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7c:	d801      	bhi.n	8003e82 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8003e7e:	2309      	movs	r3, #9
 8003e80:	e000      	b.n	8003e84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003e82:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	42500000 	.word	0x42500000
 8003e9c:	42d00000 	.word	0x42d00000
 8003ea0:	43500000 	.word	0x43500000
 8003ea4:	43d00000 	.word	0x43d00000
 8003ea8:	44504000 	.word	0x44504000
 8003eac:	44cf8000 	.word	0x44cf8000
 8003eb0:	45502000 	.word	0x45502000

08003eb4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	72fb      	strb	r3, [r7, #11]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	695c      	ldr	r4, [r3, #20]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	7b1b      	ldrb	r3, [r3, #12]
 8003ed4:	b298      	uxth	r0, r3
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	b299      	uxth	r1, r3
 8003eda:	893b      	ldrh	r3, [r7, #8]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	47a0      	blx	r4
 8003ee0:	4603      	mov	r3, r0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd90      	pop	{r4, r7, pc}

08003eea <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003eea:	b590      	push	{r4, r7, lr}
 8003eec:	b087      	sub	sp, #28
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	72fb      	strb	r3, [r7, #11]
 8003efa:	4613      	mov	r3, r2
 8003efc:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	691c      	ldr	r4, [r3, #16]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	7b1b      	ldrb	r3, [r3, #12]
 8003f0a:	b298      	uxth	r0, r3
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	b299      	uxth	r1, r3
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	47a0      	blx	r4
 8003f16:	4603      	mov	r3, r0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd90      	pop	{r4, r7, pc}

08003f20 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	72fb      	strb	r3, [r7, #11]
 8003f30:	4613      	mov	r3, r2
 8003f32:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685c      	ldr	r4, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6898      	ldr	r0, [r3, #8]
 8003f3c:	893b      	ldrh	r3, [r7, #8]
 8003f3e:	7af9      	ldrb	r1, [r7, #11]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	47a0      	blx	r4
 8003f44:	6178      	str	r0, [r7, #20]
  return ret;
 8003f46:	697b      	ldr	r3, [r7, #20]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd90      	pop	{r4, r7, pc}

08003f50 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	72fb      	strb	r3, [r7, #11]
 8003f60:	4613      	mov	r3, r2
 8003f62:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681c      	ldr	r4, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6898      	ldr	r0, [r3, #8]
 8003f6c:	893b      	ldrh	r3, [r7, #8]
 8003f6e:	7af9      	ldrb	r1, [r7, #11]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	47a0      	blx	r4
 8003f74:	6178      	str	r0, [r7, #20]
  return ret;
 8003f76:	697b      	ldr	r3, [r7, #20]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd90      	pop	{r4, r7, pc}

08003f80 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8003f8c:	f107 0208 	add.w	r2, r7, #8
 8003f90:	2301      	movs	r3, #1
 8003f92:	2110      	movs	r1, #16
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ffc3 	bl	8003f20 <lsm6dsl_read_reg>
 8003f9a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	7a3b      	ldrb	r3, [r7, #8]
 8003fac:	f362 0383 	bfi	r3, r2, #2, #2
 8003fb0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8003fb2:	f107 0208 	add.w	r2, r7, #8
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	2110      	movs	r1, #16
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ffc8 	bl	8003f50 <lsm6dsl_write_reg>
 8003fc0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8003fd6:	f107 0208 	add.w	r2, r7, #8
 8003fda:	2301      	movs	r3, #1
 8003fdc:	2110      	movs	r1, #16
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff ff9e 	bl	8003f20 <lsm6dsl_read_reg>
 8003fe4:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8003fe6:	7a3b      	ldrb	r3, [r7, #8]
 8003fe8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d81a      	bhi.n	8004028 <lsm6dsl_xl_full_scale_get+0x5c>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <lsm6dsl_xl_full_scale_get+0x2c>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	08004011 	.word	0x08004011
 8004000:	08004019 	.word	0x08004019
 8004004:	08004021 	.word	0x08004021
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]
      break;
 800400e:	e00f      	b.n	8004030 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
      break;
 8004016:	e00b      	b.n	8004030 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2202      	movs	r2, #2
 800401c:	701a      	strb	r2, [r3, #0]
      break;
 800401e:	e007      	b.n	8004030 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2203      	movs	r2, #3
 8004024:	701a      	strb	r2, [r3, #0]
      break;
 8004026:	e003      	b.n	8004030 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2204      	movs	r2, #4
 800402c:	701a      	strb	r2, [r3, #0]
      break;
 800402e:	bf00      	nop
  }

  return ret;
 8004030:	68fb      	ldr	r3, [r7, #12]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop

0800403c <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004048:	f107 0208 	add.w	r2, r7, #8
 800404c:	2301      	movs	r3, #1
 800404e:	2110      	movs	r1, #16
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff65 	bl	8003f20 <lsm6dsl_read_reg>
 8004056:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	b2da      	uxtb	r2, r3
 8004066:	7a3b      	ldrb	r3, [r7, #8]
 8004068:	f362 1307 	bfi	r3, r2, #4, #4
 800406c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800406e:	f107 0208 	add.w	r2, r7, #8
 8004072:	2301      	movs	r3, #1
 8004074:	2110      	movs	r1, #16
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ff6a 	bl	8003f50 <lsm6dsl_write_reg>
 800407c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800407e:	68fb      	ldr	r3, [r7, #12]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004092:	f107 0208 	add.w	r2, r7, #8
 8004096:	2301      	movs	r3, #1
 8004098:	2110      	movs	r1, #16
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff ff40 	bl	8003f20 <lsm6dsl_read_reg>
 80040a0:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 80040a2:	7a3b      	ldrb	r3, [r7, #8]
 80040a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b0b      	cmp	r3, #11
 80040ac:	d84a      	bhi.n	8004144 <lsm6dsl_xl_data_rate_get+0xbc>
 80040ae:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <lsm6dsl_xl_data_rate_get+0x2c>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	080040e5 	.word	0x080040e5
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040fd 	.word	0x080040fd
 80040c4:	08004105 	.word	0x08004105
 80040c8:	0800410d 	.word	0x0800410d
 80040cc:	08004115 	.word	0x08004115
 80040d0:	0800411d 	.word	0x0800411d
 80040d4:	08004125 	.word	0x08004125
 80040d8:	0800412d 	.word	0x0800412d
 80040dc:	08004135 	.word	0x08004135
 80040e0:	0800413d 	.word	0x0800413d
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
      break;
 80040ea:	e02f      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
      break;
 80040f2:	e02b      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2202      	movs	r2, #2
 80040f8:	701a      	strb	r2, [r3, #0]
      break;
 80040fa:	e027      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2203      	movs	r2, #3
 8004100:	701a      	strb	r2, [r3, #0]
      break;
 8004102:	e023      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2204      	movs	r2, #4
 8004108:	701a      	strb	r2, [r3, #0]
      break;
 800410a:	e01f      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2205      	movs	r2, #5
 8004110:	701a      	strb	r2, [r3, #0]
      break;
 8004112:	e01b      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2206      	movs	r2, #6
 8004118:	701a      	strb	r2, [r3, #0]
      break;
 800411a:	e017      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2207      	movs	r2, #7
 8004120:	701a      	strb	r2, [r3, #0]
      break;
 8004122:	e013      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2208      	movs	r2, #8
 8004128:	701a      	strb	r2, [r3, #0]
      break;
 800412a:	e00f      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2209      	movs	r2, #9
 8004130:	701a      	strb	r2, [r3, #0]
      break;
 8004132:	e00b      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	220a      	movs	r2, #10
 8004138:	701a      	strb	r2, [r3, #0]
      break;
 800413a:	e007      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	220b      	movs	r2, #11
 8004140:	701a      	strb	r2, [r3, #0]
      break;
 8004142:	e003      	b.n	800414c <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	220c      	movs	r2, #12
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	bf00      	nop
  }

  return ret;
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop

08004158 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004164:	f107 0208 	add.w	r2, r7, #8
 8004168:	2301      	movs	r3, #1
 800416a:	2111      	movs	r1, #17
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fed7 	bl	8003f20 <lsm6dsl_read_reg>
 8004172:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	b2da      	uxtb	r2, r3
 8004182:	7a3b      	ldrb	r3, [r7, #8]
 8004184:	f362 0343 	bfi	r3, r2, #1, #3
 8004188:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800418a:	f107 0208 	add.w	r2, r7, #8
 800418e:	2301      	movs	r3, #1
 8004190:	2111      	movs	r1, #17
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fedc 	bl	8003f50 <lsm6dsl_write_reg>
 8004198:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80041ae:	f107 0208 	add.w	r2, r7, #8
 80041b2:	2301      	movs	r3, #1
 80041b4:	2111      	movs	r1, #17
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff feb2 	bl	8003f20 <lsm6dsl_read_reg>
 80041bc:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 80041be:	7a3b      	ldrb	r3, [r7, #8]
 80041c0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d824      	bhi.n	8004214 <lsm6dsl_gy_full_scale_get+0x70>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <lsm6dsl_gy_full_scale_get+0x2c>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041ed 	.word	0x080041ed
 80041d4:	080041f5 	.word	0x080041f5
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	08004215 	.word	0x08004215
 80041e0:	08004205 	.word	0x08004205
 80041e4:	08004215 	.word	0x08004215
 80041e8:	0800420d 	.word	0x0800420d
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
      break;
 80041f2:	e013      	b.n	800421c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
      break;
 80041fa:	e00f      	b.n	800421c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2202      	movs	r2, #2
 8004200:	701a      	strb	r2, [r3, #0]
      break;
 8004202:	e00b      	b.n	800421c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2204      	movs	r2, #4
 8004208:	701a      	strb	r2, [r3, #0]
      break;
 800420a:	e007      	b.n	800421c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2206      	movs	r2, #6
 8004210:	701a      	strb	r2, [r3, #0]
      break;
 8004212:	e003      	b.n	800421c <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2207      	movs	r2, #7
 8004218:	701a      	strb	r2, [r3, #0]
      break;
 800421a:	bf00      	nop
  }

  return ret;
 800421c:	68fb      	ldr	r3, [r7, #12]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop

08004228 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004234:	f107 0208 	add.w	r2, r7, #8
 8004238:	2301      	movs	r3, #1
 800423a:	2111      	movs	r1, #17
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fe6f 	bl	8003f20 <lsm6dsl_read_reg>
 8004242:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	b2da      	uxtb	r2, r3
 8004252:	7a3b      	ldrb	r3, [r7, #8]
 8004254:	f362 1307 	bfi	r3, r2, #4, #4
 8004258:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800425a:	f107 0208 	add.w	r2, r7, #8
 800425e:	2301      	movs	r3, #1
 8004260:	2111      	movs	r1, #17
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fe74 	bl	8003f50 <lsm6dsl_write_reg>
 8004268:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800426a:	68fb      	ldr	r3, [r7, #12]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800427e:	f107 0208 	add.w	r2, r7, #8
 8004282:	2301      	movs	r3, #1
 8004284:	2111      	movs	r1, #17
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fe4a 	bl	8003f20 <lsm6dsl_read_reg>
 800428c:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 800428e:	7a3b      	ldrb	r3, [r7, #8]
 8004290:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b0a      	cmp	r3, #10
 8004298:	d844      	bhi.n	8004324 <lsm6dsl_gy_data_rate_get+0xb0>
 800429a:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <lsm6dsl_gy_data_rate_get+0x2c>)
 800429c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	080042d5 	.word	0x080042d5
 80042a8:	080042dd 	.word	0x080042dd
 80042ac:	080042e5 	.word	0x080042e5
 80042b0:	080042ed 	.word	0x080042ed
 80042b4:	080042f5 	.word	0x080042f5
 80042b8:	080042fd 	.word	0x080042fd
 80042bc:	08004305 	.word	0x08004305
 80042c0:	0800430d 	.word	0x0800430d
 80042c4:	08004315 	.word	0x08004315
 80042c8:	0800431d 	.word	0x0800431d
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
      break;
 80042d2:	e02b      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
      break;
 80042da:	e027      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2202      	movs	r2, #2
 80042e0:	701a      	strb	r2, [r3, #0]
      break;
 80042e2:	e023      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2203      	movs	r2, #3
 80042e8:	701a      	strb	r2, [r3, #0]
      break;
 80042ea:	e01f      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2204      	movs	r2, #4
 80042f0:	701a      	strb	r2, [r3, #0]
      break;
 80042f2:	e01b      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2205      	movs	r2, #5
 80042f8:	701a      	strb	r2, [r3, #0]
      break;
 80042fa:	e017      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2206      	movs	r2, #6
 8004300:	701a      	strb	r2, [r3, #0]
      break;
 8004302:	e013      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2207      	movs	r2, #7
 8004308:	701a      	strb	r2, [r3, #0]
      break;
 800430a:	e00f      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2208      	movs	r2, #8
 8004310:	701a      	strb	r2, [r3, #0]
      break;
 8004312:	e00b      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2209      	movs	r2, #9
 8004318:	701a      	strb	r2, [r3, #0]
      break;
 800431a:	e007      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	220a      	movs	r2, #10
 8004320:	701a      	strb	r2, [r3, #0]
      break;
 8004322:	e003      	b.n	800432c <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	220b      	movs	r2, #11
 8004328:	701a      	strb	r2, [r3, #0]
      break;
 800432a:	bf00      	nop
  }

  return ret;
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop

08004338 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004344:	f107 0208 	add.w	r2, r7, #8
 8004348:	2301      	movs	r3, #1
 800434a:	2112      	movs	r1, #18
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fde7 	bl	8003f20 <lsm6dsl_read_reg>
 8004352:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10f      	bne.n	800437a <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	7a3b      	ldrb	r3, [r7, #8]
 8004364:	f362 1386 	bfi	r3, r2, #6, #1
 8004368:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800436a:	f107 0208 	add.w	r2, r7, #8
 800436e:	2301      	movs	r3, #1
 8004370:	2112      	movs	r1, #18
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fdec 	bl	8003f50 <lsm6dsl_write_reg>
 8004378:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800437a:	68fb      	ldr	r3, [r7, #12]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800438e:	f107 020c 	add.w	r2, r7, #12
 8004392:	2306      	movs	r3, #6
 8004394:	2122      	movs	r1, #34	; 0x22
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff fdc2 	bl	8003f20 <lsm6dsl_read_reg>
 800439c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800439e:	7b7b      	ldrb	r3, [r7, #13]
 80043a0:	b21a      	sxth	r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	7b3b      	ldrb	r3, [r7, #12]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	b21a      	sxth	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80043c0:	7bfa      	ldrb	r2, [r7, #15]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	3302      	adds	r3, #2
 80043c6:	b212      	sxth	r2, r2
 80043c8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	3302      	adds	r3, #2
 80043ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	7bbb      	ldrb	r3, [r7, #14]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	4413      	add	r3, r2
 80043de:	b29a      	uxth	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	3302      	adds	r3, #2
 80043e4:	b212      	sxth	r2, r2
 80043e6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80043e8:	7c7a      	ldrb	r2, [r7, #17]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	3304      	adds	r3, #4
 80043ee:	b212      	sxth	r2, r2
 80043f0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	3304      	adds	r3, #4
 80043f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	b29a      	uxth	r2, r3
 8004400:	7c3b      	ldrb	r3, [r7, #16]
 8004402:	b29b      	uxth	r3, r3
 8004404:	4413      	add	r3, r2
 8004406:	b29a      	uxth	r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	3304      	adds	r3, #4
 800440c:	b212      	sxth	r2, r2
 800440e:	801a      	strh	r2, [r3, #0]
  return ret;
 8004410:	697b      	ldr	r3, [r7, #20]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004424:	f107 020c 	add.w	r2, r7, #12
 8004428:	2306      	movs	r3, #6
 800442a:	2128      	movs	r1, #40	; 0x28
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fd77 	bl	8003f20 <lsm6dsl_read_reg>
 8004432:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004434:	7b7b      	ldrb	r3, [r7, #13]
 8004436:	b21a      	sxth	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004442:	b29b      	uxth	r3, r3
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	b29a      	uxth	r2, r3
 8004448:	7b3b      	ldrb	r3, [r7, #12]
 800444a:	b29b      	uxth	r3, r3
 800444c:	4413      	add	r3, r2
 800444e:	b29b      	uxth	r3, r3
 8004450:	b21a      	sxth	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	3302      	adds	r3, #2
 800445c:	b212      	sxth	r2, r2
 800445e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	3302      	adds	r3, #2
 8004464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004468:	b29b      	uxth	r3, r3
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	b29a      	uxth	r2, r3
 800446e:	7bbb      	ldrb	r3, [r7, #14]
 8004470:	b29b      	uxth	r3, r3
 8004472:	4413      	add	r3, r2
 8004474:	b29a      	uxth	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	3302      	adds	r3, #2
 800447a:	b212      	sxth	r2, r2
 800447c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800447e:	7c7a      	ldrb	r2, [r7, #17]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	3304      	adds	r3, #4
 8004484:	b212      	sxth	r2, r2
 8004486:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	3304      	adds	r3, #4
 800448c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004490:	b29b      	uxth	r3, r3
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	b29a      	uxth	r2, r3
 8004496:	7c3b      	ldrb	r3, [r7, #16]
 8004498:	b29b      	uxth	r3, r3
 800449a:	4413      	add	r3, r2
 800449c:	b29a      	uxth	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	3304      	adds	r3, #4
 80044a2:	b212      	sxth	r2, r2
 80044a4:	801a      	strh	r2, [r3, #0]
  return ret;
 80044a6:	697b      	ldr	r3, [r7, #20]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <lsm6dsl_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsl_drdy_pulsed_g_t val)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 80044bc:	f107 0208 	add.w	r2, r7, #8
 80044c0:	2301      	movs	r3, #1
 80044c2:	210b      	movs	r1, #11
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fd2b 	bl	8003f20 <lsm6dsl_read_reg>
 80044ca:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&drdy_pulse_cfg_g, 1);

  if (ret == 0) {
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <lsm6dsl_data_ready_mode_set+0x42>
    drdy_pulse_cfg_g.drdy_pulsed = (uint8_t) val;
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	7a3b      	ldrb	r3, [r7, #8]
 80044dc:	f362 13c7 	bfi	r3, r2, #7, #1
 80044e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 80044e2:	f107 0208 	add.w	r2, r7, #8
 80044e6:	2301      	movs	r3, #1
 80044e8:	210b      	movs	r1, #11
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fd30 	bl	8003f50 <lsm6dsl_write_reg>
 80044f0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&drdy_pulse_cfg_g, 1);
  }

  return ret;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8004506:	2301      	movs	r3, #1
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	210f      	movs	r1, #15
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fd07 	bl	8003f20 <lsm6dsl_read_reg>
 8004512:	60f8      	str	r0, [r7, #12]
  return ret;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800452a:	f107 0208 	add.w	r2, r7, #8
 800452e:	2301      	movs	r3, #1
 8004530:	2112      	movs	r1, #18
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fcf4 	bl	8003f20 <lsm6dsl_read_reg>
 8004538:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10f      	bne.n	8004560 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	b2da      	uxtb	r2, r3
 8004548:	7a3b      	ldrb	r3, [r7, #8]
 800454a:	f362 0382 	bfi	r3, r2, #2, #1
 800454e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004550:	f107 0208 	add.w	r2, r7, #8
 8004554:	2301      	movs	r3, #1
 8004556:	2112      	movs	r1, #18
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff fcf9 	bl	8003f50 <lsm6dsl_write_reg>
 800455e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004560:	68fb      	ldr	r3, [r7, #12]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b08a      	sub	sp, #40	; 0x28
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 8004574:	f107 021c 	add.w	r2, r7, #28
 8004578:	2301      	movs	r3, #1
 800457a:	210d      	movs	r1, #13
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fccf 	bl	8003f20 <lsm6dsl_read_reg>
 8004582:	6278      	str	r0, [r7, #36]	; 0x24
                         1);

  if (ret == 0) {
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d147      	bne.n	800461a <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800458a:	783b      	ldrb	r3, [r7, #0]
 800458c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004590:	b2da      	uxtb	r2, r3
 8004592:	7f3b      	ldrb	r3, [r7, #28]
 8004594:	f362 0300 	bfi	r3, r2, #0, #1
 8004598:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800459a:	783b      	ldrb	r3, [r7, #0]
 800459c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	7f3b      	ldrb	r3, [r7, #28]
 80045a4:	f362 0341 	bfi	r3, r2, #1, #1
 80045a8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80045aa:	783b      	ldrb	r3, [r7, #0]
 80045ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	7f3b      	ldrb	r3, [r7, #28]
 80045b4:	f362 0382 	bfi	r3, r2, #2, #1
 80045b8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80045ba:	783b      	ldrb	r3, [r7, #0]
 80045bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	7f3b      	ldrb	r3, [r7, #28]
 80045c4:	f362 03c3 	bfi	r3, r2, #3, #1
 80045c8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80045ca:	783b      	ldrb	r3, [r7, #0]
 80045cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	7f3b      	ldrb	r3, [r7, #28]
 80045d4:	f362 1304 	bfi	r3, r2, #4, #1
 80045d8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80045da:	783b      	ldrb	r3, [r7, #0]
 80045dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	7f3b      	ldrb	r3, [r7, #28]
 80045e4:	f362 1345 	bfi	r3, r2, #5, #1
 80045e8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80045ea:	783b      	ldrb	r3, [r7, #0]
 80045ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	7f3b      	ldrb	r3, [r7, #28]
 80045f4:	f362 1386 	bfi	r3, r2, #6, #1
 80045f8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80045fa:	783b      	ldrb	r3, [r7, #0]
 80045fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004600:	b2da      	uxtb	r2, r3
 8004602:	7f3b      	ldrb	r3, [r7, #28]
 8004604:	f362 13c7 	bfi	r3, r2, #7, #1
 8004608:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 800460a:	f107 021c 	add.w	r2, r7, #28
 800460e:	2301      	movs	r3, #1
 8004610:	210d      	movs	r1, #13
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fc9c 	bl	8003f50 <lsm6dsl_write_reg>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24
                            1);
  }

  if (ret == 0) {
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	2b00      	cmp	r3, #0
 800461e:	d107      	bne.n	8004630 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8004620:	f107 0218 	add.w	r2, r7, #24
 8004624:	2301      	movs	r3, #1
 8004626:	215e      	movs	r1, #94	; 0x5e
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff fc79 	bl	8003f20 <lsm6dsl_read_reg>
 800462e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d107      	bne.n	8004646 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8004636:	f107 0214 	add.w	r2, r7, #20
 800463a:	2301      	movs	r3, #1
 800463c:	215f      	movs	r1, #95	; 0x5f
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fc6e 	bl	8003f20 <lsm6dsl_read_reg>
 8004644:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	2b00      	cmp	r3, #0
 800464a:	d147      	bne.n	80046dc <lsm6dsl_pin_int1_route_set+0x172>
    md1_cfg.int1_timer           = val.int1_timer;
 800464c:	787b      	ldrb	r3, [r7, #1]
 800464e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	7e3b      	ldrb	r3, [r7, #24]
 8004656:	f362 0300 	bfi	r3, r2, #0, #1
 800465a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 800465c:	787b      	ldrb	r3, [r7, #1]
 800465e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004662:	b2da      	uxtb	r2, r3
 8004664:	7e3b      	ldrb	r3, [r7, #24]
 8004666:	f362 0341 	bfi	r3, r2, #1, #1
 800466a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 800466c:	787b      	ldrb	r3, [r7, #1]
 800466e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004672:	b2da      	uxtb	r2, r3
 8004674:	7e3b      	ldrb	r3, [r7, #24]
 8004676:	f362 0382 	bfi	r3, r2, #2, #1
 800467a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 800467c:	787b      	ldrb	r3, [r7, #1]
 800467e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004682:	b2da      	uxtb	r2, r3
 8004684:	7e3b      	ldrb	r3, [r7, #24]
 8004686:	f362 03c3 	bfi	r3, r2, #3, #1
 800468a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 800468c:	787b      	ldrb	r3, [r7, #1]
 800468e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004692:	b2da      	uxtb	r2, r3
 8004694:	7e3b      	ldrb	r3, [r7, #24]
 8004696:	f362 1304 	bfi	r3, r2, #4, #1
 800469a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 800469c:	787b      	ldrb	r3, [r7, #1]
 800469e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	7e3b      	ldrb	r3, [r7, #24]
 80046a6:	f362 1345 	bfi	r3, r2, #5, #1
 80046aa:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 80046ac:	787b      	ldrb	r3, [r7, #1]
 80046ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	7e3b      	ldrb	r3, [r7, #24]
 80046b6:	f362 1386 	bfi	r3, r2, #6, #1
 80046ba:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 80046bc:	787b      	ldrb	r3, [r7, #1]
 80046be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	7e3b      	ldrb	r3, [r7, #24]
 80046c6:	f362 13c7 	bfi	r3, r2, #7, #1
 80046ca:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80046cc:	f107 0218 	add.w	r2, r7, #24
 80046d0:	2301      	movs	r3, #1
 80046d2:	215e      	movs	r1, #94	; 0x5e
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fc3b 	bl	8003f50 <lsm6dsl_write_reg>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d107      	bne.n	80046f2 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80046e2:	f107 0210 	add.w	r2, r7, #16
 80046e6:	2301      	movs	r3, #1
 80046e8:	2113      	movs	r1, #19
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fc18 	bl	8003f20 <lsm6dsl_read_reg>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10f      	bne.n	8004718 <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80046f8:	78bb      	ldrb	r3, [r7, #2]
 80046fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	7c3b      	ldrb	r3, [r7, #16]
 8004702:	f362 1304 	bfi	r3, r2, #4, #1
 8004706:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004708:	f107 0210 	add.w	r2, r7, #16
 800470c:	2301      	movs	r3, #1
 800470e:	2113      	movs	r1, #19
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fc1d 	bl	8003f50 <lsm6dsl_write_reg>
 8004716:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800471e:	f107 0220 	add.w	r2, r7, #32
 8004722:	2301      	movs	r3, #1
 8004724:	211a      	movs	r1, #26
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fbfa 	bl	8003f20 <lsm6dsl_read_reg>
 800472c:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d111      	bne.n	8004758 <lsm6dsl_pin_int1_route_set+0x1ee>
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8004734:	78bb      	ldrb	r3, [r7, #2]
 8004736:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004740:	f362 13c7 	bfi	r3, r2, #7, #1
 8004744:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8004748:	f107 0220 	add.w	r2, r7, #32
 800474c:	2301      	movs	r3, #1
 800474e:	211a      	movs	r1, #26
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fbfd 	bl	8003f50 <lsm6dsl_write_reg>
 8004756:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d158      	bne.n	8004810 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 800475e:	f107 020c 	add.w	r2, r7, #12
 8004762:	2301      	movs	r3, #1
 8004764:	2158      	movs	r1, #88	; 0x58
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fbda 	bl	8003f20 <lsm6dsl_read_reg>
 800476c:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 800476e:	787b      	ldrb	r3, [r7, #1]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d141      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 800477a:	787b      	ldrb	r3, [r7, #1]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8004782:	2b00      	cmp	r3, #0
 8004784:	d13b      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8004786:	787b      	ldrb	r3, [r7, #1]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800478e:	2b00      	cmp	r3, #0
 8004790:	d135      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8004792:	787b      	ldrb	r3, [r7, #1]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800479a:	2b00      	cmp	r3, #0
 800479c:	d12f      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800479e:	787b      	ldrb	r3, [r7, #1]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d129      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 80047aa:	787b      	ldrb	r3, [r7, #1]
 80047ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047b0:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d123      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 80047b6:	7d3b      	ldrb	r3, [r7, #20]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d11d      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 80047c2:	7d3b      	ldrb	r3, [r7, #20]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d117      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 80047ce:	7d3b      	ldrb	r3, [r7, #20]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d111      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 80047da:	7d3b      	ldrb	r3, [r7, #20]
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80047e6:	7d3b      	ldrb	r3, [r7, #20]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U) ) {
 80047f2:	7d3b      	ldrb	r3, [r7, #20]
 80047f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047f8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 80047fe:	7b3b      	ldrb	r3, [r7, #12]
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	733b      	strb	r3, [r7, #12]
 8004806:	e003      	b.n	8004810 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8004808:	7b3b      	ldrb	r3, [r7, #12]
 800480a:	f36f 13c7 	bfc	r3, #7, #1
 800480e:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0) {
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d107      	bne.n	8004826 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8004816:	f107 020c 	add.w	r2, r7, #12
 800481a:	2301      	movs	r3, #1
 800481c:	2158      	movs	r1, #88	; 0x58
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fb96 	bl	8003f50 <lsm6dsl_write_reg>
 8004824:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004828:	4618      	mov	r0, r3
 800482a:	3728      	adds	r7, #40	; 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  lsm6dsl_master_config_t master_config;
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 800483a:	f107 0214 	add.w	r2, r7, #20
 800483e:	2301      	movs	r3, #1
 8004840:	210d      	movs	r1, #13
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fb6c 	bl	8003f20 <lsm6dsl_read_reg>
 8004848:	61f8      	str	r0, [r7, #28]
                         1);

  if (ret == 0) {
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 80c0 	bne.w	80049d2 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8004852:	7d3b      	ldrb	r3, [r7, #20]
 8004854:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004858:	b2d9      	uxtb	r1, r3
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	7813      	ldrb	r3, [r2, #0]
 800485e:	f361 0300 	bfi	r3, r1, #0, #1
 8004862:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8004864:	7d3b      	ldrb	r3, [r7, #20]
 8004866:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800486a:	b2d9      	uxtb	r1, r3
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	7813      	ldrb	r3, [r2, #0]
 8004870:	f361 0341 	bfi	r3, r1, #1, #1
 8004874:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8004876:	7d3b      	ldrb	r3, [r7, #20]
 8004878:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800487c:	b2d9      	uxtb	r1, r3
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	7813      	ldrb	r3, [r2, #0]
 8004882:	f361 0382 	bfi	r3, r1, #2, #1
 8004886:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8004888:	7d3b      	ldrb	r3, [r7, #20]
 800488a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800488e:	b2d9      	uxtb	r1, r3
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	7813      	ldrb	r3, [r2, #0]
 8004894:	f361 03c3 	bfi	r3, r1, #3, #1
 8004898:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800489a:	7d3b      	ldrb	r3, [r7, #20]
 800489c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048a0:	b2d9      	uxtb	r1, r3
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	7813      	ldrb	r3, [r2, #0]
 80048a6:	f361 1304 	bfi	r3, r1, #4, #1
 80048aa:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 80048ac:	7d3b      	ldrb	r3, [r7, #20]
 80048ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048b2:	b2d9      	uxtb	r1, r3
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	7813      	ldrb	r3, [r2, #0]
 80048b8:	f361 1345 	bfi	r3, r1, #5, #1
 80048bc:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 80048be:	7d3b      	ldrb	r3, [r7, #20]
 80048c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80048c4:	b2d9      	uxtb	r1, r3
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	7813      	ldrb	r3, [r2, #0]
 80048ca:	f361 1386 	bfi	r3, r1, #6, #1
 80048ce:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 80048d0:	7d3b      	ldrb	r3, [r7, #20]
 80048d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048d6:	b2d9      	uxtb	r1, r3
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	7813      	ldrb	r3, [r2, #0]
 80048dc:	f361 13c7 	bfi	r3, r1, #7, #1
 80048e0:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80048e2:	f107 0210 	add.w	r2, r7, #16
 80048e6:	2301      	movs	r3, #1
 80048e8:	215e      	movs	r1, #94	; 0x5e
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff fb18 	bl	8003f20 <lsm6dsl_read_reg>
 80048f0:	61f8      	str	r0, [r7, #28]

    if (ret == 0) {
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d16c      	bne.n	80049d2 <lsm6dsl_pin_int1_route_get+0x1a2>
      val->int1_timer       = md1_cfg.int1_timer;
 80048f8:	7c3b      	ldrb	r3, [r7, #16]
 80048fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80048fe:	b2d9      	uxtb	r1, r3
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	7853      	ldrb	r3, [r2, #1]
 8004904:	f361 0300 	bfi	r3, r1, #0, #1
 8004908:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 800490a:	7c3b      	ldrb	r3, [r7, #16]
 800490c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004910:	b2d9      	uxtb	r1, r3
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	7853      	ldrb	r3, [r2, #1]
 8004916:	f361 0341 	bfi	r3, r1, #1, #1
 800491a:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 800491c:	7c3b      	ldrb	r3, [r7, #16]
 800491e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004922:	b2d9      	uxtb	r1, r3
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	7853      	ldrb	r3, [r2, #1]
 8004928:	f361 0382 	bfi	r3, r1, #2, #1
 800492c:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 800492e:	7c3b      	ldrb	r3, [r7, #16]
 8004930:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004934:	b2d9      	uxtb	r1, r3
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	7853      	ldrb	r3, [r2, #1]
 800493a:	f361 03c3 	bfi	r3, r1, #3, #1
 800493e:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8004940:	7c3b      	ldrb	r3, [r7, #16]
 8004942:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004946:	b2d9      	uxtb	r1, r3
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	7853      	ldrb	r3, [r2, #1]
 800494c:	f361 1304 	bfi	r3, r1, #4, #1
 8004950:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8004952:	7c3b      	ldrb	r3, [r7, #16]
 8004954:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004958:	b2d9      	uxtb	r1, r3
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	7853      	ldrb	r3, [r2, #1]
 800495e:	f361 1345 	bfi	r3, r1, #5, #1
 8004962:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8004964:	7c3b      	ldrb	r3, [r7, #16]
 8004966:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800496a:	b2d9      	uxtb	r1, r3
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	7853      	ldrb	r3, [r2, #1]
 8004970:	f361 1386 	bfi	r3, r1, #6, #1
 8004974:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8004976:	7c3b      	ldrb	r3, [r7, #16]
 8004978:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800497c:	b2d9      	uxtb	r1, r3
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	7853      	ldrb	r3, [r2, #1]
 8004982:	f361 13c7 	bfi	r3, r1, #7, #1
 8004986:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004988:	f107 020c 	add.w	r2, r7, #12
 800498c:	2301      	movs	r3, #1
 800498e:	2113      	movs	r1, #19
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff fac5 	bl	8003f20 <lsm6dsl_read_reg>
 8004996:	61f8      	str	r0, [r7, #28]

      if (ret == 0) {
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d119      	bne.n	80049d2 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800499e:	7b3b      	ldrb	r3, [r7, #12]
 80049a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80049a4:	b2d9      	uxtb	r1, r3
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	7893      	ldrb	r3, [r2, #2]
 80049aa:	f361 0300 	bfi	r3, r1, #0, #1
 80049ae:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80049b0:	f107 0218 	add.w	r2, r7, #24
 80049b4:	2301      	movs	r3, #1
 80049b6:	211a      	movs	r1, #26
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff fab1 	bl	8003f20 <lsm6dsl_read_reg>
 80049be:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 80049c0:	7e3b      	ldrb	r3, [r7, #24]
 80049c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049c6:	b2d9      	uxtb	r1, r3
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	7893      	ldrb	r3, [r2, #2]
 80049cc:	f361 0300 	bfi	r3, r1, #0, #1
 80049d0:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 80049d2:	69fb      	ldr	r3, [r7, #28]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2,
 80049e8:	f107 020c 	add.w	r2, r7, #12
 80049ec:	2301      	movs	r3, #1
 80049ee:	2107      	movs	r1, #7
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fa95 	bl	8003f20 <lsm6dsl_read_reg>
 80049f6:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0) {
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11f      	bne.n	8004a3e <lsm6dsl_fifo_watermark_set+0x62>
    fifo_ctrl1.fth = (uint8_t) (0x00FFU & val);
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t) (( 0x0700U & val ) >> 8);
 8004a04:	887b      	ldrh	r3, [r7, #2]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	7b3b      	ldrb	r3, [r7, #12]
 8004a12:	f362 0302 	bfi	r3, r2, #0, #3
 8004a16:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1,
 8004a18:	f107 0210 	add.w	r2, r7, #16
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	2106      	movs	r1, #6
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fa95 	bl	8003f50 <lsm6dsl_write_reg>
 8004a26:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);

    if (ret == 0) {
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d107      	bne.n	8004a3e <lsm6dsl_fifo_watermark_set+0x62>
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8004a2e:	f107 020c 	add.w	r2, r7, #12
 8004a32:	2301      	movs	r3, #1
 8004a34:	2107      	movs	r1, #7
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff fa8a 	bl	8003f50 <lsm6dsl_write_reg>
 8004a3c:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_ctrl2, 1);
    }
  }

  return ret;
 8004a3e:	697b      	ldr	r3, [r7, #20]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <lsm6dsl_fifo_data_level_get>:
  *                BDU bit.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_status1_t fifo_status1;
  lsm6dsl_fifo_status2_t fifo_status2;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS1,
 8004a52:	f107 0210 	add.w	r2, r7, #16
 8004a56:	2301      	movs	r3, #1
 8004a58:	213a      	movs	r1, #58	; 0x3a
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff fa60 	bl	8003f20 <lsm6dsl_read_reg>
 8004a60:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_status1, 1);

  if (ret == 0) {
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d114      	bne.n	8004a92 <lsm6dsl_fifo_data_level_get+0x4a>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS2,
 8004a68:	f107 020c 	add.w	r2, r7, #12
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	213b      	movs	r1, #59	; 0x3b
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fa55 	bl	8003f20 <lsm6dsl_read_reg>
 8004a76:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&fifo_status2, 1);
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 8004a78:	7b3b      	ldrb	r3, [r7, #12]
 8004a7a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	b29a      	uxth	r2, r3
           (uint16_t) fifo_status1.diff_fifo;
 8004a86:	7c3b      	ldrb	r3, [r7, #16]
 8004a88:	b29b      	uxth	r3, r3
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 8004a8a:	4413      	add	r3, r2
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8004a92:	697b      	ldr	r3, [r7, #20]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <lsm6dsl_fifo_pattern_get>:
  *                FIFO_STATUS4, it is recommended to set the BDU bit
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_pattern_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_status3_t fifo_status3;
  lsm6dsl_fifo_status4_t fifo_status4;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS3,
 8004aa6:	f107 0210 	add.w	r2, r7, #16
 8004aaa:	2301      	movs	r3, #1
 8004aac:	213c      	movs	r1, #60	; 0x3c
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff fa36 	bl	8003f20 <lsm6dsl_read_reg>
 8004ab4:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_status3, 1);

  if (ret == 0) {
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d114      	bne.n	8004ae6 <lsm6dsl_fifo_pattern_get+0x4a>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS4,
 8004abc:	f107 020c 	add.w	r2, r7, #12
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	213d      	movs	r1, #61	; 0x3d
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fa2b 	bl	8003f20 <lsm6dsl_read_reg>
 8004aca:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&fifo_status4, 1);
    *val = ( (uint16_t)fifo_status4.fifo_pattern << 8) +
 8004acc:	7b3b      	ldrb	r3, [r7, #12]
 8004ace:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	b29a      	uxth	r2, r3
           fifo_status3.fifo_pattern;
 8004ada:	7c3b      	ldrb	r3, [r7, #16]
 8004adc:	b29b      	uxth	r3, r3
    *val = ( (uint16_t)fifo_status4.fifo_pattern << 8) +
 8004ade:	4413      	add	r3, r2
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8004ae6:	697b      	ldr	r3, [r7, #20]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8004afc:	f107 0208 	add.w	r2, r7, #8
 8004b00:	2301      	movs	r3, #1
 8004b02:	2108      	movs	r1, #8
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fa0b 	bl	8003f20 <lsm6dsl_read_reg>
 8004b0a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <lsm6dsl_fifo_xl_batch_set+0x42>
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	7a3b      	ldrb	r3, [r7, #8]
 8004b1c:	f362 0302 	bfi	r3, r2, #0, #3
 8004b20:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8004b22:	f107 0208 	add.w	r2, r7, #8
 8004b26:	2301      	movs	r3, #1
 8004b28:	2108      	movs	r1, #8
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff fa10 	bl	8003f50 <lsm6dsl_write_reg>
 8004b30:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8004b48:	f107 0208 	add.w	r2, r7, #8
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	2108      	movs	r1, #8
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff f9e5 	bl	8003f20 <lsm6dsl_read_reg>
 8004b56:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0) {
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10f      	bne.n	8004b7e <lsm6dsl_fifo_gy_batch_set+0x42>
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	7a3b      	ldrb	r3, [r7, #8]
 8004b68:	f362 03c5 	bfi	r3, r2, #3, #3
 8004b6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8004b6e:	f107 0208 	add.w	r2, r7, #8
 8004b72:	2301      	movs	r3, #1
 8004b74:	2108      	movs	r1, #8
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff f9ea 	bl	8003f50 <lsm6dsl_write_reg>
 8004b7c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <lsm6dsl_fifo_stop_on_wtm_set>:
  * @param  val    Change the values of stop_on_fth in reg FIFO_CTRL4
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4,
 8004b94:	f107 0208 	add.w	r2, r7, #8
 8004b98:	2301      	movs	r3, #1
 8004b9a:	2109      	movs	r1, #9
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff f9bf 	bl	8003f20 <lsm6dsl_read_reg>
 8004ba2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <lsm6dsl_fifo_stop_on_wtm_set+0x42>
    fifo_ctrl4.stop_on_fth = val;
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	7a3b      	ldrb	r3, [r7, #8]
 8004bb4:	f362 13c7 	bfi	r3, r2, #7, #1
 8004bb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL4,
 8004bba:	f107 0208 	add.w	r2, r7, #8
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	2109      	movs	r1, #9
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff f9c4 	bl	8003f50 <lsm6dsl_write_reg>
 8004bc8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004be0:	f107 0208 	add.w	r2, r7, #8
 8004be4:	2301      	movs	r3, #1
 8004be6:	210a      	movs	r1, #10
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff f999 	bl	8003f20 <lsm6dsl_read_reg>
 8004bee:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10f      	bne.n	8004c16 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	7a3b      	ldrb	r3, [r7, #8]
 8004c00:	f362 0302 	bfi	r3, r2, #0, #3
 8004c04:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004c06:	f107 0208 	add.w	r2, r7, #8
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	210a      	movs	r1, #10
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff f99e 	bl	8003f50 <lsm6dsl_write_reg>
 8004c14:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8004c16:	68fb      	ldr	r3, [r7, #12]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <lsm6dsl_fifo_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_odr_fifo_t val)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004c2c:	f107 0208 	add.w	r2, r7, #8
 8004c30:	2301      	movs	r3, #1
 8004c32:	210a      	movs	r1, #10
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff f973 	bl	8003f20 <lsm6dsl_read_reg>
 8004c3a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10f      	bne.n	8004c62 <lsm6dsl_fifo_data_rate_set+0x42>
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	7a3b      	ldrb	r3, [r7, #8]
 8004c4c:	f362 03c6 	bfi	r3, r2, #3, #4
 8004c50:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8004c52:	f107 0208 	add.w	r2, r7, #8
 8004c56:	2301      	movs	r3, #1
 8004c58:	210a      	movs	r1, #10
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff f978 	bl	8003f50 <lsm6dsl_write_reg>
 8004c60:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8004c62:	68fb      	ldr	r3, [r7, #12]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b093      	sub	sp, #76	; 0x4c
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8004c80:	e052      	b.n	8004d28 <arm_mult_f32+0xbc>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	643b      	str	r3, [r7, #64]	; 0x40
    /* read sample from sourceB */
    inB1 = *pSrcB;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	63bb      	str	r3, [r7, #56]	; 0x38
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 8004c9a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004c9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 8004cb6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004cba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	623b      	str	r3, [r7, #32]

    /* store result to destination buffer */
    *pDst = out1;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd0:	601a      	str	r2, [r3, #0]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	61fb      	str	r3, [r7, #28]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 8004cd8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004cdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce4:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3304      	adds	r3, #4
 8004cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cee:	601a      	str	r2, [r3, #0]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 8004cf0:	ed97 7a08 	vldr	s14, [r7, #32]
 8004cf4:	edd7 7a07 	vldr	s15, [r7, #28]
 8004cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfc:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3308      	adds	r3, #8
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	601a      	str	r2, [r3, #0]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	601a      	str	r2, [r3, #0]


    /* update pointers to process next samples */
    pSrcA += 4u;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3310      	adds	r3, #16
 8004d14:	60fb      	str	r3, [r7, #12]
    pSrcB += 4u;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	3310      	adds	r3, #16
 8004d1a:	60bb      	str	r3, [r7, #8]
    pDst += 4u;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3310      	adds	r3, #16
 8004d20:	607b      	str	r3, [r7, #4]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8004d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d24:	3b01      	subs	r3, #1
 8004d26:	647b      	str	r3, [r7, #68]	; 0x44
  while(blkCnt > 0u)
 8004d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1a9      	bne.n	8004c82 <arm_mult_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8004d36:	e013      	b.n	8004d60 <arm_mult_f32+0xf4>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1d1a      	adds	r2, r3, #4
 8004d3c:	60fa      	str	r2, [r7, #12]
 8004d3e:	ed93 7a00 	vldr	s14, [r3]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	1d1a      	adds	r2, r3, #4
 8004d46:	60ba      	str	r2, [r7, #8]
 8004d48:	edd3 7a00 	vldr	s15, [r3]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1d1a      	adds	r2, r3, #4
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d56:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8004d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	647b      	str	r3, [r7, #68]	; 0x44
  while(blkCnt > 0u)
 8004d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e8      	bne.n	8004d38 <arm_mult_f32+0xcc>
  }
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	374c      	adds	r7, #76	; 0x4c
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d7e:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8004d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	db0a      	blt.n	8004da4 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8004d8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d92:	f00b f8d7 	bl	800ff44 <sqrtf>
 8004d96:	eef0 7a40 	vmov.f32	s15, s0
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8004da0:	2300      	movs	r3, #0
 8004da2:	e005      	b.n	8004db0 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004dac:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8004dca:	e072      	b.n	8004eb2 <arm_cmplx_mag_f32+0xfa>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1d1a      	adds	r2, r3, #4
 8004dd0:	60fa      	str	r2, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1d1a      	adds	r2, r3, #4
 8004dda:	60fa      	str	r2, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004de0:	edd7 7a06 	vldr	s15, [r7, #24]
 8004de4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	1d1a      	adds	r2, r3, #4
 8004df8:	60ba      	str	r2, [r7, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8004e00:	f7ff ffb8 	bl	8004d74 <arm_sqrt_f32>

    realIn = *pSrc++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	1d1a      	adds	r2, r3, #4
 8004e08:	60fa      	str	r2, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1d1a      	adds	r2, r3, #4
 8004e12:	60fa      	str	r2, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004e18:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e1c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004e20:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	60ba      	str	r2, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	eeb0 0a67 	vmov.f32	s0, s15
 8004e38:	f7ff ff9c 	bl	8004d74 <arm_sqrt_f32>

    realIn = *pSrc++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	1d1a      	adds	r2, r3, #4
 8004e40:	60fa      	str	r2, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	1d1a      	adds	r2, r3, #4
 8004e4a:	60fa      	str	r2, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004e50:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e54:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004e58:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	1d1a      	adds	r2, r3, #4
 8004e68:	60ba      	str	r2, [r7, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e70:	f7ff ff80 	bl	8004d74 <arm_sqrt_f32>

    realIn = *pSrc++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1d1a      	adds	r2, r3, #4
 8004e78:	60fa      	str	r2, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	60fa      	str	r2, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004e88:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	1d1a      	adds	r2, r3, #4
 8004ea0:	60ba      	str	r2, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ea8:	f7ff ff64 	bl	8004d74 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d189      	bne.n	8004dcc <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 8004ec0:	e01e      	b.n	8004f00 <arm_cmplx_mag_f32+0x148>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1d1a      	adds	r2, r3, #4
 8004ec6:	60fa      	str	r2, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1d1a      	adds	r2, r3, #4
 8004ed0:	60fa      	str	r2, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8004ed6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004eda:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004ede:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ee2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	1d1a      	adds	r2, r3, #4
 8004eee:	60ba      	str	r2, [r7, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef6:	f7ff ff3d 	bl	8004d74 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1dd      	bne.n	8004ec2 <arm_cmplx_mag_f32+0x10a>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b08b      	sub	sp, #44	; 0x2c
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8004f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f1e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004ffc <arm_cos_f32+0xec>
 8004f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f26:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8004f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f2e:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8004f32:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f3a:	ee17 3a90 	vmov	r3, s15
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if(in < 0.0f)
 8004f40:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4c:	d502      	bpl.n	8004f54 <arm_cos_f32+0x44>
  {
    n--;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	3b01      	subs	r3, #1
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f5e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f66:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8004f6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f6e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005000 <arm_cos_f32+0xf0>
 8004f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f76:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 8004f7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f82:	ee17 3a90 	vmov	r3, s15
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8c:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8004f8e:	8b7b      	ldrh	r3, [r7, #26]
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f98:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fa0:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8004fa4:	8b7b      	ldrh	r3, [r7, #26]
 8004fa6:	4a17      	ldr	r2, [pc, #92]	; (8005004 <arm_cos_f32+0xf4>)
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8004fb0:	8b7b      	ldrh	r3, [r7, #26]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	4a13      	ldr	r2, [pc, #76]	; (8005004 <arm_cos_f32+0xf4>)
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8004fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fca:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fd2:	edd7 6a05 	vldr	s13, [r7, #20]
 8004fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fe2:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	ee07 3a90 	vmov	s15, r3
}
 8004fec:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff0:	372c      	adds	r7, #44	; 0x2c
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	3e22f983 	.word	0x3e22f983
 8005000:	44000000 	.word	0x44000000
 8005004:	080238c8 	.word	0x080238c8

08005008 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8005008:	b480      	push	{r7}
 800500a:	b08b      	sub	sp, #44	; 0x2c
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1d1a      	adds	r2, r3, #4
 8005022:	60fa      	str	r2, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	3b01      	subs	r3, #1
 800502c:	089b      	lsrs	r3, r3, #2
 800502e:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8005030:	e051      	b.n	80050d6 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1d1a      	adds	r2, r3, #4
 8005036:	60fa      	str	r2, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	60fa      	str	r2, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8005046:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800504a:	edd7 7a05 	vldr	s15, [r7, #20]
 800504e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005056:	d504      	bpl.n	8005062 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	3301      	adds	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1d1a      	adds	r2, r3, #4
 8005066:	60fa      	str	r2, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 800506c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005070:	edd7 7a04 	vldr	s15, [r7, #16]
 8005074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507c:	d504      	bpl.n	8005088 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	3302      	adds	r3, #2
 8005086:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	60fa      	str	r2, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8005092:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005096:	edd7 7a05 	vldr	s15, [r7, #20]
 800509a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	d504      	bpl.n	80050ae <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	3303      	adds	r3, #3
 80050ac:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 80050ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80050b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80050b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050be:	d504      	bpl.n	80050ca <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	3304      	adds	r3, #4
 80050c8:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3304      	adds	r3, #4
 80050ce:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1aa      	bne.n	8005032 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	3b01      	subs	r3, #1
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80050e6:	e016      	b.n	8005116 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1d1a      	adds	r2, r3, #4
 80050ec:	60fa      	str	r2, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80050f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80050f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80050fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005102:	d505      	bpl.n	8005110 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	3b01      	subs	r3, #1
 8005114:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e5      	bne.n	80050e8 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005120:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	601a      	str	r2, [r3, #0]
}
 8005128:	bf00      	nop
 800512a:	372c      	adds	r7, #44	; 0x2c
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b0a0      	sub	sp, #128	; 0x80
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8005144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	4413      	add	r3, r2
 800514c:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8005158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515a:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 800515c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8005162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	4413      	add	r3, r2
 800516a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 800516c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005172:	4413      	add	r3, r2
 8005174:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8005176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800517c:	e1b6      	b.n	80054ec <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8005196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800519c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80051a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80051a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80051ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80051b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80051ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80051c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80051c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80051cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80051d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80051d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80051de:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80051e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	1d1a      	adds	r2, r3, #4
 80051ea:	603a      	str	r2, [r7, #0]
 80051ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f0:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80051f4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80051f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	1d1a      	adds	r2, r3, #4
 8005200:	603a      	str	r2, [r7, #0]
 8005202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005206:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 800520a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800520e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	1d1a      	adds	r2, r3, #4
 8005216:	603a      	str	r2, [r7, #0]
 8005218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800521c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8005220:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005224:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	1d1a      	adds	r2, r3, #4
 800522c:	603a      	str	r2, [r7, #0]
 800522e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005232:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8005236:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800523a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800523e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005242:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8005246:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800524a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800524e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005252:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8005256:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800525a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800525e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005262:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8005266:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800526a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800526e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005272:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8005276:	ed97 7a06 	vldr	s14, [r7, #24]
 800527a:	edd7 7a02 	vldr	s15, [r7, #8]
 800527e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005280:	1d1a      	adds	r2, r3, #4
 8005282:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005288:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800528c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005290:	edd7 7a03 	vldr	s15, [r7, #12]
 8005294:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	67fa      	str	r2, [r7, #124]	; 0x7c
 800529a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529e:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80052a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80052a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80052aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ac:	1d1a      	adds	r2, r3, #4
 80052ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80052b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80052bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80052c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052c2:	1d1a      	adds	r2, r3, #4
 80052c4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ca:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80052ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80052d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80052d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052da:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80052de:	ed97 7a03 	vldr	s14, [r7, #12]
 80052e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80052e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ea:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80052ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80052f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80052f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052fa:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80052fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8005302:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800530a:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800530e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005310:	1d1a      	adds	r2, r3, #4
 8005312:	673a      	str	r2, [r7, #112]	; 0x70
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8005318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800531a:	1d1a      	adds	r2, r3, #4
 800531c:	673a      	str	r2, [r7, #112]	; 0x70
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8005322:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005326:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800532a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8005332:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005336:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8005342:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005346:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800534a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8005352:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005356:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8005362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005364:	1d1a      	adds	r2, r3, #4
 8005366:	677a      	str	r2, [r7, #116]	; 0x74
 8005368:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800536c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005374:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8005378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800537a:	1d1a      	adds	r2, r3, #4
 800537c:	677a      	str	r2, [r7, #116]	; 0x74
 800537e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005382:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800538a:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800538e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005392:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800539e:	edd7 7a03 	vldr	s15, [r7, #12]
 80053a2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80053ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80053b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80053be:	edd7 7a02 	vldr	s15, [r7, #8]
 80053c2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80053c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ca:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80053ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053d0:	1d1a      	adds	r2, r3, #4
 80053d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80053d4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80053d8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80053dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e0:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80053e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	67ba      	str	r2, [r7, #120]	; 0x78
 80053ea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80053ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80053f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053f6:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 80053fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053fc:	1d1a      	adds	r2, r3, #4
 80053fe:	673a      	str	r2, [r7, #112]	; 0x70
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8005404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	673a      	str	r2, [r7, #112]	; 0x70
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 800540e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005412:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800541e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005422:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800542e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005432:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800543e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005442:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 800544e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	677a      	str	r2, [r7, #116]	; 0x74
 8005454:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005458:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800545c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005460:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8005464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005466:	1d1a      	adds	r2, r3, #4
 8005468:	677a      	str	r2, [r7, #116]	; 0x74
 800546a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800546e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005476:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 800547a:	edd7 7a04 	vldr	s15, [r7, #16]
 800547e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 800548a:	edd7 7a05 	vldr	s15, [r7, #20]
 800548e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005496:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 800549a:	edd7 7a05 	vldr	s15, [r7, #20]
 800549e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80054aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80054ae:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80054b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80054ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	67ba      	str	r2, [r7, #120]	; 0x78
 80054c0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80054c4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80054c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054cc:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80054d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	67ba      	str	r2, [r7, #120]	; 0x78
 80054d6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80054da:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80054de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e2:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 80054e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e8:	3b01      	subs	r3, #1
 80054ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f47f ae45 	bne.w	800517e <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80054f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054f6:	b299      	uxth	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	2302      	movs	r3, #2
 80054fe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005500:	f000 fef2 	bl	80062e8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8005504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005506:	b299      	uxth	r1, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	2302      	movs	r3, #2
 800550e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005510:	f000 feea 	bl	80062e8 <arm_radix8_butterfly_f32>
}
 8005514:	bf00      	nop
 8005516:	3780      	adds	r7, #128	; 0x80
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b0ac      	sub	sp, #176	; 0xb0
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8005532:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	4413      	add	r3, r2
 800553c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8005540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800554a:	4413      	add	r3, r2
 800554c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8005550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800555a:	4413      	add	r3, r2
 800555c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8005564:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005568:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800556a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800556e:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8005570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005574:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8005576:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800557a:	3b04      	subs	r3, #4
 800557c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8005580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005584:	3b04      	subs	r3, #4
 8005586:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800558a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800558e:	3b04      	subs	r3, #4
 8005590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8005594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800559e:	4413      	add	r3, r2
 80055a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80055bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80055c6:	2302      	movs	r3, #2
 80055c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80055ca:	2304      	movs	r3, #4
 80055cc:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80055ce:	2306      	movs	r3, #6
 80055d0:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	ed93 7a00 	vldr	s14, [r3]
 80055d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055dc:	edd3 7a00 	vldr	s15, [r3]
 80055e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	ed93 7a00 	vldr	s14, [r3]
 80055ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055f2:	edd3 7a00 	vldr	s15, [r3]
 80055f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055fa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	3304      	adds	r3, #4
 8005602:	ed93 7a00 	vldr	s14, [r3]
 8005606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800560a:	3304      	adds	r3, #4
 800560c:	edd3 7a00 	vldr	s15, [r3]
 8005610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005614:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	3304      	adds	r3, #4
 800561c:	ed93 7a00 	vldr	s14, [r3]
 8005620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005624:	3304      	adds	r3, #4
 8005626:	edd3 7a00 	vldr	s15, [r3]
 800562a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8005632:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005636:	3304      	adds	r3, #4
 8005638:	ed93 7a00 	vldr	s14, [r3]
 800563c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005648:	3304      	adds	r3, #4
 800564a:	edd3 7a00 	vldr	s15, [r3]
 800564e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005652:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8005656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800565a:	edd3 7a00 	vldr	s15, [r3]
 800565e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005662:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800566a:	edd3 7a00 	vldr	s15, [r3]
 800566e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005672:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8005676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800567a:	edd3 7a00 	vldr	s15, [r3]
 800567e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005682:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800568a:	edd3 7a00 	vldr	s15, [r3]
 800568e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005692:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8005696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800569a:	3304      	adds	r3, #4
 800569c:	edd3 7a00 	vldr	s15, [r3]
 80056a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80056a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056ac:	3304      	adds	r3, #4
 80056ae:	edd3 7a00 	vldr	s15, [r3]
 80056b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056b6:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80056ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056be:	3304      	adds	r3, #4
 80056c0:	edd3 7a00 	vldr	s15, [r3]
 80056c4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80056c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056d0:	3304      	adds	r3, #4
 80056d2:	edd3 7a00 	vldr	s15, [r3]
 80056d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056da:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80056de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056e2:	ed93 7a00 	vldr	s14, [r3]
 80056e6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80056ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f2:	edd3 7a00 	vldr	s15, [r3]
 80056f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056fa:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80056fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005702:	ed93 7a00 	vldr	s14, [r3]
 8005706:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800570a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800570e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005712:	edd3 7a00 	vldr	s15, [r3]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	1d1a      	adds	r2, r3, #4
 800571a:	603a      	str	r2, [r7, #0]
 800571c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005720:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8005724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005728:	3304      	adds	r3, #4
 800572a:	ed93 7a00 	vldr	s14, [r3]
 800572e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005736:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800573a:	3304      	adds	r3, #4
 800573c:	edd3 7a00 	vldr	s15, [r3]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	1d1a      	adds	r2, r3, #4
 8005744:	603a      	str	r2, [r7, #0]
 8005746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800574a:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800574e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005752:	1d1a      	adds	r2, r3, #4
 8005754:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575a:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800575c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005768:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800576a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800576e:	1d1a      	adds	r2, r3, #4
 8005770:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8005778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8005786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800578a:	1d1a      	adds	r2, r3, #4
 800578c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8005794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005798:	1d1a      	adds	r2, r3, #4
 800579a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80057a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80057aa:	4413      	add	r3, r2
 80057ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80057b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80057b8:	4413      	add	r3, r2
 80057ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80057be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057c6:	4413      	add	r3, r2
 80057c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80057cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057d0:	3b02      	subs	r3, #2
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057d8:	e31a      	b.n	8005e10 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	ed93 7a00 	vldr	s14, [r3]
 80057e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057e4:	edd3 7a00 	vldr	s15, [r3]
 80057e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ec:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	ed93 7a00 	vldr	s14, [r3]
 80057f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057fa:	edd3 7a00 	vldr	s15, [r3]
 80057fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005802:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	3304      	adds	r3, #4
 800580a:	ed93 7a00 	vldr	s14, [r3]
 800580e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005812:	3304      	adds	r3, #4
 8005814:	edd3 7a00 	vldr	s15, [r3]
 8005818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800581c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	3304      	adds	r3, #4
 8005824:	ed93 7a00 	vldr	s14, [r3]
 8005828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800582c:	3304      	adds	r3, #4
 800582e:	edd3 7a00 	vldr	s15, [r3]
 8005832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005836:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 800583a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800583e:	3304      	adds	r3, #4
 8005840:	ed93 7a00 	vldr	s14, [r3]
 8005844:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800584c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005850:	3304      	adds	r3, #4
 8005852:	edd3 7a00 	vldr	s15, [r3]
 8005856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800585a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800585e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005862:	edd3 7a00 	vldr	s15, [r3]
 8005866:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800586a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800586e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005872:	edd3 7a00 	vldr	s15, [r3]
 8005876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 800587e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005882:	edd3 7a00 	vldr	s15, [r3]
 8005886:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800588a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800588e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005892:	edd3 7a00 	vldr	s15, [r3]
 8005896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800589a:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 800589e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058a2:	3304      	adds	r3, #4
 80058a4:	edd3 7a00 	vldr	s15, [r3]
 80058a8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80058ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058b4:	3304      	adds	r3, #4
 80058b6:	edd3 7a00 	vldr	s15, [r3]
 80058ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058be:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80058c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058c6:	3304      	adds	r3, #4
 80058c8:	edd3 7a00 	vldr	s15, [r3]
 80058cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80058d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058d8:	3304      	adds	r3, #4
 80058da:	edd3 7a00 	vldr	s15, [r3]
 80058de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e2:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80058e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058ea:	ed93 7a00 	vldr	s14, [r3]
 80058ee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80058f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058fa:	edd3 7a00 	vldr	s15, [r3]
 80058fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005902:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8005906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800590a:	ed93 7a00 	vldr	s14, [r3]
 800590e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800591a:	edd3 7a00 	vldr	s15, [r3]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	1d1a      	adds	r2, r3, #4
 8005922:	603a      	str	r2, [r7, #0]
 8005924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005928:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 800592c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005930:	3304      	adds	r3, #4
 8005932:	ed93 7a00 	vldr	s14, [r3]
 8005936:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800593a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800593e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005942:	3304      	adds	r3, #4
 8005944:	edd3 7a00 	vldr	s15, [r3]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	603a      	str	r2, [r7, #0]
 800594e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005952:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8005956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800595a:	3b04      	subs	r3, #4
 800595c:	ed93 7a00 	vldr	s14, [r3]
 8005960:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005964:	3b04      	subs	r3, #4
 8005966:	edd3 7a00 	vldr	s15, [r3]
 800596a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800596e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8005972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005976:	3b04      	subs	r3, #4
 8005978:	ed93 7a00 	vldr	s14, [r3]
 800597c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005980:	3b04      	subs	r3, #4
 8005982:	edd3 7a00 	vldr	s15, [r3]
 8005986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800598a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 800598e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005992:	ed93 7a00 	vldr	s14, [r3]
 8005996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800599a:	edd3 7a00 	vldr	s15, [r3]
 800599e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059a2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80059a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059aa:	ed93 7a00 	vldr	s14, [r3]
 80059ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059b2:	edd3 7a00 	vldr	s15, [r3]
 80059b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ba:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80059be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059c2:	ed93 7a00 	vldr	s14, [r3]
 80059c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059ca:	edd3 7a00 	vldr	s15, [r3]
 80059ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059d2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80059d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059da:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80059de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059e2:	ed93 7a00 	vldr	s14, [r3]
 80059e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059ea:	edd3 7a00 	vldr	s15, [r3]
 80059ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059f6:	3b04      	subs	r3, #4
 80059f8:	edd3 7a00 	vldr	s15, [r3]
 80059fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a04:	3b04      	subs	r3, #4
 8005a06:	edd3 7a00 	vldr	s15, [r3]
 8005a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a0e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8005a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a16:	3b04      	subs	r3, #4
 8005a18:	edd3 7a00 	vldr	s15, [r3]
 8005a1c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005a20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a28:	3b04      	subs	r3, #4
 8005a2a:	edd3 7a00 	vldr	s15, [r3]
 8005a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8005a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a3a:	edd3 7a00 	vldr	s15, [r3]
 8005a3e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005a42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a4a:	edd3 7a00 	vldr	s15, [r3]
 8005a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8005a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a5a:	ed93 7a00 	vldr	s14, [r3]
 8005a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a62:	edd3 7a00 	vldr	s15, [r3]
 8005a66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a72:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8005a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a7a:	3b04      	subs	r3, #4
 8005a7c:	ed93 7a00 	vldr	s14, [r3]
 8005a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a84:	3b04      	subs	r3, #4
 8005a86:	edd3 7a00 	vldr	s15, [r3]
 8005a8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a8e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a96:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8005a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a9e:	ed93 7a00 	vldr	s14, [r3]
 8005aa2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aae:	edd3 7a00 	vldr	s15, [r3]
 8005ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ab6:	1f1a      	subs	r2, r3, #4
 8005ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8005ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ac8:	3b04      	subs	r3, #4
 8005aca:	ed93 7a00 	vldr	s14, [r3]
 8005ace:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ada:	3b04      	subs	r3, #4
 8005adc:	edd3 7a00 	vldr	s15, [r3]
 8005ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ae4:	1f1a      	subs	r2, r3, #4
 8005ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aee:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8005af2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8005b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b04:	1d1a      	adds	r2, r3, #4
 8005b06:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8005b0e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005b12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8005b1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8005b2e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b32:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8005b3e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005b42:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8005b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b52:	1d1a      	adds	r2, r3, #4
 8005b54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005b58:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005b5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b64:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8005b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b6c:	1d1a      	adds	r2, r3, #4
 8005b6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005b72:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005b76:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b7e:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8005b82:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005b86:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8005b92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8005ba2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ba6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8005bb2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005bb6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8005bc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bc6:	1f1a      	subs	r2, r3, #4
 8005bc8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bcc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005bd0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bd8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8005bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005be0:	1f1a      	subs	r2, r3, #4
 8005be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005be6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005bea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bf2:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8005bf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8005bfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8005c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005c0e:	4413      	add	r3, r2
 8005c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8005c14:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c18:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c20:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8005c24:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c28:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c30:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8005c34:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c38:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c40:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8005c44:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c48:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c50:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8005c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c58:	1d1a      	adds	r2, r3, #4
 8005c5a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c5e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005c62:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c6a:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8005c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c72:	1d1a      	adds	r2, r3, #4
 8005c74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c78:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005c7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c84:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8005c88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c8c:	eef1 7a67 	vneg.f32	s15, s15
 8005c90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c98:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8005c9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005ca0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8005cac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005cb0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8005cbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005cc0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8005ccc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cd0:	1f1a      	subs	r2, r3, #4
 8005cd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cd6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005cda:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce2:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8005ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cea:	1f1a      	subs	r2, r3, #4
 8005cec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cf0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005cf4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cfc:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8005d00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8005d08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8005d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d18:	4413      	add	r3, r2
 8005d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8005d1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d22:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8005d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8005d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d42:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8005d4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d52:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8005d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005d68:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005d6c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d74:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8005d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d7c:	1d1a      	adds	r2, r3, #4
 8005d7e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005d82:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005d86:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d8e:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8005d92:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d96:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8005da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005da6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8005db2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005db6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8005dc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005dc6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8005dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dd6:	1f1a      	subs	r2, r3, #4
 8005dd8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8005ddc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005de0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8005dec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005df0:	1f1a      	subs	r2, r3, #4
 8005df2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8005df6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005dfa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e02:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8005e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f ace0 	bne.w	80057da <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	ed93 7a00 	vldr	s14, [r3]
 8005e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e24:	edd3 7a00 	vldr	s15, [r3]
 8005e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e2c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	ed93 7a00 	vldr	s14, [r3]
 8005e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3a:	edd3 7a00 	vldr	s15, [r3]
 8005e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e42:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	ed93 7a00 	vldr	s14, [r3]
 8005e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e52:	3304      	adds	r3, #4
 8005e54:	edd3 7a00 	vldr	s15, [r3]
 8005e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e5c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	3304      	adds	r3, #4
 8005e64:	ed93 7a00 	vldr	s14, [r3]
 8005e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	edd3 7a00 	vldr	s15, [r3]
 8005e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e76:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8005e7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e7e:	3304      	adds	r3, #4
 8005e80:	ed93 7a00 	vldr	s14, [r3]
 8005e84:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e90:	3304      	adds	r3, #4
 8005e92:	edd3 7a00 	vldr	s15, [r3]
 8005e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e9a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8005e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ea2:	edd3 7a00 	vldr	s15, [r3]
 8005ea6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005eaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005eae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005eb2:	edd3 7a00 	vldr	s15, [r3]
 8005eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8005ebe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ec2:	edd3 7a00 	vldr	s15, [r3]
 8005ec6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005eca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ed2:	edd3 7a00 	vldr	s15, [r3]
 8005ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eda:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8005ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	edd3 7a00 	vldr	s15, [r3]
 8005ee8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005eec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	edd3 7a00 	vldr	s15, [r3]
 8005efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005efe:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8005f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f06:	3304      	adds	r3, #4
 8005f08:	edd3 7a00 	vldr	s15, [r3]
 8005f0c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005f10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f18:	3304      	adds	r3, #4
 8005f1a:	edd3 7a00 	vldr	s15, [r3]
 8005f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f22:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8005f26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f2a:	ed93 7a00 	vldr	s14, [r3]
 8005f2e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f3a:	edd3 7a00 	vldr	s15, [r3]
 8005f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f42:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8005f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f4a:	ed93 7a00 	vldr	s14, [r3]
 8005f4e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f5a:	edd3 7a00 	vldr	s15, [r3]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	1d1a      	adds	r2, r3, #4
 8005f62:	603a      	str	r2, [r7, #0]
 8005f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f68:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8005f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f70:	3304      	adds	r3, #4
 8005f72:	ed93 7a00 	vldr	s14, [r3]
 8005f76:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f82:	3304      	adds	r3, #4
 8005f84:	edd3 7a00 	vldr	s15, [r3]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	1d1a      	adds	r2, r3, #4
 8005f8c:	603a      	str	r2, [r7, #0]
 8005f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f92:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8005f96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8005f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8005fa6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005faa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8005fb6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005fba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8005fc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005fca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8005fd6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005fda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8005fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8005ff0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005ff4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ffc:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8006000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006004:	1d1a      	adds	r2, r3, #4
 8006006:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800600a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800600e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006016:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 800601a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8006022:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800602a:	edd7 7a07 	vldr	s15, [r7, #28]
 800602e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006036:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800603a:	edd7 7a08 	vldr	s15, [r7, #32]
 800603e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800604a:	edd7 7a08 	vldr	s15, [r7, #32]
 800604e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800605a:	edd7 7a07 	vldr	s15, [r7, #28]
 800605e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800606a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800606e:	1d1a      	adds	r2, r3, #4
 8006070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006074:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006078:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800607c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006080:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8006084:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006088:	1d1a      	adds	r2, r3, #4
 800608a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800608e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006092:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800609a:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800609e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80060a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80060ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80060b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80060b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80060be:	edd7 7a04 	vldr	s15, [r7, #16]
 80060c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80060ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80060d2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80060de:	edd7 7a03 	vldr	s15, [r7, #12]
 80060e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80060e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80060ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80060f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80060fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006104:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8006108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006112:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006116:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800611a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800611e:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8006122:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006126:	b299      	uxth	r1, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	2304      	movs	r3, #4
 800612e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006130:	f000 f8da 	bl	80062e8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8006134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006138:	b299      	uxth	r1, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	2304      	movs	r3, #4
 8006140:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8006142:	f000 f8d1 	bl	80062e8 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8006146:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800614a:	b299      	uxth	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	2304      	movs	r3, #4
 8006152:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006154:	f000 f8c8 	bl	80062e8 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8006158:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800615c:	b299      	uxth	r1, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	2304      	movs	r3, #4
 8006164:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006166:	f000 f8bf 	bl	80062e8 <arm_radix8_butterfly_f32>
}
 800616a:	bf00      	nop
 800616c:	37b0      	adds	r7, #176	; 0xb0
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b088      	sub	sp, #32
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	4611      	mov	r1, r2
 800617e:	461a      	mov	r2, r3
 8006180:	460b      	mov	r3, r1
 8006182:	71fb      	strb	r3, [r7, #7]
 8006184:	4613      	mov	r3, r2
 8006186:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d117      	bne.n	80061c4 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	3304      	adds	r3, #4
 8006198:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	e00d      	b.n	80061bc <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	edd3 7a00 	vldr	s15, [r3]
 80061a6:	eef1 7a67 	vneg.f32	s15, s15
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	3308      	adds	r3, #8
 80061b4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d3ed      	bcc.n	80061a0 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ca:	d040      	beq.n	800624e <arm_cfft_f32+0xdc>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d2:	d845      	bhi.n	8006260 <arm_cfft_f32+0xee>
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061da:	d033      	beq.n	8006244 <arm_cfft_f32+0xd2>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e2:	d83d      	bhi.n	8006260 <arm_cfft_f32+0xee>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ea:	d026      	beq.n	800623a <arm_cfft_f32+0xc8>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f2:	d835      	bhi.n	8006260 <arm_cfft_f32+0xee>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fa:	d028      	beq.n	800624e <arm_cfft_f32+0xdc>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006202:	d82d      	bhi.n	8006260 <arm_cfft_f32+0xee>
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620a:	d01b      	beq.n	8006244 <arm_cfft_f32+0xd2>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006212:	d825      	bhi.n	8006260 <arm_cfft_f32+0xee>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d00f      	beq.n	800623a <arm_cfft_f32+0xc8>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b80      	cmp	r3, #128	; 0x80
 800621e:	d81f      	bhi.n	8006260 <arm_cfft_f32+0xee>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	d013      	beq.n	800624e <arm_cfft_f32+0xdc>
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	d819      	bhi.n	8006260 <arm_cfft_f32+0xee>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b10      	cmp	r3, #16
 8006230:	d003      	beq.n	800623a <arm_cfft_f32+0xc8>
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b20      	cmp	r3, #32
 8006236:	d005      	beq.n	8006244 <arm_cfft_f32+0xd2>
 8006238:	e012      	b.n	8006260 <arm_cfft_f32+0xee>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7fe ff79 	bl	8005134 <arm_cfft_radix8by2_f32>
        break;
 8006242:	e00d      	b.n	8006260 <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff f968 	bl	800551c <arm_cfft_radix8by4_f32>
        break;
 800624c:	e008      	b.n	8006260 <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	b299      	uxth	r1, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	2301      	movs	r3, #1
 8006258:	68b8      	ldr	r0, [r7, #8]
 800625a:	f000 f845 	bl	80062e8 <arm_radix8_butterfly_f32>
        break;
 800625e:	bf00      	nop
    }  

    if( bitReverseFlag )
 8006260:	79bb      	ldrb	r3, [r7, #6]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8999      	ldrh	r1, [r3, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	461a      	mov	r2, r3
 8006270:	68b8      	ldr	r0, [r7, #8]
 8006272:	f7f9 ffad 	bl	80001d0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d130      	bne.n	80062de <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800628a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628e:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	e01c      	b.n	80062d6 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	61ba      	str	r2, [r7, #24]
 80062a2:	ed93 7a00 	vldr	s14, [r3]
 80062a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80062aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ae:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	edd3 7a00 	vldr	s15, [r3]
 80062b8:	eeb1 7a67 	vneg.f32	s14, s15
 80062bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80062c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	3304      	adds	r3, #4
 80062ce:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	3301      	adds	r3, #1
 80062d4:	61fb      	str	r3, [r7, #28]
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d3de      	bcc.n	800629c <arm_cfft_f32+0x12a>
        }
    }
}
 80062de:	bf00      	nop
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b0bd      	sub	sp, #244	; 0xf4
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	461a      	mov	r2, r3
 80062f4:	460b      	mov	r3, r1
 80062f6:	817b      	strh	r3, [r7, #10]
 80062f8:	4613      	mov	r3, r2
 80062fa:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <arm_radix8_butterfly_f32+0x3c>)
 80062fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8006302:	897b      	ldrh	r3, [r7, #10]
 8006304:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 8006308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8006310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006314:	08db      	lsrs	r3, r3, #3
 8006316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006320:	e002      	b.n	8006328 <arm_radix8_butterfly_f32+0x40>
 8006322:	bf00      	nop
 8006324:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8006328:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006330:	4413      	add	r3, r2
 8006332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8006336:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800633a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633e:	4413      	add	r3, r2
 8006340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8006344:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634c:	4413      	add	r3, r2
 800634e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8006352:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635a:	4413      	add	r3, r2
 800635c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8006360:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006368:	4413      	add	r3, r2
 800636a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800636e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006376:	4413      	add	r3, r2
 8006378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800637c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006384:	4413      	add	r3, r2
 8006386:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800638a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	ed93 7a00 	vldr	s14, [r3]
 8006398:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	edd3 7a00 	vldr	s15, [r3]
 80063a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063aa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80063ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	ed93 7a00 	vldr	s14, [r3]
 80063bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	edd3 7a00 	vldr	s15, [r3]
 80063ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063ce:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80063d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	ed93 7a00 	vldr	s14, [r3]
 80063e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	edd3 7a00 	vldr	s15, [r3]
 80063ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063f2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80063f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	ed93 7a00 	vldr	s14, [r3]
 8006404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	edd3 7a00 	vldr	s15, [r3]
 8006412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006416:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800641a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	ed93 7a00 	vldr	s14, [r3]
 8006428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	edd3 7a00 	vldr	s15, [r3]
 8006436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800643a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800643e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	ed93 7a00 	vldr	s14, [r3]
 800644c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	edd3 7a00 	vldr	s15, [r3]
 800645a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800645e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8006462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	ed93 7a00 	vldr	s14, [r3]
 8006470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	edd3 7a00 	vldr	s15, [r3]
 800647e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006482:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8006486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	ed93 7a00 	vldr	s14, [r3]
 8006494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4413      	add	r3, r2
 800649e:	edd3 7a00 	vldr	s15, [r3]
 80064a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064a6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80064aa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80064ae:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80064b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80064ba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80064be:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80064c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064c6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80064ca:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80064ce:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80064d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064d6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80064da:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80064de:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80064e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 80064ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80064f8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80064fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006500:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8006504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006512:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800651a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800651e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	3304      	adds	r3, #4
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4413      	add	r3, r2
 800652a:	ed93 7a00 	vldr	s14, [r3]
 800652e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	3304      	adds	r3, #4
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	edd3 7a00 	vldr	s15, [r3]
 800653e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006542:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8006546:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	3304      	adds	r3, #4
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	ed93 7a00 	vldr	s14, [r3]
 8006556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	3304      	adds	r3, #4
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	edd3 7a00 	vldr	s15, [r3]
 8006566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800656a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800656e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	3304      	adds	r3, #4
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	ed93 7a00 	vldr	s14, [r3]
 800657e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	3304      	adds	r3, #4
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	edd3 7a00 	vldr	s15, [r3]
 800658e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006592:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8006596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	3304      	adds	r3, #4
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	ed93 7a00 	vldr	s14, [r3]
 80065a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	3304      	adds	r3, #4
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	edd3 7a00 	vldr	s15, [r3]
 80065b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065ba:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80065be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	3304      	adds	r3, #4
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	ed93 7a00 	vldr	s14, [r3]
 80065ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	3304      	adds	r3, #4
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	edd3 7a00 	vldr	s15, [r3]
 80065de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065e2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80065e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	3304      	adds	r3, #4
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	ed93 7a00 	vldr	s14, [r3]
 80065f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	3304      	adds	r3, #4
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	edd3 7a00 	vldr	s15, [r3]
 8006606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800660a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800660e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	3304      	adds	r3, #4
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	ed93 7a00 	vldr	s14, [r3]
 800661e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	3304      	adds	r3, #4
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	edd3 7a00 	vldr	s15, [r3]
 800662e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006632:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8006636:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	3304      	adds	r3, #4
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	ed93 7a00 	vldr	s14, [r3]
 8006646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	3304      	adds	r3, #4
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	edd3 7a00 	vldr	s15, [r3]
 8006656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800665a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800665e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006662:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800666a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800666e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006672:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800667a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800667e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006682:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800668a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800668e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006692:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800669a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800669e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	3304      	adds	r3, #4
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4413      	add	r3, r2
 80066aa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80066ae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80066b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80066ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	3304      	adds	r3, #4
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80066ca:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80066ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066d2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80066d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80066e4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80066e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ec:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80066f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4413      	add	r3, r2
 80066fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80066fe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006706:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800670a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	3304      	adds	r3, #4
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800671a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800671e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006722:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8006726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	3304      	adds	r3, #4
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8006736:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800673a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800673e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8006742:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8006746:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800674a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800674e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006756:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800675a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800675e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006766:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800676a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8006772:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8006776:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800677a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800677e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006786:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800678a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800678e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006796:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800679a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80067a2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80067a6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80067aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067ae:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80067b2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80067b6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80067ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067be:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80067c2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80067c6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80067ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067ce:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80067d2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80067d6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80067da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067de:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80067e2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80067e6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80067ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067ee:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80067f2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80067f6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80067fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067fe:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8006802:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8006806:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800680a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800680e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8006812:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8006816:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800681a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800681e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8006822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8006830:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006838:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800683c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800684a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800684e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006852:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8006856:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4413      	add	r3, r2
 8006860:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006864:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800686c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8006870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800687e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006886:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800688a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	3304      	adds	r3, #4
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800689a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800689e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068a2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80068a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	3304      	adds	r3, #4
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80068b6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80068ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068be:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80068c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	3304      	adds	r3, #4
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80068d2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80068d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068da:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80068de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	3304      	adds	r3, #4
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80068ee:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80068f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f6:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 80068fa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80068fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006902:	4413      	add	r3, r2
 8006904:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8006908:	897b      	ldrh	r3, [r7, #10]
 800690a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800690e:	429a      	cmp	r2, r3
 8006910:	f4ff ad0a 	bcc.w	8006328 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8006914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006918:	2b07      	cmp	r3, #7
 800691a:	f240 84e3 	bls.w	80072e4 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8006924:	2301      	movs	r3, #1
 8006926:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800692a:	893b      	ldrh	r3, [r7, #8]
 800692c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006930:	4413      	add	r3, r2
 8006932:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8006934:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006936:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800693a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800693e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006940:	4413      	add	r3, r2
 8006942:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8006944:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006948:	4413      	add	r3, r2
 800694a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800694c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800694e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006950:	4413      	add	r3, r2
 8006952:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8006954:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006956:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006958:	4413      	add	r3, r2
 800695a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800695c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800695e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006960:	4413      	add	r3, r2
 8006962:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8006964:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006968:	4413      	add	r3, r2
 800696a:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 800696c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800697a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8006986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8006992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4413      	add	r3, r2
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800699e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	4413      	add	r3, r2
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80069aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80069b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4413      	add	r3, r2
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80069c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	3304      	adds	r3, #4
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80069d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	3304      	adds	r3, #4
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80069e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	3304      	adds	r3, #4
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	4413      	add	r3, r2
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80069ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	3304      	adds	r3, #4
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	4413      	add	r3, r2
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 80069fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	3304      	adds	r3, #4
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	4413      	add	r3, r2
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8006a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	3304      	adds	r3, #4
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8006a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8006a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8006a2e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a36:	4413      	add	r3, r2
 8006a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8006a3c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a44:	4413      	add	r3, r2
 8006a46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8006a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a52:	4413      	add	r3, r2
 8006a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8006a58:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a60:	4413      	add	r3, r2
 8006a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8006a66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6e:	4413      	add	r3, r2
 8006a70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8006a74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8006a82:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8006a90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a94:	00db      	lsls	r3, r3, #3
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	ed93 7a00 	vldr	s14, [r3]
 8006a9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	edd3 7a00 	vldr	s15, [r3]
 8006aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ab0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8006ab4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4413      	add	r3, r2
 8006abe:	ed93 7a00 	vldr	s14, [r3]
 8006ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	edd3 7a00 	vldr	s15, [r3]
 8006ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ad4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8006ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	ed93 7a00 	vldr	s14, [r3]
 8006ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	edd3 7a00 	vldr	s15, [r3]
 8006af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006af8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8006afc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	ed93 7a00 	vldr	s14, [r3]
 8006b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	edd3 7a00 	vldr	s15, [r3]
 8006b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b1c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8006b20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	ed93 7a00 	vldr	s14, [r3]
 8006b2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	edd3 7a00 	vldr	s15, [r3]
 8006b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b40:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8006b44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	ed93 7a00 	vldr	s14, [r3]
 8006b52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	edd3 7a00 	vldr	s15, [r3]
 8006b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b64:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8006b68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	ed93 7a00 	vldr	s14, [r3]
 8006b76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	edd3 7a00 	vldr	s15, [r3]
 8006b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b88:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8006b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	ed93 7a00 	vldr	s14, [r3]
 8006b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	edd3 7a00 	vldr	s15, [r3]
 8006ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bac:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8006bb0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006bb4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bbc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8006bc0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006bc4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bcc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8006bd0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006bd4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bdc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8006be0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006be4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bec:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8006bf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006bfe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c06:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8006c0a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006c0e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c16:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006c1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	3304      	adds	r3, #4
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	ed93 7a00 	vldr	s14, [r3]
 8006c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	3304      	adds	r3, #4
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	edd3 7a00 	vldr	s15, [r3]
 8006c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c3e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8006c42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	3304      	adds	r3, #4
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	ed93 7a00 	vldr	s14, [r3]
 8006c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	3304      	adds	r3, #4
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	edd3 7a00 	vldr	s15, [r3]
 8006c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c66:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	3304      	adds	r3, #4
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	ed93 7a00 	vldr	s14, [r3]
 8006c7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	3304      	adds	r3, #4
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	edd3 7a00 	vldr	s15, [r3]
 8006c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c8e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8006c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	3304      	adds	r3, #4
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	ed93 7a00 	vldr	s14, [r3]
 8006ca2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	3304      	adds	r3, #4
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	edd3 7a00 	vldr	s15, [r3]
 8006cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cb6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8006cba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	ed93 7a00 	vldr	s14, [r3]
 8006cca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	edd3 7a00 	vldr	s15, [r3]
 8006cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cde:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8006ce2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	3304      	adds	r3, #4
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	ed93 7a00 	vldr	s14, [r3]
 8006cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	edd3 7a00 	vldr	s15, [r3]
 8006d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d06:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006d0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	3304      	adds	r3, #4
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	ed93 7a00 	vldr	s14, [r3]
 8006d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	3304      	adds	r3, #4
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	edd3 7a00 	vldr	s15, [r3]
 8006d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d2e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8006d32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	3304      	adds	r3, #4
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	ed93 7a00 	vldr	s14, [r3]
 8006d42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	3304      	adds	r3, #4
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	edd3 7a00 	vldr	s15, [r3]
 8006d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d56:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8006d5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006d5e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d66:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8006d6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006d6e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d76:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8006d7a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006d7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d86:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8006d8a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006d8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8006d9a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006d9e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006da6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8006daa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006dae:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006db6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8006dba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006dca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8006dd6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006dda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006de2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8006de6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8006dea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006df2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8006df6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8006dfa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e02:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8006e06:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006e0a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8006e16:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006e1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8006e26:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006e2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e32:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8006e36:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006e3a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e42:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8006e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	ed97 7a07 	vldr	s14, [r7, #28]
 8006e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e5c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8006e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	3304      	adds	r3, #4
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006e70:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e78:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8006e7c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006e80:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e88:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8006e8c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006e90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e98:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8006e9c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006ea0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8006eac:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006eb0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8006ebc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	ed97 7a07 	vldr	s14, [r7, #28]
 8006eca:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ed2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8006ed6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	3304      	adds	r3, #4
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ee6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eee:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8006ef2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006ef6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efe:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8006f02:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006f06:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8006f12:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006f16:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8006f22:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006f26:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8006f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006f40:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f48:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8006f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	3304      	adds	r3, #4
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f64:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8006f68:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8006f6c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f74:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8006f80:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8006f84:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f8c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f94:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8006f98:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8006f9c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fa4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8006fb0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8006fb4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fbc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8006fc8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8006fcc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fd4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8006fd8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8006fdc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fe4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8006fe8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006fec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8006ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ff4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8006ff8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006ffc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8007000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007004:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8007008:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800700c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007014:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8007018:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800701c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007024:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8007028:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800702c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007034:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8007038:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800703c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007044:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8007048:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800704c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007054:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8007058:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800705c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007064:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8007068:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800706c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007074:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8007078:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800707c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007084:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8007088:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800708c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8007090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007094:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8007098:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800709c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80070a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070a4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80070a8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80070ac:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80070b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070b4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80070b8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80070bc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80070c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070c4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80070c8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80070cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80070d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80070d8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80070dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80070e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80070e8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80070ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80070f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80070f8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80070fc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007104:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8007108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	ed97 7a07 	vldr	s14, [r7, #28]
 8007116:	edd7 7a06 	vldr	s15, [r7, #24]
 800711a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800711e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8007122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	3304      	adds	r3, #4
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4413      	add	r3, r2
 800712e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007132:	edd7 7a04 	vldr	s15, [r7, #16]
 8007136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800713a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800713e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007142:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800714e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007152:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800715e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007162:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800716e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007172:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800717e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	ed97 7a07 	vldr	s14, [r7, #28]
 800718c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007194:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8007198:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	3304      	adds	r3, #4
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80071a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80071ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071b0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80071b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80071b8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80071bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80071c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80071c8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80071cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80071d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80071d8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80071dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80071e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80071e8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80071ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80071f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8007202:	edd7 7a06 	vldr	s15, [r7, #24]
 8007206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800720a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800720e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	3304      	adds	r3, #4
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4413      	add	r3, r2
 800721a:	ed97 7a05 	vldr	s14, [r7, #20]
 800721e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007226:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800722a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800722e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800723a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800723e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8007242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007246:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800724a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800724e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800725a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800725e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007266:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800726a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	ed97 7a07 	vldr	s14, [r7, #28]
 8007278:	edd7 7a06 	vldr	s15, [r7, #24]
 800727c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007280:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8007284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	3304      	adds	r3, #4
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	ed97 7a05 	vldr	s14, [r7, #20]
 8007294:	edd7 7a04 	vldr	s15, [r7, #16]
 8007298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800729c:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 80072a0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80072a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072a8:	4413      	add	r3, r2
 80072aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 80072ae:	897b      	ldrh	r3, [r7, #10]
 80072b0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80072b4:	429a      	cmp	r2, r3
 80072b6:	f4ff abba 	bcc.w	8006a2e <arm_radix8_butterfly_f32+0x746>
         
         j++;
 80072ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072be:	3301      	adds	r3, #1
 80072c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 80072c4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80072c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072cc:	429a      	cmp	r2, r3
 80072ce:	f4ff ab2c 	bcc.w	800692a <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 80072d2:	893b      	ldrh	r3, [r7, #8]
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 80072d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072dc:	2b07      	cmp	r3, #7
 80072de:	f63f a813 	bhi.w	8006308 <arm_radix8_butterfly_f32+0x20>
}
 80072e2:	e000      	b.n	80072e6 <arm_radix8_butterfly_f32+0xffe>
         break;
 80072e4:	bf00      	nop
}
 80072e6:	bf00      	nop
 80072e8:	37f4      	adds	r7, #244	; 0xf4
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop

080072f4 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b095      	sub	sp, #84	; 0x54
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;					
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	3b01      	subs	r3, #1
 8007314:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8007316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800731c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8007322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8007328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800732e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007330:	1d1a      	adds	r2, r3, #4
 8007332:	64ba      	str	r2, [r7, #72]	; 0x48
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8007338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733a:	1d1a      	adds	r2, r3, #4
 800733c:	64ba      	str	r2, [r7, #72]	; 0x48
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28
   
   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8007342:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007346:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800734a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800734e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   
   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8007352:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007356:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800735a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800735e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8007362:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007366:	edd7 7a08 	vldr	s15, [r7, #32]
 800736a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	1d1a      	adds	r2, r3, #4
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800737c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8007380:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007384:	edd7 7a08 	vldr	s15, [r7, #32]
 8007388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1d1a      	adds	r2, r3, #4
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800739a:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800739e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	4413      	add	r3, r2
 80073a6:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80073a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073aa:	3308      	adds	r3, #8
 80073ac:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80073ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80073b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80073ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80073c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80073c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c8:	1d1a      	adds	r2, r3, #4
 80073ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80073d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80073da:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80073de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80073e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80073ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80073ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80073f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073f6:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80073fa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80073fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007406:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800740a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800740e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800741a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800741e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800742a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800742e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800743a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800743e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007446:	edd7 7a07 	vldr	s15, [r7, #28]
 800744a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800744e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	1d1a      	adds	r2, r3, #4
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007464:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8007468:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800746c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007470:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007474:	edd7 7a06 	vldr	s15, [r7, #24]
 8007478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800747c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800748e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007492:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8007496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007498:	3308      	adds	r3, #8
 800749a:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800749c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749e:	3b08      	subs	r3, #8
 80074a0:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80074a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a4:	3b01      	subs	r3, #1
 80074a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while(k > 0u);
 80074a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f47f af7f 	bne.w	80073ae <stage_rfft_f32+0xba>
}
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	3754      	adds	r7, #84	; 0x54
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 80074be:	b480      	push	{r7}
 80074c0:	b095      	sub	sp, #84	; 0x54
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;					
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	3b01      	subs	r3, #1
 80074de:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80074e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80074e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80074ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ee:	3308      	adds	r3, #8
 80074f0:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80074f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80074f6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80074fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	1d1a      	adds	r2, r3, #4
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800750c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8007510:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007514:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1d1a      	adds	r2, r3, #4
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800752a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800752e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	4413      	add	r3, r2
 8007536:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8007538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800753a:	3308      	adds	r3, #8
 800753c:	647b      	str	r3, [r7, #68]	; 0x44

   while(k > 0u)
 800753e:	e07c      	b.n	800763a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8007540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8007546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800754c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8007552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8007558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800755a:	1d1a      	adds	r2, r3, #4
 800755c:	64ba      	str	r2, [r7, #72]	; 0x48
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8007562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007564:	1d1a      	adds	r2, r3, #4
 8007566:	64ba      	str	r2, [r7, #72]	; 0x48
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800756c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007570:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007578:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800757c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007580:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007588:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800758c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007590:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007598:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800759c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80075a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80075a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a8:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80075ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80075b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80075b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b8:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80075bc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80075c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80075c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c8:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80075cc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80075d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80075d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80075dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80075e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	1d1a      	adds	r2, r3, #4
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80075f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075f6:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80075fa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80075fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007602:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007606:	edd7 7a05 	vldr	s15, [r7, #20]
 800760a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800760e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	1d1a      	adds	r2, r3, #4
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007624:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8007628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762a:	3308      	adds	r3, #8
 800762c:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800762e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007630:	3b08      	subs	r3, #8
 8007632:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8007634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007636:	3b01      	subs	r3, #1
 8007638:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(k > 0u)
 800763a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763c:	2b00      	cmp	r3, #0
 800763e:	f47f af7f 	bne.w	8007540 <merge_rfft_f32+0x82>
   }

}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	3754      	adds	r7, #84	; 0x54
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8a1b      	ldrh	r3, [r3, #16]
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if(ifftFlag)
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff ff20 	bl	80074be <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800767e:	78fa      	ldrb	r2, [r7, #3]
 8007680:	2301      	movs	r3, #1
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	6978      	ldr	r0, [r7, #20]
 8007686:	f7fe fd74 	bl	8006172 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
   
      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800768a:	e00a      	b.n	80076a2 <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	2301      	movs	r3, #1
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	6978      	ldr	r0, [r7, #20]
 8007694:	f7fe fd6d 	bl	8006172 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff fe29 	bl	80072f4 <stage_rfft_f32>
}
 80076a2:	bf00      	nop
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.   
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 80076c0:	887b      	ldrh	r3, [r7, #2]
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	887a      	ldrh	r2, [r7, #2]
 80076ce:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d8:	d023      	beq.n	8007722 <arm_rfft_fast_init_f32+0x76>
 80076da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076de:	f300 808c 	bgt.w	80077fa <arm_rfft_fast_init_f32+0x14e>
 80076e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e6:	d02a      	beq.n	800773e <arm_rfft_fast_init_f32+0x92>
 80076e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ec:	f300 8085 	bgt.w	80077fa <arm_rfft_fast_init_f32+0x14e>
 80076f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f4:	d031      	beq.n	800775a <arm_rfft_fast_init_f32+0xae>
 80076f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fa:	dc7e      	bgt.n	80077fa <arm_rfft_fast_init_f32+0x14e>
 80076fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007700:	d039      	beq.n	8007776 <arm_rfft_fast_init_f32+0xca>
 8007702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007706:	dc78      	bgt.n	80077fa <arm_rfft_fast_init_f32+0x14e>
 8007708:	2b80      	cmp	r3, #128	; 0x80
 800770a:	d042      	beq.n	8007792 <arm_rfft_fast_init_f32+0xe6>
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	dc74      	bgt.n	80077fa <arm_rfft_fast_init_f32+0x14e>
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	d04b      	beq.n	80077ac <arm_rfft_fast_init_f32+0x100>
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	dc70      	bgt.n	80077fa <arm_rfft_fast_init_f32+0x14e>
 8007718:	2b10      	cmp	r3, #16
 800771a:	d061      	beq.n	80077e0 <arm_rfft_fast_init_f32+0x134>
 800771c:	2b20      	cmp	r3, #32
 800771e:	d052      	beq.n	80077c6 <arm_rfft_fast_init_f32+0x11a>
 8007720:	e06b      	b.n	80077fa <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048u:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8007728:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4a38      	ldr	r2, [pc, #224]	; (8007810 <arm_rfft_fast_init_f32+0x164>)
 800772e:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4a38      	ldr	r2, [pc, #224]	; (8007814 <arm_rfft_fast_init_f32+0x168>)
 8007734:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a37      	ldr	r2, [pc, #220]	; (8007818 <arm_rfft_fast_init_f32+0x16c>)
 800773a:	615a      	str	r2, [r3, #20]
    break;
 800773c:	e060      	b.n	8007800 <arm_rfft_fast_init_f32+0x154>
  case 1024u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8007744:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	4a34      	ldr	r2, [pc, #208]	; (800781c <arm_rfft_fast_init_f32+0x170>)
 800774a:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4a34      	ldr	r2, [pc, #208]	; (8007820 <arm_rfft_fast_init_f32+0x174>)
 8007750:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a33      	ldr	r2, [pc, #204]	; (8007824 <arm_rfft_fast_init_f32+0x178>)
 8007756:	615a      	str	r2, [r3, #20]
    break;
 8007758:	e052      	b.n	8007800 <arm_rfft_fast_init_f32+0x154>
  case 512u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007760:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4a30      	ldr	r2, [pc, #192]	; (8007828 <arm_rfft_fast_init_f32+0x17c>)
 8007766:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4a30      	ldr	r2, [pc, #192]	; (800782c <arm_rfft_fast_init_f32+0x180>)
 800776c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2f      	ldr	r2, [pc, #188]	; (8007830 <arm_rfft_fast_init_f32+0x184>)
 8007772:	615a      	str	r2, [r3, #20]
    break;
 8007774:	e044      	b.n	8007800 <arm_rfft_fast_init_f32+0x154>
  case 256u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800777c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4a2c      	ldr	r2, [pc, #176]	; (8007834 <arm_rfft_fast_init_f32+0x188>)
 8007782:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4a2c      	ldr	r2, [pc, #176]	; (8007838 <arm_rfft_fast_init_f32+0x18c>)
 8007788:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a2b      	ldr	r2, [pc, #172]	; (800783c <arm_rfft_fast_init_f32+0x190>)
 800778e:	615a      	str	r2, [r3, #20]
    break;
 8007790:	e036      	b.n	8007800 <arm_rfft_fast_init_f32+0x154>
  case 128u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	22d0      	movs	r2, #208	; 0xd0
 8007796:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4a29      	ldr	r2, [pc, #164]	; (8007840 <arm_rfft_fast_init_f32+0x194>)
 800779c:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4a28      	ldr	r2, [pc, #160]	; (8007844 <arm_rfft_fast_init_f32+0x198>)
 80077a2:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a28      	ldr	r2, [pc, #160]	; (8007848 <arm_rfft_fast_init_f32+0x19c>)
 80077a8:	615a      	str	r2, [r3, #20]
    break;
 80077aa:	e029      	b.n	8007800 <arm_rfft_fast_init_f32+0x154>
  case 64u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2238      	movs	r2, #56	; 0x38
 80077b0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4a25      	ldr	r2, [pc, #148]	; (800784c <arm_rfft_fast_init_f32+0x1a0>)
 80077b6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a25      	ldr	r2, [pc, #148]	; (8007850 <arm_rfft_fast_init_f32+0x1a4>)
 80077bc:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a24      	ldr	r2, [pc, #144]	; (8007854 <arm_rfft_fast_init_f32+0x1a8>)
 80077c2:	615a      	str	r2, [r3, #20]
    break;
 80077c4:	e01c      	b.n	8007800 <arm_rfft_fast_init_f32+0x154>
  case 32u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2230      	movs	r2, #48	; 0x30
 80077ca:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	4a22      	ldr	r2, [pc, #136]	; (8007858 <arm_rfft_fast_init_f32+0x1ac>)
 80077d0:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	4a21      	ldr	r2, [pc, #132]	; (800785c <arm_rfft_fast_init_f32+0x1b0>)
 80077d6:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a21      	ldr	r2, [pc, #132]	; (8007860 <arm_rfft_fast_init_f32+0x1b4>)
 80077dc:	615a      	str	r2, [r3, #20]
    break;
 80077de:	e00f      	b.n	8007800 <arm_rfft_fast_init_f32+0x154>
  case 16u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2214      	movs	r2, #20
 80077e4:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	4a1e      	ldr	r2, [pc, #120]	; (8007864 <arm_rfft_fast_init_f32+0x1b8>)
 80077ea:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4a1e      	ldr	r2, [pc, #120]	; (8007868 <arm_rfft_fast_init_f32+0x1bc>)
 80077f0:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a1d      	ldr	r2, [pc, #116]	; (800786c <arm_rfft_fast_init_f32+0x1c0>)
 80077f6:	615a      	str	r2, [r3, #20]
    break;
 80077f8:	e002      	b.n	8007800 <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 80077fa:	23ff      	movs	r3, #255	; 0xff
 80077fc:	73fb      	strb	r3, [r7, #15]
    break;
 80077fe:	bf00      	nop
  }

  return (status);
 8007800:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	08019b88 	.word	0x08019b88
 8007814:	080143f0 	.word	0x080143f0
 8007818:	0801f8c8 	.word	0x0801f8c8
 800781c:	08018d78 	.word	0x08018d78
 8007820:	080123f0 	.word	0x080123f0
 8007824:	0801d8c8 	.word	0x0801d8c8
 8007828:	080189f8 	.word	0x080189f8
 800782c:	080113f0 	.word	0x080113f0
 8007830:	0801c8c8 	.word	0x0801c8c8
 8007834:	08018688 	.word	0x08018688
 8007838:	08010bf0 	.word	0x08010bf0
 800783c:	0801c0c8 	.word	0x0801c0c8
 8007840:	080184e8 	.word	0x080184e8
 8007844:	080107f0 	.word	0x080107f0
 8007848:	0801bcc8 	.word	0x0801bcc8
 800784c:	08018478 	.word	0x08018478
 8007850:	080105f0 	.word	0x080105f0
 8007854:	0801bac8 	.word	0x0801bac8
 8007858:	08018418 	.word	0x08018418
 800785c:	080104f0 	.word	0x080104f0
 8007860:	0801b9c8 	.word	0x0801b9c8
 8007864:	080183f0 	.word	0x080183f0
 8007868:	08010470 	.word	0x08010470
 800786c:	0801b948 	.word	0x0801b948

08007870 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800787a:	2003      	movs	r0, #3
 800787c:	f000 f984 	bl	8007b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007880:	2000      	movs	r0, #0
 8007882:	f000 f80d 	bl	80078a0 <HAL_InitTick>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	71fb      	strb	r3, [r7, #7]
 8007890:	e001      	b.n	8007896 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007892:	f7fa fc4d 	bl	8002130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007896:	79fb      	ldrb	r3, [r7, #7]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80078ac:	4b17      	ldr	r3, [pc, #92]	; (800790c <HAL_InitTick+0x6c>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d023      	beq.n	80078fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80078b4:	4b16      	ldr	r3, [pc, #88]	; (8007910 <HAL_InitTick+0x70>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	4b14      	ldr	r3, [pc, #80]	; (800790c <HAL_InitTick+0x6c>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	4619      	mov	r1, r3
 80078be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 f99f 	bl	8007c0e <HAL_SYSTICK_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10f      	bne.n	80078f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b0f      	cmp	r3, #15
 80078da:	d809      	bhi.n	80078f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078dc:	2200      	movs	r2, #0
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	f04f 30ff 	mov.w	r0, #4294967295
 80078e4:	f000 f95b 	bl	8007b9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80078e8:	4a0a      	ldr	r2, [pc, #40]	; (8007914 <HAL_InitTick+0x74>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e007      	b.n	8007900 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
 80078f4:	e004      	b.n	8007900 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	73fb      	strb	r3, [r7, #15]
 80078fa:	e001      	b.n	8007900 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000070 	.word	0x20000070
 8007910:	20000004 	.word	0x20000004
 8007914:	2000006c 	.word	0x2000006c

08007918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <HAL_IncTick+0x20>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <HAL_IncTick+0x24>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4413      	add	r3, r2
 8007928:	4a04      	ldr	r2, [pc, #16]	; (800793c <HAL_IncTick+0x24>)
 800792a:	6013      	str	r3, [r2, #0]
}
 800792c:	bf00      	nop
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	20000070 	.word	0x20000070
 800793c:	20004548 	.word	0x20004548

08007940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return uwTick;
 8007944:	4b03      	ldr	r3, [pc, #12]	; (8007954 <HAL_GetTick+0x14>)
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20004548 	.word	0x20004548

08007958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007960:	f7ff ffee 	bl	8007940 <HAL_GetTick>
 8007964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007970:	d005      	beq.n	800797e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007972:	4b0a      	ldr	r3, [pc, #40]	; (800799c <HAL_Delay+0x44>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800797e:	bf00      	nop
 8007980:	f7ff ffde 	bl	8007940 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d8f7      	bhi.n	8007980 <HAL_Delay+0x28>
  {
  }
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000070 	.word	0x20000070

080079a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079b0:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <__NVIC_SetPriorityGrouping+0x44>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079bc:	4013      	ands	r3, r2
 80079be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079d2:	4a04      	ldr	r2, [pc, #16]	; (80079e4 <__NVIC_SetPriorityGrouping+0x44>)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	60d3      	str	r3, [r2, #12]
}
 80079d8:	bf00      	nop
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	e000ed00 	.word	0xe000ed00

080079e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079ec:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <__NVIC_GetPriorityGrouping+0x18>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	0a1b      	lsrs	r3, r3, #8
 80079f2:	f003 0307 	and.w	r3, r3, #7
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	e000ed00 	.word	0xe000ed00

08007a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	db0b      	blt.n	8007a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	f003 021f 	and.w	r2, r3, #31
 8007a1c:	4907      	ldr	r1, [pc, #28]	; (8007a3c <__NVIC_EnableIRQ+0x38>)
 8007a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	2001      	movs	r0, #1
 8007a26:	fa00 f202 	lsl.w	r2, r0, r2
 8007a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	e000e100 	.word	0xe000e100

08007a40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	db12      	blt.n	8007a78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	f003 021f 	and.w	r2, r3, #31
 8007a58:	490a      	ldr	r1, [pc, #40]	; (8007a84 <__NVIC_DisableIRQ+0x44>)
 8007a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	2001      	movs	r0, #1
 8007a62:	fa00 f202 	lsl.w	r2, r0, r2
 8007a66:	3320      	adds	r3, #32
 8007a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007a6c:	f3bf 8f4f 	dsb	sy
}
 8007a70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007a72:	f3bf 8f6f 	isb	sy
}
 8007a76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	e000e100 	.word	0xe000e100

08007a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	db0a      	blt.n	8007ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	490c      	ldr	r1, [pc, #48]	; (8007ad4 <__NVIC_SetPriority+0x4c>)
 8007aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aa6:	0112      	lsls	r2, r2, #4
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	440b      	add	r3, r1
 8007aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ab0:	e00a      	b.n	8007ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	4908      	ldr	r1, [pc, #32]	; (8007ad8 <__NVIC_SetPriority+0x50>)
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	0112      	lsls	r2, r2, #4
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	761a      	strb	r2, [r3, #24]
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	e000e100 	.word	0xe000e100
 8007ad8:	e000ed00 	.word	0xe000ed00

08007adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b089      	sub	sp, #36	; 0x24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	f1c3 0307 	rsb	r3, r3, #7
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	bf28      	it	cs
 8007afa:	2304      	movcs	r3, #4
 8007afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	3304      	adds	r3, #4
 8007b02:	2b06      	cmp	r3, #6
 8007b04:	d902      	bls.n	8007b0c <NVIC_EncodePriority+0x30>
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	3b03      	subs	r3, #3
 8007b0a:	e000      	b.n	8007b0e <NVIC_EncodePriority+0x32>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b10:	f04f 32ff 	mov.w	r2, #4294967295
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	43da      	mvns	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	401a      	ands	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b24:	f04f 31ff 	mov.w	r1, #4294967295
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2e:	43d9      	mvns	r1, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b34:	4313      	orrs	r3, r2
         );
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3724      	adds	r7, #36	; 0x24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b54:	d301      	bcc.n	8007b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b56:	2301      	movs	r3, #1
 8007b58:	e00f      	b.n	8007b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b5a:	4a0a      	ldr	r2, [pc, #40]	; (8007b84 <SysTick_Config+0x40>)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b62:	210f      	movs	r1, #15
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	f7ff ff8e 	bl	8007a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <SysTick_Config+0x40>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b72:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <SysTick_Config+0x40>)
 8007b74:	2207      	movs	r2, #7
 8007b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	e000e010 	.word	0xe000e010

08007b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff ff05 	bl	80079a0 <__NVIC_SetPriorityGrouping>
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b086      	sub	sp, #24
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007bac:	2300      	movs	r3, #0
 8007bae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007bb0:	f7ff ff1a 	bl	80079e8 <__NVIC_GetPriorityGrouping>
 8007bb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	6978      	ldr	r0, [r7, #20]
 8007bbc:	f7ff ff8e 	bl	8007adc <NVIC_EncodePriority>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff ff5d 	bl	8007a88 <__NVIC_SetPriority>
}
 8007bce:	bf00      	nop
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	4603      	mov	r3, r0
 8007bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff ff0d 	bl	8007a04 <__NVIC_EnableIRQ>
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff ff1d 	bl	8007a40 <__NVIC_DisableIRQ>
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff ff94 	bl	8007b44 <SysTick_Config>
 8007c1c:	4603      	mov	r3, r0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e0ac      	b.n	8007d94 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f8b2 	bl	8007da8 <DFSDM_GetChannelFromInstance>
 8007c44:	4603      	mov	r3, r0
 8007c46:	4a55      	ldr	r2, [pc, #340]	; (8007d9c <HAL_DFSDM_ChannelInit+0x174>)
 8007c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e09f      	b.n	8007d94 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7f9 fdfb 	bl	8001850 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8007c5a:	4b51      	ldr	r3, [pc, #324]	; (8007da0 <HAL_DFSDM_ChannelInit+0x178>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	4a4f      	ldr	r2, [pc, #316]	; (8007da0 <HAL_DFSDM_ChannelInit+0x178>)
 8007c62:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8007c64:	4b4e      	ldr	r3, [pc, #312]	; (8007da0 <HAL_DFSDM_ChannelInit+0x178>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d125      	bne.n	8007cb8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8007c6c:	4b4d      	ldr	r3, [pc, #308]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a4c      	ldr	r2, [pc, #304]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007c72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c76:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007c78:	4b4a      	ldr	r3, [pc, #296]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	4948      	ldr	r1, [pc, #288]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007c86:	4b47      	ldr	r3, [pc, #284]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a46      	ldr	r2, [pc, #280]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007c8c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8007c90:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	791b      	ldrb	r3, [r3, #4]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d108      	bne.n	8007cac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8007c9a:	4b42      	ldr	r3, [pc, #264]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	041b      	lsls	r3, r3, #16
 8007ca6:	493f      	ldr	r1, [pc, #252]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8007cac:	4b3d      	ldr	r3, [pc, #244]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a3c      	ldr	r2, [pc, #240]	; (8007da4 <HAL_DFSDM_ChannelInit+0x17c>)
 8007cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cb6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8007cc6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6819      	ldr	r1, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007cd6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007cdc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 020f 	bic.w	r2, r2, #15
 8007cf4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6819      	ldr	r1, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8007d1c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6899      	ldr	r1, [r3, #8]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f002 0207 	and.w	r2, r2, #7
 8007d48:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6859      	ldr	r1, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d74:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f810 	bl	8007da8 <DFSDM_GetChannelFromInstance>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	4904      	ldr	r1, [pc, #16]	; (8007d9c <HAL_DFSDM_ChannelInit+0x174>)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	2000032c 	.word	0x2000032c
 8007da0:	20000328 	.word	0x20000328
 8007da4:	40016000 	.word	0x40016000

08007da8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a1c      	ldr	r2, [pc, #112]	; (8007e24 <DFSDM_GetChannelFromInstance+0x7c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d102      	bne.n	8007dbe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e02b      	b.n	8007e16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <DFSDM_GetChannelFromInstance+0x80>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d102      	bne.n	8007dcc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	e024      	b.n	8007e16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a17      	ldr	r2, [pc, #92]	; (8007e2c <DFSDM_GetChannelFromInstance+0x84>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d102      	bne.n	8007dda <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e01d      	b.n	8007e16 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a14      	ldr	r2, [pc, #80]	; (8007e30 <DFSDM_GetChannelFromInstance+0x88>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d102      	bne.n	8007de8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8007de2:	2304      	movs	r3, #4
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	e016      	b.n	8007e16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a12      	ldr	r2, [pc, #72]	; (8007e34 <DFSDM_GetChannelFromInstance+0x8c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d102      	bne.n	8007df6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8007df0:	2305      	movs	r3, #5
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	e00f      	b.n	8007e16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a0f      	ldr	r2, [pc, #60]	; (8007e38 <DFSDM_GetChannelFromInstance+0x90>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d102      	bne.n	8007e04 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8007dfe:	2306      	movs	r3, #6
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	e008      	b.n	8007e16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a0d      	ldr	r2, [pc, #52]	; (8007e3c <DFSDM_GetChannelFromInstance+0x94>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d102      	bne.n	8007e12 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8007e0c:	2307      	movs	r3, #7
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e001      	b.n	8007e16 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8007e12:	2303      	movs	r3, #3
 8007e14:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8007e16:	68fb      	ldr	r3, [r7, #12]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	40016000 	.word	0x40016000
 8007e28:	40016020 	.word	0x40016020
 8007e2c:	40016040 	.word	0x40016040
 8007e30:	40016080 	.word	0x40016080
 8007e34:	400160a0 	.word	0x400160a0
 8007e38:	400160c0 	.word	0x400160c0
 8007e3c:	400160e0 	.word	0x400160e0

08007e40 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d103      	bne.n	8007e60 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	605a      	str	r2, [r3, #4]
      break;
 8007e5e:	e002      	b.n	8007e66 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	75fb      	strb	r3, [r7, #23]
      break;
 8007e64:	bf00      	nop
  }

  return status;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e003      	b.n	8007e90 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
  }
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	0c1b      	lsrs	r3, r3, #16
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	2201      	movs	r2, #1
 8007eba:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebe:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <HAL_EXTI_IRQHandler+0x5c>)
 8007ec6:	4413      	add	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	4798      	blx	r3
    }
  }
}
 8007eee:	bf00      	nop
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	40010414 	.word	0x40010414

08007efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f06:	2300      	movs	r3, #0
 8007f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f0a:	e17f      	b.n	800820c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	2101      	movs	r1, #1
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	fa01 f303 	lsl.w	r3, r1, r3
 8007f18:	4013      	ands	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8171 	beq.w	8008206 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d00b      	beq.n	8007f44 <HAL_GPIO_Init+0x48>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d007      	beq.n	8007f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f38:	2b11      	cmp	r3, #17
 8007f3a:	d003      	beq.n	8007f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2b12      	cmp	r3, #18
 8007f42:	d130      	bne.n	8007fa6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	2203      	movs	r2, #3
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	43db      	mvns	r3, r3
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	43db      	mvns	r3, r3
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4013      	ands	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	091b      	lsrs	r3, r3, #4
 8007f90:	f003 0201 	and.w	r2, r3, #1
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d118      	bne.n	8007fe4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007fb8:	2201      	movs	r2, #1
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	08db      	lsrs	r3, r3, #3
 8007fce:	f003 0201 	and.w	r2, r3, #1
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	2203      	movs	r2, #3
 8007ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d003      	beq.n	8008024 <HAL_GPIO_Init+0x128>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	2b12      	cmp	r3, #18
 8008022:	d123      	bne.n	800806c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	08da      	lsrs	r2, r3, #3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3208      	adds	r2, #8
 800802c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008030:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f003 0307 	and.w	r3, r3, #7
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	220f      	movs	r2, #15
 800803c:	fa02 f303 	lsl.w	r3, r2, r3
 8008040:	43db      	mvns	r3, r3
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4013      	ands	r3, r2
 8008046:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	fa02 f303 	lsl.w	r3, r2, r3
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	08da      	lsrs	r2, r3, #3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3208      	adds	r2, #8
 8008066:	6939      	ldr	r1, [r7, #16]
 8008068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	2203      	movs	r2, #3
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	43db      	mvns	r3, r3
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	4013      	ands	r3, r2
 8008082:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f003 0203 	and.w	r2, r3, #3
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4313      	orrs	r3, r2
 8008098:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 80ac 	beq.w	8008206 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080ae:	4b5f      	ldr	r3, [pc, #380]	; (800822c <HAL_GPIO_Init+0x330>)
 80080b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b2:	4a5e      	ldr	r2, [pc, #376]	; (800822c <HAL_GPIO_Init+0x330>)
 80080b4:	f043 0301 	orr.w	r3, r3, #1
 80080b8:	6613      	str	r3, [r2, #96]	; 0x60
 80080ba:	4b5c      	ldr	r3, [pc, #368]	; (800822c <HAL_GPIO_Init+0x330>)
 80080bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	60bb      	str	r3, [r7, #8]
 80080c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80080c6:	4a5a      	ldr	r2, [pc, #360]	; (8008230 <HAL_GPIO_Init+0x334>)
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	089b      	lsrs	r3, r3, #2
 80080cc:	3302      	adds	r3, #2
 80080ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	220f      	movs	r2, #15
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	43db      	mvns	r3, r3
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4013      	ands	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080f0:	d025      	beq.n	800813e <HAL_GPIO_Init+0x242>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a4f      	ldr	r2, [pc, #316]	; (8008234 <HAL_GPIO_Init+0x338>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d01f      	beq.n	800813a <HAL_GPIO_Init+0x23e>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a4e      	ldr	r2, [pc, #312]	; (8008238 <HAL_GPIO_Init+0x33c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d019      	beq.n	8008136 <HAL_GPIO_Init+0x23a>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a4d      	ldr	r2, [pc, #308]	; (800823c <HAL_GPIO_Init+0x340>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d013      	beq.n	8008132 <HAL_GPIO_Init+0x236>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a4c      	ldr	r2, [pc, #304]	; (8008240 <HAL_GPIO_Init+0x344>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d00d      	beq.n	800812e <HAL_GPIO_Init+0x232>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a4b      	ldr	r2, [pc, #300]	; (8008244 <HAL_GPIO_Init+0x348>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d007      	beq.n	800812a <HAL_GPIO_Init+0x22e>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a4a      	ldr	r2, [pc, #296]	; (8008248 <HAL_GPIO_Init+0x34c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d101      	bne.n	8008126 <HAL_GPIO_Init+0x22a>
 8008122:	2306      	movs	r3, #6
 8008124:	e00c      	b.n	8008140 <HAL_GPIO_Init+0x244>
 8008126:	2307      	movs	r3, #7
 8008128:	e00a      	b.n	8008140 <HAL_GPIO_Init+0x244>
 800812a:	2305      	movs	r3, #5
 800812c:	e008      	b.n	8008140 <HAL_GPIO_Init+0x244>
 800812e:	2304      	movs	r3, #4
 8008130:	e006      	b.n	8008140 <HAL_GPIO_Init+0x244>
 8008132:	2303      	movs	r3, #3
 8008134:	e004      	b.n	8008140 <HAL_GPIO_Init+0x244>
 8008136:	2302      	movs	r3, #2
 8008138:	e002      	b.n	8008140 <HAL_GPIO_Init+0x244>
 800813a:	2301      	movs	r3, #1
 800813c:	e000      	b.n	8008140 <HAL_GPIO_Init+0x244>
 800813e:	2300      	movs	r3, #0
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	f002 0203 	and.w	r2, r2, #3
 8008146:	0092      	lsls	r2, r2, #2
 8008148:	4093      	lsls	r3, r2
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008150:	4937      	ldr	r1, [pc, #220]	; (8008230 <HAL_GPIO_Init+0x334>)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	089b      	lsrs	r3, r3, #2
 8008156:	3302      	adds	r3, #2
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800815e:	4b3b      	ldr	r3, [pc, #236]	; (800824c <HAL_GPIO_Init+0x350>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	43db      	mvns	r3, r3
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4013      	ands	r3, r2
 800816c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008182:	4a32      	ldr	r2, [pc, #200]	; (800824c <HAL_GPIO_Init+0x350>)
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008188:	4b30      	ldr	r3, [pc, #192]	; (800824c <HAL_GPIO_Init+0x350>)
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	43db      	mvns	r3, r3
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	4013      	ands	r3, r2
 8008196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081ac:	4a27      	ldr	r2, [pc, #156]	; (800824c <HAL_GPIO_Init+0x350>)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80081b2:	4b26      	ldr	r3, [pc, #152]	; (800824c <HAL_GPIO_Init+0x350>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	43db      	mvns	r3, r3
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4013      	ands	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80081d6:	4a1d      	ldr	r2, [pc, #116]	; (800824c <HAL_GPIO_Init+0x350>)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80081dc:	4b1b      	ldr	r3, [pc, #108]	; (800824c <HAL_GPIO_Init+0x350>)
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	43db      	mvns	r3, r3
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4013      	ands	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008200:	4a12      	ldr	r2, [pc, #72]	; (800824c <HAL_GPIO_Init+0x350>)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	3301      	adds	r3, #1
 800820a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	fa22 f303 	lsr.w	r3, r2, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	f47f ae78 	bne.w	8007f0c <HAL_GPIO_Init+0x10>
  }
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	40021000 	.word	0x40021000
 8008230:	40010000 	.word	0x40010000
 8008234:	48000400 	.word	0x48000400
 8008238:	48000800 	.word	0x48000800
 800823c:	48000c00 	.word	0x48000c00
 8008240:	48001000 	.word	0x48001000
 8008244:	48001400 	.word	0x48001400
 8008248:	48001800 	.word	0x48001800
 800824c:	40010400 	.word	0x40010400

08008250 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800825e:	e0cd      	b.n	80083fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008260:	2201      	movs	r2, #1
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	fa02 f303 	lsl.w	r3, r2, r3
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	4013      	ands	r3, r2
 800826c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 80c0 	beq.w	80083f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008276:	4a68      	ldr	r2, [pc, #416]	; (8008418 <HAL_GPIO_DeInit+0x1c8>)
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	089b      	lsrs	r3, r3, #2
 800827c:	3302      	adds	r3, #2
 800827e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008282:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	220f      	movs	r2, #15
 800828e:	fa02 f303 	lsl.w	r3, r2, r3
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4013      	ands	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800829e:	d025      	beq.n	80082ec <HAL_GPIO_DeInit+0x9c>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a5e      	ldr	r2, [pc, #376]	; (800841c <HAL_GPIO_DeInit+0x1cc>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d01f      	beq.n	80082e8 <HAL_GPIO_DeInit+0x98>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a5d      	ldr	r2, [pc, #372]	; (8008420 <HAL_GPIO_DeInit+0x1d0>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d019      	beq.n	80082e4 <HAL_GPIO_DeInit+0x94>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a5c      	ldr	r2, [pc, #368]	; (8008424 <HAL_GPIO_DeInit+0x1d4>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d013      	beq.n	80082e0 <HAL_GPIO_DeInit+0x90>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a5b      	ldr	r2, [pc, #364]	; (8008428 <HAL_GPIO_DeInit+0x1d8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00d      	beq.n	80082dc <HAL_GPIO_DeInit+0x8c>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a5a      	ldr	r2, [pc, #360]	; (800842c <HAL_GPIO_DeInit+0x1dc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d007      	beq.n	80082d8 <HAL_GPIO_DeInit+0x88>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a59      	ldr	r2, [pc, #356]	; (8008430 <HAL_GPIO_DeInit+0x1e0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d101      	bne.n	80082d4 <HAL_GPIO_DeInit+0x84>
 80082d0:	2306      	movs	r3, #6
 80082d2:	e00c      	b.n	80082ee <HAL_GPIO_DeInit+0x9e>
 80082d4:	2307      	movs	r3, #7
 80082d6:	e00a      	b.n	80082ee <HAL_GPIO_DeInit+0x9e>
 80082d8:	2305      	movs	r3, #5
 80082da:	e008      	b.n	80082ee <HAL_GPIO_DeInit+0x9e>
 80082dc:	2304      	movs	r3, #4
 80082de:	e006      	b.n	80082ee <HAL_GPIO_DeInit+0x9e>
 80082e0:	2303      	movs	r3, #3
 80082e2:	e004      	b.n	80082ee <HAL_GPIO_DeInit+0x9e>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e002      	b.n	80082ee <HAL_GPIO_DeInit+0x9e>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e000      	b.n	80082ee <HAL_GPIO_DeInit+0x9e>
 80082ec:	2300      	movs	r3, #0
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	f002 0203 	and.w	r2, r2, #3
 80082f4:	0092      	lsls	r2, r2, #2
 80082f6:	4093      	lsls	r3, r2
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d132      	bne.n	8008364 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80082fe:	4b4d      	ldr	r3, [pc, #308]	; (8008434 <HAL_GPIO_DeInit+0x1e4>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	43db      	mvns	r3, r3
 8008306:	494b      	ldr	r1, [pc, #300]	; (8008434 <HAL_GPIO_DeInit+0x1e4>)
 8008308:	4013      	ands	r3, r2
 800830a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800830c:	4b49      	ldr	r3, [pc, #292]	; (8008434 <HAL_GPIO_DeInit+0x1e4>)
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	43db      	mvns	r3, r3
 8008314:	4947      	ldr	r1, [pc, #284]	; (8008434 <HAL_GPIO_DeInit+0x1e4>)
 8008316:	4013      	ands	r3, r2
 8008318:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800831a:	4b46      	ldr	r3, [pc, #280]	; (8008434 <HAL_GPIO_DeInit+0x1e4>)
 800831c:	689a      	ldr	r2, [r3, #8]
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	43db      	mvns	r3, r3
 8008322:	4944      	ldr	r1, [pc, #272]	; (8008434 <HAL_GPIO_DeInit+0x1e4>)
 8008324:	4013      	ands	r3, r2
 8008326:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8008328:	4b42      	ldr	r3, [pc, #264]	; (8008434 <HAL_GPIO_DeInit+0x1e4>)
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	43db      	mvns	r3, r3
 8008330:	4940      	ldr	r1, [pc, #256]	; (8008434 <HAL_GPIO_DeInit+0x1e4>)
 8008332:	4013      	ands	r3, r2
 8008334:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	220f      	movs	r2, #15
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008346:	4a34      	ldr	r2, [pc, #208]	; (8008418 <HAL_GPIO_DeInit+0x1c8>)
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	089b      	lsrs	r3, r3, #2
 800834c:	3302      	adds	r3, #2
 800834e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	43da      	mvns	r2, r3
 8008356:	4830      	ldr	r0, [pc, #192]	; (8008418 <HAL_GPIO_DeInit+0x1c8>)
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	089b      	lsrs	r3, r3, #2
 800835c:	400a      	ands	r2, r1
 800835e:	3302      	adds	r3, #2
 8008360:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	2103      	movs	r1, #3
 800836e:	fa01 f303 	lsl.w	r3, r1, r3
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	08da      	lsrs	r2, r3, #3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3208      	adds	r2, #8
 8008380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	220f      	movs	r2, #15
 800838e:	fa02 f303 	lsl.w	r3, r2, r3
 8008392:	43db      	mvns	r3, r3
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	08d2      	lsrs	r2, r2, #3
 8008398:	4019      	ands	r1, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3208      	adds	r2, #8
 800839e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	2103      	movs	r1, #3
 80083ac:	fa01 f303 	lsl.w	r3, r1, r3
 80083b0:	43db      	mvns	r3, r3
 80083b2:	401a      	ands	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	2101      	movs	r1, #1
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	fa01 f303 	lsl.w	r3, r1, r3
 80083c4:	43db      	mvns	r3, r3
 80083c6:	401a      	ands	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68da      	ldr	r2, [r3, #12]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	2103      	movs	r1, #3
 80083d6:	fa01 f303 	lsl.w	r3, r1, r3
 80083da:	43db      	mvns	r3, r3
 80083dc:	401a      	ands	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	2101      	movs	r1, #1
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	fa01 f303 	lsl.w	r3, r1, r3
 80083ee:	43db      	mvns	r3, r3
 80083f0:	401a      	ands	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	3301      	adds	r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	f47f af2b 	bne.w	8008260 <HAL_GPIO_DeInit+0x10>
  }
}
 800840a:	bf00      	nop
 800840c:	bf00      	nop
 800840e:	371c      	adds	r7, #28
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	40010000 	.word	0x40010000
 800841c:	48000400 	.word	0x48000400
 8008420:	48000800 	.word	0x48000800
 8008424:	48000c00 	.word	0x48000c00
 8008428:	48001000 	.word	0x48001000
 800842c:	48001400 	.word	0x48001400
 8008430:	48001800 	.word	0x48001800
 8008434:	40010400 	.word	0x40010400

08008438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	807b      	strh	r3, [r7, #2]
 8008444:	4613      	mov	r3, r2
 8008446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008448:	787b      	ldrb	r3, [r7, #1]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800844e:	887a      	ldrh	r2, [r7, #2]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008454:	e002      	b.n	800845c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008456:	887a      	ldrh	r2, [r7, #2]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008472:	4b08      	ldr	r3, [pc, #32]	; (8008494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008474:	695a      	ldr	r2, [r3, #20]
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	4013      	ands	r3, r2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d006      	beq.n	800848c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800847e:	4a05      	ldr	r2, [pc, #20]	; (8008494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008480:	88fb      	ldrh	r3, [r7, #6]
 8008482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008484:	88fb      	ldrh	r3, [r7, #6]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 f806 	bl	8008498 <HAL_GPIO_EXTI_Callback>
  }
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	40010400 	.word	0x40010400

08008498 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80084a2:	bf00      	nop
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e081      	b.n	80085c4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d106      	bne.n	80084da <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f8a8 	bl	800862a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2224      	movs	r2, #36	; 0x24
 80084de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 0201 	bic.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800850e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d107      	bne.n	8008528 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689a      	ldr	r2, [r3, #8]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008524:	609a      	str	r2, [r3, #8]
 8008526:	e006      	b.n	8008536 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008534:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d104      	bne.n	8008548 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008546:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6812      	ldr	r2, [r2, #0]
 8008552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800855a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800856a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	ea42 0103 	orr.w	r1, r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	021a      	lsls	r2, r3, #8
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69d9      	ldr	r1, [r3, #28]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1a      	ldr	r2, [r3, #32]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f042 0201 	orr.w	r2, r2, #1
 80085a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e021      	b.n	8008622 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2224      	movs	r2, #36	; 0x24
 80085e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0201 	bic.w	r2, r2, #1
 80085f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f821 	bl	800863e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
	...

08008654 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af02      	add	r7, sp, #8
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	4608      	mov	r0, r1
 800865e:	4611      	mov	r1, r2
 8008660:	461a      	mov	r2, r3
 8008662:	4603      	mov	r3, r0
 8008664:	817b      	strh	r3, [r7, #10]
 8008666:	460b      	mov	r3, r1
 8008668:	813b      	strh	r3, [r7, #8]
 800866a:	4613      	mov	r3, r2
 800866c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b20      	cmp	r3, #32
 8008678:	f040 80f9 	bne.w	800886e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <HAL_I2C_Mem_Write+0x34>
 8008682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008684:	2b00      	cmp	r3, #0
 8008686:	d105      	bne.n	8008694 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800868e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0ed      	b.n	8008870 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <HAL_I2C_Mem_Write+0x4e>
 800869e:	2302      	movs	r3, #2
 80086a0:	e0e6      	b.n	8008870 <HAL_I2C_Mem_Write+0x21c>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80086aa:	f7ff f949 	bl	8007940 <HAL_GetTick>
 80086ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	2319      	movs	r3, #25
 80086b6:	2201      	movs	r2, #1
 80086b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 faf7 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e0d1      	b.n	8008870 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2221      	movs	r2, #33	; 0x21
 80086d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2240      	movs	r2, #64	; 0x40
 80086d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a3a      	ldr	r2, [r7, #32]
 80086e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086f4:	88f8      	ldrh	r0, [r7, #6]
 80086f6:	893a      	ldrh	r2, [r7, #8]
 80086f8:	8979      	ldrh	r1, [r7, #10]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4603      	mov	r3, r0
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 fa07 	bl	8008b18 <I2C_RequestMemoryWrite>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e0a9      	b.n	8008870 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008720:	b29b      	uxth	r3, r3
 8008722:	2bff      	cmp	r3, #255	; 0xff
 8008724:	d90e      	bls.n	8008744 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	22ff      	movs	r2, #255	; 0xff
 800872a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008730:	b2da      	uxtb	r2, r3
 8008732:	8979      	ldrh	r1, [r7, #10]
 8008734:	2300      	movs	r3, #0
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fbd9 	bl	8008ef4 <I2C_TransferConfig>
 8008742:	e00f      	b.n	8008764 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008752:	b2da      	uxtb	r2, r3
 8008754:	8979      	ldrh	r1, [r7, #10]
 8008756:	2300      	movs	r3, #0
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 fbc8 	bl	8008ef4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 fae1 	bl	8008d30 <I2C_WaitOnTXISFlagUntilTimeout>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e07b      	b.n	8008870 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	781a      	ldrb	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008792:	b29b      	uxth	r3, r3
 8008794:	3b01      	subs	r3, #1
 8008796:	b29a      	uxth	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a0:	3b01      	subs	r3, #1
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d034      	beq.n	800881c <HAL_I2C_Mem_Write+0x1c8>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d130      	bne.n	800881c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	2200      	movs	r2, #0
 80087c2:	2180      	movs	r1, #128	; 0x80
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 fa73 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e04d      	b.n	8008870 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2bff      	cmp	r3, #255	; 0xff
 80087dc:	d90e      	bls.n	80087fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	22ff      	movs	r2, #255	; 0xff
 80087e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	8979      	ldrh	r1, [r7, #10]
 80087ec:	2300      	movs	r3, #0
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fb7d 	bl	8008ef4 <I2C_TransferConfig>
 80087fa:	e00f      	b.n	800881c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008800:	b29a      	uxth	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800880a:	b2da      	uxtb	r2, r3
 800880c:	8979      	ldrh	r1, [r7, #10]
 800880e:	2300      	movs	r3, #0
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 fb6c 	bl	8008ef4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008820:	b29b      	uxth	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d19e      	bne.n	8008764 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 fac0 	bl	8008db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e01a      	b.n	8008870 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2220      	movs	r2, #32
 8008840:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6859      	ldr	r1, [r3, #4]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <HAL_I2C_Mem_Write+0x224>)
 800884e:	400b      	ands	r3, r1
 8008850:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2220      	movs	r2, #32
 8008856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	e000      	b.n	8008870 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800886e:	2302      	movs	r3, #2
  }
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	fe00e800 	.word	0xfe00e800

0800887c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af02      	add	r7, sp, #8
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	461a      	mov	r2, r3
 800888a:	4603      	mov	r3, r0
 800888c:	817b      	strh	r3, [r7, #10]
 800888e:	460b      	mov	r3, r1
 8008890:	813b      	strh	r3, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b20      	cmp	r3, #32
 80088a0:	f040 80fd 	bne.w	8008a9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <HAL_I2C_Mem_Read+0x34>
 80088aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d105      	bne.n	80088bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e0f1      	b.n	8008aa0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d101      	bne.n	80088ca <HAL_I2C_Mem_Read+0x4e>
 80088c6:	2302      	movs	r3, #2
 80088c8:	e0ea      	b.n	8008aa0 <HAL_I2C_Mem_Read+0x224>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088d2:	f7ff f835 	bl	8007940 <HAL_GetTick>
 80088d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	2319      	movs	r3, #25
 80088de:	2201      	movs	r2, #1
 80088e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f9e3 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e0d5      	b.n	8008aa0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2222      	movs	r2, #34	; 0x22
 80088f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2240      	movs	r2, #64	; 0x40
 8008900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a3a      	ldr	r2, [r7, #32]
 800890e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800891c:	88f8      	ldrh	r0, [r7, #6]
 800891e:	893a      	ldrh	r2, [r7, #8]
 8008920:	8979      	ldrh	r1, [r7, #10]
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	4603      	mov	r3, r0
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 f947 	bl	8008bc0 <I2C_RequestMemoryRead>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0ad      	b.n	8008aa0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008948:	b29b      	uxth	r3, r3
 800894a:	2bff      	cmp	r3, #255	; 0xff
 800894c:	d90e      	bls.n	800896c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	22ff      	movs	r2, #255	; 0xff
 8008952:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008958:	b2da      	uxtb	r2, r3
 800895a:	8979      	ldrh	r1, [r7, #10]
 800895c:	4b52      	ldr	r3, [pc, #328]	; (8008aa8 <HAL_I2C_Mem_Read+0x22c>)
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 fac5 	bl	8008ef4 <I2C_TransferConfig>
 800896a:	e00f      	b.n	800898c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008970:	b29a      	uxth	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800897a:	b2da      	uxtb	r2, r3
 800897c:	8979      	ldrh	r1, [r7, #10]
 800897e:	4b4a      	ldr	r3, [pc, #296]	; (8008aa8 <HAL_I2C_Mem_Read+0x22c>)
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 fab4 	bl	8008ef4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	2200      	movs	r2, #0
 8008994:	2104      	movs	r1, #4
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f98a 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e07c      	b.n	8008aa0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	b2d2      	uxtb	r2, r2
 80089b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d034      	beq.n	8008a4c <HAL_I2C_Mem_Read+0x1d0>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d130      	bne.n	8008a4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	2200      	movs	r2, #0
 80089f2:	2180      	movs	r1, #128	; 0x80
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 f95b 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e04d      	b.n	8008aa0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2bff      	cmp	r3, #255	; 0xff
 8008a0c:	d90e      	bls.n	8008a2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	22ff      	movs	r2, #255	; 0xff
 8008a12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	8979      	ldrh	r1, [r7, #10]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 fa65 	bl	8008ef4 <I2C_TransferConfig>
 8008a2a:	e00f      	b.n	8008a4c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	8979      	ldrh	r1, [r7, #10]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fa54 	bl	8008ef4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d19a      	bne.n	800898c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f9a8 	bl	8008db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e01a      	b.n	8008aa0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6859      	ldr	r1, [r3, #4]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <HAL_I2C_Mem_Read+0x230>)
 8008a7e:	400b      	ands	r3, r1
 8008a80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e000      	b.n	8008aa0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008a9e:	2302      	movs	r3, #2
  }
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	80002400 	.word	0x80002400
 8008aac:	fe00e800 	.word	0xfe00e800

08008ab0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	68f9      	ldr	r1, [r7, #12]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	4798      	blx	r3
  }
}
 8008adc:	bf00      	nop
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008af2:	b2db      	uxtb	r3, r3
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	461a      	mov	r2, r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	817b      	strh	r3, [r7, #10]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	813b      	strh	r3, [r7, #8]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	8979      	ldrh	r1, [r7, #10]
 8008b38:	4b20      	ldr	r3, [pc, #128]	; (8008bbc <I2C_RequestMemoryWrite+0xa4>)
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f9d7 	bl	8008ef4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b46:	69fa      	ldr	r2, [r7, #28]
 8008b48:	69b9      	ldr	r1, [r7, #24]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 f8f0 	bl	8008d30 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e02c      	b.n	8008bb4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b5a:	88fb      	ldrh	r3, [r7, #6]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d105      	bne.n	8008b6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b60:	893b      	ldrh	r3, [r7, #8]
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	629a      	str	r2, [r3, #40]	; 0x28
 8008b6a:	e015      	b.n	8008b98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b6c:	893b      	ldrh	r3, [r7, #8]
 8008b6e:	0a1b      	lsrs	r3, r3, #8
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b7a:	69fa      	ldr	r2, [r7, #28]
 8008b7c:	69b9      	ldr	r1, [r7, #24]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f8d6 	bl	8008d30 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e012      	b.n	8008bb4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b8e:	893b      	ldrh	r3, [r7, #8]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	2180      	movs	r1, #128	; 0x80
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 f884 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	80002000 	.word	0x80002000

08008bc0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	4603      	mov	r3, r0
 8008bd0:	817b      	strh	r3, [r7, #10]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	813b      	strh	r3, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008bda:	88fb      	ldrh	r3, [r7, #6]
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	8979      	ldrh	r1, [r7, #10]
 8008be0:	4b20      	ldr	r3, [pc, #128]	; (8008c64 <I2C_RequestMemoryRead+0xa4>)
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	2300      	movs	r3, #0
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 f984 	bl	8008ef4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	69b9      	ldr	r1, [r7, #24]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f89d 	bl	8008d30 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e02c      	b.n	8008c5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d105      	bne.n	8008c12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c06:	893b      	ldrh	r3, [r7, #8]
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8008c10:	e015      	b.n	8008c3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c12:	893b      	ldrh	r3, [r7, #8]
 8008c14:	0a1b      	lsrs	r3, r3, #8
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c20:	69fa      	ldr	r2, [r7, #28]
 8008c22:	69b9      	ldr	r1, [r7, #24]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 f883 	bl	8008d30 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e012      	b.n	8008c5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c34:	893b      	ldrh	r3, [r7, #8]
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2200      	movs	r2, #0
 8008c46:	2140      	movs	r1, #64	; 0x40
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 f831 	bl	8008cb0 <I2C_WaitOnFlagUntilTimeout>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e000      	b.n	8008c5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	80002000 	.word	0x80002000

08008c68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d103      	bne.n	8008c86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d007      	beq.n	8008ca4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699a      	ldr	r2, [r3, #24]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f042 0201 	orr.w	r2, r2, #1
 8008ca2:	619a      	str	r2, [r3, #24]
  }
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cc0:	e022      	b.n	8008d08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d01e      	beq.n	8008d08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cca:	f7fe fe39 	bl	8007940 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d302      	bcc.n	8008ce0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d113      	bne.n	8008d08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce4:	f043 0220 	orr.w	r2, r3, #32
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e00f      	b.n	8008d28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	699a      	ldr	r2, [r3, #24]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	4013      	ands	r3, r2
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	bf0c      	ite	eq
 8008d18:	2301      	moveq	r3, #1
 8008d1a:	2300      	movne	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d0cd      	beq.n	8008cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d3c:	e02c      	b.n	8008d98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	68b9      	ldr	r1, [r7, #8]
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 f870 	bl	8008e28 <I2C_IsAcknowledgeFailed>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e02a      	b.n	8008da8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d01e      	beq.n	8008d98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d5a:	f7fe fdf1 	bl	8007940 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d302      	bcc.n	8008d70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d113      	bne.n	8008d98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d74:	f043 0220 	orr.w	r2, r3, #32
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e007      	b.n	8008da8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d1cb      	bne.n	8008d3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dbc:	e028      	b.n	8008e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f830 	bl	8008e28 <I2C_IsAcknowledgeFailed>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e026      	b.n	8008e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd2:	f7fe fdb5 	bl	8007940 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d302      	bcc.n	8008de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d113      	bne.n	8008e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dec:	f043 0220 	orr.w	r2, r3, #32
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2220      	movs	r2, #32
 8008df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e007      	b.n	8008e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b20      	cmp	r3, #32
 8008e1c:	d1cf      	bne.n	8008dbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f003 0310 	and.w	r3, r3, #16
 8008e3e:	2b10      	cmp	r3, #16
 8008e40:	d151      	bne.n	8008ee6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e42:	e022      	b.n	8008e8a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4a:	d01e      	beq.n	8008e8a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e4c:	f7fe fd78 	bl	8007940 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d302      	bcc.n	8008e62 <I2C_IsAcknowledgeFailed+0x3a>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d113      	bne.n	8008e8a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e66:	f043 0220 	orr.w	r2, r3, #32
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e02e      	b.n	8008ee8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f003 0320 	and.w	r3, r3, #32
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	d1d5      	bne.n	8008e44 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2210      	movs	r2, #16
 8008e9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f7ff fedd 	bl	8008c68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6859      	ldr	r1, [r3, #4]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <I2C_IsAcknowledgeFailed+0xc8>)
 8008eba:	400b      	ands	r3, r1
 8008ebc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec2:	f043 0204 	orr.w	r2, r3, #4
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e000      	b.n	8008ee8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	fe00e800 	.word	0xfe00e800

08008ef4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	607b      	str	r3, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	817b      	strh	r3, [r7, #10]
 8008f02:	4613      	mov	r3, r2
 8008f04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	0d5b      	lsrs	r3, r3, #21
 8008f10:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008f14:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <I2C_TransferConfig+0x58>)
 8008f16:	430b      	orrs	r3, r1
 8008f18:	43db      	mvns	r3, r3
 8008f1a:	ea02 0103 	and.w	r1, r2, r3
 8008f1e:	897b      	ldrh	r3, [r7, #10]
 8008f20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008f24:	7a7b      	ldrb	r3, [r7, #9]
 8008f26:	041b      	lsls	r3, r3, #16
 8008f28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	431a      	orrs	r2, r3
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008f3e:	bf00      	nop
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	03ff63ff 	.word	0x03ff63ff

08008f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	d138      	bne.n	8008fd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d101      	bne.n	8008f74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f70:	2302      	movs	r3, #2
 8008f72:	e032      	b.n	8008fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2224      	movs	r2, #36	; 0x24
 8008f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0201 	bic.w	r2, r2, #1
 8008f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6819      	ldr	r1, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0201 	orr.w	r2, r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e000      	b.n	8008fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fd8:	2302      	movs	r3, #2
  }
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b085      	sub	sp, #20
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b20      	cmp	r3, #32
 8008ffa:	d139      	bne.n	8009070 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009002:	2b01      	cmp	r3, #1
 8009004:	d101      	bne.n	800900a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009006:	2302      	movs	r3, #2
 8009008:	e033      	b.n	8009072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2224      	movs	r2, #36	; 0x24
 8009016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0201 	bic.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009038:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	021b      	lsls	r3, r3, #8
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	4313      	orrs	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 0201 	orr.w	r2, r2, #1
 800905a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	e000      	b.n	8009072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009070:	2302      	movs	r3, #2
  }
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
	...

08009080 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009084:	4b05      	ldr	r3, [pc, #20]	; (800909c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a04      	ldr	r2, [pc, #16]	; (800909c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800908a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800908e:	6013      	str	r3, [r2, #0]
}
 8009090:	bf00      	nop
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	40007000 	.word	0x40007000

080090a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80090a4:	4b04      	ldr	r3, [pc, #16]	; (80090b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40007000 	.word	0x40007000

080090bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ca:	d130      	bne.n	800912e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80090cc:	4b23      	ldr	r3, [pc, #140]	; (800915c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d8:	d038      	beq.n	800914c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80090da:	4b20      	ldr	r3, [pc, #128]	; (800915c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80090e2:	4a1e      	ldr	r2, [pc, #120]	; (800915c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80090e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80090e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80090ea:	4b1d      	ldr	r3, [pc, #116]	; (8009160 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2232      	movs	r2, #50	; 0x32
 80090f0:	fb02 f303 	mul.w	r3, r2, r3
 80090f4:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80090f6:	fba2 2303 	umull	r2, r3, r2, r3
 80090fa:	0c9b      	lsrs	r3, r3, #18
 80090fc:	3301      	adds	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009100:	e002      	b.n	8009108 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3b01      	subs	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009108:	4b14      	ldr	r3, [pc, #80]	; (800915c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009114:	d102      	bne.n	800911c <HAL_PWREx_ControlVoltageScaling+0x60>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1f2      	bne.n	8009102 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800911c:	4b0f      	ldr	r3, [pc, #60]	; (800915c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009128:	d110      	bne.n	800914c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e00f      	b.n	800914e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800912e:	4b0b      	ldr	r3, [pc, #44]	; (800915c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800913a:	d007      	beq.n	800914c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800913c:	4b07      	ldr	r3, [pc, #28]	; (800915c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009144:	4a05      	ldr	r2, [pc, #20]	; (800915c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800914a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40007000 	.word	0x40007000
 8009160:	20000004 	.word	0x20000004
 8009164:	431bde83 	.word	0x431bde83

08009168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e3d4      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800917a:	4ba1      	ldr	r3, [pc, #644]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f003 030c 	and.w	r3, r3, #12
 8009182:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009184:	4b9e      	ldr	r3, [pc, #632]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0303 	and.w	r3, r3, #3
 800918c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0310 	and.w	r3, r3, #16
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80e4 	beq.w	8009364 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d007      	beq.n	80091b2 <HAL_RCC_OscConfig+0x4a>
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b0c      	cmp	r3, #12
 80091a6:	f040 808b 	bne.w	80092c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	f040 8087 	bne.w	80092c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80091b2:	4b93      	ldr	r3, [pc, #588]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <HAL_RCC_OscConfig+0x62>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e3ac      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1a      	ldr	r2, [r3, #32]
 80091ce:	4b8c      	ldr	r3, [pc, #560]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0308 	and.w	r3, r3, #8
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d004      	beq.n	80091e4 <HAL_RCC_OscConfig+0x7c>
 80091da:	4b89      	ldr	r3, [pc, #548]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091e2:	e005      	b.n	80091f0 <HAL_RCC_OscConfig+0x88>
 80091e4:	4b86      	ldr	r3, [pc, #536]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80091e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091ea:	091b      	lsrs	r3, r3, #4
 80091ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d223      	bcs.n	800923c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fd41 	bl	8009c80 <RCC_SetFlashLatencyFromMSIRange>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e38d      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009208:	4b7d      	ldr	r3, [pc, #500]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a7c      	ldr	r2, [pc, #496]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 800920e:	f043 0308 	orr.w	r3, r3, #8
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	4b7a      	ldr	r3, [pc, #488]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	4977      	ldr	r1, [pc, #476]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009222:	4313      	orrs	r3, r2
 8009224:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009226:	4b76      	ldr	r3, [pc, #472]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	4972      	ldr	r1, [pc, #456]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009236:	4313      	orrs	r3, r2
 8009238:	604b      	str	r3, [r1, #4]
 800923a:	e025      	b.n	8009288 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800923c:	4b70      	ldr	r3, [pc, #448]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a6f      	ldr	r2, [pc, #444]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009242:	f043 0308 	orr.w	r3, r3, #8
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	4b6d      	ldr	r3, [pc, #436]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	496a      	ldr	r1, [pc, #424]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009256:	4313      	orrs	r3, r2
 8009258:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800925a:	4b69      	ldr	r3, [pc, #420]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	021b      	lsls	r3, r3, #8
 8009268:	4965      	ldr	r1, [pc, #404]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 800926a:	4313      	orrs	r3, r2
 800926c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d109      	bne.n	8009288 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fd01 	bl	8009c80 <RCC_SetFlashLatencyFromMSIRange>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e34d      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009288:	f000 fc36 	bl	8009af8 <HAL_RCC_GetSysClockFreq>
 800928c:	4602      	mov	r2, r0
 800928e:	4b5c      	ldr	r3, [pc, #368]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	091b      	lsrs	r3, r3, #4
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	495a      	ldr	r1, [pc, #360]	; (8009404 <HAL_RCC_OscConfig+0x29c>)
 800929a:	5ccb      	ldrb	r3, [r1, r3]
 800929c:	f003 031f 	and.w	r3, r3, #31
 80092a0:	fa22 f303 	lsr.w	r3, r2, r3
 80092a4:	4a58      	ldr	r2, [pc, #352]	; (8009408 <HAL_RCC_OscConfig+0x2a0>)
 80092a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80092a8:	4b58      	ldr	r3, [pc, #352]	; (800940c <HAL_RCC_OscConfig+0x2a4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe faf7 	bl	80078a0 <HAL_InitTick>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d052      	beq.n	8009362 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	e331      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d032      	beq.n	800932e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80092c8:	4b4d      	ldr	r3, [pc, #308]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a4c      	ldr	r2, [pc, #304]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80092d4:	f7fe fb34 	bl	8007940 <HAL_GetTick>
 80092d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80092dc:	f7fe fb30 	bl	8007940 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e31a      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80092ee:	4b44      	ldr	r3, [pc, #272]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80092fa:	4b41      	ldr	r3, [pc, #260]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a40      	ldr	r2, [pc, #256]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009300:	f043 0308 	orr.w	r3, r3, #8
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	4b3e      	ldr	r3, [pc, #248]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	493b      	ldr	r1, [pc, #236]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009314:	4313      	orrs	r3, r2
 8009316:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009318:	4b39      	ldr	r3, [pc, #228]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	021b      	lsls	r3, r3, #8
 8009326:	4936      	ldr	r1, [pc, #216]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009328:	4313      	orrs	r3, r2
 800932a:	604b      	str	r3, [r1, #4]
 800932c:	e01a      	b.n	8009364 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800932e:	4b34      	ldr	r3, [pc, #208]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a33      	ldr	r2, [pc, #204]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009334:	f023 0301 	bic.w	r3, r3, #1
 8009338:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800933a:	f7fe fb01 	bl	8007940 <HAL_GetTick>
 800933e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009340:	e008      	b.n	8009354 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009342:	f7fe fafd 	bl	8007940 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e2e7      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009354:	4b2a      	ldr	r3, [pc, #168]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1f0      	bne.n	8009342 <HAL_RCC_OscConfig+0x1da>
 8009360:	e000      	b.n	8009364 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009362:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d074      	beq.n	800945a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	2b08      	cmp	r3, #8
 8009374:	d005      	beq.n	8009382 <HAL_RCC_OscConfig+0x21a>
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	2b0c      	cmp	r3, #12
 800937a:	d10e      	bne.n	800939a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2b03      	cmp	r3, #3
 8009380:	d10b      	bne.n	800939a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009382:	4b1f      	ldr	r3, [pc, #124]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d064      	beq.n	8009458 <HAL_RCC_OscConfig+0x2f0>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d160      	bne.n	8009458 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e2c4      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a2:	d106      	bne.n	80093b2 <HAL_RCC_OscConfig+0x24a>
 80093a4:	4b16      	ldr	r3, [pc, #88]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a15      	ldr	r2, [pc, #84]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	e01d      	b.n	80093ee <HAL_RCC_OscConfig+0x286>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093ba:	d10c      	bne.n	80093d6 <HAL_RCC_OscConfig+0x26e>
 80093bc:	4b10      	ldr	r3, [pc, #64]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a0f      	ldr	r2, [pc, #60]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a0c      	ldr	r2, [pc, #48]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	e00b      	b.n	80093ee <HAL_RCC_OscConfig+0x286>
 80093d6:	4b0a      	ldr	r3, [pc, #40]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a09      	ldr	r2, [pc, #36]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	4b07      	ldr	r3, [pc, #28]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a06      	ldr	r2, [pc, #24]	; (8009400 <HAL_RCC_OscConfig+0x298>)
 80093e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01c      	beq.n	8009430 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f6:	f7fe faa3 	bl	8007940 <HAL_GetTick>
 80093fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093fc:	e011      	b.n	8009422 <HAL_RCC_OscConfig+0x2ba>
 80093fe:	bf00      	nop
 8009400:	40021000 	.word	0x40021000
 8009404:	08010428 	.word	0x08010428
 8009408:	20000004 	.word	0x20000004
 800940c:	2000006c 	.word	0x2000006c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009410:	f7fe fa96 	bl	8007940 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b64      	cmp	r3, #100	; 0x64
 800941c:	d901      	bls.n	8009422 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e280      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009422:	4baf      	ldr	r3, [pc, #700]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0f0      	beq.n	8009410 <HAL_RCC_OscConfig+0x2a8>
 800942e:	e014      	b.n	800945a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009430:	f7fe fa86 	bl	8007940 <HAL_GetTick>
 8009434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009436:	e008      	b.n	800944a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009438:	f7fe fa82 	bl	8007940 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b64      	cmp	r3, #100	; 0x64
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e26c      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800944a:	4ba5      	ldr	r3, [pc, #660]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1f0      	bne.n	8009438 <HAL_RCC_OscConfig+0x2d0>
 8009456:	e000      	b.n	800945a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d060      	beq.n	8009528 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b04      	cmp	r3, #4
 800946a:	d005      	beq.n	8009478 <HAL_RCC_OscConfig+0x310>
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	2b0c      	cmp	r3, #12
 8009470:	d119      	bne.n	80094a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2b02      	cmp	r3, #2
 8009476:	d116      	bne.n	80094a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009478:	4b99      	ldr	r3, [pc, #612]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009480:	2b00      	cmp	r3, #0
 8009482:	d005      	beq.n	8009490 <HAL_RCC_OscConfig+0x328>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e249      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009490:	4b93      	ldr	r3, [pc, #588]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	061b      	lsls	r3, r3, #24
 800949e:	4990      	ldr	r1, [pc, #576]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094a4:	e040      	b.n	8009528 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d023      	beq.n	80094f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094ae:	4b8c      	ldr	r3, [pc, #560]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a8b      	ldr	r2, [pc, #556]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80094b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ba:	f7fe fa41 	bl	8007940 <HAL_GetTick>
 80094be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094c0:	e008      	b.n	80094d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094c2:	f7fe fa3d 	bl	8007940 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d901      	bls.n	80094d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e227      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094d4:	4b82      	ldr	r3, [pc, #520]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d0f0      	beq.n	80094c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094e0:	4b7f      	ldr	r3, [pc, #508]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	061b      	lsls	r3, r3, #24
 80094ee:	497c      	ldr	r1, [pc, #496]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	604b      	str	r3, [r1, #4]
 80094f4:	e018      	b.n	8009528 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094f6:	4b7a      	ldr	r3, [pc, #488]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a79      	ldr	r2, [pc, #484]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80094fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009502:	f7fe fa1d 	bl	8007940 <HAL_GetTick>
 8009506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009508:	e008      	b.n	800951c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800950a:	f7fe fa19 	bl	8007940 <HAL_GetTick>
 800950e:	4602      	mov	r2, r0
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	2b02      	cmp	r3, #2
 8009516:	d901      	bls.n	800951c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009518:	2303      	movs	r3, #3
 800951a:	e203      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800951c:	4b70      	ldr	r3, [pc, #448]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1f0      	bne.n	800950a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0308 	and.w	r3, r3, #8
 8009530:	2b00      	cmp	r3, #0
 8009532:	d03c      	beq.n	80095ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01c      	beq.n	8009576 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800953c:	4b68      	ldr	r3, [pc, #416]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 800953e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009542:	4a67      	ldr	r2, [pc, #412]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009544:	f043 0301 	orr.w	r3, r3, #1
 8009548:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800954c:	f7fe f9f8 	bl	8007940 <HAL_GetTick>
 8009550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009552:	e008      	b.n	8009566 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009554:	f7fe f9f4 	bl	8007940 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b02      	cmp	r3, #2
 8009560:	d901      	bls.n	8009566 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e1de      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009566:	4b5e      	ldr	r3, [pc, #376]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0ef      	beq.n	8009554 <HAL_RCC_OscConfig+0x3ec>
 8009574:	e01b      	b.n	80095ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009576:	4b5a      	ldr	r3, [pc, #360]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800957c:	4a58      	ldr	r2, [pc, #352]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 800957e:	f023 0301 	bic.w	r3, r3, #1
 8009582:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009586:	f7fe f9db 	bl	8007940 <HAL_GetTick>
 800958a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800958c:	e008      	b.n	80095a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800958e:	f7fe f9d7 	bl	8007940 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e1c1      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095a0:	4b4f      	ldr	r3, [pc, #316]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80095a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1ef      	bne.n	800958e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 0304 	and.w	r3, r3, #4
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 80a6 	beq.w	8009708 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095bc:	2300      	movs	r3, #0
 80095be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80095c0:	4b47      	ldr	r3, [pc, #284]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80095c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10d      	bne.n	80095e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095cc:	4b44      	ldr	r3, [pc, #272]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80095ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d0:	4a43      	ldr	r2, [pc, #268]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80095d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095d6:	6593      	str	r3, [r2, #88]	; 0x58
 80095d8:	4b41      	ldr	r3, [pc, #260]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80095da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e0:	60bb      	str	r3, [r7, #8]
 80095e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095e4:	2301      	movs	r3, #1
 80095e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095e8:	4b3e      	ldr	r3, [pc, #248]	; (80096e4 <HAL_RCC_OscConfig+0x57c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d118      	bne.n	8009626 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095f4:	4b3b      	ldr	r3, [pc, #236]	; (80096e4 <HAL_RCC_OscConfig+0x57c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a3a      	ldr	r2, [pc, #232]	; (80096e4 <HAL_RCC_OscConfig+0x57c>)
 80095fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009600:	f7fe f99e 	bl	8007940 <HAL_GetTick>
 8009604:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009606:	e008      	b.n	800961a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009608:	f7fe f99a 	bl	8007940 <HAL_GetTick>
 800960c:	4602      	mov	r2, r0
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	2b02      	cmp	r3, #2
 8009614:	d901      	bls.n	800961a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e184      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800961a:	4b32      	ldr	r3, [pc, #200]	; (80096e4 <HAL_RCC_OscConfig+0x57c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0f0      	beq.n	8009608 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d108      	bne.n	8009640 <HAL_RCC_OscConfig+0x4d8>
 800962e:	4b2c      	ldr	r3, [pc, #176]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009634:	4a2a      	ldr	r2, [pc, #168]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800963e:	e024      	b.n	800968a <HAL_RCC_OscConfig+0x522>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b05      	cmp	r3, #5
 8009646:	d110      	bne.n	800966a <HAL_RCC_OscConfig+0x502>
 8009648:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 800964a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800964e:	4a24      	ldr	r2, [pc, #144]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009650:	f043 0304 	orr.w	r3, r3, #4
 8009654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009658:	4b21      	ldr	r3, [pc, #132]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 800965a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800965e:	4a20      	ldr	r2, [pc, #128]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009660:	f043 0301 	orr.w	r3, r3, #1
 8009664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009668:	e00f      	b.n	800968a <HAL_RCC_OscConfig+0x522>
 800966a:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 800966c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009670:	4a1b      	ldr	r2, [pc, #108]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009672:	f023 0301 	bic.w	r3, r3, #1
 8009676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800967a:	4b19      	ldr	r3, [pc, #100]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 800967c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009680:	4a17      	ldr	r2, [pc, #92]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 8009682:	f023 0304 	bic.w	r3, r3, #4
 8009686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d016      	beq.n	80096c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009692:	f7fe f955 	bl	8007940 <HAL_GetTick>
 8009696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009698:	e00a      	b.n	80096b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800969a:	f7fe f951 	bl	8007940 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d901      	bls.n	80096b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e139      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <HAL_RCC_OscConfig+0x578>)
 80096b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0ed      	beq.n	800969a <HAL_RCC_OscConfig+0x532>
 80096be:	e01a      	b.n	80096f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096c0:	f7fe f93e 	bl	8007940 <HAL_GetTick>
 80096c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096c6:	e00f      	b.n	80096e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096c8:	f7fe f93a 	bl	8007940 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d906      	bls.n	80096e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e122      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
 80096de:	bf00      	nop
 80096e0:	40021000 	.word	0x40021000
 80096e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096e8:	4b90      	ldr	r3, [pc, #576]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80096ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e8      	bne.n	80096c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096f6:	7ffb      	ldrb	r3, [r7, #31]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d105      	bne.n	8009708 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096fc:	4b8b      	ldr	r3, [pc, #556]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80096fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009700:	4a8a      	ldr	r2, [pc, #552]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 8009702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009706:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 8108 	beq.w	8009922 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009716:	2b02      	cmp	r3, #2
 8009718:	f040 80d0 	bne.w	80098bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800971c:	4b83      	ldr	r3, [pc, #524]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f003 0203 	and.w	r2, r3, #3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	429a      	cmp	r2, r3
 800972e:	d130      	bne.n	8009792 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973a:	3b01      	subs	r3, #1
 800973c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800973e:	429a      	cmp	r2, r3
 8009740:	d127      	bne.n	8009792 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800974e:	429a      	cmp	r2, r3
 8009750:	d11f      	bne.n	8009792 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800975c:	2a07      	cmp	r2, #7
 800975e:	bf14      	ite	ne
 8009760:	2201      	movne	r2, #1
 8009762:	2200      	moveq	r2, #0
 8009764:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009766:	4293      	cmp	r3, r2
 8009768:	d113      	bne.n	8009792 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009774:	085b      	lsrs	r3, r3, #1
 8009776:	3b01      	subs	r3, #1
 8009778:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800977a:	429a      	cmp	r2, r3
 800977c:	d109      	bne.n	8009792 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009788:	085b      	lsrs	r3, r3, #1
 800978a:	3b01      	subs	r3, #1
 800978c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800978e:	429a      	cmp	r2, r3
 8009790:	d06e      	beq.n	8009870 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	2b0c      	cmp	r3, #12
 8009796:	d069      	beq.n	800986c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009798:	4b64      	ldr	r3, [pc, #400]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d105      	bne.n	80097b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80097a4:	4b61      	ldr	r3, [pc, #388]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e0b7      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80097b4:	4b5d      	ldr	r3, [pc, #372]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a5c      	ldr	r2, [pc, #368]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80097ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80097c0:	f7fe f8be 	bl	8007940 <HAL_GetTick>
 80097c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097c6:	e008      	b.n	80097da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097c8:	f7fe f8ba 	bl	8007940 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d901      	bls.n	80097da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e0a4      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097da:	4b54      	ldr	r3, [pc, #336]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1f0      	bne.n	80097c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097e6:	4b51      	ldr	r3, [pc, #324]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	4b51      	ldr	r3, [pc, #324]	; (8009930 <HAL_RCC_OscConfig+0x7c8>)
 80097ec:	4013      	ands	r3, r2
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80097f6:	3a01      	subs	r2, #1
 80097f8:	0112      	lsls	r2, r2, #4
 80097fa:	4311      	orrs	r1, r2
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009800:	0212      	lsls	r2, r2, #8
 8009802:	4311      	orrs	r1, r2
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009808:	0852      	lsrs	r2, r2, #1
 800980a:	3a01      	subs	r2, #1
 800980c:	0552      	lsls	r2, r2, #21
 800980e:	4311      	orrs	r1, r2
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009814:	0852      	lsrs	r2, r2, #1
 8009816:	3a01      	subs	r2, #1
 8009818:	0652      	lsls	r2, r2, #25
 800981a:	4311      	orrs	r1, r2
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009820:	0912      	lsrs	r2, r2, #4
 8009822:	0452      	lsls	r2, r2, #17
 8009824:	430a      	orrs	r2, r1
 8009826:	4941      	ldr	r1, [pc, #260]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 8009828:	4313      	orrs	r3, r2
 800982a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800982c:	4b3f      	ldr	r3, [pc, #252]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a3e      	ldr	r2, [pc, #248]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 8009832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009836:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009838:	4b3c      	ldr	r3, [pc, #240]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	4a3b      	ldr	r2, [pc, #236]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 800983e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009842:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009844:	f7fe f87c 	bl	8007940 <HAL_GetTick>
 8009848:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800984a:	e008      	b.n	800985e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800984c:	f7fe f878 	bl	8007940 <HAL_GetTick>
 8009850:	4602      	mov	r2, r0
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b02      	cmp	r3, #2
 8009858:	d901      	bls.n	800985e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e062      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800985e:	4b33      	ldr	r3, [pc, #204]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0f0      	beq.n	800984c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800986a:	e05a      	b.n	8009922 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e059      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009870:	4b2e      	ldr	r3, [pc, #184]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d152      	bne.n	8009922 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800987c:	4b2b      	ldr	r3, [pc, #172]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a2a      	ldr	r2, [pc, #168]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 8009882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009886:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009888:	4b28      	ldr	r3, [pc, #160]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	4a27      	ldr	r2, [pc, #156]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 800988e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009892:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009894:	f7fe f854 	bl	8007940 <HAL_GetTick>
 8009898:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800989a:	e008      	b.n	80098ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800989c:	f7fe f850 	bl	8007940 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d901      	bls.n	80098ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e03a      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098ae:	4b1f      	ldr	r3, [pc, #124]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0f0      	beq.n	800989c <HAL_RCC_OscConfig+0x734>
 80098ba:	e032      	b.n	8009922 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	2b0c      	cmp	r3, #12
 80098c0:	d02d      	beq.n	800991e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098c2:	4b1a      	ldr	r3, [pc, #104]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a19      	ldr	r2, [pc, #100]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80098c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80098ce:	4b17      	ldr	r3, [pc, #92]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d105      	bne.n	80098e6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80098da:	4b14      	ldr	r3, [pc, #80]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	4a13      	ldr	r2, [pc, #76]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80098e0:	f023 0303 	bic.w	r3, r3, #3
 80098e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80098e6:	4b11      	ldr	r3, [pc, #68]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	4a10      	ldr	r2, [pc, #64]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 80098ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80098f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f6:	f7fe f823 	bl	8007940 <HAL_GetTick>
 80098fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098fc:	e008      	b.n	8009910 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098fe:	f7fe f81f 	bl	8007940 <HAL_GetTick>
 8009902:	4602      	mov	r2, r0
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	2b02      	cmp	r3, #2
 800990a:	d901      	bls.n	8009910 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	e009      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <HAL_RCC_OscConfig+0x7c4>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1f0      	bne.n	80098fe <HAL_RCC_OscConfig+0x796>
 800991c:	e001      	b.n	8009922 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e000      	b.n	8009924 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3720      	adds	r7, #32
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	40021000 	.word	0x40021000
 8009930:	f99d808c 	.word	0xf99d808c

08009934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e0c8      	b.n	8009ada <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009948:	4b66      	ldr	r3, [pc, #408]	; (8009ae4 <HAL_RCC_ClockConfig+0x1b0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d910      	bls.n	8009978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009956:	4b63      	ldr	r3, [pc, #396]	; (8009ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f023 0207 	bic.w	r2, r3, #7
 800995e:	4961      	ldr	r1, [pc, #388]	; (8009ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	4313      	orrs	r3, r2
 8009964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009966:	4b5f      	ldr	r3, [pc, #380]	; (8009ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d001      	beq.n	8009978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e0b0      	b.n	8009ada <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d04c      	beq.n	8009a1e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	2b03      	cmp	r3, #3
 800998a:	d107      	bne.n	800999c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800998c:	4b56      	ldr	r3, [pc, #344]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d121      	bne.n	80099dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e09e      	b.n	8009ada <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d107      	bne.n	80099b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099a4:	4b50      	ldr	r3, [pc, #320]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d115      	bne.n	80099dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e092      	b.n	8009ada <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d107      	bne.n	80099cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80099bc:	4b4a      	ldr	r3, [pc, #296]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d109      	bne.n	80099dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e086      	b.n	8009ada <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099cc:	4b46      	ldr	r3, [pc, #280]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e07e      	b.n	8009ada <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80099dc:	4b42      	ldr	r3, [pc, #264]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f023 0203 	bic.w	r2, r3, #3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	493f      	ldr	r1, [pc, #252]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ee:	f7fd ffa7 	bl	8007940 <HAL_GetTick>
 80099f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099f4:	e00a      	b.n	8009a0c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099f6:	f7fd ffa3 	bl	8007940 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d901      	bls.n	8009a0c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e066      	b.n	8009ada <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a0c:	4b36      	ldr	r3, [pc, #216]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f003 020c 	and.w	r2, r3, #12
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d1eb      	bne.n	80099f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d008      	beq.n	8009a3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	492c      	ldr	r1, [pc, #176]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a3c:	4b29      	ldr	r3, [pc, #164]	; (8009ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0307 	and.w	r3, r3, #7
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d210      	bcs.n	8009a6c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a4a:	4b26      	ldr	r3, [pc, #152]	; (8009ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f023 0207 	bic.w	r2, r3, #7
 8009a52:	4924      	ldr	r1, [pc, #144]	; (8009ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a5a:	4b22      	ldr	r3, [pc, #136]	; (8009ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0307 	and.w	r3, r3, #7
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d001      	beq.n	8009a6c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e036      	b.n	8009ada <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d008      	beq.n	8009a8a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a78:	4b1b      	ldr	r3, [pc, #108]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	4918      	ldr	r1, [pc, #96]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0308 	and.w	r3, r3, #8
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d009      	beq.n	8009aaa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a96:	4b14      	ldr	r3, [pc, #80]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	4910      	ldr	r1, [pc, #64]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009aaa:	f000 f825 	bl	8009af8 <HAL_RCC_GetSysClockFreq>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	091b      	lsrs	r3, r3, #4
 8009ab6:	f003 030f 	and.w	r3, r3, #15
 8009aba:	490c      	ldr	r1, [pc, #48]	; (8009aec <HAL_RCC_ClockConfig+0x1b8>)
 8009abc:	5ccb      	ldrb	r3, [r1, r3]
 8009abe:	f003 031f 	and.w	r3, r3, #31
 8009ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac6:	4a0a      	ldr	r2, [pc, #40]	; (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009aca:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <HAL_RCC_ClockConfig+0x1c0>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fd fee6 	bl	80078a0 <HAL_InitTick>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	72fb      	strb	r3, [r7, #11]

  return status;
 8009ad8:	7afb      	ldrb	r3, [r7, #11]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	40022000 	.word	0x40022000
 8009ae8:	40021000 	.word	0x40021000
 8009aec:	08010428 	.word	0x08010428
 8009af0:	20000004 	.word	0x20000004
 8009af4:	2000006c 	.word	0x2000006c

08009af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b089      	sub	sp, #36	; 0x24
 8009afc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	61fb      	str	r3, [r7, #28]
 8009b02:	2300      	movs	r3, #0
 8009b04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b06:	4b3e      	ldr	r3, [pc, #248]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f003 030c 	and.w	r3, r3, #12
 8009b0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b10:	4b3b      	ldr	r3, [pc, #236]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <HAL_RCC_GetSysClockFreq+0x34>
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	2b0c      	cmp	r3, #12
 8009b24:	d121      	bne.n	8009b6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d11e      	bne.n	8009b6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009b2c:	4b34      	ldr	r3, [pc, #208]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0308 	and.w	r3, r3, #8
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d107      	bne.n	8009b48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009b38:	4b31      	ldr	r3, [pc, #196]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b3e:	0a1b      	lsrs	r3, r3, #8
 8009b40:	f003 030f 	and.w	r3, r3, #15
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	e005      	b.n	8009b54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009b48:	4b2d      	ldr	r3, [pc, #180]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	091b      	lsrs	r3, r3, #4
 8009b4e:	f003 030f 	and.w	r3, r3, #15
 8009b52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009b54:	4a2b      	ldr	r2, [pc, #172]	; (8009c04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10d      	bne.n	8009b80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009b68:	e00a      	b.n	8009b80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d102      	bne.n	8009b76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009b70:	4b25      	ldr	r3, [pc, #148]	; (8009c08 <HAL_RCC_GetSysClockFreq+0x110>)
 8009b72:	61bb      	str	r3, [r7, #24]
 8009b74:	e004      	b.n	8009b80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b08      	cmp	r3, #8
 8009b7a:	d101      	bne.n	8009b80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009b7c:	4b23      	ldr	r3, [pc, #140]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x114>)
 8009b7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2b0c      	cmp	r3, #12
 8009b84:	d134      	bne.n	8009bf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b86:	4b1e      	ldr	r3, [pc, #120]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d003      	beq.n	8009b9e <HAL_RCC_GetSysClockFreq+0xa6>
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d003      	beq.n	8009ba4 <HAL_RCC_GetSysClockFreq+0xac>
 8009b9c:	e005      	b.n	8009baa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009b9e:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <HAL_RCC_GetSysClockFreq+0x110>)
 8009ba0:	617b      	str	r3, [r7, #20]
      break;
 8009ba2:	e005      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009ba4:	4b19      	ldr	r3, [pc, #100]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x114>)
 8009ba6:	617b      	str	r3, [r7, #20]
      break;
 8009ba8:	e002      	b.n	8009bb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	617b      	str	r3, [r7, #20]
      break;
 8009bae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009bb0:	4b13      	ldr	r3, [pc, #76]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	091b      	lsrs	r3, r3, #4
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	3301      	adds	r3, #1
 8009bbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009bbe:	4b10      	ldr	r3, [pc, #64]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	0a1b      	lsrs	r3, r3, #8
 8009bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	fb02 f203 	mul.w	r2, r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	0e5b      	lsrs	r3, r3, #25
 8009bdc:	f003 0303 	and.w	r3, r3, #3
 8009be0:	3301      	adds	r3, #1
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009bf0:	69bb      	ldr	r3, [r7, #24]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3724      	adds	r7, #36	; 0x24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	40021000 	.word	0x40021000
 8009c04:	08010440 	.word	0x08010440
 8009c08:	00f42400 	.word	0x00f42400
 8009c0c:	007a1200 	.word	0x007a1200

08009c10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c14:	4b03      	ldr	r3, [pc, #12]	; (8009c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c16:	681b      	ldr	r3, [r3, #0]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	20000004 	.word	0x20000004

08009c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009c2c:	f7ff fff0 	bl	8009c10 <HAL_RCC_GetHCLKFreq>
 8009c30:	4602      	mov	r2, r0
 8009c32:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	4904      	ldr	r1, [pc, #16]	; (8009c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c3e:	5ccb      	ldrb	r3, [r1, r3]
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	40021000 	.word	0x40021000
 8009c50:	08010438 	.word	0x08010438

08009c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009c58:	f7ff ffda 	bl	8009c10 <HAL_RCC_GetHCLKFreq>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	4b06      	ldr	r3, [pc, #24]	; (8009c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	0adb      	lsrs	r3, r3, #11
 8009c64:	f003 0307 	and.w	r3, r3, #7
 8009c68:	4904      	ldr	r1, [pc, #16]	; (8009c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c6a:	5ccb      	ldrb	r3, [r1, r3]
 8009c6c:	f003 031f 	and.w	r3, r3, #31
 8009c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	40021000 	.word	0x40021000
 8009c7c:	08010438 	.word	0x08010438

08009c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009c88:	2300      	movs	r3, #0
 8009c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009c8c:	4b2a      	ldr	r3, [pc, #168]	; (8009d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009c98:	f7ff fa02 	bl	80090a0 <HAL_PWREx_GetVoltageRange>
 8009c9c:	6178      	str	r0, [r7, #20]
 8009c9e:	e014      	b.n	8009cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009ca0:	4b25      	ldr	r3, [pc, #148]	; (8009d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca4:	4a24      	ldr	r2, [pc, #144]	; (8009d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009caa:	6593      	str	r3, [r2, #88]	; 0x58
 8009cac:	4b22      	ldr	r3, [pc, #136]	; (8009d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009cb8:	f7ff f9f2 	bl	80090a0 <HAL_PWREx_GetVoltageRange>
 8009cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009cbe:	4b1e      	ldr	r3, [pc, #120]	; (8009d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc2:	4a1d      	ldr	r2, [pc, #116]	; (8009d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cd0:	d10b      	bne.n	8009cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d919      	bls.n	8009d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2ba0      	cmp	r3, #160	; 0xa0
 8009cdc:	d902      	bls.n	8009ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009cde:	2302      	movs	r3, #2
 8009ce0:	613b      	str	r3, [r7, #16]
 8009ce2:	e013      	b.n	8009d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	613b      	str	r3, [r7, #16]
 8009ce8:	e010      	b.n	8009d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b80      	cmp	r3, #128	; 0x80
 8009cee:	d902      	bls.n	8009cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	e00a      	b.n	8009d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b80      	cmp	r3, #128	; 0x80
 8009cfa:	d102      	bne.n	8009d02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	613b      	str	r3, [r7, #16]
 8009d00:	e004      	b.n	8009d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b70      	cmp	r3, #112	; 0x70
 8009d06:	d101      	bne.n	8009d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009d08:	2301      	movs	r3, #1
 8009d0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009d0c:	4b0b      	ldr	r3, [pc, #44]	; (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f023 0207 	bic.w	r2, r3, #7
 8009d14:	4909      	ldr	r1, [pc, #36]	; (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009d1c:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0307 	and.w	r3, r3, #7
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d001      	beq.n	8009d2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e000      	b.n	8009d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3718      	adds	r7, #24
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	40021000 	.word	0x40021000
 8009d3c:	40022000 	.word	0x40022000

08009d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d48:	2300      	movs	r3, #0
 8009d4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d041      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d64:	d02a      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009d66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009d6a:	d824      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d70:	d008      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009d72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d76:	d81e      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00a      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d80:	d010      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d82:	e018      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009d84:	4b86      	ldr	r3, [pc, #536]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	4a85      	ldr	r2, [pc, #532]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009d90:	e015      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3304      	adds	r3, #4
 8009d96:	2100      	movs	r1, #0
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 facb 	bl	800a334 <RCCEx_PLLSAI1_Config>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009da2:	e00c      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	3320      	adds	r3, #32
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fbb6 	bl	800a51c <RCCEx_PLLSAI2_Config>
 8009db0:	4603      	mov	r3, r0
 8009db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009db4:	e003      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	74fb      	strb	r3, [r7, #19]
      break;
 8009dba:	e000      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dbe:	7cfb      	ldrb	r3, [r7, #19]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10b      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009dc4:	4b76      	ldr	r3, [pc, #472]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dd2:	4973      	ldr	r1, [pc, #460]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009dda:	e001      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ddc:	7cfb      	ldrb	r3, [r7, #19]
 8009dde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d041      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009df0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009df4:	d02a      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009df6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009dfa:	d824      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e00:	d008      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e06:	d81e      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00a      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e10:	d010      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009e12:	e018      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009e14:	4b62      	ldr	r3, [pc, #392]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	4a61      	ldr	r2, [pc, #388]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009e20:	e015      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3304      	adds	r3, #4
 8009e26:	2100      	movs	r1, #0
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fa83 	bl	800a334 <RCCEx_PLLSAI1_Config>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009e32:	e00c      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3320      	adds	r3, #32
 8009e38:	2100      	movs	r1, #0
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 fb6e 	bl	800a51c <RCCEx_PLLSAI2_Config>
 8009e40:	4603      	mov	r3, r0
 8009e42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009e44:	e003      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	74fb      	strb	r3, [r7, #19]
      break;
 8009e4a:	e000      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e4e:	7cfb      	ldrb	r3, [r7, #19]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10b      	bne.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009e54:	4b52      	ldr	r3, [pc, #328]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e62:	494f      	ldr	r1, [pc, #316]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e64:	4313      	orrs	r3, r2
 8009e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009e6a:	e001      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e6c:	7cfb      	ldrb	r3, [r7, #19]
 8009e6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 80a0 	beq.w	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009e82:	4b47      	ldr	r3, [pc, #284]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e000      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009e92:	2300      	movs	r3, #0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00d      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e98:	4b41      	ldr	r3, [pc, #260]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9c:	4a40      	ldr	r2, [pc, #256]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8009ea4:	4b3e      	ldr	r3, [pc, #248]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eac:	60bb      	str	r3, [r7, #8]
 8009eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009eb4:	4b3b      	ldr	r3, [pc, #236]	; (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a3a      	ldr	r2, [pc, #232]	; (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ec0:	f7fd fd3e 	bl	8007940 <HAL_GetTick>
 8009ec4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009ec6:	e009      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ec8:	f7fd fd3a 	bl	8007940 <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d902      	bls.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8009eda:	e005      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009edc:	4b31      	ldr	r3, [pc, #196]	; (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0ef      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009ee8:	7cfb      	ldrb	r3, [r7, #19]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d15c      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009eee:	4b2c      	ldr	r3, [pc, #176]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ef8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d01f      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d019      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009f0c:	4b24      	ldr	r3, [pc, #144]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f18:	4b21      	ldr	r3, [pc, #132]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1e:	4a20      	ldr	r2, [pc, #128]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f28:	4b1d      	ldr	r3, [pc, #116]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f2e:	4a1c      	ldr	r2, [pc, #112]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009f38:	4a19      	ldr	r2, [pc, #100]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d016      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4a:	f7fd fcf9 	bl	8007940 <HAL_GetTick>
 8009f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f50:	e00b      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f52:	f7fd fcf5 	bl	8007940 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d902      	bls.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	74fb      	strb	r3, [r7, #19]
            break;
 8009f68:	e006      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f6a:	4b0d      	ldr	r3, [pc, #52]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0ec      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009f78:	7cfb      	ldrb	r3, [r7, #19]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10c      	bne.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f7e:	4b08      	ldr	r3, [pc, #32]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f8e:	4904      	ldr	r1, [pc, #16]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009f96:	e009      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f98:	7cfb      	ldrb	r3, [r7, #19]
 8009f9a:	74bb      	strb	r3, [r7, #18]
 8009f9c:	e006      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009f9e:	bf00      	nop
 8009fa0:	40021000 	.word	0x40021000
 8009fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa8:	7cfb      	ldrb	r3, [r7, #19]
 8009faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009fac:	7c7b      	ldrb	r3, [r7, #17]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d105      	bne.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fb2:	4b9e      	ldr	r3, [pc, #632]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb6:	4a9d      	ldr	r2, [pc, #628]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009fca:	4b98      	ldr	r3, [pc, #608]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd0:	f023 0203 	bic.w	r2, r3, #3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd8:	4994      	ldr	r1, [pc, #592]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00a      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009fec:	4b8f      	ldr	r3, [pc, #572]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff2:	f023 020c 	bic.w	r2, r3, #12
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ffa:	498c      	ldr	r1, [pc, #560]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0304 	and.w	r3, r3, #4
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00a      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a00e:	4b87      	ldr	r3, [pc, #540]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a014:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	4983      	ldr	r1, [pc, #524]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00a      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a030:	4b7e      	ldr	r3, [pc, #504]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a036:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03e:	497b      	ldr	r1, [pc, #492]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a040:	4313      	orrs	r3, r2
 800a042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 0310 	and.w	r3, r3, #16
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a052:	4b76      	ldr	r3, [pc, #472]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a060:	4972      	ldr	r1, [pc, #456]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a062:	4313      	orrs	r3, r2
 800a064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0320 	and.w	r3, r3, #32
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00a      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a074:	4b6d      	ldr	r3, [pc, #436]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a07a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a082:	496a      	ldr	r1, [pc, #424]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a084:	4313      	orrs	r3, r2
 800a086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00a      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a096:	4b65      	ldr	r3, [pc, #404]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0a4:	4961      	ldr	r1, [pc, #388]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00a      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a0b8:	4b5c      	ldr	r3, [pc, #368]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0c6:	4959      	ldr	r1, [pc, #356]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a0da:	4b54      	ldr	r3, [pc, #336]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e8:	4950      	ldr	r1, [pc, #320]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00a      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a0fc:	4b4b      	ldr	r3, [pc, #300]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a102:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a10a:	4948      	ldr	r1, [pc, #288]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a11e:	4b43      	ldr	r3, [pc, #268]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12c:	493f      	ldr	r1, [pc, #252]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d028      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a140:	4b3a      	ldr	r3, [pc, #232]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a14e:	4937      	ldr	r1, [pc, #220]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a150:	4313      	orrs	r3, r2
 800a152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a15a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a15e:	d106      	bne.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a160:	4b32      	ldr	r3, [pc, #200]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	4a31      	ldr	r2, [pc, #196]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a16a:	60d3      	str	r3, [r2, #12]
 800a16c:	e011      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a176:	d10c      	bne.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	3304      	adds	r3, #4
 800a17c:	2101      	movs	r1, #1
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f8d8 	bl	800a334 <RCCEx_PLLSAI1_Config>
 800a184:	4603      	mov	r3, r0
 800a186:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a188:	7cfb      	ldrb	r3, [r7, #19]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a18e:	7cfb      	ldrb	r3, [r7, #19]
 800a190:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d028      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a19e:	4b23      	ldr	r3, [pc, #140]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ac:	491f      	ldr	r1, [pc, #124]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1bc:	d106      	bne.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a1be:	4b1b      	ldr	r3, [pc, #108]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	4a1a      	ldr	r2, [pc, #104]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1c8:	60d3      	str	r3, [r2, #12]
 800a1ca:	e011      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1d4:	d10c      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	3304      	adds	r3, #4
 800a1da:	2101      	movs	r1, #1
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f000 f8a9 	bl	800a334 <RCCEx_PLLSAI1_Config>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a1e6:	7cfb      	ldrb	r3, [r7, #19]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a1ec:	7cfb      	ldrb	r3, [r7, #19]
 800a1ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d02b      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1fc:	4b0b      	ldr	r3, [pc, #44]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a20a:	4908      	ldr	r1, [pc, #32]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a21a:	d109      	bne.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a21c:	4b03      	ldr	r3, [pc, #12]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	4a02      	ldr	r2, [pc, #8]	; (800a22c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a226:	60d3      	str	r3, [r2, #12]
 800a228:	e014      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a22a:	bf00      	nop
 800a22c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a238:	d10c      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3304      	adds	r3, #4
 800a23e:	2101      	movs	r1, #1
 800a240:	4618      	mov	r0, r3
 800a242:	f000 f877 	bl	800a334 <RCCEx_PLLSAI1_Config>
 800a246:	4603      	mov	r3, r0
 800a248:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a24a:	7cfb      	ldrb	r3, [r7, #19]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a250:	7cfb      	ldrb	r3, [r7, #19]
 800a252:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d02f      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a260:	4b2b      	ldr	r3, [pc, #172]	; (800a310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a26e:	4928      	ldr	r1, [pc, #160]	; (800a310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a270:	4313      	orrs	r3, r2
 800a272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a27a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a27e:	d10d      	bne.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3304      	adds	r3, #4
 800a284:	2102      	movs	r1, #2
 800a286:	4618      	mov	r0, r3
 800a288:	f000 f854 	bl	800a334 <RCCEx_PLLSAI1_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a290:	7cfb      	ldrb	r3, [r7, #19]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d014      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a296:	7cfb      	ldrb	r3, [r7, #19]
 800a298:	74bb      	strb	r3, [r7, #18]
 800a29a:	e011      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2a4:	d10c      	bne.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3320      	adds	r3, #32
 800a2aa:	2102      	movs	r1, #2
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 f935 	bl	800a51c <RCCEx_PLLSAI2_Config>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a2b6:	7cfb      	ldrb	r3, [r7, #19]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a2bc:	7cfb      	ldrb	r3, [r7, #19]
 800a2be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00a      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a2cc:	4b10      	ldr	r3, [pc, #64]	; (800a310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2da:	490d      	ldr	r1, [pc, #52]	; (800a310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00b      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a2ee:	4b08      	ldr	r3, [pc, #32]	; (800a310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a2f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2fe:	4904      	ldr	r1, [pc, #16]	; (800a310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a300:	4313      	orrs	r3, r2
 800a302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a306:	7cbb      	ldrb	r3, [r7, #18]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	40021000 	.word	0x40021000

0800a314 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a314:	b480      	push	{r7}
 800a316:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a318:	4b05      	ldr	r3, [pc, #20]	; (800a330 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a04      	ldr	r2, [pc, #16]	; (800a330 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a31e:	f043 0304 	orr.w	r3, r3, #4
 800a322:	6013      	str	r3, [r2, #0]
}
 800a324:	bf00      	nop
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	40021000 	.word	0x40021000

0800a334 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a342:	4b75      	ldr	r3, [pc, #468]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d018      	beq.n	800a380 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a34e:	4b72      	ldr	r3, [pc, #456]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f003 0203 	and.w	r2, r3, #3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d10d      	bne.n	800a37a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
       ||
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a366:	4b6c      	ldr	r3, [pc, #432]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	091b      	lsrs	r3, r3, #4
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
       ||
 800a376:	429a      	cmp	r2, r3
 800a378:	d047      	beq.n	800a40a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	73fb      	strb	r3, [r7, #15]
 800a37e:	e044      	b.n	800a40a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b03      	cmp	r3, #3
 800a386:	d018      	beq.n	800a3ba <RCCEx_PLLSAI1_Config+0x86>
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d825      	bhi.n	800a3d8 <RCCEx_PLLSAI1_Config+0xa4>
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d002      	beq.n	800a396 <RCCEx_PLLSAI1_Config+0x62>
 800a390:	2b02      	cmp	r3, #2
 800a392:	d009      	beq.n	800a3a8 <RCCEx_PLLSAI1_Config+0x74>
 800a394:	e020      	b.n	800a3d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a396:	4b60      	ldr	r3, [pc, #384]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d11d      	bne.n	800a3de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a3a6:	e01a      	b.n	800a3de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a3a8:	4b5b      	ldr	r3, [pc, #364]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d116      	bne.n	800a3e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a3b8:	e013      	b.n	800a3e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a3ba:	4b57      	ldr	r3, [pc, #348]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10f      	bne.n	800a3e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a3c6:	4b54      	ldr	r3, [pc, #336]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d109      	bne.n	800a3e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a3d6:	e006      	b.n	800a3e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	73fb      	strb	r3, [r7, #15]
      break;
 800a3dc:	e004      	b.n	800a3e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a3de:	bf00      	nop
 800a3e0:	e002      	b.n	800a3e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a3e2:	bf00      	nop
 800a3e4:	e000      	b.n	800a3e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a3e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10d      	bne.n	800a40a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a3ee:	4b4a      	ldr	r3, [pc, #296]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6819      	ldr	r1, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	011b      	lsls	r3, r3, #4
 800a402:	430b      	orrs	r3, r1
 800a404:	4944      	ldr	r1, [pc, #272]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a406:	4313      	orrs	r3, r2
 800a408:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d17d      	bne.n	800a50c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a410:	4b41      	ldr	r3, [pc, #260]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a40      	ldr	r2, [pc, #256]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a41a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a41c:	f7fd fa90 	bl	8007940 <HAL_GetTick>
 800a420:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a422:	e009      	b.n	800a438 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a424:	f7fd fa8c 	bl	8007940 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d902      	bls.n	800a438 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	73fb      	strb	r3, [r7, #15]
        break;
 800a436:	e005      	b.n	800a444 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a438:	4b37      	ldr	r3, [pc, #220]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1ef      	bne.n	800a424 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a444:	7bfb      	ldrb	r3, [r7, #15]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d160      	bne.n	800a50c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d111      	bne.n	800a474 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a450:	4b31      	ldr	r3, [pc, #196]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	6892      	ldr	r2, [r2, #8]
 800a460:	0211      	lsls	r1, r2, #8
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	68d2      	ldr	r2, [r2, #12]
 800a466:	0912      	lsrs	r2, r2, #4
 800a468:	0452      	lsls	r2, r2, #17
 800a46a:	430a      	orrs	r2, r1
 800a46c:	492a      	ldr	r1, [pc, #168]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	610b      	str	r3, [r1, #16]
 800a472:	e027      	b.n	800a4c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d112      	bne.n	800a4a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a47a:	4b27      	ldr	r3, [pc, #156]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a482:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6892      	ldr	r2, [r2, #8]
 800a48a:	0211      	lsls	r1, r2, #8
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	6912      	ldr	r2, [r2, #16]
 800a490:	0852      	lsrs	r2, r2, #1
 800a492:	3a01      	subs	r2, #1
 800a494:	0552      	lsls	r2, r2, #21
 800a496:	430a      	orrs	r2, r1
 800a498:	491f      	ldr	r1, [pc, #124]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	610b      	str	r3, [r1, #16]
 800a49e:	e011      	b.n	800a4c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a4a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	6892      	ldr	r2, [r2, #8]
 800a4b0:	0211      	lsls	r1, r2, #8
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	6952      	ldr	r2, [r2, #20]
 800a4b6:	0852      	lsrs	r2, r2, #1
 800a4b8:	3a01      	subs	r2, #1
 800a4ba:	0652      	lsls	r2, r2, #25
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	4916      	ldr	r1, [pc, #88]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a4c4:	4b14      	ldr	r3, [pc, #80]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a13      	ldr	r2, [pc, #76]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4d0:	f7fd fa36 	bl	8007940 <HAL_GetTick>
 800a4d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a4d6:	e009      	b.n	800a4ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a4d8:	f7fd fa32 	bl	8007940 <HAL_GetTick>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d902      	bls.n	800a4ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	73fb      	strb	r3, [r7, #15]
          break;
 800a4ea:	e005      	b.n	800a4f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0ef      	beq.n	800a4d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d106      	bne.n	800a50c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a4fe:	4b06      	ldr	r3, [pc, #24]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a500:	691a      	ldr	r2, [r3, #16]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	4904      	ldr	r1, [pc, #16]	; (800a518 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	40021000 	.word	0x40021000

0800a51c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a52a:	4b6a      	ldr	r3, [pc, #424]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	2b00      	cmp	r3, #0
 800a534:	d018      	beq.n	800a568 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a536:	4b67      	ldr	r3, [pc, #412]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	f003 0203 	and.w	r2, r3, #3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	429a      	cmp	r2, r3
 800a544:	d10d      	bne.n	800a562 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
       ||
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d009      	beq.n	800a562 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a54e:	4b61      	ldr	r3, [pc, #388]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	091b      	lsrs	r3, r3, #4
 800a554:	f003 0307 	and.w	r3, r3, #7
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
       ||
 800a55e:	429a      	cmp	r2, r3
 800a560:	d047      	beq.n	800a5f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	73fb      	strb	r3, [r7, #15]
 800a566:	e044      	b.n	800a5f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d018      	beq.n	800a5a2 <RCCEx_PLLSAI2_Config+0x86>
 800a570:	2b03      	cmp	r3, #3
 800a572:	d825      	bhi.n	800a5c0 <RCCEx_PLLSAI2_Config+0xa4>
 800a574:	2b01      	cmp	r3, #1
 800a576:	d002      	beq.n	800a57e <RCCEx_PLLSAI2_Config+0x62>
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d009      	beq.n	800a590 <RCCEx_PLLSAI2_Config+0x74>
 800a57c:	e020      	b.n	800a5c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a57e:	4b55      	ldr	r3, [pc, #340]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0302 	and.w	r3, r3, #2
 800a586:	2b00      	cmp	r3, #0
 800a588:	d11d      	bne.n	800a5c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a58e:	e01a      	b.n	800a5c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a590:	4b50      	ldr	r3, [pc, #320]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d116      	bne.n	800a5ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5a0:	e013      	b.n	800a5ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a5a2:	4b4c      	ldr	r3, [pc, #304]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10f      	bne.n	800a5ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a5ae:	4b49      	ldr	r3, [pc, #292]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d109      	bne.n	800a5ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5be:	e006      	b.n	800a5ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c4:	e004      	b.n	800a5d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a5c6:	bf00      	nop
 800a5c8:	e002      	b.n	800a5d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a5ca:	bf00      	nop
 800a5cc:	e000      	b.n	800a5d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a5ce:	bf00      	nop
    }

    if(status == HAL_OK)
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10d      	bne.n	800a5f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a5d6:	4b3f      	ldr	r3, [pc, #252]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6819      	ldr	r1, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	011b      	lsls	r3, r3, #4
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	4939      	ldr	r1, [pc, #228]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d167      	bne.n	800a6c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a5f8:	4b36      	ldr	r3, [pc, #216]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a35      	ldr	r2, [pc, #212]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a5fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a604:	f7fd f99c 	bl	8007940 <HAL_GetTick>
 800a608:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a60a:	e009      	b.n	800a620 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a60c:	f7fd f998 	bl	8007940 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	2b02      	cmp	r3, #2
 800a618:	d902      	bls.n	800a620 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	73fb      	strb	r3, [r7, #15]
        break;
 800a61e:	e005      	b.n	800a62c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a620:	4b2c      	ldr	r3, [pc, #176]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1ef      	bne.n	800a60c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d14a      	bne.n	800a6c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d111      	bne.n	800a65c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a638:	4b26      	ldr	r3, [pc, #152]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	6892      	ldr	r2, [r2, #8]
 800a648:	0211      	lsls	r1, r2, #8
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	68d2      	ldr	r2, [r2, #12]
 800a64e:	0912      	lsrs	r2, r2, #4
 800a650:	0452      	lsls	r2, r2, #17
 800a652:	430a      	orrs	r2, r1
 800a654:	491f      	ldr	r1, [pc, #124]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a656:	4313      	orrs	r3, r2
 800a658:	614b      	str	r3, [r1, #20]
 800a65a:	e011      	b.n	800a680 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a65c:	4b1d      	ldr	r3, [pc, #116]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	6892      	ldr	r2, [r2, #8]
 800a66c:	0211      	lsls	r1, r2, #8
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	6912      	ldr	r2, [r2, #16]
 800a672:	0852      	lsrs	r2, r2, #1
 800a674:	3a01      	subs	r2, #1
 800a676:	0652      	lsls	r2, r2, #25
 800a678:	430a      	orrs	r2, r1
 800a67a:	4916      	ldr	r1, [pc, #88]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a680:	4b14      	ldr	r3, [pc, #80]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a13      	ldr	r2, [pc, #76]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a68a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a68c:	f7fd f958 	bl	8007940 <HAL_GetTick>
 800a690:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a692:	e009      	b.n	800a6a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a694:	f7fd f954 	bl	8007940 <HAL_GetTick>
 800a698:	4602      	mov	r2, r0
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d902      	bls.n	800a6a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	73fb      	strb	r3, [r7, #15]
          break;
 800a6a6:	e005      	b.n	800a6b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d0ef      	beq.n	800a694 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a6ba:	4b06      	ldr	r3, [pc, #24]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6bc:	695a      	ldr	r2, [r3, #20]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	695b      	ldr	r3, [r3, #20]
 800a6c2:	4904      	ldr	r1, [pc, #16]	; (800a6d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	40021000 	.word	0x40021000

0800a6d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e049      	b.n	800a77e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d106      	bne.n	800a704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7f7 fed2 	bl	80024a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2202      	movs	r2, #2
 800a708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3304      	adds	r3, #4
 800a714:	4619      	mov	r1, r3
 800a716:	4610      	mov	r0, r2
 800a718:	f000 f97c 	bl	800aa14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	f003 0302 	and.w	r3, r3, #2
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d122      	bne.n	800a7e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f003 0302 	and.w	r3, r3, #2
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d11b      	bne.n	800a7e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f06f 0202 	mvn.w	r2, #2
 800a7b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	f003 0303 	and.w	r3, r3, #3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d003      	beq.n	800a7d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f905 	bl	800a9d8 <HAL_TIM_IC_CaptureCallback>
 800a7ce:	e005      	b.n	800a7dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f8f7 	bl	800a9c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f908 	bl	800a9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d122      	bne.n	800a836 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f003 0304 	and.w	r3, r3, #4
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d11b      	bne.n	800a836 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f06f 0204 	mvn.w	r2, #4
 800a806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2202      	movs	r2, #2
 800a80c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f8db 	bl	800a9d8 <HAL_TIM_IC_CaptureCallback>
 800a822:	e005      	b.n	800a830 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f8cd 	bl	800a9c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f8de 	bl	800a9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b08      	cmp	r3, #8
 800a842:	d122      	bne.n	800a88a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	f003 0308 	and.w	r3, r3, #8
 800a84e:	2b08      	cmp	r3, #8
 800a850:	d11b      	bne.n	800a88a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f06f 0208 	mvn.w	r2, #8
 800a85a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2204      	movs	r2, #4
 800a860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	f003 0303 	and.w	r3, r3, #3
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d003      	beq.n	800a878 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f8b1 	bl	800a9d8 <HAL_TIM_IC_CaptureCallback>
 800a876:	e005      	b.n	800a884 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f8a3 	bl	800a9c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f8b4 	bl	800a9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	f003 0310 	and.w	r3, r3, #16
 800a894:	2b10      	cmp	r3, #16
 800a896:	d122      	bne.n	800a8de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f003 0310 	and.w	r3, r3, #16
 800a8a2:	2b10      	cmp	r3, #16
 800a8a4:	d11b      	bne.n	800a8de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f06f 0210 	mvn.w	r2, #16
 800a8ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2208      	movs	r2, #8
 800a8b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d003      	beq.n	800a8cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f887 	bl	800a9d8 <HAL_TIM_IC_CaptureCallback>
 800a8ca:	e005      	b.n	800a8d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f879 	bl	800a9c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f88a 	bl	800a9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d10e      	bne.n	800a90a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d107      	bne.n	800a90a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f06f 0201 	mvn.w	r2, #1
 800a902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7f7 fbfb 	bl	8002100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a914:	2b80      	cmp	r3, #128	; 0x80
 800a916:	d10e      	bne.n	800a936 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a922:	2b80      	cmp	r3, #128	; 0x80
 800a924:	d107      	bne.n	800a936 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a92e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f99b 	bl	800ac6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a944:	d10e      	bne.n	800a964 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a950:	2b80      	cmp	r3, #128	; 0x80
 800a952:	d107      	bne.n	800a964 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a95c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f98e 	bl	800ac80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96e:	2b40      	cmp	r3, #64	; 0x40
 800a970:	d10e      	bne.n	800a990 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97c:	2b40      	cmp	r3, #64	; 0x40
 800a97e:	d107      	bne.n	800a990 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f838 	bl	800aa00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d10e      	bne.n	800a9bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d107      	bne.n	800a9bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f06f 0220 	mvn.w	r2, #32
 800a9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f94e 	bl	800ac58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9bc:	bf00      	nop
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a40      	ldr	r2, [pc, #256]	; (800ab28 <TIM_Base_SetConfig+0x114>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d013      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa32:	d00f      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a3d      	ldr	r2, [pc, #244]	; (800ab2c <TIM_Base_SetConfig+0x118>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d00b      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a3c      	ldr	r2, [pc, #240]	; (800ab30 <TIM_Base_SetConfig+0x11c>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d007      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a3b      	ldr	r2, [pc, #236]	; (800ab34 <TIM_Base_SetConfig+0x120>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d003      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a3a      	ldr	r2, [pc, #232]	; (800ab38 <TIM_Base_SetConfig+0x124>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d108      	bne.n	800aa66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a2f      	ldr	r2, [pc, #188]	; (800ab28 <TIM_Base_SetConfig+0x114>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d01f      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa74:	d01b      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a2c      	ldr	r2, [pc, #176]	; (800ab2c <TIM_Base_SetConfig+0x118>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d017      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a2b      	ldr	r2, [pc, #172]	; (800ab30 <TIM_Base_SetConfig+0x11c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d013      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a2a      	ldr	r2, [pc, #168]	; (800ab34 <TIM_Base_SetConfig+0x120>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00f      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a29      	ldr	r2, [pc, #164]	; (800ab38 <TIM_Base_SetConfig+0x124>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d00b      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a28      	ldr	r2, [pc, #160]	; (800ab3c <TIM_Base_SetConfig+0x128>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d007      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a27      	ldr	r2, [pc, #156]	; (800ab40 <TIM_Base_SetConfig+0x12c>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d003      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a26      	ldr	r2, [pc, #152]	; (800ab44 <TIM_Base_SetConfig+0x130>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d108      	bne.n	800aac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	689a      	ldr	r2, [r3, #8]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a10      	ldr	r2, [pc, #64]	; (800ab28 <TIM_Base_SetConfig+0x114>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d00f      	beq.n	800ab0c <TIM_Base_SetConfig+0xf8>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a12      	ldr	r2, [pc, #72]	; (800ab38 <TIM_Base_SetConfig+0x124>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d00b      	beq.n	800ab0c <TIM_Base_SetConfig+0xf8>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a11      	ldr	r2, [pc, #68]	; (800ab3c <TIM_Base_SetConfig+0x128>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d007      	beq.n	800ab0c <TIM_Base_SetConfig+0xf8>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a10      	ldr	r2, [pc, #64]	; (800ab40 <TIM_Base_SetConfig+0x12c>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d003      	beq.n	800ab0c <TIM_Base_SetConfig+0xf8>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a0f      	ldr	r2, [pc, #60]	; (800ab44 <TIM_Base_SetConfig+0x130>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d103      	bne.n	800ab14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	691a      	ldr	r2, [r3, #16]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	615a      	str	r2, [r3, #20]
}
 800ab1a:	bf00      	nop
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	40012c00 	.word	0x40012c00
 800ab2c:	40000400 	.word	0x40000400
 800ab30:	40000800 	.word	0x40000800
 800ab34:	40000c00 	.word	0x40000c00
 800ab38:	40013400 	.word	0x40013400
 800ab3c:	40014000 	.word	0x40014000
 800ab40:	40014400 	.word	0x40014400
 800ab44:	40014800 	.word	0x40014800

0800ab48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e068      	b.n	800ac32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a2e      	ldr	r2, [pc, #184]	; (800ac40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d004      	beq.n	800ab94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a2d      	ldr	r2, [pc, #180]	; (800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d108      	bne.n	800aba6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a1e      	ldr	r2, [pc, #120]	; (800ac40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d01d      	beq.n	800ac06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abd2:	d018      	beq.n	800ac06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a1b      	ldr	r2, [pc, #108]	; (800ac48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d013      	beq.n	800ac06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a1a      	ldr	r2, [pc, #104]	; (800ac4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d00e      	beq.n	800ac06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a18      	ldr	r2, [pc, #96]	; (800ac50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d009      	beq.n	800ac06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a13      	ldr	r2, [pc, #76]	; (800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d004      	beq.n	800ac06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a14      	ldr	r2, [pc, #80]	; (800ac54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d10c      	bne.n	800ac20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	40012c00 	.word	0x40012c00
 800ac44:	40013400 	.word	0x40013400
 800ac48:	40000400 	.word	0x40000400
 800ac4c:	40000800 	.word	0x40000800
 800ac50:	40000c00 	.word	0x40000c00
 800ac54:	40014000 	.word	0x40014000

0800ac58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e040      	b.n	800ad28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d106      	bne.n	800acbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f83a 	bl	800ad30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2224      	movs	r2, #36	; 0x24
 800acc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0201 	bic.w	r2, r2, #1
 800acd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f8ca 	bl	800ae6c <UART_SetConfig>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d101      	bne.n	800ace2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e022      	b.n	800ad28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fb48 	bl	800b380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	685a      	ldr	r2, [r3, #4]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689a      	ldr	r2, [r3, #8]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0201 	orr.w	r2, r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fbcf 	bl	800b4c4 <UART_CheckIdleState>
 800ad26:	4603      	mov	r3, r0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08a      	sub	sp, #40	; 0x28
 800ad48:	af02      	add	r7, sp, #8
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	4613      	mov	r3, r2
 800ad52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	f040 8082 	bne.w	800ae62 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <HAL_UART_Transmit+0x26>
 800ad64:	88fb      	ldrh	r3, [r7, #6]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e07a      	b.n	800ae64 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d101      	bne.n	800ad7c <HAL_UART_Transmit+0x38>
 800ad78:	2302      	movs	r3, #2
 800ad7a:	e073      	b.n	800ae64 <HAL_UART_Transmit+0x120>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2221      	movs	r2, #33	; 0x21
 800ad90:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad92:	f7fc fdd5 	bl	8007940 <HAL_GetTick>
 800ad96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	88fa      	ldrh	r2, [r7, #6]
 800ad9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	88fa      	ldrh	r2, [r7, #6]
 800ada4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adb0:	d108      	bne.n	800adc4 <HAL_UART_Transmit+0x80>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d104      	bne.n	800adc4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	61bb      	str	r3, [r7, #24]
 800adc2:	e003      	b.n	800adcc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800adc8:	2300      	movs	r3, #0
 800adca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800add4:	e02d      	b.n	800ae32 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2200      	movs	r2, #0
 800adde:	2180      	movs	r1, #128	; 0x80
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 fbb8 	bl	800b556 <UART_WaitOnFlagUntilTimeout>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800adec:	2303      	movs	r3, #3
 800adee:	e039      	b.n	800ae64 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10b      	bne.n	800ae0e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	881a      	ldrh	r2, [r3, #0]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae02:	b292      	uxth	r2, r2
 800ae04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	3302      	adds	r3, #2
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	e008      	b.n	800ae20 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	781a      	ldrb	r2, [r3, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	b292      	uxth	r2, r2
 800ae18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1cb      	bne.n	800add6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2200      	movs	r2, #0
 800ae46:	2140      	movs	r1, #64	; 0x40
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 fb84 	bl	800b556 <UART_WaitOnFlagUntilTimeout>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e005      	b.n	800ae64 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e000      	b.n	800ae64 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800ae62:	2302      	movs	r3, #2
  }
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae6c:	b5b0      	push	{r4, r5, r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689a      	ldr	r2, [r3, #8]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	431a      	orrs	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	431a      	orrs	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	4bad      	ldr	r3, [pc, #692]	; (800b14c <UART_SetConfig+0x2e0>)
 800ae98:	4013      	ands	r3, r2
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	6812      	ldr	r2, [r2, #0]
 800ae9e:	69f9      	ldr	r1, [r7, #28]
 800aea0:	430b      	orrs	r3, r1
 800aea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68da      	ldr	r2, [r3, #12]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4aa2      	ldr	r2, [pc, #648]	; (800b150 <UART_SetConfig+0x2e4>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d004      	beq.n	800aed4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	69fa      	ldr	r2, [r7, #28]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	69fa      	ldr	r2, [r7, #28]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a99      	ldr	r2, [pc, #612]	; (800b154 <UART_SetConfig+0x2e8>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d121      	bne.n	800af36 <UART_SetConfig+0xca>
 800aef2:	4b99      	ldr	r3, [pc, #612]	; (800b158 <UART_SetConfig+0x2ec>)
 800aef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d817      	bhi.n	800af30 <UART_SetConfig+0xc4>
 800af00:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <UART_SetConfig+0x9c>)
 800af02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af06:	bf00      	nop
 800af08:	0800af19 	.word	0x0800af19
 800af0c:	0800af25 	.word	0x0800af25
 800af10:	0800af1f 	.word	0x0800af1f
 800af14:	0800af2b 	.word	0x0800af2b
 800af18:	2301      	movs	r3, #1
 800af1a:	76fb      	strb	r3, [r7, #27]
 800af1c:	e0e7      	b.n	800b0ee <UART_SetConfig+0x282>
 800af1e:	2302      	movs	r3, #2
 800af20:	76fb      	strb	r3, [r7, #27]
 800af22:	e0e4      	b.n	800b0ee <UART_SetConfig+0x282>
 800af24:	2304      	movs	r3, #4
 800af26:	76fb      	strb	r3, [r7, #27]
 800af28:	e0e1      	b.n	800b0ee <UART_SetConfig+0x282>
 800af2a:	2308      	movs	r3, #8
 800af2c:	76fb      	strb	r3, [r7, #27]
 800af2e:	e0de      	b.n	800b0ee <UART_SetConfig+0x282>
 800af30:	2310      	movs	r3, #16
 800af32:	76fb      	strb	r3, [r7, #27]
 800af34:	e0db      	b.n	800b0ee <UART_SetConfig+0x282>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a88      	ldr	r2, [pc, #544]	; (800b15c <UART_SetConfig+0x2f0>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d132      	bne.n	800afa6 <UART_SetConfig+0x13a>
 800af40:	4b85      	ldr	r3, [pc, #532]	; (800b158 <UART_SetConfig+0x2ec>)
 800af42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af46:	f003 030c 	and.w	r3, r3, #12
 800af4a:	2b0c      	cmp	r3, #12
 800af4c:	d828      	bhi.n	800afa0 <UART_SetConfig+0x134>
 800af4e:	a201      	add	r2, pc, #4	; (adr r2, 800af54 <UART_SetConfig+0xe8>)
 800af50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af54:	0800af89 	.word	0x0800af89
 800af58:	0800afa1 	.word	0x0800afa1
 800af5c:	0800afa1 	.word	0x0800afa1
 800af60:	0800afa1 	.word	0x0800afa1
 800af64:	0800af95 	.word	0x0800af95
 800af68:	0800afa1 	.word	0x0800afa1
 800af6c:	0800afa1 	.word	0x0800afa1
 800af70:	0800afa1 	.word	0x0800afa1
 800af74:	0800af8f 	.word	0x0800af8f
 800af78:	0800afa1 	.word	0x0800afa1
 800af7c:	0800afa1 	.word	0x0800afa1
 800af80:	0800afa1 	.word	0x0800afa1
 800af84:	0800af9b 	.word	0x0800af9b
 800af88:	2300      	movs	r3, #0
 800af8a:	76fb      	strb	r3, [r7, #27]
 800af8c:	e0af      	b.n	800b0ee <UART_SetConfig+0x282>
 800af8e:	2302      	movs	r3, #2
 800af90:	76fb      	strb	r3, [r7, #27]
 800af92:	e0ac      	b.n	800b0ee <UART_SetConfig+0x282>
 800af94:	2304      	movs	r3, #4
 800af96:	76fb      	strb	r3, [r7, #27]
 800af98:	e0a9      	b.n	800b0ee <UART_SetConfig+0x282>
 800af9a:	2308      	movs	r3, #8
 800af9c:	76fb      	strb	r3, [r7, #27]
 800af9e:	e0a6      	b.n	800b0ee <UART_SetConfig+0x282>
 800afa0:	2310      	movs	r3, #16
 800afa2:	76fb      	strb	r3, [r7, #27]
 800afa4:	e0a3      	b.n	800b0ee <UART_SetConfig+0x282>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a6d      	ldr	r2, [pc, #436]	; (800b160 <UART_SetConfig+0x2f4>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d120      	bne.n	800aff2 <UART_SetConfig+0x186>
 800afb0:	4b69      	ldr	r3, [pc, #420]	; (800b158 <UART_SetConfig+0x2ec>)
 800afb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800afba:	2b30      	cmp	r3, #48	; 0x30
 800afbc:	d013      	beq.n	800afe6 <UART_SetConfig+0x17a>
 800afbe:	2b30      	cmp	r3, #48	; 0x30
 800afc0:	d814      	bhi.n	800afec <UART_SetConfig+0x180>
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	d009      	beq.n	800afda <UART_SetConfig+0x16e>
 800afc6:	2b20      	cmp	r3, #32
 800afc8:	d810      	bhi.n	800afec <UART_SetConfig+0x180>
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <UART_SetConfig+0x168>
 800afce:	2b10      	cmp	r3, #16
 800afd0:	d006      	beq.n	800afe0 <UART_SetConfig+0x174>
 800afd2:	e00b      	b.n	800afec <UART_SetConfig+0x180>
 800afd4:	2300      	movs	r3, #0
 800afd6:	76fb      	strb	r3, [r7, #27]
 800afd8:	e089      	b.n	800b0ee <UART_SetConfig+0x282>
 800afda:	2302      	movs	r3, #2
 800afdc:	76fb      	strb	r3, [r7, #27]
 800afde:	e086      	b.n	800b0ee <UART_SetConfig+0x282>
 800afe0:	2304      	movs	r3, #4
 800afe2:	76fb      	strb	r3, [r7, #27]
 800afe4:	e083      	b.n	800b0ee <UART_SetConfig+0x282>
 800afe6:	2308      	movs	r3, #8
 800afe8:	76fb      	strb	r3, [r7, #27]
 800afea:	e080      	b.n	800b0ee <UART_SetConfig+0x282>
 800afec:	2310      	movs	r3, #16
 800afee:	76fb      	strb	r3, [r7, #27]
 800aff0:	e07d      	b.n	800b0ee <UART_SetConfig+0x282>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a5b      	ldr	r2, [pc, #364]	; (800b164 <UART_SetConfig+0x2f8>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d120      	bne.n	800b03e <UART_SetConfig+0x1d2>
 800affc:	4b56      	ldr	r3, [pc, #344]	; (800b158 <UART_SetConfig+0x2ec>)
 800affe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b002:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b006:	2bc0      	cmp	r3, #192	; 0xc0
 800b008:	d013      	beq.n	800b032 <UART_SetConfig+0x1c6>
 800b00a:	2bc0      	cmp	r3, #192	; 0xc0
 800b00c:	d814      	bhi.n	800b038 <UART_SetConfig+0x1cc>
 800b00e:	2b80      	cmp	r3, #128	; 0x80
 800b010:	d009      	beq.n	800b026 <UART_SetConfig+0x1ba>
 800b012:	2b80      	cmp	r3, #128	; 0x80
 800b014:	d810      	bhi.n	800b038 <UART_SetConfig+0x1cc>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <UART_SetConfig+0x1b4>
 800b01a:	2b40      	cmp	r3, #64	; 0x40
 800b01c:	d006      	beq.n	800b02c <UART_SetConfig+0x1c0>
 800b01e:	e00b      	b.n	800b038 <UART_SetConfig+0x1cc>
 800b020:	2300      	movs	r3, #0
 800b022:	76fb      	strb	r3, [r7, #27]
 800b024:	e063      	b.n	800b0ee <UART_SetConfig+0x282>
 800b026:	2302      	movs	r3, #2
 800b028:	76fb      	strb	r3, [r7, #27]
 800b02a:	e060      	b.n	800b0ee <UART_SetConfig+0x282>
 800b02c:	2304      	movs	r3, #4
 800b02e:	76fb      	strb	r3, [r7, #27]
 800b030:	e05d      	b.n	800b0ee <UART_SetConfig+0x282>
 800b032:	2308      	movs	r3, #8
 800b034:	76fb      	strb	r3, [r7, #27]
 800b036:	e05a      	b.n	800b0ee <UART_SetConfig+0x282>
 800b038:	2310      	movs	r3, #16
 800b03a:	76fb      	strb	r3, [r7, #27]
 800b03c:	e057      	b.n	800b0ee <UART_SetConfig+0x282>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a49      	ldr	r2, [pc, #292]	; (800b168 <UART_SetConfig+0x2fc>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d125      	bne.n	800b094 <UART_SetConfig+0x228>
 800b048:	4b43      	ldr	r3, [pc, #268]	; (800b158 <UART_SetConfig+0x2ec>)
 800b04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b04e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b056:	d017      	beq.n	800b088 <UART_SetConfig+0x21c>
 800b058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b05c:	d817      	bhi.n	800b08e <UART_SetConfig+0x222>
 800b05e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b062:	d00b      	beq.n	800b07c <UART_SetConfig+0x210>
 800b064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b068:	d811      	bhi.n	800b08e <UART_SetConfig+0x222>
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d003      	beq.n	800b076 <UART_SetConfig+0x20a>
 800b06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b072:	d006      	beq.n	800b082 <UART_SetConfig+0x216>
 800b074:	e00b      	b.n	800b08e <UART_SetConfig+0x222>
 800b076:	2300      	movs	r3, #0
 800b078:	76fb      	strb	r3, [r7, #27]
 800b07a:	e038      	b.n	800b0ee <UART_SetConfig+0x282>
 800b07c:	2302      	movs	r3, #2
 800b07e:	76fb      	strb	r3, [r7, #27]
 800b080:	e035      	b.n	800b0ee <UART_SetConfig+0x282>
 800b082:	2304      	movs	r3, #4
 800b084:	76fb      	strb	r3, [r7, #27]
 800b086:	e032      	b.n	800b0ee <UART_SetConfig+0x282>
 800b088:	2308      	movs	r3, #8
 800b08a:	76fb      	strb	r3, [r7, #27]
 800b08c:	e02f      	b.n	800b0ee <UART_SetConfig+0x282>
 800b08e:	2310      	movs	r3, #16
 800b090:	76fb      	strb	r3, [r7, #27]
 800b092:	e02c      	b.n	800b0ee <UART_SetConfig+0x282>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a2d      	ldr	r2, [pc, #180]	; (800b150 <UART_SetConfig+0x2e4>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d125      	bne.n	800b0ea <UART_SetConfig+0x27e>
 800b09e:	4b2e      	ldr	r3, [pc, #184]	; (800b158 <UART_SetConfig+0x2ec>)
 800b0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b0a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0ac:	d017      	beq.n	800b0de <UART_SetConfig+0x272>
 800b0ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0b2:	d817      	bhi.n	800b0e4 <UART_SetConfig+0x278>
 800b0b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0b8:	d00b      	beq.n	800b0d2 <UART_SetConfig+0x266>
 800b0ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0be:	d811      	bhi.n	800b0e4 <UART_SetConfig+0x278>
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d003      	beq.n	800b0cc <UART_SetConfig+0x260>
 800b0c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0c8:	d006      	beq.n	800b0d8 <UART_SetConfig+0x26c>
 800b0ca:	e00b      	b.n	800b0e4 <UART_SetConfig+0x278>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	76fb      	strb	r3, [r7, #27]
 800b0d0:	e00d      	b.n	800b0ee <UART_SetConfig+0x282>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	76fb      	strb	r3, [r7, #27]
 800b0d6:	e00a      	b.n	800b0ee <UART_SetConfig+0x282>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	76fb      	strb	r3, [r7, #27]
 800b0dc:	e007      	b.n	800b0ee <UART_SetConfig+0x282>
 800b0de:	2308      	movs	r3, #8
 800b0e0:	76fb      	strb	r3, [r7, #27]
 800b0e2:	e004      	b.n	800b0ee <UART_SetConfig+0x282>
 800b0e4:	2310      	movs	r3, #16
 800b0e6:	76fb      	strb	r3, [r7, #27]
 800b0e8:	e001      	b.n	800b0ee <UART_SetConfig+0x282>
 800b0ea:	2310      	movs	r3, #16
 800b0ec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a17      	ldr	r2, [pc, #92]	; (800b150 <UART_SetConfig+0x2e4>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	f040 8087 	bne.w	800b208 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0fa:	7efb      	ldrb	r3, [r7, #27]
 800b0fc:	2b08      	cmp	r3, #8
 800b0fe:	d837      	bhi.n	800b170 <UART_SetConfig+0x304>
 800b100:	a201      	add	r2, pc, #4	; (adr r2, 800b108 <UART_SetConfig+0x29c>)
 800b102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b106:	bf00      	nop
 800b108:	0800b12d 	.word	0x0800b12d
 800b10c:	0800b171 	.word	0x0800b171
 800b110:	0800b135 	.word	0x0800b135
 800b114:	0800b171 	.word	0x0800b171
 800b118:	0800b13b 	.word	0x0800b13b
 800b11c:	0800b171 	.word	0x0800b171
 800b120:	0800b171 	.word	0x0800b171
 800b124:	0800b171 	.word	0x0800b171
 800b128:	0800b143 	.word	0x0800b143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b12c:	f7fe fd7c 	bl	8009c28 <HAL_RCC_GetPCLK1Freq>
 800b130:	6178      	str	r0, [r7, #20]
        break;
 800b132:	e022      	b.n	800b17a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b134:	4b0d      	ldr	r3, [pc, #52]	; (800b16c <UART_SetConfig+0x300>)
 800b136:	617b      	str	r3, [r7, #20]
        break;
 800b138:	e01f      	b.n	800b17a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b13a:	f7fe fcdd 	bl	8009af8 <HAL_RCC_GetSysClockFreq>
 800b13e:	6178      	str	r0, [r7, #20]
        break;
 800b140:	e01b      	b.n	800b17a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b146:	617b      	str	r3, [r7, #20]
        break;
 800b148:	e017      	b.n	800b17a <UART_SetConfig+0x30e>
 800b14a:	bf00      	nop
 800b14c:	efff69f3 	.word	0xefff69f3
 800b150:	40008000 	.word	0x40008000
 800b154:	40013800 	.word	0x40013800
 800b158:	40021000 	.word	0x40021000
 800b15c:	40004400 	.word	0x40004400
 800b160:	40004800 	.word	0x40004800
 800b164:	40004c00 	.word	0x40004c00
 800b168:	40005000 	.word	0x40005000
 800b16c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	76bb      	strb	r3, [r7, #26]
        break;
 800b178:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 80f1 	beq.w	800b364 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	4613      	mov	r3, r2
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	4413      	add	r3, r2
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d305      	bcc.n	800b19e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d902      	bls.n	800b1a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	76bb      	strb	r3, [r7, #26]
 800b1a2:	e0df      	b.n	800b364 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f04f 0100 	mov.w	r1, #0
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	f04f 0300 	mov.w	r3, #0
 800b1b4:	020b      	lsls	r3, r1, #8
 800b1b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1ba:	0202      	lsls	r2, r0, #8
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	6849      	ldr	r1, [r1, #4]
 800b1c0:	0849      	lsrs	r1, r1, #1
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	f04f 0100 	mov.w	r1, #0
 800b1c8:	1814      	adds	r4, r2, r0
 800b1ca:	eb43 0501 	adc.w	r5, r3, r1
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	f04f 0300 	mov.w	r3, #0
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4629      	mov	r1, r5
 800b1dc:	f7f5 fd94 	bl	8000d08 <__aeabi_uldivmod>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1ee:	d308      	bcc.n	800b202 <UART_SetConfig+0x396>
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1f6:	d204      	bcs.n	800b202 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	60da      	str	r2, [r3, #12]
 800b200:	e0b0      	b.n	800b364 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	76bb      	strb	r3, [r7, #26]
 800b206:	e0ad      	b.n	800b364 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	69db      	ldr	r3, [r3, #28]
 800b20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b210:	d15c      	bne.n	800b2cc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800b212:	7efb      	ldrb	r3, [r7, #27]
 800b214:	2b08      	cmp	r3, #8
 800b216:	d828      	bhi.n	800b26a <UART_SetConfig+0x3fe>
 800b218:	a201      	add	r2, pc, #4	; (adr r2, 800b220 <UART_SetConfig+0x3b4>)
 800b21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21e:	bf00      	nop
 800b220:	0800b245 	.word	0x0800b245
 800b224:	0800b24d 	.word	0x0800b24d
 800b228:	0800b255 	.word	0x0800b255
 800b22c:	0800b26b 	.word	0x0800b26b
 800b230:	0800b25b 	.word	0x0800b25b
 800b234:	0800b26b 	.word	0x0800b26b
 800b238:	0800b26b 	.word	0x0800b26b
 800b23c:	0800b26b 	.word	0x0800b26b
 800b240:	0800b263 	.word	0x0800b263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b244:	f7fe fcf0 	bl	8009c28 <HAL_RCC_GetPCLK1Freq>
 800b248:	6178      	str	r0, [r7, #20]
        break;
 800b24a:	e013      	b.n	800b274 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b24c:	f7fe fd02 	bl	8009c54 <HAL_RCC_GetPCLK2Freq>
 800b250:	6178      	str	r0, [r7, #20]
        break;
 800b252:	e00f      	b.n	800b274 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b254:	4b49      	ldr	r3, [pc, #292]	; (800b37c <UART_SetConfig+0x510>)
 800b256:	617b      	str	r3, [r7, #20]
        break;
 800b258:	e00c      	b.n	800b274 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b25a:	f7fe fc4d 	bl	8009af8 <HAL_RCC_GetSysClockFreq>
 800b25e:	6178      	str	r0, [r7, #20]
        break;
 800b260:	e008      	b.n	800b274 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b266:	617b      	str	r3, [r7, #20]
        break;
 800b268:	e004      	b.n	800b274 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	76bb      	strb	r3, [r7, #26]
        break;
 800b272:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d074      	beq.n	800b364 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	005a      	lsls	r2, r3, #1
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	085b      	lsrs	r3, r3, #1
 800b284:	441a      	add	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28e:	b29b      	uxth	r3, r3
 800b290:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	2b0f      	cmp	r3, #15
 800b296:	d916      	bls.n	800b2c6 <UART_SetConfig+0x45a>
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b29e:	d212      	bcs.n	800b2c6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	f023 030f 	bic.w	r3, r3, #15
 800b2a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	085b      	lsrs	r3, r3, #1
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f003 0307 	and.w	r3, r3, #7
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	89fb      	ldrh	r3, [r7, #14]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	89fa      	ldrh	r2, [r7, #14]
 800b2c2:	60da      	str	r2, [r3, #12]
 800b2c4:	e04e      	b.n	800b364 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	76bb      	strb	r3, [r7, #26]
 800b2ca:	e04b      	b.n	800b364 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2cc:	7efb      	ldrb	r3, [r7, #27]
 800b2ce:	2b08      	cmp	r3, #8
 800b2d0:	d827      	bhi.n	800b322 <UART_SetConfig+0x4b6>
 800b2d2:	a201      	add	r2, pc, #4	; (adr r2, 800b2d8 <UART_SetConfig+0x46c>)
 800b2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d8:	0800b2fd 	.word	0x0800b2fd
 800b2dc:	0800b305 	.word	0x0800b305
 800b2e0:	0800b30d 	.word	0x0800b30d
 800b2e4:	0800b323 	.word	0x0800b323
 800b2e8:	0800b313 	.word	0x0800b313
 800b2ec:	0800b323 	.word	0x0800b323
 800b2f0:	0800b323 	.word	0x0800b323
 800b2f4:	0800b323 	.word	0x0800b323
 800b2f8:	0800b31b 	.word	0x0800b31b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2fc:	f7fe fc94 	bl	8009c28 <HAL_RCC_GetPCLK1Freq>
 800b300:	6178      	str	r0, [r7, #20]
        break;
 800b302:	e013      	b.n	800b32c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b304:	f7fe fca6 	bl	8009c54 <HAL_RCC_GetPCLK2Freq>
 800b308:	6178      	str	r0, [r7, #20]
        break;
 800b30a:	e00f      	b.n	800b32c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b30c:	4b1b      	ldr	r3, [pc, #108]	; (800b37c <UART_SetConfig+0x510>)
 800b30e:	617b      	str	r3, [r7, #20]
        break;
 800b310:	e00c      	b.n	800b32c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b312:	f7fe fbf1 	bl	8009af8 <HAL_RCC_GetSysClockFreq>
 800b316:	6178      	str	r0, [r7, #20]
        break;
 800b318:	e008      	b.n	800b32c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b31a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b31e:	617b      	str	r3, [r7, #20]
        break;
 800b320:	e004      	b.n	800b32c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800b322:	2300      	movs	r3, #0
 800b324:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	76bb      	strb	r3, [r7, #26]
        break;
 800b32a:	bf00      	nop
    }

    if (pclk != 0U)
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d018      	beq.n	800b364 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	085a      	lsrs	r2, r3, #1
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	441a      	add	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	fbb2 f3f3 	udiv	r3, r2, r3
 800b344:	b29b      	uxth	r3, r3
 800b346:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	2b0f      	cmp	r3, #15
 800b34c:	d908      	bls.n	800b360 <UART_SetConfig+0x4f4>
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b354:	d204      	bcs.n	800b360 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	60da      	str	r2, [r3, #12]
 800b35e:	e001      	b.n	800b364 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b370:	7ebb      	ldrb	r3, [r7, #26]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3720      	adds	r7, #32
 800b376:	46bd      	mov	sp, r7
 800b378:	bdb0      	pop	{r4, r5, r7, pc}
 800b37a:	bf00      	nop
 800b37c:	00f42400 	.word	0x00f42400

0800b380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00a      	beq.n	800b3aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ae:	f003 0302 	and.w	r3, r3, #2
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00a      	beq.n	800b3cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	430a      	orrs	r2, r1
 800b3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	f003 0304 	and.w	r3, r3, #4
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00a      	beq.n	800b3ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f2:	f003 0308 	and.w	r3, r3, #8
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	430a      	orrs	r2, r1
 800b40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b414:	f003 0310 	and.w	r3, r3, #16
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00a      	beq.n	800b432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	430a      	orrs	r2, r1
 800b430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b436:	f003 0320 	and.w	r3, r3, #32
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00a      	beq.n	800b454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	430a      	orrs	r2, r1
 800b452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d01a      	beq.n	800b496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	430a      	orrs	r2, r1
 800b474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b47e:	d10a      	bne.n	800b496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	430a      	orrs	r2, r1
 800b494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00a      	beq.n	800b4b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	605a      	str	r2, [r3, #4]
  }
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4d4:	f7fc fa34 	bl	8007940 <HAL_GetTick>
 800b4d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 0308 	and.w	r3, r3, #8
 800b4e4:	2b08      	cmp	r3, #8
 800b4e6:	d10e      	bne.n	800b506 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f82d 	bl	800b556 <UART_WaitOnFlagUntilTimeout>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e023      	b.n	800b54e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b04      	cmp	r3, #4
 800b512:	d10e      	bne.n	800b532 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f817 	bl	800b556 <UART_WaitOnFlagUntilTimeout>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d001      	beq.n	800b532 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b52e:	2303      	movs	r3, #3
 800b530:	e00d      	b.n	800b54e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2220      	movs	r2, #32
 800b536:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2220      	movs	r2, #32
 800b53c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	60f8      	str	r0, [r7, #12]
 800b55e:	60b9      	str	r1, [r7, #8]
 800b560:	603b      	str	r3, [r7, #0]
 800b562:	4613      	mov	r3, r2
 800b564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b566:	e05e      	b.n	800b626 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56e:	d05a      	beq.n	800b626 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b570:	f7fc f9e6 	bl	8007940 <HAL_GetTick>
 800b574:	4602      	mov	r2, r0
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	69ba      	ldr	r2, [r7, #24]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d302      	bcc.n	800b586 <UART_WaitOnFlagUntilTimeout+0x30>
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d11b      	bne.n	800b5be <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b594:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689a      	ldr	r2, [r3, #8]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f022 0201 	bic.w	r2, r2, #1
 800b5a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2220      	movs	r2, #32
 800b5aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e043      	b.n	800b646 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d02c      	beq.n	800b626 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5da:	d124      	bne.n	800b626 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5e4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b5f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	689a      	ldr	r2, [r3, #8]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f022 0201 	bic.w	r2, r2, #1
 800b604:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2220      	movs	r2, #32
 800b60a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2220      	movs	r2, #32
 800b610:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2220      	movs	r2, #32
 800b616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e00f      	b.n	800b646 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	69da      	ldr	r2, [r3, #28]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	4013      	ands	r3, r2
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	429a      	cmp	r2, r3
 800b634:	bf0c      	ite	eq
 800b636:	2301      	moveq	r3, #1
 800b638:	2300      	movne	r3, #0
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	461a      	mov	r2, r3
 800b63e:	79fb      	ldrb	r3, [r7, #7]
 800b640:	429a      	cmp	r2, r3
 800b642:	d091      	beq.n	800b568 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <set_mems_int_pin_a_exti>:


static void mems_int_pin_a_hardware_event_isr(void);

void set_mems_int_pin_a_exti(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
  /* register event irq handler */
  HAL_EXTI_GetHandle(&hexti11, EXTI_LINE_11);
 800b654:	4909      	ldr	r1, [pc, #36]	; (800b67c <set_mems_int_pin_a_exti+0x2c>)
 800b656:	480a      	ldr	r0, [pc, #40]	; (800b680 <set_mems_int_pin_a_exti+0x30>)
 800b658:	f7fc fc0c 	bl	8007e74 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti11, HAL_EXTI_COMMON_CB_ID, mems_int_pin_a_hardware_event_isr);
 800b65c:	4a09      	ldr	r2, [pc, #36]	; (800b684 <set_mems_int_pin_a_exti+0x34>)
 800b65e:	2100      	movs	r1, #0
 800b660:	4807      	ldr	r0, [pc, #28]	; (800b680 <set_mems_int_pin_a_exti+0x30>)
 800b662:	f7fc fbed 	bl	8007e40 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800b666:	2200      	movs	r2, #0
 800b668:	2100      	movs	r1, #0
 800b66a:	2028      	movs	r0, #40	; 0x28
 800b66c:	f7fc fa97 	bl	8007b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800b670:	2028      	movs	r0, #40	; 0x28
 800b672:	f7fc fab0 	bl	8007bd6 <HAL_NVIC_EnableIRQ>
}
 800b676:	bf00      	nop
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	1600000b 	.word	0x1600000b
 800b680:	20000074 	.word	0x20000074
 800b684:	0800b689 	.word	0x0800b689

0800b688 <mems_int_pin_a_hardware_event_isr>:

static void mems_int_pin_a_hardware_event_isr(void)
{
 800b688:	b480      	push	{r7}
 800b68a:	af00      	add	r7, sp, #0
  MemsEventDetected = 1;
 800b68c:	4b05      	ldr	r3, [pc, #20]	; (800b6a4 <mems_int_pin_a_hardware_event_isr+0x1c>)
 800b68e:	2201      	movs	r2, #1
 800b690:	701a      	strb	r2, [r3, #0]
  AccIntReceived = 1;
 800b692:	4b05      	ldr	r3, [pc, #20]	; (800b6a8 <mems_int_pin_a_hardware_event_isr+0x20>)
 800b694:	2201      	movs	r2, #1
 800b696:	701a      	strb	r2, [r3, #0]

}
 800b698:	bf00      	nop
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	2000034c 	.word	0x2000034c
 800b6a8:	20000280 	.word	0x20000280

0800b6ac <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b08e      	sub	sp, #56	; 0x38
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d131      	bne.n	800b72c <CUSTOM_MOTION_SENSOR_Init+0x80>
  {

    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b6c8:	6838      	ldr	r0, [r7, #0]
 800b6ca:	f000 f9c9 	bl	800ba60 <LSM6DSL_0_Probe>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800b6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d8:	e064      	b.n	800b7a4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b6da:	4a34      	ldr	r2, [pc, #208]	; (800b7ac <CUSTOM_MOTION_SENSOR_Init+0x100>)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	4932      	ldr	r1, [pc, #200]	; (800b7b0 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6ec:	f107 010c 	add.w	r1, r7, #12
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b6fa:	f06f 0306 	mvn.w	r3, #6
 800b6fe:	e051      	b.n	800b7a4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 800b700:	7b3b      	ldrb	r3, [r7, #12]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d103      	bne.n	800b70e <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 800b706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b708:	f043 0302 	orr.w	r3, r3, #2
 800b70c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800b70e:	7b7b      	ldrb	r3, [r7, #13]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d103      	bne.n	800b71c <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 800b714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b716:	f043 0301 	orr.w	r3, r3, #1
 800b71a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d108      	bne.n	800b734 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	f043 0304 	orr.w	r3, r3, #4
 800b728:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b72a:	e003      	b.n	800b734 <CUSTOM_MOTION_SENSOR_Init+0x88>

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b72c:	f06f 0301 	mvn.w	r3, #1
 800b730:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800b732:	e000      	b.n	800b736 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 800b734:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800b73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73e:	e031      	b.n	800b7a4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800b740:	2300      	movs	r3, #0
 800b742:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b744:	e02a      	b.n	800b79c <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	4013      	ands	r3, r2
 800b74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b74e:	429a      	cmp	r2, r3
 800b750:	d11e      	bne.n	800b790 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800b752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	4013      	ands	r3, r2
 800b758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d118      	bne.n	800b790 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b75e:	4a15      	ldr	r2, [pc, #84]	; (800b7b4 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b766:	4814      	ldr	r0, [pc, #80]	; (800b7b8 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	4613      	mov	r3, r2
 800b76c:	005b      	lsls	r3, r3, #1
 800b76e:	4413      	add	r3, r2
 800b770:	440b      	add	r3, r1
 800b772:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	490d      	ldr	r1, [pc, #52]	; (800b7b0 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b780:	4610      	mov	r0, r2
 800b782:	4798      	blx	r3
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b78a:	f06f 0304 	mvn.w	r3, #4
 800b78e:	e009      	b.n	800b7a4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800b790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800b796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b798:	3301      	adds	r3, #1
 800b79a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d9d1      	bls.n	800b746 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800b7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3738      	adds	r7, #56	; 0x38
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	2000035c 	.word	0x2000035c
 800b7b0:	2000454c 	.word	0x2000454c
 800b7b4:	2000007c 	.word	0x2000007c
 800b7b8:	20000350 	.word	0x20000350

0800b7bc <CUSTOM_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <CUSTOM_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b7cc:	f06f 0301 	mvn.w	r3, #1
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	e028      	b.n	800b826 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b7d4:	4a16      	ldr	r2, [pc, #88]	; (800b830 <CUSTOM_MOTION_SENSOR_Enable+0x74>)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	4013      	ands	r3, r2
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d11c      	bne.n	800b820 <CUSTOM_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b7e6:	4a13      	ldr	r2, [pc, #76]	; (800b834 <CUSTOM_MOTION_SENSOR_Enable+0x78>)
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b7ee:	4812      	ldr	r0, [pc, #72]	; (800b838 <CUSTOM_MOTION_SENSOR_Enable+0x7c>)
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	005b      	lsls	r3, r3, #1
 800b7f6:	4413      	add	r3, r2
 800b7f8:	440b      	add	r3, r1
 800b7fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	490e      	ldr	r1, [pc, #56]	; (800b83c <CUSTOM_MOTION_SENSOR_Enable+0x80>)
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b808:	4610      	mov	r0, r2
 800b80a:	4798      	blx	r3
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <CUSTOM_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b812:	f06f 0304 	mvn.w	r3, #4
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	e005      	b.n	800b826 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	e002      	b.n	800b826 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b820:	f06f 0301 	mvn.w	r3, #1
 800b824:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b826:	68fb      	ldr	r3, [r7, #12]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	20000360 	.word	0x20000360
 800b834:	2000007c 	.word	0x2000007c
 800b838:	20000350 	.word	0x20000350
 800b83c:	2000454c 	.word	0x2000454c

0800b840 <CUSTOM_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d003      	beq.n	800b858 <CUSTOM_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b850:	f06f 0301 	mvn.w	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	e028      	b.n	800b8aa <CUSTOM_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b858:	4a16      	ldr	r2, [pc, #88]	; (800b8b4 <CUSTOM_MOTION_SENSOR_Disable+0x74>)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	4013      	ands	r3, r2
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	429a      	cmp	r2, r3
 800b868:	d11c      	bne.n	800b8a4 <CUSTOM_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b86a:	4a13      	ldr	r2, [pc, #76]	; (800b8b8 <CUSTOM_MOTION_SENSOR_Disable+0x78>)
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b872:	4812      	ldr	r0, [pc, #72]	; (800b8bc <CUSTOM_MOTION_SENSOR_Disable+0x7c>)
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	4613      	mov	r3, r2
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	4413      	add	r3, r2
 800b87c:	440b      	add	r3, r1
 800b87e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	490e      	ldr	r1, [pc, #56]	; (800b8c0 <CUSTOM_MOTION_SENSOR_Disable+0x80>)
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b88c:	4610      	mov	r0, r2
 800b88e:	4798      	blx	r3
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <CUSTOM_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b896:	f06f 0304 	mvn.w	r3, #4
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	e005      	b.n	800b8aa <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	e002      	b.n	800b8aa <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b8a4:	f06f 0301 	mvn.w	r3, #1
 800b8a8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	20000360 	.word	0x20000360
 800b8b8:	2000007c 	.word	0x2000007c
 800b8bc:	20000350 	.word	0x20000350
 800b8c0:	2000454c 	.word	0x2000454c

0800b8c4 <CUSTOM_MOTION_SENSOR_GetAxesRaw>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes raw data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxesRaw(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_AxesRaw_t *Axes)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d003      	beq.n	800b8de <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b8d6:	f06f 0301 	mvn.w	r3, #1
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	e029      	b.n	800b932 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b8de:	4a17      	ldr	r2, [pc, #92]	; (800b93c <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x78>)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d11d      	bne.n	800b92c <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxesRaw(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b8f0:	4a13      	ldr	r2, [pc, #76]	; (800b940 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x7c>)
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b8f8:	4812      	ldr	r0, [pc, #72]	; (800b944 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x80>)
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	005b      	lsls	r3, r3, #1
 800b900:	4413      	add	r3, r2
 800b902:	440b      	add	r3, r1
 800b904:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	490f      	ldr	r1, [pc, #60]	; (800b948 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x84>)
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b91e:	f06f 0304 	mvn.w	r3, #4
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e005      	b.n	800b932 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
 800b92a:	e002      	b.n	800b932 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b92c:	f06f 0301 	mvn.w	r3, #1
 800b930:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b932:	697b      	ldr	r3, [r7, #20]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	20000360 	.word	0x20000360
 800b940:	2000007c 	.word	0x2000007c
 800b944:	20000350 	.word	0x20000350
 800b948:	2000454c 	.word	0x2000454c

0800b94c <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b960:	f06f 0301 	mvn.w	r3, #1
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	e02a      	b.n	800b9be <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b968:	4a17      	ldr	r2, [pc, #92]	; (800b9c8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	4013      	ands	r3, r2
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	429a      	cmp	r2, r3
 800b978:	d11e      	bne.n	800b9b8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b97a:	4a14      	ldr	r2, [pc, #80]	; (800b9cc <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b982:	4813      	ldr	r0, [pc, #76]	; (800b9d0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4613      	mov	r3, r2
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	4413      	add	r3, r2
 800b98c:	440b      	add	r3, r1
 800b98e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	490f      	ldr	r1, [pc, #60]	; (800b9d4 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b99c:	ed97 0a01 	vldr	s0, [r7, #4]
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4798      	blx	r3
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9aa:	f06f 0304 	mvn.w	r3, #4
 800b9ae:	617b      	str	r3, [r7, #20]
 800b9b0:	e005      	b.n	800b9be <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	617b      	str	r3, [r7, #20]
 800b9b6:	e002      	b.n	800b9be <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b9b8:	f06f 0301 	mvn.w	r3, #1
 800b9bc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b9be:	697b      	ldr	r3, [r7, #20]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	20000360 	.word	0x20000360
 800b9cc:	2000007c 	.word	0x2000007c
 800b9d0:	20000350 	.word	0x20000350
 800b9d4:	2000454c 	.word	0x2000454c

0800b9d8 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b9ea:	f06f 0301 	mvn.w	r3, #1
 800b9ee:	617b      	str	r3, [r7, #20]
 800b9f0:	e029      	b.n	800ba46 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b9f2:	4a17      	ldr	r2, [pc, #92]	; (800ba50 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d11d      	bne.n	800ba40 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800ba04:	4a13      	ldr	r2, [pc, #76]	; (800ba54 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ba0c:	4812      	ldr	r0, [pc, #72]	; (800ba58 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	4613      	mov	r3, r2
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	4413      	add	r3, r2
 800ba16:	440b      	add	r3, r1
 800ba18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	490f      	ldr	r1, [pc, #60]	; (800ba5c <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ba26:	6879      	ldr	r1, [r7, #4]
 800ba28:	4610      	mov	r0, r2
 800ba2a:	4798      	blx	r3
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba32:	f06f 0304 	mvn.w	r3, #4
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	e005      	b.n	800ba46 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	e002      	b.n	800ba46 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ba40:	f06f 0301 	mvn.w	r3, #1
 800ba44:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ba46:	697b      	ldr	r3, [r7, #20]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20000360 	.word	0x20000360
 800ba54:	2000007c 	.word	0x2000007c
 800ba58:	20000350 	.word	0x20000350
 800ba5c:	2000454c 	.word	0x2000454c

0800ba60 <LSM6DSL_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b092      	sub	sp, #72	; 0x48
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_L; /* SA0 = GND */
 800ba70:	23d5      	movs	r3, #213	; 0xd5
 800ba72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = CUSTOM_LSM6DSL_0_I2C_Init;
 800ba76:	4b4a      	ldr	r3, [pc, #296]	; (800bba0 <LSM6DSL_0_Probe+0x140>)
 800ba78:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = CUSTOM_LSM6DSL_0_I2C_DeInit;
 800ba7a:	4b4a      	ldr	r3, [pc, #296]	; (800bba4 <LSM6DSL_0_Probe+0x144>)
 800ba7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = CUSTOM_LSM6DSL_0_I2C_ReadReg;
 800ba7e:	4b4a      	ldr	r3, [pc, #296]	; (800bba8 <LSM6DSL_0_Probe+0x148>)
 800ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = CUSTOM_LSM6DSL_0_I2C_WriteReg;
 800ba82:	4b4a      	ldr	r3, [pc, #296]	; (800bbac <LSM6DSL_0_Probe+0x14c>)
 800ba84:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 800ba86:	4b4a      	ldr	r3, [pc, #296]	; (800bbb0 <LSM6DSL_0_Probe+0x150>)
 800ba88:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800ba8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4848      	ldr	r0, [pc, #288]	; (800bbb4 <LSM6DSL_0_Probe+0x154>)
 800ba92:	f7f6 ffa9 	bl	80029e8 <LSM6DSL_RegisterBusIO>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba9c:	f06f 0306 	mvn.w	r3, #6
 800baa0:	647b      	str	r3, [r7, #68]	; 0x44
 800baa2:	e077      	b.n	800bb94 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800baa4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800baa8:	4619      	mov	r1, r3
 800baaa:	4842      	ldr	r0, [pc, #264]	; (800bbb4 <LSM6DSL_0_Probe+0x154>)
 800baac:	f7f7 f892 	bl	8002bd4 <LSM6DSL_ReadID>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bab6:	f06f 0306 	mvn.w	r3, #6
 800baba:	647b      	str	r3, [r7, #68]	; 0x44
 800babc:	e06a      	b.n	800bb94 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 800babe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bac2:	2b6a      	cmp	r3, #106	; 0x6a
 800bac4:	d003      	beq.n	800bace <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bac6:	f06f 0306 	mvn.w	r3, #6
 800baca:	647b      	str	r3, [r7, #68]	; 0x44
 800bacc:	e062      	b.n	800bb94 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800bace:	f107 0308 	add.w	r3, r7, #8
 800bad2:	4619      	mov	r1, r3
 800bad4:	4837      	ldr	r0, [pc, #220]	; (800bbb4 <LSM6DSL_0_Probe+0x154>)
 800bad6:	f7f7 f893 	bl	8002c00 <LSM6DSL_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bada:	7a7b      	ldrb	r3, [r7, #9]
 800badc:	461a      	mov	r2, r3
 800bade:	7a3b      	ldrb	r3, [r7, #8]
 800bae0:	005b      	lsls	r3, r3, #1
 800bae2:	431a      	orrs	r2, r3
 800bae4:	7abb      	ldrb	r3, [r7, #10]
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4313      	orrs	r3, r2
 800baea:	4a33      	ldr	r2, [pc, #204]	; (800bbb8 <LSM6DSL_0_Probe+0x158>)
 800baec:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSL_0] = &lsm6dsl_obj_0;
 800baee:	4b33      	ldr	r3, [pc, #204]	; (800bbbc <LSM6DSL_0_Probe+0x15c>)
 800baf0:	4a30      	ldr	r2, [pc, #192]	; (800bbb4 <LSM6DSL_0_Probe+0x154>)
 800baf2:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800baf4:	4b32      	ldr	r3, [pc, #200]	; (800bbc0 <LSM6DSL_0_Probe+0x160>)
 800baf6:	4a33      	ldr	r2, [pc, #204]	; (800bbc4 <LSM6DSL_0_Probe+0x164>)
 800baf8:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d11d      	bne.n	800bb3c <LSM6DSL_0_Probe+0xdc>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d018      	beq.n	800bb3c <LSM6DSL_0_Probe+0xdc>
 800bb0a:	7a7b      	ldrb	r3, [r7, #9]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d115      	bne.n	800bb3c <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800bb10:	4b2d      	ldr	r3, [pc, #180]	; (800bbc8 <LSM6DSL_0_Probe+0x168>)
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	4a2d      	ldr	r2, [pc, #180]	; (800bbcc <LSM6DSL_0_Probe+0x16c>)
 800bb16:	492e      	ldr	r1, [pc, #184]	; (800bbd0 <LSM6DSL_0_Probe+0x170>)
 800bb18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSL_0]->Init(MotionCompObj[CUSTOM_LSM6DSL_0]) != LSM6DSL_OK)
 800bb1c:	4b28      	ldr	r3, [pc, #160]	; (800bbc0 <LSM6DSL_0_Probe+0x160>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a26      	ldr	r2, [pc, #152]	; (800bbbc <LSM6DSL_0_Probe+0x15c>)
 800bb24:	6812      	ldr	r2, [r2, #0]
 800bb26:	4610      	mov	r0, r2
 800bb28:	4798      	blx	r3
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb30:	f06f 0304 	mvn.w	r3, #4
 800bb34:	647b      	str	r3, [r7, #68]	; 0x44
 800bb36:	e001      	b.n	800bb3c <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bb3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d11d      	bne.n	800bb7e <LSM6DSL_0_Probe+0x11e>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f003 0302 	and.w	r3, r3, #2
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d018      	beq.n	800bb7e <LSM6DSL_0_Probe+0x11e>
 800bb4c:	7a3b      	ldrb	r3, [r7, #8]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d115      	bne.n	800bb7e <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_ACC_Driver;
 800bb52:	4b1d      	ldr	r3, [pc, #116]	; (800bbc8 <LSM6DSL_0_Probe+0x168>)
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	4a1d      	ldr	r2, [pc, #116]	; (800bbcc <LSM6DSL_0_Probe+0x16c>)
 800bb58:	491e      	ldr	r1, [pc, #120]	; (800bbd4 <LSM6DSL_0_Probe+0x174>)
 800bb5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSL_0]->Init(MotionCompObj[CUSTOM_LSM6DSL_0]) != LSM6DSL_OK)
 800bb5e:	4b18      	ldr	r3, [pc, #96]	; (800bbc0 <LSM6DSL_0_Probe+0x160>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a15      	ldr	r2, [pc, #84]	; (800bbbc <LSM6DSL_0_Probe+0x15c>)
 800bb66:	6812      	ldr	r2, [r2, #0]
 800bb68:	4610      	mov	r0, r2
 800bb6a:	4798      	blx	r3
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb72:	f06f 0304 	mvn.w	r3, #4
 800bb76:	647b      	str	r3, [r7, #68]	; 0x44
 800bb78:	e001      	b.n	800bb7e <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bb7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d107      	bne.n	800bb94 <LSM6DSL_0_Probe+0x134>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f003 0304 	and.w	r3, r3, #4
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb8e:	f06f 0304 	mvn.w	r3, #4
 800bb92:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800bb94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3748      	adds	r7, #72	; 0x48
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	080026e1 	.word	0x080026e1
 800bba4:	0800275d 	.word	0x0800275d
 800bba8:	08002811 	.word	0x08002811
 800bbac:	080027ad 	.word	0x080027ad
 800bbb0:	08002875 	.word	0x08002875
 800bbb4:	20000364 	.word	0x20000364
 800bbb8:	20000360 	.word	0x20000360
 800bbbc:	2000454c 	.word	0x2000454c
 800bbc0:	2000035c 	.word	0x2000035c
 800bbc4:	20000014 	.word	0x20000014
 800bbc8:	2000007c 	.word	0x2000007c
 800bbcc:	20000350 	.word	0x20000350
 800bbd0:	20000048 	.word	0x20000048
 800bbd4:	20000024 	.word	0x20000024

0800bbd8 <CUSTOM_MOTION_SENSOR_Read_Register>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written to
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d112      	bne.n	800bc12 <CUSTOM_MOTION_SENSOR_Read_Register+0x3a>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800bbec:	4a0d      	ldr	r2, [pc, #52]	; (800bc24 <CUSTOM_MOTION_SENSOR_Read_Register+0x4c>)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbf4:	7af9      	ldrb	r1, [r7, #11]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7f7 fc78 	bl	80034ee <LSM6DSL_Read_Reg>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d003      	beq.n	800bc0c <CUSTOM_MOTION_SENSOR_Read_Register+0x34>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc04:	f06f 0304 	mvn.w	r3, #4
 800bc08:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bc0a:	e006      	b.n	800bc1a <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
        ret = BSP_ERROR_NONE;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	617b      	str	r3, [r7, #20]
      break;
 800bc10:	e003      	b.n	800bc1a <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bc12:	f06f 0301 	mvn.w	r3, #1
 800bc16:	617b      	str	r3, [r7, #20]
      break;
 800bc18:	bf00      	nop
  }

  return ret;
 800bc1a:	697b      	ldr	r3, [r7, #20]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	2000454c 	.word	0x2000454c

0800bc28 <CUSTOM_MOTION_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	460b      	mov	r3, r1
 800bc32:	70fb      	strb	r3, [r7, #3]
 800bc34:	4613      	mov	r3, r2
 800bc36:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d112      	bne.n	800bc64 <CUSTOM_MOTION_SENSOR_Write_Register+0x3c>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800bc3e:	4a0e      	ldr	r2, [pc, #56]	; (800bc78 <CUSTOM_MOTION_SENSOR_Write_Register+0x50>)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc46:	78ba      	ldrb	r2, [r7, #2]
 800bc48:	78f9      	ldrb	r1, [r7, #3]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7f7 fc69 	bl	8003522 <LSM6DSL_Write_Reg>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d003      	beq.n	800bc5e <CUSTOM_MOTION_SENSOR_Write_Register+0x36>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc56:	f06f 0304 	mvn.w	r3, #4
 800bc5a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bc5c:	e006      	b.n	800bc6c <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
        ret = BSP_ERROR_NONE;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
      break;
 800bc62:	e003      	b.n	800bc6c <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bc64:	f06f 0301 	mvn.w	r3, #1
 800bc68:	60fb      	str	r3, [r7, #12]
      break;
 800bc6a:	bf00      	nop
  }

  return ret;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	2000454c 	.word	0x2000454c

0800bc7c <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples>:
 * @param  Instance the device instance
 * @param  NumSamples number of unread FIFO samples
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples(uint32_t Instance, uint16_t *NumSamples)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d111      	bne.n	800bcb0 <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x34>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Get_Num_Samples(MotionCompObj[Instance], NumSamples) != BSP_ERROR_NONE)
 800bc8c:	4a0d      	ldr	r2, [pc, #52]	; (800bcc4 <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x48>)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7f7 fcb6 	bl	8003608 <LSM6DSL_FIFO_Get_Num_Samples>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bca2:	f06f 0304 	mvn.w	r3, #4
 800bca6:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bca8:	e006      	b.n	800bcb8 <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
        ret = BSP_ERROR_NONE;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60fb      	str	r3, [r7, #12]
      break;
 800bcae:	e003      	b.n	800bcb8 <CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bcb0:	f06f 0301 	mvn.w	r3, #1
 800bcb4:	60fb      	str	r3, [r7, #12]
      break;
 800bcb6:	bf00      	nop
  }

  return ret;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	2000454c 	.word	0x2000454c

0800bcc8 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation>:
 * @param  Function Motion sensor function
 * @param  Decimation FIFO decimation
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation(uint32_t Instance, uint32_t Function, uint8_t Decimation)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  switch (Instance)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d133      	bne.n	800bd44 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x7c>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	f003 0302 	and.w	r3, r3, #2
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d012      	beq.n	800bd0c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x44>
      {
        if (LSM6DSL_FIFO_ACC_Set_Decimation(MotionCompObj[Instance], Decimation) != BSP_ERROR_NONE)
 800bce6:	4a1c      	ldr	r2, [pc, #112]	; (800bd58 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x90>)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcee:	79fa      	ldrb	r2, [r7, #7]
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7f7 fdf2 	bl	80038dc <LSM6DSL_FIFO_ACC_Set_Decimation>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d003      	beq.n	800bd06 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x3e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcfe:	f06f 0304 	mvn.w	r3, #4
 800bd02:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 800bd04:	e022      	b.n	800bd4c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
          ret = BSP_ERROR_NONE;
 800bd06:	2300      	movs	r3, #0
 800bd08:	617b      	str	r3, [r7, #20]
      break;
 800bd0a:	e01f      	b.n	800bd4c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d012      	beq.n	800bd3c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x74>
        if (LSM6DSL_FIFO_GYRO_Set_Decimation(MotionCompObj[Instance], Decimation) != BSP_ERROR_NONE)
 800bd16:	4a10      	ldr	r2, [pc, #64]	; (800bd58 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x90>)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd1e:	79fa      	ldrb	r2, [r7, #7]
 800bd20:	4611      	mov	r1, r2
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7f7 fe42 	bl	80039ac <LSM6DSL_FIFO_GYRO_Set_Decimation>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d003      	beq.n	800bd36 <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x6e>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd2e:	f06f 0304 	mvn.w	r3, #4
 800bd32:	617b      	str	r3, [r7, #20]
      break;
 800bd34:	e00a      	b.n	800bd4c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
          ret = BSP_ERROR_NONE;
 800bd36:	2300      	movs	r3, #0
 800bd38:	617b      	str	r3, [r7, #20]
      break;
 800bd3a:	e007      	b.n	800bd4c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
        ret = BSP_ERROR_WRONG_PARAM;
 800bd3c:	f06f 0301 	mvn.w	r3, #1
 800bd40:	617b      	str	r3, [r7, #20]
      break;
 800bd42:	e003      	b.n	800bd4c <CUSTOM_MOTION_SENSOR_FIFO_Set_Decimation+0x84>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bd44:	f06f 0301 	mvn.w	r3, #1
 800bd48:	617b      	str	r3, [r7, #20]
      break;
 800bd4a:	bf00      	nop
  }

  return ret;
 800bd4c:	697b      	ldr	r3, [r7, #20]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	2000454c 	.word	0x2000454c

0800bd5c <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value>:
 * @param  Instance the device instance
 * @param  Odr FIFO ODR value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value(uint32_t Instance, float Odr)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  switch (Instance)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d112      	bne.n	800bd94 <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_ODR_Value(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800bd6e:	4a0e      	ldr	r2, [pc, #56]	; (800bda8 <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x4c>)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd76:	ed97 0a00 	vldr	s0, [r7]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7f7 fc5a 	bl	8003634 <LSM6DSL_FIFO_Set_ODR_Value>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d003      	beq.n	800bd8e <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd86:	f06f 0304 	mvn.w	r3, #4
 800bd8a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bd8c:	e006      	b.n	800bd9c <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x40>
        ret = BSP_ERROR_NONE;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
      break;
 800bd92:	e003      	b.n	800bd9c <CUSTOM_MOTION_SENSOR_FIFO_Set_ODR_Value+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bd94:	f06f 0301 	mvn.w	r3, #1
 800bd98:	60fb      	str	r3, [r7, #12]
      break;
 800bd9a:	bf00      	nop
  }

  return ret;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	2000454c 	.word	0x2000454c

0800bdac <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d112      	bne.n	800bde4 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_INT1_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800bdbe:	4a0e      	ldr	r2, [pc, #56]	; (800bdf8 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x4c>)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc6:	78fa      	ldrb	r2, [r7, #3]
 800bdc8:	4611      	mov	r1, r2
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7f7 fcbe 	bl	800374c <LSM6DSL_FIFO_Set_INT1_FIFO_Full>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d003      	beq.n	800bdde <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bdd6:	f06f 0304 	mvn.w	r3, #4
 800bdda:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bddc:	e006      	b.n	800bdec <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
        ret = BSP_ERROR_NONE;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60fb      	str	r3, [r7, #12]
      break;
 800bde2:	e003      	b.n	800bdec <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bde4:	f06f 0301 	mvn.w	r3, #1
 800bde8:	60fb      	str	r3, [r7, #12]
      break;
 800bdea:	bf00      	nop
  }

  return ret;
 800bdec:	68fb      	ldr	r3, [r7, #12]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	2000454c 	.word	0x2000454c

0800bdfc <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY>:
 * @param  Instance the device instance
 * @param  Status DRDY interrupt on INT1 pin
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Set_INT1_DRDY(uint32_t Instance, uint8_t Status)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d112      	bne.n	800be34 <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x38>
  {

    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_ACC_Set_INT1_DRDY(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800be0e:	4a0e      	ldr	r2, [pc, #56]	; (800be48 <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x4c>)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be16:	78fa      	ldrb	r2, [r7, #3]
 800be18:	4611      	mov	r1, r2
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7f7 fb9c 	bl	8003558 <LSM6DSL_ACC_Set_INT1_DRDY>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be26:	f06f 0304 	mvn.w	r3, #4
 800be2a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800be2c:	e006      	b.n	800be3c <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x40>
        ret = BSP_ERROR_NONE;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
      break;
 800be32:	e003      	b.n	800be3c <CUSTOM_MOTION_SENSOR_Set_INT1_DRDY+0x40>




    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800be34:	f06f 0301 	mvn.w	r3, #1
 800be38:	60fb      	str	r3, [r7, #12]
      break;
 800be3a:	bf00      	nop
  }

  return ret;
 800be3c:	68fb      	ldr	r3, [r7, #12]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	2000454c 	.word	0x2000454c

0800be4c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 * @param  Instance the device instance
 * @param  Watermark FIFO watermark level
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	807b      	strh	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d112      	bne.n	800be84 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 800be5e:	4a0e      	ldr	r2, [pc, #56]	; (800be98 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x4c>)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be66:	887a      	ldrh	r2, [r7, #2]
 800be68:	4611      	mov	r1, r2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7f7 fc9f 	bl	80037ae <LSM6DSL_FIFO_Set_Watermark_Level>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be76:	f06f 0304 	mvn.w	r3, #4
 800be7a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800be7c:	e006      	b.n	800be8c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
        ret = BSP_ERROR_NONE;
 800be7e:	2300      	movs	r3, #0
 800be80:	60fb      	str	r3, [r7, #12]
      break;
 800be82:	e003      	b.n	800be8c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800be84:	f06f 0301 	mvn.w	r3, #1
 800be88:	60fb      	str	r3, [r7, #12]
      break;
 800be8a:	bf00      	nop
  }

  return ret;
 800be8c:	68fb      	ldr	r3, [r7, #12]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	2000454c 	.word	0x2000454c

0800be9c <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 * @param  Instance the device instance
 * @param  Status FIFO stop on watermark status
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	460b      	mov	r3, r1
 800bea6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d112      	bne.n	800bed4 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800beae:	4a0e      	ldr	r2, [pc, #56]	; (800bee8 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x4c>)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beb6:	78fa      	ldrb	r2, [r7, #3]
 800beb8:	4611      	mov	r1, r2
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f7 fc8f 	bl	80037de <LSM6DSL_FIFO_Set_Stop_On_Fth>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bec6:	f06f 0304 	mvn.w	r3, #4
 800beca:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800becc:	e006      	b.n	800bedc <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
        ret = BSP_ERROR_NONE;
 800bece:	2300      	movs	r3, #0
 800bed0:	60fb      	str	r3, [r7, #12]
      break;
 800bed2:	e003      	b.n	800bedc <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bed4:	f06f 0301 	mvn.w	r3, #1
 800bed8:	60fb      	str	r3, [r7, #12]
      break;
 800beda:	bf00      	nop
  }

  return ret;
 800bedc:	68fb      	ldr	r3, [r7, #12]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	2000454c 	.word	0x2000454c

0800beec <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d112      	bne.n	800bf24 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x38>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 800befe:	4a0e      	ldr	r2, [pc, #56]	; (800bf38 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x4c>)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf06:	78fa      	ldrb	r2, [r7, #3]
 800bf08:	4611      	mov	r1, r2
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7f7 fc7f 	bl	800380e <LSM6DSL_FIFO_Set_Mode>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf16:	f06f 0304 	mvn.w	r3, #4
 800bf1a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bf1c:	e006      	b.n	800bf2c <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
        ret = BSP_ERROR_NONE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
      break;
 800bf22:	e003      	b.n	800bf2c <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bf24:	f06f 0301 	mvn.w	r3, #1
 800bf28:	60fb      	str	r3, [r7, #12]
      break;
 800bf2a:	bf00      	nop
  }

  return ret;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	2000454c 	.word	0x2000454c

0800bf3c <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern>:
 * @param  Instance the device instance
 * @param  Pattern FIFO pattern
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern(uint32_t Instance, uint16_t *Pattern)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d111      	bne.n	800bf70 <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x34>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_FIFO_Get_Pattern(MotionCompObj[Instance], Pattern) != BSP_ERROR_NONE)
 800bf4c:	4a0d      	ldr	r2, [pc, #52]	; (800bf84 <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x48>)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7f7 fc92 	bl	8003880 <LSM6DSL_FIFO_Get_Pattern>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d003      	beq.n	800bf6a <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf62:	f06f 0304 	mvn.w	r3, #4
 800bf66:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800bf68:	e006      	b.n	800bf78 <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x3c>
        ret = BSP_ERROR_NONE;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60fb      	str	r3, [r7, #12]
      break;
 800bf6e:	e003      	b.n	800bf78 <CUSTOM_MOTION_SENSOR_FIFO_Get_Pattern+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bf70:	f06f 0301 	mvn.w	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]
      break;
 800bf76:	bf00      	nop
  }

  return ret;
 800bf78:	68fb      	ldr	r3, [r7, #12]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	2000454c 	.word	0x2000454c

0800bf88 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis>:
 * @param  Function Motion sensor function
 * @param  Data FIFO single axis data
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Get_Axis(uint32_t Instance, uint32_t Function, int32_t *Data)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b086      	sub	sp, #24
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch (Instance)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d131      	bne.n	800bffe <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x76>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSL_0 == 1)
    case CUSTOM_LSM6DSL_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d011      	beq.n	800bfc8 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x40>
      {
        if (LSM6DSL_FIFO_ACC_Get_Axis(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 800bfa4:	4a1a      	ldr	r2, [pc, #104]	; (800c010 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x88>)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7f7 fcbc 	bl	800392c <LSM6DSL_FIFO_ACC_Get_Axis>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d003      	beq.n	800bfc2 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x3a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bfba:	f06f 0304 	mvn.w	r3, #4
 800bfbe:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 800bfc0:	e021      	b.n	800c006 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
          ret = BSP_ERROR_NONE;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	617b      	str	r3, [r7, #20]
      break;
 800bfc6:	e01e      	b.n	800c006 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d011      	beq.n	800bff6 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x6e>
        if (LSM6DSL_FIFO_GYRO_Get_Axis(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 800bfd2:	4a0f      	ldr	r2, [pc, #60]	; (800c010 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x88>)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfda:	6879      	ldr	r1, [r7, #4]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7f7 fd0d 	bl	80039fc <LSM6DSL_FIFO_GYRO_Get_Axis>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d003      	beq.n	800bff0 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x68>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800bfe8:	f06f 0304 	mvn.w	r3, #4
 800bfec:	617b      	str	r3, [r7, #20]
      break;
 800bfee:	e00a      	b.n	800c006 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
          ret = BSP_ERROR_NONE;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]
      break;
 800bff4:	e007      	b.n	800c006 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
        ret = BSP_ERROR_WRONG_PARAM;
 800bff6:	f06f 0301 	mvn.w	r3, #1
 800bffa:	617b      	str	r3, [r7, #20]
      break;
 800bffc:	e003      	b.n	800c006 <CUSTOM_MOTION_SENSOR_FIFO_Get_Axis+0x7e>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800bffe:	f06f 0301 	mvn.w	r3, #1
 800c002:	617b      	str	r3, [r7, #20]
      break;
 800c004:	bf00      	nop
  }

  return ret;
 800c006:	697b      	ldr	r3, [r7, #20]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	2000454c 	.word	0x2000454c

0800c014 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode>:
 * @param  Instance the device instance
 * @param  Status of DRDY mode
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_DRDY_Set_Mode(uint32_t Instance, uint8_t Status)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  switch (Instance)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d112      	bne.n	800c04c <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x38>
  {
    case CUSTOM_LSM6DSL_0:
      if (LSM6DSL_Set_DRDY_Mode(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800c026:	4a0e      	ldr	r2, [pc, #56]	; (800c060 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x4c>)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c02e:	78fa      	ldrb	r2, [r7, #3]
 800c030:	4611      	mov	r1, r2
 800c032:	4618      	mov	r0, r3
 800c034:	f7f7 fac4 	bl	80035c0 <LSM6DSL_Set_DRDY_Mode>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d003      	beq.n	800c046 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c03e:	f06f 0304 	mvn.w	r3, #4
 800c042:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800c044:	e006      	b.n	800c054 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x40>
        ret = BSP_ERROR_NONE;
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
      break;
 800c04a:	e003      	b.n	800c054 <CUSTOM_MOTION_SENSOR_DRDY_Set_Mode+0x40>



    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800c04c:	f06f 0301 	mvn.w	r3, #1
 800c050:	60fb      	str	r3, [r7, #12]
      break;
 800c052:	bf00      	nop
  }

  return ret;
 800c054:	68fb      	ldr	r3, [r7, #12]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	2000454c 	.word	0x2000454c

0800c064 <arm_sqrt_f32>:
  {
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c06e:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 800c070:	edd7 7a01 	vldr	s15, [r7, #4]
 800c074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c07c:	db0a      	blt.n	800c094 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 800c07e:	ed97 0a01 	vldr	s0, [r7, #4]
 800c082:	f003 ff5f 	bl	800ff44 <sqrtf>
 800c086:	eef0 7a40 	vmov.f32	s15, s0
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800c090:	2300      	movs	r3, #0
 800c092:	e005      	b.n	800c0a0 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	f04f 0200 	mov.w	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800c09c:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <MotionSP_speedDelOffset>:
  *  @param  Smooth constant
  *  @param  Restart flag to reInit internal value
  *  @return none
  */
void MotionSP_speedDelOffset(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Smooth, uint8_t Restart)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	70fb      	strb	r3, [r7, #3]
  static SensorVal_f_t DstArrPre;
  static SensorVal_f_t SrcArrPre;

  if (Restart == 1)
 800c0ba:	78fb      	ldrb	r3, [r7, #3]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d124      	bne.n	800c10a <MotionSP_speedDelOffset+0x62>
  {
    pDstArr->AXIS_X = 0.0;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f04f 0200 	mov.w	r2, #0
 800c0c6:	601a      	str	r2, [r3, #0]
    pDstArr->AXIS_Y = 0.0;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f04f 0200 	mov.w	r2, #0
 800c0ce:	605a      	str	r2, [r3, #4]
    pDstArr->AXIS_Z = 0.0;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f04f 0200 	mov.w	r2, #0
 800c0d6:	609a      	str	r2, [r3, #8]
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a3e      	ldr	r2, [pc, #248]	; (800c1d8 <MotionSP_speedDelOffset+0x130>)
 800c0de:	6013      	str	r3, [r2, #0]
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	4a3c      	ldr	r2, [pc, #240]	; (800c1d8 <MotionSP_speedDelOffset+0x130>)
 800c0e6:	6053      	str	r3, [r2, #4]
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	4a3a      	ldr	r2, [pc, #232]	; (800c1d8 <MotionSP_speedDelOffset+0x130>)
 800c0ee:	6093      	str	r3, [r2, #8]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a39      	ldr	r2, [pc, #228]	; (800c1dc <MotionSP_speedDelOffset+0x134>)
 800c0f6:	6013      	str	r3, [r2, #0]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	4a37      	ldr	r2, [pc, #220]	; (800c1dc <MotionSP_speedDelOffset+0x134>)
 800c0fe:	6053      	str	r3, [r2, #4]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	4a35      	ldr	r2, [pc, #212]	; (800c1dc <MotionSP_speedDelOffset+0x134>)
 800c106:	6093      	str	r3, [r2, #8]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
  }
}
 800c108:	e05f      	b.n	800c1ca <MotionSP_speedDelOffset+0x122>
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 800c10a:	4b33      	ldr	r3, [pc, #204]	; (800c1d8 <MotionSP_speedDelOffset+0x130>)
 800c10c:	ed93 7a00 	vldr	s14, [r3]
 800c110:	edd7 7a01 	vldr	s15, [r7, #4]
 800c114:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	edd3 6a00 	vldr	s13, [r3]
 800c11e:	4b2f      	ldr	r3, [pc, #188]	; (800c1dc <MotionSP_speedDelOffset+0x134>)
 800c120:	edd3 7a00 	vldr	s15, [r3]
 800c124:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c128:	edd7 7a01 	vldr	s15, [r7, #4]
 800c12c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c130:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	edc3 7a00 	vstr	s15, [r3]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800c13a:	4b27      	ldr	r3, [pc, #156]	; (800c1d8 <MotionSP_speedDelOffset+0x130>)
 800c13c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c140:	edd7 7a01 	vldr	s15, [r7, #4]
 800c144:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	edd3 6a01 	vldr	s13, [r3, #4]
 800c14e:	4b23      	ldr	r3, [pc, #140]	; (800c1dc <MotionSP_speedDelOffset+0x134>)
 800c150:	edd3 7a01 	vldr	s15, [r3, #4]
 800c154:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c158:	edd7 7a01 	vldr	s15, [r7, #4]
 800c15c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c160:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	edc3 7a01 	vstr	s15, [r3, #4]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 800c16a:	4b1b      	ldr	r3, [pc, #108]	; (800c1d8 <MotionSP_speedDelOffset+0x130>)
 800c16c:	ed93 7a02 	vldr	s14, [r3, #8]
 800c170:	edd7 7a01 	vldr	s15, [r7, #4]
 800c174:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	edd3 6a02 	vldr	s13, [r3, #8]
 800c17e:	4b17      	ldr	r3, [pc, #92]	; (800c1dc <MotionSP_speedDelOffset+0x134>)
 800c180:	edd3 7a02 	vldr	s15, [r3, #8]
 800c184:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c188:	edd7 7a01 	vldr	s15, [r7, #4]
 800c18c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c190:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	edc3 7a02 	vstr	s15, [r3, #8]
    DstArrPre.AXIS_X = pDstArr->AXIS_X;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a0e      	ldr	r2, [pc, #56]	; (800c1d8 <MotionSP_speedDelOffset+0x130>)
 800c1a0:	6013      	str	r3, [r2, #0]
    DstArrPre.AXIS_Y = pDstArr->AXIS_Y;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	4a0c      	ldr	r2, [pc, #48]	; (800c1d8 <MotionSP_speedDelOffset+0x130>)
 800c1a8:	6053      	str	r3, [r2, #4]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	4a0a      	ldr	r2, [pc, #40]	; (800c1d8 <MotionSP_speedDelOffset+0x130>)
 800c1b0:	6093      	str	r3, [r2, #8]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a09      	ldr	r2, [pc, #36]	; (800c1dc <MotionSP_speedDelOffset+0x134>)
 800c1b8:	6013      	str	r3, [r2, #0]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	4a07      	ldr	r2, [pc, #28]	; (800c1dc <MotionSP_speedDelOffset+0x134>)
 800c1c0:	6053      	str	r3, [r2, #4]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	4a05      	ldr	r2, [pc, #20]	; (800c1dc <MotionSP_speedDelOffset+0x134>)
 800c1c8:	6093      	str	r3, [r2, #8]
}
 800c1ca:	bf00      	nop
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	20000398 	.word	0x20000398
 800c1dc:	200003a4 	.word	0x200003a4

0800c1e0 <MotionSP_evalSpeedFromAccelero>:
  *  @return none
  */
void MotionSP_evalSpeedFromAccelero(SensorVal_f_t *pDstArr,
                                           sCircBuffer_t *pSrcArr,
                                           uint8_t Restart)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	71fb      	strb	r3, [r7, #7]
  uint16_t IndexCurr, IndexPre;
  float DeltaT;
  static SensorVal_f_t DstArrPre;

  DeltaT = AcceleroODR.Period;
 800c1ee:	4b57      	ldr	r3, [pc, #348]	; (800c34c <MotionSP_evalSpeedFromAccelero+0x16c>)
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	61bb      	str	r3, [r7, #24]
  IndexCurr = pSrcArr->IdPos;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	885b      	ldrh	r3, [r3, #2]
 800c1f8:	82fb      	strh	r3, [r7, #22]
  IndexPre  = IndexCurr-1;
 800c1fa:	8afb      	ldrh	r3, [r7, #22]
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	83fb      	strh	r3, [r7, #30]

  if (IndexCurr == 0)
 800c200:	8afb      	ldrh	r3, [r7, #22]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d103      	bne.n	800c20e <MotionSP_evalSpeedFromAccelero+0x2e>
    IndexPre  = pSrcArr->Size-1;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	83fb      	strh	r3, [r7, #30]

  if (Restart == 1)
 800c20e:	79fb      	ldrb	r3, [r7, #7]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d10a      	bne.n	800c22a <MotionSP_evalSpeedFromAccelero+0x4a>
  {
    memset((void *)pDstArr, 0, sizeof(SensorVal_f_t));
 800c214:	220c      	movs	r2, #12
 800c216:	2100      	movs	r1, #0
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f001 faa6 	bl	800d76a <memset>
    memset((void *)&DstArrPre, 0, sizeof(SensorVal_f_t));
 800c21e:	220c      	movs	r2, #12
 800c220:	2100      	movs	r1, #0
 800c222:	484b      	ldr	r0, [pc, #300]	; (800c350 <MotionSP_evalSpeedFromAccelero+0x170>)
 800c224:	f001 faa1 	bl	800d76a <memset>
                      (((1-GAMMA)*DeltaT)*(pSrcArr->Data.AXIS_Z[IndexPre]))+
                      (GAMMA*DeltaT*(pSrcArr->Data.AXIS_Z[IndexCurr]))*1000;

    memcpy((void *)&DstArrPre, (void *)pDstArr, sizeof(SensorVal_f_t));
  }
}
 800c228:	e08c      	b.n	800c344 <MotionSP_evalSpeedFromAccelero+0x164>
    pDstArr->AXIS_X = DstArrPre.AXIS_X +
 800c22a:	4b49      	ldr	r3, [pc, #292]	; (800c350 <MotionSP_evalSpeedFromAccelero+0x170>)
 800c22c:	ed93 7a00 	vldr	s14, [r3]
                      (((1-GAMMA)*DeltaT)*(pSrcArr->Data.AXIS_X[IndexPre]))+
 800c230:	edd7 7a06 	vldr	s15, [r7, #24]
 800c234:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c238:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c23c:	8bfb      	ldrh	r3, [r7, #30]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	3302      	adds	r3, #2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	edd3 7a00 	vldr	s15, [r3]
 800c24a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pDstArr->AXIS_X = DstArrPre.AXIS_X +
 800c24e:	ee37 7a27 	vadd.f32	s14, s14, s15
                      (GAMMA*DeltaT*(pSrcArr->Data.AXIS_X[IndexCurr]))*1000;
 800c252:	edd7 7a06 	vldr	s15, [r7, #24]
 800c256:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c25a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c25e:	8afb      	ldrh	r3, [r7, #22]
 800c260:	68ba      	ldr	r2, [r7, #8]
 800c262:	3302      	adds	r3, #2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	edd3 7a00 	vldr	s15, [r3]
 800c26c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c270:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c354 <MotionSP_evalSpeedFromAccelero+0x174>
 800c274:	ee67 7aa6 	vmul.f32	s15, s15, s13
                      (((1-GAMMA)*DeltaT)*(pSrcArr->Data.AXIS_X[IndexPre]))+
 800c278:	ee77 7a27 	vadd.f32	s15, s14, s15
    pDstArr->AXIS_X = DstArrPre.AXIS_X +
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	edc3 7a00 	vstr	s15, [r3]
    pDstArr->AXIS_Y = DstArrPre.AXIS_Y +
 800c282:	4b33      	ldr	r3, [pc, #204]	; (800c350 <MotionSP_evalSpeedFromAccelero+0x170>)
 800c284:	ed93 7a01 	vldr	s14, [r3, #4]
                      (((1-GAMMA)*DeltaT)*(pSrcArr->Data.AXIS_Y[IndexPre]))+
 800c288:	edd7 7a06 	vldr	s15, [r7, #24]
 800c28c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c290:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c294:	8bfb      	ldrh	r3, [r7, #30]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	edd3 7a00 	vldr	s15, [r3]
 800c2a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pDstArr->AXIS_Y = DstArrPre.AXIS_Y +
 800c2a8:	ee37 7a27 	vadd.f32	s14, s14, s15
                      (GAMMA*DeltaT*(pSrcArr->Data.AXIS_Y[IndexCurr]))*1000;
 800c2ac:	edd7 7a06 	vldr	s15, [r7, #24]
 800c2b0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c2b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c2b8:	8afb      	ldrh	r3, [r7, #22]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	edd3 7a00 	vldr	s15, [r3]
 800c2c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2cc:	eddf 6a21 	vldr	s13, [pc, #132]	; 800c354 <MotionSP_evalSpeedFromAccelero+0x174>
 800c2d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
                      (((1-GAMMA)*DeltaT)*(pSrcArr->Data.AXIS_Y[IndexPre]))+
 800c2d4:	ee77 7a27 	vadd.f32	s15, s14, s15
    pDstArr->AXIS_Y = DstArrPre.AXIS_Y +
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	edc3 7a01 	vstr	s15, [r3, #4]
    pDstArr->AXIS_Z = DstArrPre.AXIS_Z +
 800c2de:	4b1c      	ldr	r3, [pc, #112]	; (800c350 <MotionSP_evalSpeedFromAccelero+0x170>)
 800c2e0:	ed93 7a02 	vldr	s14, [r3, #8]
                      (((1-GAMMA)*DeltaT)*(pSrcArr->Data.AXIS_Z[IndexPre]))+
 800c2e4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c2e8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c2ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c2f0:	8bfb      	ldrh	r3, [r7, #30]
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	edd3 7a00 	vldr	s15, [r3]
 800c300:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pDstArr->AXIS_Z = DstArrPre.AXIS_Z +
 800c304:	ee37 7a27 	vadd.f32	s14, s14, s15
                      (GAMMA*DeltaT*(pSrcArr->Data.AXIS_Z[IndexCurr]))*1000;
 800c308:	edd7 7a06 	vldr	s15, [r7, #24]
 800c30c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c310:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c314:	8afb      	ldrh	r3, [r7, #22]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	4413      	add	r3, r2
 800c320:	edd3 7a00 	vldr	s15, [r3]
 800c324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c328:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800c354 <MotionSP_evalSpeedFromAccelero+0x174>
 800c32c:	ee67 7aa6 	vmul.f32	s15, s15, s13
                      (((1-GAMMA)*DeltaT)*(pSrcArr->Data.AXIS_Z[IndexPre]))+
 800c330:	ee77 7a27 	vadd.f32	s15, s14, s15
    pDstArr->AXIS_Z = DstArrPre.AXIS_Z +
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	edc3 7a02 	vstr	s15, [r3, #8]
    memcpy((void *)&DstArrPre, (void *)pDstArr, sizeof(SensorVal_f_t));
 800c33a:	220c      	movs	r2, #12
 800c33c:	68f9      	ldr	r1, [r7, #12]
 800c33e:	4804      	ldr	r0, [pc, #16]	; (800c350 <MotionSP_evalSpeedFromAccelero+0x170>)
 800c340:	f001 fa05 	bl	800d74e <memcpy>
}
 800c344:	bf00      	nop
 800c346:	3720      	adds	r7, #32
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	20008a94 	.word	0x20008a94
 800c350:	200003b0 	.word	0x200003b0
 800c354:	447a0000 	.word	0x447a0000

0800c358 <MotionSP_SwSpeedRmsFilter>:
  *
  * @details More details
  * Reference by MATLAB DSP Toolbox modified with Y(n-1)^2
  */
static void MotionSP_SwSpeedRmsFilter(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Lambda, uint8_t start)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b08a      	sub	sp, #40	; 0x28
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	ed87 0a01 	vstr	s0, [r7, #4]
 800c366:	4613      	mov	r3, r2
 800c368:	70fb      	strb	r3, [r7, #3]
  SensorVal_f_t SquareData = {0, 0, 0};
 800c36a:	f04f 0300 	mov.w	r3, #0
 800c36e:	61fb      	str	r3, [r7, #28]
 800c370:	f04f 0300 	mov.w	r3, #0
 800c374:	623b      	str	r3, [r7, #32]
 800c376:	f04f 0300 	mov.w	r3, #0
 800c37a:	627b      	str	r3, [r7, #36]	; 0x24
  SensorVal_f_t PrevSquareData  = {0, 0, 0};
 800c37c:	f04f 0300 	mov.w	r3, #0
 800c380:	613b      	str	r3, [r7, #16]
 800c382:	f04f 0300 	mov.w	r3, #0
 800c386:	617b      	str	r3, [r7, #20]
 800c388:	f04f 0300 	mov.w	r3, #0
 800c38c:	61bb      	str	r3, [r7, #24]
  static float WN = 0.0;
  static float WN_1 = 0.0;

  if (start == 1)
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d110      	bne.n	800c3b6 <MotionSP_SwSpeedRmsFilter+0x5e>
  {
    pDstArr->AXIS_X = pSrcArr->AXIS_X;
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	601a      	str	r2, [r3, #0]
    pDstArr->AXIS_Y = pSrcArr->AXIS_Y;
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	685a      	ldr	r2, [r3, #4]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	605a      	str	r2, [r3, #4]
    pDstArr->AXIS_Z = pSrcArr->AXIS_Z;
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	689a      	ldr	r2, [r3, #8]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	609a      	str	r2, [r3, #8]
    WN = 1;
 800c3ac:	4b5f      	ldr	r3, [pc, #380]	; (800c52c <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c3ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c3b2:	601a      	str	r2, [r3, #0]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);

    WN_1 =  WN;
    WN =  Lambda * WN_1 + 1;
  }
}
 800c3b4:	e0b5      	b.n	800c522 <MotionSP_SwSpeedRmsFilter+0x1ca>
    SquareData.AXIS_X = pSrcArr->AXIS_X * pSrcArr->AXIS_X;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	ed93 7a00 	vldr	s14, [r3]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	edd3 7a00 	vldr	s15, [r3]
 800c3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c6:	edc7 7a07 	vstr	s15, [r7, #28]
    SquareData.AXIS_Y = pSrcArr->AXIS_Y * pSrcArr->AXIS_Y;
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	ed93 7a01 	vldr	s14, [r3, #4]
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	edd3 7a01 	vldr	s15, [r3, #4]
 800c3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3da:	edc7 7a08 	vstr	s15, [r7, #32]
    SquareData.AXIS_Z = pSrcArr->AXIS_Z * pSrcArr->AXIS_Z;
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	ed93 7a02 	vldr	s14, [r3, #8]
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	edd3 7a02 	vldr	s15, [r3, #8]
 800c3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	ed93 7a00 	vldr	s14, [r3]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	edd3 7a00 	vldr	s15, [r3]
 800c3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c402:	edc7 7a04 	vstr	s15, [r7, #16]
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	ed93 7a01 	vldr	s14, [r3, #4]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c416:	edc7 7a05 	vstr	s15, [r7, #20]
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	ed93 7a02 	vldr	s14, [r3, #8]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	edd3 7a02 	vldr	s15, [r3, #8]
 800c426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c42a:	edc7 7a06 	vstr	s15, [r7, #24]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800c42e:	4b3f      	ldr	r3, [pc, #252]	; (800c52c <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c430:	ed93 7a00 	vldr	s14, [r3]
 800c434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c43c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c440:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c444:	edd7 7a04 	vldr	s15, [r7, #16]
 800c448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c44c:	4b37      	ldr	r3, [pc, #220]	; (800c52c <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c44e:	edd3 7a00 	vldr	s15, [r3]
 800c452:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c456:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c45a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c45e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c462:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	4618      	mov	r0, r3
 800c46a:	eeb0 0a67 	vmov.f32	s0, s15
 800c46e:	f7ff fdf9 	bl	800c064 <arm_sqrt_f32>
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Y + (1 / WN) * SquareData.AXIS_Y), &pDstArr->AXIS_Y);
 800c472:	4b2e      	ldr	r3, [pc, #184]	; (800c52c <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c474:	ed93 7a00 	vldr	s14, [r3]
 800c478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c47c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c484:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c488:	edd7 7a05 	vldr	s15, [r7, #20]
 800c48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c490:	4b26      	ldr	r3, [pc, #152]	; (800c52c <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c492:	edd3 7a00 	vldr	s15, [r3]
 800c496:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c49a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c49e:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	eeb0 0a67 	vmov.f32	s0, s15
 800c4b4:	f7ff fdd6 	bl	800c064 <arm_sqrt_f32>
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);
 800c4b8:	4b1c      	ldr	r3, [pc, #112]	; (800c52c <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c4ba:	ed93 7a00 	vldr	s14, [r3]
 800c4be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4ce:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4d6:	4b15      	ldr	r3, [pc, #84]	; (800c52c <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c4d8:	edd3 7a00 	vldr	s15, [r3]
 800c4dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c4e0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c4e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c4e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3308      	adds	r3, #8
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	eeb0 0a67 	vmov.f32	s0, s15
 800c4fa:	f7ff fdb3 	bl	800c064 <arm_sqrt_f32>
    WN_1 =  WN;
 800c4fe:	4b0b      	ldr	r3, [pc, #44]	; (800c52c <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a0b      	ldr	r2, [pc, #44]	; (800c530 <MotionSP_SwSpeedRmsFilter+0x1d8>)
 800c504:	6013      	str	r3, [r2, #0]
    WN =  Lambda * WN_1 + 1;
 800c506:	4b0a      	ldr	r3, [pc, #40]	; (800c530 <MotionSP_SwSpeedRmsFilter+0x1d8>)
 800c508:	ed93 7a00 	vldr	s14, [r3]
 800c50c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c510:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c518:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c51c:	4b03      	ldr	r3, [pc, #12]	; (800c52c <MotionSP_SwSpeedRmsFilter+0x1d4>)
 800c51e:	edc3 7a00 	vstr	s15, [r3]
}
 800c522:	bf00      	nop
 800c524:	3728      	adds	r7, #40	; 0x28
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	200003bc 	.word	0x200003bc
 800c530:	200003c0 	.word	0x200003c0

0800c534 <MotionSP_SwAccRmsFilter>:
  * @param  Lambda fast smoothing factor
  * @param  start flag to Re-Init first value
  * @return none
  */
static void MotionSP_SwAccRmsFilter(SensorVal_f_t *pDstArr, sCircBuffer_t *pSrcArr, float Lambda, uint8_t start)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08c      	sub	sp, #48	; 0x30
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	ed87 0a01 	vstr	s0, [r7, #4]
 800c542:	4613      	mov	r3, r2
 800c544:	70fb      	strb	r3, [r7, #3]
  uint16_t Index = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	85fb      	strh	r3, [r7, #46]	; 0x2e
  SensorVal_f_t SquareData = {0, 0, 0};
 800c54a:	f04f 0300 	mov.w	r3, #0
 800c54e:	623b      	str	r3, [r7, #32]
 800c550:	f04f 0300 	mov.w	r3, #0
 800c554:	627b      	str	r3, [r7, #36]	; 0x24
 800c556:	f04f 0300 	mov.w	r3, #0
 800c55a:	62bb      	str	r3, [r7, #40]	; 0x28
  SensorVal_f_t PrevSquareData  = {0, 0, 0};
 800c55c:	f04f 0300 	mov.w	r3, #0
 800c560:	617b      	str	r3, [r7, #20]
 800c562:	f04f 0300 	mov.w	r3, #0
 800c566:	61bb      	str	r3, [r7, #24]
 800c568:	f04f 0300 	mov.w	r3, #0
 800c56c:	61fb      	str	r3, [r7, #28]
  static float WN = 0.0;
  static float WN_1 = 0.0;

  Index = pSrcArr->IdPos;
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	885b      	ldrh	r3, [r3, #2]
 800c572:	85fb      	strh	r3, [r7, #46]	; 0x2e

  if (start == 1)
 800c574:	78fb      	ldrb	r3, [r7, #3]
 800c576:	2b01      	cmp	r3, #1
 800c578:	d11e      	bne.n	800c5b8 <MotionSP_SwAccRmsFilter+0x84>
  {
    pDstArr->AXIS_X = pSrcArr->Data.AXIS_X[Index];
 800c57a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	3302      	adds	r3, #2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	601a      	str	r2, [r3, #0]
    pDstArr->AXIS_Y = pSrcArr->Data.AXIS_Y[Index];
 800c58a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	605a      	str	r2, [r3, #4]
    pDstArr->AXIS_Z = pSrcArr->Data.AXIS_Z[Index];
 800c59c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	609a      	str	r2, [r3, #8]
    WN = 1;
 800c5ae:	4b6d      	ldr	r3, [pc, #436]	; (800c764 <MotionSP_SwAccRmsFilter+0x230>)
 800c5b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c5b4:	601a      	str	r2, [r3, #0]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);

    WN_1 =  WN;
    WN =  Lambda * WN_1 + 1;
  }
}
 800c5b6:	e0d1      	b.n	800c75c <MotionSP_SwAccRmsFilter+0x228>
    SquareData.AXIS_X = pSrcArr->Data.AXIS_X[Index] * pSrcArr->Data.AXIS_X[Index];
 800c5b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	3302      	adds	r3, #2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	ed93 7a00 	vldr	s14, [r3]
 800c5c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	3302      	adds	r3, #2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	edd3 7a00 	vldr	s15, [r3]
 800c5d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5d8:	edc7 7a08 	vstr	s15, [r7, #32]
    SquareData.AXIS_Y = pSrcArr->Data.AXIS_Y[Index] * pSrcArr->Data.AXIS_Y[Index];;
 800c5dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	4413      	add	r3, r2
 800c5e8:	ed93 7a00 	vldr	s14, [r3]
 800c5ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	edd3 7a00 	vldr	s15, [r3]
 800c5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c600:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    SquareData.AXIS_Z = pSrcArr->Data.AXIS_Z[Index] * pSrcArr->Data.AXIS_Z[Index];;
 800c604:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	ed93 7a00 	vldr	s14, [r3]
 800c614:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4413      	add	r3, r2
 800c620:	edd3 7a00 	vldr	s15, [r3]
 800c624:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c628:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    PrevSquareData.AXIS_X = pDstArr->AXIS_X * pDstArr->AXIS_X;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	ed93 7a00 	vldr	s14, [r3]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	edd3 7a00 	vldr	s15, [r3]
 800c638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c63c:	edc7 7a05 	vstr	s15, [r7, #20]
    PrevSquareData.AXIS_Y = pDstArr->AXIS_Y * pDstArr->AXIS_Y;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	ed93 7a01 	vldr	s14, [r3, #4]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	edd3 7a01 	vldr	s15, [r3, #4]
 800c64c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c650:	edc7 7a06 	vstr	s15, [r7, #24]
    PrevSquareData.AXIS_Z = pDstArr->AXIS_Z * pDstArr->AXIS_Z;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	ed93 7a02 	vldr	s14, [r3, #8]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c660:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c664:	edc7 7a07 	vstr	s15, [r7, #28]
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_X + (1 / WN) * SquareData.AXIS_X), &pDstArr->AXIS_X);
 800c668:	4b3e      	ldr	r3, [pc, #248]	; (800c764 <MotionSP_SwAccRmsFilter+0x230>)
 800c66a:	ed93 7a00 	vldr	s14, [r3]
 800c66e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c67a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c67e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c682:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c686:	4b37      	ldr	r3, [pc, #220]	; (800c764 <MotionSP_SwAccRmsFilter+0x230>)
 800c688:	edd3 7a00 	vldr	s15, [r3]
 800c68c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c690:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c694:	edd7 7a08 	vldr	s15, [r7, #32]
 800c698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c69c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	eeb0 0a67 	vmov.f32	s0, s15
 800c6a8:	f7ff fcdc 	bl	800c064 <arm_sqrt_f32>
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Y + (1 / WN) * SquareData.AXIS_Y), &pDstArr->AXIS_Y);
 800c6ac:	4b2d      	ldr	r3, [pc, #180]	; (800c764 <MotionSP_SwAccRmsFilter+0x230>)
 800c6ae:	ed93 7a00 	vldr	s14, [r3]
 800c6b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6be:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6c2:	edd7 7a06 	vldr	s15, [r7, #24]
 800c6c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6ca:	4b26      	ldr	r3, [pc, #152]	; (800c764 <MotionSP_SwAccRmsFilter+0x230>)
 800c6cc:	edd3 7a00 	vldr	s15, [r3]
 800c6d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c6d4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c6d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c6dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	3304      	adds	r3, #4
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	eeb0 0a67 	vmov.f32	s0, s15
 800c6ee:	f7ff fcb9 	bl	800c064 <arm_sqrt_f32>
    arm_sqrt_f32(((1 - 1 / WN) * PrevSquareData.AXIS_Z + (1 / WN) * SquareData.AXIS_Z), &pDstArr->AXIS_Z);
 800c6f2:	4b1c      	ldr	r3, [pc, #112]	; (800c764 <MotionSP_SwAccRmsFilter+0x230>)
 800c6f4:	ed93 7a00 	vldr	s14, [r3]
 800c6f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c704:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c708:	edd7 7a07 	vldr	s15, [r7, #28]
 800c70c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c710:	4b14      	ldr	r3, [pc, #80]	; (800c764 <MotionSP_SwAccRmsFilter+0x230>)
 800c712:	edd3 7a00 	vldr	s15, [r3]
 800c716:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c71a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800c71e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3308      	adds	r3, #8
 800c72e:	4618      	mov	r0, r3
 800c730:	eeb0 0a67 	vmov.f32	s0, s15
 800c734:	f7ff fc96 	bl	800c064 <arm_sqrt_f32>
    WN_1 =  WN;
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <MotionSP_SwAccRmsFilter+0x230>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a0a      	ldr	r2, [pc, #40]	; (800c768 <MotionSP_SwAccRmsFilter+0x234>)
 800c73e:	6013      	str	r3, [r2, #0]
    WN =  Lambda * WN_1 + 1;
 800c740:	4b09      	ldr	r3, [pc, #36]	; (800c768 <MotionSP_SwAccRmsFilter+0x234>)
 800c742:	ed93 7a00 	vldr	s14, [r3]
 800c746:	edd7 7a01 	vldr	s15, [r7, #4]
 800c74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c752:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c756:	4b03      	ldr	r3, [pc, #12]	; (800c764 <MotionSP_SwAccRmsFilter+0x230>)
 800c758:	edc3 7a00 	vstr	s15, [r3]
}
 800c75c:	bf00      	nop
 800c75e:	3730      	adds	r7, #48	; 0x30
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	200003c4 	.word	0x200003c4
 800c768:	200003c8 	.word	0x200003c8

0800c76c <MotionSP_SwAccPkEval>:
  * @param  pDstArr pointer to AccPeak Output
  * @param  pSrcArr pointer to input accelero circular buffer
  * @return none
  */
static void MotionSP_SwAccPkEval(SensorVal_f_t *pDstArr, sCircBuffer_t *pSrcArr)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  uint16_t Index = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	81fb      	strh	r3, [r7, #14]

  Index = pSrcArr->IdPos;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	885b      	ldrh	r3, [r3, #2]
 800c77e:	81fb      	strh	r3, [r7, #14]

  if (pDstArr->AXIS_X < fabsf(pSrcArr->Data.AXIS_X[Index]))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	ed93 7a00 	vldr	s14, [r3]
 800c786:	89fb      	ldrh	r3, [r7, #14]
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	3302      	adds	r3, #2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	edd3 7a00 	vldr	s15, [r3]
 800c794:	eef0 7ae7 	vabs.f32	s15, s15
 800c798:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a0:	d50b      	bpl.n	800c7ba <MotionSP_SwAccPkEval+0x4e>
  {
    pDstArr->AXIS_X = fabsf(pSrcArr->Data.AXIS_X[Index]);
 800c7a2:	89fb      	ldrh	r3, [r7, #14]
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	3302      	adds	r3, #2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	edd3 7a00 	vldr	s15, [r3]
 800c7b0:	eef0 7ae7 	vabs.f32	s15, s15
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	edc3 7a00 	vstr	s15, [r3]
  }
  if (pDstArr->AXIS_Y < fabsf(pSrcArr->Data.AXIS_Y[Index]))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	ed93 7a01 	vldr	s14, [r3, #4]
 800c7c0:	89fb      	ldrh	r3, [r7, #14]
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	4413      	add	r3, r2
 800c7cc:	edd3 7a00 	vldr	s15, [r3]
 800c7d0:	eef0 7ae7 	vabs.f32	s15, s15
 800c7d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7dc:	d50c      	bpl.n	800c7f8 <MotionSP_SwAccPkEval+0x8c>
  {
    pDstArr->AXIS_Y = fabsf(pSrcArr->Data.AXIS_Y[Index]);
 800c7de:	89fb      	ldrh	r3, [r7, #14]
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	edd3 7a00 	vldr	s15, [r3]
 800c7ee:	eef0 7ae7 	vabs.f32	s15, s15
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	edc3 7a01 	vstr	s15, [r3, #4]
  }
  if (pDstArr->AXIS_Z < fabsf(pSrcArr->Data.AXIS_Z[Index]))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	ed93 7a02 	vldr	s14, [r3, #8]
 800c7fe:	89fb      	ldrh	r3, [r7, #14]
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4413      	add	r3, r2
 800c80a:	edd3 7a00 	vldr	s15, [r3]
 800c80e:	eef0 7ae7 	vabs.f32	s15, s15
 800c812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81a:	d400      	bmi.n	800c81e <MotionSP_SwAccPkEval+0xb2>
  {
    pDstArr->AXIS_Z = fabsf(pSrcArr->Data.AXIS_Z[Index]);
  }
}
 800c81c:	e00c      	b.n	800c838 <MotionSP_SwAccPkEval+0xcc>
    pDstArr->AXIS_Z = fabsf(pSrcArr->Data.AXIS_Z[Index]);
 800c81e:	89fb      	ldrh	r3, [r7, #14]
 800c820:	683a      	ldr	r2, [r7, #0]
 800c822:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	edd3 7a00 	vldr	s15, [r3]
 800c82e:	eef0 7ae7 	vabs.f32	s15, s15
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800c838:	bf00      	nop
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <MotionSP_accDelOffset>:
  *  @param pSrcArr: pointer to Accelero Array with offset
  *  @param Smooth: smoothing factor
  *  @param Restart: flag to Re-Init internal value
  */
void MotionSP_accDelOffset(SensorVal_f_t *pDstArr, SensorVal_f_t *pSrcArr, float Smooth, uint16_t Restart)
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	ed87 0a01 	vstr	s0, [r7, #4]
 800c852:	4613      	mov	r3, r2
 800c854:	807b      	strh	r3, [r7, #2]
  static SensorVal_f_t DstArrPre;
  static SensorVal_f_t SrcArrPre;

  if (Restart == 1)
 800c856:	887b      	ldrh	r3, [r7, #2]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d124      	bne.n	800c8a6 <MotionSP_accDelOffset+0x62>
  {
    pDstArr->AXIS_X = 0.0;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f04f 0200 	mov.w	r2, #0
 800c862:	601a      	str	r2, [r3, #0]
    pDstArr->AXIS_Y = 0.0;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f04f 0200 	mov.w	r2, #0
 800c86a:	605a      	str	r2, [r3, #4]
    pDstArr->AXIS_Z = 0.0;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f04f 0200 	mov.w	r2, #0
 800c872:	609a      	str	r2, [r3, #8]
    DstArrPre.AXIS_X = pSrcArr->AXIS_X;
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a3e      	ldr	r2, [pc, #248]	; (800c974 <MotionSP_accDelOffset+0x130>)
 800c87a:	6013      	str	r3, [r2, #0]
    DstArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	4a3c      	ldr	r2, [pc, #240]	; (800c974 <MotionSP_accDelOffset+0x130>)
 800c882:	6053      	str	r3, [r2, #4]
    DstArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	4a3a      	ldr	r2, [pc, #232]	; (800c974 <MotionSP_accDelOffset+0x130>)
 800c88a:	6093      	str	r3, [r2, #8]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a39      	ldr	r2, [pc, #228]	; (800c978 <MotionSP_accDelOffset+0x134>)
 800c892:	6013      	str	r3, [r2, #0]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	4a37      	ldr	r2, [pc, #220]	; (800c978 <MotionSP_accDelOffset+0x134>)
 800c89a:	6053      	str	r3, [r2, #4]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	4a35      	ldr	r2, [pc, #212]	; (800c978 <MotionSP_accDelOffset+0x134>)
 800c8a2:	6093      	str	r3, [r2, #8]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
  }
}
 800c8a4:	e05f      	b.n	800c966 <MotionSP_accDelOffset+0x122>
    pDstArr->AXIS_X = (Smooth * DstArrPre.AXIS_X) + Smooth * (pSrcArr->AXIS_X - SrcArrPre.AXIS_X);
 800c8a6:	4b33      	ldr	r3, [pc, #204]	; (800c974 <MotionSP_accDelOffset+0x130>)
 800c8a8:	ed93 7a00 	vldr	s14, [r3]
 800c8ac:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	edd3 6a00 	vldr	s13, [r3]
 800c8ba:	4b2f      	ldr	r3, [pc, #188]	; (800c978 <MotionSP_accDelOffset+0x134>)
 800c8bc:	edd3 7a00 	vldr	s15, [r3]
 800c8c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c8c4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	edc3 7a00 	vstr	s15, [r3]
    pDstArr->AXIS_Y = (Smooth * DstArrPre.AXIS_Y) + Smooth * (pSrcArr->AXIS_Y - SrcArrPre.AXIS_Y);
 800c8d6:	4b27      	ldr	r3, [pc, #156]	; (800c974 <MotionSP_accDelOffset+0x130>)
 800c8d8:	ed93 7a01 	vldr	s14, [r3, #4]
 800c8dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	edd3 6a01 	vldr	s13, [r3, #4]
 800c8ea:	4b23      	ldr	r3, [pc, #140]	; (800c978 <MotionSP_accDelOffset+0x134>)
 800c8ec:	edd3 7a01 	vldr	s15, [r3, #4]
 800c8f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c8f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	edc3 7a01 	vstr	s15, [r3, #4]
    pDstArr->AXIS_Z = (Smooth * DstArrPre.AXIS_Z) + Smooth * (pSrcArr->AXIS_Z - SrcArrPre.AXIS_Z);
 800c906:	4b1b      	ldr	r3, [pc, #108]	; (800c974 <MotionSP_accDelOffset+0x130>)
 800c908:	ed93 7a02 	vldr	s14, [r3, #8]
 800c90c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c910:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	edd3 6a02 	vldr	s13, [r3, #8]
 800c91a:	4b17      	ldr	r3, [pc, #92]	; (800c978 <MotionSP_accDelOffset+0x134>)
 800c91c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c920:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c924:	edd7 7a01 	vldr	s15, [r7, #4]
 800c928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c92c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	edc3 7a02 	vstr	s15, [r3, #8]
    DstArrPre.AXIS_X = pDstArr->AXIS_X;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a0e      	ldr	r2, [pc, #56]	; (800c974 <MotionSP_accDelOffset+0x130>)
 800c93c:	6013      	str	r3, [r2, #0]
    DstArrPre.AXIS_Y = pDstArr->AXIS_Y;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	4a0c      	ldr	r2, [pc, #48]	; (800c974 <MotionSP_accDelOffset+0x130>)
 800c944:	6053      	str	r3, [r2, #4]
    DstArrPre.AXIS_Z = pDstArr->AXIS_Z;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	4a0a      	ldr	r2, [pc, #40]	; (800c974 <MotionSP_accDelOffset+0x130>)
 800c94c:	6093      	str	r3, [r2, #8]
    SrcArrPre.AXIS_X = pSrcArr->AXIS_X;
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a09      	ldr	r2, [pc, #36]	; (800c978 <MotionSP_accDelOffset+0x134>)
 800c954:	6013      	str	r3, [r2, #0]
    SrcArrPre.AXIS_Y = pSrcArr->AXIS_Y;
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	4a07      	ldr	r2, [pc, #28]	; (800c978 <MotionSP_accDelOffset+0x134>)
 800c95c:	6053      	str	r3, [r2, #4]
    SrcArrPre.AXIS_Z = pSrcArr->AXIS_Z;
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	4a05      	ldr	r2, [pc, #20]	; (800c978 <MotionSP_accDelOffset+0x134>)
 800c964:	6093      	str	r3, [r2, #8]
}
 800c966:	bf00      	nop
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	200003cc 	.word	0x200003cc
 800c978:	200003d8 	.word	0x200003d8

0800c97c <MotionSP_CreateAccCircBuffer>:
  *  @param buffType Description for buffType
  *  @return Return description
  *
  */
void MotionSP_CreateAccCircBuffer(sCircBuffer_t *pCircBuff, SensorVal_f_t buffType)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	eef0 6a40 	vmov.f32	s13, s0
 800c988:	eeb0 7a60 	vmov.f32	s14, s1
 800c98c:	eef0 7a41 	vmov.f32	s15, s2
 800c990:	edc7 6a00 	vstr	s13, [r7]
 800c994:	ed87 7a01 	vstr	s14, [r7, #4]
 800c998:	edc7 7a02 	vstr	s15, [r7, #8]
  pCircBuff->IdPos += 1;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	885b      	ldrh	r3, [r3, #2]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	805a      	strh	r2, [r3, #2]

  if (pCircBuff->IdPos == pCircBuff->Size)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	885a      	ldrh	r2, [r3, #2]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d105      	bne.n	800c9c0 <MotionSP_CreateAccCircBuffer+0x44>
  {
    pCircBuff->IdPos = 0;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	805a      	strh	r2, [r3, #2]
    pCircBuff->Ovf = 1;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	711a      	strb	r2, [r3, #4]
  }

  pCircBuff->Data.AXIS_X[pCircBuff->IdPos] = buffType.AXIS_X*G_CONV;
 800c9c0:	edd7 7a00 	vldr	s15, [r7]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	885b      	ldrh	r3, [r3, #2]
 800c9c8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ca24 <MotionSP_CreateAccCircBuffer+0xa8>
 800c9cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	3302      	adds	r3, #2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	4413      	add	r3, r2
 800c9d8:	edc3 7a00 	vstr	s15, [r3]
  pCircBuff->Data.AXIS_Y[pCircBuff->IdPos] = buffType.AXIS_Y*G_CONV;
 800c9dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	885b      	ldrh	r3, [r3, #2]
 800c9e4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800ca24 <MotionSP_CreateAccCircBuffer+0xa8>
 800c9e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	f203 2302 	addw	r3, r3, #514	; 0x202
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	edc3 7a00 	vstr	s15, [r3]
  pCircBuff->Data.AXIS_Z[pCircBuff->IdPos] = buffType.AXIS_Z*G_CONV;
 800c9fa:	edd7 7a02 	vldr	s15, [r7, #8]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	885b      	ldrh	r3, [r3, #2]
 800ca02:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800ca24 <MotionSP_CreateAccCircBuffer+0xa8>
 800ca06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	edc3 7a00 	vstr	s15, [r3]
}
 800ca18:	bf00      	nop
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	3c20ac12 	.word	0x3c20ac12

0800ca28 <MotionSP_TimeDomainProcess>:
  * @param td_type Time domain analysis type
  * @param Restart Flag
  * @return none
  */
void MotionSP_TimeDomainProcess(sAcceleroParam_t *pTimeDomain, Td_Type_t td_type, uint8_t Restart)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	460b      	mov	r3, r1
 800ca32:	70fb      	strb	r3, [r7, #3]
 800ca34:	4613      	mov	r3, r2
 800ca36:	70bb      	strb	r3, [r7, #2]
  MotionSP_SwAccPkEval(&pTimeDomain->AccPeak, &AccCircBuffer);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3318      	adds	r3, #24
 800ca3c:	492c      	ldr	r1, [pc, #176]	; (800caf0 <MotionSP_TimeDomainProcess+0xc8>)
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7ff fe94 	bl	800c76c <MotionSP_SwAccPkEval>

  if (td_type == TD_SPEED)
 800ca44:	78fb      	ldrb	r3, [r7, #3]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d118      	bne.n	800ca7c <MotionSP_TimeDomainProcess+0x54>
  {
    /* TIME DOMAIN ANALYSIS: Speed RMS Moving AVERAGE */
    MotionSP_evalSpeedFromAccelero(&SpeedTimeDomain, &AccCircBuffer, Restart);
 800ca4a:	78bb      	ldrb	r3, [r7, #2]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	4928      	ldr	r1, [pc, #160]	; (800caf0 <MotionSP_TimeDomainProcess+0xc8>)
 800ca50:	4828      	ldr	r0, [pc, #160]	; (800caf4 <MotionSP_TimeDomainProcess+0xcc>)
 800ca52:	f7ff fbc5 	bl	800c1e0 <MotionSP_evalSpeedFromAccelero>
    // Delete the Speed DC components
    MotionSP_speedDelOffset(&SpeedTimeDomain_noDC, &SpeedTimeDomain, DC_SMOOTH, Restart);
 800ca56:	78bb      	ldrb	r3, [r7, #2]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800caf8 <MotionSP_TimeDomainProcess+0xd0>
 800ca5e:	4925      	ldr	r1, [pc, #148]	; (800caf4 <MotionSP_TimeDomainProcess+0xcc>)
 800ca60:	4826      	ldr	r0, [pc, #152]	; (800cafc <MotionSP_TimeDomainProcess+0xd4>)
 800ca62:	f7ff fb21 	bl	800c0a8 <MotionSP_speedDelOffset>
    // Evaluate SwExponential Filter by TAU_FILTER on Speed data
    MotionSP_SwSpeedRmsFilter(&sTimeDomain.SpeedRms, &SpeedTimeDomain_noDC, AcceleroODR.Tau, Restart);
 800ca66:	4b26      	ldr	r3, [pc, #152]	; (800cb00 <MotionSP_TimeDomainProcess+0xd8>)
 800ca68:	edd3 7a02 	vldr	s15, [r3, #8]
 800ca6c:	78bb      	ldrb	r3, [r7, #2]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	eeb0 0a67 	vmov.f32	s0, s15
 800ca74:	4921      	ldr	r1, [pc, #132]	; (800cafc <MotionSP_TimeDomainProcess+0xd4>)
 800ca76:	4823      	ldr	r0, [pc, #140]	; (800cb04 <MotionSP_TimeDomainProcess+0xdc>)
 800ca78:	f7ff fc6e 	bl	800c358 <MotionSP_SwSpeedRmsFilter>
  }

  if (td_type == TD_ACCELERO)
 800ca7c:	78fb      	ldrb	r3, [r7, #3]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d10a      	bne.n	800ca98 <MotionSP_TimeDomainProcess+0x70>
  {
    /* TIME DOMAIN ANALYSIS: Accelerometer RMS Moving AVERAGE */
    // Evaluate SwExponential Filter by TAU_FILTER on Accelerometer data
    MotionSP_SwAccRmsFilter(&sTimeDomain.AccRms, &AccCircBuffer, AcceleroODR.Tau, Restart);
 800ca82:	4b1f      	ldr	r3, [pc, #124]	; (800cb00 <MotionSP_TimeDomainProcess+0xd8>)
 800ca84:	edd3 7a02 	vldr	s15, [r3, #8]
 800ca88:	78bb      	ldrb	r3, [r7, #2]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	eeb0 0a67 	vmov.f32	s0, s15
 800ca90:	4917      	ldr	r1, [pc, #92]	; (800caf0 <MotionSP_TimeDomainProcess+0xc8>)
 800ca92:	481d      	ldr	r0, [pc, #116]	; (800cb08 <MotionSP_TimeDomainProcess+0xe0>)
 800ca94:	f7ff fd4e 	bl	800c534 <MotionSP_SwAccRmsFilter>
  }

  if (td_type == TD_BOTH_TAU)
 800ca98:	78fb      	ldrb	r3, [r7, #3]
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	d123      	bne.n	800cae6 <MotionSP_TimeDomainProcess+0xbe>
  {
    /* TIME DOMAIN ANALYSIS: Speed and both RMS Moving AVERAGE TAU */
    MotionSP_evalSpeedFromAccelero(&SpeedTimeDomain, &AccCircBuffer, Restart);
 800ca9e:	78bb      	ldrb	r3, [r7, #2]
 800caa0:	461a      	mov	r2, r3
 800caa2:	4913      	ldr	r1, [pc, #76]	; (800caf0 <MotionSP_TimeDomainProcess+0xc8>)
 800caa4:	4813      	ldr	r0, [pc, #76]	; (800caf4 <MotionSP_TimeDomainProcess+0xcc>)
 800caa6:	f7ff fb9b 	bl	800c1e0 <MotionSP_evalSpeedFromAccelero>
    // Delete the Speed DC components
    MotionSP_speedDelOffset(&SpeedTimeDomain_noDC, &SpeedTimeDomain, DC_SMOOTH, Restart);
 800caaa:	78bb      	ldrb	r3, [r7, #2]
 800caac:	461a      	mov	r2, r3
 800caae:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800caf8 <MotionSP_TimeDomainProcess+0xd0>
 800cab2:	4910      	ldr	r1, [pc, #64]	; (800caf4 <MotionSP_TimeDomainProcess+0xcc>)
 800cab4:	4811      	ldr	r0, [pc, #68]	; (800cafc <MotionSP_TimeDomainProcess+0xd4>)
 800cab6:	f7ff faf7 	bl	800c0a8 <MotionSP_speedDelOffset>
    // Evaluate SwExponential Filter by TAU_FILTER on Speed data
    MotionSP_SwSpeedRmsFilter(&sTimeDomain.SpeedRms, &SpeedTimeDomain_noDC, AcceleroODR.Tau, Restart);
 800caba:	4b11      	ldr	r3, [pc, #68]	; (800cb00 <MotionSP_TimeDomainProcess+0xd8>)
 800cabc:	edd3 7a02 	vldr	s15, [r3, #8]
 800cac0:	78bb      	ldrb	r3, [r7, #2]
 800cac2:	461a      	mov	r2, r3
 800cac4:	eeb0 0a67 	vmov.f32	s0, s15
 800cac8:	490c      	ldr	r1, [pc, #48]	; (800cafc <MotionSP_TimeDomainProcess+0xd4>)
 800caca:	480e      	ldr	r0, [pc, #56]	; (800cb04 <MotionSP_TimeDomainProcess+0xdc>)
 800cacc:	f7ff fc44 	bl	800c358 <MotionSP_SwSpeedRmsFilter>
    // Evaluate SwExponential Filter by TAU_FILTER on Accelerometer data
    MotionSP_SwAccRmsFilter(&sTimeDomain.AccRms, &AccCircBuffer, AcceleroODR.Tau, Restart);
 800cad0:	4b0b      	ldr	r3, [pc, #44]	; (800cb00 <MotionSP_TimeDomainProcess+0xd8>)
 800cad2:	edd3 7a02 	vldr	s15, [r3, #8]
 800cad6:	78bb      	ldrb	r3, [r7, #2]
 800cad8:	461a      	mov	r2, r3
 800cada:	eeb0 0a67 	vmov.f32	s0, s15
 800cade:	4904      	ldr	r1, [pc, #16]	; (800caf0 <MotionSP_TimeDomainProcess+0xc8>)
 800cae0:	4809      	ldr	r0, [pc, #36]	; (800cb08 <MotionSP_TimeDomainProcess+0xe0>)
 800cae2:	f7ff fd27 	bl	800c534 <MotionSP_SwAccRmsFilter>
  }
}
 800cae6:	bf00      	nop
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	200059d0 	.word	0x200059d0
 800caf4:	20007230 	.word	0x20007230
 800caf8:	3f79999a 	.word	0x3f79999a
 800cafc:	20007240 	.word	0x20007240
 800cb00:	20008a94 	.word	0x20008a94
 800cb04:	200071e4 	.word	0x200071e4
 800cb08:	200071d8 	.word	0x200071d8

0800cb0c <MotionSP_fftCalc>:
  * @param  pfftIn pointer to the FFT-In array
  * @param  pfftOut pointer to the FFT-Out array
  * @return none
  */
void MotionSP_fftCalc(arm_rfft_fast_instance_f32 *pfftS, float *pfftIn, float *pfftOut)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
  static float fftTmp[FFT_SIZE_MAX];

  // Compute the Fourier transform of the signal.
  arm_rfft_fast_f32(pfftS, pfftIn, fftTmp, 0);
 800cb18:	2300      	movs	r3, #0
 800cb1a:	4a09      	ldr	r2, [pc, #36]	; (800cb40 <MotionSP_fftCalc+0x34>)
 800cb1c:	68b9      	ldr	r1, [r7, #8]
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f7fa fd96 	bl	8007650 <arm_rfft_fast_f32>

  // Compute the two-sided spectrum
  arm_cmplx_mag_f32(fftTmp, pfftOut, pfftS->fftLenRFFT / 2);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	8a1b      	ldrh	r3, [r3, #16]
 800cb28:	085b      	lsrs	r3, r3, #1
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	4803      	ldr	r0, [pc, #12]	; (800cb40 <MotionSP_fftCalc+0x34>)
 800cb32:	f7f8 f941 	bl	8004db8 <arm_cmplx_mag_f32>
}
 800cb36:	bf00      	nop
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	200003e4 	.word	0x200003e4

0800cb44 <MotionSP_fftAdapt>:
  * @param  pfftCmplxMag description for pfftCmplxMag
  * @param  size description for size
  * @return none
  */
void MotionSP_fftAdapt(sAxesMagBuff_t *pfftCmplxMag, uint16_t size)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	807b      	strh	r3, [r7, #2]
  for (int i = 0; i < size; i++)
 800cb50:	2300      	movs	r3, #0
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	e0a9      	b.n	800ccaa <MotionSP_fftAdapt+0x166>
  {
    if (i == 0) /* Adjust DC component */
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d153      	bne.n	800cc04 <MotionSP_fftAdapt+0xc0>
    {
      pfftCmplxMag->AXIS_X[i] = (pfftCmplxMag->AXIS_X[i] / (2 * size)) * Window_Scale_Factor;
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	edd3 6a00 	vldr	s13, [r3]
 800cb68:	887b      	ldrh	r3, [r7, #2]
 800cb6a:	005b      	lsls	r3, r3, #1
 800cb6c:	ee07 3a90 	vmov	s15, r3
 800cb70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb78:	4b52      	ldr	r3, [pc, #328]	; (800ccc4 <MotionSP_fftAdapt+0x180>)
 800cb7a:	edd3 7a00 	vldr	s15, [r3]
 800cb7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	edc3 7a00 	vstr	s15, [r3]
      pfftCmplxMag->AXIS_Y[i] = (pfftCmplxMag->AXIS_Y[i] / (2 * size)) * Window_Scale_Factor;
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4413      	add	r3, r2
 800cb9a:	edd3 6a00 	vldr	s13, [r3]
 800cb9e:	887b      	ldrh	r3, [r7, #2]
 800cba0:	005b      	lsls	r3, r3, #1
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbae:	4b45      	ldr	r3, [pc, #276]	; (800ccc4 <MotionSP_fftAdapt+0x180>)
 800cbb0:	edd3 7a00 	vldr	s15, [r3]
 800cbb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	edc3 7a00 	vstr	s15, [r3]
      pfftCmplxMag->AXIS_Z[i] = (pfftCmplxMag->AXIS_Z[i] / (2 * size)) * Window_Scale_Factor;
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	4413      	add	r3, r2
 800cbd4:	edd3 6a00 	vldr	s13, [r3]
 800cbd8:	887b      	ldrh	r3, [r7, #2]
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	ee07 3a90 	vmov	s15, r3
 800cbe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbe8:	4b36      	ldr	r3, [pc, #216]	; (800ccc4 <MotionSP_fftAdapt+0x180>)
 800cbea:	edd3 7a00 	vldr	s15, [r3]
 800cbee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	edc3 7a00 	vstr	s15, [r3]
 800cc02:	e04f      	b.n	800cca4 <MotionSP_fftAdapt+0x160>
    }
    else /* Adjust all the elements with i > 0 */
    {
      pfftCmplxMag->AXIS_X[i] = (pfftCmplxMag->AXIS_X[i] / size) * Window_Scale_Factor;
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	edd3 6a00 	vldr	s13, [r3]
 800cc10:	887b      	ldrh	r3, [r7, #2]
 800cc12:	ee07 3a90 	vmov	s15, r3
 800cc16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc1e:	4b29      	ldr	r3, [pc, #164]	; (800ccc4 <MotionSP_fftAdapt+0x180>)
 800cc20:	edd3 7a00 	vldr	s15, [r3]
 800cc24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	edc3 7a00 	vstr	s15, [r3]
      pfftCmplxMag->AXIS_Y[i] = (pfftCmplxMag->AXIS_Y[i] / size) * Window_Scale_Factor;
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	4413      	add	r3, r2
 800cc40:	edd3 6a00 	vldr	s13, [r3]
 800cc44:	887b      	ldrh	r3, [r7, #2]
 800cc46:	ee07 3a90 	vmov	s15, r3
 800cc4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc52:	4b1c      	ldr	r3, [pc, #112]	; (800ccc4 <MotionSP_fftAdapt+0x180>)
 800cc54:	edd3 7a00 	vldr	s15, [r3]
 800cc58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	edc3 7a00 	vstr	s15, [r3]
      pfftCmplxMag->AXIS_Z[i] = (pfftCmplxMag->AXIS_Z[i] / size) * Window_Scale_Factor;
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	edd3 6a00 	vldr	s13, [r3]
 800cc7c:	887b      	ldrh	r3, [r7, #2]
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc8a:	4b0e      	ldr	r3, [pc, #56]	; (800ccc4 <MotionSP_fftAdapt+0x180>)
 800cc8c:	edd3 7a00 	vldr	s15, [r3]
 800cc90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < size; i++)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	3301      	adds	r3, #1
 800cca8:	60fb      	str	r3, [r7, #12]
 800ccaa:	887b      	ldrh	r3, [r7, #2]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	f6ff af51 	blt.w	800cb56 <MotionSP_fftAdapt+0x12>
    }
  }
}
 800ccb4:	bf00      	nop
 800ccb6:	bf00      	nop
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	200059cc 	.word	0x200059cc

0800ccc8 <MotionSP_fftFindPeak>:
  * @param  AccAxesMagResults description for AccAxesMagResults
  * @return none
  */

void MotionSP_fftFindPeak(sAxesMagBuff_t *pfftCmplxMag, uint16_t size, sAxesMagResults_t *AccAxesMagResults)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	607a      	str	r2, [r7, #4]
 800ccd4:	817b      	strh	r3, [r7, #10]
  arm_max_f32(pfftCmplxMag->AXIS_X, size, &AccAxesMagResults->X_Value, &AccAxesMagResults->X_Index);
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	8979      	ldrh	r1, [r7, #10]
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3304      	adds	r3, #4
 800cce0:	f7f8 f992 	bl	8005008 <arm_max_f32>
  arm_max_f32(pfftCmplxMag->AXIS_Y, size, &AccAxesMagResults->Y_Value, &AccAxesMagResults->Y_Index);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f503 6080 	add.w	r0, r3, #1024	; 0x400
 800ccea:	8979      	ldrh	r1, [r7, #10]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f103 020c 	add.w	r2, r3, #12
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	3310      	adds	r3, #16
 800ccf6:	f7f8 f987 	bl	8005008 <arm_max_f32>
  arm_max_f32(pfftCmplxMag->AXIS_Z, size, &AccAxesMagResults->Z_Value, &AccAxesMagResults->Z_Index);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 800cd00:	8979      	ldrh	r1, [r7, #10]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f103 0218 	add.w	r2, r3, #24
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	331c      	adds	r3, #28
 800cd0c:	f7f8 f97c 	bl	8005008 <arm_max_f32>
}
 800cd10:	bf00      	nop
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <MotionSP_SetWindFiltArray>:
  * @param  size filtering parameters array size
  * @param  Ftype filtering method
  * @return none
  */
void MotionSP_SetWindFiltArray(float *Filter_Params, uint16_t size, Filt_Type_t Ftype)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	ed2d 8b02 	vpush	{d8}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	460b      	mov	r3, r1
 800cd26:	807b      	strh	r3, [r7, #2]
 800cd28:	4613      	mov	r3, r2
 800cd2a:	707b      	strb	r3, [r7, #1]
  for (int i = 0; i < size; i++)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	60fb      	str	r3, [r7, #12]
 800cd30:	e0db      	b.n	800ceea <MotionSP_SetWindFiltArray+0x1d2>
  {
    if (Ftype == RECTANGULAR)
 800cd32:	787b      	ldrb	r3, [r7, #1]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d106      	bne.n	800cd46 <MotionSP_SetWindFiltArray+0x2e>
    {
      Filter_Params[i] = 1.0f;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	4413      	add	r3, r2
 800cd40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cd44:	601a      	str	r2, [r3, #0]
    }

    if (Ftype == HANNING)
 800cd46:	787b      	ldrb	r3, [r7, #1]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d124      	bne.n	800cd96 <MotionSP_SetWindFiltArray+0x7e>
    {
      Filter_Params[i] = (0.5f * (1 - arm_cos_f32((2 * PI * i) / (size - 1))));
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	ee07 3a90 	vmov	s15, r3
 800cd52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd56:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800cf40 <MotionSP_SetWindFiltArray+0x228>
 800cd5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cd5e:	887b      	ldrh	r3, [r7, #2]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cd6e:	eeb0 0a66 	vmov.f32	s0, s13
 800cd72:	f7f8 f8cd 	bl	8004f10 <arm_cos_f32>
 800cd76:	eef0 7a40 	vmov.f32	s15, s0
 800cd7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	4413      	add	r3, r2
 800cd8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cd8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd92:	edc3 7a00 	vstr	s15, [r3]
    }

    if (Ftype == HAMMING)
 800cd96:	787b      	ldrb	r3, [r7, #1]
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d124      	bne.n	800cde6 <MotionSP_SetWindFiltArray+0xce>
    {
      Filter_Params[i] = 0.54f - (0.46f * (arm_cos_f32((2 * PI * i) / (size - 1))));
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	ee07 3a90 	vmov	s15, r3
 800cda2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cda6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800cf40 <MotionSP_SetWindFiltArray+0x228>
 800cdaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cdae:	887b      	ldrh	r3, [r7, #2]
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	ee07 3a90 	vmov	s15, r3
 800cdb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cdbe:	eeb0 0a66 	vmov.f32	s0, s13
 800cdc2:	f7f8 f8a5 	bl	8004f10 <arm_cos_f32>
 800cdc6:	eef0 7a40 	vmov.f32	s15, s0
 800cdca:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800cf44 <MotionSP_SetWindFiltArray+0x22c>
 800cdce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	4413      	add	r3, r2
 800cdda:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800cf48 <MotionSP_SetWindFiltArray+0x230>
 800cdde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cde2:	edc3 7a00 	vstr	s15, [r3]
    }

    if (Ftype == FLAT_TOP)
 800cde6:	787b      	ldrb	r3, [r7, #1]
 800cde8:	2b03      	cmp	r3, #3
 800cdea:	d17b      	bne.n	800cee4 <MotionSP_SetWindFiltArray+0x1cc>
      Filter_Params[i] = 0.21557895f - \
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	ee07 3a90 	vmov	s15, r3
 800cdf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdf6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800cf40 <MotionSP_SetWindFiltArray+0x228>
 800cdfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cdfe:	887b      	ldrh	r3, [r7, #2]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	ee07 3a90 	vmov	s15, r3
 800ce06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ce0e:	eeb0 0a66 	vmov.f32	s0, s13
 800ce12:	f7f8 f87d 	bl	8004f10 <arm_cos_f32>
 800ce16:	eef0 7a40 	vmov.f32	s15, s0
 800ce1a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800cf4c <MotionSP_SetWindFiltArray+0x234>
 800ce1e:	ee67 7a87 	vmul.f32	s15, s15, s14
      Filter_Params[i] = 0.21557895f - \
 800ce22:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800cf50 <MotionSP_SetWindFiltArray+0x238>
 800ce26:	ee37 8a67 	vsub.f32	s16, s14, s15
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	ee07 3a90 	vmov	s15, r3
 800ce30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce34:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800cf54 <MotionSP_SetWindFiltArray+0x23c>
 800ce38:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ce3c:	887b      	ldrh	r3, [r7, #2]
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	ee07 3a90 	vmov	s15, r3
 800ce44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ce4c:	eeb0 0a66 	vmov.f32	s0, s13
 800ce50:	f7f8 f85e 	bl	8004f10 <arm_cos_f32>
 800ce54:	eef0 7a40 	vmov.f32	s15, s0
 800ce58:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800cf58 <MotionSP_SetWindFiltArray+0x240>
 800ce5c:	ee67 7a87 	vmul.f32	s15, s15, s14
                         (0.41663158f * arm_cos_f32((2 * PI * i) / (size - 1))) + \
 800ce60:	ee38 8a27 	vadd.f32	s16, s16, s15
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	ee07 3a90 	vmov	s15, r3
 800ce6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce6e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800cf5c <MotionSP_SetWindFiltArray+0x244>
 800ce72:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ce76:	887b      	ldrh	r3, [r7, #2]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	ee07 3a90 	vmov	s15, r3
 800ce7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ce86:	eeb0 0a66 	vmov.f32	s0, s13
 800ce8a:	f7f8 f841 	bl	8004f10 <arm_cos_f32>
 800ce8e:	eef0 7a40 	vmov.f32	s15, s0
 800ce92:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800cf60 <MotionSP_SetWindFiltArray+0x248>
 800ce96:	ee67 7a87 	vmul.f32	s15, s15, s14
                         0.277263158f * (arm_cos_f32((4 * PI * i) / (size - 1))) - \
 800ce9a:	ee38 8a67 	vsub.f32	s16, s16, s15
                         0.006947368f * (arm_cos_f32((8 * PI * i) / (size - 1)));
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	ee07 3a90 	vmov	s15, r3
 800cea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cea8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800cf64 <MotionSP_SetWindFiltArray+0x24c>
 800ceac:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ceb0:	887b      	ldrh	r3, [r7, #2]
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	ee07 3a90 	vmov	s15, r3
 800ceb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cebc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cec0:	eeb0 0a66 	vmov.f32	s0, s13
 800cec4:	f7f8 f824 	bl	8004f10 <arm_cos_f32>
 800cec8:	eef0 7a40 	vmov.f32	s15, s0
 800cecc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800cf68 <MotionSP_SetWindFiltArray+0x250>
 800ced0:	ee67 7a87 	vmul.f32	s15, s15, s14
      Filter_Params[i] = 0.21557895f - \
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	4413      	add	r3, r2
                         0.083578947f * (arm_cos_f32((6 * PI * i) / (size - 1))) + \
 800cedc:	ee78 7a27 	vadd.f32	s15, s16, s15
      Filter_Params[i] = 0.21557895f - \
 800cee0:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < size; i++)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3301      	adds	r3, #1
 800cee8:	60fb      	str	r3, [r7, #12]
 800ceea:	887b      	ldrh	r3, [r7, #2]
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	f6ff af1f 	blt.w	800cd32 <MotionSP_SetWindFiltArray+0x1a>
  }

  switch (Ftype)
 800cef4:	787b      	ldrb	r3, [r7, #1]
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d81c      	bhi.n	800cf34 <MotionSP_SetWindFiltArray+0x21c>
 800cefa:	a201      	add	r2, pc, #4	; (adr r2, 800cf00 <MotionSP_SetWindFiltArray+0x1e8>)
 800cefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf00:	0800cf11 	.word	0x0800cf11
 800cf04:	0800cf1b 	.word	0x0800cf1b
 800cf08:	0800cf25 	.word	0x0800cf25
 800cf0c:	0800cf2d 	.word	0x0800cf2d
  {
    case RECTANGULAR:
      Window_Scale_Factor = 1.0f;
 800cf10:	4b16      	ldr	r3, [pc, #88]	; (800cf6c <MotionSP_SetWindFiltArray+0x254>)
 800cf12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cf16:	601a      	str	r2, [r3, #0]
      break;
 800cf18:	e00c      	b.n	800cf34 <MotionSP_SetWindFiltArray+0x21c>

    case HANNING:
      Window_Scale_Factor = 2.0f;
 800cf1a:	4b14      	ldr	r3, [pc, #80]	; (800cf6c <MotionSP_SetWindFiltArray+0x254>)
 800cf1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cf20:	601a      	str	r2, [r3, #0]
      break;
 800cf22:	e007      	b.n	800cf34 <MotionSP_SetWindFiltArray+0x21c>

    case HAMMING:
      Window_Scale_Factor = 1.85f;
 800cf24:	4b11      	ldr	r3, [pc, #68]	; (800cf6c <MotionSP_SetWindFiltArray+0x254>)
 800cf26:	4a12      	ldr	r2, [pc, #72]	; (800cf70 <MotionSP_SetWindFiltArray+0x258>)
 800cf28:	601a      	str	r2, [r3, #0]
      break;
 800cf2a:	e003      	b.n	800cf34 <MotionSP_SetWindFiltArray+0x21c>

    case FLAT_TOP:
      Window_Scale_Factor = 4.55f;
 800cf2c:	4b0f      	ldr	r3, [pc, #60]	; (800cf6c <MotionSP_SetWindFiltArray+0x254>)
 800cf2e:	4a11      	ldr	r2, [pc, #68]	; (800cf74 <MotionSP_SetWindFiltArray+0x25c>)
 800cf30:	601a      	str	r2, [r3, #0]
      break;
 800cf32:	bf00      	nop
  }
}
 800cf34:	bf00      	nop
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	ecbd 8b02 	vpop	{d8}
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	40c90fdb 	.word	0x40c90fdb
 800cf44:	3eeb851f 	.word	0x3eeb851f
 800cf48:	3f0a3d71 	.word	0x3f0a3d71
 800cf4c:	3ed550bc 	.word	0x3ed550bc
 800cf50:	3e5cc0ba 	.word	0x3e5cc0ba
 800cf54:	41490fdb 	.word	0x41490fdb
 800cf58:	3e8df570 	.word	0x3e8df570
 800cf5c:	4196cbe4 	.word	0x4196cbe4
 800cf60:	3dab2b70 	.word	0x3dab2b70
 800cf64:	41c90fdb 	.word	0x41c90fdb
 800cf68:	3be3a6bf 	.word	0x3be3a6bf
 800cf6c:	200059cc 	.word	0x200059cc
 800cf70:	3feccccd 	.word	0x3feccccd
 800cf74:	4091999a 	.word	0x4091999a

0800cf78 <motionSP_fftUseWindow>:
  * @param SizeArr input/output array size
  * @param Window_Params oointer to windowing coefficients array
  * @return none
  */
void motionSP_fftUseWindow(float *pDstArr, float *pSrcArr, uint16_t SizeArr, float *Window_Params)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	603b      	str	r3, [r7, #0]
 800cf84:	4613      	mov	r3, r2
 800cf86:	80fb      	strh	r3, [r7, #6]
  arm_mult_f32(pSrcArr, Window_Params, pDstArr, SizeArr);
 800cf88:	88fb      	ldrh	r3, [r7, #6]
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	68b8      	ldr	r0, [r7, #8]
 800cf90:	f7f7 fe6c 	bl	8004c6c <arm_mult_f32>
}
 800cf94:	bf00      	nop
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <MotionSP_fftInBuild>:
  * @param  SrcLastPos last index of data to be taken
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
uint8_t MotionSP_fftInBuild(float *pDst, uint16_t DstSize, float *pSrc, uint16_t SrcSize, uint16_t SrcLastPos)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b086      	sub	sp, #24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	607a      	str	r2, [r7, #4]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	817b      	strh	r3, [r7, #10]
 800cfac:	4613      	mov	r3, r2
 800cfae:	813b      	strh	r3, [r7, #8]
  int16_t initPos;
  uint16_t pos2end;

  if (SrcLastPos < SrcSize)
 800cfb0:	8c3a      	ldrh	r2, [r7, #32]
 800cfb2:	893b      	ldrh	r3, [r7, #8]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d23e      	bcs.n	800d036 <MotionSP_fftInBuild+0x9a>
  {
    // Replace the last index of data to be taken with the first one
    initPos = SrcLastPos - (DstSize - 1);
 800cfb8:	8c3a      	ldrh	r2, [r7, #32]
 800cfba:	897b      	ldrh	r3, [r7, #10]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	82fb      	strh	r3, [r7, #22]
    if (initPos < 0)
 800cfc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	da04      	bge.n	800cfd8 <MotionSP_fftInBuild+0x3c>
    {
      initPos += SrcSize;
 800cfce:	8afa      	ldrh	r2, [r7, #22]
 800cfd0:	893b      	ldrh	r3, [r7, #8]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	82fb      	strh	r3, [r7, #22]
    }

    if (initPos <= (SrcSize - DstSize))
 800cfd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cfdc:	8939      	ldrh	r1, [r7, #8]
 800cfde:	897b      	ldrh	r3, [r7, #10]
 800cfe0:	1acb      	subs	r3, r1, r3
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	dc0b      	bgt.n	800cffe <MotionSP_fftInBuild+0x62>
    {
      memcpy((void *)pDst, (void *)(pSrc + initPos), DstSize * sizeof(float));
 800cfe6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	18d1      	adds	r1, r2, r3
 800cff0:	897b      	ldrh	r3, [r7, #10]
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	461a      	mov	r2, r3
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f000 fba9 	bl	800d74e <memcpy>
 800cffc:	e01d      	b.n	800d03a <MotionSP_fftInBuild+0x9e>
    }
    else
    {
      pos2end = SrcSize - initPos;
 800cffe:	8afb      	ldrh	r3, [r7, #22]
 800d000:	893a      	ldrh	r2, [r7, #8]
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	82bb      	strh	r3, [r7, #20]
      memcpy((void *)pDst, (void *)(pSrc + initPos), pos2end * sizeof(float));
 800d006:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	18d1      	adds	r1, r2, r3
 800d010:	8abb      	ldrh	r3, [r7, #20]
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	461a      	mov	r2, r3
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f000 fb99 	bl	800d74e <memcpy>
      memcpy((void *)(pDst + pos2end), (void *)pSrc, (DstSize - pos2end)*sizeof(float));
 800d01c:	8abb      	ldrh	r3, [r7, #20]
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	18d0      	adds	r0, r2, r3
 800d024:	897a      	ldrh	r2, [r7, #10]
 800d026:	8abb      	ldrh	r3, [r7, #20]
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	461a      	mov	r2, r3
 800d02e:	6879      	ldr	r1, [r7, #4]
 800d030:	f000 fb8d 	bl	800d74e <memcpy>
 800d034:	e001      	b.n	800d03a <MotionSP_fftInBuild+0x9e>
    }
  }
  else
  {
    return 1;
 800d036:	2301      	movs	r3, #1
 800d038:	e000      	b.n	800d03c <MotionSP_fftInBuild+0xa0>
  }

  return 0;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3718      	adds	r7, #24
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <MotionSP_fftAverageCalcTime>:
  *  @param  FinishAvg Description for FinishAvg
  *  @retval 1 in case of success
  *  @retval 0 in case of failure
  */
uint8_t MotionSP_fftAverageCalcTime(float *pDstArr, float *pSrcArr, uint16_t LenArr, uint16_t *pSumCnt, uint8_t FinishAvg)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	603b      	str	r3, [r7, #0]
 800d050:	4613      	mov	r3, r2
 800d052:	80fb      	strh	r3, [r7, #6]
  if ((*pSumCnt == 0))
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d106      	bne.n	800d06a <MotionSP_fftAverageCalcTime+0x26>
  {
    // reset the destination array
    memset((void *)pDstArr, 0, LenArr * sizeof(float));
 800d05c:	88fb      	ldrh	r3, [r7, #6]
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	461a      	mov	r2, r3
 800d062:	2100      	movs	r1, #0
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f000 fb80 	bl	800d76a <memset>
  }

  // add new source values to destination
  for (uint16_t j = 0; j < LenArr; j++)
 800d06a:	2300      	movs	r3, #0
 800d06c:	82fb      	strh	r3, [r7, #22]
 800d06e:	e016      	b.n	800d09e <MotionSP_fftAverageCalcTime+0x5a>
  {
    *(pDstArr + j) += *(pSrcArr + j);
 800d070:	8afb      	ldrh	r3, [r7, #22]
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	4413      	add	r3, r2
 800d078:	ed93 7a00 	vldr	s14, [r3]
 800d07c:	8afb      	ldrh	r3, [r7, #22]
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	4413      	add	r3, r2
 800d084:	edd3 7a00 	vldr	s15, [r3]
 800d088:	8afb      	ldrh	r3, [r7, #22]
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	4413      	add	r3, r2
 800d090:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d094:	edc3 7a00 	vstr	s15, [r3]
  for (uint16_t j = 0; j < LenArr; j++)
 800d098:	8afb      	ldrh	r3, [r7, #22]
 800d09a:	3301      	adds	r3, #1
 800d09c:	82fb      	strh	r3, [r7, #22]
 800d09e:	8afa      	ldrh	r2, [r7, #22]
 800d0a0:	88fb      	ldrh	r3, [r7, #6]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d3e4      	bcc.n	800d070 <MotionSP_fftAverageCalcTime+0x2c>
  }

  // increase the number of times
  *pSumCnt += 1;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	801a      	strh	r2, [r3, #0]

  if (FinishAvg)
 800d0b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d01f      	beq.n	800d0fa <MotionSP_fftAverageCalcTime+0xb6>
  {
    // Process the average
    for (uint16_t j = 0; j < LenArr; j++)
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	82bb      	strh	r3, [r7, #20]
 800d0be:	e016      	b.n	800d0ee <MotionSP_fftAverageCalcTime+0xaa>
    {
      *(pDstArr + j) = *(pDstArr + j) / (*pSumCnt);
 800d0c0:	8abb      	ldrh	r3, [r7, #20]
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	edd3 6a00 	vldr	s13, [r3]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	881b      	ldrh	r3, [r3, #0]
 800d0d0:	ee07 3a90 	vmov	s15, r3
 800d0d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d0d8:	8abb      	ldrh	r3, [r7, #20]
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	4413      	add	r3, r2
 800d0e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e4:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t j = 0; j < LenArr; j++)
 800d0e8:	8abb      	ldrh	r3, [r7, #20]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	82bb      	strh	r3, [r7, #20]
 800d0ee:	8aba      	ldrh	r2, [r7, #20]
 800d0f0:	88fb      	ldrh	r3, [r7, #6]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d3e4      	bcc.n	800d0c0 <MotionSP_fftAverageCalcTime+0x7c>
    }

    return 1;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e000      	b.n	800d0fc <MotionSP_fftAverageCalcTime+0xb8>
  }

  return 0;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <MotionSP_FrequencyDomainProcess>:
  * @brief  Frequency Domain Processing
  * @param  None
  * @return None
  */
void MotionSP_FrequencyDomainProcess(void)
{
 800d104:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d108:	b086      	sub	sp, #24
 800d10a:	af04      	add	r7, sp, #16
  static float fftOutX[FFT_SIZE_MAX];          //!< Array for output values for the complex magnitude function
  static float fftOutY[FFT_SIZE_MAX];          //!< Array for output values for the complex magnitude function
  static float fftOutZ[FFT_SIZE_MAX];          //!< Array for output values for the complex magnitude function

  /* ------------------ Freeze the Accelerometer data to analyze--------------*/
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, SpeedCircBuffer.Data.AXIS_X, SpeedCircBuffer.Size, accCircBuffIndexForFft);
 800d10c:	4b81      	ldr	r3, [pc, #516]	; (800d314 <MotionSP_FrequencyDomainProcess+0x210>)
 800d10e:	8819      	ldrh	r1, [r3, #0]
 800d110:	4b81      	ldr	r3, [pc, #516]	; (800d318 <MotionSP_FrequencyDomainProcess+0x214>)
 800d112:	881a      	ldrh	r2, [r3, #0]
 800d114:	4b81      	ldr	r3, [pc, #516]	; (800d31c <MotionSP_FrequencyDomainProcess+0x218>)
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	4613      	mov	r3, r2
 800d11c:	4a80      	ldr	r2, [pc, #512]	; (800d320 <MotionSP_FrequencyDomainProcess+0x21c>)
 800d11e:	4881      	ldr	r0, [pc, #516]	; (800d324 <MotionSP_FrequencyDomainProcess+0x220>)
 800d120:	f7ff ff3c 	bl	800cf9c <MotionSP_fftInBuild>
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_Y, MotionSP_Parameters.FftSize, SpeedCircBuffer.Data.AXIS_Y, SpeedCircBuffer.Size, accCircBuffIndexForFft);
 800d124:	4b7b      	ldr	r3, [pc, #492]	; (800d314 <MotionSP_FrequencyDomainProcess+0x210>)
 800d126:	8819      	ldrh	r1, [r3, #0]
 800d128:	4b7b      	ldr	r3, [pc, #492]	; (800d318 <MotionSP_FrequencyDomainProcess+0x214>)
 800d12a:	881a      	ldrh	r2, [r3, #0]
 800d12c:	4b7b      	ldr	r3, [pc, #492]	; (800d31c <MotionSP_FrequencyDomainProcess+0x218>)
 800d12e:	881b      	ldrh	r3, [r3, #0]
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	4613      	mov	r3, r2
 800d134:	4a7c      	ldr	r2, [pc, #496]	; (800d328 <MotionSP_FrequencyDomainProcess+0x224>)
 800d136:	487d      	ldr	r0, [pc, #500]	; (800d32c <MotionSP_FrequencyDomainProcess+0x228>)
 800d138:	f7ff ff30 	bl	800cf9c <MotionSP_fftInBuild>
  MotionSP_fftInBuild(AccAxesArray_fftIn.AXIS_Z, MotionSP_Parameters.FftSize, SpeedCircBuffer.Data.AXIS_Z, SpeedCircBuffer.Size, accCircBuffIndexForFft);
 800d13c:	4b75      	ldr	r3, [pc, #468]	; (800d314 <MotionSP_FrequencyDomainProcess+0x210>)
 800d13e:	8819      	ldrh	r1, [r3, #0]
 800d140:	4b75      	ldr	r3, [pc, #468]	; (800d318 <MotionSP_FrequencyDomainProcess+0x214>)
 800d142:	881a      	ldrh	r2, [r3, #0]
 800d144:	4b75      	ldr	r3, [pc, #468]	; (800d31c <MotionSP_FrequencyDomainProcess+0x218>)
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	4613      	mov	r3, r2
 800d14c:	4a78      	ldr	r2, [pc, #480]	; (800d330 <MotionSP_FrequencyDomainProcess+0x22c>)
 800d14e:	4879      	ldr	r0, [pc, #484]	; (800d334 <MotionSP_FrequencyDomainProcess+0x230>)
 800d150:	f7ff ff24 	bl	800cf9c <MotionSP_fftInBuild>

  /* ------------------ First Axis: Analysis on X-Acceleration--------------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_X, MotionSP_Parameters.FftSize, Filter_Params);
 800d154:	4b6f      	ldr	r3, [pc, #444]	; (800d314 <MotionSP_FrequencyDomainProcess+0x210>)
 800d156:	881a      	ldrh	r2, [r3, #0]
 800d158:	4b77      	ldr	r3, [pc, #476]	; (800d338 <MotionSP_FrequencyDomainProcess+0x234>)
 800d15a:	4972      	ldr	r1, [pc, #456]	; (800d324 <MotionSP_FrequencyDomainProcess+0x220>)
 800d15c:	4877      	ldr	r0, [pc, #476]	; (800d33c <MotionSP_FrequencyDomainProcess+0x238>)
 800d15e:	f7ff ff0b 	bl	800cf78 <motionSP_fftUseWindow>
  MotionSP_fftCalc(&fftS, fftIn, fftOutX);
 800d162:	4a77      	ldr	r2, [pc, #476]	; (800d340 <MotionSP_FrequencyDomainProcess+0x23c>)
 800d164:	4975      	ldr	r1, [pc, #468]	; (800d33c <MotionSP_FrequencyDomainProcess+0x238>)
 800d166:	4877      	ldr	r0, [pc, #476]	; (800d344 <MotionSP_FrequencyDomainProcess+0x240>)
 800d168:	f7ff fcd0 	bl	800cb0c <MotionSP_fftCalc>



  if (MotionSP_fftAverageCalcTime(AccAxesAvgMagBuff.AXIS_X, fftOutX, magSize, &(AccSumCnt.AXIS_X), FinishAvgFlag))
 800d16c:	4b76      	ldr	r3, [pc, #472]	; (800d348 <MotionSP_FrequencyDomainProcess+0x244>)
 800d16e:	881a      	ldrh	r2, [r3, #0]
 800d170:	4b76      	ldr	r3, [pc, #472]	; (800d34c <MotionSP_FrequencyDomainProcess+0x248>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	4b76      	ldr	r3, [pc, #472]	; (800d350 <MotionSP_FrequencyDomainProcess+0x24c>)
 800d178:	4971      	ldr	r1, [pc, #452]	; (800d340 <MotionSP_FrequencyDomainProcess+0x23c>)
 800d17a:	4876      	ldr	r0, [pc, #472]	; (800d354 <MotionSP_FrequencyDomainProcess+0x250>)
 800d17c:	f7ff ff62 	bl	800d044 <MotionSP_fftAverageCalcTime>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00b      	beq.n	800d19e <MotionSP_FrequencyDomainProcess+0x9a>
  {
    // Save the Max FFT Number evaluated
    AccAxesMagResults.X_FFT_AVG = AccSumCnt.AXIS_X;
 800d186:	4b72      	ldr	r3, [pc, #456]	; (800d350 <MotionSP_FrequencyDomainProcess+0x24c>)
 800d188:	881a      	ldrh	r2, [r3, #0]
 800d18a:	4b73      	ldr	r3, [pc, #460]	; (800d358 <MotionSP_FrequencyDomainProcess+0x254>)
 800d18c:	811a      	strh	r2, [r3, #8]
    // Reset the FFT AVG Number for axis evaluated
    AccSumCnt.AXIS_X = 0;
 800d18e:	4b70      	ldr	r3, [pc, #448]	; (800d350 <MotionSP_FrequencyDomainProcess+0x24c>)
 800d190:	2200      	movs	r2, #0
 800d192:	801a      	strh	r2, [r3, #0]
    // AVG available
    AvgRdy.xAccAvgRdy = 1;
 800d194:	4a71      	ldr	r2, [pc, #452]	; (800d35c <MotionSP_FrequencyDomainProcess+0x258>)
 800d196:	7813      	ldrb	r3, [r2, #0]
 800d198:	f043 0301 	orr.w	r3, r3, #1
 800d19c:	7013      	strb	r3, [r2, #0]
  }

  /* ------------------ Second Axis: Analysis on Y-Acceleration ----------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_Y, MotionSP_Parameters.FftSize,
 800d19e:	4b5d      	ldr	r3, [pc, #372]	; (800d314 <MotionSP_FrequencyDomainProcess+0x210>)
 800d1a0:	881a      	ldrh	r2, [r3, #0]
 800d1a2:	4b65      	ldr	r3, [pc, #404]	; (800d338 <MotionSP_FrequencyDomainProcess+0x234>)
 800d1a4:	4961      	ldr	r1, [pc, #388]	; (800d32c <MotionSP_FrequencyDomainProcess+0x228>)
 800d1a6:	4865      	ldr	r0, [pc, #404]	; (800d33c <MotionSP_FrequencyDomainProcess+0x238>)
 800d1a8:	f7ff fee6 	bl	800cf78 <motionSP_fftUseWindow>
                        Filter_Params); /* Evaluate FFT on Acc Data */
  MotionSP_fftCalc(&fftS, fftIn, fftOutY);
 800d1ac:	4a6c      	ldr	r2, [pc, #432]	; (800d360 <MotionSP_FrequencyDomainProcess+0x25c>)
 800d1ae:	4963      	ldr	r1, [pc, #396]	; (800d33c <MotionSP_FrequencyDomainProcess+0x238>)
 800d1b0:	4864      	ldr	r0, [pc, #400]	; (800d344 <MotionSP_FrequencyDomainProcess+0x240>)
 800d1b2:	f7ff fcab 	bl	800cb0c <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccAxesAvgMagBuff.AXIS_Y, fftOutY, magSize, &(AccSumCnt.AXIS_Y), FinishAvgFlag))
 800d1b6:	4b64      	ldr	r3, [pc, #400]	; (800d348 <MotionSP_FrequencyDomainProcess+0x244>)
 800d1b8:	881a      	ldrh	r2, [r3, #0]
 800d1ba:	4b64      	ldr	r3, [pc, #400]	; (800d34c <MotionSP_FrequencyDomainProcess+0x248>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	4b68      	ldr	r3, [pc, #416]	; (800d364 <MotionSP_FrequencyDomainProcess+0x260>)
 800d1c2:	4967      	ldr	r1, [pc, #412]	; (800d360 <MotionSP_FrequencyDomainProcess+0x25c>)
 800d1c4:	4868      	ldr	r0, [pc, #416]	; (800d368 <MotionSP_FrequencyDomainProcess+0x264>)
 800d1c6:	f7ff ff3d 	bl	800d044 <MotionSP_fftAverageCalcTime>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00b      	beq.n	800d1e8 <MotionSP_FrequencyDomainProcess+0xe4>
  {
    // Save the Max FFT Number evaluated
    AccAxesMagResults.Y_FFT_AVG = AccSumCnt.AXIS_Y;    // Reset the FFT AVG Number for axis evaluated
 800d1d0:	4b5f      	ldr	r3, [pc, #380]	; (800d350 <MotionSP_FrequencyDomainProcess+0x24c>)
 800d1d2:	885a      	ldrh	r2, [r3, #2]
 800d1d4:	4b60      	ldr	r3, [pc, #384]	; (800d358 <MotionSP_FrequencyDomainProcess+0x254>)
 800d1d6:	829a      	strh	r2, [r3, #20]
    AccSumCnt.AXIS_Y = 0;
 800d1d8:	4b5d      	ldr	r3, [pc, #372]	; (800d350 <MotionSP_FrequencyDomainProcess+0x24c>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	805a      	strh	r2, [r3, #2]
    // AVG available
    AvgRdy.yAccAvgRdy = 1;
 800d1de:	4a5f      	ldr	r2, [pc, #380]	; (800d35c <MotionSP_FrequencyDomainProcess+0x258>)
 800d1e0:	7813      	ldrb	r3, [r2, #0]
 800d1e2:	f043 0302 	orr.w	r3, r3, #2
 800d1e6:	7013      	strb	r3, [r2, #0]
  }

  /* ------------------ Third Axis: Analysis on Z-Acceleration-------------*/
  /* Apply the Windowing before to perform FFT */
  motionSP_fftUseWindow(fftIn, AccAxesArray_fftIn.AXIS_Z, MotionSP_Parameters.FftSize, Filter_Params);
 800d1e8:	4b4a      	ldr	r3, [pc, #296]	; (800d314 <MotionSP_FrequencyDomainProcess+0x210>)
 800d1ea:	881a      	ldrh	r2, [r3, #0]
 800d1ec:	4b52      	ldr	r3, [pc, #328]	; (800d338 <MotionSP_FrequencyDomainProcess+0x234>)
 800d1ee:	4951      	ldr	r1, [pc, #324]	; (800d334 <MotionSP_FrequencyDomainProcess+0x230>)
 800d1f0:	4852      	ldr	r0, [pc, #328]	; (800d33c <MotionSP_FrequencyDomainProcess+0x238>)
 800d1f2:	f7ff fec1 	bl	800cf78 <motionSP_fftUseWindow>
  MotionSP_fftCalc(&fftS, fftIn, fftOutZ);
 800d1f6:	4a5d      	ldr	r2, [pc, #372]	; (800d36c <MotionSP_FrequencyDomainProcess+0x268>)
 800d1f8:	4950      	ldr	r1, [pc, #320]	; (800d33c <MotionSP_FrequencyDomainProcess+0x238>)
 800d1fa:	4852      	ldr	r0, [pc, #328]	; (800d344 <MotionSP_FrequencyDomainProcess+0x240>)
 800d1fc:	f7ff fc86 	bl	800cb0c <MotionSP_fftCalc>
  if (MotionSP_fftAverageCalcTime(AccAxesAvgMagBuff.AXIS_Z, fftOutZ, magSize, &(AccSumCnt.AXIS_Z), FinishAvgFlag))
 800d200:	4b51      	ldr	r3, [pc, #324]	; (800d348 <MotionSP_FrequencyDomainProcess+0x244>)
 800d202:	881a      	ldrh	r2, [r3, #0]
 800d204:	4b51      	ldr	r3, [pc, #324]	; (800d34c <MotionSP_FrequencyDomainProcess+0x248>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	4b59      	ldr	r3, [pc, #356]	; (800d370 <MotionSP_FrequencyDomainProcess+0x26c>)
 800d20c:	4957      	ldr	r1, [pc, #348]	; (800d36c <MotionSP_FrequencyDomainProcess+0x268>)
 800d20e:	4859      	ldr	r0, [pc, #356]	; (800d374 <MotionSP_FrequencyDomainProcess+0x270>)
 800d210:	f7ff ff18 	bl	800d044 <MotionSP_fftAverageCalcTime>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00b      	beq.n	800d232 <MotionSP_FrequencyDomainProcess+0x12e>
  {
    // Save the Max FFT Number evaluated
    AccAxesMagResults.Z_FFT_AVG = AccSumCnt.AXIS_Z;
 800d21a:	4b4d      	ldr	r3, [pc, #308]	; (800d350 <MotionSP_FrequencyDomainProcess+0x24c>)
 800d21c:	889a      	ldrh	r2, [r3, #4]
 800d21e:	4b4e      	ldr	r3, [pc, #312]	; (800d358 <MotionSP_FrequencyDomainProcess+0x254>)
 800d220:	841a      	strh	r2, [r3, #32]
    // Reset the FFT AVG Number for axis evaluated
    AccSumCnt.AXIS_Z = 0;
 800d222:	4b4b      	ldr	r3, [pc, #300]	; (800d350 <MotionSP_FrequencyDomainProcess+0x24c>)
 800d224:	2200      	movs	r2, #0
 800d226:	809a      	strh	r2, [r3, #4]
    // AVG available
    AvgRdy.zAccAvgRdy = 1;
 800d228:	4a4c      	ldr	r2, [pc, #304]	; (800d35c <MotionSP_FrequencyDomainProcess+0x258>)
 800d22a:	7813      	ldrb	r3, [r2, #0]
 800d22c:	f043 0304 	orr.w	r3, r3, #4
 800d230:	7013      	strb	r3, [r2, #0]
  }

  /* ---------------------------- Finish ----------------------------------*/
  if (AvgRdy.xAccAvgRdy & AvgRdy.yAccAvgRdy & AvgRdy.zAccAvgRdy)
 800d232:	4b4a      	ldr	r3, [pc, #296]	; (800d35c <MotionSP_FrequencyDomainProcess+0x258>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	461a      	mov	r2, r3
 800d23e:	4b47      	ldr	r3, [pc, #284]	; (800d35c <MotionSP_FrequencyDomainProcess+0x258>)
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d246:	b2db      	uxtb	r3, r3
 800d248:	4013      	ands	r3, r2
 800d24a:	4a44      	ldr	r2, [pc, #272]	; (800d35c <MotionSP_FrequencyDomainProcess+0x258>)
 800d24c:	7812      	ldrb	r2, [r2, #0]
 800d24e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800d252:	b2d2      	uxtb	r2, r2
 800d254:	4013      	ands	r3, r2
 800d256:	2b00      	cmp	r3, #0
 800d258:	d01b      	beq.n	800d292 <MotionSP_FrequencyDomainProcess+0x18e>
  {
    MotionSP_fftAdapt(&AccAxesAvgMagBuff, magSize);
 800d25a:	4b3b      	ldr	r3, [pc, #236]	; (800d348 <MotionSP_FrequencyDomainProcess+0x244>)
 800d25c:	881b      	ldrh	r3, [r3, #0]
 800d25e:	4619      	mov	r1, r3
 800d260:	483c      	ldr	r0, [pc, #240]	; (800d354 <MotionSP_FrequencyDomainProcess+0x250>)
 800d262:	f7ff fc6f 	bl	800cb44 <MotionSP_fftAdapt>
    MotionSP_fftFindPeak(&AccAxesAvgMagBuff, magSize, &AccAxesMagResults);
 800d266:	4b38      	ldr	r3, [pc, #224]	; (800d348 <MotionSP_FrequencyDomainProcess+0x244>)
 800d268:	881b      	ldrh	r3, [r3, #0]
 800d26a:	4a3b      	ldr	r2, [pc, #236]	; (800d358 <MotionSP_FrequencyDomainProcess+0x254>)
 800d26c:	4619      	mov	r1, r3
 800d26e:	4839      	ldr	r0, [pc, #228]	; (800d354 <MotionSP_FrequencyDomainProcess+0x250>)
 800d270:	f7ff fd2a 	bl	800ccc8 <MotionSP_fftFindPeak>
    MotionSP_evalMaxAmplitudeRange (AccAxesAvgMagBuff.AXIS_X, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_X, SRBinVal.AXIS_X);
    MotionSP_evalMaxAmplitudeRange (AccAxesAvgMagBuff.AXIS_Y, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_Y, SRBinVal.AXIS_Y);
    MotionSP_evalMaxAmplitudeRange (AccAxesAvgMagBuff.AXIS_Z, MotionSP_Parameters.subrange_num, SRAmplitude.AXIS_Z, SRBinVal.AXIS_Z);
#endif /* USE_SUBRANGE */

    AvgRdy.xAccAvgRdy = 0;
 800d274:	4a39      	ldr	r2, [pc, #228]	; (800d35c <MotionSP_FrequencyDomainProcess+0x258>)
 800d276:	7813      	ldrb	r3, [r2, #0]
 800d278:	f36f 0300 	bfc	r3, #0, #1
 800d27c:	7013      	strb	r3, [r2, #0]
    AvgRdy.yAccAvgRdy = 0;
 800d27e:	4a37      	ldr	r2, [pc, #220]	; (800d35c <MotionSP_FrequencyDomainProcess+0x258>)
 800d280:	7813      	ldrb	r3, [r2, #0]
 800d282:	f36f 0341 	bfc	r3, #1, #1
 800d286:	7013      	strb	r3, [r2, #0]
    AvgRdy.zAccAvgRdy = 0;
 800d288:	4a34      	ldr	r2, [pc, #208]	; (800d35c <MotionSP_FrequencyDomainProcess+0x258>)
 800d28a:	7813      	ldrb	r3, [r2, #0]
 800d28c:	f36f 0382 	bfc	r3, #2, #1
 800d290:	7013      	strb	r3, [r2, #0]
  }

  printf("\n\nFFT:\n");
 800d292:	4839      	ldr	r0, [pc, #228]	; (800d378 <MotionSP_FrequencyDomainProcess+0x274>)
 800d294:	f001 f80c 	bl	800e2b0 <puts>
    for(int i=0;i<MotionSP_Parameters.FftSize/2;i++)
 800d298:	2300      	movs	r3, #0
 800d29a:	607b      	str	r3, [r7, #4]
 800d29c:	e02a      	b.n	800d2f4 <MotionSP_FrequencyDomainProcess+0x1f0>
    {
  	  printf("Fr,%d,x,%f,y,%f,z,%f\n",i,fftOutX[i],fftOutY[i],fftOutZ[i]);
 800d29e:	4a28      	ldr	r2, [pc, #160]	; (800d340 <MotionSP_FrequencyDomainProcess+0x23c>)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4413      	add	r3, r2
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7f3 f9ad 	bl	8000608 <__aeabi_f2d>
 800d2ae:	4680      	mov	r8, r0
 800d2b0:	4689      	mov	r9, r1
 800d2b2:	4a2b      	ldr	r2, [pc, #172]	; (800d360 <MotionSP_FrequencyDomainProcess+0x25c>)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7f3 f9a3 	bl	8000608 <__aeabi_f2d>
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	460d      	mov	r5, r1
 800d2c6:	4a29      	ldr	r2, [pc, #164]	; (800d36c <MotionSP_FrequencyDomainProcess+0x268>)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4413      	add	r3, r2
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7f3 f999 	bl	8000608 <__aeabi_f2d>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	460b      	mov	r3, r1
 800d2da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2de:	e9cd 4500 	strd	r4, r5, [sp]
 800d2e2:	4642      	mov	r2, r8
 800d2e4:	464b      	mov	r3, r9
 800d2e6:	6879      	ldr	r1, [r7, #4]
 800d2e8:	4824      	ldr	r0, [pc, #144]	; (800d37c <MotionSP_FrequencyDomainProcess+0x278>)
 800d2ea:	f000 ff5b 	bl	800e1a4 <iprintf>
    for(int i=0;i<MotionSP_Parameters.FftSize/2;i++)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	607b      	str	r3, [r7, #4]
 800d2f4:	4b07      	ldr	r3, [pc, #28]	; (800d314 <MotionSP_FrequencyDomainProcess+0x210>)
 800d2f6:	881b      	ldrh	r3, [r3, #0]
 800d2f8:	085b      	lsrs	r3, r3, #1
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4293      	cmp	r3, r2
 800d302:	dbcc      	blt.n	800d29e <MotionSP_FrequencyDomainProcess+0x19a>
    }
  printf("\n\n");
 800d304:	481e      	ldr	r0, [pc, #120]	; (800d380 <MotionSP_FrequencyDomainProcess+0x27c>)
 800d306:	f000 ffd3 	bl	800e2b0 <puts>
}
 800d30a:	bf00      	nop
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d314:	200059b4 	.word	0x200059b4
 800d318:	2000728c 	.word	0x2000728c
 800d31c:	20004550 	.word	0x20004550
 800d320:	20007294 	.word	0x20007294
 800d324:	20000be4 	.word	0x20000be4
 800d328:	20007a94 	.word	0x20007a94
 800d32c:	200013e4 	.word	0x200013e4
 800d330:	20008294 	.word	0x20008294
 800d334:	20001be4 	.word	0x20001be4
 800d338:	20004578 	.word	0x20004578
 800d33c:	200023e4 	.word	0x200023e4
 800d340:	20002be4 	.word	0x20002be4
 800d344:	20004d9c 	.word	0x20004d9c
 800d348:	20000394 	.word	0x20000394
 800d34c:	20007288 	.word	0x20007288
 800d350:	20004d94 	.word	0x20004d94
 800d354:	20004db4 	.word	0x20004db4
 800d358:	20004554 	.word	0x20004554
 800d35c:	200033e4 	.word	0x200033e4
 800d360:	200033e8 	.word	0x200033e8
 800d364:	20004d96 	.word	0x20004d96
 800d368:	200051b4 	.word	0x200051b4
 800d36c:	20003be8 	.word	0x20003be8
 800d370:	20004d98 	.word	0x20004d98
 800d374:	200055b4 	.word	0x200055b4
 800d378:	080103ac 	.word	0x080103ac
 800d37c:	080103b4 	.word	0x080103b4
 800d380:	080103cc 	.word	0x080103cc

0800d384 <__errno>:
 800d384:	4b01      	ldr	r3, [pc, #4]	; (800d38c <__errno+0x8>)
 800d386:	6818      	ldr	r0, [r3, #0]
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	20000090 	.word	0x20000090

0800d390 <__sflush_r>:
 800d390:	898a      	ldrh	r2, [r1, #12]
 800d392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d396:	4605      	mov	r5, r0
 800d398:	0710      	lsls	r0, r2, #28
 800d39a:	460c      	mov	r4, r1
 800d39c:	d458      	bmi.n	800d450 <__sflush_r+0xc0>
 800d39e:	684b      	ldr	r3, [r1, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	dc05      	bgt.n	800d3b0 <__sflush_r+0x20>
 800d3a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	dc02      	bgt.n	800d3b0 <__sflush_r+0x20>
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3b2:	2e00      	cmp	r6, #0
 800d3b4:	d0f9      	beq.n	800d3aa <__sflush_r+0x1a>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3bc:	682f      	ldr	r7, [r5, #0]
 800d3be:	602b      	str	r3, [r5, #0]
 800d3c0:	d032      	beq.n	800d428 <__sflush_r+0x98>
 800d3c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	075a      	lsls	r2, r3, #29
 800d3c8:	d505      	bpl.n	800d3d6 <__sflush_r+0x46>
 800d3ca:	6863      	ldr	r3, [r4, #4]
 800d3cc:	1ac0      	subs	r0, r0, r3
 800d3ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3d0:	b10b      	cbz	r3, 800d3d6 <__sflush_r+0x46>
 800d3d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3d4:	1ac0      	subs	r0, r0, r3
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	4602      	mov	r2, r0
 800d3da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3dc:	6a21      	ldr	r1, [r4, #32]
 800d3de:	4628      	mov	r0, r5
 800d3e0:	47b0      	blx	r6
 800d3e2:	1c43      	adds	r3, r0, #1
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	d106      	bne.n	800d3f6 <__sflush_r+0x66>
 800d3e8:	6829      	ldr	r1, [r5, #0]
 800d3ea:	291d      	cmp	r1, #29
 800d3ec:	d82c      	bhi.n	800d448 <__sflush_r+0xb8>
 800d3ee:	4a2a      	ldr	r2, [pc, #168]	; (800d498 <__sflush_r+0x108>)
 800d3f0:	40ca      	lsrs	r2, r1
 800d3f2:	07d6      	lsls	r6, r2, #31
 800d3f4:	d528      	bpl.n	800d448 <__sflush_r+0xb8>
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	6062      	str	r2, [r4, #4]
 800d3fa:	04d9      	lsls	r1, r3, #19
 800d3fc:	6922      	ldr	r2, [r4, #16]
 800d3fe:	6022      	str	r2, [r4, #0]
 800d400:	d504      	bpl.n	800d40c <__sflush_r+0x7c>
 800d402:	1c42      	adds	r2, r0, #1
 800d404:	d101      	bne.n	800d40a <__sflush_r+0x7a>
 800d406:	682b      	ldr	r3, [r5, #0]
 800d408:	b903      	cbnz	r3, 800d40c <__sflush_r+0x7c>
 800d40a:	6560      	str	r0, [r4, #84]	; 0x54
 800d40c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d40e:	602f      	str	r7, [r5, #0]
 800d410:	2900      	cmp	r1, #0
 800d412:	d0ca      	beq.n	800d3aa <__sflush_r+0x1a>
 800d414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d418:	4299      	cmp	r1, r3
 800d41a:	d002      	beq.n	800d422 <__sflush_r+0x92>
 800d41c:	4628      	mov	r0, r5
 800d41e:	f000 f9ad 	bl	800d77c <_free_r>
 800d422:	2000      	movs	r0, #0
 800d424:	6360      	str	r0, [r4, #52]	; 0x34
 800d426:	e7c1      	b.n	800d3ac <__sflush_r+0x1c>
 800d428:	6a21      	ldr	r1, [r4, #32]
 800d42a:	2301      	movs	r3, #1
 800d42c:	4628      	mov	r0, r5
 800d42e:	47b0      	blx	r6
 800d430:	1c41      	adds	r1, r0, #1
 800d432:	d1c7      	bne.n	800d3c4 <__sflush_r+0x34>
 800d434:	682b      	ldr	r3, [r5, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d0c4      	beq.n	800d3c4 <__sflush_r+0x34>
 800d43a:	2b1d      	cmp	r3, #29
 800d43c:	d001      	beq.n	800d442 <__sflush_r+0xb2>
 800d43e:	2b16      	cmp	r3, #22
 800d440:	d101      	bne.n	800d446 <__sflush_r+0xb6>
 800d442:	602f      	str	r7, [r5, #0]
 800d444:	e7b1      	b.n	800d3aa <__sflush_r+0x1a>
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	e7ad      	b.n	800d3ac <__sflush_r+0x1c>
 800d450:	690f      	ldr	r7, [r1, #16]
 800d452:	2f00      	cmp	r7, #0
 800d454:	d0a9      	beq.n	800d3aa <__sflush_r+0x1a>
 800d456:	0793      	lsls	r3, r2, #30
 800d458:	680e      	ldr	r6, [r1, #0]
 800d45a:	bf08      	it	eq
 800d45c:	694b      	ldreq	r3, [r1, #20]
 800d45e:	600f      	str	r7, [r1, #0]
 800d460:	bf18      	it	ne
 800d462:	2300      	movne	r3, #0
 800d464:	eba6 0807 	sub.w	r8, r6, r7
 800d468:	608b      	str	r3, [r1, #8]
 800d46a:	f1b8 0f00 	cmp.w	r8, #0
 800d46e:	dd9c      	ble.n	800d3aa <__sflush_r+0x1a>
 800d470:	6a21      	ldr	r1, [r4, #32]
 800d472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d474:	4643      	mov	r3, r8
 800d476:	463a      	mov	r2, r7
 800d478:	4628      	mov	r0, r5
 800d47a:	47b0      	blx	r6
 800d47c:	2800      	cmp	r0, #0
 800d47e:	dc06      	bgt.n	800d48e <__sflush_r+0xfe>
 800d480:	89a3      	ldrh	r3, [r4, #12]
 800d482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d486:	81a3      	strh	r3, [r4, #12]
 800d488:	f04f 30ff 	mov.w	r0, #4294967295
 800d48c:	e78e      	b.n	800d3ac <__sflush_r+0x1c>
 800d48e:	4407      	add	r7, r0
 800d490:	eba8 0800 	sub.w	r8, r8, r0
 800d494:	e7e9      	b.n	800d46a <__sflush_r+0xda>
 800d496:	bf00      	nop
 800d498:	20400001 	.word	0x20400001

0800d49c <_fflush_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	690b      	ldr	r3, [r1, #16]
 800d4a0:	4605      	mov	r5, r0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	b913      	cbnz	r3, 800d4ac <_fflush_r+0x10>
 800d4a6:	2500      	movs	r5, #0
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	b118      	cbz	r0, 800d4b6 <_fflush_r+0x1a>
 800d4ae:	6983      	ldr	r3, [r0, #24]
 800d4b0:	b90b      	cbnz	r3, 800d4b6 <_fflush_r+0x1a>
 800d4b2:	f000 f887 	bl	800d5c4 <__sinit>
 800d4b6:	4b14      	ldr	r3, [pc, #80]	; (800d508 <_fflush_r+0x6c>)
 800d4b8:	429c      	cmp	r4, r3
 800d4ba:	d11b      	bne.n	800d4f4 <_fflush_r+0x58>
 800d4bc:	686c      	ldr	r4, [r5, #4]
 800d4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d0ef      	beq.n	800d4a6 <_fflush_r+0xa>
 800d4c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4c8:	07d0      	lsls	r0, r2, #31
 800d4ca:	d404      	bmi.n	800d4d6 <_fflush_r+0x3a>
 800d4cc:	0599      	lsls	r1, r3, #22
 800d4ce:	d402      	bmi.n	800d4d6 <_fflush_r+0x3a>
 800d4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4d2:	f000 f93a 	bl	800d74a <__retarget_lock_acquire_recursive>
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	4621      	mov	r1, r4
 800d4da:	f7ff ff59 	bl	800d390 <__sflush_r>
 800d4de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4e0:	07da      	lsls	r2, r3, #31
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	d4e0      	bmi.n	800d4a8 <_fflush_r+0xc>
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	059b      	lsls	r3, r3, #22
 800d4ea:	d4dd      	bmi.n	800d4a8 <_fflush_r+0xc>
 800d4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4ee:	f000 f92d 	bl	800d74c <__retarget_lock_release_recursive>
 800d4f2:	e7d9      	b.n	800d4a8 <_fflush_r+0xc>
 800d4f4:	4b05      	ldr	r3, [pc, #20]	; (800d50c <_fflush_r+0x70>)
 800d4f6:	429c      	cmp	r4, r3
 800d4f8:	d101      	bne.n	800d4fe <_fflush_r+0x62>
 800d4fa:	68ac      	ldr	r4, [r5, #8]
 800d4fc:	e7df      	b.n	800d4be <_fflush_r+0x22>
 800d4fe:	4b04      	ldr	r3, [pc, #16]	; (800d510 <_fflush_r+0x74>)
 800d500:	429c      	cmp	r4, r3
 800d502:	bf08      	it	eq
 800d504:	68ec      	ldreq	r4, [r5, #12]
 800d506:	e7da      	b.n	800d4be <_fflush_r+0x22>
 800d508:	080240ec 	.word	0x080240ec
 800d50c:	0802410c 	.word	0x0802410c
 800d510:	080240cc 	.word	0x080240cc

0800d514 <std>:
 800d514:	2300      	movs	r3, #0
 800d516:	b510      	push	{r4, lr}
 800d518:	4604      	mov	r4, r0
 800d51a:	e9c0 3300 	strd	r3, r3, [r0]
 800d51e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d522:	6083      	str	r3, [r0, #8]
 800d524:	8181      	strh	r1, [r0, #12]
 800d526:	6643      	str	r3, [r0, #100]	; 0x64
 800d528:	81c2      	strh	r2, [r0, #14]
 800d52a:	6183      	str	r3, [r0, #24]
 800d52c:	4619      	mov	r1, r3
 800d52e:	2208      	movs	r2, #8
 800d530:	305c      	adds	r0, #92	; 0x5c
 800d532:	f000 f91a 	bl	800d76a <memset>
 800d536:	4b05      	ldr	r3, [pc, #20]	; (800d54c <std+0x38>)
 800d538:	6263      	str	r3, [r4, #36]	; 0x24
 800d53a:	4b05      	ldr	r3, [pc, #20]	; (800d550 <std+0x3c>)
 800d53c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d53e:	4b05      	ldr	r3, [pc, #20]	; (800d554 <std+0x40>)
 800d540:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d542:	4b05      	ldr	r3, [pc, #20]	; (800d558 <std+0x44>)
 800d544:	6224      	str	r4, [r4, #32]
 800d546:	6323      	str	r3, [r4, #48]	; 0x30
 800d548:	bd10      	pop	{r4, pc}
 800d54a:	bf00      	nop
 800d54c:	0800e2e1 	.word	0x0800e2e1
 800d550:	0800e303 	.word	0x0800e303
 800d554:	0800e33b 	.word	0x0800e33b
 800d558:	0800e35f 	.word	0x0800e35f

0800d55c <_cleanup_r>:
 800d55c:	4901      	ldr	r1, [pc, #4]	; (800d564 <_cleanup_r+0x8>)
 800d55e:	f000 b8af 	b.w	800d6c0 <_fwalk_reent>
 800d562:	bf00      	nop
 800d564:	0800d49d 	.word	0x0800d49d

0800d568 <__sfmoreglue>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	1e4a      	subs	r2, r1, #1
 800d56c:	2568      	movs	r5, #104	; 0x68
 800d56e:	4355      	muls	r5, r2
 800d570:	460e      	mov	r6, r1
 800d572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d576:	f000 f951 	bl	800d81c <_malloc_r>
 800d57a:	4604      	mov	r4, r0
 800d57c:	b140      	cbz	r0, 800d590 <__sfmoreglue+0x28>
 800d57e:	2100      	movs	r1, #0
 800d580:	e9c0 1600 	strd	r1, r6, [r0]
 800d584:	300c      	adds	r0, #12
 800d586:	60a0      	str	r0, [r4, #8]
 800d588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d58c:	f000 f8ed 	bl	800d76a <memset>
 800d590:	4620      	mov	r0, r4
 800d592:	bd70      	pop	{r4, r5, r6, pc}

0800d594 <__sfp_lock_acquire>:
 800d594:	4801      	ldr	r0, [pc, #4]	; (800d59c <__sfp_lock_acquire+0x8>)
 800d596:	f000 b8d8 	b.w	800d74a <__retarget_lock_acquire_recursive>
 800d59a:	bf00      	nop
 800d59c:	20008aa8 	.word	0x20008aa8

0800d5a0 <__sfp_lock_release>:
 800d5a0:	4801      	ldr	r0, [pc, #4]	; (800d5a8 <__sfp_lock_release+0x8>)
 800d5a2:	f000 b8d3 	b.w	800d74c <__retarget_lock_release_recursive>
 800d5a6:	bf00      	nop
 800d5a8:	20008aa8 	.word	0x20008aa8

0800d5ac <__sinit_lock_acquire>:
 800d5ac:	4801      	ldr	r0, [pc, #4]	; (800d5b4 <__sinit_lock_acquire+0x8>)
 800d5ae:	f000 b8cc 	b.w	800d74a <__retarget_lock_acquire_recursive>
 800d5b2:	bf00      	nop
 800d5b4:	20008aa3 	.word	0x20008aa3

0800d5b8 <__sinit_lock_release>:
 800d5b8:	4801      	ldr	r0, [pc, #4]	; (800d5c0 <__sinit_lock_release+0x8>)
 800d5ba:	f000 b8c7 	b.w	800d74c <__retarget_lock_release_recursive>
 800d5be:	bf00      	nop
 800d5c0:	20008aa3 	.word	0x20008aa3

0800d5c4 <__sinit>:
 800d5c4:	b510      	push	{r4, lr}
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	f7ff fff0 	bl	800d5ac <__sinit_lock_acquire>
 800d5cc:	69a3      	ldr	r3, [r4, #24]
 800d5ce:	b11b      	cbz	r3, 800d5d8 <__sinit+0x14>
 800d5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5d4:	f7ff bff0 	b.w	800d5b8 <__sinit_lock_release>
 800d5d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d5dc:	6523      	str	r3, [r4, #80]	; 0x50
 800d5de:	4b13      	ldr	r3, [pc, #76]	; (800d62c <__sinit+0x68>)
 800d5e0:	4a13      	ldr	r2, [pc, #76]	; (800d630 <__sinit+0x6c>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d5e6:	42a3      	cmp	r3, r4
 800d5e8:	bf04      	itt	eq
 800d5ea:	2301      	moveq	r3, #1
 800d5ec:	61a3      	streq	r3, [r4, #24]
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f000 f820 	bl	800d634 <__sfp>
 800d5f4:	6060      	str	r0, [r4, #4]
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f000 f81c 	bl	800d634 <__sfp>
 800d5fc:	60a0      	str	r0, [r4, #8]
 800d5fe:	4620      	mov	r0, r4
 800d600:	f000 f818 	bl	800d634 <__sfp>
 800d604:	2200      	movs	r2, #0
 800d606:	60e0      	str	r0, [r4, #12]
 800d608:	2104      	movs	r1, #4
 800d60a:	6860      	ldr	r0, [r4, #4]
 800d60c:	f7ff ff82 	bl	800d514 <std>
 800d610:	68a0      	ldr	r0, [r4, #8]
 800d612:	2201      	movs	r2, #1
 800d614:	2109      	movs	r1, #9
 800d616:	f7ff ff7d 	bl	800d514 <std>
 800d61a:	68e0      	ldr	r0, [r4, #12]
 800d61c:	2202      	movs	r2, #2
 800d61e:	2112      	movs	r1, #18
 800d620:	f7ff ff78 	bl	800d514 <std>
 800d624:	2301      	movs	r3, #1
 800d626:	61a3      	str	r3, [r4, #24]
 800d628:	e7d2      	b.n	800d5d0 <__sinit+0xc>
 800d62a:	bf00      	nop
 800d62c:	0802412c 	.word	0x0802412c
 800d630:	0800d55d 	.word	0x0800d55d

0800d634 <__sfp>:
 800d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d636:	4607      	mov	r7, r0
 800d638:	f7ff ffac 	bl	800d594 <__sfp_lock_acquire>
 800d63c:	4b1e      	ldr	r3, [pc, #120]	; (800d6b8 <__sfp+0x84>)
 800d63e:	681e      	ldr	r6, [r3, #0]
 800d640:	69b3      	ldr	r3, [r6, #24]
 800d642:	b913      	cbnz	r3, 800d64a <__sfp+0x16>
 800d644:	4630      	mov	r0, r6
 800d646:	f7ff ffbd 	bl	800d5c4 <__sinit>
 800d64a:	3648      	adds	r6, #72	; 0x48
 800d64c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d650:	3b01      	subs	r3, #1
 800d652:	d503      	bpl.n	800d65c <__sfp+0x28>
 800d654:	6833      	ldr	r3, [r6, #0]
 800d656:	b30b      	cbz	r3, 800d69c <__sfp+0x68>
 800d658:	6836      	ldr	r6, [r6, #0]
 800d65a:	e7f7      	b.n	800d64c <__sfp+0x18>
 800d65c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d660:	b9d5      	cbnz	r5, 800d698 <__sfp+0x64>
 800d662:	4b16      	ldr	r3, [pc, #88]	; (800d6bc <__sfp+0x88>)
 800d664:	60e3      	str	r3, [r4, #12]
 800d666:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d66a:	6665      	str	r5, [r4, #100]	; 0x64
 800d66c:	f000 f86c 	bl	800d748 <__retarget_lock_init_recursive>
 800d670:	f7ff ff96 	bl	800d5a0 <__sfp_lock_release>
 800d674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d67c:	6025      	str	r5, [r4, #0]
 800d67e:	61a5      	str	r5, [r4, #24]
 800d680:	2208      	movs	r2, #8
 800d682:	4629      	mov	r1, r5
 800d684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d688:	f000 f86f 	bl	800d76a <memset>
 800d68c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d694:	4620      	mov	r0, r4
 800d696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d698:	3468      	adds	r4, #104	; 0x68
 800d69a:	e7d9      	b.n	800d650 <__sfp+0x1c>
 800d69c:	2104      	movs	r1, #4
 800d69e:	4638      	mov	r0, r7
 800d6a0:	f7ff ff62 	bl	800d568 <__sfmoreglue>
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	6030      	str	r0, [r6, #0]
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d1d5      	bne.n	800d658 <__sfp+0x24>
 800d6ac:	f7ff ff78 	bl	800d5a0 <__sfp_lock_release>
 800d6b0:	230c      	movs	r3, #12
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	e7ee      	b.n	800d694 <__sfp+0x60>
 800d6b6:	bf00      	nop
 800d6b8:	0802412c 	.word	0x0802412c
 800d6bc:	ffff0001 	.word	0xffff0001

0800d6c0 <_fwalk_reent>:
 800d6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	4688      	mov	r8, r1
 800d6c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6cc:	2700      	movs	r7, #0
 800d6ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6d2:	f1b9 0901 	subs.w	r9, r9, #1
 800d6d6:	d505      	bpl.n	800d6e4 <_fwalk_reent+0x24>
 800d6d8:	6824      	ldr	r4, [r4, #0]
 800d6da:	2c00      	cmp	r4, #0
 800d6dc:	d1f7      	bne.n	800d6ce <_fwalk_reent+0xe>
 800d6de:	4638      	mov	r0, r7
 800d6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6e4:	89ab      	ldrh	r3, [r5, #12]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d907      	bls.n	800d6fa <_fwalk_reent+0x3a>
 800d6ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	d003      	beq.n	800d6fa <_fwalk_reent+0x3a>
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	47c0      	blx	r8
 800d6f8:	4307      	orrs	r7, r0
 800d6fa:	3568      	adds	r5, #104	; 0x68
 800d6fc:	e7e9      	b.n	800d6d2 <_fwalk_reent+0x12>
	...

0800d700 <__libc_init_array>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	4d0d      	ldr	r5, [pc, #52]	; (800d738 <__libc_init_array+0x38>)
 800d704:	4c0d      	ldr	r4, [pc, #52]	; (800d73c <__libc_init_array+0x3c>)
 800d706:	1b64      	subs	r4, r4, r5
 800d708:	10a4      	asrs	r4, r4, #2
 800d70a:	2600      	movs	r6, #0
 800d70c:	42a6      	cmp	r6, r4
 800d70e:	d109      	bne.n	800d724 <__libc_init_array+0x24>
 800d710:	4d0b      	ldr	r5, [pc, #44]	; (800d740 <__libc_init_array+0x40>)
 800d712:	4c0c      	ldr	r4, [pc, #48]	; (800d744 <__libc_init_array+0x44>)
 800d714:	f002 fdc4 	bl	80102a0 <_init>
 800d718:	1b64      	subs	r4, r4, r5
 800d71a:	10a4      	asrs	r4, r4, #2
 800d71c:	2600      	movs	r6, #0
 800d71e:	42a6      	cmp	r6, r4
 800d720:	d105      	bne.n	800d72e <__libc_init_array+0x2e>
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	f855 3b04 	ldr.w	r3, [r5], #4
 800d728:	4798      	blx	r3
 800d72a:	3601      	adds	r6, #1
 800d72c:	e7ee      	b.n	800d70c <__libc_init_array+0xc>
 800d72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d732:	4798      	blx	r3
 800d734:	3601      	adds	r6, #1
 800d736:	e7f2      	b.n	800d71e <__libc_init_array+0x1e>
 800d738:	080244e8 	.word	0x080244e8
 800d73c:	080244e8 	.word	0x080244e8
 800d740:	080244e8 	.word	0x080244e8
 800d744:	080244ec 	.word	0x080244ec

0800d748 <__retarget_lock_init_recursive>:
 800d748:	4770      	bx	lr

0800d74a <__retarget_lock_acquire_recursive>:
 800d74a:	4770      	bx	lr

0800d74c <__retarget_lock_release_recursive>:
 800d74c:	4770      	bx	lr

0800d74e <memcpy>:
 800d74e:	440a      	add	r2, r1
 800d750:	4291      	cmp	r1, r2
 800d752:	f100 33ff 	add.w	r3, r0, #4294967295
 800d756:	d100      	bne.n	800d75a <memcpy+0xc>
 800d758:	4770      	bx	lr
 800d75a:	b510      	push	{r4, lr}
 800d75c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d760:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d764:	4291      	cmp	r1, r2
 800d766:	d1f9      	bne.n	800d75c <memcpy+0xe>
 800d768:	bd10      	pop	{r4, pc}

0800d76a <memset>:
 800d76a:	4402      	add	r2, r0
 800d76c:	4603      	mov	r3, r0
 800d76e:	4293      	cmp	r3, r2
 800d770:	d100      	bne.n	800d774 <memset+0xa>
 800d772:	4770      	bx	lr
 800d774:	f803 1b01 	strb.w	r1, [r3], #1
 800d778:	e7f9      	b.n	800d76e <memset+0x4>
	...

0800d77c <_free_r>:
 800d77c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d77e:	2900      	cmp	r1, #0
 800d780:	d048      	beq.n	800d814 <_free_r+0x98>
 800d782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d786:	9001      	str	r0, [sp, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f1a1 0404 	sub.w	r4, r1, #4
 800d78e:	bfb8      	it	lt
 800d790:	18e4      	addlt	r4, r4, r3
 800d792:	f001 fdc7 	bl	800f324 <__malloc_lock>
 800d796:	4a20      	ldr	r2, [pc, #128]	; (800d818 <_free_r+0x9c>)
 800d798:	9801      	ldr	r0, [sp, #4]
 800d79a:	6813      	ldr	r3, [r2, #0]
 800d79c:	4615      	mov	r5, r2
 800d79e:	b933      	cbnz	r3, 800d7ae <_free_r+0x32>
 800d7a0:	6063      	str	r3, [r4, #4]
 800d7a2:	6014      	str	r4, [r2, #0]
 800d7a4:	b003      	add	sp, #12
 800d7a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7aa:	f001 bdc1 	b.w	800f330 <__malloc_unlock>
 800d7ae:	42a3      	cmp	r3, r4
 800d7b0:	d90b      	bls.n	800d7ca <_free_r+0x4e>
 800d7b2:	6821      	ldr	r1, [r4, #0]
 800d7b4:	1862      	adds	r2, r4, r1
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	bf04      	itt	eq
 800d7ba:	681a      	ldreq	r2, [r3, #0]
 800d7bc:	685b      	ldreq	r3, [r3, #4]
 800d7be:	6063      	str	r3, [r4, #4]
 800d7c0:	bf04      	itt	eq
 800d7c2:	1852      	addeq	r2, r2, r1
 800d7c4:	6022      	streq	r2, [r4, #0]
 800d7c6:	602c      	str	r4, [r5, #0]
 800d7c8:	e7ec      	b.n	800d7a4 <_free_r+0x28>
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	b10b      	cbz	r3, 800d7d4 <_free_r+0x58>
 800d7d0:	42a3      	cmp	r3, r4
 800d7d2:	d9fa      	bls.n	800d7ca <_free_r+0x4e>
 800d7d4:	6811      	ldr	r1, [r2, #0]
 800d7d6:	1855      	adds	r5, r2, r1
 800d7d8:	42a5      	cmp	r5, r4
 800d7da:	d10b      	bne.n	800d7f4 <_free_r+0x78>
 800d7dc:	6824      	ldr	r4, [r4, #0]
 800d7de:	4421      	add	r1, r4
 800d7e0:	1854      	adds	r4, r2, r1
 800d7e2:	42a3      	cmp	r3, r4
 800d7e4:	6011      	str	r1, [r2, #0]
 800d7e6:	d1dd      	bne.n	800d7a4 <_free_r+0x28>
 800d7e8:	681c      	ldr	r4, [r3, #0]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	6053      	str	r3, [r2, #4]
 800d7ee:	4421      	add	r1, r4
 800d7f0:	6011      	str	r1, [r2, #0]
 800d7f2:	e7d7      	b.n	800d7a4 <_free_r+0x28>
 800d7f4:	d902      	bls.n	800d7fc <_free_r+0x80>
 800d7f6:	230c      	movs	r3, #12
 800d7f8:	6003      	str	r3, [r0, #0]
 800d7fa:	e7d3      	b.n	800d7a4 <_free_r+0x28>
 800d7fc:	6825      	ldr	r5, [r4, #0]
 800d7fe:	1961      	adds	r1, r4, r5
 800d800:	428b      	cmp	r3, r1
 800d802:	bf04      	itt	eq
 800d804:	6819      	ldreq	r1, [r3, #0]
 800d806:	685b      	ldreq	r3, [r3, #4]
 800d808:	6063      	str	r3, [r4, #4]
 800d80a:	bf04      	itt	eq
 800d80c:	1949      	addeq	r1, r1, r5
 800d80e:	6021      	streq	r1, [r4, #0]
 800d810:	6054      	str	r4, [r2, #4]
 800d812:	e7c7      	b.n	800d7a4 <_free_r+0x28>
 800d814:	b003      	add	sp, #12
 800d816:	bd30      	pop	{r4, r5, pc}
 800d818:	200043e8 	.word	0x200043e8

0800d81c <_malloc_r>:
 800d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81e:	1ccd      	adds	r5, r1, #3
 800d820:	f025 0503 	bic.w	r5, r5, #3
 800d824:	3508      	adds	r5, #8
 800d826:	2d0c      	cmp	r5, #12
 800d828:	bf38      	it	cc
 800d82a:	250c      	movcc	r5, #12
 800d82c:	2d00      	cmp	r5, #0
 800d82e:	4606      	mov	r6, r0
 800d830:	db01      	blt.n	800d836 <_malloc_r+0x1a>
 800d832:	42a9      	cmp	r1, r5
 800d834:	d903      	bls.n	800d83e <_malloc_r+0x22>
 800d836:	230c      	movs	r3, #12
 800d838:	6033      	str	r3, [r6, #0]
 800d83a:	2000      	movs	r0, #0
 800d83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d83e:	f001 fd71 	bl	800f324 <__malloc_lock>
 800d842:	4921      	ldr	r1, [pc, #132]	; (800d8c8 <_malloc_r+0xac>)
 800d844:	680a      	ldr	r2, [r1, #0]
 800d846:	4614      	mov	r4, r2
 800d848:	b99c      	cbnz	r4, 800d872 <_malloc_r+0x56>
 800d84a:	4f20      	ldr	r7, [pc, #128]	; (800d8cc <_malloc_r+0xb0>)
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	b923      	cbnz	r3, 800d85a <_malloc_r+0x3e>
 800d850:	4621      	mov	r1, r4
 800d852:	4630      	mov	r0, r6
 800d854:	f000 fd34 	bl	800e2c0 <_sbrk_r>
 800d858:	6038      	str	r0, [r7, #0]
 800d85a:	4629      	mov	r1, r5
 800d85c:	4630      	mov	r0, r6
 800d85e:	f000 fd2f 	bl	800e2c0 <_sbrk_r>
 800d862:	1c43      	adds	r3, r0, #1
 800d864:	d123      	bne.n	800d8ae <_malloc_r+0x92>
 800d866:	230c      	movs	r3, #12
 800d868:	6033      	str	r3, [r6, #0]
 800d86a:	4630      	mov	r0, r6
 800d86c:	f001 fd60 	bl	800f330 <__malloc_unlock>
 800d870:	e7e3      	b.n	800d83a <_malloc_r+0x1e>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	1b5b      	subs	r3, r3, r5
 800d876:	d417      	bmi.n	800d8a8 <_malloc_r+0x8c>
 800d878:	2b0b      	cmp	r3, #11
 800d87a:	d903      	bls.n	800d884 <_malloc_r+0x68>
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	441c      	add	r4, r3
 800d880:	6025      	str	r5, [r4, #0]
 800d882:	e004      	b.n	800d88e <_malloc_r+0x72>
 800d884:	6863      	ldr	r3, [r4, #4]
 800d886:	42a2      	cmp	r2, r4
 800d888:	bf0c      	ite	eq
 800d88a:	600b      	streq	r3, [r1, #0]
 800d88c:	6053      	strne	r3, [r2, #4]
 800d88e:	4630      	mov	r0, r6
 800d890:	f001 fd4e 	bl	800f330 <__malloc_unlock>
 800d894:	f104 000b 	add.w	r0, r4, #11
 800d898:	1d23      	adds	r3, r4, #4
 800d89a:	f020 0007 	bic.w	r0, r0, #7
 800d89e:	1ac2      	subs	r2, r0, r3
 800d8a0:	d0cc      	beq.n	800d83c <_malloc_r+0x20>
 800d8a2:	1a1b      	subs	r3, r3, r0
 800d8a4:	50a3      	str	r3, [r4, r2]
 800d8a6:	e7c9      	b.n	800d83c <_malloc_r+0x20>
 800d8a8:	4622      	mov	r2, r4
 800d8aa:	6864      	ldr	r4, [r4, #4]
 800d8ac:	e7cc      	b.n	800d848 <_malloc_r+0x2c>
 800d8ae:	1cc4      	adds	r4, r0, #3
 800d8b0:	f024 0403 	bic.w	r4, r4, #3
 800d8b4:	42a0      	cmp	r0, r4
 800d8b6:	d0e3      	beq.n	800d880 <_malloc_r+0x64>
 800d8b8:	1a21      	subs	r1, r4, r0
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	f000 fd00 	bl	800e2c0 <_sbrk_r>
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	d1dd      	bne.n	800d880 <_malloc_r+0x64>
 800d8c4:	e7cf      	b.n	800d866 <_malloc_r+0x4a>
 800d8c6:	bf00      	nop
 800d8c8:	200043e8 	.word	0x200043e8
 800d8cc:	200043ec 	.word	0x200043ec

0800d8d0 <__cvt>:
 800d8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d4:	ec55 4b10 	vmov	r4, r5, d0
 800d8d8:	2d00      	cmp	r5, #0
 800d8da:	460e      	mov	r6, r1
 800d8dc:	4619      	mov	r1, r3
 800d8de:	462b      	mov	r3, r5
 800d8e0:	bfbb      	ittet	lt
 800d8e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d8e6:	461d      	movlt	r5, r3
 800d8e8:	2300      	movge	r3, #0
 800d8ea:	232d      	movlt	r3, #45	; 0x2d
 800d8ec:	700b      	strb	r3, [r1, #0]
 800d8ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d8f4:	4691      	mov	r9, r2
 800d8f6:	f023 0820 	bic.w	r8, r3, #32
 800d8fa:	bfbc      	itt	lt
 800d8fc:	4622      	movlt	r2, r4
 800d8fe:	4614      	movlt	r4, r2
 800d900:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d904:	d005      	beq.n	800d912 <__cvt+0x42>
 800d906:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d90a:	d100      	bne.n	800d90e <__cvt+0x3e>
 800d90c:	3601      	adds	r6, #1
 800d90e:	2102      	movs	r1, #2
 800d910:	e000      	b.n	800d914 <__cvt+0x44>
 800d912:	2103      	movs	r1, #3
 800d914:	ab03      	add	r3, sp, #12
 800d916:	9301      	str	r3, [sp, #4]
 800d918:	ab02      	add	r3, sp, #8
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	ec45 4b10 	vmov	d0, r4, r5
 800d920:	4653      	mov	r3, sl
 800d922:	4632      	mov	r2, r6
 800d924:	f000 fe90 	bl	800e648 <_dtoa_r>
 800d928:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d92c:	4607      	mov	r7, r0
 800d92e:	d102      	bne.n	800d936 <__cvt+0x66>
 800d930:	f019 0f01 	tst.w	r9, #1
 800d934:	d022      	beq.n	800d97c <__cvt+0xac>
 800d936:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d93a:	eb07 0906 	add.w	r9, r7, r6
 800d93e:	d110      	bne.n	800d962 <__cvt+0x92>
 800d940:	783b      	ldrb	r3, [r7, #0]
 800d942:	2b30      	cmp	r3, #48	; 0x30
 800d944:	d10a      	bne.n	800d95c <__cvt+0x8c>
 800d946:	2200      	movs	r2, #0
 800d948:	2300      	movs	r3, #0
 800d94a:	4620      	mov	r0, r4
 800d94c:	4629      	mov	r1, r5
 800d94e:	f7f3 f91b 	bl	8000b88 <__aeabi_dcmpeq>
 800d952:	b918      	cbnz	r0, 800d95c <__cvt+0x8c>
 800d954:	f1c6 0601 	rsb	r6, r6, #1
 800d958:	f8ca 6000 	str.w	r6, [sl]
 800d95c:	f8da 3000 	ldr.w	r3, [sl]
 800d960:	4499      	add	r9, r3
 800d962:	2200      	movs	r2, #0
 800d964:	2300      	movs	r3, #0
 800d966:	4620      	mov	r0, r4
 800d968:	4629      	mov	r1, r5
 800d96a:	f7f3 f90d 	bl	8000b88 <__aeabi_dcmpeq>
 800d96e:	b108      	cbz	r0, 800d974 <__cvt+0xa4>
 800d970:	f8cd 900c 	str.w	r9, [sp, #12]
 800d974:	2230      	movs	r2, #48	; 0x30
 800d976:	9b03      	ldr	r3, [sp, #12]
 800d978:	454b      	cmp	r3, r9
 800d97a:	d307      	bcc.n	800d98c <__cvt+0xbc>
 800d97c:	9b03      	ldr	r3, [sp, #12]
 800d97e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d980:	1bdb      	subs	r3, r3, r7
 800d982:	4638      	mov	r0, r7
 800d984:	6013      	str	r3, [r2, #0]
 800d986:	b004      	add	sp, #16
 800d988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d98c:	1c59      	adds	r1, r3, #1
 800d98e:	9103      	str	r1, [sp, #12]
 800d990:	701a      	strb	r2, [r3, #0]
 800d992:	e7f0      	b.n	800d976 <__cvt+0xa6>

0800d994 <__exponent>:
 800d994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d996:	4603      	mov	r3, r0
 800d998:	2900      	cmp	r1, #0
 800d99a:	bfb8      	it	lt
 800d99c:	4249      	neglt	r1, r1
 800d99e:	f803 2b02 	strb.w	r2, [r3], #2
 800d9a2:	bfb4      	ite	lt
 800d9a4:	222d      	movlt	r2, #45	; 0x2d
 800d9a6:	222b      	movge	r2, #43	; 0x2b
 800d9a8:	2909      	cmp	r1, #9
 800d9aa:	7042      	strb	r2, [r0, #1]
 800d9ac:	dd2a      	ble.n	800da04 <__exponent+0x70>
 800d9ae:	f10d 0407 	add.w	r4, sp, #7
 800d9b2:	46a4      	mov	ip, r4
 800d9b4:	270a      	movs	r7, #10
 800d9b6:	46a6      	mov	lr, r4
 800d9b8:	460a      	mov	r2, r1
 800d9ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800d9be:	fb07 1516 	mls	r5, r7, r6, r1
 800d9c2:	3530      	adds	r5, #48	; 0x30
 800d9c4:	2a63      	cmp	r2, #99	; 0x63
 800d9c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800d9ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	dcf1      	bgt.n	800d9b6 <__exponent+0x22>
 800d9d2:	3130      	adds	r1, #48	; 0x30
 800d9d4:	f1ae 0502 	sub.w	r5, lr, #2
 800d9d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d9dc:	1c44      	adds	r4, r0, #1
 800d9de:	4629      	mov	r1, r5
 800d9e0:	4561      	cmp	r1, ip
 800d9e2:	d30a      	bcc.n	800d9fa <__exponent+0x66>
 800d9e4:	f10d 0209 	add.w	r2, sp, #9
 800d9e8:	eba2 020e 	sub.w	r2, r2, lr
 800d9ec:	4565      	cmp	r5, ip
 800d9ee:	bf88      	it	hi
 800d9f0:	2200      	movhi	r2, #0
 800d9f2:	4413      	add	r3, r2
 800d9f4:	1a18      	subs	r0, r3, r0
 800d9f6:	b003      	add	sp, #12
 800d9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800da02:	e7ed      	b.n	800d9e0 <__exponent+0x4c>
 800da04:	2330      	movs	r3, #48	; 0x30
 800da06:	3130      	adds	r1, #48	; 0x30
 800da08:	7083      	strb	r3, [r0, #2]
 800da0a:	70c1      	strb	r1, [r0, #3]
 800da0c:	1d03      	adds	r3, r0, #4
 800da0e:	e7f1      	b.n	800d9f4 <__exponent+0x60>

0800da10 <_printf_float>:
 800da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da14:	ed2d 8b02 	vpush	{d8}
 800da18:	b08d      	sub	sp, #52	; 0x34
 800da1a:	460c      	mov	r4, r1
 800da1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800da20:	4616      	mov	r6, r2
 800da22:	461f      	mov	r7, r3
 800da24:	4605      	mov	r5, r0
 800da26:	f001 fbfb 	bl	800f220 <_localeconv_r>
 800da2a:	f8d0 a000 	ldr.w	sl, [r0]
 800da2e:	4650      	mov	r0, sl
 800da30:	f7f2 fc2e 	bl	8000290 <strlen>
 800da34:	2300      	movs	r3, #0
 800da36:	930a      	str	r3, [sp, #40]	; 0x28
 800da38:	6823      	ldr	r3, [r4, #0]
 800da3a:	9305      	str	r3, [sp, #20]
 800da3c:	f8d8 3000 	ldr.w	r3, [r8]
 800da40:	f894 b018 	ldrb.w	fp, [r4, #24]
 800da44:	3307      	adds	r3, #7
 800da46:	f023 0307 	bic.w	r3, r3, #7
 800da4a:	f103 0208 	add.w	r2, r3, #8
 800da4e:	f8c8 2000 	str.w	r2, [r8]
 800da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800da5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800da5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da62:	9307      	str	r3, [sp, #28]
 800da64:	f8cd 8018 	str.w	r8, [sp, #24]
 800da68:	ee08 0a10 	vmov	s16, r0
 800da6c:	4b9f      	ldr	r3, [pc, #636]	; (800dcec <_printf_float+0x2dc>)
 800da6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da72:	f04f 32ff 	mov.w	r2, #4294967295
 800da76:	f7f3 f8b9 	bl	8000bec <__aeabi_dcmpun>
 800da7a:	bb88      	cbnz	r0, 800dae0 <_printf_float+0xd0>
 800da7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da80:	4b9a      	ldr	r3, [pc, #616]	; (800dcec <_printf_float+0x2dc>)
 800da82:	f04f 32ff 	mov.w	r2, #4294967295
 800da86:	f7f3 f893 	bl	8000bb0 <__aeabi_dcmple>
 800da8a:	bb48      	cbnz	r0, 800dae0 <_printf_float+0xd0>
 800da8c:	2200      	movs	r2, #0
 800da8e:	2300      	movs	r3, #0
 800da90:	4640      	mov	r0, r8
 800da92:	4649      	mov	r1, r9
 800da94:	f7f3 f882 	bl	8000b9c <__aeabi_dcmplt>
 800da98:	b110      	cbz	r0, 800daa0 <_printf_float+0x90>
 800da9a:	232d      	movs	r3, #45	; 0x2d
 800da9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daa0:	4b93      	ldr	r3, [pc, #588]	; (800dcf0 <_printf_float+0x2e0>)
 800daa2:	4894      	ldr	r0, [pc, #592]	; (800dcf4 <_printf_float+0x2e4>)
 800daa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800daa8:	bf94      	ite	ls
 800daaa:	4698      	movls	r8, r3
 800daac:	4680      	movhi	r8, r0
 800daae:	2303      	movs	r3, #3
 800dab0:	6123      	str	r3, [r4, #16]
 800dab2:	9b05      	ldr	r3, [sp, #20]
 800dab4:	f023 0204 	bic.w	r2, r3, #4
 800dab8:	6022      	str	r2, [r4, #0]
 800daba:	f04f 0900 	mov.w	r9, #0
 800dabe:	9700      	str	r7, [sp, #0]
 800dac0:	4633      	mov	r3, r6
 800dac2:	aa0b      	add	r2, sp, #44	; 0x2c
 800dac4:	4621      	mov	r1, r4
 800dac6:	4628      	mov	r0, r5
 800dac8:	f000 f9d8 	bl	800de7c <_printf_common>
 800dacc:	3001      	adds	r0, #1
 800dace:	f040 8090 	bne.w	800dbf2 <_printf_float+0x1e2>
 800dad2:	f04f 30ff 	mov.w	r0, #4294967295
 800dad6:	b00d      	add	sp, #52	; 0x34
 800dad8:	ecbd 8b02 	vpop	{d8}
 800dadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae0:	4642      	mov	r2, r8
 800dae2:	464b      	mov	r3, r9
 800dae4:	4640      	mov	r0, r8
 800dae6:	4649      	mov	r1, r9
 800dae8:	f7f3 f880 	bl	8000bec <__aeabi_dcmpun>
 800daec:	b140      	cbz	r0, 800db00 <_printf_float+0xf0>
 800daee:	464b      	mov	r3, r9
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	bfbc      	itt	lt
 800daf4:	232d      	movlt	r3, #45	; 0x2d
 800daf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dafa:	487f      	ldr	r0, [pc, #508]	; (800dcf8 <_printf_float+0x2e8>)
 800dafc:	4b7f      	ldr	r3, [pc, #508]	; (800dcfc <_printf_float+0x2ec>)
 800dafe:	e7d1      	b.n	800daa4 <_printf_float+0x94>
 800db00:	6863      	ldr	r3, [r4, #4]
 800db02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800db06:	9206      	str	r2, [sp, #24]
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	d13f      	bne.n	800db8c <_printf_float+0x17c>
 800db0c:	2306      	movs	r3, #6
 800db0e:	6063      	str	r3, [r4, #4]
 800db10:	9b05      	ldr	r3, [sp, #20]
 800db12:	6861      	ldr	r1, [r4, #4]
 800db14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800db18:	2300      	movs	r3, #0
 800db1a:	9303      	str	r3, [sp, #12]
 800db1c:	ab0a      	add	r3, sp, #40	; 0x28
 800db1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800db22:	ab09      	add	r3, sp, #36	; 0x24
 800db24:	ec49 8b10 	vmov	d0, r8, r9
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	6022      	str	r2, [r4, #0]
 800db2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800db30:	4628      	mov	r0, r5
 800db32:	f7ff fecd 	bl	800d8d0 <__cvt>
 800db36:	9b06      	ldr	r3, [sp, #24]
 800db38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db3a:	2b47      	cmp	r3, #71	; 0x47
 800db3c:	4680      	mov	r8, r0
 800db3e:	d108      	bne.n	800db52 <_printf_float+0x142>
 800db40:	1cc8      	adds	r0, r1, #3
 800db42:	db02      	blt.n	800db4a <_printf_float+0x13a>
 800db44:	6863      	ldr	r3, [r4, #4]
 800db46:	4299      	cmp	r1, r3
 800db48:	dd41      	ble.n	800dbce <_printf_float+0x1be>
 800db4a:	f1ab 0b02 	sub.w	fp, fp, #2
 800db4e:	fa5f fb8b 	uxtb.w	fp, fp
 800db52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db56:	d820      	bhi.n	800db9a <_printf_float+0x18a>
 800db58:	3901      	subs	r1, #1
 800db5a:	465a      	mov	r2, fp
 800db5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800db60:	9109      	str	r1, [sp, #36]	; 0x24
 800db62:	f7ff ff17 	bl	800d994 <__exponent>
 800db66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db68:	1813      	adds	r3, r2, r0
 800db6a:	2a01      	cmp	r2, #1
 800db6c:	4681      	mov	r9, r0
 800db6e:	6123      	str	r3, [r4, #16]
 800db70:	dc02      	bgt.n	800db78 <_printf_float+0x168>
 800db72:	6822      	ldr	r2, [r4, #0]
 800db74:	07d2      	lsls	r2, r2, #31
 800db76:	d501      	bpl.n	800db7c <_printf_float+0x16c>
 800db78:	3301      	adds	r3, #1
 800db7a:	6123      	str	r3, [r4, #16]
 800db7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db80:	2b00      	cmp	r3, #0
 800db82:	d09c      	beq.n	800dabe <_printf_float+0xae>
 800db84:	232d      	movs	r3, #45	; 0x2d
 800db86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db8a:	e798      	b.n	800dabe <_printf_float+0xae>
 800db8c:	9a06      	ldr	r2, [sp, #24]
 800db8e:	2a47      	cmp	r2, #71	; 0x47
 800db90:	d1be      	bne.n	800db10 <_printf_float+0x100>
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1bc      	bne.n	800db10 <_printf_float+0x100>
 800db96:	2301      	movs	r3, #1
 800db98:	e7b9      	b.n	800db0e <_printf_float+0xfe>
 800db9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800db9e:	d118      	bne.n	800dbd2 <_printf_float+0x1c2>
 800dba0:	2900      	cmp	r1, #0
 800dba2:	6863      	ldr	r3, [r4, #4]
 800dba4:	dd0b      	ble.n	800dbbe <_printf_float+0x1ae>
 800dba6:	6121      	str	r1, [r4, #16]
 800dba8:	b913      	cbnz	r3, 800dbb0 <_printf_float+0x1a0>
 800dbaa:	6822      	ldr	r2, [r4, #0]
 800dbac:	07d0      	lsls	r0, r2, #31
 800dbae:	d502      	bpl.n	800dbb6 <_printf_float+0x1a6>
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	440b      	add	r3, r1
 800dbb4:	6123      	str	r3, [r4, #16]
 800dbb6:	65a1      	str	r1, [r4, #88]	; 0x58
 800dbb8:	f04f 0900 	mov.w	r9, #0
 800dbbc:	e7de      	b.n	800db7c <_printf_float+0x16c>
 800dbbe:	b913      	cbnz	r3, 800dbc6 <_printf_float+0x1b6>
 800dbc0:	6822      	ldr	r2, [r4, #0]
 800dbc2:	07d2      	lsls	r2, r2, #31
 800dbc4:	d501      	bpl.n	800dbca <_printf_float+0x1ba>
 800dbc6:	3302      	adds	r3, #2
 800dbc8:	e7f4      	b.n	800dbb4 <_printf_float+0x1a4>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e7f2      	b.n	800dbb4 <_printf_float+0x1a4>
 800dbce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dbd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd4:	4299      	cmp	r1, r3
 800dbd6:	db05      	blt.n	800dbe4 <_printf_float+0x1d4>
 800dbd8:	6823      	ldr	r3, [r4, #0]
 800dbda:	6121      	str	r1, [r4, #16]
 800dbdc:	07d8      	lsls	r0, r3, #31
 800dbde:	d5ea      	bpl.n	800dbb6 <_printf_float+0x1a6>
 800dbe0:	1c4b      	adds	r3, r1, #1
 800dbe2:	e7e7      	b.n	800dbb4 <_printf_float+0x1a4>
 800dbe4:	2900      	cmp	r1, #0
 800dbe6:	bfd4      	ite	le
 800dbe8:	f1c1 0202 	rsble	r2, r1, #2
 800dbec:	2201      	movgt	r2, #1
 800dbee:	4413      	add	r3, r2
 800dbf0:	e7e0      	b.n	800dbb4 <_printf_float+0x1a4>
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	055a      	lsls	r2, r3, #21
 800dbf6:	d407      	bmi.n	800dc08 <_printf_float+0x1f8>
 800dbf8:	6923      	ldr	r3, [r4, #16]
 800dbfa:	4642      	mov	r2, r8
 800dbfc:	4631      	mov	r1, r6
 800dbfe:	4628      	mov	r0, r5
 800dc00:	47b8      	blx	r7
 800dc02:	3001      	adds	r0, #1
 800dc04:	d12c      	bne.n	800dc60 <_printf_float+0x250>
 800dc06:	e764      	b.n	800dad2 <_printf_float+0xc2>
 800dc08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dc0c:	f240 80e0 	bls.w	800ddd0 <_printf_float+0x3c0>
 800dc10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc14:	2200      	movs	r2, #0
 800dc16:	2300      	movs	r3, #0
 800dc18:	f7f2 ffb6 	bl	8000b88 <__aeabi_dcmpeq>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d034      	beq.n	800dc8a <_printf_float+0x27a>
 800dc20:	4a37      	ldr	r2, [pc, #220]	; (800dd00 <_printf_float+0x2f0>)
 800dc22:	2301      	movs	r3, #1
 800dc24:	4631      	mov	r1, r6
 800dc26:	4628      	mov	r0, r5
 800dc28:	47b8      	blx	r7
 800dc2a:	3001      	adds	r0, #1
 800dc2c:	f43f af51 	beq.w	800dad2 <_printf_float+0xc2>
 800dc30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc34:	429a      	cmp	r2, r3
 800dc36:	db02      	blt.n	800dc3e <_printf_float+0x22e>
 800dc38:	6823      	ldr	r3, [r4, #0]
 800dc3a:	07d8      	lsls	r0, r3, #31
 800dc3c:	d510      	bpl.n	800dc60 <_printf_float+0x250>
 800dc3e:	ee18 3a10 	vmov	r3, s16
 800dc42:	4652      	mov	r2, sl
 800dc44:	4631      	mov	r1, r6
 800dc46:	4628      	mov	r0, r5
 800dc48:	47b8      	blx	r7
 800dc4a:	3001      	adds	r0, #1
 800dc4c:	f43f af41 	beq.w	800dad2 <_printf_float+0xc2>
 800dc50:	f04f 0800 	mov.w	r8, #0
 800dc54:	f104 091a 	add.w	r9, r4, #26
 800dc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc5a:	3b01      	subs	r3, #1
 800dc5c:	4543      	cmp	r3, r8
 800dc5e:	dc09      	bgt.n	800dc74 <_printf_float+0x264>
 800dc60:	6823      	ldr	r3, [r4, #0]
 800dc62:	079b      	lsls	r3, r3, #30
 800dc64:	f100 8105 	bmi.w	800de72 <_printf_float+0x462>
 800dc68:	68e0      	ldr	r0, [r4, #12]
 800dc6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc6c:	4298      	cmp	r0, r3
 800dc6e:	bfb8      	it	lt
 800dc70:	4618      	movlt	r0, r3
 800dc72:	e730      	b.n	800dad6 <_printf_float+0xc6>
 800dc74:	2301      	movs	r3, #1
 800dc76:	464a      	mov	r2, r9
 800dc78:	4631      	mov	r1, r6
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	47b8      	blx	r7
 800dc7e:	3001      	adds	r0, #1
 800dc80:	f43f af27 	beq.w	800dad2 <_printf_float+0xc2>
 800dc84:	f108 0801 	add.w	r8, r8, #1
 800dc88:	e7e6      	b.n	800dc58 <_printf_float+0x248>
 800dc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	dc39      	bgt.n	800dd04 <_printf_float+0x2f4>
 800dc90:	4a1b      	ldr	r2, [pc, #108]	; (800dd00 <_printf_float+0x2f0>)
 800dc92:	2301      	movs	r3, #1
 800dc94:	4631      	mov	r1, r6
 800dc96:	4628      	mov	r0, r5
 800dc98:	47b8      	blx	r7
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	f43f af19 	beq.w	800dad2 <_printf_float+0xc2>
 800dca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dca4:	4313      	orrs	r3, r2
 800dca6:	d102      	bne.n	800dcae <_printf_float+0x29e>
 800dca8:	6823      	ldr	r3, [r4, #0]
 800dcaa:	07d9      	lsls	r1, r3, #31
 800dcac:	d5d8      	bpl.n	800dc60 <_printf_float+0x250>
 800dcae:	ee18 3a10 	vmov	r3, s16
 800dcb2:	4652      	mov	r2, sl
 800dcb4:	4631      	mov	r1, r6
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	47b8      	blx	r7
 800dcba:	3001      	adds	r0, #1
 800dcbc:	f43f af09 	beq.w	800dad2 <_printf_float+0xc2>
 800dcc0:	f04f 0900 	mov.w	r9, #0
 800dcc4:	f104 0a1a 	add.w	sl, r4, #26
 800dcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcca:	425b      	negs	r3, r3
 800dccc:	454b      	cmp	r3, r9
 800dcce:	dc01      	bgt.n	800dcd4 <_printf_float+0x2c4>
 800dcd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcd2:	e792      	b.n	800dbfa <_printf_float+0x1ea>
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	4652      	mov	r2, sl
 800dcd8:	4631      	mov	r1, r6
 800dcda:	4628      	mov	r0, r5
 800dcdc:	47b8      	blx	r7
 800dcde:	3001      	adds	r0, #1
 800dce0:	f43f aef7 	beq.w	800dad2 <_printf_float+0xc2>
 800dce4:	f109 0901 	add.w	r9, r9, #1
 800dce8:	e7ee      	b.n	800dcc8 <_printf_float+0x2b8>
 800dcea:	bf00      	nop
 800dcec:	7fefffff 	.word	0x7fefffff
 800dcf0:	08024130 	.word	0x08024130
 800dcf4:	08024134 	.word	0x08024134
 800dcf8:	0802413c 	.word	0x0802413c
 800dcfc:	08024138 	.word	0x08024138
 800dd00:	08024140 	.word	0x08024140
 800dd04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	bfa8      	it	ge
 800dd0c:	461a      	movge	r2, r3
 800dd0e:	2a00      	cmp	r2, #0
 800dd10:	4691      	mov	r9, r2
 800dd12:	dc37      	bgt.n	800dd84 <_printf_float+0x374>
 800dd14:	f04f 0b00 	mov.w	fp, #0
 800dd18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd1c:	f104 021a 	add.w	r2, r4, #26
 800dd20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd22:	9305      	str	r3, [sp, #20]
 800dd24:	eba3 0309 	sub.w	r3, r3, r9
 800dd28:	455b      	cmp	r3, fp
 800dd2a:	dc33      	bgt.n	800dd94 <_printf_float+0x384>
 800dd2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd30:	429a      	cmp	r2, r3
 800dd32:	db3b      	blt.n	800ddac <_printf_float+0x39c>
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	07da      	lsls	r2, r3, #31
 800dd38:	d438      	bmi.n	800ddac <_printf_float+0x39c>
 800dd3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd3c:	9b05      	ldr	r3, [sp, #20]
 800dd3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	eba2 0901 	sub.w	r9, r2, r1
 800dd46:	4599      	cmp	r9, r3
 800dd48:	bfa8      	it	ge
 800dd4a:	4699      	movge	r9, r3
 800dd4c:	f1b9 0f00 	cmp.w	r9, #0
 800dd50:	dc35      	bgt.n	800ddbe <_printf_float+0x3ae>
 800dd52:	f04f 0800 	mov.w	r8, #0
 800dd56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd5a:	f104 0a1a 	add.w	sl, r4, #26
 800dd5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd62:	1a9b      	subs	r3, r3, r2
 800dd64:	eba3 0309 	sub.w	r3, r3, r9
 800dd68:	4543      	cmp	r3, r8
 800dd6a:	f77f af79 	ble.w	800dc60 <_printf_float+0x250>
 800dd6e:	2301      	movs	r3, #1
 800dd70:	4652      	mov	r2, sl
 800dd72:	4631      	mov	r1, r6
 800dd74:	4628      	mov	r0, r5
 800dd76:	47b8      	blx	r7
 800dd78:	3001      	adds	r0, #1
 800dd7a:	f43f aeaa 	beq.w	800dad2 <_printf_float+0xc2>
 800dd7e:	f108 0801 	add.w	r8, r8, #1
 800dd82:	e7ec      	b.n	800dd5e <_printf_float+0x34e>
 800dd84:	4613      	mov	r3, r2
 800dd86:	4631      	mov	r1, r6
 800dd88:	4642      	mov	r2, r8
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	47b8      	blx	r7
 800dd8e:	3001      	adds	r0, #1
 800dd90:	d1c0      	bne.n	800dd14 <_printf_float+0x304>
 800dd92:	e69e      	b.n	800dad2 <_printf_float+0xc2>
 800dd94:	2301      	movs	r3, #1
 800dd96:	4631      	mov	r1, r6
 800dd98:	4628      	mov	r0, r5
 800dd9a:	9205      	str	r2, [sp, #20]
 800dd9c:	47b8      	blx	r7
 800dd9e:	3001      	adds	r0, #1
 800dda0:	f43f ae97 	beq.w	800dad2 <_printf_float+0xc2>
 800dda4:	9a05      	ldr	r2, [sp, #20]
 800dda6:	f10b 0b01 	add.w	fp, fp, #1
 800ddaa:	e7b9      	b.n	800dd20 <_printf_float+0x310>
 800ddac:	ee18 3a10 	vmov	r3, s16
 800ddb0:	4652      	mov	r2, sl
 800ddb2:	4631      	mov	r1, r6
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	47b8      	blx	r7
 800ddb8:	3001      	adds	r0, #1
 800ddba:	d1be      	bne.n	800dd3a <_printf_float+0x32a>
 800ddbc:	e689      	b.n	800dad2 <_printf_float+0xc2>
 800ddbe:	9a05      	ldr	r2, [sp, #20]
 800ddc0:	464b      	mov	r3, r9
 800ddc2:	4442      	add	r2, r8
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	47b8      	blx	r7
 800ddca:	3001      	adds	r0, #1
 800ddcc:	d1c1      	bne.n	800dd52 <_printf_float+0x342>
 800ddce:	e680      	b.n	800dad2 <_printf_float+0xc2>
 800ddd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddd2:	2a01      	cmp	r2, #1
 800ddd4:	dc01      	bgt.n	800ddda <_printf_float+0x3ca>
 800ddd6:	07db      	lsls	r3, r3, #31
 800ddd8:	d538      	bpl.n	800de4c <_printf_float+0x43c>
 800ddda:	2301      	movs	r3, #1
 800dddc:	4642      	mov	r2, r8
 800ddde:	4631      	mov	r1, r6
 800dde0:	4628      	mov	r0, r5
 800dde2:	47b8      	blx	r7
 800dde4:	3001      	adds	r0, #1
 800dde6:	f43f ae74 	beq.w	800dad2 <_printf_float+0xc2>
 800ddea:	ee18 3a10 	vmov	r3, s16
 800ddee:	4652      	mov	r2, sl
 800ddf0:	4631      	mov	r1, r6
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	47b8      	blx	r7
 800ddf6:	3001      	adds	r0, #1
 800ddf8:	f43f ae6b 	beq.w	800dad2 <_printf_float+0xc2>
 800ddfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de00:	2200      	movs	r2, #0
 800de02:	2300      	movs	r3, #0
 800de04:	f7f2 fec0 	bl	8000b88 <__aeabi_dcmpeq>
 800de08:	b9d8      	cbnz	r0, 800de42 <_printf_float+0x432>
 800de0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de0c:	f108 0201 	add.w	r2, r8, #1
 800de10:	3b01      	subs	r3, #1
 800de12:	4631      	mov	r1, r6
 800de14:	4628      	mov	r0, r5
 800de16:	47b8      	blx	r7
 800de18:	3001      	adds	r0, #1
 800de1a:	d10e      	bne.n	800de3a <_printf_float+0x42a>
 800de1c:	e659      	b.n	800dad2 <_printf_float+0xc2>
 800de1e:	2301      	movs	r3, #1
 800de20:	4652      	mov	r2, sl
 800de22:	4631      	mov	r1, r6
 800de24:	4628      	mov	r0, r5
 800de26:	47b8      	blx	r7
 800de28:	3001      	adds	r0, #1
 800de2a:	f43f ae52 	beq.w	800dad2 <_printf_float+0xc2>
 800de2e:	f108 0801 	add.w	r8, r8, #1
 800de32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de34:	3b01      	subs	r3, #1
 800de36:	4543      	cmp	r3, r8
 800de38:	dcf1      	bgt.n	800de1e <_printf_float+0x40e>
 800de3a:	464b      	mov	r3, r9
 800de3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800de40:	e6dc      	b.n	800dbfc <_printf_float+0x1ec>
 800de42:	f04f 0800 	mov.w	r8, #0
 800de46:	f104 0a1a 	add.w	sl, r4, #26
 800de4a:	e7f2      	b.n	800de32 <_printf_float+0x422>
 800de4c:	2301      	movs	r3, #1
 800de4e:	4642      	mov	r2, r8
 800de50:	e7df      	b.n	800de12 <_printf_float+0x402>
 800de52:	2301      	movs	r3, #1
 800de54:	464a      	mov	r2, r9
 800de56:	4631      	mov	r1, r6
 800de58:	4628      	mov	r0, r5
 800de5a:	47b8      	blx	r7
 800de5c:	3001      	adds	r0, #1
 800de5e:	f43f ae38 	beq.w	800dad2 <_printf_float+0xc2>
 800de62:	f108 0801 	add.w	r8, r8, #1
 800de66:	68e3      	ldr	r3, [r4, #12]
 800de68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de6a:	1a5b      	subs	r3, r3, r1
 800de6c:	4543      	cmp	r3, r8
 800de6e:	dcf0      	bgt.n	800de52 <_printf_float+0x442>
 800de70:	e6fa      	b.n	800dc68 <_printf_float+0x258>
 800de72:	f04f 0800 	mov.w	r8, #0
 800de76:	f104 0919 	add.w	r9, r4, #25
 800de7a:	e7f4      	b.n	800de66 <_printf_float+0x456>

0800de7c <_printf_common>:
 800de7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de80:	4616      	mov	r6, r2
 800de82:	4699      	mov	r9, r3
 800de84:	688a      	ldr	r2, [r1, #8]
 800de86:	690b      	ldr	r3, [r1, #16]
 800de88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de8c:	4293      	cmp	r3, r2
 800de8e:	bfb8      	it	lt
 800de90:	4613      	movlt	r3, r2
 800de92:	6033      	str	r3, [r6, #0]
 800de94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de98:	4607      	mov	r7, r0
 800de9a:	460c      	mov	r4, r1
 800de9c:	b10a      	cbz	r2, 800dea2 <_printf_common+0x26>
 800de9e:	3301      	adds	r3, #1
 800dea0:	6033      	str	r3, [r6, #0]
 800dea2:	6823      	ldr	r3, [r4, #0]
 800dea4:	0699      	lsls	r1, r3, #26
 800dea6:	bf42      	ittt	mi
 800dea8:	6833      	ldrmi	r3, [r6, #0]
 800deaa:	3302      	addmi	r3, #2
 800deac:	6033      	strmi	r3, [r6, #0]
 800deae:	6825      	ldr	r5, [r4, #0]
 800deb0:	f015 0506 	ands.w	r5, r5, #6
 800deb4:	d106      	bne.n	800dec4 <_printf_common+0x48>
 800deb6:	f104 0a19 	add.w	sl, r4, #25
 800deba:	68e3      	ldr	r3, [r4, #12]
 800debc:	6832      	ldr	r2, [r6, #0]
 800debe:	1a9b      	subs	r3, r3, r2
 800dec0:	42ab      	cmp	r3, r5
 800dec2:	dc26      	bgt.n	800df12 <_printf_common+0x96>
 800dec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dec8:	1e13      	subs	r3, r2, #0
 800deca:	6822      	ldr	r2, [r4, #0]
 800decc:	bf18      	it	ne
 800dece:	2301      	movne	r3, #1
 800ded0:	0692      	lsls	r2, r2, #26
 800ded2:	d42b      	bmi.n	800df2c <_printf_common+0xb0>
 800ded4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ded8:	4649      	mov	r1, r9
 800deda:	4638      	mov	r0, r7
 800dedc:	47c0      	blx	r8
 800dede:	3001      	adds	r0, #1
 800dee0:	d01e      	beq.n	800df20 <_printf_common+0xa4>
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	68e5      	ldr	r5, [r4, #12]
 800dee6:	6832      	ldr	r2, [r6, #0]
 800dee8:	f003 0306 	and.w	r3, r3, #6
 800deec:	2b04      	cmp	r3, #4
 800deee:	bf08      	it	eq
 800def0:	1aad      	subeq	r5, r5, r2
 800def2:	68a3      	ldr	r3, [r4, #8]
 800def4:	6922      	ldr	r2, [r4, #16]
 800def6:	bf0c      	ite	eq
 800def8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800defc:	2500      	movne	r5, #0
 800defe:	4293      	cmp	r3, r2
 800df00:	bfc4      	itt	gt
 800df02:	1a9b      	subgt	r3, r3, r2
 800df04:	18ed      	addgt	r5, r5, r3
 800df06:	2600      	movs	r6, #0
 800df08:	341a      	adds	r4, #26
 800df0a:	42b5      	cmp	r5, r6
 800df0c:	d11a      	bne.n	800df44 <_printf_common+0xc8>
 800df0e:	2000      	movs	r0, #0
 800df10:	e008      	b.n	800df24 <_printf_common+0xa8>
 800df12:	2301      	movs	r3, #1
 800df14:	4652      	mov	r2, sl
 800df16:	4649      	mov	r1, r9
 800df18:	4638      	mov	r0, r7
 800df1a:	47c0      	blx	r8
 800df1c:	3001      	adds	r0, #1
 800df1e:	d103      	bne.n	800df28 <_printf_common+0xac>
 800df20:	f04f 30ff 	mov.w	r0, #4294967295
 800df24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df28:	3501      	adds	r5, #1
 800df2a:	e7c6      	b.n	800deba <_printf_common+0x3e>
 800df2c:	18e1      	adds	r1, r4, r3
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	2030      	movs	r0, #48	; 0x30
 800df32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df36:	4422      	add	r2, r4
 800df38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df40:	3302      	adds	r3, #2
 800df42:	e7c7      	b.n	800ded4 <_printf_common+0x58>
 800df44:	2301      	movs	r3, #1
 800df46:	4622      	mov	r2, r4
 800df48:	4649      	mov	r1, r9
 800df4a:	4638      	mov	r0, r7
 800df4c:	47c0      	blx	r8
 800df4e:	3001      	adds	r0, #1
 800df50:	d0e6      	beq.n	800df20 <_printf_common+0xa4>
 800df52:	3601      	adds	r6, #1
 800df54:	e7d9      	b.n	800df0a <_printf_common+0x8e>
	...

0800df58 <_printf_i>:
 800df58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df5c:	460c      	mov	r4, r1
 800df5e:	4691      	mov	r9, r2
 800df60:	7e27      	ldrb	r7, [r4, #24]
 800df62:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df64:	2f78      	cmp	r7, #120	; 0x78
 800df66:	4680      	mov	r8, r0
 800df68:	469a      	mov	sl, r3
 800df6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df6e:	d807      	bhi.n	800df80 <_printf_i+0x28>
 800df70:	2f62      	cmp	r7, #98	; 0x62
 800df72:	d80a      	bhi.n	800df8a <_printf_i+0x32>
 800df74:	2f00      	cmp	r7, #0
 800df76:	f000 80d8 	beq.w	800e12a <_printf_i+0x1d2>
 800df7a:	2f58      	cmp	r7, #88	; 0x58
 800df7c:	f000 80a3 	beq.w	800e0c6 <_printf_i+0x16e>
 800df80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df88:	e03a      	b.n	800e000 <_printf_i+0xa8>
 800df8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df8e:	2b15      	cmp	r3, #21
 800df90:	d8f6      	bhi.n	800df80 <_printf_i+0x28>
 800df92:	a001      	add	r0, pc, #4	; (adr r0, 800df98 <_printf_i+0x40>)
 800df94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800df98:	0800dff1 	.word	0x0800dff1
 800df9c:	0800e005 	.word	0x0800e005
 800dfa0:	0800df81 	.word	0x0800df81
 800dfa4:	0800df81 	.word	0x0800df81
 800dfa8:	0800df81 	.word	0x0800df81
 800dfac:	0800df81 	.word	0x0800df81
 800dfb0:	0800e005 	.word	0x0800e005
 800dfb4:	0800df81 	.word	0x0800df81
 800dfb8:	0800df81 	.word	0x0800df81
 800dfbc:	0800df81 	.word	0x0800df81
 800dfc0:	0800df81 	.word	0x0800df81
 800dfc4:	0800e111 	.word	0x0800e111
 800dfc8:	0800e035 	.word	0x0800e035
 800dfcc:	0800e0f3 	.word	0x0800e0f3
 800dfd0:	0800df81 	.word	0x0800df81
 800dfd4:	0800df81 	.word	0x0800df81
 800dfd8:	0800e133 	.word	0x0800e133
 800dfdc:	0800df81 	.word	0x0800df81
 800dfe0:	0800e035 	.word	0x0800e035
 800dfe4:	0800df81 	.word	0x0800df81
 800dfe8:	0800df81 	.word	0x0800df81
 800dfec:	0800e0fb 	.word	0x0800e0fb
 800dff0:	680b      	ldr	r3, [r1, #0]
 800dff2:	1d1a      	adds	r2, r3, #4
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	600a      	str	r2, [r1, #0]
 800dff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e000:	2301      	movs	r3, #1
 800e002:	e0a3      	b.n	800e14c <_printf_i+0x1f4>
 800e004:	6825      	ldr	r5, [r4, #0]
 800e006:	6808      	ldr	r0, [r1, #0]
 800e008:	062e      	lsls	r6, r5, #24
 800e00a:	f100 0304 	add.w	r3, r0, #4
 800e00e:	d50a      	bpl.n	800e026 <_printf_i+0xce>
 800e010:	6805      	ldr	r5, [r0, #0]
 800e012:	600b      	str	r3, [r1, #0]
 800e014:	2d00      	cmp	r5, #0
 800e016:	da03      	bge.n	800e020 <_printf_i+0xc8>
 800e018:	232d      	movs	r3, #45	; 0x2d
 800e01a:	426d      	negs	r5, r5
 800e01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e020:	485e      	ldr	r0, [pc, #376]	; (800e19c <_printf_i+0x244>)
 800e022:	230a      	movs	r3, #10
 800e024:	e019      	b.n	800e05a <_printf_i+0x102>
 800e026:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e02a:	6805      	ldr	r5, [r0, #0]
 800e02c:	600b      	str	r3, [r1, #0]
 800e02e:	bf18      	it	ne
 800e030:	b22d      	sxthne	r5, r5
 800e032:	e7ef      	b.n	800e014 <_printf_i+0xbc>
 800e034:	680b      	ldr	r3, [r1, #0]
 800e036:	6825      	ldr	r5, [r4, #0]
 800e038:	1d18      	adds	r0, r3, #4
 800e03a:	6008      	str	r0, [r1, #0]
 800e03c:	0628      	lsls	r0, r5, #24
 800e03e:	d501      	bpl.n	800e044 <_printf_i+0xec>
 800e040:	681d      	ldr	r5, [r3, #0]
 800e042:	e002      	b.n	800e04a <_printf_i+0xf2>
 800e044:	0669      	lsls	r1, r5, #25
 800e046:	d5fb      	bpl.n	800e040 <_printf_i+0xe8>
 800e048:	881d      	ldrh	r5, [r3, #0]
 800e04a:	4854      	ldr	r0, [pc, #336]	; (800e19c <_printf_i+0x244>)
 800e04c:	2f6f      	cmp	r7, #111	; 0x6f
 800e04e:	bf0c      	ite	eq
 800e050:	2308      	moveq	r3, #8
 800e052:	230a      	movne	r3, #10
 800e054:	2100      	movs	r1, #0
 800e056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e05a:	6866      	ldr	r6, [r4, #4]
 800e05c:	60a6      	str	r6, [r4, #8]
 800e05e:	2e00      	cmp	r6, #0
 800e060:	bfa2      	ittt	ge
 800e062:	6821      	ldrge	r1, [r4, #0]
 800e064:	f021 0104 	bicge.w	r1, r1, #4
 800e068:	6021      	strge	r1, [r4, #0]
 800e06a:	b90d      	cbnz	r5, 800e070 <_printf_i+0x118>
 800e06c:	2e00      	cmp	r6, #0
 800e06e:	d04d      	beq.n	800e10c <_printf_i+0x1b4>
 800e070:	4616      	mov	r6, r2
 800e072:	fbb5 f1f3 	udiv	r1, r5, r3
 800e076:	fb03 5711 	mls	r7, r3, r1, r5
 800e07a:	5dc7      	ldrb	r7, [r0, r7]
 800e07c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e080:	462f      	mov	r7, r5
 800e082:	42bb      	cmp	r3, r7
 800e084:	460d      	mov	r5, r1
 800e086:	d9f4      	bls.n	800e072 <_printf_i+0x11a>
 800e088:	2b08      	cmp	r3, #8
 800e08a:	d10b      	bne.n	800e0a4 <_printf_i+0x14c>
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	07df      	lsls	r7, r3, #31
 800e090:	d508      	bpl.n	800e0a4 <_printf_i+0x14c>
 800e092:	6923      	ldr	r3, [r4, #16]
 800e094:	6861      	ldr	r1, [r4, #4]
 800e096:	4299      	cmp	r1, r3
 800e098:	bfde      	ittt	le
 800e09a:	2330      	movle	r3, #48	; 0x30
 800e09c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0a4:	1b92      	subs	r2, r2, r6
 800e0a6:	6122      	str	r2, [r4, #16]
 800e0a8:	f8cd a000 	str.w	sl, [sp]
 800e0ac:	464b      	mov	r3, r9
 800e0ae:	aa03      	add	r2, sp, #12
 800e0b0:	4621      	mov	r1, r4
 800e0b2:	4640      	mov	r0, r8
 800e0b4:	f7ff fee2 	bl	800de7c <_printf_common>
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	d14c      	bne.n	800e156 <_printf_i+0x1fe>
 800e0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c0:	b004      	add	sp, #16
 800e0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c6:	4835      	ldr	r0, [pc, #212]	; (800e19c <_printf_i+0x244>)
 800e0c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	680e      	ldr	r6, [r1, #0]
 800e0d0:	061f      	lsls	r7, r3, #24
 800e0d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800e0d6:	600e      	str	r6, [r1, #0]
 800e0d8:	d514      	bpl.n	800e104 <_printf_i+0x1ac>
 800e0da:	07d9      	lsls	r1, r3, #31
 800e0dc:	bf44      	itt	mi
 800e0de:	f043 0320 	orrmi.w	r3, r3, #32
 800e0e2:	6023      	strmi	r3, [r4, #0]
 800e0e4:	b91d      	cbnz	r5, 800e0ee <_printf_i+0x196>
 800e0e6:	6823      	ldr	r3, [r4, #0]
 800e0e8:	f023 0320 	bic.w	r3, r3, #32
 800e0ec:	6023      	str	r3, [r4, #0]
 800e0ee:	2310      	movs	r3, #16
 800e0f0:	e7b0      	b.n	800e054 <_printf_i+0xfc>
 800e0f2:	6823      	ldr	r3, [r4, #0]
 800e0f4:	f043 0320 	orr.w	r3, r3, #32
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	2378      	movs	r3, #120	; 0x78
 800e0fc:	4828      	ldr	r0, [pc, #160]	; (800e1a0 <_printf_i+0x248>)
 800e0fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e102:	e7e3      	b.n	800e0cc <_printf_i+0x174>
 800e104:	065e      	lsls	r6, r3, #25
 800e106:	bf48      	it	mi
 800e108:	b2ad      	uxthmi	r5, r5
 800e10a:	e7e6      	b.n	800e0da <_printf_i+0x182>
 800e10c:	4616      	mov	r6, r2
 800e10e:	e7bb      	b.n	800e088 <_printf_i+0x130>
 800e110:	680b      	ldr	r3, [r1, #0]
 800e112:	6826      	ldr	r6, [r4, #0]
 800e114:	6960      	ldr	r0, [r4, #20]
 800e116:	1d1d      	adds	r5, r3, #4
 800e118:	600d      	str	r5, [r1, #0]
 800e11a:	0635      	lsls	r5, r6, #24
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	d501      	bpl.n	800e124 <_printf_i+0x1cc>
 800e120:	6018      	str	r0, [r3, #0]
 800e122:	e002      	b.n	800e12a <_printf_i+0x1d2>
 800e124:	0671      	lsls	r1, r6, #25
 800e126:	d5fb      	bpl.n	800e120 <_printf_i+0x1c8>
 800e128:	8018      	strh	r0, [r3, #0]
 800e12a:	2300      	movs	r3, #0
 800e12c:	6123      	str	r3, [r4, #16]
 800e12e:	4616      	mov	r6, r2
 800e130:	e7ba      	b.n	800e0a8 <_printf_i+0x150>
 800e132:	680b      	ldr	r3, [r1, #0]
 800e134:	1d1a      	adds	r2, r3, #4
 800e136:	600a      	str	r2, [r1, #0]
 800e138:	681e      	ldr	r6, [r3, #0]
 800e13a:	6862      	ldr	r2, [r4, #4]
 800e13c:	2100      	movs	r1, #0
 800e13e:	4630      	mov	r0, r6
 800e140:	f7f2 f8ae 	bl	80002a0 <memchr>
 800e144:	b108      	cbz	r0, 800e14a <_printf_i+0x1f2>
 800e146:	1b80      	subs	r0, r0, r6
 800e148:	6060      	str	r0, [r4, #4]
 800e14a:	6863      	ldr	r3, [r4, #4]
 800e14c:	6123      	str	r3, [r4, #16]
 800e14e:	2300      	movs	r3, #0
 800e150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e154:	e7a8      	b.n	800e0a8 <_printf_i+0x150>
 800e156:	6923      	ldr	r3, [r4, #16]
 800e158:	4632      	mov	r2, r6
 800e15a:	4649      	mov	r1, r9
 800e15c:	4640      	mov	r0, r8
 800e15e:	47d0      	blx	sl
 800e160:	3001      	adds	r0, #1
 800e162:	d0ab      	beq.n	800e0bc <_printf_i+0x164>
 800e164:	6823      	ldr	r3, [r4, #0]
 800e166:	079b      	lsls	r3, r3, #30
 800e168:	d413      	bmi.n	800e192 <_printf_i+0x23a>
 800e16a:	68e0      	ldr	r0, [r4, #12]
 800e16c:	9b03      	ldr	r3, [sp, #12]
 800e16e:	4298      	cmp	r0, r3
 800e170:	bfb8      	it	lt
 800e172:	4618      	movlt	r0, r3
 800e174:	e7a4      	b.n	800e0c0 <_printf_i+0x168>
 800e176:	2301      	movs	r3, #1
 800e178:	4632      	mov	r2, r6
 800e17a:	4649      	mov	r1, r9
 800e17c:	4640      	mov	r0, r8
 800e17e:	47d0      	blx	sl
 800e180:	3001      	adds	r0, #1
 800e182:	d09b      	beq.n	800e0bc <_printf_i+0x164>
 800e184:	3501      	adds	r5, #1
 800e186:	68e3      	ldr	r3, [r4, #12]
 800e188:	9903      	ldr	r1, [sp, #12]
 800e18a:	1a5b      	subs	r3, r3, r1
 800e18c:	42ab      	cmp	r3, r5
 800e18e:	dcf2      	bgt.n	800e176 <_printf_i+0x21e>
 800e190:	e7eb      	b.n	800e16a <_printf_i+0x212>
 800e192:	2500      	movs	r5, #0
 800e194:	f104 0619 	add.w	r6, r4, #25
 800e198:	e7f5      	b.n	800e186 <_printf_i+0x22e>
 800e19a:	bf00      	nop
 800e19c:	08024142 	.word	0x08024142
 800e1a0:	08024153 	.word	0x08024153

0800e1a4 <iprintf>:
 800e1a4:	b40f      	push	{r0, r1, r2, r3}
 800e1a6:	4b0a      	ldr	r3, [pc, #40]	; (800e1d0 <iprintf+0x2c>)
 800e1a8:	b513      	push	{r0, r1, r4, lr}
 800e1aa:	681c      	ldr	r4, [r3, #0]
 800e1ac:	b124      	cbz	r4, 800e1b8 <iprintf+0x14>
 800e1ae:	69a3      	ldr	r3, [r4, #24]
 800e1b0:	b913      	cbnz	r3, 800e1b8 <iprintf+0x14>
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f7ff fa06 	bl	800d5c4 <__sinit>
 800e1b8:	ab05      	add	r3, sp, #20
 800e1ba:	9a04      	ldr	r2, [sp, #16]
 800e1bc:	68a1      	ldr	r1, [r4, #8]
 800e1be:	9301      	str	r3, [sp, #4]
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f001 fc71 	bl	800faa8 <_vfiprintf_r>
 800e1c6:	b002      	add	sp, #8
 800e1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1cc:	b004      	add	sp, #16
 800e1ce:	4770      	bx	lr
 800e1d0:	20000090 	.word	0x20000090

0800e1d4 <_puts_r>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	460e      	mov	r6, r1
 800e1d8:	4605      	mov	r5, r0
 800e1da:	b118      	cbz	r0, 800e1e4 <_puts_r+0x10>
 800e1dc:	6983      	ldr	r3, [r0, #24]
 800e1de:	b90b      	cbnz	r3, 800e1e4 <_puts_r+0x10>
 800e1e0:	f7ff f9f0 	bl	800d5c4 <__sinit>
 800e1e4:	69ab      	ldr	r3, [r5, #24]
 800e1e6:	68ac      	ldr	r4, [r5, #8]
 800e1e8:	b913      	cbnz	r3, 800e1f0 <_puts_r+0x1c>
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	f7ff f9ea 	bl	800d5c4 <__sinit>
 800e1f0:	4b2c      	ldr	r3, [pc, #176]	; (800e2a4 <_puts_r+0xd0>)
 800e1f2:	429c      	cmp	r4, r3
 800e1f4:	d120      	bne.n	800e238 <_puts_r+0x64>
 800e1f6:	686c      	ldr	r4, [r5, #4]
 800e1f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1fa:	07db      	lsls	r3, r3, #31
 800e1fc:	d405      	bmi.n	800e20a <_puts_r+0x36>
 800e1fe:	89a3      	ldrh	r3, [r4, #12]
 800e200:	0598      	lsls	r0, r3, #22
 800e202:	d402      	bmi.n	800e20a <_puts_r+0x36>
 800e204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e206:	f7ff faa0 	bl	800d74a <__retarget_lock_acquire_recursive>
 800e20a:	89a3      	ldrh	r3, [r4, #12]
 800e20c:	0719      	lsls	r1, r3, #28
 800e20e:	d51d      	bpl.n	800e24c <_puts_r+0x78>
 800e210:	6923      	ldr	r3, [r4, #16]
 800e212:	b1db      	cbz	r3, 800e24c <_puts_r+0x78>
 800e214:	3e01      	subs	r6, #1
 800e216:	68a3      	ldr	r3, [r4, #8]
 800e218:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e21c:	3b01      	subs	r3, #1
 800e21e:	60a3      	str	r3, [r4, #8]
 800e220:	bb39      	cbnz	r1, 800e272 <_puts_r+0x9e>
 800e222:	2b00      	cmp	r3, #0
 800e224:	da38      	bge.n	800e298 <_puts_r+0xc4>
 800e226:	4622      	mov	r2, r4
 800e228:	210a      	movs	r1, #10
 800e22a:	4628      	mov	r0, r5
 800e22c:	f000 f89c 	bl	800e368 <__swbuf_r>
 800e230:	3001      	adds	r0, #1
 800e232:	d011      	beq.n	800e258 <_puts_r+0x84>
 800e234:	250a      	movs	r5, #10
 800e236:	e011      	b.n	800e25c <_puts_r+0x88>
 800e238:	4b1b      	ldr	r3, [pc, #108]	; (800e2a8 <_puts_r+0xd4>)
 800e23a:	429c      	cmp	r4, r3
 800e23c:	d101      	bne.n	800e242 <_puts_r+0x6e>
 800e23e:	68ac      	ldr	r4, [r5, #8]
 800e240:	e7da      	b.n	800e1f8 <_puts_r+0x24>
 800e242:	4b1a      	ldr	r3, [pc, #104]	; (800e2ac <_puts_r+0xd8>)
 800e244:	429c      	cmp	r4, r3
 800e246:	bf08      	it	eq
 800e248:	68ec      	ldreq	r4, [r5, #12]
 800e24a:	e7d5      	b.n	800e1f8 <_puts_r+0x24>
 800e24c:	4621      	mov	r1, r4
 800e24e:	4628      	mov	r0, r5
 800e250:	f000 f8ee 	bl	800e430 <__swsetup_r>
 800e254:	2800      	cmp	r0, #0
 800e256:	d0dd      	beq.n	800e214 <_puts_r+0x40>
 800e258:	f04f 35ff 	mov.w	r5, #4294967295
 800e25c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e25e:	07da      	lsls	r2, r3, #31
 800e260:	d405      	bmi.n	800e26e <_puts_r+0x9a>
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	059b      	lsls	r3, r3, #22
 800e266:	d402      	bmi.n	800e26e <_puts_r+0x9a>
 800e268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e26a:	f7ff fa6f 	bl	800d74c <__retarget_lock_release_recursive>
 800e26e:	4628      	mov	r0, r5
 800e270:	bd70      	pop	{r4, r5, r6, pc}
 800e272:	2b00      	cmp	r3, #0
 800e274:	da04      	bge.n	800e280 <_puts_r+0xac>
 800e276:	69a2      	ldr	r2, [r4, #24]
 800e278:	429a      	cmp	r2, r3
 800e27a:	dc06      	bgt.n	800e28a <_puts_r+0xb6>
 800e27c:	290a      	cmp	r1, #10
 800e27e:	d004      	beq.n	800e28a <_puts_r+0xb6>
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	6022      	str	r2, [r4, #0]
 800e286:	7019      	strb	r1, [r3, #0]
 800e288:	e7c5      	b.n	800e216 <_puts_r+0x42>
 800e28a:	4622      	mov	r2, r4
 800e28c:	4628      	mov	r0, r5
 800e28e:	f000 f86b 	bl	800e368 <__swbuf_r>
 800e292:	3001      	adds	r0, #1
 800e294:	d1bf      	bne.n	800e216 <_puts_r+0x42>
 800e296:	e7df      	b.n	800e258 <_puts_r+0x84>
 800e298:	6823      	ldr	r3, [r4, #0]
 800e29a:	250a      	movs	r5, #10
 800e29c:	1c5a      	adds	r2, r3, #1
 800e29e:	6022      	str	r2, [r4, #0]
 800e2a0:	701d      	strb	r5, [r3, #0]
 800e2a2:	e7db      	b.n	800e25c <_puts_r+0x88>
 800e2a4:	080240ec 	.word	0x080240ec
 800e2a8:	0802410c 	.word	0x0802410c
 800e2ac:	080240cc 	.word	0x080240cc

0800e2b0 <puts>:
 800e2b0:	4b02      	ldr	r3, [pc, #8]	; (800e2bc <puts+0xc>)
 800e2b2:	4601      	mov	r1, r0
 800e2b4:	6818      	ldr	r0, [r3, #0]
 800e2b6:	f7ff bf8d 	b.w	800e1d4 <_puts_r>
 800e2ba:	bf00      	nop
 800e2bc:	20000090 	.word	0x20000090

0800e2c0 <_sbrk_r>:
 800e2c0:	b538      	push	{r3, r4, r5, lr}
 800e2c2:	4d06      	ldr	r5, [pc, #24]	; (800e2dc <_sbrk_r+0x1c>)
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	4608      	mov	r0, r1
 800e2ca:	602b      	str	r3, [r5, #0]
 800e2cc:	f7f4 f84e 	bl	800236c <_sbrk>
 800e2d0:	1c43      	adds	r3, r0, #1
 800e2d2:	d102      	bne.n	800e2da <_sbrk_r+0x1a>
 800e2d4:	682b      	ldr	r3, [r5, #0]
 800e2d6:	b103      	cbz	r3, 800e2da <_sbrk_r+0x1a>
 800e2d8:	6023      	str	r3, [r4, #0]
 800e2da:	bd38      	pop	{r3, r4, r5, pc}
 800e2dc:	20008aac 	.word	0x20008aac

0800e2e0 <__sread>:
 800e2e0:	b510      	push	{r4, lr}
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2e8:	f001 fd0e 	bl	800fd08 <_read_r>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	bfab      	itete	ge
 800e2f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2f2:	89a3      	ldrhlt	r3, [r4, #12]
 800e2f4:	181b      	addge	r3, r3, r0
 800e2f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2fa:	bfac      	ite	ge
 800e2fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2fe:	81a3      	strhlt	r3, [r4, #12]
 800e300:	bd10      	pop	{r4, pc}

0800e302 <__swrite>:
 800e302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e306:	461f      	mov	r7, r3
 800e308:	898b      	ldrh	r3, [r1, #12]
 800e30a:	05db      	lsls	r3, r3, #23
 800e30c:	4605      	mov	r5, r0
 800e30e:	460c      	mov	r4, r1
 800e310:	4616      	mov	r6, r2
 800e312:	d505      	bpl.n	800e320 <__swrite+0x1e>
 800e314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e318:	2302      	movs	r3, #2
 800e31a:	2200      	movs	r2, #0
 800e31c:	f000 ff84 	bl	800f228 <_lseek_r>
 800e320:	89a3      	ldrh	r3, [r4, #12]
 800e322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e32a:	81a3      	strh	r3, [r4, #12]
 800e32c:	4632      	mov	r2, r6
 800e32e:	463b      	mov	r3, r7
 800e330:	4628      	mov	r0, r5
 800e332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e336:	f000 b869 	b.w	800e40c <_write_r>

0800e33a <__sseek>:
 800e33a:	b510      	push	{r4, lr}
 800e33c:	460c      	mov	r4, r1
 800e33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e342:	f000 ff71 	bl	800f228 <_lseek_r>
 800e346:	1c43      	adds	r3, r0, #1
 800e348:	89a3      	ldrh	r3, [r4, #12]
 800e34a:	bf15      	itete	ne
 800e34c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e34e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e356:	81a3      	strheq	r3, [r4, #12]
 800e358:	bf18      	it	ne
 800e35a:	81a3      	strhne	r3, [r4, #12]
 800e35c:	bd10      	pop	{r4, pc}

0800e35e <__sclose>:
 800e35e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e362:	f000 b8d3 	b.w	800e50c <_close_r>
	...

0800e368 <__swbuf_r>:
 800e368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36a:	460e      	mov	r6, r1
 800e36c:	4614      	mov	r4, r2
 800e36e:	4605      	mov	r5, r0
 800e370:	b118      	cbz	r0, 800e37a <__swbuf_r+0x12>
 800e372:	6983      	ldr	r3, [r0, #24]
 800e374:	b90b      	cbnz	r3, 800e37a <__swbuf_r+0x12>
 800e376:	f7ff f925 	bl	800d5c4 <__sinit>
 800e37a:	4b21      	ldr	r3, [pc, #132]	; (800e400 <__swbuf_r+0x98>)
 800e37c:	429c      	cmp	r4, r3
 800e37e:	d12b      	bne.n	800e3d8 <__swbuf_r+0x70>
 800e380:	686c      	ldr	r4, [r5, #4]
 800e382:	69a3      	ldr	r3, [r4, #24]
 800e384:	60a3      	str	r3, [r4, #8]
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	071a      	lsls	r2, r3, #28
 800e38a:	d52f      	bpl.n	800e3ec <__swbuf_r+0x84>
 800e38c:	6923      	ldr	r3, [r4, #16]
 800e38e:	b36b      	cbz	r3, 800e3ec <__swbuf_r+0x84>
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	6820      	ldr	r0, [r4, #0]
 800e394:	1ac0      	subs	r0, r0, r3
 800e396:	6963      	ldr	r3, [r4, #20]
 800e398:	b2f6      	uxtb	r6, r6
 800e39a:	4283      	cmp	r3, r0
 800e39c:	4637      	mov	r7, r6
 800e39e:	dc04      	bgt.n	800e3aa <__swbuf_r+0x42>
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f7ff f87a 	bl	800d49c <_fflush_r>
 800e3a8:	bb30      	cbnz	r0, 800e3f8 <__swbuf_r+0x90>
 800e3aa:	68a3      	ldr	r3, [r4, #8]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	60a3      	str	r3, [r4, #8]
 800e3b0:	6823      	ldr	r3, [r4, #0]
 800e3b2:	1c5a      	adds	r2, r3, #1
 800e3b4:	6022      	str	r2, [r4, #0]
 800e3b6:	701e      	strb	r6, [r3, #0]
 800e3b8:	6963      	ldr	r3, [r4, #20]
 800e3ba:	3001      	adds	r0, #1
 800e3bc:	4283      	cmp	r3, r0
 800e3be:	d004      	beq.n	800e3ca <__swbuf_r+0x62>
 800e3c0:	89a3      	ldrh	r3, [r4, #12]
 800e3c2:	07db      	lsls	r3, r3, #31
 800e3c4:	d506      	bpl.n	800e3d4 <__swbuf_r+0x6c>
 800e3c6:	2e0a      	cmp	r6, #10
 800e3c8:	d104      	bne.n	800e3d4 <__swbuf_r+0x6c>
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	f7ff f865 	bl	800d49c <_fflush_r>
 800e3d2:	b988      	cbnz	r0, 800e3f8 <__swbuf_r+0x90>
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3d8:	4b0a      	ldr	r3, [pc, #40]	; (800e404 <__swbuf_r+0x9c>)
 800e3da:	429c      	cmp	r4, r3
 800e3dc:	d101      	bne.n	800e3e2 <__swbuf_r+0x7a>
 800e3de:	68ac      	ldr	r4, [r5, #8]
 800e3e0:	e7cf      	b.n	800e382 <__swbuf_r+0x1a>
 800e3e2:	4b09      	ldr	r3, [pc, #36]	; (800e408 <__swbuf_r+0xa0>)
 800e3e4:	429c      	cmp	r4, r3
 800e3e6:	bf08      	it	eq
 800e3e8:	68ec      	ldreq	r4, [r5, #12]
 800e3ea:	e7ca      	b.n	800e382 <__swbuf_r+0x1a>
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f000 f81e 	bl	800e430 <__swsetup_r>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d0cb      	beq.n	800e390 <__swbuf_r+0x28>
 800e3f8:	f04f 37ff 	mov.w	r7, #4294967295
 800e3fc:	e7ea      	b.n	800e3d4 <__swbuf_r+0x6c>
 800e3fe:	bf00      	nop
 800e400:	080240ec 	.word	0x080240ec
 800e404:	0802410c 	.word	0x0802410c
 800e408:	080240cc 	.word	0x080240cc

0800e40c <_write_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	4d07      	ldr	r5, [pc, #28]	; (800e42c <_write_r+0x20>)
 800e410:	4604      	mov	r4, r0
 800e412:	4608      	mov	r0, r1
 800e414:	4611      	mov	r1, r2
 800e416:	2200      	movs	r2, #0
 800e418:	602a      	str	r2, [r5, #0]
 800e41a:	461a      	mov	r2, r3
 800e41c:	f7f3 ff55 	bl	80022ca <_write>
 800e420:	1c43      	adds	r3, r0, #1
 800e422:	d102      	bne.n	800e42a <_write_r+0x1e>
 800e424:	682b      	ldr	r3, [r5, #0]
 800e426:	b103      	cbz	r3, 800e42a <_write_r+0x1e>
 800e428:	6023      	str	r3, [r4, #0]
 800e42a:	bd38      	pop	{r3, r4, r5, pc}
 800e42c:	20008aac 	.word	0x20008aac

0800e430 <__swsetup_r>:
 800e430:	4b32      	ldr	r3, [pc, #200]	; (800e4fc <__swsetup_r+0xcc>)
 800e432:	b570      	push	{r4, r5, r6, lr}
 800e434:	681d      	ldr	r5, [r3, #0]
 800e436:	4606      	mov	r6, r0
 800e438:	460c      	mov	r4, r1
 800e43a:	b125      	cbz	r5, 800e446 <__swsetup_r+0x16>
 800e43c:	69ab      	ldr	r3, [r5, #24]
 800e43e:	b913      	cbnz	r3, 800e446 <__swsetup_r+0x16>
 800e440:	4628      	mov	r0, r5
 800e442:	f7ff f8bf 	bl	800d5c4 <__sinit>
 800e446:	4b2e      	ldr	r3, [pc, #184]	; (800e500 <__swsetup_r+0xd0>)
 800e448:	429c      	cmp	r4, r3
 800e44a:	d10f      	bne.n	800e46c <__swsetup_r+0x3c>
 800e44c:	686c      	ldr	r4, [r5, #4]
 800e44e:	89a3      	ldrh	r3, [r4, #12]
 800e450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e454:	0719      	lsls	r1, r3, #28
 800e456:	d42c      	bmi.n	800e4b2 <__swsetup_r+0x82>
 800e458:	06dd      	lsls	r5, r3, #27
 800e45a:	d411      	bmi.n	800e480 <__swsetup_r+0x50>
 800e45c:	2309      	movs	r3, #9
 800e45e:	6033      	str	r3, [r6, #0]
 800e460:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e464:	81a3      	strh	r3, [r4, #12]
 800e466:	f04f 30ff 	mov.w	r0, #4294967295
 800e46a:	e03e      	b.n	800e4ea <__swsetup_r+0xba>
 800e46c:	4b25      	ldr	r3, [pc, #148]	; (800e504 <__swsetup_r+0xd4>)
 800e46e:	429c      	cmp	r4, r3
 800e470:	d101      	bne.n	800e476 <__swsetup_r+0x46>
 800e472:	68ac      	ldr	r4, [r5, #8]
 800e474:	e7eb      	b.n	800e44e <__swsetup_r+0x1e>
 800e476:	4b24      	ldr	r3, [pc, #144]	; (800e508 <__swsetup_r+0xd8>)
 800e478:	429c      	cmp	r4, r3
 800e47a:	bf08      	it	eq
 800e47c:	68ec      	ldreq	r4, [r5, #12]
 800e47e:	e7e6      	b.n	800e44e <__swsetup_r+0x1e>
 800e480:	0758      	lsls	r0, r3, #29
 800e482:	d512      	bpl.n	800e4aa <__swsetup_r+0x7a>
 800e484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e486:	b141      	cbz	r1, 800e49a <__swsetup_r+0x6a>
 800e488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e48c:	4299      	cmp	r1, r3
 800e48e:	d002      	beq.n	800e496 <__swsetup_r+0x66>
 800e490:	4630      	mov	r0, r6
 800e492:	f7ff f973 	bl	800d77c <_free_r>
 800e496:	2300      	movs	r3, #0
 800e498:	6363      	str	r3, [r4, #52]	; 0x34
 800e49a:	89a3      	ldrh	r3, [r4, #12]
 800e49c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4a0:	81a3      	strh	r3, [r4, #12]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	6063      	str	r3, [r4, #4]
 800e4a6:	6923      	ldr	r3, [r4, #16]
 800e4a8:	6023      	str	r3, [r4, #0]
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	f043 0308 	orr.w	r3, r3, #8
 800e4b0:	81a3      	strh	r3, [r4, #12]
 800e4b2:	6923      	ldr	r3, [r4, #16]
 800e4b4:	b94b      	cbnz	r3, 800e4ca <__swsetup_r+0x9a>
 800e4b6:	89a3      	ldrh	r3, [r4, #12]
 800e4b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4c0:	d003      	beq.n	800e4ca <__swsetup_r+0x9a>
 800e4c2:	4621      	mov	r1, r4
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	f000 fee5 	bl	800f294 <__smakebuf_r>
 800e4ca:	89a0      	ldrh	r0, [r4, #12]
 800e4cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4d0:	f010 0301 	ands.w	r3, r0, #1
 800e4d4:	d00a      	beq.n	800e4ec <__swsetup_r+0xbc>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	60a3      	str	r3, [r4, #8]
 800e4da:	6963      	ldr	r3, [r4, #20]
 800e4dc:	425b      	negs	r3, r3
 800e4de:	61a3      	str	r3, [r4, #24]
 800e4e0:	6923      	ldr	r3, [r4, #16]
 800e4e2:	b943      	cbnz	r3, 800e4f6 <__swsetup_r+0xc6>
 800e4e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e4e8:	d1ba      	bne.n	800e460 <__swsetup_r+0x30>
 800e4ea:	bd70      	pop	{r4, r5, r6, pc}
 800e4ec:	0781      	lsls	r1, r0, #30
 800e4ee:	bf58      	it	pl
 800e4f0:	6963      	ldrpl	r3, [r4, #20]
 800e4f2:	60a3      	str	r3, [r4, #8]
 800e4f4:	e7f4      	b.n	800e4e0 <__swsetup_r+0xb0>
 800e4f6:	2000      	movs	r0, #0
 800e4f8:	e7f7      	b.n	800e4ea <__swsetup_r+0xba>
 800e4fa:	bf00      	nop
 800e4fc:	20000090 	.word	0x20000090
 800e500:	080240ec 	.word	0x080240ec
 800e504:	0802410c 	.word	0x0802410c
 800e508:	080240cc 	.word	0x080240cc

0800e50c <_close_r>:
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	4d06      	ldr	r5, [pc, #24]	; (800e528 <_close_r+0x1c>)
 800e510:	2300      	movs	r3, #0
 800e512:	4604      	mov	r4, r0
 800e514:	4608      	mov	r0, r1
 800e516:	602b      	str	r3, [r5, #0]
 800e518:	f7f3 fef3 	bl	8002302 <_close>
 800e51c:	1c43      	adds	r3, r0, #1
 800e51e:	d102      	bne.n	800e526 <_close_r+0x1a>
 800e520:	682b      	ldr	r3, [r5, #0]
 800e522:	b103      	cbz	r3, 800e526 <_close_r+0x1a>
 800e524:	6023      	str	r3, [r4, #0]
 800e526:	bd38      	pop	{r3, r4, r5, pc}
 800e528:	20008aac 	.word	0x20008aac

0800e52c <quorem>:
 800e52c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e530:	6903      	ldr	r3, [r0, #16]
 800e532:	690c      	ldr	r4, [r1, #16]
 800e534:	42a3      	cmp	r3, r4
 800e536:	4607      	mov	r7, r0
 800e538:	f2c0 8081 	blt.w	800e63e <quorem+0x112>
 800e53c:	3c01      	subs	r4, #1
 800e53e:	f101 0814 	add.w	r8, r1, #20
 800e542:	f100 0514 	add.w	r5, r0, #20
 800e546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e54a:	9301      	str	r3, [sp, #4]
 800e54c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e554:	3301      	adds	r3, #1
 800e556:	429a      	cmp	r2, r3
 800e558:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e55c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e560:	fbb2 f6f3 	udiv	r6, r2, r3
 800e564:	d331      	bcc.n	800e5ca <quorem+0x9e>
 800e566:	f04f 0e00 	mov.w	lr, #0
 800e56a:	4640      	mov	r0, r8
 800e56c:	46ac      	mov	ip, r5
 800e56e:	46f2      	mov	sl, lr
 800e570:	f850 2b04 	ldr.w	r2, [r0], #4
 800e574:	b293      	uxth	r3, r2
 800e576:	fb06 e303 	mla	r3, r6, r3, lr
 800e57a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e57e:	b29b      	uxth	r3, r3
 800e580:	ebaa 0303 	sub.w	r3, sl, r3
 800e584:	0c12      	lsrs	r2, r2, #16
 800e586:	f8dc a000 	ldr.w	sl, [ip]
 800e58a:	fb06 e202 	mla	r2, r6, r2, lr
 800e58e:	fa13 f38a 	uxtah	r3, r3, sl
 800e592:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e596:	fa1f fa82 	uxth.w	sl, r2
 800e59a:	f8dc 2000 	ldr.w	r2, [ip]
 800e59e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e5a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5ac:	4581      	cmp	r9, r0
 800e5ae:	f84c 3b04 	str.w	r3, [ip], #4
 800e5b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e5b6:	d2db      	bcs.n	800e570 <quorem+0x44>
 800e5b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800e5bc:	b92b      	cbnz	r3, 800e5ca <quorem+0x9e>
 800e5be:	9b01      	ldr	r3, [sp, #4]
 800e5c0:	3b04      	subs	r3, #4
 800e5c2:	429d      	cmp	r5, r3
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	d32e      	bcc.n	800e626 <quorem+0xfa>
 800e5c8:	613c      	str	r4, [r7, #16]
 800e5ca:	4638      	mov	r0, r7
 800e5cc:	f001 f934 	bl	800f838 <__mcmp>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	db24      	blt.n	800e61e <quorem+0xf2>
 800e5d4:	3601      	adds	r6, #1
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	f04f 0c00 	mov.w	ip, #0
 800e5dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e5e0:	f8d0 e000 	ldr.w	lr, [r0]
 800e5e4:	b293      	uxth	r3, r2
 800e5e6:	ebac 0303 	sub.w	r3, ip, r3
 800e5ea:	0c12      	lsrs	r2, r2, #16
 800e5ec:	fa13 f38e 	uxtah	r3, r3, lr
 800e5f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e5f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5fe:	45c1      	cmp	r9, r8
 800e600:	f840 3b04 	str.w	r3, [r0], #4
 800e604:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e608:	d2e8      	bcs.n	800e5dc <quorem+0xb0>
 800e60a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e60e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e612:	b922      	cbnz	r2, 800e61e <quorem+0xf2>
 800e614:	3b04      	subs	r3, #4
 800e616:	429d      	cmp	r5, r3
 800e618:	461a      	mov	r2, r3
 800e61a:	d30a      	bcc.n	800e632 <quorem+0x106>
 800e61c:	613c      	str	r4, [r7, #16]
 800e61e:	4630      	mov	r0, r6
 800e620:	b003      	add	sp, #12
 800e622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e626:	6812      	ldr	r2, [r2, #0]
 800e628:	3b04      	subs	r3, #4
 800e62a:	2a00      	cmp	r2, #0
 800e62c:	d1cc      	bne.n	800e5c8 <quorem+0x9c>
 800e62e:	3c01      	subs	r4, #1
 800e630:	e7c7      	b.n	800e5c2 <quorem+0x96>
 800e632:	6812      	ldr	r2, [r2, #0]
 800e634:	3b04      	subs	r3, #4
 800e636:	2a00      	cmp	r2, #0
 800e638:	d1f0      	bne.n	800e61c <quorem+0xf0>
 800e63a:	3c01      	subs	r4, #1
 800e63c:	e7eb      	b.n	800e616 <quorem+0xea>
 800e63e:	2000      	movs	r0, #0
 800e640:	e7ee      	b.n	800e620 <quorem+0xf4>
 800e642:	0000      	movs	r0, r0
 800e644:	0000      	movs	r0, r0
	...

0800e648 <_dtoa_r>:
 800e648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64c:	ed2d 8b02 	vpush	{d8}
 800e650:	ec57 6b10 	vmov	r6, r7, d0
 800e654:	b095      	sub	sp, #84	; 0x54
 800e656:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e658:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e65c:	9105      	str	r1, [sp, #20]
 800e65e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e662:	4604      	mov	r4, r0
 800e664:	9209      	str	r2, [sp, #36]	; 0x24
 800e666:	930f      	str	r3, [sp, #60]	; 0x3c
 800e668:	b975      	cbnz	r5, 800e688 <_dtoa_r+0x40>
 800e66a:	2010      	movs	r0, #16
 800e66c:	f000 fe52 	bl	800f314 <malloc>
 800e670:	4602      	mov	r2, r0
 800e672:	6260      	str	r0, [r4, #36]	; 0x24
 800e674:	b920      	cbnz	r0, 800e680 <_dtoa_r+0x38>
 800e676:	4bb2      	ldr	r3, [pc, #712]	; (800e940 <_dtoa_r+0x2f8>)
 800e678:	21ea      	movs	r1, #234	; 0xea
 800e67a:	48b2      	ldr	r0, [pc, #712]	; (800e944 <_dtoa_r+0x2fc>)
 800e67c:	f001 fb56 	bl	800fd2c <__assert_func>
 800e680:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e684:	6005      	str	r5, [r0, #0]
 800e686:	60c5      	str	r5, [r0, #12]
 800e688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e68a:	6819      	ldr	r1, [r3, #0]
 800e68c:	b151      	cbz	r1, 800e6a4 <_dtoa_r+0x5c>
 800e68e:	685a      	ldr	r2, [r3, #4]
 800e690:	604a      	str	r2, [r1, #4]
 800e692:	2301      	movs	r3, #1
 800e694:	4093      	lsls	r3, r2
 800e696:	608b      	str	r3, [r1, #8]
 800e698:	4620      	mov	r0, r4
 800e69a:	f000 fe8f 	bl	800f3bc <_Bfree>
 800e69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	601a      	str	r2, [r3, #0]
 800e6a4:	1e3b      	subs	r3, r7, #0
 800e6a6:	bfb9      	ittee	lt
 800e6a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e6ac:	9303      	strlt	r3, [sp, #12]
 800e6ae:	2300      	movge	r3, #0
 800e6b0:	f8c8 3000 	strge.w	r3, [r8]
 800e6b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e6b8:	4ba3      	ldr	r3, [pc, #652]	; (800e948 <_dtoa_r+0x300>)
 800e6ba:	bfbc      	itt	lt
 800e6bc:	2201      	movlt	r2, #1
 800e6be:	f8c8 2000 	strlt.w	r2, [r8]
 800e6c2:	ea33 0309 	bics.w	r3, r3, r9
 800e6c6:	d11b      	bne.n	800e700 <_dtoa_r+0xb8>
 800e6c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800e6ce:	6013      	str	r3, [r2, #0]
 800e6d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6d4:	4333      	orrs	r3, r6
 800e6d6:	f000 857a 	beq.w	800f1ce <_dtoa_r+0xb86>
 800e6da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6dc:	b963      	cbnz	r3, 800e6f8 <_dtoa_r+0xb0>
 800e6de:	4b9b      	ldr	r3, [pc, #620]	; (800e94c <_dtoa_r+0x304>)
 800e6e0:	e024      	b.n	800e72c <_dtoa_r+0xe4>
 800e6e2:	4b9b      	ldr	r3, [pc, #620]	; (800e950 <_dtoa_r+0x308>)
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e6ea:	6013      	str	r3, [r2, #0]
 800e6ec:	9800      	ldr	r0, [sp, #0]
 800e6ee:	b015      	add	sp, #84	; 0x54
 800e6f0:	ecbd 8b02 	vpop	{d8}
 800e6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f8:	4b94      	ldr	r3, [pc, #592]	; (800e94c <_dtoa_r+0x304>)
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	3303      	adds	r3, #3
 800e6fe:	e7f3      	b.n	800e6e8 <_dtoa_r+0xa0>
 800e700:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e704:	2200      	movs	r2, #0
 800e706:	ec51 0b17 	vmov	r0, r1, d7
 800e70a:	2300      	movs	r3, #0
 800e70c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e710:	f7f2 fa3a 	bl	8000b88 <__aeabi_dcmpeq>
 800e714:	4680      	mov	r8, r0
 800e716:	b158      	cbz	r0, 800e730 <_dtoa_r+0xe8>
 800e718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e71a:	2301      	movs	r3, #1
 800e71c:	6013      	str	r3, [r2, #0]
 800e71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e720:	2b00      	cmp	r3, #0
 800e722:	f000 8551 	beq.w	800f1c8 <_dtoa_r+0xb80>
 800e726:	488b      	ldr	r0, [pc, #556]	; (800e954 <_dtoa_r+0x30c>)
 800e728:	6018      	str	r0, [r3, #0]
 800e72a:	1e43      	subs	r3, r0, #1
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	e7dd      	b.n	800e6ec <_dtoa_r+0xa4>
 800e730:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e734:	aa12      	add	r2, sp, #72	; 0x48
 800e736:	a913      	add	r1, sp, #76	; 0x4c
 800e738:	4620      	mov	r0, r4
 800e73a:	f001 f921 	bl	800f980 <__d2b>
 800e73e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e742:	4683      	mov	fp, r0
 800e744:	2d00      	cmp	r5, #0
 800e746:	d07c      	beq.n	800e842 <_dtoa_r+0x1fa>
 800e748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e74a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e74e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e752:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e756:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e75a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e75e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e762:	4b7d      	ldr	r3, [pc, #500]	; (800e958 <_dtoa_r+0x310>)
 800e764:	2200      	movs	r2, #0
 800e766:	4630      	mov	r0, r6
 800e768:	4639      	mov	r1, r7
 800e76a:	f7f1 fded 	bl	8000348 <__aeabi_dsub>
 800e76e:	a36e      	add	r3, pc, #440	; (adr r3, 800e928 <_dtoa_r+0x2e0>)
 800e770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e774:	f7f1 ffa0 	bl	80006b8 <__aeabi_dmul>
 800e778:	a36d      	add	r3, pc, #436	; (adr r3, 800e930 <_dtoa_r+0x2e8>)
 800e77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77e:	f7f1 fde5 	bl	800034c <__adddf3>
 800e782:	4606      	mov	r6, r0
 800e784:	4628      	mov	r0, r5
 800e786:	460f      	mov	r7, r1
 800e788:	f7f1 ff2c 	bl	80005e4 <__aeabi_i2d>
 800e78c:	a36a      	add	r3, pc, #424	; (adr r3, 800e938 <_dtoa_r+0x2f0>)
 800e78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e792:	f7f1 ff91 	bl	80006b8 <__aeabi_dmul>
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	4630      	mov	r0, r6
 800e79c:	4639      	mov	r1, r7
 800e79e:	f7f1 fdd5 	bl	800034c <__adddf3>
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	460f      	mov	r7, r1
 800e7a6:	f7f2 fa37 	bl	8000c18 <__aeabi_d2iz>
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	4682      	mov	sl, r0
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	f7f2 f9f2 	bl	8000b9c <__aeabi_dcmplt>
 800e7b8:	b148      	cbz	r0, 800e7ce <_dtoa_r+0x186>
 800e7ba:	4650      	mov	r0, sl
 800e7bc:	f7f1 ff12 	bl	80005e4 <__aeabi_i2d>
 800e7c0:	4632      	mov	r2, r6
 800e7c2:	463b      	mov	r3, r7
 800e7c4:	f7f2 f9e0 	bl	8000b88 <__aeabi_dcmpeq>
 800e7c8:	b908      	cbnz	r0, 800e7ce <_dtoa_r+0x186>
 800e7ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7ce:	f1ba 0f16 	cmp.w	sl, #22
 800e7d2:	d854      	bhi.n	800e87e <_dtoa_r+0x236>
 800e7d4:	4b61      	ldr	r3, [pc, #388]	; (800e95c <_dtoa_r+0x314>)
 800e7d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e7e2:	f7f2 f9db 	bl	8000b9c <__aeabi_dcmplt>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d04b      	beq.n	800e882 <_dtoa_r+0x23a>
 800e7ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	930e      	str	r3, [sp, #56]	; 0x38
 800e7f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7f4:	1b5d      	subs	r5, r3, r5
 800e7f6:	1e6b      	subs	r3, r5, #1
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	bf43      	ittte	mi
 800e7fc:	2300      	movmi	r3, #0
 800e7fe:	f1c5 0801 	rsbmi	r8, r5, #1
 800e802:	9304      	strmi	r3, [sp, #16]
 800e804:	f04f 0800 	movpl.w	r8, #0
 800e808:	f1ba 0f00 	cmp.w	sl, #0
 800e80c:	db3b      	blt.n	800e886 <_dtoa_r+0x23e>
 800e80e:	9b04      	ldr	r3, [sp, #16]
 800e810:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e814:	4453      	add	r3, sl
 800e816:	9304      	str	r3, [sp, #16]
 800e818:	2300      	movs	r3, #0
 800e81a:	9306      	str	r3, [sp, #24]
 800e81c:	9b05      	ldr	r3, [sp, #20]
 800e81e:	2b09      	cmp	r3, #9
 800e820:	d869      	bhi.n	800e8f6 <_dtoa_r+0x2ae>
 800e822:	2b05      	cmp	r3, #5
 800e824:	bfc4      	itt	gt
 800e826:	3b04      	subgt	r3, #4
 800e828:	9305      	strgt	r3, [sp, #20]
 800e82a:	9b05      	ldr	r3, [sp, #20]
 800e82c:	f1a3 0302 	sub.w	r3, r3, #2
 800e830:	bfcc      	ite	gt
 800e832:	2500      	movgt	r5, #0
 800e834:	2501      	movle	r5, #1
 800e836:	2b03      	cmp	r3, #3
 800e838:	d869      	bhi.n	800e90e <_dtoa_r+0x2c6>
 800e83a:	e8df f003 	tbb	[pc, r3]
 800e83e:	4e2c      	.short	0x4e2c
 800e840:	5a4c      	.short	0x5a4c
 800e842:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e846:	441d      	add	r5, r3
 800e848:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e84c:	2b20      	cmp	r3, #32
 800e84e:	bfc1      	itttt	gt
 800e850:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e854:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e858:	fa09 f303 	lslgt.w	r3, r9, r3
 800e85c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e860:	bfda      	itte	le
 800e862:	f1c3 0320 	rsble	r3, r3, #32
 800e866:	fa06 f003 	lslle.w	r0, r6, r3
 800e86a:	4318      	orrgt	r0, r3
 800e86c:	f7f1 feaa 	bl	80005c4 <__aeabi_ui2d>
 800e870:	2301      	movs	r3, #1
 800e872:	4606      	mov	r6, r0
 800e874:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e878:	3d01      	subs	r5, #1
 800e87a:	9310      	str	r3, [sp, #64]	; 0x40
 800e87c:	e771      	b.n	800e762 <_dtoa_r+0x11a>
 800e87e:	2301      	movs	r3, #1
 800e880:	e7b6      	b.n	800e7f0 <_dtoa_r+0x1a8>
 800e882:	900e      	str	r0, [sp, #56]	; 0x38
 800e884:	e7b5      	b.n	800e7f2 <_dtoa_r+0x1aa>
 800e886:	f1ca 0300 	rsb	r3, sl, #0
 800e88a:	9306      	str	r3, [sp, #24]
 800e88c:	2300      	movs	r3, #0
 800e88e:	eba8 080a 	sub.w	r8, r8, sl
 800e892:	930d      	str	r3, [sp, #52]	; 0x34
 800e894:	e7c2      	b.n	800e81c <_dtoa_r+0x1d4>
 800e896:	2300      	movs	r3, #0
 800e898:	9308      	str	r3, [sp, #32]
 800e89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	dc39      	bgt.n	800e914 <_dtoa_r+0x2cc>
 800e8a0:	f04f 0901 	mov.w	r9, #1
 800e8a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e8a8:	464b      	mov	r3, r9
 800e8aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e8ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	6042      	str	r2, [r0, #4]
 800e8b4:	2204      	movs	r2, #4
 800e8b6:	f102 0614 	add.w	r6, r2, #20
 800e8ba:	429e      	cmp	r6, r3
 800e8bc:	6841      	ldr	r1, [r0, #4]
 800e8be:	d92f      	bls.n	800e920 <_dtoa_r+0x2d8>
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f000 fd3b 	bl	800f33c <_Balloc>
 800e8c6:	9000      	str	r0, [sp, #0]
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d14b      	bne.n	800e964 <_dtoa_r+0x31c>
 800e8cc:	4b24      	ldr	r3, [pc, #144]	; (800e960 <_dtoa_r+0x318>)
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e8d4:	e6d1      	b.n	800e67a <_dtoa_r+0x32>
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	e7de      	b.n	800e898 <_dtoa_r+0x250>
 800e8da:	2300      	movs	r3, #0
 800e8dc:	9308      	str	r3, [sp, #32]
 800e8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8e0:	eb0a 0903 	add.w	r9, sl, r3
 800e8e4:	f109 0301 	add.w	r3, r9, #1
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	9301      	str	r3, [sp, #4]
 800e8ec:	bfb8      	it	lt
 800e8ee:	2301      	movlt	r3, #1
 800e8f0:	e7dd      	b.n	800e8ae <_dtoa_r+0x266>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e7f2      	b.n	800e8dc <_dtoa_r+0x294>
 800e8f6:	2501      	movs	r5, #1
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	9305      	str	r3, [sp, #20]
 800e8fc:	9508      	str	r5, [sp, #32]
 800e8fe:	f04f 39ff 	mov.w	r9, #4294967295
 800e902:	2200      	movs	r2, #0
 800e904:	f8cd 9004 	str.w	r9, [sp, #4]
 800e908:	2312      	movs	r3, #18
 800e90a:	9209      	str	r2, [sp, #36]	; 0x24
 800e90c:	e7cf      	b.n	800e8ae <_dtoa_r+0x266>
 800e90e:	2301      	movs	r3, #1
 800e910:	9308      	str	r3, [sp, #32]
 800e912:	e7f4      	b.n	800e8fe <_dtoa_r+0x2b6>
 800e914:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e918:	f8cd 9004 	str.w	r9, [sp, #4]
 800e91c:	464b      	mov	r3, r9
 800e91e:	e7c6      	b.n	800e8ae <_dtoa_r+0x266>
 800e920:	3101      	adds	r1, #1
 800e922:	6041      	str	r1, [r0, #4]
 800e924:	0052      	lsls	r2, r2, #1
 800e926:	e7c6      	b.n	800e8b6 <_dtoa_r+0x26e>
 800e928:	636f4361 	.word	0x636f4361
 800e92c:	3fd287a7 	.word	0x3fd287a7
 800e930:	8b60c8b3 	.word	0x8b60c8b3
 800e934:	3fc68a28 	.word	0x3fc68a28
 800e938:	509f79fb 	.word	0x509f79fb
 800e93c:	3fd34413 	.word	0x3fd34413
 800e940:	08024171 	.word	0x08024171
 800e944:	08024188 	.word	0x08024188
 800e948:	7ff00000 	.word	0x7ff00000
 800e94c:	0802416d 	.word	0x0802416d
 800e950:	08024164 	.word	0x08024164
 800e954:	08024141 	.word	0x08024141
 800e958:	3ff80000 	.word	0x3ff80000
 800e95c:	08024280 	.word	0x08024280
 800e960:	080241e7 	.word	0x080241e7
 800e964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e966:	9a00      	ldr	r2, [sp, #0]
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	9b01      	ldr	r3, [sp, #4]
 800e96c:	2b0e      	cmp	r3, #14
 800e96e:	f200 80ad 	bhi.w	800eacc <_dtoa_r+0x484>
 800e972:	2d00      	cmp	r5, #0
 800e974:	f000 80aa 	beq.w	800eacc <_dtoa_r+0x484>
 800e978:	f1ba 0f00 	cmp.w	sl, #0
 800e97c:	dd36      	ble.n	800e9ec <_dtoa_r+0x3a4>
 800e97e:	4ac3      	ldr	r2, [pc, #780]	; (800ec8c <_dtoa_r+0x644>)
 800e980:	f00a 030f 	and.w	r3, sl, #15
 800e984:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e988:	ed93 7b00 	vldr	d7, [r3]
 800e98c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e990:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e994:	eeb0 8a47 	vmov.f32	s16, s14
 800e998:	eef0 8a67 	vmov.f32	s17, s15
 800e99c:	d016      	beq.n	800e9cc <_dtoa_r+0x384>
 800e99e:	4bbc      	ldr	r3, [pc, #752]	; (800ec90 <_dtoa_r+0x648>)
 800e9a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e9a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9a8:	f7f1 ffb0 	bl	800090c <__aeabi_ddiv>
 800e9ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9b0:	f007 070f 	and.w	r7, r7, #15
 800e9b4:	2503      	movs	r5, #3
 800e9b6:	4eb6      	ldr	r6, [pc, #728]	; (800ec90 <_dtoa_r+0x648>)
 800e9b8:	b957      	cbnz	r7, 800e9d0 <_dtoa_r+0x388>
 800e9ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9be:	ec53 2b18 	vmov	r2, r3, d8
 800e9c2:	f7f1 ffa3 	bl	800090c <__aeabi_ddiv>
 800e9c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9ca:	e029      	b.n	800ea20 <_dtoa_r+0x3d8>
 800e9cc:	2502      	movs	r5, #2
 800e9ce:	e7f2      	b.n	800e9b6 <_dtoa_r+0x36e>
 800e9d0:	07f9      	lsls	r1, r7, #31
 800e9d2:	d508      	bpl.n	800e9e6 <_dtoa_r+0x39e>
 800e9d4:	ec51 0b18 	vmov	r0, r1, d8
 800e9d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e9dc:	f7f1 fe6c 	bl	80006b8 <__aeabi_dmul>
 800e9e0:	ec41 0b18 	vmov	d8, r0, r1
 800e9e4:	3501      	adds	r5, #1
 800e9e6:	107f      	asrs	r7, r7, #1
 800e9e8:	3608      	adds	r6, #8
 800e9ea:	e7e5      	b.n	800e9b8 <_dtoa_r+0x370>
 800e9ec:	f000 80a6 	beq.w	800eb3c <_dtoa_r+0x4f4>
 800e9f0:	f1ca 0600 	rsb	r6, sl, #0
 800e9f4:	4ba5      	ldr	r3, [pc, #660]	; (800ec8c <_dtoa_r+0x644>)
 800e9f6:	4fa6      	ldr	r7, [pc, #664]	; (800ec90 <_dtoa_r+0x648>)
 800e9f8:	f006 020f 	and.w	r2, r6, #15
 800e9fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ea08:	f7f1 fe56 	bl	80006b8 <__aeabi_dmul>
 800ea0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea10:	1136      	asrs	r6, r6, #4
 800ea12:	2300      	movs	r3, #0
 800ea14:	2502      	movs	r5, #2
 800ea16:	2e00      	cmp	r6, #0
 800ea18:	f040 8085 	bne.w	800eb26 <_dtoa_r+0x4de>
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1d2      	bne.n	800e9c6 <_dtoa_r+0x37e>
 800ea20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f000 808c 	beq.w	800eb40 <_dtoa_r+0x4f8>
 800ea28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea2c:	4b99      	ldr	r3, [pc, #612]	; (800ec94 <_dtoa_r+0x64c>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	4630      	mov	r0, r6
 800ea32:	4639      	mov	r1, r7
 800ea34:	f7f2 f8b2 	bl	8000b9c <__aeabi_dcmplt>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	f000 8081 	beq.w	800eb40 <_dtoa_r+0x4f8>
 800ea3e:	9b01      	ldr	r3, [sp, #4]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d07d      	beq.n	800eb40 <_dtoa_r+0x4f8>
 800ea44:	f1b9 0f00 	cmp.w	r9, #0
 800ea48:	dd3c      	ble.n	800eac4 <_dtoa_r+0x47c>
 800ea4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ea4e:	9307      	str	r3, [sp, #28]
 800ea50:	2200      	movs	r2, #0
 800ea52:	4b91      	ldr	r3, [pc, #580]	; (800ec98 <_dtoa_r+0x650>)
 800ea54:	4630      	mov	r0, r6
 800ea56:	4639      	mov	r1, r7
 800ea58:	f7f1 fe2e 	bl	80006b8 <__aeabi_dmul>
 800ea5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea60:	3501      	adds	r5, #1
 800ea62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ea66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	f7f1 fdba 	bl	80005e4 <__aeabi_i2d>
 800ea70:	4632      	mov	r2, r6
 800ea72:	463b      	mov	r3, r7
 800ea74:	f7f1 fe20 	bl	80006b8 <__aeabi_dmul>
 800ea78:	4b88      	ldr	r3, [pc, #544]	; (800ec9c <_dtoa_r+0x654>)
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f7f1 fc66 	bl	800034c <__adddf3>
 800ea80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ea84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea88:	9303      	str	r3, [sp, #12]
 800ea8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d15c      	bne.n	800eb4a <_dtoa_r+0x502>
 800ea90:	4b83      	ldr	r3, [pc, #524]	; (800eca0 <_dtoa_r+0x658>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	4630      	mov	r0, r6
 800ea96:	4639      	mov	r1, r7
 800ea98:	f7f1 fc56 	bl	8000348 <__aeabi_dsub>
 800ea9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eaa0:	4606      	mov	r6, r0
 800eaa2:	460f      	mov	r7, r1
 800eaa4:	f7f2 f898 	bl	8000bd8 <__aeabi_dcmpgt>
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	f040 8296 	bne.w	800efda <_dtoa_r+0x992>
 800eaae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eab2:	4630      	mov	r0, r6
 800eab4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eab8:	4639      	mov	r1, r7
 800eaba:	f7f2 f86f 	bl	8000b9c <__aeabi_dcmplt>
 800eabe:	2800      	cmp	r0, #0
 800eac0:	f040 8288 	bne.w	800efd4 <_dtoa_r+0x98c>
 800eac4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eac8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eacc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f2c0 8158 	blt.w	800ed84 <_dtoa_r+0x73c>
 800ead4:	f1ba 0f0e 	cmp.w	sl, #14
 800ead8:	f300 8154 	bgt.w	800ed84 <_dtoa_r+0x73c>
 800eadc:	4b6b      	ldr	r3, [pc, #428]	; (800ec8c <_dtoa_r+0x644>)
 800eade:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eae2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f280 80e3 	bge.w	800ecb4 <_dtoa_r+0x66c>
 800eaee:	9b01      	ldr	r3, [sp, #4]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f300 80df 	bgt.w	800ecb4 <_dtoa_r+0x66c>
 800eaf6:	f040 826d 	bne.w	800efd4 <_dtoa_r+0x98c>
 800eafa:	4b69      	ldr	r3, [pc, #420]	; (800eca0 <_dtoa_r+0x658>)
 800eafc:	2200      	movs	r2, #0
 800eafe:	4640      	mov	r0, r8
 800eb00:	4649      	mov	r1, r9
 800eb02:	f7f1 fdd9 	bl	80006b8 <__aeabi_dmul>
 800eb06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb0a:	f7f2 f85b 	bl	8000bc4 <__aeabi_dcmpge>
 800eb0e:	9e01      	ldr	r6, [sp, #4]
 800eb10:	4637      	mov	r7, r6
 800eb12:	2800      	cmp	r0, #0
 800eb14:	f040 8243 	bne.w	800ef9e <_dtoa_r+0x956>
 800eb18:	9d00      	ldr	r5, [sp, #0]
 800eb1a:	2331      	movs	r3, #49	; 0x31
 800eb1c:	f805 3b01 	strb.w	r3, [r5], #1
 800eb20:	f10a 0a01 	add.w	sl, sl, #1
 800eb24:	e23f      	b.n	800efa6 <_dtoa_r+0x95e>
 800eb26:	07f2      	lsls	r2, r6, #31
 800eb28:	d505      	bpl.n	800eb36 <_dtoa_r+0x4ee>
 800eb2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb2e:	f7f1 fdc3 	bl	80006b8 <__aeabi_dmul>
 800eb32:	3501      	adds	r5, #1
 800eb34:	2301      	movs	r3, #1
 800eb36:	1076      	asrs	r6, r6, #1
 800eb38:	3708      	adds	r7, #8
 800eb3a:	e76c      	b.n	800ea16 <_dtoa_r+0x3ce>
 800eb3c:	2502      	movs	r5, #2
 800eb3e:	e76f      	b.n	800ea20 <_dtoa_r+0x3d8>
 800eb40:	9b01      	ldr	r3, [sp, #4]
 800eb42:	f8cd a01c 	str.w	sl, [sp, #28]
 800eb46:	930c      	str	r3, [sp, #48]	; 0x30
 800eb48:	e78d      	b.n	800ea66 <_dtoa_r+0x41e>
 800eb4a:	9900      	ldr	r1, [sp, #0]
 800eb4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eb4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb50:	4b4e      	ldr	r3, [pc, #312]	; (800ec8c <_dtoa_r+0x644>)
 800eb52:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb56:	4401      	add	r1, r0
 800eb58:	9102      	str	r1, [sp, #8]
 800eb5a:	9908      	ldr	r1, [sp, #32]
 800eb5c:	eeb0 8a47 	vmov.f32	s16, s14
 800eb60:	eef0 8a67 	vmov.f32	s17, s15
 800eb64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eb6c:	2900      	cmp	r1, #0
 800eb6e:	d045      	beq.n	800ebfc <_dtoa_r+0x5b4>
 800eb70:	494c      	ldr	r1, [pc, #304]	; (800eca4 <_dtoa_r+0x65c>)
 800eb72:	2000      	movs	r0, #0
 800eb74:	f7f1 feca 	bl	800090c <__aeabi_ddiv>
 800eb78:	ec53 2b18 	vmov	r2, r3, d8
 800eb7c:	f7f1 fbe4 	bl	8000348 <__aeabi_dsub>
 800eb80:	9d00      	ldr	r5, [sp, #0]
 800eb82:	ec41 0b18 	vmov	d8, r0, r1
 800eb86:	4639      	mov	r1, r7
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f7f2 f845 	bl	8000c18 <__aeabi_d2iz>
 800eb8e:	900c      	str	r0, [sp, #48]	; 0x30
 800eb90:	f7f1 fd28 	bl	80005e4 <__aeabi_i2d>
 800eb94:	4602      	mov	r2, r0
 800eb96:	460b      	mov	r3, r1
 800eb98:	4630      	mov	r0, r6
 800eb9a:	4639      	mov	r1, r7
 800eb9c:	f7f1 fbd4 	bl	8000348 <__aeabi_dsub>
 800eba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eba2:	3330      	adds	r3, #48	; 0x30
 800eba4:	f805 3b01 	strb.w	r3, [r5], #1
 800eba8:	ec53 2b18 	vmov	r2, r3, d8
 800ebac:	4606      	mov	r6, r0
 800ebae:	460f      	mov	r7, r1
 800ebb0:	f7f1 fff4 	bl	8000b9c <__aeabi_dcmplt>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d165      	bne.n	800ec84 <_dtoa_r+0x63c>
 800ebb8:	4632      	mov	r2, r6
 800ebba:	463b      	mov	r3, r7
 800ebbc:	4935      	ldr	r1, [pc, #212]	; (800ec94 <_dtoa_r+0x64c>)
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	f7f1 fbc2 	bl	8000348 <__aeabi_dsub>
 800ebc4:	ec53 2b18 	vmov	r2, r3, d8
 800ebc8:	f7f1 ffe8 	bl	8000b9c <__aeabi_dcmplt>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	f040 80b9 	bne.w	800ed44 <_dtoa_r+0x6fc>
 800ebd2:	9b02      	ldr	r3, [sp, #8]
 800ebd4:	429d      	cmp	r5, r3
 800ebd6:	f43f af75 	beq.w	800eac4 <_dtoa_r+0x47c>
 800ebda:	4b2f      	ldr	r3, [pc, #188]	; (800ec98 <_dtoa_r+0x650>)
 800ebdc:	ec51 0b18 	vmov	r0, r1, d8
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f7f1 fd69 	bl	80006b8 <__aeabi_dmul>
 800ebe6:	4b2c      	ldr	r3, [pc, #176]	; (800ec98 <_dtoa_r+0x650>)
 800ebe8:	ec41 0b18 	vmov	d8, r0, r1
 800ebec:	2200      	movs	r2, #0
 800ebee:	4630      	mov	r0, r6
 800ebf0:	4639      	mov	r1, r7
 800ebf2:	f7f1 fd61 	bl	80006b8 <__aeabi_dmul>
 800ebf6:	4606      	mov	r6, r0
 800ebf8:	460f      	mov	r7, r1
 800ebfa:	e7c4      	b.n	800eb86 <_dtoa_r+0x53e>
 800ebfc:	ec51 0b17 	vmov	r0, r1, d7
 800ec00:	f7f1 fd5a 	bl	80006b8 <__aeabi_dmul>
 800ec04:	9b02      	ldr	r3, [sp, #8]
 800ec06:	9d00      	ldr	r5, [sp, #0]
 800ec08:	930c      	str	r3, [sp, #48]	; 0x30
 800ec0a:	ec41 0b18 	vmov	d8, r0, r1
 800ec0e:	4639      	mov	r1, r7
 800ec10:	4630      	mov	r0, r6
 800ec12:	f7f2 f801 	bl	8000c18 <__aeabi_d2iz>
 800ec16:	9011      	str	r0, [sp, #68]	; 0x44
 800ec18:	f7f1 fce4 	bl	80005e4 <__aeabi_i2d>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	460b      	mov	r3, r1
 800ec20:	4630      	mov	r0, r6
 800ec22:	4639      	mov	r1, r7
 800ec24:	f7f1 fb90 	bl	8000348 <__aeabi_dsub>
 800ec28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec2a:	3330      	adds	r3, #48	; 0x30
 800ec2c:	f805 3b01 	strb.w	r3, [r5], #1
 800ec30:	9b02      	ldr	r3, [sp, #8]
 800ec32:	429d      	cmp	r5, r3
 800ec34:	4606      	mov	r6, r0
 800ec36:	460f      	mov	r7, r1
 800ec38:	f04f 0200 	mov.w	r2, #0
 800ec3c:	d134      	bne.n	800eca8 <_dtoa_r+0x660>
 800ec3e:	4b19      	ldr	r3, [pc, #100]	; (800eca4 <_dtoa_r+0x65c>)
 800ec40:	ec51 0b18 	vmov	r0, r1, d8
 800ec44:	f7f1 fb82 	bl	800034c <__adddf3>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	4639      	mov	r1, r7
 800ec50:	f7f1 ffc2 	bl	8000bd8 <__aeabi_dcmpgt>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d175      	bne.n	800ed44 <_dtoa_r+0x6fc>
 800ec58:	ec53 2b18 	vmov	r2, r3, d8
 800ec5c:	4911      	ldr	r1, [pc, #68]	; (800eca4 <_dtoa_r+0x65c>)
 800ec5e:	2000      	movs	r0, #0
 800ec60:	f7f1 fb72 	bl	8000348 <__aeabi_dsub>
 800ec64:	4602      	mov	r2, r0
 800ec66:	460b      	mov	r3, r1
 800ec68:	4630      	mov	r0, r6
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 ff96 	bl	8000b9c <__aeabi_dcmplt>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	f43f af27 	beq.w	800eac4 <_dtoa_r+0x47c>
 800ec76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec78:	1e6b      	subs	r3, r5, #1
 800ec7a:	930c      	str	r3, [sp, #48]	; 0x30
 800ec7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ec80:	2b30      	cmp	r3, #48	; 0x30
 800ec82:	d0f8      	beq.n	800ec76 <_dtoa_r+0x62e>
 800ec84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ec88:	e04a      	b.n	800ed20 <_dtoa_r+0x6d8>
 800ec8a:	bf00      	nop
 800ec8c:	08024280 	.word	0x08024280
 800ec90:	08024258 	.word	0x08024258
 800ec94:	3ff00000 	.word	0x3ff00000
 800ec98:	40240000 	.word	0x40240000
 800ec9c:	401c0000 	.word	0x401c0000
 800eca0:	40140000 	.word	0x40140000
 800eca4:	3fe00000 	.word	0x3fe00000
 800eca8:	4baf      	ldr	r3, [pc, #700]	; (800ef68 <_dtoa_r+0x920>)
 800ecaa:	f7f1 fd05 	bl	80006b8 <__aeabi_dmul>
 800ecae:	4606      	mov	r6, r0
 800ecb0:	460f      	mov	r7, r1
 800ecb2:	e7ac      	b.n	800ec0e <_dtoa_r+0x5c6>
 800ecb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ecb8:	9d00      	ldr	r5, [sp, #0]
 800ecba:	4642      	mov	r2, r8
 800ecbc:	464b      	mov	r3, r9
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	4639      	mov	r1, r7
 800ecc2:	f7f1 fe23 	bl	800090c <__aeabi_ddiv>
 800ecc6:	f7f1 ffa7 	bl	8000c18 <__aeabi_d2iz>
 800ecca:	9002      	str	r0, [sp, #8]
 800eccc:	f7f1 fc8a 	bl	80005e4 <__aeabi_i2d>
 800ecd0:	4642      	mov	r2, r8
 800ecd2:	464b      	mov	r3, r9
 800ecd4:	f7f1 fcf0 	bl	80006b8 <__aeabi_dmul>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
 800ecdc:	4630      	mov	r0, r6
 800ecde:	4639      	mov	r1, r7
 800ece0:	f7f1 fb32 	bl	8000348 <__aeabi_dsub>
 800ece4:	9e02      	ldr	r6, [sp, #8]
 800ece6:	9f01      	ldr	r7, [sp, #4]
 800ece8:	3630      	adds	r6, #48	; 0x30
 800ecea:	f805 6b01 	strb.w	r6, [r5], #1
 800ecee:	9e00      	ldr	r6, [sp, #0]
 800ecf0:	1bae      	subs	r6, r5, r6
 800ecf2:	42b7      	cmp	r7, r6
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	d137      	bne.n	800ed6a <_dtoa_r+0x722>
 800ecfa:	f7f1 fb27 	bl	800034c <__adddf3>
 800ecfe:	4642      	mov	r2, r8
 800ed00:	464b      	mov	r3, r9
 800ed02:	4606      	mov	r6, r0
 800ed04:	460f      	mov	r7, r1
 800ed06:	f7f1 ff67 	bl	8000bd8 <__aeabi_dcmpgt>
 800ed0a:	b9c8      	cbnz	r0, 800ed40 <_dtoa_r+0x6f8>
 800ed0c:	4642      	mov	r2, r8
 800ed0e:	464b      	mov	r3, r9
 800ed10:	4630      	mov	r0, r6
 800ed12:	4639      	mov	r1, r7
 800ed14:	f7f1 ff38 	bl	8000b88 <__aeabi_dcmpeq>
 800ed18:	b110      	cbz	r0, 800ed20 <_dtoa_r+0x6d8>
 800ed1a:	9b02      	ldr	r3, [sp, #8]
 800ed1c:	07d9      	lsls	r1, r3, #31
 800ed1e:	d40f      	bmi.n	800ed40 <_dtoa_r+0x6f8>
 800ed20:	4620      	mov	r0, r4
 800ed22:	4659      	mov	r1, fp
 800ed24:	f000 fb4a 	bl	800f3bc <_Bfree>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	702b      	strb	r3, [r5, #0]
 800ed2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed2e:	f10a 0001 	add.w	r0, sl, #1
 800ed32:	6018      	str	r0, [r3, #0]
 800ed34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f43f acd8 	beq.w	800e6ec <_dtoa_r+0xa4>
 800ed3c:	601d      	str	r5, [r3, #0]
 800ed3e:	e4d5      	b.n	800e6ec <_dtoa_r+0xa4>
 800ed40:	f8cd a01c 	str.w	sl, [sp, #28]
 800ed44:	462b      	mov	r3, r5
 800ed46:	461d      	mov	r5, r3
 800ed48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed4c:	2a39      	cmp	r2, #57	; 0x39
 800ed4e:	d108      	bne.n	800ed62 <_dtoa_r+0x71a>
 800ed50:	9a00      	ldr	r2, [sp, #0]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d1f7      	bne.n	800ed46 <_dtoa_r+0x6fe>
 800ed56:	9a07      	ldr	r2, [sp, #28]
 800ed58:	9900      	ldr	r1, [sp, #0]
 800ed5a:	3201      	adds	r2, #1
 800ed5c:	9207      	str	r2, [sp, #28]
 800ed5e:	2230      	movs	r2, #48	; 0x30
 800ed60:	700a      	strb	r2, [r1, #0]
 800ed62:	781a      	ldrb	r2, [r3, #0]
 800ed64:	3201      	adds	r2, #1
 800ed66:	701a      	strb	r2, [r3, #0]
 800ed68:	e78c      	b.n	800ec84 <_dtoa_r+0x63c>
 800ed6a:	4b7f      	ldr	r3, [pc, #508]	; (800ef68 <_dtoa_r+0x920>)
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f7f1 fca3 	bl	80006b8 <__aeabi_dmul>
 800ed72:	2200      	movs	r2, #0
 800ed74:	2300      	movs	r3, #0
 800ed76:	4606      	mov	r6, r0
 800ed78:	460f      	mov	r7, r1
 800ed7a:	f7f1 ff05 	bl	8000b88 <__aeabi_dcmpeq>
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d09b      	beq.n	800ecba <_dtoa_r+0x672>
 800ed82:	e7cd      	b.n	800ed20 <_dtoa_r+0x6d8>
 800ed84:	9a08      	ldr	r2, [sp, #32]
 800ed86:	2a00      	cmp	r2, #0
 800ed88:	f000 80c4 	beq.w	800ef14 <_dtoa_r+0x8cc>
 800ed8c:	9a05      	ldr	r2, [sp, #20]
 800ed8e:	2a01      	cmp	r2, #1
 800ed90:	f300 80a8 	bgt.w	800eee4 <_dtoa_r+0x89c>
 800ed94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ed96:	2a00      	cmp	r2, #0
 800ed98:	f000 80a0 	beq.w	800eedc <_dtoa_r+0x894>
 800ed9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eda0:	9e06      	ldr	r6, [sp, #24]
 800eda2:	4645      	mov	r5, r8
 800eda4:	9a04      	ldr	r2, [sp, #16]
 800eda6:	2101      	movs	r1, #1
 800eda8:	441a      	add	r2, r3
 800edaa:	4620      	mov	r0, r4
 800edac:	4498      	add	r8, r3
 800edae:	9204      	str	r2, [sp, #16]
 800edb0:	f000 fbc0 	bl	800f534 <__i2b>
 800edb4:	4607      	mov	r7, r0
 800edb6:	2d00      	cmp	r5, #0
 800edb8:	dd0b      	ble.n	800edd2 <_dtoa_r+0x78a>
 800edba:	9b04      	ldr	r3, [sp, #16]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	dd08      	ble.n	800edd2 <_dtoa_r+0x78a>
 800edc0:	42ab      	cmp	r3, r5
 800edc2:	9a04      	ldr	r2, [sp, #16]
 800edc4:	bfa8      	it	ge
 800edc6:	462b      	movge	r3, r5
 800edc8:	eba8 0803 	sub.w	r8, r8, r3
 800edcc:	1aed      	subs	r5, r5, r3
 800edce:	1ad3      	subs	r3, r2, r3
 800edd0:	9304      	str	r3, [sp, #16]
 800edd2:	9b06      	ldr	r3, [sp, #24]
 800edd4:	b1fb      	cbz	r3, 800ee16 <_dtoa_r+0x7ce>
 800edd6:	9b08      	ldr	r3, [sp, #32]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 809f 	beq.w	800ef1c <_dtoa_r+0x8d4>
 800edde:	2e00      	cmp	r6, #0
 800ede0:	dd11      	ble.n	800ee06 <_dtoa_r+0x7be>
 800ede2:	4639      	mov	r1, r7
 800ede4:	4632      	mov	r2, r6
 800ede6:	4620      	mov	r0, r4
 800ede8:	f000 fc60 	bl	800f6ac <__pow5mult>
 800edec:	465a      	mov	r2, fp
 800edee:	4601      	mov	r1, r0
 800edf0:	4607      	mov	r7, r0
 800edf2:	4620      	mov	r0, r4
 800edf4:	f000 fbb4 	bl	800f560 <__multiply>
 800edf8:	4659      	mov	r1, fp
 800edfa:	9007      	str	r0, [sp, #28]
 800edfc:	4620      	mov	r0, r4
 800edfe:	f000 fadd 	bl	800f3bc <_Bfree>
 800ee02:	9b07      	ldr	r3, [sp, #28]
 800ee04:	469b      	mov	fp, r3
 800ee06:	9b06      	ldr	r3, [sp, #24]
 800ee08:	1b9a      	subs	r2, r3, r6
 800ee0a:	d004      	beq.n	800ee16 <_dtoa_r+0x7ce>
 800ee0c:	4659      	mov	r1, fp
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f000 fc4c 	bl	800f6ac <__pow5mult>
 800ee14:	4683      	mov	fp, r0
 800ee16:	2101      	movs	r1, #1
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f000 fb8b 	bl	800f534 <__i2b>
 800ee1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	4606      	mov	r6, r0
 800ee24:	dd7c      	ble.n	800ef20 <_dtoa_r+0x8d8>
 800ee26:	461a      	mov	r2, r3
 800ee28:	4601      	mov	r1, r0
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f000 fc3e 	bl	800f6ac <__pow5mult>
 800ee30:	9b05      	ldr	r3, [sp, #20]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	4606      	mov	r6, r0
 800ee36:	dd76      	ble.n	800ef26 <_dtoa_r+0x8de>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	9306      	str	r3, [sp, #24]
 800ee3c:	6933      	ldr	r3, [r6, #16]
 800ee3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ee42:	6918      	ldr	r0, [r3, #16]
 800ee44:	f000 fb26 	bl	800f494 <__hi0bits>
 800ee48:	f1c0 0020 	rsb	r0, r0, #32
 800ee4c:	9b04      	ldr	r3, [sp, #16]
 800ee4e:	4418      	add	r0, r3
 800ee50:	f010 001f 	ands.w	r0, r0, #31
 800ee54:	f000 8086 	beq.w	800ef64 <_dtoa_r+0x91c>
 800ee58:	f1c0 0320 	rsb	r3, r0, #32
 800ee5c:	2b04      	cmp	r3, #4
 800ee5e:	dd7f      	ble.n	800ef60 <_dtoa_r+0x918>
 800ee60:	f1c0 001c 	rsb	r0, r0, #28
 800ee64:	9b04      	ldr	r3, [sp, #16]
 800ee66:	4403      	add	r3, r0
 800ee68:	4480      	add	r8, r0
 800ee6a:	4405      	add	r5, r0
 800ee6c:	9304      	str	r3, [sp, #16]
 800ee6e:	f1b8 0f00 	cmp.w	r8, #0
 800ee72:	dd05      	ble.n	800ee80 <_dtoa_r+0x838>
 800ee74:	4659      	mov	r1, fp
 800ee76:	4642      	mov	r2, r8
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f000 fc71 	bl	800f760 <__lshift>
 800ee7e:	4683      	mov	fp, r0
 800ee80:	9b04      	ldr	r3, [sp, #16]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	dd05      	ble.n	800ee92 <_dtoa_r+0x84a>
 800ee86:	4631      	mov	r1, r6
 800ee88:	461a      	mov	r2, r3
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f000 fc68 	bl	800f760 <__lshift>
 800ee90:	4606      	mov	r6, r0
 800ee92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d069      	beq.n	800ef6c <_dtoa_r+0x924>
 800ee98:	4631      	mov	r1, r6
 800ee9a:	4658      	mov	r0, fp
 800ee9c:	f000 fccc 	bl	800f838 <__mcmp>
 800eea0:	2800      	cmp	r0, #0
 800eea2:	da63      	bge.n	800ef6c <_dtoa_r+0x924>
 800eea4:	2300      	movs	r3, #0
 800eea6:	4659      	mov	r1, fp
 800eea8:	220a      	movs	r2, #10
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 faa8 	bl	800f400 <__multadd>
 800eeb0:	9b08      	ldr	r3, [sp, #32]
 800eeb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eeb6:	4683      	mov	fp, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f000 818f 	beq.w	800f1dc <_dtoa_r+0xb94>
 800eebe:	4639      	mov	r1, r7
 800eec0:	2300      	movs	r3, #0
 800eec2:	220a      	movs	r2, #10
 800eec4:	4620      	mov	r0, r4
 800eec6:	f000 fa9b 	bl	800f400 <__multadd>
 800eeca:	f1b9 0f00 	cmp.w	r9, #0
 800eece:	4607      	mov	r7, r0
 800eed0:	f300 808e 	bgt.w	800eff0 <_dtoa_r+0x9a8>
 800eed4:	9b05      	ldr	r3, [sp, #20]
 800eed6:	2b02      	cmp	r3, #2
 800eed8:	dc50      	bgt.n	800ef7c <_dtoa_r+0x934>
 800eeda:	e089      	b.n	800eff0 <_dtoa_r+0x9a8>
 800eedc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eee2:	e75d      	b.n	800eda0 <_dtoa_r+0x758>
 800eee4:	9b01      	ldr	r3, [sp, #4]
 800eee6:	1e5e      	subs	r6, r3, #1
 800eee8:	9b06      	ldr	r3, [sp, #24]
 800eeea:	42b3      	cmp	r3, r6
 800eeec:	bfbf      	itttt	lt
 800eeee:	9b06      	ldrlt	r3, [sp, #24]
 800eef0:	9606      	strlt	r6, [sp, #24]
 800eef2:	1af2      	sublt	r2, r6, r3
 800eef4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800eef6:	bfb6      	itet	lt
 800eef8:	189b      	addlt	r3, r3, r2
 800eefa:	1b9e      	subge	r6, r3, r6
 800eefc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800eefe:	9b01      	ldr	r3, [sp, #4]
 800ef00:	bfb8      	it	lt
 800ef02:	2600      	movlt	r6, #0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	bfb5      	itete	lt
 800ef08:	eba8 0503 	sublt.w	r5, r8, r3
 800ef0c:	9b01      	ldrge	r3, [sp, #4]
 800ef0e:	2300      	movlt	r3, #0
 800ef10:	4645      	movge	r5, r8
 800ef12:	e747      	b.n	800eda4 <_dtoa_r+0x75c>
 800ef14:	9e06      	ldr	r6, [sp, #24]
 800ef16:	9f08      	ldr	r7, [sp, #32]
 800ef18:	4645      	mov	r5, r8
 800ef1a:	e74c      	b.n	800edb6 <_dtoa_r+0x76e>
 800ef1c:	9a06      	ldr	r2, [sp, #24]
 800ef1e:	e775      	b.n	800ee0c <_dtoa_r+0x7c4>
 800ef20:	9b05      	ldr	r3, [sp, #20]
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	dc18      	bgt.n	800ef58 <_dtoa_r+0x910>
 800ef26:	9b02      	ldr	r3, [sp, #8]
 800ef28:	b9b3      	cbnz	r3, 800ef58 <_dtoa_r+0x910>
 800ef2a:	9b03      	ldr	r3, [sp, #12]
 800ef2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef30:	b9a3      	cbnz	r3, 800ef5c <_dtoa_r+0x914>
 800ef32:	9b03      	ldr	r3, [sp, #12]
 800ef34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef38:	0d1b      	lsrs	r3, r3, #20
 800ef3a:	051b      	lsls	r3, r3, #20
 800ef3c:	b12b      	cbz	r3, 800ef4a <_dtoa_r+0x902>
 800ef3e:	9b04      	ldr	r3, [sp, #16]
 800ef40:	3301      	adds	r3, #1
 800ef42:	9304      	str	r3, [sp, #16]
 800ef44:	f108 0801 	add.w	r8, r8, #1
 800ef48:	2301      	movs	r3, #1
 800ef4a:	9306      	str	r3, [sp, #24]
 800ef4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f47f af74 	bne.w	800ee3c <_dtoa_r+0x7f4>
 800ef54:	2001      	movs	r0, #1
 800ef56:	e779      	b.n	800ee4c <_dtoa_r+0x804>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	e7f6      	b.n	800ef4a <_dtoa_r+0x902>
 800ef5c:	9b02      	ldr	r3, [sp, #8]
 800ef5e:	e7f4      	b.n	800ef4a <_dtoa_r+0x902>
 800ef60:	d085      	beq.n	800ee6e <_dtoa_r+0x826>
 800ef62:	4618      	mov	r0, r3
 800ef64:	301c      	adds	r0, #28
 800ef66:	e77d      	b.n	800ee64 <_dtoa_r+0x81c>
 800ef68:	40240000 	.word	0x40240000
 800ef6c:	9b01      	ldr	r3, [sp, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	dc38      	bgt.n	800efe4 <_dtoa_r+0x99c>
 800ef72:	9b05      	ldr	r3, [sp, #20]
 800ef74:	2b02      	cmp	r3, #2
 800ef76:	dd35      	ble.n	800efe4 <_dtoa_r+0x99c>
 800ef78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ef7c:	f1b9 0f00 	cmp.w	r9, #0
 800ef80:	d10d      	bne.n	800ef9e <_dtoa_r+0x956>
 800ef82:	4631      	mov	r1, r6
 800ef84:	464b      	mov	r3, r9
 800ef86:	2205      	movs	r2, #5
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f000 fa39 	bl	800f400 <__multadd>
 800ef8e:	4601      	mov	r1, r0
 800ef90:	4606      	mov	r6, r0
 800ef92:	4658      	mov	r0, fp
 800ef94:	f000 fc50 	bl	800f838 <__mcmp>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	f73f adbd 	bgt.w	800eb18 <_dtoa_r+0x4d0>
 800ef9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efa0:	9d00      	ldr	r5, [sp, #0]
 800efa2:	ea6f 0a03 	mvn.w	sl, r3
 800efa6:	f04f 0800 	mov.w	r8, #0
 800efaa:	4631      	mov	r1, r6
 800efac:	4620      	mov	r0, r4
 800efae:	f000 fa05 	bl	800f3bc <_Bfree>
 800efb2:	2f00      	cmp	r7, #0
 800efb4:	f43f aeb4 	beq.w	800ed20 <_dtoa_r+0x6d8>
 800efb8:	f1b8 0f00 	cmp.w	r8, #0
 800efbc:	d005      	beq.n	800efca <_dtoa_r+0x982>
 800efbe:	45b8      	cmp	r8, r7
 800efc0:	d003      	beq.n	800efca <_dtoa_r+0x982>
 800efc2:	4641      	mov	r1, r8
 800efc4:	4620      	mov	r0, r4
 800efc6:	f000 f9f9 	bl	800f3bc <_Bfree>
 800efca:	4639      	mov	r1, r7
 800efcc:	4620      	mov	r0, r4
 800efce:	f000 f9f5 	bl	800f3bc <_Bfree>
 800efd2:	e6a5      	b.n	800ed20 <_dtoa_r+0x6d8>
 800efd4:	2600      	movs	r6, #0
 800efd6:	4637      	mov	r7, r6
 800efd8:	e7e1      	b.n	800ef9e <_dtoa_r+0x956>
 800efda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800efdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800efe0:	4637      	mov	r7, r6
 800efe2:	e599      	b.n	800eb18 <_dtoa_r+0x4d0>
 800efe4:	9b08      	ldr	r3, [sp, #32]
 800efe6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f000 80fd 	beq.w	800f1ea <_dtoa_r+0xba2>
 800eff0:	2d00      	cmp	r5, #0
 800eff2:	dd05      	ble.n	800f000 <_dtoa_r+0x9b8>
 800eff4:	4639      	mov	r1, r7
 800eff6:	462a      	mov	r2, r5
 800eff8:	4620      	mov	r0, r4
 800effa:	f000 fbb1 	bl	800f760 <__lshift>
 800effe:	4607      	mov	r7, r0
 800f000:	9b06      	ldr	r3, [sp, #24]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d05c      	beq.n	800f0c0 <_dtoa_r+0xa78>
 800f006:	6879      	ldr	r1, [r7, #4]
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 f997 	bl	800f33c <_Balloc>
 800f00e:	4605      	mov	r5, r0
 800f010:	b928      	cbnz	r0, 800f01e <_dtoa_r+0x9d6>
 800f012:	4b80      	ldr	r3, [pc, #512]	; (800f214 <_dtoa_r+0xbcc>)
 800f014:	4602      	mov	r2, r0
 800f016:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f01a:	f7ff bb2e 	b.w	800e67a <_dtoa_r+0x32>
 800f01e:	693a      	ldr	r2, [r7, #16]
 800f020:	3202      	adds	r2, #2
 800f022:	0092      	lsls	r2, r2, #2
 800f024:	f107 010c 	add.w	r1, r7, #12
 800f028:	300c      	adds	r0, #12
 800f02a:	f7fe fb90 	bl	800d74e <memcpy>
 800f02e:	2201      	movs	r2, #1
 800f030:	4629      	mov	r1, r5
 800f032:	4620      	mov	r0, r4
 800f034:	f000 fb94 	bl	800f760 <__lshift>
 800f038:	9b00      	ldr	r3, [sp, #0]
 800f03a:	3301      	adds	r3, #1
 800f03c:	9301      	str	r3, [sp, #4]
 800f03e:	9b00      	ldr	r3, [sp, #0]
 800f040:	444b      	add	r3, r9
 800f042:	9307      	str	r3, [sp, #28]
 800f044:	9b02      	ldr	r3, [sp, #8]
 800f046:	f003 0301 	and.w	r3, r3, #1
 800f04a:	46b8      	mov	r8, r7
 800f04c:	9306      	str	r3, [sp, #24]
 800f04e:	4607      	mov	r7, r0
 800f050:	9b01      	ldr	r3, [sp, #4]
 800f052:	4631      	mov	r1, r6
 800f054:	3b01      	subs	r3, #1
 800f056:	4658      	mov	r0, fp
 800f058:	9302      	str	r3, [sp, #8]
 800f05a:	f7ff fa67 	bl	800e52c <quorem>
 800f05e:	4603      	mov	r3, r0
 800f060:	3330      	adds	r3, #48	; 0x30
 800f062:	9004      	str	r0, [sp, #16]
 800f064:	4641      	mov	r1, r8
 800f066:	4658      	mov	r0, fp
 800f068:	9308      	str	r3, [sp, #32]
 800f06a:	f000 fbe5 	bl	800f838 <__mcmp>
 800f06e:	463a      	mov	r2, r7
 800f070:	4681      	mov	r9, r0
 800f072:	4631      	mov	r1, r6
 800f074:	4620      	mov	r0, r4
 800f076:	f000 fbfb 	bl	800f870 <__mdiff>
 800f07a:	68c2      	ldr	r2, [r0, #12]
 800f07c:	9b08      	ldr	r3, [sp, #32]
 800f07e:	4605      	mov	r5, r0
 800f080:	bb02      	cbnz	r2, 800f0c4 <_dtoa_r+0xa7c>
 800f082:	4601      	mov	r1, r0
 800f084:	4658      	mov	r0, fp
 800f086:	f000 fbd7 	bl	800f838 <__mcmp>
 800f08a:	9b08      	ldr	r3, [sp, #32]
 800f08c:	4602      	mov	r2, r0
 800f08e:	4629      	mov	r1, r5
 800f090:	4620      	mov	r0, r4
 800f092:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f096:	f000 f991 	bl	800f3bc <_Bfree>
 800f09a:	9b05      	ldr	r3, [sp, #20]
 800f09c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f09e:	9d01      	ldr	r5, [sp, #4]
 800f0a0:	ea43 0102 	orr.w	r1, r3, r2
 800f0a4:	9b06      	ldr	r3, [sp, #24]
 800f0a6:	430b      	orrs	r3, r1
 800f0a8:	9b08      	ldr	r3, [sp, #32]
 800f0aa:	d10d      	bne.n	800f0c8 <_dtoa_r+0xa80>
 800f0ac:	2b39      	cmp	r3, #57	; 0x39
 800f0ae:	d029      	beq.n	800f104 <_dtoa_r+0xabc>
 800f0b0:	f1b9 0f00 	cmp.w	r9, #0
 800f0b4:	dd01      	ble.n	800f0ba <_dtoa_r+0xa72>
 800f0b6:	9b04      	ldr	r3, [sp, #16]
 800f0b8:	3331      	adds	r3, #49	; 0x31
 800f0ba:	9a02      	ldr	r2, [sp, #8]
 800f0bc:	7013      	strb	r3, [r2, #0]
 800f0be:	e774      	b.n	800efaa <_dtoa_r+0x962>
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	e7b9      	b.n	800f038 <_dtoa_r+0x9f0>
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	e7e2      	b.n	800f08e <_dtoa_r+0xa46>
 800f0c8:	f1b9 0f00 	cmp.w	r9, #0
 800f0cc:	db06      	blt.n	800f0dc <_dtoa_r+0xa94>
 800f0ce:	9905      	ldr	r1, [sp, #20]
 800f0d0:	ea41 0909 	orr.w	r9, r1, r9
 800f0d4:	9906      	ldr	r1, [sp, #24]
 800f0d6:	ea59 0101 	orrs.w	r1, r9, r1
 800f0da:	d120      	bne.n	800f11e <_dtoa_r+0xad6>
 800f0dc:	2a00      	cmp	r2, #0
 800f0de:	ddec      	ble.n	800f0ba <_dtoa_r+0xa72>
 800f0e0:	4659      	mov	r1, fp
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	9301      	str	r3, [sp, #4]
 800f0e8:	f000 fb3a 	bl	800f760 <__lshift>
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	4683      	mov	fp, r0
 800f0f0:	f000 fba2 	bl	800f838 <__mcmp>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	9b01      	ldr	r3, [sp, #4]
 800f0f8:	dc02      	bgt.n	800f100 <_dtoa_r+0xab8>
 800f0fa:	d1de      	bne.n	800f0ba <_dtoa_r+0xa72>
 800f0fc:	07da      	lsls	r2, r3, #31
 800f0fe:	d5dc      	bpl.n	800f0ba <_dtoa_r+0xa72>
 800f100:	2b39      	cmp	r3, #57	; 0x39
 800f102:	d1d8      	bne.n	800f0b6 <_dtoa_r+0xa6e>
 800f104:	9a02      	ldr	r2, [sp, #8]
 800f106:	2339      	movs	r3, #57	; 0x39
 800f108:	7013      	strb	r3, [r2, #0]
 800f10a:	462b      	mov	r3, r5
 800f10c:	461d      	mov	r5, r3
 800f10e:	3b01      	subs	r3, #1
 800f110:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f114:	2a39      	cmp	r2, #57	; 0x39
 800f116:	d050      	beq.n	800f1ba <_dtoa_r+0xb72>
 800f118:	3201      	adds	r2, #1
 800f11a:	701a      	strb	r2, [r3, #0]
 800f11c:	e745      	b.n	800efaa <_dtoa_r+0x962>
 800f11e:	2a00      	cmp	r2, #0
 800f120:	dd03      	ble.n	800f12a <_dtoa_r+0xae2>
 800f122:	2b39      	cmp	r3, #57	; 0x39
 800f124:	d0ee      	beq.n	800f104 <_dtoa_r+0xabc>
 800f126:	3301      	adds	r3, #1
 800f128:	e7c7      	b.n	800f0ba <_dtoa_r+0xa72>
 800f12a:	9a01      	ldr	r2, [sp, #4]
 800f12c:	9907      	ldr	r1, [sp, #28]
 800f12e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f132:	428a      	cmp	r2, r1
 800f134:	d02a      	beq.n	800f18c <_dtoa_r+0xb44>
 800f136:	4659      	mov	r1, fp
 800f138:	2300      	movs	r3, #0
 800f13a:	220a      	movs	r2, #10
 800f13c:	4620      	mov	r0, r4
 800f13e:	f000 f95f 	bl	800f400 <__multadd>
 800f142:	45b8      	cmp	r8, r7
 800f144:	4683      	mov	fp, r0
 800f146:	f04f 0300 	mov.w	r3, #0
 800f14a:	f04f 020a 	mov.w	r2, #10
 800f14e:	4641      	mov	r1, r8
 800f150:	4620      	mov	r0, r4
 800f152:	d107      	bne.n	800f164 <_dtoa_r+0xb1c>
 800f154:	f000 f954 	bl	800f400 <__multadd>
 800f158:	4680      	mov	r8, r0
 800f15a:	4607      	mov	r7, r0
 800f15c:	9b01      	ldr	r3, [sp, #4]
 800f15e:	3301      	adds	r3, #1
 800f160:	9301      	str	r3, [sp, #4]
 800f162:	e775      	b.n	800f050 <_dtoa_r+0xa08>
 800f164:	f000 f94c 	bl	800f400 <__multadd>
 800f168:	4639      	mov	r1, r7
 800f16a:	4680      	mov	r8, r0
 800f16c:	2300      	movs	r3, #0
 800f16e:	220a      	movs	r2, #10
 800f170:	4620      	mov	r0, r4
 800f172:	f000 f945 	bl	800f400 <__multadd>
 800f176:	4607      	mov	r7, r0
 800f178:	e7f0      	b.n	800f15c <_dtoa_r+0xb14>
 800f17a:	f1b9 0f00 	cmp.w	r9, #0
 800f17e:	9a00      	ldr	r2, [sp, #0]
 800f180:	bfcc      	ite	gt
 800f182:	464d      	movgt	r5, r9
 800f184:	2501      	movle	r5, #1
 800f186:	4415      	add	r5, r2
 800f188:	f04f 0800 	mov.w	r8, #0
 800f18c:	4659      	mov	r1, fp
 800f18e:	2201      	movs	r2, #1
 800f190:	4620      	mov	r0, r4
 800f192:	9301      	str	r3, [sp, #4]
 800f194:	f000 fae4 	bl	800f760 <__lshift>
 800f198:	4631      	mov	r1, r6
 800f19a:	4683      	mov	fp, r0
 800f19c:	f000 fb4c 	bl	800f838 <__mcmp>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	dcb2      	bgt.n	800f10a <_dtoa_r+0xac2>
 800f1a4:	d102      	bne.n	800f1ac <_dtoa_r+0xb64>
 800f1a6:	9b01      	ldr	r3, [sp, #4]
 800f1a8:	07db      	lsls	r3, r3, #31
 800f1aa:	d4ae      	bmi.n	800f10a <_dtoa_r+0xac2>
 800f1ac:	462b      	mov	r3, r5
 800f1ae:	461d      	mov	r5, r3
 800f1b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1b4:	2a30      	cmp	r2, #48	; 0x30
 800f1b6:	d0fa      	beq.n	800f1ae <_dtoa_r+0xb66>
 800f1b8:	e6f7      	b.n	800efaa <_dtoa_r+0x962>
 800f1ba:	9a00      	ldr	r2, [sp, #0]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d1a5      	bne.n	800f10c <_dtoa_r+0xac4>
 800f1c0:	f10a 0a01 	add.w	sl, sl, #1
 800f1c4:	2331      	movs	r3, #49	; 0x31
 800f1c6:	e779      	b.n	800f0bc <_dtoa_r+0xa74>
 800f1c8:	4b13      	ldr	r3, [pc, #76]	; (800f218 <_dtoa_r+0xbd0>)
 800f1ca:	f7ff baaf 	b.w	800e72c <_dtoa_r+0xe4>
 800f1ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f47f aa86 	bne.w	800e6e2 <_dtoa_r+0x9a>
 800f1d6:	4b11      	ldr	r3, [pc, #68]	; (800f21c <_dtoa_r+0xbd4>)
 800f1d8:	f7ff baa8 	b.w	800e72c <_dtoa_r+0xe4>
 800f1dc:	f1b9 0f00 	cmp.w	r9, #0
 800f1e0:	dc03      	bgt.n	800f1ea <_dtoa_r+0xba2>
 800f1e2:	9b05      	ldr	r3, [sp, #20]
 800f1e4:	2b02      	cmp	r3, #2
 800f1e6:	f73f aec9 	bgt.w	800ef7c <_dtoa_r+0x934>
 800f1ea:	9d00      	ldr	r5, [sp, #0]
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	4658      	mov	r0, fp
 800f1f0:	f7ff f99c 	bl	800e52c <quorem>
 800f1f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f1f8:	f805 3b01 	strb.w	r3, [r5], #1
 800f1fc:	9a00      	ldr	r2, [sp, #0]
 800f1fe:	1aaa      	subs	r2, r5, r2
 800f200:	4591      	cmp	r9, r2
 800f202:	ddba      	ble.n	800f17a <_dtoa_r+0xb32>
 800f204:	4659      	mov	r1, fp
 800f206:	2300      	movs	r3, #0
 800f208:	220a      	movs	r2, #10
 800f20a:	4620      	mov	r0, r4
 800f20c:	f000 f8f8 	bl	800f400 <__multadd>
 800f210:	4683      	mov	fp, r0
 800f212:	e7eb      	b.n	800f1ec <_dtoa_r+0xba4>
 800f214:	080241e7 	.word	0x080241e7
 800f218:	08024140 	.word	0x08024140
 800f21c:	08024164 	.word	0x08024164

0800f220 <_localeconv_r>:
 800f220:	4800      	ldr	r0, [pc, #0]	; (800f224 <_localeconv_r+0x4>)
 800f222:	4770      	bx	lr
 800f224:	200001e4 	.word	0x200001e4

0800f228 <_lseek_r>:
 800f228:	b538      	push	{r3, r4, r5, lr}
 800f22a:	4d07      	ldr	r5, [pc, #28]	; (800f248 <_lseek_r+0x20>)
 800f22c:	4604      	mov	r4, r0
 800f22e:	4608      	mov	r0, r1
 800f230:	4611      	mov	r1, r2
 800f232:	2200      	movs	r2, #0
 800f234:	602a      	str	r2, [r5, #0]
 800f236:	461a      	mov	r2, r3
 800f238:	f7f3 f88a 	bl	8002350 <_lseek>
 800f23c:	1c43      	adds	r3, r0, #1
 800f23e:	d102      	bne.n	800f246 <_lseek_r+0x1e>
 800f240:	682b      	ldr	r3, [r5, #0]
 800f242:	b103      	cbz	r3, 800f246 <_lseek_r+0x1e>
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	bd38      	pop	{r3, r4, r5, pc}
 800f248:	20008aac 	.word	0x20008aac

0800f24c <__swhatbuf_r>:
 800f24c:	b570      	push	{r4, r5, r6, lr}
 800f24e:	460e      	mov	r6, r1
 800f250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f254:	2900      	cmp	r1, #0
 800f256:	b096      	sub	sp, #88	; 0x58
 800f258:	4614      	mov	r4, r2
 800f25a:	461d      	mov	r5, r3
 800f25c:	da07      	bge.n	800f26e <__swhatbuf_r+0x22>
 800f25e:	2300      	movs	r3, #0
 800f260:	602b      	str	r3, [r5, #0]
 800f262:	89b3      	ldrh	r3, [r6, #12]
 800f264:	061a      	lsls	r2, r3, #24
 800f266:	d410      	bmi.n	800f28a <__swhatbuf_r+0x3e>
 800f268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f26c:	e00e      	b.n	800f28c <__swhatbuf_r+0x40>
 800f26e:	466a      	mov	r2, sp
 800f270:	f000 fd8c 	bl	800fd8c <_fstat_r>
 800f274:	2800      	cmp	r0, #0
 800f276:	dbf2      	blt.n	800f25e <__swhatbuf_r+0x12>
 800f278:	9a01      	ldr	r2, [sp, #4]
 800f27a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f27e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f282:	425a      	negs	r2, r3
 800f284:	415a      	adcs	r2, r3
 800f286:	602a      	str	r2, [r5, #0]
 800f288:	e7ee      	b.n	800f268 <__swhatbuf_r+0x1c>
 800f28a:	2340      	movs	r3, #64	; 0x40
 800f28c:	2000      	movs	r0, #0
 800f28e:	6023      	str	r3, [r4, #0]
 800f290:	b016      	add	sp, #88	; 0x58
 800f292:	bd70      	pop	{r4, r5, r6, pc}

0800f294 <__smakebuf_r>:
 800f294:	898b      	ldrh	r3, [r1, #12]
 800f296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f298:	079d      	lsls	r5, r3, #30
 800f29a:	4606      	mov	r6, r0
 800f29c:	460c      	mov	r4, r1
 800f29e:	d507      	bpl.n	800f2b0 <__smakebuf_r+0x1c>
 800f2a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	6123      	str	r3, [r4, #16]
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	6163      	str	r3, [r4, #20]
 800f2ac:	b002      	add	sp, #8
 800f2ae:	bd70      	pop	{r4, r5, r6, pc}
 800f2b0:	ab01      	add	r3, sp, #4
 800f2b2:	466a      	mov	r2, sp
 800f2b4:	f7ff ffca 	bl	800f24c <__swhatbuf_r>
 800f2b8:	9900      	ldr	r1, [sp, #0]
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f7fe faad 	bl	800d81c <_malloc_r>
 800f2c2:	b948      	cbnz	r0, 800f2d8 <__smakebuf_r+0x44>
 800f2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2c8:	059a      	lsls	r2, r3, #22
 800f2ca:	d4ef      	bmi.n	800f2ac <__smakebuf_r+0x18>
 800f2cc:	f023 0303 	bic.w	r3, r3, #3
 800f2d0:	f043 0302 	orr.w	r3, r3, #2
 800f2d4:	81a3      	strh	r3, [r4, #12]
 800f2d6:	e7e3      	b.n	800f2a0 <__smakebuf_r+0xc>
 800f2d8:	4b0d      	ldr	r3, [pc, #52]	; (800f310 <__smakebuf_r+0x7c>)
 800f2da:	62b3      	str	r3, [r6, #40]	; 0x28
 800f2dc:	89a3      	ldrh	r3, [r4, #12]
 800f2de:	6020      	str	r0, [r4, #0]
 800f2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2e4:	81a3      	strh	r3, [r4, #12]
 800f2e6:	9b00      	ldr	r3, [sp, #0]
 800f2e8:	6163      	str	r3, [r4, #20]
 800f2ea:	9b01      	ldr	r3, [sp, #4]
 800f2ec:	6120      	str	r0, [r4, #16]
 800f2ee:	b15b      	cbz	r3, 800f308 <__smakebuf_r+0x74>
 800f2f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f000 fd5b 	bl	800fdb0 <_isatty_r>
 800f2fa:	b128      	cbz	r0, 800f308 <__smakebuf_r+0x74>
 800f2fc:	89a3      	ldrh	r3, [r4, #12]
 800f2fe:	f023 0303 	bic.w	r3, r3, #3
 800f302:	f043 0301 	orr.w	r3, r3, #1
 800f306:	81a3      	strh	r3, [r4, #12]
 800f308:	89a0      	ldrh	r0, [r4, #12]
 800f30a:	4305      	orrs	r5, r0
 800f30c:	81a5      	strh	r5, [r4, #12]
 800f30e:	e7cd      	b.n	800f2ac <__smakebuf_r+0x18>
 800f310:	0800d55d 	.word	0x0800d55d

0800f314 <malloc>:
 800f314:	4b02      	ldr	r3, [pc, #8]	; (800f320 <malloc+0xc>)
 800f316:	4601      	mov	r1, r0
 800f318:	6818      	ldr	r0, [r3, #0]
 800f31a:	f7fe ba7f 	b.w	800d81c <_malloc_r>
 800f31e:	bf00      	nop
 800f320:	20000090 	.word	0x20000090

0800f324 <__malloc_lock>:
 800f324:	4801      	ldr	r0, [pc, #4]	; (800f32c <__malloc_lock+0x8>)
 800f326:	f7fe ba10 	b.w	800d74a <__retarget_lock_acquire_recursive>
 800f32a:	bf00      	nop
 800f32c:	20008aa4 	.word	0x20008aa4

0800f330 <__malloc_unlock>:
 800f330:	4801      	ldr	r0, [pc, #4]	; (800f338 <__malloc_unlock+0x8>)
 800f332:	f7fe ba0b 	b.w	800d74c <__retarget_lock_release_recursive>
 800f336:	bf00      	nop
 800f338:	20008aa4 	.word	0x20008aa4

0800f33c <_Balloc>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f340:	4604      	mov	r4, r0
 800f342:	460d      	mov	r5, r1
 800f344:	b976      	cbnz	r6, 800f364 <_Balloc+0x28>
 800f346:	2010      	movs	r0, #16
 800f348:	f7ff ffe4 	bl	800f314 <malloc>
 800f34c:	4602      	mov	r2, r0
 800f34e:	6260      	str	r0, [r4, #36]	; 0x24
 800f350:	b920      	cbnz	r0, 800f35c <_Balloc+0x20>
 800f352:	4b18      	ldr	r3, [pc, #96]	; (800f3b4 <_Balloc+0x78>)
 800f354:	4818      	ldr	r0, [pc, #96]	; (800f3b8 <_Balloc+0x7c>)
 800f356:	2166      	movs	r1, #102	; 0x66
 800f358:	f000 fce8 	bl	800fd2c <__assert_func>
 800f35c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f360:	6006      	str	r6, [r0, #0]
 800f362:	60c6      	str	r6, [r0, #12]
 800f364:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f366:	68f3      	ldr	r3, [r6, #12]
 800f368:	b183      	cbz	r3, 800f38c <_Balloc+0x50>
 800f36a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f372:	b9b8      	cbnz	r0, 800f3a4 <_Balloc+0x68>
 800f374:	2101      	movs	r1, #1
 800f376:	fa01 f605 	lsl.w	r6, r1, r5
 800f37a:	1d72      	adds	r2, r6, #5
 800f37c:	0092      	lsls	r2, r2, #2
 800f37e:	4620      	mov	r0, r4
 800f380:	f000 fb5a 	bl	800fa38 <_calloc_r>
 800f384:	b160      	cbz	r0, 800f3a0 <_Balloc+0x64>
 800f386:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f38a:	e00e      	b.n	800f3aa <_Balloc+0x6e>
 800f38c:	2221      	movs	r2, #33	; 0x21
 800f38e:	2104      	movs	r1, #4
 800f390:	4620      	mov	r0, r4
 800f392:	f000 fb51 	bl	800fa38 <_calloc_r>
 800f396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f398:	60f0      	str	r0, [r6, #12]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d1e4      	bne.n	800f36a <_Balloc+0x2e>
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}
 800f3a4:	6802      	ldr	r2, [r0, #0]
 800f3a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3b0:	e7f7      	b.n	800f3a2 <_Balloc+0x66>
 800f3b2:	bf00      	nop
 800f3b4:	08024171 	.word	0x08024171
 800f3b8:	080241f8 	.word	0x080241f8

0800f3bc <_Bfree>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	460c      	mov	r4, r1
 800f3c4:	b976      	cbnz	r6, 800f3e4 <_Bfree+0x28>
 800f3c6:	2010      	movs	r0, #16
 800f3c8:	f7ff ffa4 	bl	800f314 <malloc>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	6268      	str	r0, [r5, #36]	; 0x24
 800f3d0:	b920      	cbnz	r0, 800f3dc <_Bfree+0x20>
 800f3d2:	4b09      	ldr	r3, [pc, #36]	; (800f3f8 <_Bfree+0x3c>)
 800f3d4:	4809      	ldr	r0, [pc, #36]	; (800f3fc <_Bfree+0x40>)
 800f3d6:	218a      	movs	r1, #138	; 0x8a
 800f3d8:	f000 fca8 	bl	800fd2c <__assert_func>
 800f3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3e0:	6006      	str	r6, [r0, #0]
 800f3e2:	60c6      	str	r6, [r0, #12]
 800f3e4:	b13c      	cbz	r4, 800f3f6 <_Bfree+0x3a>
 800f3e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f3e8:	6862      	ldr	r2, [r4, #4]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3f0:	6021      	str	r1, [r4, #0]
 800f3f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3f6:	bd70      	pop	{r4, r5, r6, pc}
 800f3f8:	08024171 	.word	0x08024171
 800f3fc:	080241f8 	.word	0x080241f8

0800f400 <__multadd>:
 800f400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f404:	690e      	ldr	r6, [r1, #16]
 800f406:	4607      	mov	r7, r0
 800f408:	4698      	mov	r8, r3
 800f40a:	460c      	mov	r4, r1
 800f40c:	f101 0014 	add.w	r0, r1, #20
 800f410:	2300      	movs	r3, #0
 800f412:	6805      	ldr	r5, [r0, #0]
 800f414:	b2a9      	uxth	r1, r5
 800f416:	fb02 8101 	mla	r1, r2, r1, r8
 800f41a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f41e:	0c2d      	lsrs	r5, r5, #16
 800f420:	fb02 c505 	mla	r5, r2, r5, ip
 800f424:	b289      	uxth	r1, r1
 800f426:	3301      	adds	r3, #1
 800f428:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f42c:	429e      	cmp	r6, r3
 800f42e:	f840 1b04 	str.w	r1, [r0], #4
 800f432:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f436:	dcec      	bgt.n	800f412 <__multadd+0x12>
 800f438:	f1b8 0f00 	cmp.w	r8, #0
 800f43c:	d022      	beq.n	800f484 <__multadd+0x84>
 800f43e:	68a3      	ldr	r3, [r4, #8]
 800f440:	42b3      	cmp	r3, r6
 800f442:	dc19      	bgt.n	800f478 <__multadd+0x78>
 800f444:	6861      	ldr	r1, [r4, #4]
 800f446:	4638      	mov	r0, r7
 800f448:	3101      	adds	r1, #1
 800f44a:	f7ff ff77 	bl	800f33c <_Balloc>
 800f44e:	4605      	mov	r5, r0
 800f450:	b928      	cbnz	r0, 800f45e <__multadd+0x5e>
 800f452:	4602      	mov	r2, r0
 800f454:	4b0d      	ldr	r3, [pc, #52]	; (800f48c <__multadd+0x8c>)
 800f456:	480e      	ldr	r0, [pc, #56]	; (800f490 <__multadd+0x90>)
 800f458:	21b5      	movs	r1, #181	; 0xb5
 800f45a:	f000 fc67 	bl	800fd2c <__assert_func>
 800f45e:	6922      	ldr	r2, [r4, #16]
 800f460:	3202      	adds	r2, #2
 800f462:	f104 010c 	add.w	r1, r4, #12
 800f466:	0092      	lsls	r2, r2, #2
 800f468:	300c      	adds	r0, #12
 800f46a:	f7fe f970 	bl	800d74e <memcpy>
 800f46e:	4621      	mov	r1, r4
 800f470:	4638      	mov	r0, r7
 800f472:	f7ff ffa3 	bl	800f3bc <_Bfree>
 800f476:	462c      	mov	r4, r5
 800f478:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f47c:	3601      	adds	r6, #1
 800f47e:	f8c3 8014 	str.w	r8, [r3, #20]
 800f482:	6126      	str	r6, [r4, #16]
 800f484:	4620      	mov	r0, r4
 800f486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f48a:	bf00      	nop
 800f48c:	080241e7 	.word	0x080241e7
 800f490:	080241f8 	.word	0x080241f8

0800f494 <__hi0bits>:
 800f494:	0c03      	lsrs	r3, r0, #16
 800f496:	041b      	lsls	r3, r3, #16
 800f498:	b9d3      	cbnz	r3, 800f4d0 <__hi0bits+0x3c>
 800f49a:	0400      	lsls	r0, r0, #16
 800f49c:	2310      	movs	r3, #16
 800f49e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f4a2:	bf04      	itt	eq
 800f4a4:	0200      	lsleq	r0, r0, #8
 800f4a6:	3308      	addeq	r3, #8
 800f4a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f4ac:	bf04      	itt	eq
 800f4ae:	0100      	lsleq	r0, r0, #4
 800f4b0:	3304      	addeq	r3, #4
 800f4b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f4b6:	bf04      	itt	eq
 800f4b8:	0080      	lsleq	r0, r0, #2
 800f4ba:	3302      	addeq	r3, #2
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	db05      	blt.n	800f4cc <__hi0bits+0x38>
 800f4c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f4c4:	f103 0301 	add.w	r3, r3, #1
 800f4c8:	bf08      	it	eq
 800f4ca:	2320      	moveq	r3, #32
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	4770      	bx	lr
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	e7e4      	b.n	800f49e <__hi0bits+0xa>

0800f4d4 <__lo0bits>:
 800f4d4:	6803      	ldr	r3, [r0, #0]
 800f4d6:	f013 0207 	ands.w	r2, r3, #7
 800f4da:	4601      	mov	r1, r0
 800f4dc:	d00b      	beq.n	800f4f6 <__lo0bits+0x22>
 800f4de:	07da      	lsls	r2, r3, #31
 800f4e0:	d424      	bmi.n	800f52c <__lo0bits+0x58>
 800f4e2:	0798      	lsls	r0, r3, #30
 800f4e4:	bf49      	itett	mi
 800f4e6:	085b      	lsrmi	r3, r3, #1
 800f4e8:	089b      	lsrpl	r3, r3, #2
 800f4ea:	2001      	movmi	r0, #1
 800f4ec:	600b      	strmi	r3, [r1, #0]
 800f4ee:	bf5c      	itt	pl
 800f4f0:	600b      	strpl	r3, [r1, #0]
 800f4f2:	2002      	movpl	r0, #2
 800f4f4:	4770      	bx	lr
 800f4f6:	b298      	uxth	r0, r3
 800f4f8:	b9b0      	cbnz	r0, 800f528 <__lo0bits+0x54>
 800f4fa:	0c1b      	lsrs	r3, r3, #16
 800f4fc:	2010      	movs	r0, #16
 800f4fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f502:	bf04      	itt	eq
 800f504:	0a1b      	lsreq	r3, r3, #8
 800f506:	3008      	addeq	r0, #8
 800f508:	071a      	lsls	r2, r3, #28
 800f50a:	bf04      	itt	eq
 800f50c:	091b      	lsreq	r3, r3, #4
 800f50e:	3004      	addeq	r0, #4
 800f510:	079a      	lsls	r2, r3, #30
 800f512:	bf04      	itt	eq
 800f514:	089b      	lsreq	r3, r3, #2
 800f516:	3002      	addeq	r0, #2
 800f518:	07da      	lsls	r2, r3, #31
 800f51a:	d403      	bmi.n	800f524 <__lo0bits+0x50>
 800f51c:	085b      	lsrs	r3, r3, #1
 800f51e:	f100 0001 	add.w	r0, r0, #1
 800f522:	d005      	beq.n	800f530 <__lo0bits+0x5c>
 800f524:	600b      	str	r3, [r1, #0]
 800f526:	4770      	bx	lr
 800f528:	4610      	mov	r0, r2
 800f52a:	e7e8      	b.n	800f4fe <__lo0bits+0x2a>
 800f52c:	2000      	movs	r0, #0
 800f52e:	4770      	bx	lr
 800f530:	2020      	movs	r0, #32
 800f532:	4770      	bx	lr

0800f534 <__i2b>:
 800f534:	b510      	push	{r4, lr}
 800f536:	460c      	mov	r4, r1
 800f538:	2101      	movs	r1, #1
 800f53a:	f7ff feff 	bl	800f33c <_Balloc>
 800f53e:	4602      	mov	r2, r0
 800f540:	b928      	cbnz	r0, 800f54e <__i2b+0x1a>
 800f542:	4b05      	ldr	r3, [pc, #20]	; (800f558 <__i2b+0x24>)
 800f544:	4805      	ldr	r0, [pc, #20]	; (800f55c <__i2b+0x28>)
 800f546:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f54a:	f000 fbef 	bl	800fd2c <__assert_func>
 800f54e:	2301      	movs	r3, #1
 800f550:	6144      	str	r4, [r0, #20]
 800f552:	6103      	str	r3, [r0, #16]
 800f554:	bd10      	pop	{r4, pc}
 800f556:	bf00      	nop
 800f558:	080241e7 	.word	0x080241e7
 800f55c:	080241f8 	.word	0x080241f8

0800f560 <__multiply>:
 800f560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f564:	4614      	mov	r4, r2
 800f566:	690a      	ldr	r2, [r1, #16]
 800f568:	6923      	ldr	r3, [r4, #16]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	bfb8      	it	lt
 800f56e:	460b      	movlt	r3, r1
 800f570:	460d      	mov	r5, r1
 800f572:	bfbc      	itt	lt
 800f574:	4625      	movlt	r5, r4
 800f576:	461c      	movlt	r4, r3
 800f578:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f57c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f580:	68ab      	ldr	r3, [r5, #8]
 800f582:	6869      	ldr	r1, [r5, #4]
 800f584:	eb0a 0709 	add.w	r7, sl, r9
 800f588:	42bb      	cmp	r3, r7
 800f58a:	b085      	sub	sp, #20
 800f58c:	bfb8      	it	lt
 800f58e:	3101      	addlt	r1, #1
 800f590:	f7ff fed4 	bl	800f33c <_Balloc>
 800f594:	b930      	cbnz	r0, 800f5a4 <__multiply+0x44>
 800f596:	4602      	mov	r2, r0
 800f598:	4b42      	ldr	r3, [pc, #264]	; (800f6a4 <__multiply+0x144>)
 800f59a:	4843      	ldr	r0, [pc, #268]	; (800f6a8 <__multiply+0x148>)
 800f59c:	f240 115d 	movw	r1, #349	; 0x15d
 800f5a0:	f000 fbc4 	bl	800fd2c <__assert_func>
 800f5a4:	f100 0614 	add.w	r6, r0, #20
 800f5a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f5ac:	4633      	mov	r3, r6
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	4543      	cmp	r3, r8
 800f5b2:	d31e      	bcc.n	800f5f2 <__multiply+0x92>
 800f5b4:	f105 0c14 	add.w	ip, r5, #20
 800f5b8:	f104 0314 	add.w	r3, r4, #20
 800f5bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f5c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f5c4:	9202      	str	r2, [sp, #8]
 800f5c6:	ebac 0205 	sub.w	r2, ip, r5
 800f5ca:	3a15      	subs	r2, #21
 800f5cc:	f022 0203 	bic.w	r2, r2, #3
 800f5d0:	3204      	adds	r2, #4
 800f5d2:	f105 0115 	add.w	r1, r5, #21
 800f5d6:	458c      	cmp	ip, r1
 800f5d8:	bf38      	it	cc
 800f5da:	2204      	movcc	r2, #4
 800f5dc:	9201      	str	r2, [sp, #4]
 800f5de:	9a02      	ldr	r2, [sp, #8]
 800f5e0:	9303      	str	r3, [sp, #12]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d808      	bhi.n	800f5f8 <__multiply+0x98>
 800f5e6:	2f00      	cmp	r7, #0
 800f5e8:	dc55      	bgt.n	800f696 <__multiply+0x136>
 800f5ea:	6107      	str	r7, [r0, #16]
 800f5ec:	b005      	add	sp, #20
 800f5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f2:	f843 2b04 	str.w	r2, [r3], #4
 800f5f6:	e7db      	b.n	800f5b0 <__multiply+0x50>
 800f5f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800f5fc:	f1ba 0f00 	cmp.w	sl, #0
 800f600:	d020      	beq.n	800f644 <__multiply+0xe4>
 800f602:	f105 0e14 	add.w	lr, r5, #20
 800f606:	46b1      	mov	r9, r6
 800f608:	2200      	movs	r2, #0
 800f60a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f60e:	f8d9 b000 	ldr.w	fp, [r9]
 800f612:	b2a1      	uxth	r1, r4
 800f614:	fa1f fb8b 	uxth.w	fp, fp
 800f618:	fb0a b101 	mla	r1, sl, r1, fp
 800f61c:	4411      	add	r1, r2
 800f61e:	f8d9 2000 	ldr.w	r2, [r9]
 800f622:	0c24      	lsrs	r4, r4, #16
 800f624:	0c12      	lsrs	r2, r2, #16
 800f626:	fb0a 2404 	mla	r4, sl, r4, r2
 800f62a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f62e:	b289      	uxth	r1, r1
 800f630:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f634:	45f4      	cmp	ip, lr
 800f636:	f849 1b04 	str.w	r1, [r9], #4
 800f63a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f63e:	d8e4      	bhi.n	800f60a <__multiply+0xaa>
 800f640:	9901      	ldr	r1, [sp, #4]
 800f642:	5072      	str	r2, [r6, r1]
 800f644:	9a03      	ldr	r2, [sp, #12]
 800f646:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f64a:	3304      	adds	r3, #4
 800f64c:	f1b9 0f00 	cmp.w	r9, #0
 800f650:	d01f      	beq.n	800f692 <__multiply+0x132>
 800f652:	6834      	ldr	r4, [r6, #0]
 800f654:	f105 0114 	add.w	r1, r5, #20
 800f658:	46b6      	mov	lr, r6
 800f65a:	f04f 0a00 	mov.w	sl, #0
 800f65e:	880a      	ldrh	r2, [r1, #0]
 800f660:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f664:	fb09 b202 	mla	r2, r9, r2, fp
 800f668:	4492      	add	sl, r2
 800f66a:	b2a4      	uxth	r4, r4
 800f66c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f670:	f84e 4b04 	str.w	r4, [lr], #4
 800f674:	f851 4b04 	ldr.w	r4, [r1], #4
 800f678:	f8be 2000 	ldrh.w	r2, [lr]
 800f67c:	0c24      	lsrs	r4, r4, #16
 800f67e:	fb09 2404 	mla	r4, r9, r4, r2
 800f682:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f686:	458c      	cmp	ip, r1
 800f688:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f68c:	d8e7      	bhi.n	800f65e <__multiply+0xfe>
 800f68e:	9a01      	ldr	r2, [sp, #4]
 800f690:	50b4      	str	r4, [r6, r2]
 800f692:	3604      	adds	r6, #4
 800f694:	e7a3      	b.n	800f5de <__multiply+0x7e>
 800f696:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d1a5      	bne.n	800f5ea <__multiply+0x8a>
 800f69e:	3f01      	subs	r7, #1
 800f6a0:	e7a1      	b.n	800f5e6 <__multiply+0x86>
 800f6a2:	bf00      	nop
 800f6a4:	080241e7 	.word	0x080241e7
 800f6a8:	080241f8 	.word	0x080241f8

0800f6ac <__pow5mult>:
 800f6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6b0:	4615      	mov	r5, r2
 800f6b2:	f012 0203 	ands.w	r2, r2, #3
 800f6b6:	4606      	mov	r6, r0
 800f6b8:	460f      	mov	r7, r1
 800f6ba:	d007      	beq.n	800f6cc <__pow5mult+0x20>
 800f6bc:	4c25      	ldr	r4, [pc, #148]	; (800f754 <__pow5mult+0xa8>)
 800f6be:	3a01      	subs	r2, #1
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6c6:	f7ff fe9b 	bl	800f400 <__multadd>
 800f6ca:	4607      	mov	r7, r0
 800f6cc:	10ad      	asrs	r5, r5, #2
 800f6ce:	d03d      	beq.n	800f74c <__pow5mult+0xa0>
 800f6d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f6d2:	b97c      	cbnz	r4, 800f6f4 <__pow5mult+0x48>
 800f6d4:	2010      	movs	r0, #16
 800f6d6:	f7ff fe1d 	bl	800f314 <malloc>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	6270      	str	r0, [r6, #36]	; 0x24
 800f6de:	b928      	cbnz	r0, 800f6ec <__pow5mult+0x40>
 800f6e0:	4b1d      	ldr	r3, [pc, #116]	; (800f758 <__pow5mult+0xac>)
 800f6e2:	481e      	ldr	r0, [pc, #120]	; (800f75c <__pow5mult+0xb0>)
 800f6e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f6e8:	f000 fb20 	bl	800fd2c <__assert_func>
 800f6ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6f0:	6004      	str	r4, [r0, #0]
 800f6f2:	60c4      	str	r4, [r0, #12]
 800f6f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f6f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6fc:	b94c      	cbnz	r4, 800f712 <__pow5mult+0x66>
 800f6fe:	f240 2171 	movw	r1, #625	; 0x271
 800f702:	4630      	mov	r0, r6
 800f704:	f7ff ff16 	bl	800f534 <__i2b>
 800f708:	2300      	movs	r3, #0
 800f70a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f70e:	4604      	mov	r4, r0
 800f710:	6003      	str	r3, [r0, #0]
 800f712:	f04f 0900 	mov.w	r9, #0
 800f716:	07eb      	lsls	r3, r5, #31
 800f718:	d50a      	bpl.n	800f730 <__pow5mult+0x84>
 800f71a:	4639      	mov	r1, r7
 800f71c:	4622      	mov	r2, r4
 800f71e:	4630      	mov	r0, r6
 800f720:	f7ff ff1e 	bl	800f560 <__multiply>
 800f724:	4639      	mov	r1, r7
 800f726:	4680      	mov	r8, r0
 800f728:	4630      	mov	r0, r6
 800f72a:	f7ff fe47 	bl	800f3bc <_Bfree>
 800f72e:	4647      	mov	r7, r8
 800f730:	106d      	asrs	r5, r5, #1
 800f732:	d00b      	beq.n	800f74c <__pow5mult+0xa0>
 800f734:	6820      	ldr	r0, [r4, #0]
 800f736:	b938      	cbnz	r0, 800f748 <__pow5mult+0x9c>
 800f738:	4622      	mov	r2, r4
 800f73a:	4621      	mov	r1, r4
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7ff ff0f 	bl	800f560 <__multiply>
 800f742:	6020      	str	r0, [r4, #0]
 800f744:	f8c0 9000 	str.w	r9, [r0]
 800f748:	4604      	mov	r4, r0
 800f74a:	e7e4      	b.n	800f716 <__pow5mult+0x6a>
 800f74c:	4638      	mov	r0, r7
 800f74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f752:	bf00      	nop
 800f754:	08024348 	.word	0x08024348
 800f758:	08024171 	.word	0x08024171
 800f75c:	080241f8 	.word	0x080241f8

0800f760 <__lshift>:
 800f760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f764:	460c      	mov	r4, r1
 800f766:	6849      	ldr	r1, [r1, #4]
 800f768:	6923      	ldr	r3, [r4, #16]
 800f76a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f76e:	68a3      	ldr	r3, [r4, #8]
 800f770:	4607      	mov	r7, r0
 800f772:	4691      	mov	r9, r2
 800f774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f778:	f108 0601 	add.w	r6, r8, #1
 800f77c:	42b3      	cmp	r3, r6
 800f77e:	db0b      	blt.n	800f798 <__lshift+0x38>
 800f780:	4638      	mov	r0, r7
 800f782:	f7ff fddb 	bl	800f33c <_Balloc>
 800f786:	4605      	mov	r5, r0
 800f788:	b948      	cbnz	r0, 800f79e <__lshift+0x3e>
 800f78a:	4602      	mov	r2, r0
 800f78c:	4b28      	ldr	r3, [pc, #160]	; (800f830 <__lshift+0xd0>)
 800f78e:	4829      	ldr	r0, [pc, #164]	; (800f834 <__lshift+0xd4>)
 800f790:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f794:	f000 faca 	bl	800fd2c <__assert_func>
 800f798:	3101      	adds	r1, #1
 800f79a:	005b      	lsls	r3, r3, #1
 800f79c:	e7ee      	b.n	800f77c <__lshift+0x1c>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f100 0114 	add.w	r1, r0, #20
 800f7a4:	f100 0210 	add.w	r2, r0, #16
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	4553      	cmp	r3, sl
 800f7ac:	db33      	blt.n	800f816 <__lshift+0xb6>
 800f7ae:	6920      	ldr	r0, [r4, #16]
 800f7b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7b4:	f104 0314 	add.w	r3, r4, #20
 800f7b8:	f019 091f 	ands.w	r9, r9, #31
 800f7bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7c4:	d02b      	beq.n	800f81e <__lshift+0xbe>
 800f7c6:	f1c9 0e20 	rsb	lr, r9, #32
 800f7ca:	468a      	mov	sl, r1
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	6818      	ldr	r0, [r3, #0]
 800f7d0:	fa00 f009 	lsl.w	r0, r0, r9
 800f7d4:	4302      	orrs	r2, r0
 800f7d6:	f84a 2b04 	str.w	r2, [sl], #4
 800f7da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7de:	459c      	cmp	ip, r3
 800f7e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f7e4:	d8f3      	bhi.n	800f7ce <__lshift+0x6e>
 800f7e6:	ebac 0304 	sub.w	r3, ip, r4
 800f7ea:	3b15      	subs	r3, #21
 800f7ec:	f023 0303 	bic.w	r3, r3, #3
 800f7f0:	3304      	adds	r3, #4
 800f7f2:	f104 0015 	add.w	r0, r4, #21
 800f7f6:	4584      	cmp	ip, r0
 800f7f8:	bf38      	it	cc
 800f7fa:	2304      	movcc	r3, #4
 800f7fc:	50ca      	str	r2, [r1, r3]
 800f7fe:	b10a      	cbz	r2, 800f804 <__lshift+0xa4>
 800f800:	f108 0602 	add.w	r6, r8, #2
 800f804:	3e01      	subs	r6, #1
 800f806:	4638      	mov	r0, r7
 800f808:	612e      	str	r6, [r5, #16]
 800f80a:	4621      	mov	r1, r4
 800f80c:	f7ff fdd6 	bl	800f3bc <_Bfree>
 800f810:	4628      	mov	r0, r5
 800f812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f816:	f842 0f04 	str.w	r0, [r2, #4]!
 800f81a:	3301      	adds	r3, #1
 800f81c:	e7c5      	b.n	800f7aa <__lshift+0x4a>
 800f81e:	3904      	subs	r1, #4
 800f820:	f853 2b04 	ldr.w	r2, [r3], #4
 800f824:	f841 2f04 	str.w	r2, [r1, #4]!
 800f828:	459c      	cmp	ip, r3
 800f82a:	d8f9      	bhi.n	800f820 <__lshift+0xc0>
 800f82c:	e7ea      	b.n	800f804 <__lshift+0xa4>
 800f82e:	bf00      	nop
 800f830:	080241e7 	.word	0x080241e7
 800f834:	080241f8 	.word	0x080241f8

0800f838 <__mcmp>:
 800f838:	b530      	push	{r4, r5, lr}
 800f83a:	6902      	ldr	r2, [r0, #16]
 800f83c:	690c      	ldr	r4, [r1, #16]
 800f83e:	1b12      	subs	r2, r2, r4
 800f840:	d10e      	bne.n	800f860 <__mcmp+0x28>
 800f842:	f100 0314 	add.w	r3, r0, #20
 800f846:	3114      	adds	r1, #20
 800f848:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f84c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f850:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f854:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f858:	42a5      	cmp	r5, r4
 800f85a:	d003      	beq.n	800f864 <__mcmp+0x2c>
 800f85c:	d305      	bcc.n	800f86a <__mcmp+0x32>
 800f85e:	2201      	movs	r2, #1
 800f860:	4610      	mov	r0, r2
 800f862:	bd30      	pop	{r4, r5, pc}
 800f864:	4283      	cmp	r3, r0
 800f866:	d3f3      	bcc.n	800f850 <__mcmp+0x18>
 800f868:	e7fa      	b.n	800f860 <__mcmp+0x28>
 800f86a:	f04f 32ff 	mov.w	r2, #4294967295
 800f86e:	e7f7      	b.n	800f860 <__mcmp+0x28>

0800f870 <__mdiff>:
 800f870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f874:	460c      	mov	r4, r1
 800f876:	4606      	mov	r6, r0
 800f878:	4611      	mov	r1, r2
 800f87a:	4620      	mov	r0, r4
 800f87c:	4617      	mov	r7, r2
 800f87e:	f7ff ffdb 	bl	800f838 <__mcmp>
 800f882:	1e05      	subs	r5, r0, #0
 800f884:	d110      	bne.n	800f8a8 <__mdiff+0x38>
 800f886:	4629      	mov	r1, r5
 800f888:	4630      	mov	r0, r6
 800f88a:	f7ff fd57 	bl	800f33c <_Balloc>
 800f88e:	b930      	cbnz	r0, 800f89e <__mdiff+0x2e>
 800f890:	4b39      	ldr	r3, [pc, #228]	; (800f978 <__mdiff+0x108>)
 800f892:	4602      	mov	r2, r0
 800f894:	f240 2132 	movw	r1, #562	; 0x232
 800f898:	4838      	ldr	r0, [pc, #224]	; (800f97c <__mdiff+0x10c>)
 800f89a:	f000 fa47 	bl	800fd2c <__assert_func>
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8a8:	bfa4      	itt	ge
 800f8aa:	463b      	movge	r3, r7
 800f8ac:	4627      	movge	r7, r4
 800f8ae:	4630      	mov	r0, r6
 800f8b0:	6879      	ldr	r1, [r7, #4]
 800f8b2:	bfa6      	itte	ge
 800f8b4:	461c      	movge	r4, r3
 800f8b6:	2500      	movge	r5, #0
 800f8b8:	2501      	movlt	r5, #1
 800f8ba:	f7ff fd3f 	bl	800f33c <_Balloc>
 800f8be:	b920      	cbnz	r0, 800f8ca <__mdiff+0x5a>
 800f8c0:	4b2d      	ldr	r3, [pc, #180]	; (800f978 <__mdiff+0x108>)
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f8c8:	e7e6      	b.n	800f898 <__mdiff+0x28>
 800f8ca:	693e      	ldr	r6, [r7, #16]
 800f8cc:	60c5      	str	r5, [r0, #12]
 800f8ce:	6925      	ldr	r5, [r4, #16]
 800f8d0:	f107 0114 	add.w	r1, r7, #20
 800f8d4:	f104 0914 	add.w	r9, r4, #20
 800f8d8:	f100 0e14 	add.w	lr, r0, #20
 800f8dc:	f107 0210 	add.w	r2, r7, #16
 800f8e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f8e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f8e8:	46f2      	mov	sl, lr
 800f8ea:	2700      	movs	r7, #0
 800f8ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800f8f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f8f4:	fa1f f883 	uxth.w	r8, r3
 800f8f8:	fa17 f78b 	uxtah	r7, r7, fp
 800f8fc:	0c1b      	lsrs	r3, r3, #16
 800f8fe:	eba7 0808 	sub.w	r8, r7, r8
 800f902:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f906:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f90a:	fa1f f888 	uxth.w	r8, r8
 800f90e:	141f      	asrs	r7, r3, #16
 800f910:	454d      	cmp	r5, r9
 800f912:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f916:	f84a 3b04 	str.w	r3, [sl], #4
 800f91a:	d8e7      	bhi.n	800f8ec <__mdiff+0x7c>
 800f91c:	1b2b      	subs	r3, r5, r4
 800f91e:	3b15      	subs	r3, #21
 800f920:	f023 0303 	bic.w	r3, r3, #3
 800f924:	3304      	adds	r3, #4
 800f926:	3415      	adds	r4, #21
 800f928:	42a5      	cmp	r5, r4
 800f92a:	bf38      	it	cc
 800f92c:	2304      	movcc	r3, #4
 800f92e:	4419      	add	r1, r3
 800f930:	4473      	add	r3, lr
 800f932:	469e      	mov	lr, r3
 800f934:	460d      	mov	r5, r1
 800f936:	4565      	cmp	r5, ip
 800f938:	d30e      	bcc.n	800f958 <__mdiff+0xe8>
 800f93a:	f10c 0203 	add.w	r2, ip, #3
 800f93e:	1a52      	subs	r2, r2, r1
 800f940:	f022 0203 	bic.w	r2, r2, #3
 800f944:	3903      	subs	r1, #3
 800f946:	458c      	cmp	ip, r1
 800f948:	bf38      	it	cc
 800f94a:	2200      	movcc	r2, #0
 800f94c:	441a      	add	r2, r3
 800f94e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f952:	b17b      	cbz	r3, 800f974 <__mdiff+0x104>
 800f954:	6106      	str	r6, [r0, #16]
 800f956:	e7a5      	b.n	800f8a4 <__mdiff+0x34>
 800f958:	f855 8b04 	ldr.w	r8, [r5], #4
 800f95c:	fa17 f488 	uxtah	r4, r7, r8
 800f960:	1422      	asrs	r2, r4, #16
 800f962:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f966:	b2a4      	uxth	r4, r4
 800f968:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f96c:	f84e 4b04 	str.w	r4, [lr], #4
 800f970:	1417      	asrs	r7, r2, #16
 800f972:	e7e0      	b.n	800f936 <__mdiff+0xc6>
 800f974:	3e01      	subs	r6, #1
 800f976:	e7ea      	b.n	800f94e <__mdiff+0xde>
 800f978:	080241e7 	.word	0x080241e7
 800f97c:	080241f8 	.word	0x080241f8

0800f980 <__d2b>:
 800f980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f984:	4689      	mov	r9, r1
 800f986:	2101      	movs	r1, #1
 800f988:	ec57 6b10 	vmov	r6, r7, d0
 800f98c:	4690      	mov	r8, r2
 800f98e:	f7ff fcd5 	bl	800f33c <_Balloc>
 800f992:	4604      	mov	r4, r0
 800f994:	b930      	cbnz	r0, 800f9a4 <__d2b+0x24>
 800f996:	4602      	mov	r2, r0
 800f998:	4b25      	ldr	r3, [pc, #148]	; (800fa30 <__d2b+0xb0>)
 800f99a:	4826      	ldr	r0, [pc, #152]	; (800fa34 <__d2b+0xb4>)
 800f99c:	f240 310a 	movw	r1, #778	; 0x30a
 800f9a0:	f000 f9c4 	bl	800fd2c <__assert_func>
 800f9a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f9a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f9ac:	bb35      	cbnz	r5, 800f9fc <__d2b+0x7c>
 800f9ae:	2e00      	cmp	r6, #0
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	d028      	beq.n	800fa06 <__d2b+0x86>
 800f9b4:	4668      	mov	r0, sp
 800f9b6:	9600      	str	r6, [sp, #0]
 800f9b8:	f7ff fd8c 	bl	800f4d4 <__lo0bits>
 800f9bc:	9900      	ldr	r1, [sp, #0]
 800f9be:	b300      	cbz	r0, 800fa02 <__d2b+0x82>
 800f9c0:	9a01      	ldr	r2, [sp, #4]
 800f9c2:	f1c0 0320 	rsb	r3, r0, #32
 800f9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f9ca:	430b      	orrs	r3, r1
 800f9cc:	40c2      	lsrs	r2, r0
 800f9ce:	6163      	str	r3, [r4, #20]
 800f9d0:	9201      	str	r2, [sp, #4]
 800f9d2:	9b01      	ldr	r3, [sp, #4]
 800f9d4:	61a3      	str	r3, [r4, #24]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	bf14      	ite	ne
 800f9da:	2202      	movne	r2, #2
 800f9dc:	2201      	moveq	r2, #1
 800f9de:	6122      	str	r2, [r4, #16]
 800f9e0:	b1d5      	cbz	r5, 800fa18 <__d2b+0x98>
 800f9e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f9e6:	4405      	add	r5, r0
 800f9e8:	f8c9 5000 	str.w	r5, [r9]
 800f9ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f9f0:	f8c8 0000 	str.w	r0, [r8]
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	b003      	add	sp, #12
 800f9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa00:	e7d5      	b.n	800f9ae <__d2b+0x2e>
 800fa02:	6161      	str	r1, [r4, #20]
 800fa04:	e7e5      	b.n	800f9d2 <__d2b+0x52>
 800fa06:	a801      	add	r0, sp, #4
 800fa08:	f7ff fd64 	bl	800f4d4 <__lo0bits>
 800fa0c:	9b01      	ldr	r3, [sp, #4]
 800fa0e:	6163      	str	r3, [r4, #20]
 800fa10:	2201      	movs	r2, #1
 800fa12:	6122      	str	r2, [r4, #16]
 800fa14:	3020      	adds	r0, #32
 800fa16:	e7e3      	b.n	800f9e0 <__d2b+0x60>
 800fa18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fa1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa20:	f8c9 0000 	str.w	r0, [r9]
 800fa24:	6918      	ldr	r0, [r3, #16]
 800fa26:	f7ff fd35 	bl	800f494 <__hi0bits>
 800fa2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa2e:	e7df      	b.n	800f9f0 <__d2b+0x70>
 800fa30:	080241e7 	.word	0x080241e7
 800fa34:	080241f8 	.word	0x080241f8

0800fa38 <_calloc_r>:
 800fa38:	b513      	push	{r0, r1, r4, lr}
 800fa3a:	434a      	muls	r2, r1
 800fa3c:	4611      	mov	r1, r2
 800fa3e:	9201      	str	r2, [sp, #4]
 800fa40:	f7fd feec 	bl	800d81c <_malloc_r>
 800fa44:	4604      	mov	r4, r0
 800fa46:	b118      	cbz	r0, 800fa50 <_calloc_r+0x18>
 800fa48:	9a01      	ldr	r2, [sp, #4]
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	f7fd fe8d 	bl	800d76a <memset>
 800fa50:	4620      	mov	r0, r4
 800fa52:	b002      	add	sp, #8
 800fa54:	bd10      	pop	{r4, pc}

0800fa56 <__sfputc_r>:
 800fa56:	6893      	ldr	r3, [r2, #8]
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	b410      	push	{r4}
 800fa5e:	6093      	str	r3, [r2, #8]
 800fa60:	da08      	bge.n	800fa74 <__sfputc_r+0x1e>
 800fa62:	6994      	ldr	r4, [r2, #24]
 800fa64:	42a3      	cmp	r3, r4
 800fa66:	db01      	blt.n	800fa6c <__sfputc_r+0x16>
 800fa68:	290a      	cmp	r1, #10
 800fa6a:	d103      	bne.n	800fa74 <__sfputc_r+0x1e>
 800fa6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa70:	f7fe bc7a 	b.w	800e368 <__swbuf_r>
 800fa74:	6813      	ldr	r3, [r2, #0]
 800fa76:	1c58      	adds	r0, r3, #1
 800fa78:	6010      	str	r0, [r2, #0]
 800fa7a:	7019      	strb	r1, [r3, #0]
 800fa7c:	4608      	mov	r0, r1
 800fa7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <__sfputs_r>:
 800fa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa86:	4606      	mov	r6, r0
 800fa88:	460f      	mov	r7, r1
 800fa8a:	4614      	mov	r4, r2
 800fa8c:	18d5      	adds	r5, r2, r3
 800fa8e:	42ac      	cmp	r4, r5
 800fa90:	d101      	bne.n	800fa96 <__sfputs_r+0x12>
 800fa92:	2000      	movs	r0, #0
 800fa94:	e007      	b.n	800faa6 <__sfputs_r+0x22>
 800fa96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa9a:	463a      	mov	r2, r7
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f7ff ffda 	bl	800fa56 <__sfputc_r>
 800faa2:	1c43      	adds	r3, r0, #1
 800faa4:	d1f3      	bne.n	800fa8e <__sfputs_r+0xa>
 800faa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800faa8 <_vfiprintf_r>:
 800faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	460d      	mov	r5, r1
 800faae:	b09d      	sub	sp, #116	; 0x74
 800fab0:	4614      	mov	r4, r2
 800fab2:	4698      	mov	r8, r3
 800fab4:	4606      	mov	r6, r0
 800fab6:	b118      	cbz	r0, 800fac0 <_vfiprintf_r+0x18>
 800fab8:	6983      	ldr	r3, [r0, #24]
 800faba:	b90b      	cbnz	r3, 800fac0 <_vfiprintf_r+0x18>
 800fabc:	f7fd fd82 	bl	800d5c4 <__sinit>
 800fac0:	4b89      	ldr	r3, [pc, #548]	; (800fce8 <_vfiprintf_r+0x240>)
 800fac2:	429d      	cmp	r5, r3
 800fac4:	d11b      	bne.n	800fafe <_vfiprintf_r+0x56>
 800fac6:	6875      	ldr	r5, [r6, #4]
 800fac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faca:	07d9      	lsls	r1, r3, #31
 800facc:	d405      	bmi.n	800fada <_vfiprintf_r+0x32>
 800face:	89ab      	ldrh	r3, [r5, #12]
 800fad0:	059a      	lsls	r2, r3, #22
 800fad2:	d402      	bmi.n	800fada <_vfiprintf_r+0x32>
 800fad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fad6:	f7fd fe38 	bl	800d74a <__retarget_lock_acquire_recursive>
 800fada:	89ab      	ldrh	r3, [r5, #12]
 800fadc:	071b      	lsls	r3, r3, #28
 800fade:	d501      	bpl.n	800fae4 <_vfiprintf_r+0x3c>
 800fae0:	692b      	ldr	r3, [r5, #16]
 800fae2:	b9eb      	cbnz	r3, 800fb20 <_vfiprintf_r+0x78>
 800fae4:	4629      	mov	r1, r5
 800fae6:	4630      	mov	r0, r6
 800fae8:	f7fe fca2 	bl	800e430 <__swsetup_r>
 800faec:	b1c0      	cbz	r0, 800fb20 <_vfiprintf_r+0x78>
 800faee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faf0:	07dc      	lsls	r4, r3, #31
 800faf2:	d50e      	bpl.n	800fb12 <_vfiprintf_r+0x6a>
 800faf4:	f04f 30ff 	mov.w	r0, #4294967295
 800faf8:	b01d      	add	sp, #116	; 0x74
 800fafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafe:	4b7b      	ldr	r3, [pc, #492]	; (800fcec <_vfiprintf_r+0x244>)
 800fb00:	429d      	cmp	r5, r3
 800fb02:	d101      	bne.n	800fb08 <_vfiprintf_r+0x60>
 800fb04:	68b5      	ldr	r5, [r6, #8]
 800fb06:	e7df      	b.n	800fac8 <_vfiprintf_r+0x20>
 800fb08:	4b79      	ldr	r3, [pc, #484]	; (800fcf0 <_vfiprintf_r+0x248>)
 800fb0a:	429d      	cmp	r5, r3
 800fb0c:	bf08      	it	eq
 800fb0e:	68f5      	ldreq	r5, [r6, #12]
 800fb10:	e7da      	b.n	800fac8 <_vfiprintf_r+0x20>
 800fb12:	89ab      	ldrh	r3, [r5, #12]
 800fb14:	0598      	lsls	r0, r3, #22
 800fb16:	d4ed      	bmi.n	800faf4 <_vfiprintf_r+0x4c>
 800fb18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb1a:	f7fd fe17 	bl	800d74c <__retarget_lock_release_recursive>
 800fb1e:	e7e9      	b.n	800faf4 <_vfiprintf_r+0x4c>
 800fb20:	2300      	movs	r3, #0
 800fb22:	9309      	str	r3, [sp, #36]	; 0x24
 800fb24:	2320      	movs	r3, #32
 800fb26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb2e:	2330      	movs	r3, #48	; 0x30
 800fb30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fcf4 <_vfiprintf_r+0x24c>
 800fb34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb38:	f04f 0901 	mov.w	r9, #1
 800fb3c:	4623      	mov	r3, r4
 800fb3e:	469a      	mov	sl, r3
 800fb40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb44:	b10a      	cbz	r2, 800fb4a <_vfiprintf_r+0xa2>
 800fb46:	2a25      	cmp	r2, #37	; 0x25
 800fb48:	d1f9      	bne.n	800fb3e <_vfiprintf_r+0x96>
 800fb4a:	ebba 0b04 	subs.w	fp, sl, r4
 800fb4e:	d00b      	beq.n	800fb68 <_vfiprintf_r+0xc0>
 800fb50:	465b      	mov	r3, fp
 800fb52:	4622      	mov	r2, r4
 800fb54:	4629      	mov	r1, r5
 800fb56:	4630      	mov	r0, r6
 800fb58:	f7ff ff94 	bl	800fa84 <__sfputs_r>
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	f000 80aa 	beq.w	800fcb6 <_vfiprintf_r+0x20e>
 800fb62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb64:	445a      	add	r2, fp
 800fb66:	9209      	str	r2, [sp, #36]	; 0x24
 800fb68:	f89a 3000 	ldrb.w	r3, [sl]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	f000 80a2 	beq.w	800fcb6 <_vfiprintf_r+0x20e>
 800fb72:	2300      	movs	r3, #0
 800fb74:	f04f 32ff 	mov.w	r2, #4294967295
 800fb78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb7c:	f10a 0a01 	add.w	sl, sl, #1
 800fb80:	9304      	str	r3, [sp, #16]
 800fb82:	9307      	str	r3, [sp, #28]
 800fb84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb88:	931a      	str	r3, [sp, #104]	; 0x68
 800fb8a:	4654      	mov	r4, sl
 800fb8c:	2205      	movs	r2, #5
 800fb8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb92:	4858      	ldr	r0, [pc, #352]	; (800fcf4 <_vfiprintf_r+0x24c>)
 800fb94:	f7f0 fb84 	bl	80002a0 <memchr>
 800fb98:	9a04      	ldr	r2, [sp, #16]
 800fb9a:	b9d8      	cbnz	r0, 800fbd4 <_vfiprintf_r+0x12c>
 800fb9c:	06d1      	lsls	r1, r2, #27
 800fb9e:	bf44      	itt	mi
 800fba0:	2320      	movmi	r3, #32
 800fba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fba6:	0713      	lsls	r3, r2, #28
 800fba8:	bf44      	itt	mi
 800fbaa:	232b      	movmi	r3, #43	; 0x2b
 800fbac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbb0:	f89a 3000 	ldrb.w	r3, [sl]
 800fbb4:	2b2a      	cmp	r3, #42	; 0x2a
 800fbb6:	d015      	beq.n	800fbe4 <_vfiprintf_r+0x13c>
 800fbb8:	9a07      	ldr	r2, [sp, #28]
 800fbba:	4654      	mov	r4, sl
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	f04f 0c0a 	mov.w	ip, #10
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbc8:	3b30      	subs	r3, #48	; 0x30
 800fbca:	2b09      	cmp	r3, #9
 800fbcc:	d94e      	bls.n	800fc6c <_vfiprintf_r+0x1c4>
 800fbce:	b1b0      	cbz	r0, 800fbfe <_vfiprintf_r+0x156>
 800fbd0:	9207      	str	r2, [sp, #28]
 800fbd2:	e014      	b.n	800fbfe <_vfiprintf_r+0x156>
 800fbd4:	eba0 0308 	sub.w	r3, r0, r8
 800fbd8:	fa09 f303 	lsl.w	r3, r9, r3
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	9304      	str	r3, [sp, #16]
 800fbe0:	46a2      	mov	sl, r4
 800fbe2:	e7d2      	b.n	800fb8a <_vfiprintf_r+0xe2>
 800fbe4:	9b03      	ldr	r3, [sp, #12]
 800fbe6:	1d19      	adds	r1, r3, #4
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	9103      	str	r1, [sp, #12]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	bfbb      	ittet	lt
 800fbf0:	425b      	neglt	r3, r3
 800fbf2:	f042 0202 	orrlt.w	r2, r2, #2
 800fbf6:	9307      	strge	r3, [sp, #28]
 800fbf8:	9307      	strlt	r3, [sp, #28]
 800fbfa:	bfb8      	it	lt
 800fbfc:	9204      	strlt	r2, [sp, #16]
 800fbfe:	7823      	ldrb	r3, [r4, #0]
 800fc00:	2b2e      	cmp	r3, #46	; 0x2e
 800fc02:	d10c      	bne.n	800fc1e <_vfiprintf_r+0x176>
 800fc04:	7863      	ldrb	r3, [r4, #1]
 800fc06:	2b2a      	cmp	r3, #42	; 0x2a
 800fc08:	d135      	bne.n	800fc76 <_vfiprintf_r+0x1ce>
 800fc0a:	9b03      	ldr	r3, [sp, #12]
 800fc0c:	1d1a      	adds	r2, r3, #4
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	9203      	str	r2, [sp, #12]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	bfb8      	it	lt
 800fc16:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc1a:	3402      	adds	r4, #2
 800fc1c:	9305      	str	r3, [sp, #20]
 800fc1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fd04 <_vfiprintf_r+0x25c>
 800fc22:	7821      	ldrb	r1, [r4, #0]
 800fc24:	2203      	movs	r2, #3
 800fc26:	4650      	mov	r0, sl
 800fc28:	f7f0 fb3a 	bl	80002a0 <memchr>
 800fc2c:	b140      	cbz	r0, 800fc40 <_vfiprintf_r+0x198>
 800fc2e:	2340      	movs	r3, #64	; 0x40
 800fc30:	eba0 000a 	sub.w	r0, r0, sl
 800fc34:	fa03 f000 	lsl.w	r0, r3, r0
 800fc38:	9b04      	ldr	r3, [sp, #16]
 800fc3a:	4303      	orrs	r3, r0
 800fc3c:	3401      	adds	r4, #1
 800fc3e:	9304      	str	r3, [sp, #16]
 800fc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc44:	482c      	ldr	r0, [pc, #176]	; (800fcf8 <_vfiprintf_r+0x250>)
 800fc46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc4a:	2206      	movs	r2, #6
 800fc4c:	f7f0 fb28 	bl	80002a0 <memchr>
 800fc50:	2800      	cmp	r0, #0
 800fc52:	d03f      	beq.n	800fcd4 <_vfiprintf_r+0x22c>
 800fc54:	4b29      	ldr	r3, [pc, #164]	; (800fcfc <_vfiprintf_r+0x254>)
 800fc56:	bb1b      	cbnz	r3, 800fca0 <_vfiprintf_r+0x1f8>
 800fc58:	9b03      	ldr	r3, [sp, #12]
 800fc5a:	3307      	adds	r3, #7
 800fc5c:	f023 0307 	bic.w	r3, r3, #7
 800fc60:	3308      	adds	r3, #8
 800fc62:	9303      	str	r3, [sp, #12]
 800fc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc66:	443b      	add	r3, r7
 800fc68:	9309      	str	r3, [sp, #36]	; 0x24
 800fc6a:	e767      	b.n	800fb3c <_vfiprintf_r+0x94>
 800fc6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc70:	460c      	mov	r4, r1
 800fc72:	2001      	movs	r0, #1
 800fc74:	e7a5      	b.n	800fbc2 <_vfiprintf_r+0x11a>
 800fc76:	2300      	movs	r3, #0
 800fc78:	3401      	adds	r4, #1
 800fc7a:	9305      	str	r3, [sp, #20]
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	f04f 0c0a 	mov.w	ip, #10
 800fc82:	4620      	mov	r0, r4
 800fc84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc88:	3a30      	subs	r2, #48	; 0x30
 800fc8a:	2a09      	cmp	r2, #9
 800fc8c:	d903      	bls.n	800fc96 <_vfiprintf_r+0x1ee>
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d0c5      	beq.n	800fc1e <_vfiprintf_r+0x176>
 800fc92:	9105      	str	r1, [sp, #20]
 800fc94:	e7c3      	b.n	800fc1e <_vfiprintf_r+0x176>
 800fc96:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	e7f0      	b.n	800fc82 <_vfiprintf_r+0x1da>
 800fca0:	ab03      	add	r3, sp, #12
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	462a      	mov	r2, r5
 800fca6:	4b16      	ldr	r3, [pc, #88]	; (800fd00 <_vfiprintf_r+0x258>)
 800fca8:	a904      	add	r1, sp, #16
 800fcaa:	4630      	mov	r0, r6
 800fcac:	f7fd feb0 	bl	800da10 <_printf_float>
 800fcb0:	4607      	mov	r7, r0
 800fcb2:	1c78      	adds	r0, r7, #1
 800fcb4:	d1d6      	bne.n	800fc64 <_vfiprintf_r+0x1bc>
 800fcb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcb8:	07d9      	lsls	r1, r3, #31
 800fcba:	d405      	bmi.n	800fcc8 <_vfiprintf_r+0x220>
 800fcbc:	89ab      	ldrh	r3, [r5, #12]
 800fcbe:	059a      	lsls	r2, r3, #22
 800fcc0:	d402      	bmi.n	800fcc8 <_vfiprintf_r+0x220>
 800fcc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcc4:	f7fd fd42 	bl	800d74c <__retarget_lock_release_recursive>
 800fcc8:	89ab      	ldrh	r3, [r5, #12]
 800fcca:	065b      	lsls	r3, r3, #25
 800fccc:	f53f af12 	bmi.w	800faf4 <_vfiprintf_r+0x4c>
 800fcd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcd2:	e711      	b.n	800faf8 <_vfiprintf_r+0x50>
 800fcd4:	ab03      	add	r3, sp, #12
 800fcd6:	9300      	str	r3, [sp, #0]
 800fcd8:	462a      	mov	r2, r5
 800fcda:	4b09      	ldr	r3, [pc, #36]	; (800fd00 <_vfiprintf_r+0x258>)
 800fcdc:	a904      	add	r1, sp, #16
 800fcde:	4630      	mov	r0, r6
 800fce0:	f7fe f93a 	bl	800df58 <_printf_i>
 800fce4:	e7e4      	b.n	800fcb0 <_vfiprintf_r+0x208>
 800fce6:	bf00      	nop
 800fce8:	080240ec 	.word	0x080240ec
 800fcec:	0802410c 	.word	0x0802410c
 800fcf0:	080240cc 	.word	0x080240cc
 800fcf4:	08024354 	.word	0x08024354
 800fcf8:	0802435e 	.word	0x0802435e
 800fcfc:	0800da11 	.word	0x0800da11
 800fd00:	0800fa85 	.word	0x0800fa85
 800fd04:	0802435a 	.word	0x0802435a

0800fd08 <_read_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	4d07      	ldr	r5, [pc, #28]	; (800fd28 <_read_r+0x20>)
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	4608      	mov	r0, r1
 800fd10:	4611      	mov	r1, r2
 800fd12:	2200      	movs	r2, #0
 800fd14:	602a      	str	r2, [r5, #0]
 800fd16:	461a      	mov	r2, r3
 800fd18:	f7f2 faba 	bl	8002290 <_read>
 800fd1c:	1c43      	adds	r3, r0, #1
 800fd1e:	d102      	bne.n	800fd26 <_read_r+0x1e>
 800fd20:	682b      	ldr	r3, [r5, #0]
 800fd22:	b103      	cbz	r3, 800fd26 <_read_r+0x1e>
 800fd24:	6023      	str	r3, [r4, #0]
 800fd26:	bd38      	pop	{r3, r4, r5, pc}
 800fd28:	20008aac 	.word	0x20008aac

0800fd2c <__assert_func>:
 800fd2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd2e:	4614      	mov	r4, r2
 800fd30:	461a      	mov	r2, r3
 800fd32:	4b09      	ldr	r3, [pc, #36]	; (800fd58 <__assert_func+0x2c>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4605      	mov	r5, r0
 800fd38:	68d8      	ldr	r0, [r3, #12]
 800fd3a:	b14c      	cbz	r4, 800fd50 <__assert_func+0x24>
 800fd3c:	4b07      	ldr	r3, [pc, #28]	; (800fd5c <__assert_func+0x30>)
 800fd3e:	9100      	str	r1, [sp, #0]
 800fd40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd44:	4906      	ldr	r1, [pc, #24]	; (800fd60 <__assert_func+0x34>)
 800fd46:	462b      	mov	r3, r5
 800fd48:	f000 f80e 	bl	800fd68 <fiprintf>
 800fd4c:	f000 f85f 	bl	800fe0e <abort>
 800fd50:	4b04      	ldr	r3, [pc, #16]	; (800fd64 <__assert_func+0x38>)
 800fd52:	461c      	mov	r4, r3
 800fd54:	e7f3      	b.n	800fd3e <__assert_func+0x12>
 800fd56:	bf00      	nop
 800fd58:	20000090 	.word	0x20000090
 800fd5c:	08024365 	.word	0x08024365
 800fd60:	08024372 	.word	0x08024372
 800fd64:	080243a0 	.word	0x080243a0

0800fd68 <fiprintf>:
 800fd68:	b40e      	push	{r1, r2, r3}
 800fd6a:	b503      	push	{r0, r1, lr}
 800fd6c:	4601      	mov	r1, r0
 800fd6e:	ab03      	add	r3, sp, #12
 800fd70:	4805      	ldr	r0, [pc, #20]	; (800fd88 <fiprintf+0x20>)
 800fd72:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd76:	6800      	ldr	r0, [r0, #0]
 800fd78:	9301      	str	r3, [sp, #4]
 800fd7a:	f7ff fe95 	bl	800faa8 <_vfiprintf_r>
 800fd7e:	b002      	add	sp, #8
 800fd80:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd84:	b003      	add	sp, #12
 800fd86:	4770      	bx	lr
 800fd88:	20000090 	.word	0x20000090

0800fd8c <_fstat_r>:
 800fd8c:	b538      	push	{r3, r4, r5, lr}
 800fd8e:	4d07      	ldr	r5, [pc, #28]	; (800fdac <_fstat_r+0x20>)
 800fd90:	2300      	movs	r3, #0
 800fd92:	4604      	mov	r4, r0
 800fd94:	4608      	mov	r0, r1
 800fd96:	4611      	mov	r1, r2
 800fd98:	602b      	str	r3, [r5, #0]
 800fd9a:	f7f2 fabe 	bl	800231a <_fstat>
 800fd9e:	1c43      	adds	r3, r0, #1
 800fda0:	d102      	bne.n	800fda8 <_fstat_r+0x1c>
 800fda2:	682b      	ldr	r3, [r5, #0]
 800fda4:	b103      	cbz	r3, 800fda8 <_fstat_r+0x1c>
 800fda6:	6023      	str	r3, [r4, #0]
 800fda8:	bd38      	pop	{r3, r4, r5, pc}
 800fdaa:	bf00      	nop
 800fdac:	20008aac 	.word	0x20008aac

0800fdb0 <_isatty_r>:
 800fdb0:	b538      	push	{r3, r4, r5, lr}
 800fdb2:	4d06      	ldr	r5, [pc, #24]	; (800fdcc <_isatty_r+0x1c>)
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	4604      	mov	r4, r0
 800fdb8:	4608      	mov	r0, r1
 800fdba:	602b      	str	r3, [r5, #0]
 800fdbc:	f7f2 fabd 	bl	800233a <_isatty>
 800fdc0:	1c43      	adds	r3, r0, #1
 800fdc2:	d102      	bne.n	800fdca <_isatty_r+0x1a>
 800fdc4:	682b      	ldr	r3, [r5, #0]
 800fdc6:	b103      	cbz	r3, 800fdca <_isatty_r+0x1a>
 800fdc8:	6023      	str	r3, [r4, #0]
 800fdca:	bd38      	pop	{r3, r4, r5, pc}
 800fdcc:	20008aac 	.word	0x20008aac

0800fdd0 <__ascii_mbtowc>:
 800fdd0:	b082      	sub	sp, #8
 800fdd2:	b901      	cbnz	r1, 800fdd6 <__ascii_mbtowc+0x6>
 800fdd4:	a901      	add	r1, sp, #4
 800fdd6:	b142      	cbz	r2, 800fdea <__ascii_mbtowc+0x1a>
 800fdd8:	b14b      	cbz	r3, 800fdee <__ascii_mbtowc+0x1e>
 800fdda:	7813      	ldrb	r3, [r2, #0]
 800fddc:	600b      	str	r3, [r1, #0]
 800fdde:	7812      	ldrb	r2, [r2, #0]
 800fde0:	1e10      	subs	r0, r2, #0
 800fde2:	bf18      	it	ne
 800fde4:	2001      	movne	r0, #1
 800fde6:	b002      	add	sp, #8
 800fde8:	4770      	bx	lr
 800fdea:	4610      	mov	r0, r2
 800fdec:	e7fb      	b.n	800fde6 <__ascii_mbtowc+0x16>
 800fdee:	f06f 0001 	mvn.w	r0, #1
 800fdf2:	e7f8      	b.n	800fde6 <__ascii_mbtowc+0x16>

0800fdf4 <__ascii_wctomb>:
 800fdf4:	b149      	cbz	r1, 800fe0a <__ascii_wctomb+0x16>
 800fdf6:	2aff      	cmp	r2, #255	; 0xff
 800fdf8:	bf85      	ittet	hi
 800fdfa:	238a      	movhi	r3, #138	; 0x8a
 800fdfc:	6003      	strhi	r3, [r0, #0]
 800fdfe:	700a      	strbls	r2, [r1, #0]
 800fe00:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe04:	bf98      	it	ls
 800fe06:	2001      	movls	r0, #1
 800fe08:	4770      	bx	lr
 800fe0a:	4608      	mov	r0, r1
 800fe0c:	4770      	bx	lr

0800fe0e <abort>:
 800fe0e:	b508      	push	{r3, lr}
 800fe10:	2006      	movs	r0, #6
 800fe12:	f000 f82b 	bl	800fe6c <raise>
 800fe16:	2001      	movs	r0, #1
 800fe18:	f7f2 fa30 	bl	800227c <_exit>

0800fe1c <_raise_r>:
 800fe1c:	291f      	cmp	r1, #31
 800fe1e:	b538      	push	{r3, r4, r5, lr}
 800fe20:	4604      	mov	r4, r0
 800fe22:	460d      	mov	r5, r1
 800fe24:	d904      	bls.n	800fe30 <_raise_r+0x14>
 800fe26:	2316      	movs	r3, #22
 800fe28:	6003      	str	r3, [r0, #0]
 800fe2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2e:	bd38      	pop	{r3, r4, r5, pc}
 800fe30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe32:	b112      	cbz	r2, 800fe3a <_raise_r+0x1e>
 800fe34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe38:	b94b      	cbnz	r3, 800fe4e <_raise_r+0x32>
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f000 f830 	bl	800fea0 <_getpid_r>
 800fe40:	462a      	mov	r2, r5
 800fe42:	4601      	mov	r1, r0
 800fe44:	4620      	mov	r0, r4
 800fe46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe4a:	f000 b817 	b.w	800fe7c <_kill_r>
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d00a      	beq.n	800fe68 <_raise_r+0x4c>
 800fe52:	1c59      	adds	r1, r3, #1
 800fe54:	d103      	bne.n	800fe5e <_raise_r+0x42>
 800fe56:	2316      	movs	r3, #22
 800fe58:	6003      	str	r3, [r0, #0]
 800fe5a:	2001      	movs	r0, #1
 800fe5c:	e7e7      	b.n	800fe2e <_raise_r+0x12>
 800fe5e:	2400      	movs	r4, #0
 800fe60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe64:	4628      	mov	r0, r5
 800fe66:	4798      	blx	r3
 800fe68:	2000      	movs	r0, #0
 800fe6a:	e7e0      	b.n	800fe2e <_raise_r+0x12>

0800fe6c <raise>:
 800fe6c:	4b02      	ldr	r3, [pc, #8]	; (800fe78 <raise+0xc>)
 800fe6e:	4601      	mov	r1, r0
 800fe70:	6818      	ldr	r0, [r3, #0]
 800fe72:	f7ff bfd3 	b.w	800fe1c <_raise_r>
 800fe76:	bf00      	nop
 800fe78:	20000090 	.word	0x20000090

0800fe7c <_kill_r>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	4d07      	ldr	r5, [pc, #28]	; (800fe9c <_kill_r+0x20>)
 800fe80:	2300      	movs	r3, #0
 800fe82:	4604      	mov	r4, r0
 800fe84:	4608      	mov	r0, r1
 800fe86:	4611      	mov	r1, r2
 800fe88:	602b      	str	r3, [r5, #0]
 800fe8a:	f7f2 f9e7 	bl	800225c <_kill>
 800fe8e:	1c43      	adds	r3, r0, #1
 800fe90:	d102      	bne.n	800fe98 <_kill_r+0x1c>
 800fe92:	682b      	ldr	r3, [r5, #0]
 800fe94:	b103      	cbz	r3, 800fe98 <_kill_r+0x1c>
 800fe96:	6023      	str	r3, [r4, #0]
 800fe98:	bd38      	pop	{r3, r4, r5, pc}
 800fe9a:	bf00      	nop
 800fe9c:	20008aac 	.word	0x20008aac

0800fea0 <_getpid_r>:
 800fea0:	f7f2 b9d4 	b.w	800224c <_getpid>
 800fea4:	0000      	movs	r0, r0
	...

0800fea8 <exp>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	ed2d 8b02 	vpush	{d8}
 800feae:	ec55 4b10 	vmov	r4, r5, d0
 800feb2:	f000 f86d 	bl	800ff90 <__ieee754_exp>
 800feb6:	4b22      	ldr	r3, [pc, #136]	; (800ff40 <exp+0x98>)
 800feb8:	eeb0 8a40 	vmov.f32	s16, s0
 800febc:	eef0 8a60 	vmov.f32	s17, s1
 800fec0:	f993 3000 	ldrsb.w	r3, [r3]
 800fec4:	3301      	adds	r3, #1
 800fec6:	d012      	beq.n	800feee <exp+0x46>
 800fec8:	ec45 4b10 	vmov	d0, r4, r5
 800fecc:	f000 f9dd 	bl	801028a <finite>
 800fed0:	b168      	cbz	r0, 800feee <exp+0x46>
 800fed2:	a313      	add	r3, pc, #76	; (adr r3, 800ff20 <exp+0x78>)
 800fed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed8:	4620      	mov	r0, r4
 800feda:	4629      	mov	r1, r5
 800fedc:	f7f0 fe7c 	bl	8000bd8 <__aeabi_dcmpgt>
 800fee0:	b160      	cbz	r0, 800fefc <exp+0x54>
 800fee2:	f7fd fa4f 	bl	800d384 <__errno>
 800fee6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800ff28 <exp+0x80>
 800feea:	2322      	movs	r3, #34	; 0x22
 800feec:	6003      	str	r3, [r0, #0]
 800feee:	eeb0 0a48 	vmov.f32	s0, s16
 800fef2:	eef0 0a68 	vmov.f32	s1, s17
 800fef6:	ecbd 8b02 	vpop	{d8}
 800fefa:	bd38      	pop	{r3, r4, r5, pc}
 800fefc:	a30c      	add	r3, pc, #48	; (adr r3, 800ff30 <exp+0x88>)
 800fefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff02:	4620      	mov	r0, r4
 800ff04:	4629      	mov	r1, r5
 800ff06:	f7f0 fe49 	bl	8000b9c <__aeabi_dcmplt>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d0ef      	beq.n	800feee <exp+0x46>
 800ff0e:	f7fd fa39 	bl	800d384 <__errno>
 800ff12:	2322      	movs	r3, #34	; 0x22
 800ff14:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800ff38 <exp+0x90>
 800ff18:	6003      	str	r3, [r0, #0]
 800ff1a:	e7e8      	b.n	800feee <exp+0x46>
 800ff1c:	f3af 8000 	nop.w
 800ff20:	fefa39ef 	.word	0xfefa39ef
 800ff24:	40862e42 	.word	0x40862e42
 800ff28:	00000000 	.word	0x00000000
 800ff2c:	7ff00000 	.word	0x7ff00000
 800ff30:	d52d3051 	.word	0xd52d3051
 800ff34:	c0874910 	.word	0xc0874910
	...
 800ff40:	20000260 	.word	0x20000260

0800ff44 <sqrtf>:
 800ff44:	b508      	push	{r3, lr}
 800ff46:	ed2d 8b02 	vpush	{d8}
 800ff4a:	eeb0 8a40 	vmov.f32	s16, s0
 800ff4e:	f000 f999 	bl	8010284 <__ieee754_sqrtf>
 800ff52:	4b0d      	ldr	r3, [pc, #52]	; (800ff88 <sqrtf+0x44>)
 800ff54:	f993 3000 	ldrsb.w	r3, [r3]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	d011      	beq.n	800ff80 <sqrtf+0x3c>
 800ff5c:	eeb4 8a48 	vcmp.f32	s16, s16
 800ff60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff64:	d60c      	bvs.n	800ff80 <sqrtf+0x3c>
 800ff66:	eddf 8a09 	vldr	s17, [pc, #36]	; 800ff8c <sqrtf+0x48>
 800ff6a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ff6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff72:	d505      	bpl.n	800ff80 <sqrtf+0x3c>
 800ff74:	f7fd fa06 	bl	800d384 <__errno>
 800ff78:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ff7c:	2321      	movs	r3, #33	; 0x21
 800ff7e:	6003      	str	r3, [r0, #0]
 800ff80:	ecbd 8b02 	vpop	{d8}
 800ff84:	bd08      	pop	{r3, pc}
 800ff86:	bf00      	nop
 800ff88:	20000260 	.word	0x20000260
 800ff8c:	00000000 	.word	0x00000000

0800ff90 <__ieee754_exp>:
 800ff90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff94:	ec55 4b10 	vmov	r4, r5, d0
 800ff98:	49b1      	ldr	r1, [pc, #708]	; (8010260 <__ieee754_exp+0x2d0>)
 800ff9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ff9e:	428b      	cmp	r3, r1
 800ffa0:	ed2d 8b04 	vpush	{d8-d9}
 800ffa4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800ffa8:	d937      	bls.n	801001a <__ieee754_exp+0x8a>
 800ffaa:	49ae      	ldr	r1, [pc, #696]	; (8010264 <__ieee754_exp+0x2d4>)
 800ffac:	428b      	cmp	r3, r1
 800ffae:	d916      	bls.n	800ffde <__ieee754_exp+0x4e>
 800ffb0:	ee10 3a10 	vmov	r3, s0
 800ffb4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	d009      	beq.n	800ffd0 <__ieee754_exp+0x40>
 800ffbc:	ee10 2a10 	vmov	r2, s0
 800ffc0:	462b      	mov	r3, r5
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	f7f0 f9c1 	bl	800034c <__adddf3>
 800ffca:	4604      	mov	r4, r0
 800ffcc:	460d      	mov	r5, r1
 800ffce:	e000      	b.n	800ffd2 <__ieee754_exp+0x42>
 800ffd0:	bb06      	cbnz	r6, 8010014 <__ieee754_exp+0x84>
 800ffd2:	ecbd 8b04 	vpop	{d8-d9}
 800ffd6:	ec45 4b10 	vmov	d0, r4, r5
 800ffda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffde:	a38a      	add	r3, pc, #552	; (adr r3, 8010208 <__ieee754_exp+0x278>)
 800ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe4:	ee10 0a10 	vmov	r0, s0
 800ffe8:	4629      	mov	r1, r5
 800ffea:	f7f0 fdf5 	bl	8000bd8 <__aeabi_dcmpgt>
 800ffee:	b138      	cbz	r0, 8010000 <__ieee754_exp+0x70>
 800fff0:	a387      	add	r3, pc, #540	; (adr r3, 8010210 <__ieee754_exp+0x280>)
 800fff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff6:	4610      	mov	r0, r2
 800fff8:	4619      	mov	r1, r3
 800fffa:	f7f0 fb5d 	bl	80006b8 <__aeabi_dmul>
 800fffe:	e7e4      	b.n	800ffca <__ieee754_exp+0x3a>
 8010000:	a385      	add	r3, pc, #532	; (adr r3, 8010218 <__ieee754_exp+0x288>)
 8010002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010006:	4620      	mov	r0, r4
 8010008:	4629      	mov	r1, r5
 801000a:	f7f0 fdc7 	bl	8000b9c <__aeabi_dcmplt>
 801000e:	2800      	cmp	r0, #0
 8010010:	f000 8087 	beq.w	8010122 <__ieee754_exp+0x192>
 8010014:	2400      	movs	r4, #0
 8010016:	2500      	movs	r5, #0
 8010018:	e7db      	b.n	800ffd2 <__ieee754_exp+0x42>
 801001a:	4a93      	ldr	r2, [pc, #588]	; (8010268 <__ieee754_exp+0x2d8>)
 801001c:	4293      	cmp	r3, r2
 801001e:	f240 80ac 	bls.w	801017a <__ieee754_exp+0x1ea>
 8010022:	4a92      	ldr	r2, [pc, #584]	; (801026c <__ieee754_exp+0x2dc>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d87c      	bhi.n	8010122 <__ieee754_exp+0x192>
 8010028:	4b91      	ldr	r3, [pc, #580]	; (8010270 <__ieee754_exp+0x2e0>)
 801002a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801002e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010032:	ee10 0a10 	vmov	r0, s0
 8010036:	4629      	mov	r1, r5
 8010038:	f7f0 f986 	bl	8000348 <__aeabi_dsub>
 801003c:	4b8d      	ldr	r3, [pc, #564]	; (8010274 <__ieee754_exp+0x2e4>)
 801003e:	00f7      	lsls	r7, r6, #3
 8010040:	443b      	add	r3, r7
 8010042:	ed93 7b00 	vldr	d7, [r3]
 8010046:	f1c6 0a01 	rsb	sl, r6, #1
 801004a:	4680      	mov	r8, r0
 801004c:	4689      	mov	r9, r1
 801004e:	ebaa 0a06 	sub.w	sl, sl, r6
 8010052:	eeb0 8a47 	vmov.f32	s16, s14
 8010056:	eef0 8a67 	vmov.f32	s17, s15
 801005a:	ec53 2b18 	vmov	r2, r3, d8
 801005e:	4640      	mov	r0, r8
 8010060:	4649      	mov	r1, r9
 8010062:	f7f0 f971 	bl	8000348 <__aeabi_dsub>
 8010066:	4604      	mov	r4, r0
 8010068:	460d      	mov	r5, r1
 801006a:	4622      	mov	r2, r4
 801006c:	462b      	mov	r3, r5
 801006e:	4620      	mov	r0, r4
 8010070:	4629      	mov	r1, r5
 8010072:	f7f0 fb21 	bl	80006b8 <__aeabi_dmul>
 8010076:	a36a      	add	r3, pc, #424	; (adr r3, 8010220 <__ieee754_exp+0x290>)
 8010078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007c:	4606      	mov	r6, r0
 801007e:	460f      	mov	r7, r1
 8010080:	f7f0 fb1a 	bl	80006b8 <__aeabi_dmul>
 8010084:	a368      	add	r3, pc, #416	; (adr r3, 8010228 <__ieee754_exp+0x298>)
 8010086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008a:	f7f0 f95d 	bl	8000348 <__aeabi_dsub>
 801008e:	4632      	mov	r2, r6
 8010090:	463b      	mov	r3, r7
 8010092:	f7f0 fb11 	bl	80006b8 <__aeabi_dmul>
 8010096:	a366      	add	r3, pc, #408	; (adr r3, 8010230 <__ieee754_exp+0x2a0>)
 8010098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009c:	f7f0 f956 	bl	800034c <__adddf3>
 80100a0:	4632      	mov	r2, r6
 80100a2:	463b      	mov	r3, r7
 80100a4:	f7f0 fb08 	bl	80006b8 <__aeabi_dmul>
 80100a8:	a363      	add	r3, pc, #396	; (adr r3, 8010238 <__ieee754_exp+0x2a8>)
 80100aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ae:	f7f0 f94b 	bl	8000348 <__aeabi_dsub>
 80100b2:	4632      	mov	r2, r6
 80100b4:	463b      	mov	r3, r7
 80100b6:	f7f0 faff 	bl	80006b8 <__aeabi_dmul>
 80100ba:	a361      	add	r3, pc, #388	; (adr r3, 8010240 <__ieee754_exp+0x2b0>)
 80100bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c0:	f7f0 f944 	bl	800034c <__adddf3>
 80100c4:	4632      	mov	r2, r6
 80100c6:	463b      	mov	r3, r7
 80100c8:	f7f0 faf6 	bl	80006b8 <__aeabi_dmul>
 80100cc:	4602      	mov	r2, r0
 80100ce:	460b      	mov	r3, r1
 80100d0:	4620      	mov	r0, r4
 80100d2:	4629      	mov	r1, r5
 80100d4:	f7f0 f938 	bl	8000348 <__aeabi_dsub>
 80100d8:	4602      	mov	r2, r0
 80100da:	460b      	mov	r3, r1
 80100dc:	4606      	mov	r6, r0
 80100de:	460f      	mov	r7, r1
 80100e0:	4620      	mov	r0, r4
 80100e2:	4629      	mov	r1, r5
 80100e4:	f7f0 fae8 	bl	80006b8 <__aeabi_dmul>
 80100e8:	ec41 0b19 	vmov	d9, r0, r1
 80100ec:	f1ba 0f00 	cmp.w	sl, #0
 80100f0:	d15d      	bne.n	80101ae <__ieee754_exp+0x21e>
 80100f2:	2200      	movs	r2, #0
 80100f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80100f8:	4630      	mov	r0, r6
 80100fa:	4639      	mov	r1, r7
 80100fc:	f7f0 f924 	bl	8000348 <__aeabi_dsub>
 8010100:	4602      	mov	r2, r0
 8010102:	460b      	mov	r3, r1
 8010104:	ec51 0b19 	vmov	r0, r1, d9
 8010108:	f7f0 fc00 	bl	800090c <__aeabi_ddiv>
 801010c:	4622      	mov	r2, r4
 801010e:	462b      	mov	r3, r5
 8010110:	f7f0 f91a 	bl	8000348 <__aeabi_dsub>
 8010114:	4602      	mov	r2, r0
 8010116:	460b      	mov	r3, r1
 8010118:	2000      	movs	r0, #0
 801011a:	4957      	ldr	r1, [pc, #348]	; (8010278 <__ieee754_exp+0x2e8>)
 801011c:	f7f0 f914 	bl	8000348 <__aeabi_dsub>
 8010120:	e753      	b.n	800ffca <__ieee754_exp+0x3a>
 8010122:	4856      	ldr	r0, [pc, #344]	; (801027c <__ieee754_exp+0x2ec>)
 8010124:	a348      	add	r3, pc, #288	; (adr r3, 8010248 <__ieee754_exp+0x2b8>)
 8010126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801012e:	4629      	mov	r1, r5
 8010130:	4620      	mov	r0, r4
 8010132:	f7f0 fac1 	bl	80006b8 <__aeabi_dmul>
 8010136:	e9d6 2300 	ldrd	r2, r3, [r6]
 801013a:	f7f0 f907 	bl	800034c <__adddf3>
 801013e:	f7f0 fd6b 	bl	8000c18 <__aeabi_d2iz>
 8010142:	4682      	mov	sl, r0
 8010144:	f7f0 fa4e 	bl	80005e4 <__aeabi_i2d>
 8010148:	a341      	add	r3, pc, #260	; (adr r3, 8010250 <__ieee754_exp+0x2c0>)
 801014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014e:	4606      	mov	r6, r0
 8010150:	460f      	mov	r7, r1
 8010152:	f7f0 fab1 	bl	80006b8 <__aeabi_dmul>
 8010156:	4602      	mov	r2, r0
 8010158:	460b      	mov	r3, r1
 801015a:	4620      	mov	r0, r4
 801015c:	4629      	mov	r1, r5
 801015e:	f7f0 f8f3 	bl	8000348 <__aeabi_dsub>
 8010162:	a33d      	add	r3, pc, #244	; (adr r3, 8010258 <__ieee754_exp+0x2c8>)
 8010164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010168:	4680      	mov	r8, r0
 801016a:	4689      	mov	r9, r1
 801016c:	4630      	mov	r0, r6
 801016e:	4639      	mov	r1, r7
 8010170:	f7f0 faa2 	bl	80006b8 <__aeabi_dmul>
 8010174:	ec41 0b18 	vmov	d8, r0, r1
 8010178:	e76f      	b.n	801005a <__ieee754_exp+0xca>
 801017a:	4a41      	ldr	r2, [pc, #260]	; (8010280 <__ieee754_exp+0x2f0>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d811      	bhi.n	80101a4 <__ieee754_exp+0x214>
 8010180:	a323      	add	r3, pc, #140	; (adr r3, 8010210 <__ieee754_exp+0x280>)
 8010182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010186:	ee10 0a10 	vmov	r0, s0
 801018a:	4629      	mov	r1, r5
 801018c:	f7f0 f8de 	bl	800034c <__adddf3>
 8010190:	4b39      	ldr	r3, [pc, #228]	; (8010278 <__ieee754_exp+0x2e8>)
 8010192:	2200      	movs	r2, #0
 8010194:	f7f0 fd20 	bl	8000bd8 <__aeabi_dcmpgt>
 8010198:	b138      	cbz	r0, 80101aa <__ieee754_exp+0x21a>
 801019a:	4b37      	ldr	r3, [pc, #220]	; (8010278 <__ieee754_exp+0x2e8>)
 801019c:	2200      	movs	r2, #0
 801019e:	4620      	mov	r0, r4
 80101a0:	4629      	mov	r1, r5
 80101a2:	e710      	b.n	800ffc6 <__ieee754_exp+0x36>
 80101a4:	f04f 0a00 	mov.w	sl, #0
 80101a8:	e75f      	b.n	801006a <__ieee754_exp+0xda>
 80101aa:	4682      	mov	sl, r0
 80101ac:	e75d      	b.n	801006a <__ieee754_exp+0xda>
 80101ae:	4632      	mov	r2, r6
 80101b0:	463b      	mov	r3, r7
 80101b2:	2000      	movs	r0, #0
 80101b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80101b8:	f7f0 f8c6 	bl	8000348 <__aeabi_dsub>
 80101bc:	4602      	mov	r2, r0
 80101be:	460b      	mov	r3, r1
 80101c0:	ec51 0b19 	vmov	r0, r1, d9
 80101c4:	f7f0 fba2 	bl	800090c <__aeabi_ddiv>
 80101c8:	4602      	mov	r2, r0
 80101ca:	460b      	mov	r3, r1
 80101cc:	ec51 0b18 	vmov	r0, r1, d8
 80101d0:	f7f0 f8ba 	bl	8000348 <__aeabi_dsub>
 80101d4:	4642      	mov	r2, r8
 80101d6:	464b      	mov	r3, r9
 80101d8:	f7f0 f8b6 	bl	8000348 <__aeabi_dsub>
 80101dc:	4602      	mov	r2, r0
 80101de:	460b      	mov	r3, r1
 80101e0:	2000      	movs	r0, #0
 80101e2:	4925      	ldr	r1, [pc, #148]	; (8010278 <__ieee754_exp+0x2e8>)
 80101e4:	f7f0 f8b0 	bl	8000348 <__aeabi_dsub>
 80101e8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80101ec:	4592      	cmp	sl, r2
 80101ee:	db02      	blt.n	80101f6 <__ieee754_exp+0x266>
 80101f0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80101f4:	e6e9      	b.n	800ffca <__ieee754_exp+0x3a>
 80101f6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80101fa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80101fe:	2200      	movs	r2, #0
 8010200:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010204:	e6f9      	b.n	800fffa <__ieee754_exp+0x6a>
 8010206:	bf00      	nop
 8010208:	fefa39ef 	.word	0xfefa39ef
 801020c:	40862e42 	.word	0x40862e42
 8010210:	8800759c 	.word	0x8800759c
 8010214:	7e37e43c 	.word	0x7e37e43c
 8010218:	d52d3051 	.word	0xd52d3051
 801021c:	c0874910 	.word	0xc0874910
 8010220:	72bea4d0 	.word	0x72bea4d0
 8010224:	3e663769 	.word	0x3e663769
 8010228:	c5d26bf1 	.word	0xc5d26bf1
 801022c:	3ebbbd41 	.word	0x3ebbbd41
 8010230:	af25de2c 	.word	0xaf25de2c
 8010234:	3f11566a 	.word	0x3f11566a
 8010238:	16bebd93 	.word	0x16bebd93
 801023c:	3f66c16c 	.word	0x3f66c16c
 8010240:	5555553e 	.word	0x5555553e
 8010244:	3fc55555 	.word	0x3fc55555
 8010248:	652b82fe 	.word	0x652b82fe
 801024c:	3ff71547 	.word	0x3ff71547
 8010250:	fee00000 	.word	0xfee00000
 8010254:	3fe62e42 	.word	0x3fe62e42
 8010258:	35793c76 	.word	0x35793c76
 801025c:	3dea39ef 	.word	0x3dea39ef
 8010260:	40862e41 	.word	0x40862e41
 8010264:	7fefffff 	.word	0x7fefffff
 8010268:	3fd62e42 	.word	0x3fd62e42
 801026c:	3ff0a2b1 	.word	0x3ff0a2b1
 8010270:	080244c0 	.word	0x080244c0
 8010274:	080244d0 	.word	0x080244d0
 8010278:	3ff00000 	.word	0x3ff00000
 801027c:	080244b0 	.word	0x080244b0
 8010280:	3e2fffff 	.word	0x3e2fffff

08010284 <__ieee754_sqrtf>:
 8010284:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010288:	4770      	bx	lr

0801028a <finite>:
 801028a:	b082      	sub	sp, #8
 801028c:	ed8d 0b00 	vstr	d0, [sp]
 8010290:	9801      	ldr	r0, [sp, #4]
 8010292:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010296:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801029a:	0fc0      	lsrs	r0, r0, #31
 801029c:	b002      	add	sp, #8
 801029e:	4770      	bx	lr

080102a0 <_init>:
 80102a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102a2:	bf00      	nop
 80102a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102a6:	bc08      	pop	{r3}
 80102a8:	469e      	mov	lr, r3
 80102aa:	4770      	bx	lr

080102ac <_fini>:
 80102ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ae:	bf00      	nop
 80102b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102b2:	bc08      	pop	{r3}
 80102b4:	469e      	mov	lr, r3
 80102b6:	4770      	bx	lr
